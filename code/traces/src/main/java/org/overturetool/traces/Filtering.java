//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-03-07 by the VDM++ to JAVA Code Generator
// (v8.2b - Thu 26-Feb-2009 17:11:12)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.traces;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class Filtering {


// ***** VDMTOOLS START Name=TraceResult KEEP=NO
  public static class TraceResult implements Record {

    public Object status;

    public String output;


    public TraceResult () {}


    public TraceResult (Object p1, String p2) {

      status = p1;
      output = p2;
    }


    public Object clone () {
      return new TraceResult((Object) UTIL.clone(status), output);
    }


    public String toString () {
      return "mk_Filtering`TraceResult(" + UTIL.toString(status) + "," + UTIL.toString(output) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof TraceResult)) 
        return false;
      else {

        TraceResult temp = (TraceResult) obj;
        return UTIL.equals(status, temp.status) && UTIL.equals(output, temp.output);
      }
    }


    public int hashCode () {
      return (status == null ? 0 : status.hashCode()) + (output == null ? 0 : output.hashCode());
    }

  }
// ***** VDMTOOLS END Name=TraceResult
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=allTestCases KEEP=NO
  private HashMap allTestCases = new HashMap();
// ***** VDMTOOLS END Name=allTestCases

// ***** VDMTOOLS START Name=succTestCase KEEP=NO
  private HashMap succTestCase = new HashMap();
// ***** VDMTOOLS END Name=succTestCase

// ***** VDMTOOLS START Name=failedTestCases KEEP=NO
  private HashMap failedTestCases = new HashMap();
// ***** VDMTOOLS END Name=failedTestCases

// ***** VDMTOOLS START Name=testCaseResults KEEP=NO
  private HashMap testCaseResults = new HashMap();
// ***** VDMTOOLS END Name=testCaseResults

// ***** VDMTOOLS START Name=inconclusiveTestCase KEEP=NO
  private HashMap inconclusiveTestCase = new HashMap();
// ***** VDMTOOLS END Name=inconclusiveTestCase

// ***** VDMTOOLS START Name=skippedTestCase KEEP=NO
  private HashMap skippedTestCase = new HashMap();
// ***** VDMTOOLS END Name=skippedTestCase

// ***** VDMTOOLS START Name=expandFaildTestCase KEEP=NO
  private HashMap expandFaildTestCase = new HashMap();
// ***** VDMTOOLS END Name=expandFaildTestCase

// ***** VDMTOOLS START Name=tb KEEP=NO
  private ToolBox tb = null;
// ***** VDMTOOLS END Name=tb

// ***** VDMTOOLS START Name=errorLog KEEP=NO
  private RTERR errorLog = null;
// ***** VDMTOOLS END Name=errorLog


// ***** VDMTOOLS START Name=vdm_init_Filtering KEEP=NO
  private void vdm_init_Filtering () throws CGException {
    try {

      succTestCase = new HashMap();
      failedTestCases = new HashMap();
      testCaseResults = new HashMap();
      inconclusiveTestCase = new HashMap();
      skippedTestCase = new HashMap();
      expandFaildTestCase = new HashMap();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Filtering


// ***** VDMTOOLS START Name=Filtering KEEP=NO
  public Filtering () throws CGException {
    vdm_init_Filtering();
  }
// ***** VDMTOOLS END Name=Filtering


// ***** VDMTOOLS START Name=Filtering#3|HashMap|ToolBox|RTERR KEEP=NO
  public Filtering (final HashMap t, final ToolBox tool, final RTERR errLog) throws CGException {

    vdm_init_Filtering();
    {

      errorLog = (RTERR) UTIL.clone(errLog);
      allTestCases = (HashMap) UTIL.clone(fillMap(t));
      failedTestCases = (HashMap) UTIL.clone(new HashMap());
      tb = (ToolBox) UTIL.clone(tool);
    }
  }
// ***** VDMTOOLS END Name=Filtering#3|HashMap|ToolBox|RTERR


// ***** VDMTOOLS START Name=GetResult#3|String|String|Long KEEP=NO
  public Tuple GetResult (final String className, final String trace, final Long num) throws CGException {

    Tuple rexpr_4 = new Tuple(2);
    rexpr_4 = new Tuple(2);
    Vector tmpVar_5 = null;
    tmpVar_5 = Util.ExprToString((Vector) UTIL.ConvertToList(((HashMap) ((HashMap) allTestCases.get(className)).get(trace)).get(num)));
    rexpr_4.SetField(1, tmpVar_5);
    rexpr_4.SetField(2, (Vector) UTIL.ConvertToList(((HashMap) ((HashMap) testCaseResults.get(className)).get(trace)).get(num)));
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=GetResult#3|String|String|Long


// ***** VDMTOOLS START Name=GetResults KEEP=NO
  public HashMap GetResults () throws CGException {
    return testCaseResults;
  }
// ***** VDMTOOLS END Name=GetResults


// ***** VDMTOOLS START Name=GetStatements KEEP=NO
  public HashMap GetStatements () throws CGException {

    HashMap statements = new HashMap();
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(allTestCases.keySet());
      String clnm = null;
      for (Iterator enm_42 = iset_1.iterator(); enm_42.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_42.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) allTestCases.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          {

            HashSet iset_11 = new HashSet();
            iset_11.clear();
            iset_11.addAll(tc_uast.keySet());
            String tdnm = null;
            for (Iterator enm_41 = iset_11.iterator(); enm_41.hasNext(); ) {

              String elem_12 = UTIL.ConvertToString(enm_41.next());
              tdnm = elem_12;
              {

                HashMap tmpVal_18 = new HashMap();
                tmpVal_18 = (HashMap) tc_uast.get(tdnm);
                HashMap tc_um = new HashMap();
                tc_um = tmpVal_18;
                {

                  HashSet iset_21 = new HashSet();
                  iset_21.clear();
                  iset_21.addAll(tc_um.keySet());
                  Long n = null;
                  for (Iterator enm_40 = iset_21.iterator(); enm_40.hasNext(); ) {

                    Long elem_22 = UTIL.NumberToLong(enm_40.next());
                    n = elem_22;
                    {

                      Vector rhs_27 = null;
                      rhs_27 = Util.ExprToString((Vector) UTIL.ConvertToList(tc_um.get(n)));
                      HashMap level_33 = statements.containsKey(clnm) ? (HashMap) statements.get(clnm) : new HashMap();
                      HashMap level_31 = level_33.containsKey(tdnm) ? (HashMap) level_33.get(tdnm) : new HashMap();
                      level_31.put(n, rhs_27);
                      level_33.put(tdnm, level_31);
                      statements.put(clnm, level_33);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return statements;
  }
// ***** VDMTOOLS END Name=GetStatements


// ***** VDMTOOLS START Name=GetTraceClassNames KEEP=NO
  public HashSet GetTraceClassNames () throws CGException {

    HashSet rexpr_1 = new HashSet();
    HashSet res_s_2 = new HashSet();
    {

      HashSet e_set_5 = new HashSet();
      e_set_5.clear();
      e_set_5.addAll(allTestCases.keySet());
      String clnm = null;
      {
        for (Iterator enm_8 = e_set_5.iterator(); enm_8.hasNext(); ) {

          String elem_7 = UTIL.ConvertToString(enm_8.next());
          clnm = elem_7;
          res_s_2.add(clnm);
        }
      }
    }
    rexpr_1 = res_s_2;
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=GetTraceClassNames


// ***** VDMTOOLS START Name=GetTraces#1|String KEEP=NO
  public HashSet GetTraces (final String className) throws CGException {

    HashSet rexpr_2 = new HashSet();
    HashSet res_s_3 = new HashSet();
    {

      HashSet e_set_6 = new HashSet();
      e_set_6.clear();
      e_set_6.addAll(((HashMap) allTestCases.get(className)).keySet());
      String clnm = null;
      {
        for (Iterator enm_11 = e_set_6.iterator(); enm_11.hasNext(); ) {

          String elem_10 = UTIL.ConvertToString(enm_11.next());
          clnm = elem_10;
          res_s_3.add(clnm);
        }
      }
    }
    rexpr_2 = res_s_3;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=GetTraces#1|String


// ***** VDMTOOLS START Name=GetTraceTestCases#2|String|String KEEP=NO
  public HashSet GetTraceTestCases (final String className, final String trace) throws CGException {

    HashSet rexpr_3 = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      HashSet e_set_7 = new HashSet();
      e_set_7.clear();
      e_set_7.addAll(((HashMap) ((HashMap) allTestCases.get(className)).get(trace)).keySet());
      Long num = null;
      {
        for (Iterator enm_14 = e_set_7.iterator(); enm_14.hasNext(); ) {

          Long elem_13 = UTIL.NumberToLong(enm_14.next());
          num = elem_13;
          res_s_4.add(num);
        }
      }
    }
    rexpr_3 = res_s_4;
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=GetTraceTestCases#2|String|String


// ***** VDMTOOLS START Name=GetTraceDefinitionString#3|IOmlSpecifications|String|String KEEP=NO
  public String GetTraceDefinitionString (final IOmlSpecifications spec, final String className, final String trace) throws CGException {

    Oml2VppVisitor ppvisitor = (Oml2VppVisitor) new Oml2VppVisitor();
    HashSet td1 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      Vector e_set_45 = null;
      e_set_45 = spec.getClassList();
      IOmlClass cl = null;
      {
        for (Iterator enm_47 = e_set_45.iterator(); enm_47.hasNext(); ) {

          IOmlClass elem_46 = (IOmlClass) enm_47.next();
          cl = (IOmlClass) elem_46;
          Boolean pred_41 = null;
          String var1_42 = null;
          var1_42 = cl.getIdentifier();
          pred_41 = new Boolean(UTIL.equals(var1_42, className));
          if (pred_41.booleanValue()) {

            IOmlNamedTrace res_s_8 = null;
            {

              HashSet tmpSet_9 = new HashSet();
              HashSet res_s_13 = new HashSet();
              {

                Vector e_set_22 = null;
                {

                  HashSet tmpSet_23 = new HashSet();
                  HashSet res_s_27 = new HashSet();
                  {

                    Vector e_set_34 = null;
                    e_set_34 = cl.getClassBody();
                    IOmlDefinitionBlock dfs = null;
                    {
                      for (Iterator enm_36 = e_set_34.iterator(); enm_36.hasNext(); ) {

                        IOmlDefinitionBlock elem_35 = (IOmlDefinitionBlock) enm_36.next();
                        dfs = (IOmlDefinitionBlock) elem_35;
                        if (new Boolean(dfs instanceof IOmlTraceDefinitions).booleanValue()) {

                          Vector res_s_28 = null;
                          {

                            IOmlDefinitionBlock tmpVal_30 = null;
                            tmpVal_30 = (IOmlDefinitionBlock) dfs;
                            IOmlTraceDefinitions t = null;
                            t = (IOmlTraceDefinitions) tmpVal_30;
                            res_s_28 = t.getTraces();
                          }
                          res_s_27.add(res_s_28);
                        }
                      }
                    }
                  }
                  tmpSet_23 = res_s_27;
                  Vector tt = null;
                  boolean succ_25 = false;
                  for (Iterator enm_37 = tmpSet_23.iterator(); enm_37.hasNext() && !succ_25; ) {

                    Vector tmpElem_26 = (Vector) UTIL.ConvertToList(enm_37.next());
                    succ_25 = true;
                    tt = tmpElem_26;
                  }
                  if (!succ_25) 
                    UTIL.RunTime("Run-Time Error:The binding environment was empty");
                  e_set_22 = tt;
                }
                IOmlNamedTrace df = null;
                {
                  for (Iterator enm_39 = e_set_22.iterator(); enm_39.hasNext(); ) {

                    IOmlNamedTrace elem_38 = (IOmlNamedTrace) enm_39.next();
                    df = (IOmlNamedTrace) elem_38;
                    Boolean pred_15 = null;
                    {

                      IOmlNamedTrace tmpVal_17 = null;
                      tmpVal_17 = (IOmlNamedTrace) df;
                      IOmlNamedTrace t = null;
                      t = (IOmlNamedTrace) tmpVal_17;
                      String var1_18 = null;
                      Vector par_19 = null;
                      par_19 = t.getName();
                      var1_18 = Util.GetNameOfTrace(par_19);
                      pred_15 = new Boolean(UTIL.equals(var1_18, trace));
                    }
                    if (pred_15.booleanValue()) {
                      res_s_13.add(df);
                    }
                  }
                }
              }
              tmpSet_9 = res_s_13;
              IOmlNamedTrace td = null;
              boolean succ_11 = false;
              for (Iterator enm_40 = tmpSet_9.iterator(); enm_40.hasNext() && !succ_11; ) {

                IOmlNamedTrace tmpElem_12 = (IOmlNamedTrace) enm_40.next();
                succ_11 = true;
                td = (IOmlNamedTrace) tmpElem_12;
              }
              if (!succ_11) 
                UTIL.RunTime("Run-Time Error:The binding environment was empty");
              res_s_8 = (IOmlNamedTrace) td;
            }
            res_s_7.add(res_s_8);
          }
        }
      }
    }
    td1 = res_s_7;
    {

      {

        HashSet tmpSet_48 = new HashSet();
        tmpSet_48 = td1;
        IOmlNamedTrace tmp = null;
        boolean succ_50 = false;
        for (Iterator enm_52 = tmpSet_48.iterator(); enm_52.hasNext() && !succ_50; ) {

          IOmlNamedTrace tmpElem_51 = (IOmlNamedTrace) enm_52.next();
          succ_50 = true;
          tmp = (IOmlNamedTrace) tmpElem_51;
        }
        if (!succ_50) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        ppvisitor.visitNamedTrace((IOmlNamedTrace) tmp);
      }
      String rexpr_55 = null;
      rexpr_55 = ppvisitor.result;
      return rexpr_55;
    }
  }
// ***** VDMTOOLS END Name=GetTraceDefinitionString#3|IOmlSpecifications|String|String


// ***** VDMTOOLS START Name=GetTraceDefinition#3|IOmlSpecifications|String|String KEEP=NO
  public IOmlNamedTrace GetTraceDefinition (final IOmlSpecifications spec, final String className, final String trace) throws CGException {

    HashSet td1 = new HashSet();
    HashSet res_s_6 = new HashSet();
    {

      Vector e_set_44 = null;
      e_set_44 = spec.getClassList();
      IOmlClass cl = null;
      {
        for (Iterator enm_46 = e_set_44.iterator(); enm_46.hasNext(); ) {

          IOmlClass elem_45 = (IOmlClass) enm_46.next();
          cl = (IOmlClass) elem_45;
          Boolean pred_40 = null;
          String var1_41 = null;
          var1_41 = cl.getIdentifier();
          pred_40 = new Boolean(UTIL.equals(var1_41, className));
          if (pred_40.booleanValue()) {

            IOmlNamedTrace res_s_7 = null;
            {

              HashSet tmpSet_8 = new HashSet();
              HashSet res_s_12 = new HashSet();
              {

                Vector e_set_21 = null;
                {

                  HashSet tmpSet_22 = new HashSet();
                  HashSet res_s_26 = new HashSet();
                  {

                    Vector e_set_33 = null;
                    e_set_33 = cl.getClassBody();
                    IOmlDefinitionBlock dfs = null;
                    {
                      for (Iterator enm_35 = e_set_33.iterator(); enm_35.hasNext(); ) {

                        IOmlDefinitionBlock elem_34 = (IOmlDefinitionBlock) enm_35.next();
                        dfs = (IOmlDefinitionBlock) elem_34;
                        if (new Boolean(dfs instanceof IOmlTraceDefinitions).booleanValue()) {

                          Vector res_s_27 = null;
                          {

                            IOmlDefinitionBlock tmpVal_29 = null;
                            tmpVal_29 = (IOmlDefinitionBlock) dfs;
                            IOmlTraceDefinitions t = null;
                            t = (IOmlTraceDefinitions) tmpVal_29;
                            res_s_27 = t.getTraces();
                          }
                          res_s_26.add(res_s_27);
                        }
                      }
                    }
                  }
                  tmpSet_22 = res_s_26;
                  Vector tt = null;
                  boolean succ_24 = false;
                  for (Iterator enm_36 = tmpSet_22.iterator(); enm_36.hasNext() && !succ_24; ) {

                    Vector tmpElem_25 = (Vector) UTIL.ConvertToList(enm_36.next());
                    succ_24 = true;
                    tt = tmpElem_25;
                  }
                  if (!succ_24) 
                    UTIL.RunTime("Run-Time Error:The binding environment was empty");
                  e_set_21 = tt;
                }
                IOmlNamedTrace df = null;
                {
                  for (Iterator enm_38 = e_set_21.iterator(); enm_38.hasNext(); ) {

                    IOmlNamedTrace elem_37 = (IOmlNamedTrace) enm_38.next();
                    df = (IOmlNamedTrace) elem_37;
                    Boolean pred_14 = null;
                    {

                      IOmlNamedTrace tmpVal_16 = null;
                      tmpVal_16 = (IOmlNamedTrace) df;
                      IOmlNamedTrace t = null;
                      t = (IOmlNamedTrace) tmpVal_16;
                      String var1_17 = null;
                      Vector par_18 = null;
                      par_18 = t.getName();
                      var1_17 = Util.GetNameOfTrace(par_18);
                      pred_14 = new Boolean(UTIL.equals(var1_17, trace));
                    }
                    if (pred_14.booleanValue()) {
                      res_s_12.add(df);
                    }
                  }
                }
              }
              tmpSet_8 = res_s_12;
              IOmlNamedTrace td = null;
              boolean succ_10 = false;
              for (Iterator enm_39 = tmpSet_8.iterator(); enm_39.hasNext() && !succ_10; ) {

                IOmlNamedTrace tmpElem_11 = (IOmlNamedTrace) enm_39.next();
                succ_10 = true;
                td = (IOmlNamedTrace) tmpElem_11;
              }
              if (!succ_10) 
                UTIL.RunTime("Run-Time Error:The binding environment was empty");
              res_s_7 = (IOmlNamedTrace) td;
            }
            res_s_6.add(res_s_7);
          }
        }
      }
    }
    td1 = res_s_6;
    {

      HashSet tmpSet_47 = new HashSet();
      tmpSet_47 = td1;
      IOmlNamedTrace tmp = null;
      boolean succ_49 = false;
      for (Iterator enm_51 = tmpSet_47.iterator(); enm_51.hasNext() && !succ_49; ) {

        IOmlNamedTrace tmpElem_50 = (IOmlNamedTrace) enm_51.next();
        succ_49 = true;
        tmp = (IOmlNamedTrace) tmpElem_50;
      }
      if (!succ_49) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      return (IOmlNamedTrace) tmp;
    }
  }
// ***** VDMTOOLS END Name=GetTraceDefinition#3|IOmlSpecifications|String|String


// ***** VDMTOOLS START Name=GetFaildCount KEEP=NO
  public Long GetFaildCount () throws CGException {

    Long count = new Long(0);
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(failedTestCases.keySet());
      String clnm = null;
      for (Iterator enm_25 = iset_1.iterator(); enm_25.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_25.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) failedTestCases.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          {

            HashSet iset_11 = new HashSet();
            iset_11.clear();
            iset_11.addAll(tc_uast.keySet());
            String tdnm = null;
            for (Iterator enm_24 = iset_11.iterator(); enm_24.hasNext(); ) {

              String elem_12 = UTIL.ConvertToString(enm_24.next());
              tdnm = elem_12;
              {

                Long rhs_17 = null;
                Long var2_19 = null;
                HashSet unArg_20 = new HashSet();
                unArg_20.clear();
                unArg_20.addAll(((HashMap) tc_uast.get(tdnm)).keySet());
                var2_19 = new Long(unArg_20.size());
                rhs_17 = new Long(count.intValue() + var2_19.intValue());
                count = UTIL.NumberToLong(UTIL.clone(rhs_17));
              }
            }
          }
        }
      }
    }
    return count;
  }
// ***** VDMTOOLS END Name=GetFaildCount


// ***** VDMTOOLS START Name=GetInconclusiveCount KEEP=NO
  public Long GetInconclusiveCount () throws CGException {

    Long count = new Long(0);
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(inconclusiveTestCase.keySet());
      String clnm = null;
      for (Iterator enm_25 = iset_1.iterator(); enm_25.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_25.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) inconclusiveTestCase.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          {

            HashSet iset_11 = new HashSet();
            iset_11.clear();
            iset_11.addAll(tc_uast.keySet());
            String tdnm = null;
            for (Iterator enm_24 = iset_11.iterator(); enm_24.hasNext(); ) {

              String elem_12 = UTIL.ConvertToString(enm_24.next());
              tdnm = elem_12;
              {

                Long rhs_17 = null;
                Long var2_19 = null;
                HashSet unArg_20 = new HashSet();
                unArg_20.clear();
                unArg_20.addAll(((HashMap) tc_uast.get(tdnm)).values());
                var2_19 = new Long(unArg_20.size());
                rhs_17 = new Long(count.intValue() + var2_19.intValue());
                count = UTIL.NumberToLong(UTIL.clone(rhs_17));
              }
            }
          }
        }
      }
    }
    return count;
  }
// ***** VDMTOOLS END Name=GetInconclusiveCount


// ***** VDMTOOLS START Name=GetTestCount KEEP=NO
  public Long GetTestCount () throws CGException {

    Long count = new Long(0);
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(allTestCases.keySet());
      String clnm = null;
      for (Iterator enm_25 = iset_1.iterator(); enm_25.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_25.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) allTestCases.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          {

            HashSet iset_11 = new HashSet();
            iset_11.clear();
            iset_11.addAll(tc_uast.keySet());
            String tdnm = null;
            for (Iterator enm_24 = iset_11.iterator(); enm_24.hasNext(); ) {

              String elem_12 = UTIL.ConvertToString(enm_24.next());
              tdnm = elem_12;
              {

                Long rhs_17 = null;
                Long var2_19 = null;
                HashSet unArg_20 = new HashSet();
                unArg_20.clear();
                unArg_20.addAll(((HashMap) tc_uast.get(tdnm)).keySet());
                var2_19 = new Long(unArg_20.size());
                rhs_17 = new Long(count.intValue() + var2_19.intValue());
                count = UTIL.NumberToLong(UTIL.clone(rhs_17));
              }
            }
          }
        }
      }
    }
    return count;
  }
// ***** VDMTOOLS END Name=GetTestCount


// ***** VDMTOOLS START Name=GetSuccessCount KEEP=NO
  public Long GetSuccessCount () throws CGException {

    Long count = new Long(0);
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(succTestCase.keySet());
      String clnm = null;
      for (Iterator enm_20 = iset_1.iterator(); enm_20.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_20.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) succTestCase.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          Long rhs_11 = null;
          Long var2_13 = null;
          HashSet unArg_14 = new HashSet();
          HashSet unArg_15 = new HashSet();
          unArg_15.clear();
          unArg_15.addAll(tc_uast.values());
          HashSet rduset_17 = new HashSet();
          for (Iterator enm_19 = unArg_15.iterator(); enm_19.hasNext(); ) {

            HashSet e_18 = (HashSet) enm_19.next();
            rduset_17.addAll(e_18);
          }
          unArg_14 = rduset_17;
          var2_13 = new Long(unArg_14.size());
          rhs_11 = new Long(count.intValue() + var2_13.intValue());
          count = UTIL.NumberToLong(UTIL.clone(rhs_11));
        }
      }
    }
    return count;
  }
// ***** VDMTOOLS END Name=GetSuccessCount


// ***** VDMTOOLS START Name=GetSkippedCount KEEP=NO
  public Long GetSkippedCount () throws CGException {

    Long count = new Long(0);
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(skippedTestCase.keySet());
      String clnm = null;
      for (Iterator enm_20 = iset_1.iterator(); enm_20.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_20.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) skippedTestCase.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          Long rhs_11 = null;
          Long var2_13 = null;
          HashSet unArg_14 = new HashSet();
          HashSet unArg_15 = new HashSet();
          unArg_15.clear();
          unArg_15.addAll(tc_uast.values());
          HashSet rduset_17 = new HashSet();
          for (Iterator enm_19 = unArg_15.iterator(); enm_19.hasNext(); ) {

            HashSet e_18 = (HashSet) enm_19.next();
            rduset_17.addAll(e_18);
          }
          unArg_14 = rduset_17;
          var2_13 = new Long(unArg_14.size());
          rhs_11 = new Long(count.intValue() + var2_13.intValue());
          count = UTIL.NumberToLong(UTIL.clone(rhs_11));
        }
      }
    }
    return count;
  }
// ***** VDMTOOLS END Name=GetSkippedCount


// ***** VDMTOOLS START Name=GetSkippedCount#2|String|String KEEP=NO
  public Long GetSkippedCount (final String clnm, final String trnm) throws CGException {

    Boolean cond_3 = null;
    cond_3 = new Boolean(skippedTestCase.containsKey(clnm));
    if (cond_3.booleanValue()) {

      Boolean cond_6 = null;
      cond_6 = new Boolean(((HashMap) skippedTestCase.get(clnm)).containsKey(trnm));
      if (cond_6.booleanValue()) 
        return new Long(((HashSet) ((HashMap) skippedTestCase.get(clnm)).get(trnm)).size());
    }
    return new Long(0);
  }
// ***** VDMTOOLS END Name=GetSkippedCount#2|String|String


// ***** VDMTOOLS START Name=GetExpandFaildCount KEEP=NO
  public Long GetExpandFaildCount () throws CGException {

    Long count = new Long(0);
    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(expandFaildTestCase.keySet());
      String clnm = null;
      for (Iterator enm_20 = iset_1.iterator(); enm_20.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_20.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) expandFaildTestCase.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          Long rhs_11 = null;
          Long var2_13 = null;
          HashSet unArg_14 = new HashSet();
          HashSet unArg_15 = new HashSet();
          unArg_15.clear();
          unArg_15.addAll(tc_uast.values());
          HashSet rduset_17 = new HashSet();
          for (Iterator enm_19 = unArg_15.iterator(); enm_19.hasNext(); ) {

            HashSet e_18 = (HashSet) enm_19.next();
            rduset_17.addAll(e_18);
          }
          unArg_14 = rduset_17;
          var2_13 = new Long(unArg_14.size());
          rhs_11 = new Long(count.intValue() + var2_13.intValue());
          count = UTIL.NumberToLong(UTIL.clone(rhs_11));
        }
      }
    }
    return count;
  }
// ***** VDMTOOLS END Name=GetExpandFaildCount


// ***** VDMTOOLS START Name=SetFail#4|String|String|Long|Long KEEP=NO
  public void SetFail (final String className, final String trace, final Long num, final Long statementNumber) throws CGException {

    HashMap level_9 = testCaseResults.containsKey(className) ? (HashMap) testCaseResults.get(className) : new HashMap();
    HashMap level_8 = level_9.containsKey(trace) ? (HashMap) level_9.get(trace) : new HashMap();
    Vector level_7 = level_8.containsKey(num) ? (Vector) UTIL.ConvertToList(level_8.get(num)) : new Vector();
    TraceResult level_6 = null;
    if ((1 <= statementNumber.intValue()) && (statementNumber.intValue() <= level_7.size())) 
      level_6 = (TraceResult) level_7.get(statementNumber.intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    level_6.status = new quotes.FAIL();
    level_7.set(((Long) statementNumber).intValue() - 1, level_6);
    level_8.put(num, level_7);
    level_9.put(trace, level_8);
    testCaseResults.put(className, level_9);
  }
// ***** VDMTOOLS END Name=SetFail#4|String|String|Long|Long


// ***** VDMTOOLS START Name=SetOk#4|String|String|Long|Long KEEP=NO
  public void SetOk (final String className, final String trace, final Long num, final Long statementNumber) throws CGException {

    HashMap level_9 = testCaseResults.containsKey(className) ? (HashMap) testCaseResults.get(className) : new HashMap();
    HashMap level_8 = level_9.containsKey(trace) ? (HashMap) level_9.get(trace) : new HashMap();
    Vector level_7 = level_8.containsKey(num) ? (Vector) UTIL.ConvertToList(level_8.get(num)) : new Vector();
    TraceResult level_6 = null;
    if ((1 <= statementNumber.intValue()) && (statementNumber.intValue() <= level_7.size())) 
      level_6 = (TraceResult) level_7.get(statementNumber.intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    level_6.status = new quotes.OK();
    level_7.set(((Long) statementNumber).intValue() - 1, level_6);
    level_8.put(num, level_7);
    level_9.put(trace, level_8);
    testCaseResults.put(className, level_9);
  }
// ***** VDMTOOLS END Name=SetOk#4|String|String|Long|Long


// ***** VDMTOOLS START Name=SetInconclusive#4|String|String|Long|Long KEEP=NO
  public void SetInconclusive (final String className, final String trace, final Long num, final Long statementNumber) throws CGException {

    HashMap level_9 = testCaseResults.containsKey(className) ? (HashMap) testCaseResults.get(className) : new HashMap();
    HashMap level_8 = level_9.containsKey(trace) ? (HashMap) level_9.get(trace) : new HashMap();
    Vector level_7 = level_8.containsKey(num) ? (Vector) UTIL.ConvertToList(level_8.get(num)) : new Vector();
    TraceResult level_6 = null;
    if ((1 <= statementNumber.intValue()) && (statementNumber.intValue() <= level_7.size())) 
      level_6 = (TraceResult) level_7.get(statementNumber.intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    level_6.status = new quotes.INCONCLUSIVE();
    level_7.set(((Long) statementNumber).intValue() - 1, level_6);
    level_8.put(num, level_7);
    level_9.put(trace, level_8);
    testCaseResults.put(className, level_9);
  }
// ***** VDMTOOLS END Name=SetInconclusive#4|String|String|Long|Long


// ***** VDMTOOLS START Name=filterAll KEEP=NO
  public HashMap filterAll () throws CGException {

    {

      HashSet iset_1 = new HashSet();
      iset_1.clear();
      iset_1.addAll(allTestCases.keySet());
      String clnm = null;
      for (Iterator enm_50 = iset_1.iterator(); enm_50.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_50.next());
        clnm = elem_2;
        {

          HashMap tmpVal_8 = new HashMap();
          tmpVal_8 = (HashMap) allTestCases.get(clnm);
          HashMap tc_uast = new HashMap();
          tc_uast = tmpVal_8;
          {

            HashSet iset_11 = new HashSet();
            iset_11.clear();
            iset_11.addAll(tc_uast.keySet());
            String tdnm = null;
            for (Iterator enm_49 = iset_11.iterator(); enm_49.hasNext(); ) {

              String elem_12 = UTIL.ConvertToString(enm_49.next());
              tdnm = elem_12;
              {

                HashMap tmpVal_18 = new HashMap();
                tmpVal_18 = (HashMap) tc_uast.get(tdnm);
                HashMap tc_um = new HashMap();
                tc_um = tmpVal_18;
                {

                  HashSet iset_21 = new HashSet();
                  iset_21.clear();
                  iset_21.addAll(tc_um.keySet());
                  Long n = null;
                  for (Iterator enm_48 = iset_21.iterator(); enm_48.hasNext(); ) {

                    Long elem_22 = UTIL.NumberToLong(enm_48.next());
                    n = elem_22;
                    {

                      Object res = null;
                      res = ExecuteTraceTestCase(clnm, tdnm, n, (Vector) UTIL.ConvertToList(tc_um.get(n)));
                      {

                        HashMap level_41 = testCaseResults.containsKey(clnm) ? (HashMap) testCaseResults.get(clnm) : new HashMap();
                        HashMap level_39 = level_41.containsKey(tdnm) ? (HashMap) level_41.get(tdnm) : new HashMap();
                        level_39.put(n, res);
                        level_41.put(tdnm, level_39);
                        testCaseResults.put(clnm, level_41);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return testCaseResults;
  }
// ***** VDMTOOLS END Name=filterAll


// ***** VDMTOOLS START Name=ExecuteTraceTestCase#3|String|String|Long KEEP=NO
  public HashMap ExecuteTraceTestCase (final String clnm, final String tdnm, final Long n) throws CGException {

    Vector tmpVal_5 = null;
    tmpVal_5 = (Vector) UTIL.ConvertToList(((HashMap) ((HashMap) allTestCases.get(clnm)).get(tdnm)).get(n));
    Vector tc_uast = null;
    tc_uast = tmpVal_5;
    Object res = null;
    res = ExecuteTraceTestCase(clnm, tdnm, n, tc_uast);
    {

      HashMap level_23 = testCaseResults.containsKey(clnm) ? (HashMap) testCaseResults.get(clnm) : new HashMap();
      HashMap level_21 = level_23.containsKey(tdnm) ? (HashMap) level_23.get(tdnm) : new HashMap();
      level_21.put(n, res);
      level_23.put(tdnm, level_21);
      testCaseResults.put(clnm, level_23);
      HashMap rexpr_30 = new HashMap();
      HashMap tmpVar2_32 = new HashMap();
      HashMap tmpVar2_34 = new HashMap();
      tmpVar2_34 = new HashMap();
      tmpVar2_34.put(n, res);
      tmpVar2_32 = new HashMap();
      tmpVar2_32.put(tdnm, tmpVar2_34);
      rexpr_30 = new HashMap();
      rexpr_30.put(clnm, tmpVar2_32);
      return rexpr_30;
    }
  }
// ***** VDMTOOLS END Name=ExecuteTraceTestCase#3|String|String|Long


// ***** VDMTOOLS START Name=ExecuteTraceTestCase#4|String|String|Long|Vector KEEP=NO
  public Vector ExecuteTraceTestCase (final String clnm, final String tdnm, final Long n, final Vector tc_uast) throws CGException {

    Vector res = new Vector();
    Long index = null;
    Boolean cond_5 = null;
    cond_5 = errorLog.HasError(clnm, tdnm);
    if (cond_5.booleanValue()) {

      TraceResult e_120 = null;
      e_120 = new TraceResult(new quotes.EXPAND_FAIL(), new String(""));
      res.add(e_120);
      expandFaildTestCase = (HashMap) UTIL.clone(AddTestCaseNum(clnm, tdnm, n, expandFaildTestCase));
    }
    else 
      if (new Boolean(!NoFailedPrefix(tc_uast).booleanValue()).booleanValue()) {

        Vector expressions = null;
        expressions = Util.ExprToString(tc_uast);
        {

          Vector results = null;
          results = tb.runTraceTestCase(clnm, expressions);
          {

            index = UTIL.NumberToLong(UTIL.clone(new Long(1)));
            while ( new Boolean((index.intValue()) <= (new Long(results.size()).intValue())).booleanValue()){

              Boolean cond_59 = null;
              Boolean unArg_60 = null;
              ToolBox.InterpreterResult tmpRec_61 = null;
              if ((1 <= index.intValue()) && (index.intValue() <= results.size())) 
                tmpRec_61 = (ToolBox.InterpreterResult) results.get(index.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              unArg_60 = (tmpRec_61).successfull;
              cond_59 = new Boolean(!unArg_60.booleanValue());
              if (cond_59.booleanValue()) {

                Boolean cond_76 = null;
                ToolBox.InterpreterResult par_77 = null;
                if ((1 <= index.intValue()) && (index.intValue() <= results.size())) 
                  par_77 = (ToolBox.InterpreterResult) results.get(index.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                cond_76 = tb.IsPreError(par_77);
                if (cond_76.booleanValue()) {

                  TraceResult e_98 = null;
                  String tmpVar_100 = null;
                  ToolBox.InterpreterResult tmpRec_101 = null;
                  if ((1 <= index.intValue()) && (index.intValue() <= results.size())) 
                    tmpRec_101 = (ToolBox.InterpreterResult) results.get(index.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  tmpVar_100 = (tmpRec_101).output;
                  e_98 = new TraceResult(new quotes.INCONCLUSIVE(), tmpVar_100);
                  res.add(e_98);
                  HashMap level_107 = inconclusiveTestCase.containsKey(clnm) ? (HashMap) inconclusiveTestCase.get(clnm) : new HashMap();
                  HashMap level_105 = level_107.containsKey(tdnm) ? (HashMap) level_107.get(tdnm) : new HashMap();
                  level_105.put(n, index);
                  level_107.put(tdnm, level_105);
                  inconclusiveTestCase.put(clnm, level_107);
                }
                else {

                  TraceResult e_81 = null;
                  String tmpVar_83 = null;
                  ToolBox.InterpreterResult tmpRec_84 = null;
                  if ((1 <= index.intValue()) && (index.intValue() <= results.size())) 
                    tmpRec_84 = (ToolBox.InterpreterResult) results.get(index.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  tmpVar_83 = (tmpRec_84).output;
                  e_81 = new TraceResult(new quotes.FAIL(), tmpVar_83);
                  res.add(e_81);
                  HashMap level_90 = failedTestCases.containsKey(clnm) ? (HashMap) failedTestCases.get(clnm) : new HashMap();
                  HashMap level_88 = level_90.containsKey(tdnm) ? (HashMap) level_90.get(tdnm) : new HashMap();
                  level_88.put(n, index);
                  level_90.put(tdnm, level_88);
                  failedTestCases.put(clnm, level_90);
                }
                index = UTIL.NumberToLong(UTIL.clone(new Long(results.size())));
              }
              else {

                TraceResult e_65 = null;
                String tmpVar_67 = null;
                ToolBox.InterpreterResult tmpRec_68 = null;
                if ((1 <= index.intValue()) && (index.intValue() <= results.size())) 
                  tmpRec_68 = (ToolBox.InterpreterResult) results.get(index.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                tmpVar_67 = (tmpRec_68).output;
                e_65 = new TraceResult(new quotes.OK(), tmpVar_67);
                res.add(e_65);
                succTestCase = (HashMap) UTIL.clone(AddTestCaseNum(clnm, tdnm, n, succTestCase));
              }
              index = UTIL.NumberToLong(UTIL.clone(new Long(index.intValue() + new Long(1).intValue())));
            }
          }
        }
      }
      else {

        Boolean cond_11 = null;
        Boolean var1_12 = null;
        Boolean var1_13 = null;
        HashSet var2_15 = new HashSet();
        var2_15.clear();
        var2_15.addAll(failedTestCases.keySet());
        var1_13 = new Boolean(!var2_15.contains(clnm));
        {
          if (!(var1_12 = var1_13).booleanValue()) {

            Boolean var2_17 = null;
            HashSet var2_19 = new HashSet();
            var2_19.clear();
            var2_19.addAll(((HashMap) failedTestCases.get(clnm)).keySet());
            var2_17 = new Boolean(!var2_19.contains(tdnm));
            var1_12 = var2_17;
          }
        }
        {
          if (!(cond_11 = var1_12).booleanValue()) {

            Boolean var2_23 = null;
            HashSet var2_25 = new HashSet();
            var2_25.clear();
            var2_25.addAll(((HashMap) ((HashMap) failedTestCases.get(clnm)).get(tdnm)).keySet());
            var2_23 = new Boolean(!var2_25.contains(n));
            cond_11 = var2_23;
          }
        }
        if (cond_11.booleanValue()) {

          TraceResult e_39 = null;
          e_39 = new TraceResult(new quotes.SKIPPED(), new String(""));
          res.add(e_39);
          skippedTestCase = (HashMap) UTIL.clone(AddTestCaseNum(clnm, tdnm, n, skippedTestCase));
        }
        else 
          res = (Vector) UTIL.ConvertToList(UTIL.clone((Vector) UTIL.ConvertToList(((HashMap) ((HashMap) testCaseResults.get(clnm)).get(tdnm)).get(n))));
      }
    return res;
  }
// ***** VDMTOOLS END Name=ExecuteTraceTestCase#4|String|String|Long|Vector


// ***** VDMTOOLS START Name=AddTestCaseNum#4|String|String|Long|HashMap KEEP=NO
  private HashMap AddTestCaseNum (final String clnm, final String tdnm, final Long n, final HashMap cltd_um) throws CGException {

    HashMap varRes_5 = new HashMap();
    Boolean cond_7 = null;
    cond_7 = new Boolean(cltd_um.containsKey(clnm));
    if (cond_7.booleanValue()) {

      HashMap tracedef_um = (HashMap) cltd_um.get(clnm);
      HashSet update = new HashSet();
      Boolean cond_24 = null;
      cond_24 = new Boolean(tracedef_um.containsKey(tdnm));
      if (cond_24.booleanValue()) {

        HashSet var2_31 = new HashSet();
        var2_31 = new HashSet();
        var2_31.add(n);
        update = (HashSet) ((HashSet) tracedef_um.get(tdnm)).clone();
        update.addAll(var2_31);
      }
      else {

        update = new HashSet();
        update.add(n);
      }
      HashMap modmap_33 = new HashMap();
      HashMap tmpVar2_37 = new HashMap();
      HashMap modmap_38 = new HashMap();
      modmap_38 = new HashMap();
      modmap_38.put(tdnm, update);
      tmpVar2_37 = new HashMap(tracedef_um);
      tmpVar2_37.putAll(modmap_38);
      modmap_33 = new HashMap();
      modmap_33.put(clnm, tmpVar2_37);
      varRes_5 = new HashMap(cltd_um);
      varRes_5.putAll(modmap_33);
    }
    else {

      HashMap modmap_10 = new HashMap();
      HashMap tmpVar2_14 = new HashMap();
      HashSet tmpVar2_16 = new HashSet();
      tmpVar2_16 = new HashSet();
      tmpVar2_16.add(n);
      tmpVar2_14 = new HashMap();
      tmpVar2_14.put(tdnm, tmpVar2_16);
      modmap_10 = new HashMap();
      modmap_10.put(clnm, tmpVar2_14);
      varRes_5 = new HashMap(cltd_um);
      varRes_5.putAll(modmap_10);
    }
    return varRes_5;
  }
// ***** VDMTOOLS END Name=AddTestCaseNum#4|String|String|Long|HashMap


// ***** VDMTOOLS START Name=NoFailedPrefix#1|Vector KEEP=NO
  private Boolean NoFailedPrefix (final Vector e_ul) throws CGException {

    Boolean rexpr_2 = null;
    boolean tmpQuant_3 = false;
    {

      HashSet e_set_62 = new HashSet();
      e_set_62.clear();
      e_set_62.addAll(failedTestCases.keySet());
      String clnm = null;
      {
        for (Iterator enm_65 = e_set_62.iterator(); enm_65.hasNext() && !tmpQuant_3; ) {

          String elem_64 = UTIL.ConvertToString(enm_65.next());
          clnm = elem_64;
          Boolean pred_4 = null;
          boolean tmpQuant_5 = false;
          {

            HashSet e_set_55 = new HashSet();
            e_set_55.clear();
            e_set_55.addAll(((HashMap) failedTestCases.get(clnm)).keySet());
            String tcnm = null;
            {
              for (Iterator enm_60 = e_set_55.iterator(); enm_60.hasNext() && !tmpQuant_5; ) {

                String elem_59 = UTIL.ConvertToString(enm_60.next());
                tcnm = elem_59;
                Boolean pred_6 = null;
                boolean tmpQuant_7 = false;
                {

                  HashSet e_set_46 = new HashSet();
                  e_set_46.clear();
                  e_set_46.addAll(((HashMap) ((HashMap) failedTestCases.get(clnm)).get(tcnm)).keySet());
                  Long n = null;
                  {
                    for (Iterator enm_53 = e_set_46.iterator(); enm_53.hasNext() && !tmpQuant_7; ) {

                      Long elem_52 = UTIL.NumberToLong(enm_53.next());
                      n = elem_52;
                      Boolean pred_8 = null;
                      {

                        Long failindex = UTIL.NumberToLong(((HashMap) ((HashMap) failedTestCases.get(clnm)).get(tcnm)).get(n));
                        Vector var1_17 = null;
                        int from_21 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
                        int to_22 = (int) Math.min(failindex.doubleValue(), e_ul.size());
                        if (from_21 > to_22) 
                          var1_17 = new Vector();
                        else 
                          var1_17 = new Vector(e_ul.subList(from_21, to_22));
                        Vector var2_28 = null;
                        int from_32 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
                        int to_33 = (int) Math.min(failindex.doubleValue(), ((Vector) UTIL.ConvertToList(((HashMap) ((HashMap) allTestCases.get(clnm)).get(tcnm)).get(n))).size());
                        if (from_32 > to_33) 
                          var2_28 = new Vector();
                        else 
                          var2_28 = new Vector(((Vector) UTIL.ConvertToList(((HashMap) ((HashMap) allTestCases.get(clnm)).get(tcnm)).get(n))).subList(from_32, to_33));
                        pred_8 = new Boolean(UTIL.equals(var1_17, var2_28));
                      }
                      if (pred_8.booleanValue()) 
                        tmpQuant_7 = true;
                    }
                  }
                }
                pred_6 = new Boolean(tmpQuant_7);
                if (pred_6.booleanValue()) 
                  tmpQuant_5 = true;
              }
            }
          }
          pred_4 = new Boolean(tmpQuant_5);
          if (pred_4.booleanValue()) 
            tmpQuant_3 = true;
        }
      }
    }
    rexpr_2 = new Boolean(tmpQuant_3);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=NoFailedPrefix#1|Vector


// ***** VDMTOOLS START Name=fillMap#1|HashMap KEEP=NO
  public HashMap fillMap (final HashMap tc_um_us) throws CGException {

    HashMap varRes_2 = new HashMap();
    HashMap res_m_3 = new HashMap();
    {

      HashSet e_set_10 = new HashSet();
      e_set_10.clear();
      e_set_10.addAll(tc_um_us.keySet());
      String clnm = null;
      {
        for (Iterator enm_13 = e_set_10.iterator(); enm_13.hasNext(); ) {

          String elem_12 = UTIL.ConvertToString(enm_13.next());
          clnm = elem_12;
          res_m_3.put(clnm, fillForClass((HashMap) tc_um_us.get(clnm)));
        }
      }
    }
    varRes_2 = res_m_3;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=fillMap#1|HashMap


// ***** VDMTOOLS START Name=fillForClass#1|HashMap KEEP=NO
  private HashMap fillForClass (final HashMap tde_um) throws CGException {

    HashMap varRes_2 = new HashMap();
    HashMap res_m_3 = new HashMap();
    {

      HashSet e_set_10 = new HashSet();
      e_set_10.clear();
      e_set_10.addAll(tde_um.keySet());
      String tdnm = null;
      {
        for (Iterator enm_13 = e_set_10.iterator(); enm_13.hasNext(); ) {

          String elem_12 = UTIL.ConvertToString(enm_13.next());
          tdnm = elem_12;
          res_m_3.put(tdnm, SpreadTestCase((Vector) UTIL.ConvertToList(tde_um.get(tdnm))));
        }
      }
    }
    varRes_2 = res_m_3;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=fillForClass#1|HashMap


// ***** VDMTOOLS START Name=SpreadTestCase#1|Vector KEEP=NO
  private HashMap SpreadTestCase (final Vector tc_ul) throws CGException {

    HashMap varRes_2 = new HashMap();
    HashMap res_m_3 = new HashMap();
    {

      HashSet e_set_9 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = tc_ul.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      e_set_9 = riseq_11;
      Long i = null;
      {
        for (Iterator enm_15 = e_set_9.iterator(); enm_15.hasNext(); ) {

          Long elem_14 = UTIL.NumberToLong(enm_15.next());
          i = elem_14;
          Vector mr_5 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= tc_ul.size())) 
            mr_5 = (Vector) UTIL.ConvertToList(tc_ul.get(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_m_3.put(i, mr_5);
        }
      }
    }
    varRes_2 = res_m_3;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=SpreadTestCase#1|Vector

}
;
