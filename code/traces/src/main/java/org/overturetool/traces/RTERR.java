//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-02-27 by the VDM++ to JAVA Code Generator
// (v8.2b - Wed 18-Feb-2009 16:15:35)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.traces;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class RTERR {


// ***** VDMTOOLS START Name=ErrMsg KEEP=NO
  public static class ErrMsg implements Record {

    public Long line;

    public Long col;

    public String mes;


    public ErrMsg () {}


    public ErrMsg (Long p1, Long p2, String p3) {

      line = p1;
      col = p2;
      mes = p3;
    }


    public Object clone () {
      return new ErrMsg(line, col, mes);
    }


    public String toString () {
      return "mk_RTERR`ErrMsg(" + UTIL.toString(line) + "," + UTIL.toString(col) + "," + UTIL.toString(mes) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof ErrMsg)) 
        return false;
      else {

        ErrMsg temp = (ErrMsg) obj;
        return UTIL.equals(line, temp.line) && UTIL.equals(col, temp.col) && UTIL.equals(mes, temp.mes);
      }
    }


    public int hashCode () {
      return (line == null ? 0 : line.hashCode()) + (col == null ? 0 : col.hashCode()) + (mes == null ? 0 : mes.hashCode());
    }

  }
// ***** VDMTOOLS END Name=ErrMsg
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=errmsgs KEEP=NO
  private HashMap errmsgs = new HashMap();
// ***** VDMTOOLS END Name=errmsgs

// ***** VDMTOOLS START Name=curcl KEEP=NO
  private String curcl = null;
// ***** VDMTOOLS END Name=curcl

// ***** VDMTOOLS START Name=curtr KEEP=NO
  private String curtr = null;
// ***** VDMTOOLS END Name=curtr

// ***** VDMTOOLS START Name=BOOL_uEXPECTED KEEP=NO
  public static final String BOOL_uEXPECTED = new String("1: A boolean was expected.");
// ***** VDMTOOLS END Name=BOOL_uEXPECTED

// ***** VDMTOOLS START Name=INT_uEXPECTED KEEP=NO
  public static final String INT_uEXPECTED = new String("2: An integer was expected.");
// ***** VDMTOOLS END Name=INT_uEXPECTED

// ***** VDMTOOLS START Name=NUM_uEXPECTED KEEP=NO
  public static final String NUM_uEXPECTED = new String("3: A number was expected");
// ***** VDMTOOLS END Name=NUM_uEXPECTED

// ***** VDMTOOLS START Name=SET_uEXPECTED KEEP=NO
  public static final String SET_uEXPECTED = new String("4: A set was expected");
// ***** VDMTOOLS END Name=SET_uEXPECTED

// ***** VDMTOOLS START Name=SEQ_uEXPECTED KEEP=NO
  public static final String SEQ_uEXPECTED = new String("5: A sequence was expected");
// ***** VDMTOOLS END Name=SEQ_uEXPECTED

// ***** VDMTOOLS START Name=REC_uEXPECTED KEEP=NO
  public static final String REC_uEXPECTED = new String("6: A record was expected");
// ***** VDMTOOLS END Name=REC_uEXPECTED

// ***** VDMTOOLS START Name=MAP_uEXPECTED KEEP=NO
  public static final String MAP_uEXPECTED = new String("7: A map was expected");
// ***** VDMTOOLS END Name=MAP_uEXPECTED

// ***** VDMTOOLS START Name=TUPLE_uEXPECTED KEEP=NO
  public static final String TUPLE_uEXPECTED = new String("8: A tuple was expected");
// ***** VDMTOOLS END Name=TUPLE_uEXPECTED

// ***** VDMTOOLS START Name=SYMB_uLIT_uEXPECTED KEEP=NO
  private static final String SYMB_uLIT_uEXPECTED = new String("9: A symbolic literal was expected");
// ***** VDMTOOLS END Name=SYMB_uLIT_uEXPECTED

// ***** VDMTOOLS START Name=TWO_uBOOL_uEXPECTED KEEP=NO
  private static final String TWO_uBOOL_uEXPECTED = new String("11: Two booleans were expected");
// ***** VDMTOOLS END Name=TWO_uBOOL_uEXPECTED

// ***** VDMTOOLS START Name=TWO_uINT_uEXPECTED KEEP=NO
  private static final String TWO_uINT_uEXPECTED = new String("12: Two integers were expected");
// ***** VDMTOOLS END Name=TWO_uINT_uEXPECTED

// ***** VDMTOOLS START Name=TWO_uNUM_uEXPECTED KEEP=NO
  private static final String TWO_uNUM_uEXPECTED = new String("13: Two numbers were expected");
// ***** VDMTOOLS END Name=TWO_uNUM_uEXPECTED

// ***** VDMTOOLS START Name=TWO_uSET_uEXPECTED KEEP=NO
  private static final String TWO_uSET_uEXPECTED = new String("14: Two sets were expected");
// ***** VDMTOOLS END Name=TWO_uSET_uEXPECTED

// ***** VDMTOOLS START Name=TWO_uSEQ_uEXPECTED KEEP=NO
  private static final String TWO_uSEQ_uEXPECTED = new String("15: Two sequences were expected");
// ***** VDMTOOLS END Name=TWO_uSEQ_uEXPECTED

// ***** VDMTOOLS START Name=MAP_uOR_uSEQ_uEXPECTED KEEP=NO
  public static final String MAP_uOR_uSEQ_uEXPECTED = new String("16: A map or a sequence was expected");
// ***** VDMTOOLS END Name=MAP_uOR_uSEQ_uEXPECTED

// ***** VDMTOOLS START Name=TWO_uMAP_uEXPECTED KEEP=NO
  private static final String TWO_uMAP_uEXPECTED = new String("17: Two maps were expected");
// ***** VDMTOOLS END Name=TWO_uMAP_uEXPECTED

// ***** VDMTOOLS START Name=SET_uAND_uMAP_uEXPECTED KEEP=NO
  private static final String SET_uAND_uMAP_uEXPECTED = new String("18: A set and a map were expected");
// ***** VDMTOOLS END Name=SET_uAND_uMAP_uEXPECTED

// ***** VDMTOOLS START Name=SEQ_uAND_uINT_uEXPECTED KEEP=NO
  private static final String SEQ_uAND_uINT_uEXPECTED = new String("19: A sequence and two integers were expected");
// ***** VDMTOOLS END Name=SEQ_uAND_uINT_uEXPECTED

// ***** VDMTOOLS START Name=PATTERNNAME_uEXPECTED KEEP=NO
  private static final String PATTERNNAME_uEXPECTED = new String("20: The binding pattern must evaluate to one patternname");
// ***** VDMTOOLS END Name=PATTERNNAME_uEXPECTED

// ***** VDMTOOLS START Name=CHAR_uEXPECTED KEEP=NO
  private static final String CHAR_uEXPECTED = new String("21: A char was expected");
// ***** VDMTOOLS END Name=CHAR_uEXPECTED

// ***** VDMTOOLS START Name=ALL_uINTS_uEXPECTED KEEP=NO
  private static final String ALL_uINTS_uEXPECTED = new String("22: The binding set can only contain integers");
// ***** VDMTOOLS END Name=ALL_uINTS_uEXPECTED

// ***** VDMTOOLS START Name=ALL_uNUMS_uEXPECTED KEEP=NO
  private static final String ALL_uNUMS_uEXPECTED = new String("23: The indices for the loop must all be numbers");
// ***** VDMTOOLS END Name=ALL_uNUMS_uEXPECTED

// ***** VDMTOOLS START Name=ALL_uSETS_uEXPECTED KEEP=NO
  public static final String ALL_uSETS_uEXPECTED = new String("24: All elements to \'dunion\' or \'dinter\' must be sets");
// ***** VDMTOOLS END Name=ALL_uSETS_uEXPECTED

// ***** VDMTOOLS START Name=ALL_uSEQS_uEXPECTED KEEP=NO
  public static final String ALL_uSEQS_uEXPECTED = new String("25: All elements to \'conc\' must be sequences");
// ***** VDMTOOLS END Name=ALL_uSEQS_uEXPECTED

// ***** VDMTOOLS START Name=ALL_uMAPS_uEXPECTED KEEP=NO
  public static final String ALL_uMAPS_uEXPECTED = new String("27: All elements to \'merge\' must be maps");
// ***** VDMTOOLS END Name=ALL_uMAPS_uEXPECTED

// ***** VDMTOOLS START Name=OLDID_uNOT_uIN_uOS KEEP=NO
  private static final String OLDID_uNOT_uIN_uOS = new String("51: The old name is not stored in the state");
// ***** VDMTOOLS END Name=OLDID_uNOT_uIN_uOS

// ***** VDMTOOLS START Name=MAP_uMERGE_uDOM_uOVERLAP KEEP=NO
  private static final String MAP_uMERGE_uDOM_uOVERLAP = new String("52: Duplicate entries for \'merge\' had different values");
// ***** VDMTOOLS END Name=MAP_uMERGE_uDOM_uOVERLAP

// ***** VDMTOOLS START Name=EMPTY_uENV_uS KEEP=NO
  private static final String EMPTY_uENV_uS = new String("53: The binding environment was empty");
// ***** VDMTOOLS END Name=EMPTY_uENV_uS

// ***** VDMTOOLS START Name=ZERO_uBY_uSTEP KEEP=NO
  private static final String ZERO_uBY_uSTEP = new String("57: Step length in loop was 0");
// ***** VDMTOOLS END Name=ZERO_uBY_uSTEP

// ***** VDMTOOLS START Name=EVAL_uPRE_uGIVES_uFALSE KEEP=NO
  private static final String EVAL_uPRE_uGIVES_uFALSE = new String("58: The pre-condition evaluated to false");
// ***** VDMTOOLS END Name=EVAL_uPRE_uGIVES_uFALSE

// ***** VDMTOOLS START Name=EVAL_uPOST_uGIVES_uFALSE KEEP=NO
  private static final String EVAL_uPOST_uGIVES_uFALSE = new String("59: The post-condition evaluated to false");
// ***** VDMTOOLS END Name=EVAL_uPOST_uGIVES_uFALSE

// ***** VDMTOOLS START Name=ERROR_uSTATEMENT KEEP=NO
  private static final String ERROR_uSTATEMENT = new String("61: Can not evaluate \'error\' statement");
// ***** VDMTOOLS END Name=ERROR_uSTATEMENT

// ***** VDMTOOLS START Name=UNDEFINED_uEXPRESSION KEEP=NO
  private static final String UNDEFINED_uEXPRESSION = new String("62: Can not evaluate \'undefined\' expression");
// ***** VDMTOOLS END Name=UNDEFINED_uEXPRESSION

// ***** VDMTOOLS START Name=NO_uOTHERS_uEXPR KEEP=NO
  private static final String NO_uOTHERS_uEXPR = new String("63: No \'others\' branch in \'cases\' expr");
// ***** VDMTOOLS END Name=NO_uOTHERS_uEXPR

// ***** VDMTOOLS START Name=WRONG_uQUANTIFIER KEEP=NO
  private static final String WRONG_uQUANTIFIER = new String("64: Wrong quantifier");
// ***** VDMTOOLS END Name=WRONG_uQUANTIFIER

// ***** VDMTOOLS START Name=PAT_uNAME_uIN_uSEQCOMP KEEP=NO
  private static final String PAT_uNAME_uIN_uSEQCOMP = new String("65: Only pattern name is allowed in sequence comprehension");
// ***** VDMTOOLS END Name=PAT_uNAME_uIN_uSEQCOMP

// ***** VDMTOOLS START Name=ILLEGAL_uINDICES KEEP=NO
  public static final String ILLEGAL_uINDICES = new String("66: Illegal index");
// ***** VDMTOOLS END Name=ILLEGAL_uINDICES

// ***** VDMTOOLS START Name=DUPLICATES_uNOT_uEQUAL KEEP=NO
  public static final String DUPLICATES_uNOT_uEQUAL = new String("67: Duplicate entries had different values");
// ***** VDMTOOLS END Name=DUPLICATES_uNOT_uEQUAL

// ***** VDMTOOLS START Name=RECORD_uTAG_uUNKNOWN KEEP=NO
  private static final String RECORD_uTAG_uUNKNOWN = new String("68: Unknown record tag");
// ***** VDMTOOLS END Name=RECORD_uTAG_uUNKNOWN

// ***** VDMTOOLS START Name=RECORD_uSIZE_uWRONG KEEP=NO
  private static final String RECORD_uSIZE_uWRONG = new String("69: Actual record size different from definition");
// ***** VDMTOOLS END Name=RECORD_uSIZE_uWRONG

// ***** VDMTOOLS START Name=RECORD_uFIELD_uID_uUNKNOWN KEEP=NO
  public static final String RECORD_uFIELD_uID_uUNKNOWN = new String("70: Unknown record field selector");
// ***** VDMTOOLS END Name=RECORD_uFIELD_uID_uUNKNOWN

// ***** VDMTOOLS START Name=ARG_uNOT_uIN_uDOM KEEP=NO
  public static final String ARG_uNOT_uIN_uDOM = new String("71: Argument not found in map domain");
// ***** VDMTOOLS END Name=ARG_uNOT_uIN_uDOM

// ***** VDMTOOLS START Name=FCT_uV_uTYPE_uEXPECTED KEEP=NO
  private static final String FCT_uV_uTYPE_uEXPECTED = new String("72: An explicit function/operation was expected");
// ***** VDMTOOLS END Name=FCT_uV_uTYPE_uEXPECTED

// ***** VDMTOOLS START Name=UNDEF_uENCOUNTERED KEEP=NO
  private static final String UNDEF_uENCOUNTERED = new String("73: Identifier is undefined/not initialized");
// ***** VDMTOOLS END Name=UNDEF_uENCOUNTERED

// ***** VDMTOOLS START Name=ID_uUNKNOWN KEEP=NO
  private static final String ID_uUNKNOWN = new String("74: Unknown identifier");
// ***** VDMTOOLS END Name=ID_uUNKNOWN

// ***** VDMTOOLS START Name=OPERATOR_uUNKNOWN KEEP=NO
  private static final String OPERATOR_uUNKNOWN = new String("75: Unknown operator");
// ***** VDMTOOLS END Name=OPERATOR_uUNKNOWN

// ***** VDMTOOLS START Name=DIVISION_uWITH_uZERO KEEP=NO
  public static final String DIVISION_uWITH_uZERO = new String("76: Division with zero");
// ***** VDMTOOLS END Name=DIVISION_uWITH_uZERO

// ***** VDMTOOLS START Name=ZERO_uLENGTH_uDETECTED KEEP=NO
  private static final String ZERO_uLENGTH_uDETECTED = new String("77: The sequence was empty");
// ***** VDMTOOLS END Name=ZERO_uLENGTH_uDETECTED

// ***** VDMTOOLS START Name=PATTERN_uUNKNOWN KEEP=NO
  private static final String PATTERN_uUNKNOWN = new String("78: Unknown pattern");
// ***** VDMTOOLS END Name=PATTERN_uUNKNOWN

// ***** VDMTOOLS START Name=SET_uTOO_uBIG KEEP=NO
  private static final String SET_uTOO_uBIG = new String("79: Set too big for \'power\' - limit is 16");
// ***** VDMTOOLS END Name=SET_uTOO_uBIG

// ***** VDMTOOLS START Name=EXPR_uUNKNOWN KEEP=NO
  private static final String EXPR_uUNKNOWN = new String("80: Expression unknown");
// ***** VDMTOOLS END Name=EXPR_uUNKNOWN

// ***** VDMTOOLS START Name=WRONG_uNO_uOF_uARGS KEEP=NO
  private static final String WRONG_uNO_uOF_uARGS = new String("81: Wrong number of arguments");
// ***** VDMTOOLS END Name=WRONG_uNO_uOF_uARGS

// ***** VDMTOOLS START Name=STMT_uUNKNOWN KEEP=NO
  private static final String STMT_uUNKNOWN = new String("83: Unknown statement");
// ***** VDMTOOLS END Name=STMT_uUNKNOWN

// ***** VDMTOOLS START Name=REF_uUNKNOWN KEEP=NO
  private static final String REF_uUNKNOWN = new String("84: Unknown reference in assign statement");
// ***** VDMTOOLS END Name=REF_uUNKNOWN

// ***** VDMTOOLS START Name=TYPE_uUNKNOWN KEEP=NO
  private static final String TYPE_uUNKNOWN = new String("85: Unknown type");
// ***** VDMTOOLS END Name=TYPE_uUNKNOWN

// ***** VDMTOOLS START Name=IS_uTYPE_uUNKNOWN KEEP=NO
  private static final String IS_uTYPE_uUNKNOWN = new String("86: Unknown type in is_ expression");
// ***** VDMTOOLS END Name=IS_uTYPE_uUNKNOWN

// ***** VDMTOOLS START Name=IDENTICAL_uFIELDS KEEP=NO
  private static final String IDENTICAL_uFIELDS = new String("89: identical selector names in composite type");
// ***** VDMTOOLS END Name=IDENTICAL_uFIELDS

// ***** VDMTOOLS START Name=TYPE_uINCOMP KEEP=NO
  private static final String TYPE_uINCOMP = new String("98: Incompatible types found in dynamic type check");
// ***** VDMTOOLS END Name=TYPE_uINCOMP

// ***** VDMTOOLS START Name=STATE_uINVARIANT_uERROR KEEP=NO
  private static final String STATE_uINVARIANT_uERROR = new String("99: State invariant was broken");
// ***** VDMTOOLS END Name=STATE_uINVARIANT_uERROR

// ***** VDMTOOLS START Name=TAG_uMULTIPLE_uDEF KEEP=NO
  private static final String TAG_uMULTIPLE_uDEF = new String("100: Multiple definitions of tag");
// ***** VDMTOOLS END Name=TAG_uMULTIPLE_uDEF

// ***** VDMTOOLS START Name=NO_uUNIQ_uELEM KEEP=NO
  private static final String NO_uUNIQ_uELEM = new String("110: No unique element in \'iota\'");
// ***** VDMTOOLS END Name=NO_uUNIQ_uELEM

// ***** VDMTOOLS START Name=OP_uEXIT_uCONT KEEP=NO
  private static final String OP_uEXIT_uCONT = new String("111: Operation exited or returned no result");
// ***** VDMTOOLS END Name=OP_uEXIT_uCONT

// ***** VDMTOOLS START Name=NO_uPOLY_uFUNC KEEP=NO
  private static final String NO_uPOLY_uFUNC = new String("112: Instantiated function is not polymorhic");
// ***** VDMTOOLS END Name=NO_uPOLY_uFUNC

// ***** VDMTOOLS START Name=NO_uINJECTIVE_uMAP KEEP=NO
  private static final String NO_uINJECTIVE_uMAP = new String("113: Map is not injective - \'inverse\' fails");
// ***** VDMTOOLS END Name=NO_uINJECTIVE_uMAP

// ***** VDMTOOLS START Name=NOT_uRNG_uDOM_uSUBSET KEEP=NO
  private static final String NOT_uRNG_uDOM_uSUBSET = new String("114: The range is not a subset of the domain");
// ***** VDMTOOLS END Name=NOT_uRNG_uDOM_uSUBSET

// ***** VDMTOOLS START Name=TWO_uFN_uOR_uMAP_uEXPECTED KEEP=NO
  private static final String TWO_uFN_uOR_uMAP_uEXPECTED = new String("115: Two functions or maps expected for \'comp\'");
// ***** VDMTOOLS END Name=TWO_uFN_uOR_uMAP_uEXPECTED

// ***** VDMTOOLS START Name=FN_uOR_uMAP_uOR_uNUM_uEXPECTED KEEP=NO
  private static final String FN_uOR_uMAP_uOR_uNUM_uEXPECTED = new String("116: Wrong arguments for \'**\'");
// ***** VDMTOOLS END Name=FN_uOR_uMAP_uOR_uNUM_uEXPECTED

// ***** VDMTOOLS START Name=NAT_uEXPECTED KEEP=NO
  private static final String NAT_uEXPECTED = new String("117: A natural number was expected");
// ***** VDMTOOLS END Name=NAT_uEXPECTED

// ***** VDMTOOLS START Name=OP_uRETURNED_uCONT KEEP=NO
  private static final String OP_uRETURNED_uCONT = new String("119: The operation did not return a value");
// ***** VDMTOOLS END Name=OP_uRETURNED_uCONT

// ***** VDMTOOLS START Name=STATE_uDESIG_uUNKNOWN KEEP=NO
  private static final String STATE_uDESIG_uUNKNOWN = new String("120: Unknown state component");
// ***** VDMTOOLS END Name=STATE_uDESIG_uUNKNOWN

// ***** VDMTOOLS START Name=IMPL_uOP_uCALL KEEP=NO
  private static final String IMPL_uOP_uCALL = new String("121: Tried to call an implicit operation");
// ***** VDMTOOLS END Name=IMPL_uOP_uCALL

// ***** VDMTOOLS START Name=ILLEGAL_uSTATE_uINIT KEEP=NO
  private static final String ILLEGAL_uSTATE_uINIT = new String("122: Illegal state initialisation");
// ***** VDMTOOLS END Name=ILLEGAL_uSTATE_uINIT

// ***** VDMTOOLS START Name=ILL_uSTATE_uINIT_uPAT KEEP=NO
  private static final String ILL_uSTATE_uINIT_uPAT = new String("123: Illegal state initialisation pattern");
// ***** VDMTOOLS END Name=ILL_uSTATE_uINIT_uPAT

// ***** VDMTOOLS START Name=REC_uPAT_uEXPECTED KEEP=NO
  private static final String REC_uPAT_uEXPECTED = new String("124: Record pattern expected for state initialisation");
// ***** VDMTOOLS END Name=REC_uPAT_uEXPECTED

// ***** VDMTOOLS START Name=ALL_uPATID_uEXPECTED KEEP=NO
  private static final String ALL_uPATID_uEXPECTED = new String("125: Only pattern identifiers allowed for state initialisation");
// ***** VDMTOOLS END Name=ALL_uPATID_uEXPECTED

// ***** VDMTOOLS START Name=TYPE_uBIND_uEVAL KEEP=NO
  public static final String TYPE_uBIND_uEVAL = new String("126: Can not evaluate type binds");
// ***** VDMTOOLS END Name=TYPE_uBIND_uEVAL

// ***** VDMTOOLS START Name=FNDEF_uEXPECTED KEEP=NO
  private static final String FNDEF_uEXPECTED = new String("127: Function definition expected");
// ***** VDMTOOLS END Name=FNDEF_uEXPECTED

// ***** VDMTOOLS START Name=IMPL_uFN_uAPPLY KEEP=NO
  private static final String IMPL_uFN_uAPPLY = new String("128: Tried to apply an implicit function");
// ***** VDMTOOLS END Name=IMPL_uFN_uAPPLY

// ***** VDMTOOLS START Name=POLY_uNOT_uINST KEEP=NO
  private static final String POLY_uNOT_uINST = new String("129: The applied polymorhic function is not instantiated");
// ***** VDMTOOLS END Name=POLY_uNOT_uINST

// ***** VDMTOOLS START Name=MAP_uAND_uSET_uEXPECTED KEEP=NO
  private static final String MAP_uAND_uSET_uEXPECTED = new String("130: A map and a set were expected");
// ***** VDMTOOLS END Name=MAP_uAND_uSET_uEXPECTED

// ***** VDMTOOLS START Name=NOT_uEXPL_uOP_uCALL KEEP=NO
  private static final String NOT_uEXPL_uOP_uCALL = new String("131: The called object is not an explicit operation");
// ***** VDMTOOLS END Name=NOT_uEXPL_uOP_uCALL

// ***** VDMTOOLS START Name=GET_uVALUE_uEXPR KEEP=NO
  private static final String GET_uVALUE_uEXPR = new String("132: No input value to get_value()");
// ***** VDMTOOLS END Name=GET_uVALUE_uEXPR

// ***** VDMTOOLS START Name=OP_uCANT_uRETURN_uA_uVALUE KEEP=NO
  private static final String OP_uCANT_uRETURN_uA_uVALUE = new String("133: The operation\'s range is empty");
// ***** VDMTOOLS END Name=OP_uCANT_uRETURN_uA_uVALUE

// ***** VDMTOOLS START Name=MOD_uALREADY_uDEF KEEP=NO
  private static final String MOD_uALREADY_uDEF = new String("150: The module is already defined");
// ***** VDMTOOLS END Name=MOD_uALREADY_uDEF

// ***** VDMTOOLS START Name=EQUAL_uRENAMINGS KEEP=NO
  private static final String EQUAL_uRENAMINGS = new String("151: Name clash for renaming");
// ***** VDMTOOLS END Name=EQUAL_uRENAMINGS

// ***** VDMTOOLS START Name=PARMOD_uNOT_uDEFINED KEEP=NO
  private static final String PARMOD_uNOT_uDEFINED = new String("152: Parameterised module is not defined");
// ***** VDMTOOLS END Name=PARMOD_uNOT_uDEFINED

// ***** VDMTOOLS START Name=NOT_uFULLY_uINST KEEP=NO
  private static final String NOT_uFULLY_uINST = new String("153: Parameterised module is not fully instantiated");
// ***** VDMTOOLS END Name=NOT_uFULLY_uINST

// ***** VDMTOOLS START Name=TYPE_uALREADY_uDEF KEEP=NO
  private static final String TYPE_uALREADY_uDEF = new String("154: The type is already defined");
// ***** VDMTOOLS END Name=TYPE_uALREADY_uDEF

// ***** VDMTOOLS START Name=MOD_uNOT_uDEFINED KEEP=NO
  private static final String MOD_uNOT_uDEFINED = new String("155: The module is not defined");
// ***** VDMTOOLS END Name=MOD_uNOT_uDEFINED

// ***** VDMTOOLS START Name=TYPE_uNOT_uEXPORTED KEEP=NO
  private static final String TYPE_uNOT_uEXPORTED = new String("156: The type is not exported");
// ***** VDMTOOLS END Name=TYPE_uNOT_uEXPORTED

// ***** VDMTOOLS START Name=CONSTRUCT_uNOT_uEXPORTED KEEP=NO
  private static final String CONSTRUCT_uNOT_uEXPORTED = new String("157: The construct is not exported");
// ***** VDMTOOLS END Name=CONSTRUCT_uNOT_uEXPORTED

// ***** VDMTOOLS START Name=WRONG_uSTATE_uTYPE KEEP=NO
  private static final String WRONG_uSTATE_uTYPE = new String("158: Wrong state type");
// ***** VDMTOOLS END Name=WRONG_uSTATE_uTYPE

// ***** VDMTOOLS START Name=NOT_uDEFINED_uIN_uMOD KEEP=NO
  private static final String NOT_uDEFINED_uIN_uMOD = new String("159: Incorrect use of \'using\'");
// ***** VDMTOOLS END Name=NOT_uDEFINED_uIN_uMOD

// ***** VDMTOOLS START Name=LIB_uNOT_uDEFINED KEEP=NO
  private static final String LIB_uNOT_uDEFINED = new String("160: couldn\'t open library: ");
// ***** VDMTOOLS END Name=LIB_uNOT_uDEFINED

// ***** VDMTOOLS START Name=LIB_uSYMBOL_uNOT_uDEFINED KEEP=NO
  private static final String LIB_uSYMBOL_uNOT_uDEFINED = new String("161: token not defined in library");
// ***** VDMTOOLS END Name=LIB_uSYMBOL_uNOT_uDEFINED

// ***** VDMTOOLS START Name=LIB_uARGUMENT_uWRONG_uNUMBER KEEP=NO
  private static final String LIB_uARGUMENT_uWRONG_uNUMBER = new String("162: actual number of argument didn\'t match the number the extern function expected");
// ***** VDMTOOLS END Name=LIB_uARGUMENT_uWRONG_uNUMBER

// ***** VDMTOOLS START Name=LIB_uNOT_uDECLARED KEEP=NO
  private static final String LIB_uNOT_uDECLARED = new String("163: Not declared in dl module");
// ***** VDMTOOLS END Name=LIB_uNOT_uDECLARED

// ***** VDMTOOLS START Name=INTERNAL_uERROR KEEP=NO
  private static final String INTERNAL_uERROR = new String("164: Internal error, please report");
// ***** VDMTOOLS END Name=INTERNAL_uERROR

// ***** VDMTOOLS START Name=LIB_uTYPE_uERROR KEEP=NO
  private static final String LIB_uTYPE_uERROR = new String("165: Incompatible type in dl module call");
// ***** VDMTOOLS END Name=LIB_uTYPE_uERROR

// ***** VDMTOOLS START Name=TYPE_uNOT_uSUPPORTED KEEP=NO
  private static final String TYPE_uNOT_uSUPPORTED = new String("166: Type is not yet supported");
// ***** VDMTOOLS END Name=TYPE_uNOT_uSUPPORTED

// ***** VDMTOOLS START Name=LIB_uCLOSE_uERR KEEP=NO
  private static final String LIB_uCLOSE_uERR = new String("167: Couldn\'t close dynamic library");
// ***** VDMTOOLS END Name=LIB_uCLOSE_uERR

// ***** VDMTOOLS START Name=TAG_uNOT_uIN_uNAME_uMAP KEEP=NO
  private static final String TAG_uNOT_uIN_uNAME_uMAP = new String("168: Name not defined in NameMap in dynamic library file");
// ***** VDMTOOLS END Name=TAG_uNOT_uIN_uNAME_uMAP

// ***** VDMTOOLS START Name=LIB_uWRONG_uSIGN KEEP=NO
  private static final String LIB_uWRONG_uSIGN = new String("169: Library function has wrong signature");
// ***** VDMTOOLS END Name=LIB_uWRONG_uSIGN

// ***** VDMTOOLS START Name=FILE_uDOES_uNOT_uEXISTS KEEP=NO
  private static final String FILE_uDOES_uNOT_uEXISTS = new String("170: Library Name not found in the search path");
// ***** VDMTOOLS END Name=FILE_uDOES_uNOT_uEXISTS

// ***** VDMTOOLS START Name=CAN_uNOT_uBE_uEVALUATED KEEP=NO
  private static final String CAN_uNOT_uBE_uEVALUATED = new String("171: Extern function cannot be evaluated");
// ***** VDMTOOLS END Name=CAN_uNOT_uBE_uEVALUATED

// ***** VDMTOOLS START Name=FN_uEXIT_uCONT KEEP=NO
  private static final String FN_uEXIT_uCONT = new String("172: Function exited or returned no result");
// ***** VDMTOOLS END Name=FN_uEXIT_uCONT

// ***** VDMTOOLS START Name=LIB_uVERSION_uNOT_uFOUND KEEP=NO
  private static final String LIB_uVERSION_uNOT_uFOUND = new String("173: Symbol VDMLibVersion not found in dynamic lib");
// ***** VDMTOOLS END Name=LIB_uVERSION_uNOT_uFOUND

// ***** VDMTOOLS START Name=LIB_uWRONG_uVERSION KEEP=NO
  private static final String LIB_uWRONG_uVERSION = new String("174: Version of VDM C++ library");
// ***** VDMTOOLS END Name=LIB_uWRONG_uVERSION

// ***** VDMTOOLS START Name=EXTENDED_uFCT_uEXPECTED KEEP=NO
  private static final String EXTENDED_uFCT_uEXPECTED = new String("175: Extended function or operation expected");
// ***** VDMTOOLS END Name=EXTENDED_uFCT_uEXPECTED

// ***** VDMTOOLS START Name=UNEXPECTED_uINFLOW KEEP=NO
  private static final String UNEXPECTED_uINFLOW = new String("176: Unexpected input flow");
// ***** VDMTOOLS END Name=UNEXPECTED_uINFLOW

// ***** VDMTOOLS START Name=COUND_uNOT_uMATCH_uOUTFLOW KEEP=NO
  private static final String COUND_uNOT_uMATCH_uOUTFLOW = new String(" 177: Return value could not match output flows");
// ***** VDMTOOLS END Name=COUND_uNOT_uMATCH_uOUTFLOW

// ***** VDMTOOLS START Name=NONEMPTYSET_uEXPECTED KEEP=NO
  private static final String NONEMPTYSET_uEXPECTED = new String("200: A nonempty set was expected");
// ***** VDMTOOLS END Name=NONEMPTYSET_uEXPECTED

// ***** VDMTOOLS START Name=NUMBER_uARG_uNEQ_uNUMBER_uTYPE KEEP=NO
  private static final String NUMBER_uARG_uNEQ_uNUMBER_uTYPE = new String("201: Number of arguments does not match number type domain in function or operation");
// ***** VDMTOOLS END Name=NUMBER_uARG_uNEQ_uNUMBER_uTYPE

// ***** VDMTOOLS START Name=TYPE_uINCOMP_uRETURN KEEP=NO
  private static final String TYPE_uINCOMP_uRETURN = new String("202: Incompatible return type in function or operation application");
// ***** VDMTOOLS END Name=TYPE_uINCOMP_uRETURN

// ***** VDMTOOLS START Name=TYPE_uINCOMP_uAPPLY KEEP=NO
  private static final String TYPE_uINCOMP_uAPPLY = new String("203: Incompatible type in variables in function or operation application");
// ***** VDMTOOLS END Name=TYPE_uINCOMP_uAPPLY

// ***** VDMTOOLS START Name=SET_uEXP_uIN_uPATTERN_uBIND KEEP=NO
  private static final String SET_uEXP_uIN_uPATTERN_uBIND = new String("204: Set Expected in pattern bind in Define Expression");
// ***** VDMTOOLS END Name=SET_uEXP_uIN_uPATTERN_uBIND

// ***** VDMTOOLS START Name=VALUE_uNOT_uIN_uSETBIND KEEP=NO
  private static final String VALUE_uNOT_uIN_uSETBIND = new String("205: Value in Def Expression is not in Set Bind");
// ***** VDMTOOLS END Name=VALUE_uNOT_uIN_uSETBIND

// ***** VDMTOOLS START Name=MTHD_uEXIT_uCONT KEEP=NO
  private static final String MTHD_uEXIT_uCONT = new String("206: Method exited or returned no result");
// ***** VDMTOOLS END Name=MTHD_uEXIT_uCONT

// ***** VDMTOOLS START Name=OBJ_uREF_uEXP KEEP=NO
  private static final String OBJ_uREF_uEXP = new String("207: An object reference was expected in the expression");
// ***** VDMTOOLS END Name=OBJ_uREF_uEXP

// ***** VDMTOOLS START Name=CLNM_uNOT_uDEFINED KEEP=NO
  private static final String CLNM_uNOT_uDEFINED = new String("208: Class name is not defined");
// ***** VDMTOOLS END Name=CLNM_uNOT_uDEFINED

// ***** VDMTOOLS START Name=TAG_uUNKNOWN KEEP=NO
  private static final String TAG_uUNKNOWN = new String("209: Tag is unknown within the current scope");
// ***** VDMTOOLS END Name=TAG_uUNKNOWN

// ***** VDMTOOLS START Name=MULT_uDEF_uMETHS KEEP=NO
  private static final String MULT_uDEF_uMETHS = new String("211: The method name is multiple defined within the current scope");
// ***** VDMTOOLS END Name=MULT_uDEF_uMETHS

// ***** VDMTOOLS START Name=MULT_uDEF_uFCTS KEEP=NO
  private static final String MULT_uDEF_uFCTS = new String("212: The function name is multiple defined within the current scope");
// ***** VDMTOOLS END Name=MULT_uDEF_uFCTS

// ***** VDMTOOLS START Name=MULT_uINST_uVARS KEEP=NO
  private static final String MULT_uINST_uVARS = new String("213: The instance variable name is multiple defined within the current scope");
// ***** VDMTOOLS END Name=MULT_uINST_uVARS

// ***** VDMTOOLS START Name=MULT_uVAL_uIDS KEEP=NO
  private static final String MULT_uVAL_uIDS = new String("214: The identifier is multiple defined as a value in the current scope");
// ***** VDMTOOLS END Name=MULT_uVAL_uIDS

// ***** VDMTOOLS START Name=TOPOLOGY_uSTMT KEEP=NO
  private static final String TOPOLOGY_uSTMT = new String("215: Cannot evaluate topology statement");
// ***** VDMTOOLS END Name=TOPOLOGY_uSTMT

// ***** VDMTOOLS START Name=SPEC_uSTMT KEEP=NO
  private static final String SPEC_uSTMT = new String("216: Cannot evaluate specification statement");
// ***** VDMTOOLS END Name=SPEC_uSTMT

// ***** VDMTOOLS START Name=INST_uABS_uCL KEEP=NO
  private static final String INST_uABS_uCL = new String("217: Cannot instantiate an abstract class");
// ***** VDMTOOLS END Name=INST_uABS_uCL

// ***** VDMTOOLS START Name=NOT_uCL_uNAME_uIN_uNEW_uSTMT KEEP=NO
  private static final String NOT_uCL_uNAME_uIN_uNEW_uSTMT = new String("218: Unknown class name in new statement");
// ***** VDMTOOLS END Name=NOT_uCL_uNAME_uIN_uNEW_uSTMT

// ***** VDMTOOLS START Name=OBJ_uREF_uEXP_uCALL KEEP=NO
  private static final String OBJ_uREF_uEXP_uCALL = new String("219: An object reference was expected in call statement");
// ***** VDMTOOLS END Name=OBJ_uREF_uEXP_uCALL

// ***** VDMTOOLS START Name=NOT_uMTHD_uNAME KEEP=NO
  private static final String NOT_uMTHD_uNAME = new String("220: A name of a full method was expected in invoke statement");
// ***** VDMTOOLS END Name=NOT_uMTHD_uNAME

// ***** VDMTOOLS START Name=INST_uINV_uBROKEN KEEP=NO
  private static final String INST_uINV_uBROKEN = new String("221: Instance invariant was broken");
// ***** VDMTOOLS END Name=INST_uINV_uBROKEN

// ***** VDMTOOLS START Name=IND_uINH_uNOT_uSUPPORTED KEEP=NO
  private static final String IND_uINH_uNOT_uSUPPORTED = new String("222: Indexed inheritance is not supported");
// ***** VDMTOOLS END Name=IND_uINH_uNOT_uSUPPORTED

// ***** VDMTOOLS START Name=UNEXP_uRET_uVAL_uINIT_uCL KEEP=NO
  private static final String UNEXP_uRET_uVAL_uINIT_uCL = new String("223: Initialisation statement returned a value");
// ***** VDMTOOLS END Name=UNEXP_uRET_uVAL_uINIT_uCL

// ***** VDMTOOLS START Name=CIRC_uCL_uDEPENDENCY KEEP=NO
  private static final String CIRC_uCL_uDEPENDENCY = new String("224: Circular inheritance dependecy detected");
// ***** VDMTOOLS END Name=CIRC_uCL_uDEPENDENCY

// ***** VDMTOOLS START Name=MULT_uTPS_uNAME KEEP=NO
  private static final String MULT_uTPS_uNAME = new String("225: Multiple defined types with the same name within current scope");
// ***** VDMTOOLS END Name=MULT_uTPS_uNAME

// ***** VDMTOOLS START Name=DB_uOBJ_uEXISTS KEEP=NO
  private static final String DB_uOBJ_uEXISTS = new String("226: The object name already exists. Please destroy the object before creating a new object of the same name");
// ***** VDMTOOLS END Name=DB_uOBJ_uEXISTS

// ***** VDMTOOLS START Name=DB_uOBJ_uNOT_uEXISTS KEEP=NO
  private static final String DB_uOBJ_uNOT_uEXISTS = new String("227: The name is not an object");
// ***** VDMTOOLS END Name=DB_uOBJ_uNOT_uEXISTS

// ***** VDMTOOLS START Name=OBJ_uRECORD_uEXP KEEP=NO
  private static final String OBJ_uRECORD_uEXP = new String("228: An object or record was expected");
// ***** VDMTOOLS END Name=OBJ_uRECORD_uEXP

// ***** VDMTOOLS START Name=CIRC_uCL_uINIT KEEP=NO
  private static final String CIRC_uCL_uINIT = new String("229: Circular dependency in initialisation detected");
// ***** VDMTOOLS END Name=CIRC_uCL_uINIT

// ***** VDMTOOLS START Name=NAME_uUNKNOWN KEEP=NO
  private static final String NAME_uUNKNOWN = new String("230: Name unknown");
// ***** VDMTOOLS END Name=NAME_uUNKNOWN

// ***** VDMTOOLS START Name=DC_uNOT_uPATTERN_uNAME KEEP=NO
  private static final String DC_uNOT_uPATTERN_uNAME = new String("231: An abstract field of a record must only pattern match with a pattern name");
// ***** VDMTOOLS END Name=DC_uNOT_uPATTERN_uNAME

// ***** VDMTOOLS START Name=LOCAL_uCOMPOSE_uTYPEDEF KEEP=NO
  private static final String LOCAL_uCOMPOSE_uTYPEDEF = new String("232: The interpreter does not support local type definitions of records");
// ***** VDMTOOLS END Name=LOCAL_uCOMPOSE_uTYPEDEF

// ***** VDMTOOLS START Name=NOTYETSPECFCT KEEP=NO
  private static final String NOTYETSPECFCT = new String("233: Cannot evaluate `not yet specified\' functions");
// ***** VDMTOOLS END Name=NOTYETSPECFCT

// ***** VDMTOOLS START Name=NOTYETSPECOP KEEP=NO
  private static final String NOTYETSPECOP = new String("234: Cannot evaluate `not yet specified\' operations");
// ***** VDMTOOLS END Name=NOTYETSPECOP

// ***** VDMTOOLS START Name=BUG_u263 KEEP=NO
  private static final String BUG_u263 = new String("236: You has hit bug number 263, please see the bug report for a work-around");
// ***** VDMTOOLS END Name=BUG_u263

// ***** VDMTOOLS START Name=EXIT_uIN_uINIT KEEP=NO
  private static final String EXIT_uIN_uINIT = new String("237: Exit value returned in initialisation of instance variable");
// ***** VDMTOOLS END Name=EXIT_uIN_uINIT

// ***** VDMTOOLS START Name=SUBRESP KEEP=NO
  private static final String SUBRESP = new String("238: Cannot evaluate `sub responsible\' functions");
// ***** VDMTOOLS END Name=SUBRESP

// ***** VDMTOOLS START Name=NUMERIC_uSET KEEP=NO
  private static final String NUMERIC_uSET = new String("239: Quantification in sequence comprehension must be over numeric values");
// ***** VDMTOOLS END Name=NUMERIC_uSET

// ***** VDMTOOLS START Name=WRONG_uNO_uRES KEEP=NO
  private static final String WRONG_uNO_uRES = new String("240: Wrong number of results");
// ***** VDMTOOLS END Name=WRONG_uNO_uRES

// ***** VDMTOOLS START Name=LOWER_uBOUND_uNOT_uA_uNUMBER KEEP=NO
  public static final String LOWER_uBOUND_uNOT_uA_uNUMBER = new String("241: Lower bound is not a number");
// ***** VDMTOOLS END Name=LOWER_uBOUND_uNOT_uA_uNUMBER

// ***** VDMTOOLS START Name=UPPER_uBOUND_uNOT_uA_uNUMBER KEEP=NO
  public static final String UPPER_uBOUND_uNOT_uA_uNUMBER = new String("242: Upper bound is not a number");
// ***** VDMTOOLS END Name=UPPER_uBOUND_uNOT_uA_uNUMBER

// ***** VDMTOOLS START Name=STEP_uNOT_uA_uNUMBER KEEP=NO
  private static final String STEP_uNOT_uA_uNUMBER = new String("243: Step is not a number");
// ***** VDMTOOLS END Name=STEP_uNOT_uA_uNUMBER

// ***** VDMTOOLS START Name=UPPER_uBOUND_uLARGER_uTHAN_uLOWER_uBOUND KEEP=NO
  private static final String UPPER_uBOUND_uLARGER_uTHAN_uLOWER_uBOUND = new String("244: Lower bound larger than upper bound");
// ***** VDMTOOLS END Name=UPPER_uBOUND_uLARGER_uTHAN_uLOWER_uBOUND

// ***** VDMTOOLS START Name=LOWER_uBOUND_uLARGER_uTHAN_uUPPER_uBOUND KEEP=NO
  private static final String LOWER_uBOUND_uLARGER_uTHAN_uUPPER_uBOUND = new String("245:Lower bound larger than upper bound");
// ***** VDMTOOLS END Name=LOWER_uBOUND_uLARGER_uTHAN_uUPPER_uBOUND

// ***** VDMTOOLS START Name=STEP_uINDEX_uIS_uZERO KEEP=NO
  private static final String STEP_uINDEX_uIS_uZERO = new String("246: Step index is zero");
// ***** VDMTOOLS END Name=STEP_uINDEX_uIS_uZERO

// ***** VDMTOOLS START Name=LOOP_uEXPR_uNOT_uAN_uEXPR KEEP=NO
  private static final String LOOP_uEXPR_uNOT_uAN_uEXPR = new String("247: Expression in while-statment does not evaluate to an expression");
// ***** VDMTOOLS END Name=LOOP_uEXPR_uNOT_uAN_uEXPR

// ***** VDMTOOLS START Name=TEST_uEXPR_uNOT_uAN_uEXPR KEEP=NO
  private static final String TEST_uEXPR_uNOT_uAN_uEXPR = new String("248: Test expression in if-statment does not evaluate to an expression");
// ***** VDMTOOLS END Name=TEST_uEXPR_uNOT_uAN_uEXPR

// ***** VDMTOOLS START Name=TUPLE_uOUTSIDE_uINDEX KEEP=NO
  private static final String TUPLE_uOUTSIDE_uINDEX = new String("249: Tuple selection outside its index");
// ***** VDMTOOLS END Name=TUPLE_uOUTSIDE_uINDEX

// ***** VDMTOOLS START Name=INSTVAR_uNOT_uPUBLIC KEEP=NO
  private static final String INSTVAR_uNOT_uPUBLIC = new String("250: Instance variable must be public");
// ***** VDMTOOLS END Name=INSTVAR_uNOT_uPUBLIC

// ***** VDMTOOLS START Name=INSTVAR_uNOT_uIN_uSCOPE KEEP=NO
  private static final String INSTVAR_uNOT_uIN_uSCOPE = new String("251: Instance variable is not in scope");
// ***** VDMTOOLS END Name=INSTVAR_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=FUN_uNOT_uIN_uSCOPE KEEP=NO
  private static final String FUN_uNOT_uIN_uSCOPE = new String("252: Function is not in scope");
// ***** VDMTOOLS END Name=FUN_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=OP_uNOT_uIN_uSCOPE KEEP=NO
  private static final String OP_uNOT_uIN_uSCOPE = new String("253: Operation is not in scope");
// ***** VDMTOOLS END Name=OP_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=VAL_uNOT_uIN_uSCOPE KEEP=NO
  private static final String VAL_uNOT_uIN_uSCOPE = new String("254: Value is not in scope");
// ***** VDMTOOLS END Name=VAL_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=TYPE_uNOT_uIN_uSCOPE KEEP=NO
  private static final String TYPE_uNOT_uIN_uSCOPE = new String("256: Type is not in scope");
// ***** VDMTOOLS END Name=TYPE_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=NOT_uIN_uSCOPE KEEP=NO
  private static final String NOT_uIN_uSCOPE = new String("257: Construct not in scope");
// ***** VDMTOOLS END Name=NOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=MULT_uDEF KEEP=NO
  private static final String MULT_uDEF = new String("258: Construct is multiple defined within the current scope");
// ***** VDMTOOLS END Name=MULT_uDEF

// ***** VDMTOOLS START Name=INIT_uNOT_uPOSSIBLE KEEP=NO
  private static final String INIT_uNOT_uPOSSIBLE = new String("259: Initialisation is not possible");
// ***** VDMTOOLS END Name=INIT_uNOT_uPOSSIBLE

// ***** VDMTOOLS START Name=INDEXED_uASSIGN KEEP=NO
  private static final String INDEXED_uASSIGN = new String("260: Indexed assignment can only be done when initialised");
// ***** VDMTOOLS END Name=INDEXED_uASSIGN

// ***** VDMTOOLS START Name=OP_uIN_uGUARD KEEP=NO
  private static final String OP_uIN_uGUARD = new String("261: You cannot use an operation inside a permission guard");
// ***** VDMTOOLS END Name=OP_uIN_uGUARD

// ***** VDMTOOLS START Name=NO_uTHREAD KEEP=NO
  private static final String NO_uTHREAD = new String("262: This class have no thread to start");
// ***** VDMTOOLS END Name=NO_uTHREAD

// ***** VDMTOOLS START Name=DEADLOCK_uDETECTED KEEP=NO
  private static final String DEADLOCK_uDETECTED = new String("263: Deadlock is detected");
// ***** VDMTOOLS END Name=DEADLOCK_uDETECTED

// ***** VDMTOOLS START Name=PRE_uCOND_uAPPLY_uEXPR KEEP=NO
  private static final String PRE_uCOND_uAPPLY_uEXPR = new String("264: The special pre-condition application expression is not supported in the interpreter");
// ***** VDMTOOLS END Name=PRE_uCOND_uAPPLY_uEXPR

// ***** VDMTOOLS START Name=NO_uGUARD_uIN_uINIT KEEP=NO
  private static final String NO_uGUARD_uIN_uINIT;
// ***** VDMTOOLS END Name=NO_uGUARD_uIN_uINIT

// ***** VDMTOOLS START Name=OP_uOR_uFUN_uNOT_uIN_uSCOPE KEEP=NO
  private static final String OP_uOR_uFUN_uNOT_uIN_uSCOPE = new String("266: Operation or function is not in scope");
// ***** VDMTOOLS END Name=OP_uOR_uFUN_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=OP_uDEF_uIN_uMULTSUPERS KEEP=NO
  private static final String OP_uDEF_uIN_uMULTSUPERS = new String("267: Operation defined in multiple super classes, so it is not alllowed to add permission predicate for class");
// ***** VDMTOOLS END Name=OP_uDEF_uIN_uMULTSUPERS

// ***** VDMTOOLS START Name=SEL_uNONVALID_uTHREADID KEEP=NO
  private static final String SEL_uNONVALID_uTHREADID = new String("268: A non-valid thread id was used");
// ***** VDMTOOLS END Name=SEL_uNONVALID_uTHREADID

// ***** VDMTOOLS START Name=MULT_uTHREAD_uINH KEEP=NO
  private static final String MULT_uTHREAD_uINH = new String("269: More than one thread inherited");
// ***** VDMTOOLS END Name=MULT_uTHREAD_uINH

// ***** VDMTOOLS START Name=NOCONSTRUCTOR KEEP=NO
  private static final String NOCONSTRUCTOR = new String("280: No constructor with this parameter list is in scope");
// ***** VDMTOOLS END Name=NOCONSTRUCTOR

// ***** VDMTOOLS START Name=MULTIOVERLOADED KEEP=NO
  private static final String MULTIOVERLOADED = new String("281: Unable to resolve overloaded operation call");
// ***** VDMTOOLS END Name=MULTIOVERLOADED

// ***** VDMTOOLS START Name=STATIC_uNOT_uIN_uSCOPE KEEP=NO
  private static final String STATIC_uNOT_uIN_uSCOPE = new String("282: Static member is not in scope");
// ***** VDMTOOLS END Name=STATIC_uNOT_uIN_uSCOPE

// ***** VDMTOOLS START Name=STATIC_uIV_uNO_uVALUE KEEP=NO
  private static final String STATIC_uIV_uNO_uVALUE = new String("283: Static instance variable must be initialised");
// ***** VDMTOOLS END Name=STATIC_uIV_uNO_uVALUE

// ***** VDMTOOLS START Name=NOOVERLOADED KEEP=NO
  private static final String NOOVERLOADED = new String("285: No overloaded operation or function with this parameter list is in scope");
// ***** VDMTOOLS END Name=NOOVERLOADED

// ***** VDMTOOLS START Name=NOOBJECT KEEP=NO
  private static final String NOOBJECT = new String("286: No object is present");
// ***** VDMTOOLS END Name=NOOBJECT

// ***** VDMTOOLS START Name=NONEMPTY_uSEQ_uEXPECTED KEEP=NO
  public static final String NONEMPTY_uSEQ_uEXPECTED = new String("287: A non-empty sequence was expected");
// ***** VDMTOOLS END Name=NONEMPTY_uSEQ_uEXPECTED


// ***** VDMTOOLS START Name=static KEEP=NO
  static {

    String NO_uGUARD_uIN_uINITtemp = null;
    {
      try {

        String tmpVal_1 = null;
        tmpVal_1 = new String("265: An operation with a permission guard may not ").concat(new String("be used in the initialisation of an instance variable"));
        NO_uGUARD_uIN_uINITtemp = tmpVal_1;
      }
      catch (Throwable e) {
        System.out.println(e.getMessage());
      }
    }
    NO_uGUARD_uIN_uINIT = NO_uGUARD_uIN_uINITtemp;
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=vdm_init_RTERR KEEP=NO
  private void vdm_init_RTERR () throws CGException {
    try {

      errmsgs = new HashMap();
      curcl = new String("");
      curtr = new String("");
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_RTERR


// ***** VDMTOOLS START Name=RTERR KEEP=NO
  public RTERR () throws CGException {
    vdm_init_RTERR();
  }
// ***** VDMTOOLS END Name=RTERR


// ***** VDMTOOLS START Name=ReportError#2|Object|String KEEP=NO
  public void ReportError (final Object expr, final String errmsg) throws CGException {
    if (new Boolean(UTIL.equals(expr, null)).booleanValue()) 
      AddErrMsg(curcl, curtr, new Long(1), new Long(1), errmsg);
    else {

      IOmlNode node = (IOmlNode) expr;
      Long tmpVal_8 = null;
      tmpVal_8 = node.getLine();
      Long line = null;
      line = tmpVal_8;
      Long tmpVal_9 = null;
      tmpVal_9 = node.getColumn();
      Long col = null;
      col = tmpVal_9;
      AddErrMsg(curcl, curtr, line, col, errmsg);
    }
  }
// ***** VDMTOOLS END Name=ReportError#2|Object|String


// ***** VDMTOOLS START Name=AddErrMsg#5|String|String|Long|Long|String KEEP=NO
  public void AddErrMsg (final String clnm, final String trnm, final Long line, final Long col, final String errmsg) throws CGException {

    Boolean cond_6 = null;
    cond_6 = new Boolean(errmsgs.containsKey(clnm));
    if (cond_6.booleanValue()) {

      HashSet rhs_18 = new HashSet();
      HashSet var1_19 = new HashSet();
      Boolean cond_21 = null;
      cond_21 = new Boolean(((HashMap) errmsgs.get(clnm)).containsKey(trnm));
      if (cond_21.booleanValue()) 
        var1_19 = (HashSet) ((HashMap) errmsgs.get(clnm)).get(trnm);
      else 
        var1_19 = new HashSet();
      HashSet var2_30 = new HashSet();
      ErrMsg enum_set_31 = null;
      enum_set_31 = new ErrMsg(line, col, errmsg);
      var2_30 = new HashSet();
      var2_30.add(enum_set_31);
      rhs_18 = (HashSet) var1_19.clone();
      rhs_18.addAll(var2_30);
      HashMap level_35 = errmsgs.containsKey(clnm) ? (HashMap) errmsgs.get(clnm) : new HashMap();
      level_35.put(trnm, rhs_18);
      errmsgs.put(clnm, level_35);
    }
    else {

      HashMap mr_11 = new HashMap();
      HashSet tmpVar2_13 = new HashSet();
      ErrMsg enum_set_14 = null;
      enum_set_14 = new ErrMsg(line, col, errmsg);
      tmpVar2_13 = new HashSet();
      tmpVar2_13.add(enum_set_14);
      mr_11 = new HashMap();
      mr_11.put(trnm, tmpVar2_13);
      errmsgs.put(clnm, mr_11);
    }
  }
// ***** VDMTOOLS END Name=AddErrMsg#5|String|String|Long|Long|String


// ***** VDMTOOLS START Name=GetErrMsg#2|String|String KEEP=NO
  public HashSet GetErrMsg (final String clnm, final String trnm) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    var1_4 = new Boolean(errmsgs.containsKey(clnm));
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_7 = null;
        var2_7 = new Boolean(((HashMap) errmsgs.get(clnm)).containsKey(trnm));
        cond_3 = var2_7;
      }
    }
    if (cond_3.booleanValue()) 
      return (HashSet) ((HashMap) errmsgs.get(clnm)).get(trnm);
    else 
      return new HashSet();
  }
// ***** VDMTOOLS END Name=GetErrMsg#2|String|String


// ***** VDMTOOLS START Name=HasError#2|String|String KEEP=NO
  public Boolean HasError (final String clnm, final String trnm) throws CGException {

    Boolean cond_3 = null;
    cond_3 = new Boolean(errmsgs.containsKey(clnm));
    if (cond_3.booleanValue()) {

      HashMap tmp = (HashMap) errmsgs.get(clnm);
      Boolean cond_11 = null;
      cond_11 = new Boolean(tmp.containsKey(trnm));
      if (cond_11.booleanValue()) 
        return new Boolean((new Long(((HashSet) ((HashMap) errmsgs.get(clnm)).get(trnm)).size()).intValue()) > (new Long(0).intValue()));
      else 
        return new Boolean(false);
    }
    else 
      return new Boolean(false);
  }
// ***** VDMTOOLS END Name=HasError#2|String|String


// ***** VDMTOOLS START Name=GetErrors KEEP=NO
  public HashMap GetErrors () throws CGException {
    return errmsgs;
  }
// ***** VDMTOOLS END Name=GetErrors


// ***** VDMTOOLS START Name=SetCurrentClass#1|String KEEP=NO
  public void SetCurrentClass (final String clnm) throws CGException {
    curcl = UTIL.ConvertToString(UTIL.clone(clnm));
  }
// ***** VDMTOOLS END Name=SetCurrentClass#1|String


// ***** VDMTOOLS START Name=SetCurrentTrace#1|String KEEP=NO
  public void SetCurrentTrace (final String trnm) throws CGException {
    curtr = UTIL.ConvertToString(UTIL.clone(trnm));
  }
// ***** VDMTOOLS END Name=SetCurrentTrace#1|String

}
;
