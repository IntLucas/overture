//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-03-25 by the VDM++ to JAVA Code Generator
// (v8.2b - Mon 16-Mar-2009 14:59:29)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.traces;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.util.*;
import org.overturetool.ast.imp.*;
import org.overturetool.ast.itf.*;
@SuppressWarnings({"unchecked","unused"})
// ***** VDMTOOLS END Name=imports



public class Expand extends DEF {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=zeroOrMoreMax KEEP=NO
  private Long zeroOrMoreMax = null;
// ***** VDMTOOLS END Name=zeroOrMoreMax

// ***** VDMTOOLS START Name=oneOrMoreMax KEEP=NO
  private Long oneOrMoreMax = null;
// ***** VDMTOOLS END Name=oneOrMoreMax

// ***** VDMTOOLS START Name=seqOfNames KEEP=NO
  private Vector seqOfNames = null;
// ***** VDMTOOLS END Name=seqOfNames

// ***** VDMTOOLS START Name=eval KEEP=NO
  private Eval eval = null;
// ***** VDMTOOLS END Name=eval

// ***** VDMTOOLS START Name=dfs KEEP=NO
  private DEF dfs = null;
// ***** VDMTOOLS END Name=dfs

// ***** VDMTOOLS START Name=errorLog KEEP=NO
  private RTERR errorLog = null;
// ***** VDMTOOLS END Name=errorLog

// ***** VDMTOOLS START Name=cxt_ul_ustack KEEP=NO
  private Vector cxt_ul_ustack = null;
// ***** VDMTOOLS END Name=cxt_ul_ustack


// ***** VDMTOOLS START Name=vdm_init_Expand KEEP=NO
  private void vdm_init_Expand () throws CGException {
    try {

      zeroOrMoreMax = new Long(0);
      oneOrMoreMax = new Long(0);
      seqOfNames = new Vector();
      cxt_ul_ustack = new Vector();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Expand


// ***** VDMTOOLS START Name=Expand KEEP=NO
  public Expand () throws CGException {
    vdm_init_Expand();
  }
// ***** VDMTOOLS END Name=Expand


// ***** VDMTOOLS START Name=Expand#1|RTERR KEEP=NO
  public Expand (final RTERR errLog) throws CGException {

    vdm_init_Expand();
    {

      errorLog = (RTERR) UTIL.clone(errLog);
      zeroOrMoreMax = UTIL.NumberToLong(UTIL.clone(new Long(3)));
      oneOrMoreMax = UTIL.NumberToLong(UTIL.clone(new Long(3)));
    }
  }
// ***** VDMTOOLS END Name=Expand#1|RTERR


// ***** VDMTOOLS START Name=Expand#2|Long|RTERR KEEP=NO
  public Expand (final Long unlimitedValue, final RTERR errLog) throws CGException {

    vdm_init_Expand();
    {

      errorLog = (RTERR) UTIL.clone(errLog);
      zeroOrMoreMax = UTIL.NumberToLong(UTIL.clone(unlimitedValue));
      oneOrMoreMax = UTIL.NumberToLong(UTIL.clone(unlimitedValue));
    }
  }
// ***** VDMTOOLS END Name=Expand#2|Long|RTERR


// ***** VDMTOOLS START Name=ExpandSpecTraces#2|IOmlSpecifications|HashSet KEEP=NO
  public HashMap ExpandSpecTraces (final IOmlSpecifications spec, final HashSet cl_us) throws CGException {

    HashMap res_um = new HashMap();
    dfs = (DEF) UTIL.clone(new DEF(spec, errorLog));
    {

      Vector sq_6 = null;
      sq_6 = spec.getClassList();
      IOmlClass cl = null;
      for (Iterator enm_20 = sq_6.iterator(); enm_20.hasNext(); ) {

        IOmlClass elem_7 = (IOmlClass) enm_20.next();
        cl = (IOmlClass) elem_7;
        {

          String id = null;
          id = cl.getIdentifier();
          Boolean cond_12 = null;
          cond_12 = new Boolean(cl_us.contains(id));
          if (cond_12.booleanValue()) 
            res_um.put(id, ExpandClassTraces((IOmlClass) cl));
        }
      }
    }
    return res_um;
  }
// ***** VDMTOOLS END Name=ExpandSpecTraces#2|IOmlSpecifications|HashSet


// ***** VDMTOOLS START Name=ExpandClassTraces#1|IOmlClass KEEP=NO
  protected HashMap ExpandClassTraces (final IOmlClass cl) throws CGException {

    HashMap res_um = new HashMap();
    {

      String tmpVal_3 = null;
      tmpVal_3 = cl.getIdentifier();
      String clid = null;
      clid = tmpVal_3;
      Vector body = null;
      body = cl.getClassBody();
      {

        errorLog.SetCurrentClass(clid);
        eval = (Eval) UTIL.clone(new Eval(clid, dfs, errorLog));
        {

          IOmlDefinitionBlock def_ul = null;
          for (Iterator enm_24 = body.iterator(); enm_24.hasNext(); ) {

            IOmlDefinitionBlock elem_12 = (IOmlDefinitionBlock) enm_24.next();
            def_ul = (IOmlDefinitionBlock) elem_12;
            if (new Boolean(def_ul instanceof IOmlTraceDefinitions).booleanValue()) {

              HashMap rhs_17 = new HashMap();
              HashMap modmap_18 = new HashMap();
              modmap_18 = ExpandTraceDefs(clid, (IOmlTraceDefinitions) def_ul);
              rhs_17 = new HashMap(res_um);
              rhs_17.putAll(modmap_18);
              res_um = (HashMap) UTIL.clone(rhs_17);
            }
          }
        }
      }
    }
    return res_um;
  }
// ***** VDMTOOLS END Name=ExpandClassTraces#1|IOmlClass


// ***** VDMTOOLS START Name=ExpandTraceDefs#2|String|IOmlTraceDefinitions KEEP=NO
  protected HashMap ExpandTraceDefs (final String clid, final IOmlTraceDefinitions def_ul) throws CGException {

    HashMap res_um = new HashMap();
    {

      Vector sq_3 = null;
      sq_3 = def_ul.getTraces();
      OmlNamedTrace ntrace = null;
      for (Iterator enm_20 = sq_3.iterator(); enm_20.hasNext(); ) {

        IOmlNamedTrace elem_4 = (IOmlNamedTrace) enm_20.next();
        ntrace = (OmlNamedTrace) elem_4;
        {

          String tmpVal_8 = null;
          Vector par_9 = null;
          par_9 = ntrace.getName();
          tmpVal_8 = Util.GetNameOfTrace(par_9);
          String name = null;
          name = tmpVal_8;
          IOmlTraceDefinition tmpVal_10 = null;
          tmpVal_10 = (IOmlTraceDefinition) ntrace.getDefs();
          IOmlTraceDefinition defs = null;
          defs = (IOmlTraceDefinition) tmpVal_10;
          {

            errorLog.SetCurrentTrace(name);
            Vector rhs_13 = null;
            Vector par_15 = null;
            par_15 = new Vector();
            par_15.add(new HashMap());
            rhs_13 = ExpandTraceDef((IOmlTraceDefinition) defs, par_15);
            res_um.put(name, rhs_13);
          }
        }
      }
    }
    return res_um;
  }
// ***** VDMTOOLS END Name=ExpandTraceDefs#2|String|IOmlTraceDefinitions


// ***** VDMTOOLS START Name=ExpandTraceDef#2|IOmlTraceDefinition|Vector KEEP=NO
  private Vector ExpandTraceDef (final IOmlTraceDefinition tdef, final Vector ctx_ul) throws CGException {
    if (new Boolean(tdef instanceof IOmlTraceDefinitionItem).booleanValue()) 
      return ExpandTraceDefItem((IOmlTraceDefinitionItem) tdef, ctx_ul);
    else 
      if (new Boolean(tdef instanceof IOmlTraceSequenceDefinition).booleanValue()) 
        return ExpandTraceSeqDef((IOmlTraceSequenceDefinition) tdef, ctx_ul);
      else {
        return ExpandTraceChoiceDef((IOmlTraceChoiceDefinition) tdef, ctx_ul);
      }
  }
// ***** VDMTOOLS END Name=ExpandTraceDef#2|IOmlTraceDefinition|Vector


// ***** VDMTOOLS START Name=ExpandTraceDefItem#2|IOmlTraceDefinitionItem|Vector KEEP=NO
  private Vector ExpandTraceDefItem (final IOmlTraceDefinitionItem tdef, final Vector ctx_ul) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = tdef.getBind();
    Vector bind = null;
    bind = tmpVal_4;
    IOmlTraceCoreDefinition trace = null;
    trace = (IOmlTraceCoreDefinition) tdef.getTest();
    IOmlTraceRepeatPattern tmpVal_6 = null;
    Boolean cond_8 = null;
    cond_8 = tdef.hasRegexpr();
    if (cond_8.booleanValue()) 
      tmpVal_6 = (IOmlTraceRepeatPattern) tdef.getRegexpr();
    else 
      tmpVal_6 = null;
    IOmlTraceRepeatPattern regexpr = null;
    regexpr = (IOmlTraceRepeatPattern) tmpVal_6;
    Vector new_uctx_ul = ExpandTraceBinds(bind, ctx_ul);
    Vector tmpVal_12 = null;
    tmpVal_12 = ExpandTraceCoreDef((IOmlTraceCoreDefinition) trace, new_uctx_ul);
    Vector expr_ul_ul = null;
    expr_ul_ul = tmpVal_12;
    Vector rexpr_15 = null;
    if (new Boolean(UTIL.equals(regexpr, null)).booleanValue()) 
      rexpr_15 = expr_ul_ul;
    else 
      rexpr_15 = ExpandTraceRepeatPat((IOmlTraceRepeatPattern) regexpr, expr_ul_ul);
    return rexpr_15;
  }
// ***** VDMTOOLS END Name=ExpandTraceDefItem#2|IOmlTraceDefinitionItem|Vector


// ***** VDMTOOLS START Name=ExpandTraceSeqDef#2|IOmlTraceSequenceDefinition|Vector KEEP=NO
  private Vector ExpandTraceSeqDef (final IOmlTraceSequenceDefinition tdef, final Vector ctx_ul) throws CGException {

    Vector expr_ul_ul = null;
    expr_ul_ul = new Vector();
    expr_ul_ul.add(new Vector());
    {

      Vector sq_4 = null;
      sq_4 = tdef.getDefs();
      IOmlTraceDefinition td = null;
      for (Iterator enm_16 = sq_4.iterator(); enm_16.hasNext(); ) {

        IOmlTraceDefinition elem_5 = (IOmlTraceDefinition) enm_16.next();
        td = (IOmlTraceDefinition) elem_5;
        {

          Vector e_ul_ul = ExpandTraceDef((IOmlTraceDefinition) td, ctx_ul);
          expr_ul_ul = (Vector) UTIL.ConvertToList(UTIL.clone(CombineTraces(expr_ul_ul, e_ul_ul)));
        }
      }
    }
    return expr_ul_ul;
  }
// ***** VDMTOOLS END Name=ExpandTraceSeqDef#2|IOmlTraceSequenceDefinition|Vector


// ***** VDMTOOLS START Name=ExpandTraceChoiceDef#2|IOmlTraceChoiceDefinition|Vector KEEP=NO
  private Vector ExpandTraceChoiceDef (final IOmlTraceChoiceDefinition tdef, final Vector ctx_ul) throws CGException {

    Vector expr_ul_ul = new Vector();
    {

      Vector sq_3 = null;
      sq_3 = tdef.getDefs();
      IOmlTraceDefinition td = null;
      for (Iterator enm_15 = sq_3.iterator(); enm_15.hasNext(); ) {

        IOmlTraceDefinition elem_4 = (IOmlTraceDefinition) enm_15.next();
        td = (IOmlTraceDefinition) elem_4;
        {

          Vector e_ul_ul = ExpandTraceDef((IOmlTraceDefinition) td, ctx_ul);
          Vector rhs_11 = null;
          rhs_11 = (Vector) expr_ul_ul.clone();
          rhs_11.addAll(e_ul_ul);
          expr_ul_ul = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_11));
        }
      }
    }
    return expr_ul_ul;
  }
// ***** VDMTOOLS END Name=ExpandTraceChoiceDef#2|IOmlTraceChoiceDefinition|Vector


// ***** VDMTOOLS START Name=ExpandTraceBinds#2|Vector|Vector KEEP=NO
  private Vector ExpandTraceBinds (final Vector bind_ul, final Vector cxt_ul) throws CGException {

    Vector c_ul = cxt_ul;
    {

      IOmlTraceBinding bind = null;
      for (Iterator enm_20 = bind_ul.iterator(); enm_20.hasNext(); ) {

        IOmlTraceBinding elem_4 = (IOmlTraceBinding) enm_20.next();
        bind = (IOmlTraceBinding) elem_4;
        {

          Vector c_ul2 = null;
          if (new Boolean(bind instanceof IOmlTraceLetBinding).booleanValue()) 
            c_ul2 = ExtractLetBinding((IOmlTraceLetBinding) bind, c_ul);
          else 
            c_ul2 = ExtractLetBeBinding((IOmlTraceLetBeBinding) bind, c_ul);
          Vector rhs_16 = null;
          rhs_16 = (Vector) eval.CombineContexts(c_ul, c_ul2);
          c_ul = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_16));
        }
      }
    }
    return c_ul;
  }
// ***** VDMTOOLS END Name=ExpandTraceBinds#2|Vector|Vector


// ***** VDMTOOLS START Name=ExpandTraceCoreDef#2|IOmlTraceCoreDefinition|Vector KEEP=NO
  private Vector ExpandTraceCoreDef (final IOmlTraceCoreDefinition tdef, final Vector cxt_ul) throws CGException {

    Vector varRes_3 = null;
    if (new Boolean(tdef instanceof IOmlTraceMethodApply).booleanValue()) 
      varRes_3 = ExpandTraceMethodApply((IOmlTraceMethodApply) tdef, cxt_ul);
    else 
      varRes_3 = ExpandBracketedTraceDef((IOmlTraceBracketedDefinition) tdef, cxt_ul);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=ExpandTraceCoreDef#2|IOmlTraceCoreDefinition|Vector


// ***** VDMTOOLS START Name=ExpandBracketedTraceDef#2|IOmlTraceBracketedDefinition|Vector KEEP=NO
  private Vector ExpandBracketedTraceDef (final IOmlTraceBracketedDefinition tdef, final Vector cxt_ul) throws CGException {

    PushCxt(cxt_ul);
    {

      Vector e_ul_ul = null;
      IOmlTraceDefinition par_7 = null;
      par_7 = (IOmlTraceDefinition) tdef.getDefinition();
      Vector par_8 = null;
      par_8 = new Vector();
      par_8.add(new HashMap());
      e_ul_ul = ExpandTraceDef((IOmlTraceDefinition) par_7, par_8);
      Vector e_ul_ul2 = null;
      {

        Vector res_l_11 = new Vector();
        HashSet resBind_s_13 = new HashSet();
        HashSet riseq_17 = new HashSet();
        int max_18 = e_ul_ul.size();
        for (int i_19 = 1; i_19 <= max_18; i_19++) 
          riseq_17.add(new Long(i_19));
        resBind_s_13 = riseq_17;
        Vector bind_l_12 = null;
        bind_l_12 = UTIL.Sort(resBind_s_13);
        Long i = null;
        for (Iterator enm_27 = bind_l_12.iterator(); enm_27.hasNext(); ) {

          Long e_15 = UTIL.NumberToLong(enm_27.next());
          i = e_15;
          Vector reselem_20 = null;
          Vector par_21 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= e_ul_ul.size())) 
            par_21 = (Vector) UTIL.ConvertToList(e_ul_ul.get(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_20 = AddContextToExprList(par_21, (Vector) UTIL.ConvertToList(cxt_ul_ustack.get(0)));
          res_l_11.add(reselem_20);
        }
        e_ul_ul2 = res_l_11;
      }
      {

        PopCxt();
        Vector rexpr_29 = null;
        Vector rdcseq_31 = new Vector();
        for (Iterator enm_34 = e_ul_ul2.iterator(); enm_34.hasNext(); ) {

          Vector e_32 = (Vector) UTIL.ConvertToList(enm_34.next());
          rdcseq_31.addAll(e_32);
        }
        rexpr_29 = rdcseq_31;
        return rexpr_29;
      }
    }
  }
// ***** VDMTOOLS END Name=ExpandBracketedTraceDef#2|IOmlTraceBracketedDefinition|Vector


// ***** VDMTOOLS START Name=ExpandTraceMethodApply#2|IOmlTraceMethodApply|Vector KEEP=NO
  private Vector ExpandTraceMethodApply (final IOmlTraceMethodApply tdef, final Vector cxt_ul) throws CGException {

    Vector varRes_3 = null;
    {

      String vdm_var = null;
      vdm_var = tdef.getVariableName();
      String met_unm = null;
      met_unm = tdef.getMethodName();
      Vector args = null;
      args = tdef.getArgs();
      OmlFieldSelect fieldsel = (OmlFieldSelect) new OmlFieldSelect(new OmlName(null, vdm_var), new OmlName(null, met_unm));
      OmlApplyExpression expr = (OmlApplyExpression) new OmlApplyExpression(fieldsel, args);
      varRes_3 = AddContextToExpr((IOmlExpression) expr, cxt_ul);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=ExpandTraceMethodApply#2|IOmlTraceMethodApply|Vector


// ***** VDMTOOLS START Name=ExpandTraceRepeatPat#2|IOmlTraceRepeatPattern|Vector KEEP=NO
  private Vector ExpandTraceRepeatPat (final IOmlTraceRepeatPattern regexpr, final Vector expr_ul_ul) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceZeroOrMore))) 
        succ_3 = false;
      if (succ_3) {

        Vector rep = RepeatCombine(expr_ul_ul, new Long(1), oneOrMoreMax);
        Vector rexpr_30 = null;
        Vector var1_31 = null;
        var1_31 = new Vector();
        var1_31.add(new Vector());
        rexpr_30 = (Vector) var1_31.clone();
        rexpr_30.addAll(rep);
        return rexpr_30;
      }
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceOneOrMore))) 
          succ_3 = false;
        if (succ_3) 
          return RepeatCombine(expr_ul_ul, new Long(1), oneOrMoreMax);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceZeroOrOne))) 
            succ_3 = false;
          if (succ_3) {

            Vector rexpr_13 = null;
            Vector var2_15 = null;
            var2_15 = new Vector();
            var2_15.add(new Vector());
            rexpr_13 = (Vector) expr_ul_ul.clone();
            rexpr_13.addAll(var2_15);
            return rexpr_13;
          }
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceRange))) 
              succ_3 = false;
            if (succ_3) 
              return ExpandTraceRange((IOmlTraceRange) regexpr, expr_ul_ul);
            else {

              UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
              return new Vector();
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=ExpandTraceRepeatPat#2|IOmlTraceRepeatPattern|Vector


// ***** VDMTOOLS START Name=ExpandTraceRange#2|IOmlTraceRange|Vector KEEP=NO
  private Vector ExpandTraceRange (final IOmlTraceRange regexpr, final Vector expr_ul_ul) throws CGException {

    Long tmpVal_4 = null;
    IOmlNumericLiteral obj_5 = null;
    obj_5 = (IOmlNumericLiteral) regexpr.getLower();
    tmpVal_4 = obj_5.getVal();
    Long low = null;
    low = tmpVal_4;
    Long tmpVal_6 = null;
    Boolean cond_8 = null;
    cond_8 = regexpr.hasUpper();
    if (cond_8.booleanValue()) {

      IOmlNumericLiteral obj_9 = null;
      obj_9 = (IOmlNumericLiteral) regexpr.getUpper();
      tmpVal_6 = obj_9.getVal();
    }
    else 
      tmpVal_6 = low;
    Long high = null;
    high = tmpVal_6;
    Long l = null;
    if (new Boolean(low.intValue() == new Long(0).intValue()).booleanValue()) 
      l = new Long(1);
    else 
      l = low;
    Vector no = null;
    if (new Boolean(low.intValue() == new Long(0).intValue()).booleanValue()) {

      no = new Vector();
      no.add(new Vector());
    }
    else 
      no = new Vector();
    Vector rep = RepeatCombine(expr_ul_ul, l, high);
    Vector rexpr_25 = null;
    rexpr_25 = (Vector) no.clone();
    rexpr_25.addAll(rep);
    return rexpr_25;
  }
// ***** VDMTOOLS END Name=ExpandTraceRange#2|IOmlTraceRange|Vector


// ***** VDMTOOLS START Name=RepeatCombine#3|Vector|Long|Long KEEP=NO
  private Vector RepeatCombine (final Vector expr_ul_ul, final Long low, final Long high) throws CGException {

    Vector acc_ue_ul_ul = new Vector();
    Vector ith_ue_ul_ul = null;
    ith_ue_ul_ul = new Vector();
    ith_ue_ul_ul.add(new Vector());
    Long i = new Long(1);
    while ( new Boolean((i.intValue()) <= (high.intValue())).booleanValue()){

      Vector oldith = ith_ue_ul_ul;
      {

        Vector rhs_10 = null;
        Vector unArg_11 = null;
        {

          Vector res_l_12 = new Vector();
          HashSet resBind_s_14 = new HashSet();
          HashSet riseq_18 = new HashSet();
          int max_19 = expr_ul_ul.size();
          for (int i_20 = 1; i_20 <= max_19; i_20++) 
            riseq_18.add(new Long(i_20));
          resBind_s_14 = riseq_18;
          Vector bind_l_13 = null;
          bind_l_13 = UTIL.Sort(resBind_s_14);
          Long i2 = null;
          for (Iterator enm_41 = bind_l_13.iterator(); enm_41.hasNext(); ) {

            Long e_16 = UTIL.NumberToLong(enm_41.next());
            i2 = e_16;
            Vector reselem_21 = null;
            {

              Vector res_l_22 = new Vector();
              HashSet resBind_s_24 = new HashSet();
              HashSet riseq_28 = new HashSet();
              int max_29 = oldith.size();
              for (int i_30 = 1; i_30 <= max_29; i_30++) 
                riseq_28.add(new Long(i_30));
              resBind_s_24 = riseq_28;
              Vector bind_l_23 = null;
              bind_l_23 = UTIL.Sort(resBind_s_24);
              Long i1 = null;
              for (Iterator enm_39 = bind_l_23.iterator(); enm_39.hasNext(); ) {

                Long e_26 = UTIL.NumberToLong(enm_39.next());
                i1 = e_26;
                Vector reselem_31 = null;
                Vector var1_32 = null;
                if ((1 <= i1.intValue()) && (i1.intValue() <= oldith.size())) 
                  var1_32 = (Vector) UTIL.ConvertToList(oldith.get(i1.intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                Vector var2_35 = null;
                if ((1 <= i2.intValue()) && (i2.intValue() <= expr_ul_ul.size())) 
                  var2_35 = (Vector) UTIL.ConvertToList(expr_ul_ul.get(i2.intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                reselem_31 = (Vector) var1_32.clone();
                reselem_31.addAll(var2_35);
                res_l_22.add(reselem_31);
              }
              reselem_21 = res_l_22;
            }
            res_l_12.add(reselem_21);
          }
          unArg_11 = res_l_12;
        }
        Vector rdcseq_42 = new Vector();
        for (Iterator enm_45 = unArg_11.iterator(); enm_45.hasNext(); ) {

          Vector e_43 = (Vector) UTIL.ConvertToList(enm_45.next());
          rdcseq_42.addAll(e_43);
        }
        rhs_10 = rdcseq_42;
        ith_ue_ul_ul = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_10));
        if (new Boolean((i.intValue()) >= (low.intValue())).booleanValue()) {

          Vector rhs_49 = null;
          rhs_49 = (Vector) acc_ue_ul_ul.clone();
          rhs_49.addAll(ith_ue_ul_ul);
          acc_ue_ul_ul = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_49));
        }
        i = UTIL.NumberToLong(UTIL.clone(new Long(i.intValue() + new Long(1).intValue())));
      }
    }
    Vector rexpr_55 = null;
    rexpr_55 = (Vector) UTIL.ConvertToList(Util.RemoveDublicates(acc_ue_ul_ul, new HashSet()));
    return rexpr_55;
  }
// ***** VDMTOOLS END Name=RepeatCombine#3|Vector|Long|Long


// ***** VDMTOOLS START Name=AddContextToExpr#2|IOmlExpression|Vector KEEP=NO
  private Vector AddContextToExpr (final IOmlExpression expr, final Vector cxt_ul) throws CGException {

    Vector varRes_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = cxt_ul.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_28 = bind_l_5.iterator(); enm_28.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_28.next());
        i = e_8;
        Vector reselem_13 = null;
        {

          Vector def_ul = null;
          HashMap par_16 = new HashMap();
          if ((1 <= i.intValue()) && (i.intValue() <= cxt_ul.size())) 
            par_16 = (HashMap) cxt_ul.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          def_ul = Context2ValShapeL(par_16);
          if (new Boolean(UTIL.equals(def_ul, new Vector())).booleanValue()) {

            reselem_13 = new Vector();
            reselem_13.add(expr);
          }
          else {

            reselem_13 = new Vector();
            reselem_13.add(new OmlLetExpression(def_ul, expr));
          }
        }
        res_l_4.add(reselem_13);
      }
      varRes_3 = res_l_4;
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=AddContextToExpr#2|IOmlExpression|Vector


// ***** VDMTOOLS START Name=AddContextToExprList#2|Vector|Vector KEEP=NO
  private Vector AddContextToExprList (final Vector e_ul, final Vector cxt_ul) throws CGException {

    Vector varRes_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = cxt_ul.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_40 = bind_l_5.iterator(); enm_40.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_40.next());
        i = e_8;
        Vector reselem_13 = null;
        {

          Vector def_ul = null;
          HashMap par_16 = new HashMap();
          if ((1 <= i.intValue()) && (i.intValue() <= cxt_ul.size())) 
            par_16 = (HashMap) cxt_ul.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          def_ul = Context2ValShapeL(par_16);
          if (new Boolean(UTIL.equals(def_ul, new Vector())).booleanValue()) 
            reselem_13 = e_ul;
          else {

            Vector res_l_23 = new Vector();
            HashSet resBind_s_25 = new HashSet();
            HashSet riseq_29 = new HashSet();
            int max_30 = e_ul.size();
            for (int i_31 = 1; i_31 <= max_30; i_31++) 
              riseq_29.add(new Long(i_31));
            resBind_s_25 = riseq_29;
            Vector bind_l_24 = null;
            bind_l_24 = UTIL.Sort(resBind_s_25);
            Long i_1 = null;
            for (Iterator enm_38 = bind_l_24.iterator(); enm_38.hasNext(); ) {

              Long e_27 = UTIL.NumberToLong(enm_38.next());
              i_1 = e_27;
              OmlLetExpression reselem_32 = null;
              IOmlExpression arg_34 = null;
              if ((1 <= i_1.intValue()) && (i_1.intValue() <= e_ul.size())) 
                arg_34 = (IOmlExpression) e_ul.get(i_1.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              reselem_32 = new OmlLetExpression(def_ul, arg_34);
              res_l_23.add(reselem_32);
            }
            reselem_13 = res_l_23;
          }
        }
        res_l_4.add(reselem_13);
      }
      varRes_3 = res_l_4;
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=AddContextToExprList#2|Vector|Vector


// ***** VDMTOOLS START Name=Context2ValShapeL#1|HashMap KEEP=NO
  private Vector Context2ValShapeL (final HashMap cxt) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(cxt, new HashMap())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      HashSet tmpSet_7 = new HashSet();
      tmpSet_7.clear();
      tmpSet_7.addAll(cxt.keySet());
      String id = null;
      boolean succ_9 = false;
      for (Iterator enm_12 = tmpSet_7.iterator(); enm_12.hasNext() && !succ_9; ) {

        String tmpElem_10 = UTIL.ConvertToString(enm_12.next());
        succ_9 = true;
        id = tmpElem_10;
      }
      if (!succ_9) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      {

        OmlPatternIdentifier tmpVal_14 = null;
        tmpVal_14 = (OmlPatternIdentifier) new OmlPatternIdentifier(id);
        OmlPatternIdentifier pat = null;
        pat = (OmlPatternIdentifier) tmpVal_14;
        IOmlExpression val = null;
        val = (IOmlExpression) SEM.VAL2IOmlExpr((SEM.VAL) (SEM.VAL) cxt.get(id));
        OmlValueShape valshape = (OmlValueShape) new OmlValueShape(pat, null, val);
        Vector vdm_rest = null;
        HashMap par_25 = new HashMap();
        HashSet var1_26 = new HashSet();
        var1_26 = new HashSet();
        var1_26.add(id);
        par_25 = cxt;
        {

          HashMap tmpMap_29 = new HashMap();
          HashSet domM_30 = new HashSet();
          domM_30.addAll(par_25.keySet());
          Object elm_31;
          for (Iterator bb_32 = domM_30.iterator(); bb_32.hasNext(); ) {

            elm_31 = bb_32.next();
            if (!var1_26.contains(elm_31)) 
              tmpMap_29.put(elm_31, par_25.get(elm_31));
          }
          par_25 = tmpMap_29;
        }
        vdm_rest = Context2ValShapeL(par_25);
        Vector var1_33 = null;
        var1_33 = new Vector();
        var1_33.add(valshape);
        varRes_2 = (Vector) var1_33.clone();
        varRes_2.addAll(vdm_rest);
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=Context2ValShapeL#1|HashMap


// ***** VDMTOOLS START Name=SmallerContext#1|HashMap KEEP=NO
  private Long SmallerContext (final HashMap cxt) throws CGException {

    Long varRes_2 = null;
    HashSet unArg_3 = new HashSet();
    unArg_3.clear();
    unArg_3.addAll(cxt.keySet());
    varRes_2 = new Long(unArg_3.size());
    return varRes_2;
  }
// ***** VDMTOOLS END Name=SmallerContext#1|HashMap


// ***** VDMTOOLS START Name=CombineTraces#2|Vector|Vector KEEP=NO
  private Vector CombineTraces (final Vector e_ul_ul1, final Vector e_ul_ul2) throws CGException {

    Vector varRes_3 = null;
    Vector par_4 = null;
    Vector unArg_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = e_ul_ul2.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i2 = null;
      for (Iterator enm_35 = bind_l_7.iterator(); enm_35.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_35.next());
        i2 = e_10;
        Vector reselem_15 = null;
        {

          Vector res_l_16 = new Vector();
          HashSet resBind_s_18 = new HashSet();
          HashSet riseq_22 = new HashSet();
          int max_23 = e_ul_ul1.size();
          for (int i_24 = 1; i_24 <= max_23; i_24++) 
            riseq_22.add(new Long(i_24));
          resBind_s_18 = riseq_22;
          Vector bind_l_17 = null;
          bind_l_17 = UTIL.Sort(resBind_s_18);
          Long i1 = null;
          for (Iterator enm_33 = bind_l_17.iterator(); enm_33.hasNext(); ) {

            Long e_20 = UTIL.NumberToLong(enm_33.next());
            i1 = e_20;
            Vector reselem_25 = null;
            Vector var1_26 = null;
            if ((1 <= i1.intValue()) && (i1.intValue() <= e_ul_ul1.size())) 
              var1_26 = (Vector) UTIL.ConvertToList(e_ul_ul1.get(i1.intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Vector var2_29 = null;
            if ((1 <= i2.intValue()) && (i2.intValue() <= e_ul_ul2.size())) 
              var2_29 = (Vector) UTIL.ConvertToList(e_ul_ul2.get(i2.intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_25 = (Vector) var1_26.clone();
            reselem_25.addAll(var2_29);
            res_l_16.add(reselem_25);
          }
          reselem_15 = res_l_16;
        }
        res_l_6.add(reselem_15);
      }
      unArg_5 = res_l_6;
    }
    Vector rdcseq_36 = new Vector();
    for (Iterator enm_39 = unArg_5.iterator(); enm_39.hasNext(); ) {

      Vector e_37 = (Vector) UTIL.ConvertToList(enm_39.next());
      rdcseq_36.addAll(e_37);
    }
    par_4 = rdcseq_36;
    varRes_3 = (Vector) UTIL.ConvertToList(Util.RemoveDublicates(par_4, new HashSet()));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=CombineTraces#2|Vector|Vector


// ***** VDMTOOLS START Name=ExtractLetBinding#2|IOmlTraceLetBinding|Vector KEEP=NO
  private Vector ExtractLetBinding (final IOmlTraceLetBinding bind, final Vector cxt_ul) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = bind.getDefinitionList();
    Vector def_ul = null;
    def_ul = tmpVal_4;
    {

      Vector c_ul = cxt_ul;
      {

        IOmlValueShape valshape = null;
        for (Iterator enm_50 = def_ul.iterator(); enm_50.hasNext(); ) {

          IOmlValueShape elem_6 = (IOmlValueShape) enm_50.next();
          valshape = (IOmlValueShape) elem_6;
          {

            IOmlPattern tmpVal_10 = null;
            tmpVal_10 = (IOmlPattern) valshape.getPattern();
            IOmlPattern pat = null;
            pat = (IOmlPattern) tmpVal_10;
            IOmlExpression expr = null;
            expr = (IOmlExpression) valshape.getExpression();
            Vector val_ul = null;
            {

              Vector res_l_13 = new Vector();
              HashSet resBind_s_15 = new HashSet();
              HashSet riseq_19 = new HashSet();
              int max_20 = c_ul.size();
              for (int i_21 = 1; i_21 <= max_20; i_21++) 
                riseq_19.add(new Long(i_21));
              resBind_s_15 = riseq_19;
              Vector bind_l_14 = null;
              bind_l_14 = UTIL.Sort(resBind_s_15);
              Long i = null;
              for (Iterator enm_28 = bind_l_14.iterator(); enm_28.hasNext(); ) {

                Long e_17 = UTIL.NumberToLong(enm_28.next());
                i = e_17;
                SEM.VAL reselem_22 = null;
                HashMap par_24 = new HashMap();
                if ((1 <= i.intValue()) && (i.intValue() <= c_ul.size())) 
                  par_24 = (HashMap) c_ul.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                reselem_22 = (SEM.VAL) eval.evaluateExpression((IOmlExpression) expr, par_24);
                res_l_13.add(reselem_22);
              }
              val_ul = res_l_13;
            }
            Vector newc_ul = null;
            {

              Vector res_l_30 = new Vector();
              HashSet resBind_s_32 = new HashSet();
              HashSet riseq_36 = new HashSet();
              int max_37 = val_ul.size();
              for (int i_38 = 1; i_38 <= max_37; i_38++) 
                riseq_36.add(new Long(i_38));
              resBind_s_32 = riseq_36;
              Vector bind_l_31 = null;
              bind_l_31 = UTIL.Sort(resBind_s_32);
              Long i = null;
              for (Iterator enm_45 = bind_l_31.iterator(); enm_45.hasNext(); ) {

                Long e_34 = UTIL.NumberToLong(enm_45.next());
                i = e_34;
                HashMap reselem_39 = new HashMap();
                SEM.VAL par_41 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= val_ul.size())) 
                  par_41 = (SEM.VAL) val_ul.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                reselem_39 = eval.PatternMatch((IOmlPattern) pat, (SEM.VAL) par_41);
                res_l_30.add(reselem_39);
              }
              newc_ul = res_l_30;
            }
            Vector rhs_46 = null;
            rhs_46 = (Vector) eval.CombineContexts(c_ul, newc_ul);
            c_ul = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_46));
          }
        }
      }
      return c_ul;
    }
  }
// ***** VDMTOOLS END Name=ExtractLetBinding#2|IOmlTraceLetBinding|Vector


// ***** VDMTOOLS START Name=ExtractLetBeBinding#2|IOmlTraceLetBeBinding|Vector KEEP=NO
  private Vector ExtractLetBeBinding (final IOmlTraceLetBeBinding lbbind, final Vector cxt_ul) throws CGException {

    Vector varRes_3 = null;
    {

      IOmlBind tmpVal_5 = null;
      tmpVal_5 = (IOmlBind) lbbind.getBind();
      IOmlBind bind = null;
      bind = (IOmlBind) tmpVal_5;
      IOmlExpression best = null;
      Boolean cond_8 = null;
      cond_8 = lbbind.hasBest();
      if (cond_8.booleanValue()) 
        best = (IOmlExpression) lbbind.getBest();
      else 
        best = null;
      if (new Boolean(bind instanceof IOmlSetBind).booleanValue()) {

        Object bestex = null;
        if (new Boolean(UTIL.equals(best, null)).booleanValue()) 
          bestex = new OmlSymbolicLiteralExpression(new OmlBooleanLiteral(new Boolean(true)));
        else 
          bestex = best;
        varRes_3 = ExtractLetBeSetBinding((IOmlSetBind) bind, (IOmlExpression) bestex, cxt_ul);
      }
      else 
        varRes_3 = new Vector();
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=ExtractLetBeBinding#2|IOmlTraceLetBeBinding|Vector


// ***** VDMTOOLS START Name=ExtractLetBeSetBinding#3|IOmlSetBind|IOmlExpression|Vector KEEP=NO
  private Vector ExtractLetBeSetBinding (final IOmlSetBind bind, final IOmlExpression best, final Vector cxt_ul) throws CGException {

    Vector p_ul = null;
    p_ul = bind.getPattern();
    IOmlExpression expr = null;
    expr = (IOmlExpression) bind.getExpression();
    Vector rexpr_7 = null;
    Vector unArg_8 = null;
    {

      Vector res_l_9 = new Vector();
      HashSet resBind_s_11 = new HashSet();
      HashSet riseq_15 = new HashSet();
      int max_16 = cxt_ul.size();
      for (int i_17 = 1; i_17 <= max_16; i_17++) 
        riseq_15.add(new Long(i_17));
      resBind_s_11 = riseq_15;
      Vector bind_l_10 = null;
      bind_l_10 = UTIL.Sort(resBind_s_11);
      Long i = null;
      for (Iterator enm_88 = bind_l_10.iterator(); enm_88.hasNext(); ) {

        Long e_13 = UTIL.NumberToLong(enm_88.next());
        i = e_13;
        Vector reselem_18 = null;
        {

          SEM.VAL val = null;
          HashMap par_22 = new HashMap();
          if ((1 <= i.intValue()) && (i.intValue() <= cxt_ul.size())) 
            par_22 = (HashMap) cxt_ul.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          val = (SEM.VAL) eval.evaluateExpression((IOmlExpression) expr, par_22);
          Vector c_ul_ul = null;
          Boolean cond_27 = null;
          if ((val instanceof Record)) 
            cond_27 = new Boolean(((Object) val instanceof SEM.SET));
          else 
            cond_27 = new Boolean(false);
          if (cond_27.booleanValue()) {

            HashSet l = new HashSet();
            HashSet res_s_31 = new HashSet();
            {

              boolean succ_49 = true;
              Object e_set_50 = null;
              if ((val instanceof Record)) 
                if ((val instanceof SEM.TUPLE)) 
                  e_set_50 = ((SEM.TUPLE) val).v;
                else 
                  if ((val instanceof SEM.TOKEN)) 
                    e_set_50 = ((SEM.TOKEN) val).v;
                  else 
                    if ((val instanceof SEM.QUOTE)) 
                      e_set_50 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
                    else 
                      if ((val instanceof SEM.CHAR)) 
                        e_set_50 = ((SEM.CHAR) val).v;
                      else 
                        if ((val instanceof SEM.BOOL)) 
                          e_set_50 = ((SEM.BOOL) val).v;
                        else 
                          if ((val instanceof SEM.SET)) 
                            e_set_50 = ((SEM.SET) val).v;
                          else 
                            if ((val instanceof SEM.SEQ)) 
                              e_set_50 = ((SEM.SEQ) val).v;
                            else 
                              if ((val instanceof SEM.REC)) 
                                e_set_50 = ((SEM.REC) val).v;
                              else 
                                if ((val instanceof SEM.NUM)) 
                                  e_set_50 = ((SEM.NUM) val).v;
                                else 
                                  e_set_50 = ((SEM.MAP) val).v;
              else 
                UTIL.RunTime("Run-Time Error:A record was expected");
              HashSet e1_set_52 = new HashSet();
              if ((e_set_50 instanceof HashSet)) 
                e1_set_52 = (HashSet) e_set_50;
              else 
                UTIL.RunTime("Run-Time Error:A set was expected");
              SEM.VAL v = null;
              {
                for (Iterator enm_54 = e1_set_52.iterator(); enm_54.hasNext(); ) {

                  Object elem_53 = enm_54.next();
                  succ_49 = true;
                  if (new Boolean((elem_53 instanceof Record)).booleanValue()) 
                    v = (SEM.VAL) elem_53;
                  else 
                    succ_49 = false;
                  if (succ_49) {

                    Vector res_s_32 = null;
                    {

                      Vector res_l_33 = new Vector();
                      HashSet resBind_s_35 = new HashSet();
                      HashSet riseq_39 = new HashSet();
                      int max_40 = p_ul.size();
                      for (int i_41 = 1; i_41 <= max_40; i_41++) 
                        riseq_39.add(new Long(i_41));
                      resBind_s_35 = riseq_39;
                      Vector bind_l_34 = null;
                      bind_l_34 = UTIL.Sort(resBind_s_35);
                      Long i_1 = null;
                      for (Iterator enm_48 = bind_l_34.iterator(); enm_48.hasNext(); ) {

                        Long e_37 = UTIL.NumberToLong(enm_48.next());
                        i_1 = e_37;
                        HashMap reselem_42 = new HashMap();
                        IOmlPattern par_43 = null;
                        if ((1 <= i_1.intValue()) && (i_1.intValue() <= p_ul.size())) 
                          par_43 = (IOmlPattern) p_ul.get(i_1.intValue() - 1);
                        else 
                          UTIL.RunTime("Run-Time Error:Illegal index");
                        reselem_42 = eval.PatternMatch((IOmlPattern) par_43, (SEM.VAL) v);
                        res_l_33.add(reselem_42);
                      }
                      res_s_32 = res_l_33;
                    }
                    res_s_31.add(res_s_32);
                  }
                }
              }
            }
            l = res_s_31;
            c_ul_ul = (Vector) UTIL.ConvertToList(VDMUtil.set2seq(l));
          }
          else 
            c_ul_ul = new Vector();
          {

            Vector res_l_56 = new Vector();
            HashSet resBind_s_58 = new HashSet();
            HashSet riseq_62 = new HashSet();
            int max_63 = c_ul_ul.size();
            for (int i_64 = 1; i_64 <= max_63; i_64++) 
              riseq_62.add(new Long(i_64));
            resBind_s_58 = riseq_62;
            Vector bind_l_57 = null;
            bind_l_57 = UTIL.Sort(resBind_s_58);
            Long i2 = null;
            for (Iterator enm_86 = bind_l_57.iterator(); enm_86.hasNext(); ) {

              Long e_60 = UTIL.NumberToLong(enm_86.next());
              i2 = e_60;
              Boolean pred_69 = null;
              {

                HashMap c = new HashMap();
                Vector par_72 = null;
                Vector var1_73 = null;
                HashMap e_seq_74 = new HashMap();
                if ((1 <= i.intValue()) && (i.intValue() <= cxt_ul.size())) 
                  e_seq_74 = (HashMap) cxt_ul.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var1_73 = new Vector();
                var1_73.add(e_seq_74);
                Vector var2_77 = null;
                if ((1 <= i2.intValue()) && (i2.intValue() <= c_ul_ul.size())) 
                  var2_77 = (Vector) UTIL.ConvertToList(c_ul_ul.get(i2.intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                par_72 = (Vector) var1_73.clone();
                par_72.addAll(var2_77);
                c = (HashMap) eval.MergeContextList(par_72);
                SEM.VAL var1_80 = null;
                var1_80 = (SEM.VAL) eval.evaluateExpression((IOmlExpression) best, c);
                SEM.BOOL var2_83 = null;
                var2_83 = new SEM.BOOL(new Boolean(true));
                pred_69 = new Boolean(UTIL.equals(var1_80, var2_83));
              }
              if (pred_69.booleanValue()) {

                HashMap reselem_65 = new HashMap();
                Vector par_66 = null;
                if ((1 <= i2.intValue()) && (i2.intValue() <= c_ul_ul.size())) 
                  par_66 = (Vector) UTIL.ConvertToList(c_ul_ul.get(i2.intValue() - 1));
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                reselem_65 = (HashMap) eval.MergeContextList(par_66);
                res_l_56.add(reselem_65);
              }
            }
            reselem_18 = res_l_56;
          }
        }
        res_l_9.add(reselem_18);
      }
      unArg_8 = res_l_9;
    }
    Vector rdcseq_89 = new Vector();
    for (Iterator enm_92 = unArg_8.iterator(); enm_92.hasNext(); ) {

      Vector e_90 = (Vector) UTIL.ConvertToList(enm_92.next());
      rdcseq_89.addAll(e_90);
    }
    rexpr_7 = rdcseq_89;
    return rexpr_7;
  }
// ***** VDMTOOLS END Name=ExtractLetBeSetBinding#3|IOmlSetBind|IOmlExpression|Vector


// ***** VDMTOOLS START Name=expandRegexpr#1|IOmlTraceDefinitionItem KEEP=NO
  protected Vector expandRegexpr (final IOmlTraceDefinitionItem i) throws CGException {
    return expandRegexprChoose((IOmlTraceDefinitionItem) i);
  }
// ***** VDMTOOLS END Name=expandRegexpr#1|IOmlTraceDefinitionItem


// ***** VDMTOOLS START Name=expandRegexprChoose#1|IOmlTraceDefinitionItem KEEP=NO
  protected Vector expandRegexprChoose (final IOmlTraceDefinitionItem i) throws CGException {

    IOmlTraceRepeatPattern tmpVal_3 = null;
    tmpVal_3 = (IOmlTraceRepeatPattern) i.getRegexpr();
    IOmlTraceRepeatPattern r = null;
    r = (IOmlTraceRepeatPattern) tmpVal_3;
    Boolean cond_4 = null;
    cond_4 = i.hasRegexpr();
    if (cond_4.booleanValue()) 
      return expandSymbol((IOmlTraceDefinitionItem) i, (IOmlTraceRepeatPattern) r);
    else {

      Vector rexpr_5 = null;
      Vector e_seq_6 = null;
      e_seq_6 = new Vector();
      e_seq_6.add(i);
      rexpr_5 = new Vector();
      rexpr_5.add(e_seq_6);
      return rexpr_5;
    }
  }
// ***** VDMTOOLS END Name=expandRegexprChoose#1|IOmlTraceDefinitionItem


// ***** VDMTOOLS START Name=expandN2M#4|Long|Long|IOmlTraceDefinitionItem|Vector KEEP=NO
  protected Vector expandN2M (final Long n, final Long m, final IOmlTraceDefinitionItem s, final Vector o) throws CGException {
    if (new Boolean(!(n.intValue() == m.intValue())).booleanValue()) {

      Vector rexpr_15 = null;
      Vector var1_16 = null;
      var1_16 = new Vector();
      var1_16.add(o);
      Vector var2_18 = null;
      Vector par_24 = null;
      Vector var2_26 = null;
      var2_26 = new Vector();
      var2_26.add(s);
      par_24 = (Vector) o.clone();
      par_24.addAll(var2_26);
      var2_18 = expandN2M(n, new Long(m.intValue() - new Long(1).intValue()), (IOmlTraceDefinitionItem) s, par_24);
      rexpr_15 = (Vector) var1_16.clone();
      rexpr_15.addAll(var2_18);
      return rexpr_15;
    }
    else 
      if (new Boolean(n.intValue() == new Long(0).intValue()).booleanValue()) {

        Vector rexpr_13 = null;
        rexpr_13 = new Vector();
        rexpr_13.add(new Vector());
        return rexpr_13;
      }
      else {

        Vector rexpr_11 = null;
        rexpr_11 = new Vector();
        rexpr_11.add(o);
        return rexpr_11;
      }
  }
// ***** VDMTOOLS END Name=expandN2M#4|Long|Long|IOmlTraceDefinitionItem|Vector


// ***** VDMTOOLS START Name=expandSymbol#2|IOmlTraceDefinitionItem|IOmlTraceRepeatPattern KEEP=NO
  protected Vector expandSymbol (final IOmlTraceDefinitionItem s, final IOmlTraceRepeatPattern r) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceZeroOrMore))) 
        succ_3 = false;
      if (succ_3) 
        return expandSymbolZeroOrMore((IOmlTraceDefinitionItem) s, (IOmlTraceZeroOrMore) r);
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceOneOrMore))) 
          succ_3 = false;
        if (succ_3) 
          return expandSymbolOneOrMore((IOmlTraceDefinitionItem) s, (IOmlTraceOneOrMore) r);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceZeroOrOne))) 
            succ_3 = false;
          if (succ_3) 
            return expandSymbolZeroOrOne((IOmlTraceDefinitionItem) s, (IOmlTraceZeroOrOne) r);
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceRange))) 
              succ_3 = false;
            if (succ_3) 
              return expandSymbolRange((IOmlTraceDefinitionItem) s, (IOmlTraceRange) r);
            else 
              return new Vector();
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=expandSymbol#2|IOmlTraceDefinitionItem|IOmlTraceRepeatPattern


// ***** VDMTOOLS START Name=expandSymbolZeroOrMore#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrMore KEEP=NO
  protected Vector expandSymbolZeroOrMore (final IOmlTraceDefinitionItem var_1_1, final IOmlTraceZeroOrMore var_2_2) throws CGException {

    IOmlTraceDefinitionItem s = null;
    boolean succ_3 = true;
    s = (IOmlTraceDefinitionItem) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation expandSymbolZeroOrMore");
    Vector rexpr_4 = null;
    Vector par_8 = null;
    par_8 = new Vector();
    par_8.add(s);
    rexpr_4 = expandN2M(new Long(0), zeroOrMoreMax, (IOmlTraceDefinitionItem) s, par_8);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=expandSymbolZeroOrMore#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrMore


// ***** VDMTOOLS START Name=expandSymbolOneOrMore#2|IOmlTraceDefinitionItem|IOmlTraceOneOrMore KEEP=NO
  protected Vector expandSymbolOneOrMore (final IOmlTraceDefinitionItem var_1_1, final IOmlTraceOneOrMore var_2_2) throws CGException {

    IOmlTraceDefinitionItem s = null;
    boolean succ_3 = true;
    s = (IOmlTraceDefinitionItem) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation expandSymbolOneOrMore");
    Vector rexpr_4 = null;
    Vector par_8 = null;
    par_8 = new Vector();
    par_8.add(s);
    rexpr_4 = expandN2M(new Long(1), oneOrMoreMax, (IOmlTraceDefinitionItem) s, par_8);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=expandSymbolOneOrMore#2|IOmlTraceDefinitionItem|IOmlTraceOneOrMore


// ***** VDMTOOLS START Name=expandSymbolZeroOrOne#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrOne KEEP=NO
  protected Vector expandSymbolZeroOrOne (final IOmlTraceDefinitionItem var_1_1, final IOmlTraceZeroOrOne var_2_2) throws CGException {

    IOmlTraceDefinitionItem s = null;
    boolean succ_3 = true;
    s = (IOmlTraceDefinitionItem) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation expandSymbolZeroOrOne");
    Vector rexpr_4 = null;
    Vector par_8 = null;
    par_8 = new Vector();
    par_8.add(s);
    rexpr_4 = expandN2M(new Long(0), new Long(1), (IOmlTraceDefinitionItem) s, par_8);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=expandSymbolZeroOrOne#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrOne


// ***** VDMTOOLS START Name=expandSymbolRange#2|IOmlTraceDefinitionItem|IOmlTraceRange KEEP=NO
  protected Vector expandSymbolRange (final IOmlTraceDefinitionItem s, final IOmlTraceRange t) throws CGException {

    Long tmpVal_4 = null;
    IOmlNumericLiteral obj_5 = null;
    obj_5 = (IOmlNumericLiteral) t.getLower();
    tmpVal_4 = obj_5.getVal();
    Long min = null;
    min = tmpVal_4;
    Long max = null;
    IOmlNumericLiteral par_8 = null;
    par_8 = (IOmlNumericLiteral) t.getUpper();
    max = getVal(min, (IOmlNumericLiteral) par_8);
    Vector rexpr_9 = null;
    Vector par_13 = null;
    par_13 = new Vector();
    par_13.add(s);
    rexpr_9 = expandN2M(min, max, (IOmlTraceDefinitionItem) s, par_13);
    return rexpr_9;
  }
// ***** VDMTOOLS END Name=expandSymbolRange#2|IOmlTraceDefinitionItem|IOmlTraceRange


// ***** VDMTOOLS START Name=getVal#2|Long|IOmlNumericLiteral KEEP=NO
  protected Long getVal (final Long min, final IOmlNumericLiteral n) throws CGException {
    if (new Boolean(UTIL.equals(n, null)).booleanValue()) 
      return min;
    else {

      Long rexpr_6 = null;
      rexpr_6 = n.getVal();
      return rexpr_6;
    }
  }
// ***** VDMTOOLS END Name=getVal#2|Long|IOmlNumericLiteral


// ***** VDMTOOLS START Name=getLetBeInfo#1|IOmlTraceLetBeBinding KEEP=NO
  protected HashMap getLetBeInfo (final IOmlTraceLetBeBinding b) throws CGException {

    HashMap rexpr_2 = new HashMap();
    rexpr_2 = new HashMap();
    rexpr_2.put(extractBindingVariable((IOmlTraceLetBeBinding) b), (IOmlExpression) extractBindingExpression((IOmlTraceLetBeBinding) b));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getLetBeInfo#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=isOfTypeSB#1|IOmlTraceLetBeBinding KEEP=NO
  protected Boolean isOfTypeSB (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlBind tmpVal_3 = null;
    tmpVal_3 = (IOmlBind) b.getBind();
    IOmlBind bind = null;
    bind = (IOmlBind) tmpVal_3;
    if (new Boolean(bind instanceof IOmlSetBind).booleanValue()) 
      return isOfTypePattern((IOmlSetBind) bind);
    else 
      return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isOfTypeSB#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=isOfTypePattern#1|IOmlSetBind KEEP=NO
  protected Boolean isOfTypePattern (final IOmlSetBind s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = s.getPattern();
    Vector p = null;
    p = tmpVal_3;
    IOmlPattern v = null;
    if ((1 <= new Long(1).intValue()) && (new Long(1).intValue() <= p.size())) 
      v = (IOmlPattern) p.get(new Long(1).intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    return new Boolean(v instanceof IOmlPatternIdentifier);
  }
// ***** VDMTOOLS END Name=isOfTypePattern#1|IOmlSetBind


// ***** VDMTOOLS START Name=extractBindingVariable#1|IOmlTraceLetBeBinding KEEP=NO
  protected String extractBindingVariable (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlBind tmpVal_3 = null;
    tmpVal_3 = (IOmlBind) b.getBind();
    IOmlBind bind = null;
    bind = (IOmlBind) tmpVal_3;
    return getVariable((IOmlSetBind) bind);
  }
// ***** VDMTOOLS END Name=extractBindingVariable#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=getVariable#1|IOmlSetBind KEEP=NO
  protected String getVariable (final IOmlSetBind b) throws CGException {

    Vector p = null;
    p = b.getPattern();
    IOmlPattern v = null;
    if ((1 <= new Long(1).intValue()) && (new Long(1).intValue() <= p.size())) 
      v = (IOmlPattern) p.get(new Long(1).intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    return getVariableName((IOmlPatternIdentifier) v);
  }
// ***** VDMTOOLS END Name=getVariable#1|IOmlSetBind


// ***** VDMTOOLS START Name=getVariableName#1|IOmlPatternIdentifier KEEP=NO
  protected String getVariableName (final IOmlPatternIdentifier pi) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = pi.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getVariableName#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=extractBindingExpression#1|IOmlTraceLetBeBinding KEEP=NO
  protected IOmlExpression extractBindingExpression (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlBind tmpVal_3 = null;
    tmpVal_3 = (IOmlBind) b.getBind();
    IOmlBind bind = null;
    bind = (IOmlBind) tmpVal_3;
    return (IOmlExpression) (IOmlExpression) getExpression((IOmlSetBind) bind);
  }
// ***** VDMTOOLS END Name=extractBindingExpression#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=getExpression#1|IOmlSetBind KEEP=NO
  protected IOmlExpression getExpression (final IOmlSetBind b) throws CGException {

    IOmlExpression rexpr_2 = null;
    rexpr_2 = (IOmlExpression) b.getExpression();
    return (IOmlExpression) rexpr_2;
  }
// ***** VDMTOOLS END Name=getExpression#1|IOmlSetBind


// ***** VDMTOOLS START Name=getConstraints#1|IOmlTraceLetBeBinding KEEP=NO
  protected IOmlExpression getConstraints (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlExpression rexpr_2 = null;
    rexpr_2 = (IOmlExpression) b.getBest();
    return (IOmlExpression) rexpr_2;
  }
// ***** VDMTOOLS END Name=getConstraints#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=getLetInfo#1|IOmlTraceLetBinding KEEP=NO
  protected HashMap getLetInfo (final IOmlTraceLetBinding b) throws CGException {

    Vector def_ulist = null;
    def_ulist = b.getDefinitionList();
    HashMap rexpr_4 = new HashMap();
    HashMap res_m_5 = new HashMap();
    {

      HashSet e_set_21 = new HashSet();
      HashSet riseq_23 = new HashSet();
      int max_24 = def_ulist.size();
      for (int i_25 = 1; i_25 <= max_24; i_25++) 
        riseq_23.add(new Long(i_25));
      e_set_21 = riseq_23;
      Long e = null;
      {
        for (Iterator enm_27 = e_set_21.iterator(); enm_27.hasNext(); ) {

          Long elem_26 = UTIL.NumberToLong(enm_27.next());
          e = elem_26;
          Boolean pred_15 = null;
          IOmlPattern obj_16 = null;
          IOmlValueShape obj_17 = null;
          if ((1 <= e.intValue()) && (e.intValue() <= def_ulist.size())) 
            obj_17 = (IOmlValueShape) def_ulist.get(e.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_16 = (IOmlPattern) obj_17.getPattern();
          pred_15 = new Boolean(obj_16 instanceof IOmlPatternIdentifier);
          if (pred_15.booleanValue()) {

            String md_6 = null;
            IOmlPattern par_7 = null;
            IOmlValueShape obj_8 = null;
            if ((1 <= e.intValue()) && (e.intValue() <= def_ulist.size())) 
              obj_8 = (IOmlValueShape) def_ulist.get(e.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_7 = (IOmlPattern) obj_8.getPattern();
            md_6 = getPatternId((IOmlPatternIdentifier) par_7);
            IOmlExpression mr_11 = null;
            IOmlValueShape obj_12 = null;
            if ((1 <= e.intValue()) && (e.intValue() <= def_ulist.size())) 
              obj_12 = (IOmlValueShape) def_ulist.get(e.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            mr_11 = (IOmlExpression) obj_12.getExpression();
            res_m_5.put(md_6, mr_11);
          }
        }
      }
    }
    rexpr_4 = res_m_5;
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=getLetInfo#1|IOmlTraceLetBinding


// ***** VDMTOOLS START Name=getPatternId#1|IOmlPatternIdentifier KEEP=NO
  protected String getPatternId (final IOmlPatternIdentifier p) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = p.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getPatternId#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=PushCxt#1|Vector KEEP=NO
  private void PushCxt (final Vector cxt_ul) throws CGException {

    Vector rhs_2 = null;
    Vector var1_3 = null;
    var1_3 = new Vector();
    var1_3.add(cxt_ul);
    rhs_2 = (Vector) var1_3.clone();
    rhs_2.addAll(cxt_ul_ustack);
    cxt_ul_ustack = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=PushCxt#1|Vector


// ***** VDMTOOLS START Name=PopCxt KEEP=NO
  private void PopCxt () throws CGException {
    cxt_ul_ustack = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector(cxt_ul_ustack.subList(1, cxt_ul_ustack.size()))));
  }
// ***** VDMTOOLS END Name=PopCxt


// ***** VDMTOOLS START Name=CxtStackIsEmpty KEEP=NO
  private Boolean CxtStackIsEmpty () throws CGException {
    return new Boolean(UTIL.equals(cxt_ul_ustack, new Vector()));
  }
// ***** VDMTOOLS END Name=CxtStackIsEmpty


// ***** VDMTOOLS START Name=HasError#2|String|String KEEP=NO
  public Boolean HasError (final String clnm, final String trnm) throws CGException {

    Boolean rexpr_3 = null;
    rexpr_3 = errorLog.HasError(clnm, trnm);
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=HasError#2|String|String


// ***** VDMTOOLS START Name=GetErrMsg#2|String|String KEEP=NO
  public HashSet GetErrMsg (final String clnm, final String trnm) throws CGException {

    HashSet rexpr_3 = new HashSet();
    rexpr_3 = errorLog.GetErrMsg(clnm, trnm);
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=GetErrMsg#2|String|String

}
;
