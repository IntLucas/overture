//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-02-22 by the VDM++ to JAVA Code Generator
// (v8.2b - Wed 18-Feb-2009 16:15:35)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.traces;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.util.*;
import org.overturetool.ast.imp.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class Expand extends DEF {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=zeroOrMoreMax KEEP=NO
  private Long zeroOrMoreMax = null;
// ***** VDMTOOLS END Name=zeroOrMoreMax

// ***** VDMTOOLS START Name=oneOrMoreMax KEEP=NO
  private Long oneOrMoreMax = null;
// ***** VDMTOOLS END Name=oneOrMoreMax

// ***** VDMTOOLS START Name=seqOfNames KEEP=NO
  private Vector seqOfNames = null;
// ***** VDMTOOLS END Name=seqOfNames

// ***** VDMTOOLS START Name=eval KEEP=NO
  private Eval eval = null;
// ***** VDMTOOLS END Name=eval

// ***** VDMTOOLS START Name=dfs KEEP=NO
  private DEF dfs = null;
// ***** VDMTOOLS END Name=dfs

// ***** VDMTOOLS START Name=curcl KEEP=NO
  private static String curcl = new String("");
// ***** VDMTOOLS END Name=curcl

// ***** VDMTOOLS START Name=curtr KEEP=NO
  private static String curtr = new String("");
// ***** VDMTOOLS END Name=curtr

// ***** VDMTOOLS START Name=cxt_us_ustack KEEP=NO
  private Vector cxt_us_ustack = null;
// ***** VDMTOOLS END Name=cxt_us_ustack


// ***** VDMTOOLS START Name=vdm_init_Expand KEEP=NO
  private void vdm_init_Expand () throws CGException {
    try {

      zeroOrMoreMax = new Long(0);
      oneOrMoreMax = new Long(0);
      seqOfNames = new Vector();
      cxt_us_ustack = new Vector();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Expand


// ***** VDMTOOLS START Name=Expand KEEP=NO
  public Expand () throws CGException {

    vdm_init_Expand();
    {

      zeroOrMoreMax = UTIL.NumberToLong(UTIL.clone(new Long(3)));
      oneOrMoreMax = UTIL.NumberToLong(UTIL.clone(new Long(3)));
    }
  }
// ***** VDMTOOLS END Name=Expand


// ***** VDMTOOLS START Name=Expand#1|Long KEEP=NO
  public Expand (final Long unlimitedValue) throws CGException {

    vdm_init_Expand();
    {

      zeroOrMoreMax = UTIL.NumberToLong(UTIL.clone(unlimitedValue));
      oneOrMoreMax = UTIL.NumberToLong(UTIL.clone(unlimitedValue));
    }
  }
// ***** VDMTOOLS END Name=Expand#1|Long


// ***** VDMTOOLS START Name=ExpandSpecTraces#2|IOmlSpecifications|HashSet KEEP=NO
  public HashMap ExpandSpecTraces (final IOmlSpecifications spec, final HashSet cl_us) throws CGException {

    HashMap res_um = new HashMap();
    dfs = (DEF) UTIL.clone(new DEF(spec));
    {

      Vector sq_5 = null;
      sq_5 = spec.getClassList();
      IOmlClass cl = null;
      for (Iterator enm_19 = sq_5.iterator(); enm_19.hasNext(); ) {

        IOmlClass elem_6 = (IOmlClass) enm_19.next();
        cl = (IOmlClass) elem_6;
        {

          String id = null;
          id = cl.getIdentifier();
          Boolean cond_11 = null;
          cond_11 = new Boolean(cl_us.contains(id));
          if (cond_11.booleanValue()) 
            res_um.put(id, ExpandClassTraces((IOmlClass) cl));
        }
      }
    }
    return res_um;
  }
// ***** VDMTOOLS END Name=ExpandSpecTraces#2|IOmlSpecifications|HashSet


// ***** VDMTOOLS START Name=ExpandClassTraces#1|IOmlClass KEEP=NO
  protected HashMap ExpandClassTraces (final IOmlClass cl) throws CGException {

    HashMap res_um = new HashMap();
    {

      String tmpVal_3 = null;
      tmpVal_3 = cl.getIdentifier();
      String clid = null;
      clid = tmpVal_3;
      Vector body = null;
      body = cl.getClassBody();
      {

        curcl = UTIL.ConvertToString(UTIL.clone(clid));
        eval = (Eval) UTIL.clone(new Eval(curcl, dfs));
        {

          IOmlDefinitionBlock def_ul = null;
          for (Iterator enm_22 = body.iterator(); enm_22.hasNext(); ) {

            IOmlDefinitionBlock elem_10 = (IOmlDefinitionBlock) enm_22.next();
            def_ul = (IOmlDefinitionBlock) elem_10;
            if (new Boolean(def_ul instanceof IOmlTraceDefinitions).booleanValue()) {

              HashMap rhs_15 = new HashMap();
              HashMap modmap_16 = new HashMap();
              modmap_16 = ExpandTraceDefs(clid, (IOmlTraceDefinitions) def_ul);
              rhs_15 = new HashMap(res_um);
              rhs_15.putAll(modmap_16);
              res_um = (HashMap) UTIL.clone(rhs_15);
            }
          }
        }
      }
    }
    return res_um;
  }
// ***** VDMTOOLS END Name=ExpandClassTraces#1|IOmlClass


// ***** VDMTOOLS START Name=ExpandTraceDefs#2|String|IOmlTraceDefinitions KEEP=NO
  protected HashMap ExpandTraceDefs (final String clid, final IOmlTraceDefinitions def_ul) throws CGException {

    HashMap res_um = new HashMap();
    {

      Vector sq_3 = null;
      sq_3 = def_ul.getTraces();
      OmlNamedTrace ntrace = null;
      for (Iterator enm_18 = sq_3.iterator(); enm_18.hasNext(); ) {

        IOmlNamedTrace elem_4 = (IOmlNamedTrace) enm_18.next();
        ntrace = (OmlNamedTrace) elem_4;
        {

          String name = null;
          name = ntrace.getName().toString();
          IOmlTraceDefinition defs = null;
          defs = (IOmlTraceDefinition) ntrace.getDefs();
          {

            curtr = UTIL.ConvertToString(UTIL.clone(name));
            HashSet rhs_11 = new HashSet();
            HashSet par_13 = new HashSet();
            par_13 = new HashSet();
            par_13.add(new HashMap());
            rhs_11 = ExpandTraceDef((IOmlTraceDefinition) defs, par_13);
            res_um.put(name, rhs_11);
          }
        }
      }
    }
    return res_um;
  }
// ***** VDMTOOLS END Name=ExpandTraceDefs#2|String|IOmlTraceDefinitions


// ***** VDMTOOLS START Name=ExpandTraceDef#2|IOmlTraceDefinition|HashSet KEEP=NO
  private HashSet ExpandTraceDef (final IOmlTraceDefinition tdef, final HashSet ctx_us) throws CGException {
    if (new Boolean(tdef instanceof IOmlTraceDefinitionItem).booleanValue()) 
      return ExpandTraceDefItem((IOmlTraceDefinitionItem) tdef, ctx_us);
    else 
      if (new Boolean(tdef instanceof IOmlTraceSequenceDefinition).booleanValue()) 
        return ExpandTraceSeqDef((IOmlTraceSequenceDefinition) tdef, ctx_us);
      else {
        return ExpandTraceChoiceDef((IOmlTraceChoiceDefinition) tdef, ctx_us);
      }
  }
// ***** VDMTOOLS END Name=ExpandTraceDef#2|IOmlTraceDefinition|HashSet


// ***** VDMTOOLS START Name=ExpandTraceDefItem#2|IOmlTraceDefinitionItem|HashSet KEEP=NO
  private HashSet ExpandTraceDefItem (final IOmlTraceDefinitionItem tdef, final HashSet ctx_us) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = tdef.getBind();
    Vector bind = null;
    bind = tmpVal_4;
    IOmlTraceCoreDefinition trace = null;
    trace = (IOmlTraceCoreDefinition) tdef.getTest();
    IOmlTraceRepeatPattern tmpVal_6 = null;
    Boolean cond_8 = null;
    cond_8 = tdef.hasRegexpr();
    if (cond_8.booleanValue()) 
      tmpVal_6 = (IOmlTraceRepeatPattern) tdef.getRegexpr();
    else 
      tmpVal_6 = null;
    IOmlTraceRepeatPattern regexpr = null;
    regexpr = (IOmlTraceRepeatPattern) tmpVal_6;
    HashSet new_uctx_us = ExpandTraceBinds(bind, ctx_us);
    HashSet tmpVal_12 = new HashSet();
    tmpVal_12 = ExpandTraceCoreDef((IOmlTraceCoreDefinition) trace, new_uctx_us);
    HashSet expr_ul_us = new HashSet();
    expr_ul_us = tmpVal_12;
    HashSet rexpr_15 = new HashSet();
    if (new Boolean(UTIL.equals(regexpr, null)).booleanValue()) 
      rexpr_15 = expr_ul_us;
    else 
      rexpr_15 = ExpandTraceRepeatPat((IOmlTraceRepeatPattern) regexpr, expr_ul_us);
    return rexpr_15;
  }
// ***** VDMTOOLS END Name=ExpandTraceDefItem#2|IOmlTraceDefinitionItem|HashSet


// ***** VDMTOOLS START Name=ExpandTraceSeqDef#2|IOmlTraceSequenceDefinition|HashSet KEEP=NO
  private HashSet ExpandTraceSeqDef (final IOmlTraceSequenceDefinition tdef, final HashSet ctx_us) throws CGException {

    HashSet expr_ul_us = new HashSet();
    expr_ul_us = new HashSet();
    expr_ul_us.add(new Vector());
    {

      Vector sq_4 = null;
      sq_4 = tdef.getDefs();
      IOmlTraceDefinition td = null;
      for (Iterator enm_16 = sq_4.iterator(); enm_16.hasNext(); ) {

        IOmlTraceDefinition elem_5 = (IOmlTraceDefinition) enm_16.next();
        td = (IOmlTraceDefinition) elem_5;
        {

          HashSet e_ul_us = ExpandTraceDef((IOmlTraceDefinition) td, ctx_us);
          expr_ul_us = (HashSet) UTIL.clone(CombineTraces(expr_ul_us, e_ul_us));
        }
      }
    }
    return expr_ul_us;
  }
// ***** VDMTOOLS END Name=ExpandTraceSeqDef#2|IOmlTraceSequenceDefinition|HashSet


// ***** VDMTOOLS START Name=ExpandTraceChoiceDef#2|IOmlTraceChoiceDefinition|HashSet KEEP=NO
  private HashSet ExpandTraceChoiceDef (final IOmlTraceChoiceDefinition tdef, final HashSet ctx_us) throws CGException {

    HashSet expr_ul_us = new HashSet();
    {

      Vector sq_3 = null;
      sq_3 = tdef.getDefs();
      IOmlTraceDefinition td = null;
      for (Iterator enm_15 = sq_3.iterator(); enm_15.hasNext(); ) {

        IOmlTraceDefinition elem_4 = (IOmlTraceDefinition) enm_15.next();
        td = (IOmlTraceDefinition) elem_4;
        {

          HashSet e_ul_us = ExpandTraceDef((IOmlTraceDefinition) td, ctx_us);
          HashSet rhs_11 = new HashSet();
          rhs_11 = (HashSet) expr_ul_us.clone();
          rhs_11.addAll(e_ul_us);
          expr_ul_us = (HashSet) UTIL.clone(rhs_11);
        }
      }
    }
    return expr_ul_us;
  }
// ***** VDMTOOLS END Name=ExpandTraceChoiceDef#2|IOmlTraceChoiceDefinition|HashSet


// ***** VDMTOOLS START Name=ExpandTraceBinds#2|Vector|HashSet KEEP=NO
  private HashSet ExpandTraceBinds (final Vector bind_ul, final HashSet cxt_us) throws CGException {

    HashSet c_us = cxt_us;
    {

      IOmlTraceBinding bind = null;
      for (Iterator enm_20 = bind_ul.iterator(); enm_20.hasNext(); ) {

        IOmlTraceBinding elem_4 = (IOmlTraceBinding) enm_20.next();
        bind = (IOmlTraceBinding) elem_4;
        {

          HashSet c_us2 = new HashSet();
          if (new Boolean(bind instanceof IOmlTraceLetBinding).booleanValue()) 
            c_us2 = ExtractLetBinding((IOmlTraceLetBinding) bind, c_us);
          else 
            c_us2 = ExtractLetBeBinding((IOmlTraceLetBeBinding) bind, c_us);
          HashSet rhs_16 = new HashSet();
          rhs_16 = (HashSet) eval.CombineContexts(c_us, c_us2);
          c_us = (HashSet) UTIL.clone(rhs_16);
        }
      }
    }
    return c_us;
  }
// ***** VDMTOOLS END Name=ExpandTraceBinds#2|Vector|HashSet


// ***** VDMTOOLS START Name=ExpandTraceCoreDef#2|IOmlTraceCoreDefinition|HashSet KEEP=NO
  private HashSet ExpandTraceCoreDef (final IOmlTraceCoreDefinition tdef, final HashSet cxt_us) throws CGException {

    HashSet varRes_3 = new HashSet();
    if (new Boolean(tdef instanceof IOmlTraceMethodApply).booleanValue()) 
      varRes_3 = ExpandTraceMethodApply((IOmlTraceMethodApply) tdef, cxt_us);
    else 
      varRes_3 = ExpandBracketedTraceDef((IOmlTraceBracketedDefinition) tdef, cxt_us);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=ExpandTraceCoreDef#2|IOmlTraceCoreDefinition|HashSet


// ***** VDMTOOLS START Name=ExpandBracketedTraceDef#2|IOmlTraceBracketedDefinition|HashSet KEEP=NO
  private HashSet ExpandBracketedTraceDef (final IOmlTraceBracketedDefinition tdef, final HashSet cxt_us) throws CGException {

    PushCxt(cxt_us);
    {

      HashSet e_ul_us = new HashSet();
      IOmlTraceDefinition par_7 = null;
      par_7 = (IOmlTraceDefinition) tdef.getDefinition();
      HashSet par_8 = new HashSet();
      par_8 = new HashSet();
      par_8.add(new HashMap());
      e_ul_us = ExpandTraceDef((IOmlTraceDefinition) par_7, par_8);
      HashSet e_ul_us2 = new HashSet();
      HashSet res_s_11 = new HashSet();
      {

        Vector e_ul = null;
        {
          for (Iterator enm_19 = e_ul_us.iterator(); enm_19.hasNext(); ) {

            Vector elem_18 = (Vector) UTIL.ConvertToList(enm_19.next());
            e_ul = elem_18;
            res_s_11.add(AddContextToExprList(e_ul, (HashSet) cxt_us_ustack.get(0)));
          }
        }
      }
      e_ul_us2 = res_s_11;
      {

        PopCxt();
        HashSet rexpr_21 = new HashSet();
        HashSet rduset_23 = new HashSet();
        for (Iterator enm_25 = e_ul_us2.iterator(); enm_25.hasNext(); ) {

          HashSet e_24 = (HashSet) enm_25.next();
          rduset_23.addAll(e_24);
        }
        rexpr_21 = rduset_23;
        return rexpr_21;
      }
    }
  }
// ***** VDMTOOLS END Name=ExpandBracketedTraceDef#2|IOmlTraceBracketedDefinition|HashSet


// ***** VDMTOOLS START Name=ExpandTraceMethodApply#2|IOmlTraceMethodApply|HashSet KEEP=NO
  private HashSet ExpandTraceMethodApply (final IOmlTraceMethodApply tdef, final HashSet cxt_us) throws CGException {

    HashSet varRes_3 = new HashSet();
    {

      String vdm_var = null;
      vdm_var = tdef.getVariableName();
      String met_unm = null;
      met_unm = tdef.getMethodName();
      Vector args = null;
      args = tdef.getArgs();
      OmlFieldSelect fieldsel = (OmlFieldSelect) new OmlFieldSelect(new OmlName(null, vdm_var), new OmlName(null, met_unm));
      OmlApplyExpression expr = (OmlApplyExpression) new OmlApplyExpression(fieldsel, args);
      varRes_3 = AddContextToExpr((IOmlExpression) expr, cxt_us);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=ExpandTraceMethodApply#2|IOmlTraceMethodApply|HashSet


// ***** VDMTOOLS START Name=ExpandTraceRepeatPat#2|IOmlTraceRepeatPattern|HashSet KEEP=NO
  private HashSet ExpandTraceRepeatPat (final IOmlTraceRepeatPattern regexpr, final HashSet expr_ul_us) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceZeroOrMore))) 
        succ_3 = false;
      if (succ_3) {

        HashSet rep = RepeatCombine(expr_ul_us, new Long(1), oneOrMoreMax);
        HashSet rexpr_30 = new HashSet();
        HashSet var1_31 = new HashSet();
        var1_31 = new HashSet();
        var1_31.add(new Vector());
        rexpr_30 = (HashSet) var1_31.clone();
        rexpr_30.addAll(rep);
        return rexpr_30;
      }
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceOneOrMore))) 
          succ_3 = false;
        if (succ_3) 
          return RepeatCombine(expr_ul_us, new Long(1), oneOrMoreMax);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceZeroOrOne))) 
            succ_3 = false;
          if (succ_3) {

            HashSet rexpr_13 = new HashSet();
            HashSet var2_15 = new HashSet();
            var2_15 = new HashSet();
            var2_15.add(new Vector());
            rexpr_13 = (HashSet) expr_ul_us.clone();
            rexpr_13.addAll(var2_15);
            return rexpr_13;
          }
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(regexpr instanceof IOmlTraceRange))) 
              succ_3 = false;
            if (succ_3) 
              return ExpandTraceRange((IOmlTraceRange) regexpr, expr_ul_us);
            else {

              UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
              return new HashSet();
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=ExpandTraceRepeatPat#2|IOmlTraceRepeatPattern|HashSet


// ***** VDMTOOLS START Name=ExpandTraceRange#2|IOmlTraceRange|HashSet KEEP=NO
  private HashSet ExpandTraceRange (final IOmlTraceRange regexpr, final HashSet expr_ul_us) throws CGException {

    Long tmpVal_4 = null;
    IOmlNumericLiteral obj_5 = null;
    obj_5 = (IOmlNumericLiteral) regexpr.getLower();
    tmpVal_4 = obj_5.getVal();
    Long low = null;
    low = tmpVal_4;
    Long tmpVal_6 = null;
    Boolean cond_8 = null;
    cond_8 = regexpr.hasUpper();
    if (cond_8.booleanValue()) {

      IOmlNumericLiteral obj_9 = null;
      obj_9 = (IOmlNumericLiteral) regexpr.getUpper();
      tmpVal_6 = obj_9.getVal();
    }
    else 
      tmpVal_6 = low;
    Long high = null;
    high = tmpVal_6;
    Long l = null;
    if (new Boolean(low.intValue() == new Long(0).intValue()).booleanValue()) 
      l = new Long(1);
    else 
      l = low;
    HashSet no = new HashSet();
    if (new Boolean(low.intValue() == new Long(0).intValue()).booleanValue()) {

      no = new HashSet();
      no.add(new Vector());
    }
    else 
      no = new HashSet();
    HashSet rep = RepeatCombine(expr_ul_us, l, high);
    HashSet rexpr_25 = new HashSet();
    rexpr_25 = (HashSet) no.clone();
    rexpr_25.addAll(rep);
    return rexpr_25;
  }
// ***** VDMTOOLS END Name=ExpandTraceRange#2|IOmlTraceRange|HashSet


// ***** VDMTOOLS START Name=RepeatCombine#3|HashSet|Long|Long KEEP=NO
  private HashSet RepeatCombine (final HashSet expr_ul_us, final Long low, final Long high) throws CGException {

    HashSet acc_ue_ul_us = new HashSet();
    HashSet ith_ue_ul_us = new HashSet();
    ith_ue_ul_us = new HashSet();
    ith_ue_ul_us.add(new Vector());
    Long i = new Long(1);
    while ( new Boolean((i.intValue()) <= (high.intValue())).booleanValue()){

      HashSet oldith = ith_ue_ul_us;
      {

        HashSet rhs_10 = new HashSet();
        HashSet res_s_11 = new HashSet();
        {

          Vector e_ul1 = null;
          Vector e_ul2 = null;
          {
            for (Iterator enm_21 = expr_ul_us.iterator(); enm_21.hasNext(); ) {

              Vector elem_20 = (Vector) UTIL.ConvertToList(enm_21.next());
              e_ul2 = elem_20;
              for (Iterator enm_19 = oldith.iterator(); enm_19.hasNext(); ) {

                Vector elem_18 = (Vector) UTIL.ConvertToList(enm_19.next());
                e_ul1 = elem_18;
                Vector res_s_12 = null;
                res_s_12 = (Vector) e_ul1.clone();
                res_s_12.addAll(e_ul2);
                res_s_11.add(res_s_12);
              }
            }
          }
        }
        rhs_10 = res_s_11;
        ith_ue_ul_us = (HashSet) UTIL.clone(rhs_10);
        if (new Boolean((i.intValue()) >= (low.intValue())).booleanValue()) {

          HashSet rhs_25 = new HashSet();
          rhs_25 = (HashSet) acc_ue_ul_us.clone();
          rhs_25.addAll(ith_ue_ul_us);
          acc_ue_ul_us = (HashSet) UTIL.clone(rhs_25);
        }
        i = UTIL.NumberToLong(UTIL.clone(new Long(i.intValue() + new Long(1).intValue())));
      }
    }
    return acc_ue_ul_us;
  }
// ***** VDMTOOLS END Name=RepeatCombine#3|HashSet|Long|Long


// ***** VDMTOOLS START Name=AddContextToExpr#2|IOmlExpression|HashSet KEEP=NO
  private HashSet AddContextToExpr (final IOmlExpression expr, final HashSet cxt_us) throws CGException {

    HashSet varRes_3 = new HashSet();
    if (new Boolean(UTIL.equals(cxt_us, new HashSet())).booleanValue()) {

      Vector enum_set_25 = null;
      enum_set_25 = new Vector();
      enum_set_25.add(expr);
      varRes_3 = new HashSet();
      varRes_3.add(enum_set_25);
    }
    else {

      HashSet res_s_8 = new HashSet();
      {

        HashMap cxt = new HashMap();
        {
          for (Iterator enm_24 = cxt_us.iterator(); enm_24.hasNext(); ) {

            HashMap elem_23 = (HashMap) enm_24.next();
            cxt = elem_23;
            Vector res_s_9 = null;
            {

              Vector def_ul = Context2ValShapeL(cxt);
              if (new Boolean(UTIL.equals(def_ul, new Vector())).booleanValue()) {

                res_s_9 = new Vector();
                res_s_9.add(expr);
              }
              else {

                res_s_9 = new Vector();
                res_s_9.add(new OmlLetExpression(def_ul, expr));
              }
            }
            res_s_8.add(res_s_9);
          }
        }
      }
      varRes_3 = res_s_8;
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=AddContextToExpr#2|IOmlExpression|HashSet


// ***** VDMTOOLS START Name=AddContextToExprList#2|Vector|HashSet KEEP=NO
  private HashSet AddContextToExprList (final Vector e_ul, final HashSet cxt_us) throws CGException {

    HashSet varRes_3 = new HashSet();
    if (new Boolean(UTIL.equals(cxt_us, new HashSet())).booleanValue()) {

      varRes_3 = new HashSet();
      varRes_3.add(e_ul);
    }
    else {

      HashSet res_s_8 = new HashSet();
      {

        HashMap cxt = new HashMap();
        {
          for (Iterator enm_36 = cxt_us.iterator(); enm_36.hasNext(); ) {

            HashMap elem_35 = (HashMap) enm_36.next();
            cxt = elem_35;
            Vector res_s_9 = null;
            {

              Vector def_ul = Context2ValShapeL(cxt);
              if (new Boolean(UTIL.equals(def_ul, new Vector())).booleanValue()) 
                res_s_9 = e_ul;
              else {

                Vector res_l_17 = new Vector();
                HashSet resBind_s_19 = new HashSet();
                HashSet riseq_23 = new HashSet();
                int max_24 = e_ul.size();
                for (int i_25 = 1; i_25 <= max_24; i_25++) 
                  riseq_23.add(new Long(i_25));
                resBind_s_19 = riseq_23;
                Vector bind_l_18 = null;
                bind_l_18 = UTIL.Sort(resBind_s_19);
                Long i = null;
                for (Iterator enm_32 = bind_l_18.iterator(); enm_32.hasNext(); ) {

                  Long e_21 = UTIL.NumberToLong(enm_32.next());
                  i = e_21;
                  OmlLetExpression reselem_26 = null;
                  IOmlExpression arg_28 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= e_ul.size())) 
                    arg_28 = (IOmlExpression) e_ul.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  reselem_26 = new OmlLetExpression(def_ul, arg_28);
                  res_l_17.add(reselem_26);
                }
                res_s_9 = res_l_17;
              }
            }
            res_s_8.add(res_s_9);
          }
        }
      }
      varRes_3 = res_s_8;
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=AddContextToExprList#2|Vector|HashSet


// ***** VDMTOOLS START Name=Context2ValShapeL#1|HashMap KEEP=NO
  private Vector Context2ValShapeL (final HashMap cxt) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(cxt, new HashMap())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      HashSet tmpSet_7 = new HashSet();
      tmpSet_7.clear();
      tmpSet_7.addAll(cxt.keySet());
      String id = null;
      boolean succ_9 = false;
      for (Iterator enm_12 = tmpSet_7.iterator(); enm_12.hasNext() && !succ_9; ) {

        String tmpElem_10 = UTIL.ConvertToString(enm_12.next());
        succ_9 = true;
        id = tmpElem_10;
      }
      if (!succ_9) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      {

        OmlPatternIdentifier pat = (OmlPatternIdentifier) new OmlPatternIdentifier(id);
        IOmlExpression val = null;
        val = (IOmlExpression) SEM.VAL2IOmlExpr((SEM.VAL) (SEM.VAL) cxt.get(id));
        OmlValueShape valshape = (OmlValueShape) new OmlValueShape(pat, null, val);
        Vector vdm_rest = null;
        HashMap par_25 = new HashMap();
        HashSet var1_26 = new HashSet();
        var1_26 = new HashSet();
        var1_26.add(id);
        par_25 = cxt;
        {

          HashMap tmpMap_29 = new HashMap();
          HashSet domM_30 = new HashSet();
          domM_30.addAll(par_25.keySet());
          Object elm_31;
          for (Iterator bb_32 = domM_30.iterator(); bb_32.hasNext(); ) {

            elm_31 = bb_32.next();
            if (!var1_26.contains(elm_31)) 
              tmpMap_29.put(elm_31, par_25.get(elm_31));
          }
          par_25 = tmpMap_29;
        }
        vdm_rest = Context2ValShapeL(par_25);
        Vector var1_33 = null;
        var1_33 = new Vector();
        var1_33.add(valshape);
        varRes_2 = (Vector) var1_33.clone();
        varRes_2.addAll(vdm_rest);
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=Context2ValShapeL#1|HashMap


// ***** VDMTOOLS START Name=SmallerContext#1|HashMap KEEP=NO
  private Long SmallerContext (final HashMap cxt) throws CGException {

    Long varRes_2 = null;
    HashSet unArg_3 = new HashSet();
    unArg_3.clear();
    unArg_3.addAll(cxt.keySet());
    varRes_2 = new Long(unArg_3.size());
    return varRes_2;
  }
// ***** VDMTOOLS END Name=SmallerContext#1|HashMap


// ***** VDMTOOLS START Name=CombineTraces#2|HashSet|HashSet KEEP=NO
  private HashSet CombineTraces (final HashSet e_ul_us1, final HashSet e_ul_us2) throws CGException {

    HashSet varRes_3 = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      Vector e_ul1 = null;
      Vector e_ul2 = null;
      {
        for (Iterator enm_14 = e_ul_us2.iterator(); enm_14.hasNext(); ) {

          Vector elem_13 = (Vector) UTIL.ConvertToList(enm_14.next());
          e_ul2 = elem_13;
          for (Iterator enm_12 = e_ul_us1.iterator(); enm_12.hasNext(); ) {

            Vector elem_11 = (Vector) UTIL.ConvertToList(enm_12.next());
            e_ul1 = elem_11;
            Vector res_s_5 = null;
            res_s_5 = (Vector) e_ul1.clone();
            res_s_5.addAll(e_ul2);
            res_s_4.add(res_s_5);
          }
        }
      }
    }
    varRes_3 = res_s_4;
    return varRes_3;
  }
// ***** VDMTOOLS END Name=CombineTraces#2|HashSet|HashSet


// ***** VDMTOOLS START Name=ExtractLetBinding#2|IOmlTraceLetBinding|HashSet KEEP=NO
  private HashSet ExtractLetBinding (final IOmlTraceLetBinding bind, final HashSet cxt_us) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = bind.getDefinitionList();
    Vector def_ul = null;
    def_ul = tmpVal_4;
    {

      HashSet c_us = cxt_us;
      {

        IOmlValueShape valshape = null;
        for (Iterator enm_34 = def_ul.iterator(); enm_34.hasNext(); ) {

          IOmlValueShape elem_6 = (IOmlValueShape) enm_34.next();
          valshape = (IOmlValueShape) elem_6;
          {

            IOmlPattern pat = null;
            pat = (IOmlPattern) valshape.getPattern();
            IOmlExpression expr = null;
            expr = (IOmlExpression) valshape.getExpression();
            HashSet val_us = new HashSet();
            HashSet res_s_13 = new HashSet();
            {

              HashMap cxt = new HashMap();
              {
                for (Iterator enm_20 = c_us.iterator(); enm_20.hasNext(); ) {

                  HashMap elem_19 = (HashMap) enm_20.next();
                  cxt = elem_19;
                  SEM.VAL res_s_14 = null;
                  res_s_14 = (SEM.VAL) eval.evaluateExpression((IOmlExpression) expr, cxt);
                  res_s_13.add(res_s_14);
                }
              }
            }
            val_us = res_s_13;
            HashSet newc_us = new HashSet();
            HashSet res_s_22 = new HashSet();
            {

              boolean succ_26 = true;
              SEM.VAL val = null;
              {
                for (Iterator enm_29 = val_us.iterator(); enm_29.hasNext(); ) {

                  Object elem_28 = enm_29.next();
                  succ_26 = true;
                  if (new Boolean((elem_28 instanceof Record)).booleanValue()) 
                    val = (SEM.VAL) elem_28;
                  else 
                    succ_26 = false;
                  if (succ_26) {

                    HashMap res_s_23 = new HashMap();
                    res_s_23 = eval.PatternMatch((IOmlPattern) pat, (SEM.VAL) val);
                    res_s_22.add(res_s_23);
                  }
                }
              }
            }
            newc_us = res_s_22;
            HashSet rhs_30 = new HashSet();
            rhs_30 = (HashSet) eval.CombineContexts(c_us, newc_us);
            c_us = (HashSet) UTIL.clone(rhs_30);
          }
        }
      }
      return c_us;
    }
  }
// ***** VDMTOOLS END Name=ExtractLetBinding#2|IOmlTraceLetBinding|HashSet


// ***** VDMTOOLS START Name=ExtractLetBeBinding#2|IOmlTraceLetBeBinding|HashSet KEEP=NO
  private HashSet ExtractLetBeBinding (final IOmlTraceLetBeBinding lbbind, final HashSet cxt_us) throws CGException {

    HashSet varRes_3 = new HashSet();
    {

      IOmlBind bind = null;
      bind = (IOmlBind) lbbind.getBind();
      IOmlExpression best = null;
      Boolean cond_8 = null;
      cond_8 = lbbind.hasBest();
      if (cond_8.booleanValue()) 
        best = (IOmlExpression) lbbind.getBest();
      else 
        best = null;
      if (new Boolean(bind instanceof IOmlSetBind).booleanValue()) {

        Object bestex = null;
        if (new Boolean(UTIL.equals(best, null)).booleanValue()) 
          bestex = new OmlSymbolicLiteralExpression(new OmlBooleanLiteral(new Boolean(true)));
        else 
          bestex = best;
        varRes_3 = ExtractLetBeSetBinding((IOmlSetBind) bind, (IOmlExpression) bestex, cxt_us);
      }
      else 
        varRes_3 = new HashSet();
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=ExtractLetBeBinding#2|IOmlTraceLetBeBinding|HashSet


// ***** VDMTOOLS START Name=ExtractLetBeSetBinding#3|IOmlSetBind|IOmlExpression|HashSet KEEP=NO
  private HashSet ExtractLetBeSetBinding (final IOmlSetBind bind, final IOmlExpression best, final HashSet cxt_us) throws CGException {

    Vector p_ul = null;
    p_ul = bind.getPattern();
    IOmlExpression expr = null;
    expr = (IOmlExpression) bind.getExpression();
    HashSet rexpr_7 = new HashSet();
    HashSet unArg_8 = new HashSet();
    HashSet res_s_9 = new HashSet();
    {

      HashMap cxt = new HashMap();
      {
        for (Iterator enm_65 = cxt_us.iterator(); enm_65.hasNext(); ) {

          HashMap elem_64 = (HashMap) enm_65.next();
          cxt = elem_64;
          HashSet res_s_10 = new HashSet();
          {

            SEM.VAL val = null;
            val = (SEM.VAL) eval.evaluateExpression((IOmlExpression) expr, cxt);
            HashSet c_ul_us = new HashSet();
            Boolean cond_17 = null;
            if ((val instanceof Record)) 
              cond_17 = new Boolean(((Object) val instanceof SEM.SET));
            else 
              cond_17 = new Boolean(false);
            if (cond_17.booleanValue()) {

              HashSet res_s_19 = new HashSet();
              {

                boolean succ_37 = true;
                Object e_set_38 = null;
                if ((val instanceof Record)) 
                  if ((val instanceof SEM.TUPLE)) 
                    e_set_38 = ((SEM.TUPLE) val).v;
                  else 
                    if ((val instanceof SEM.TOKEN)) 
                      e_set_38 = ((SEM.TOKEN) val).v;
                    else 
                      if ((val instanceof SEM.QUOTE)) 
                        e_set_38 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
                      else 
                        if ((val instanceof SEM.CHAR)) 
                          e_set_38 = ((SEM.CHAR) val).v;
                        else 
                          if ((val instanceof SEM.BOOL)) 
                            e_set_38 = ((SEM.BOOL) val).v;
                          else 
                            if ((val instanceof SEM.SET)) 
                              e_set_38 = ((SEM.SET) val).v;
                            else 
                              if ((val instanceof SEM.SEQ)) 
                                e_set_38 = ((SEM.SEQ) val).v;
                              else 
                                if ((val instanceof SEM.REC)) 
                                  e_set_38 = ((SEM.REC) val).v;
                                else 
                                  if ((val instanceof SEM.NUM)) 
                                    e_set_38 = ((SEM.NUM) val).v;
                                  else 
                                    e_set_38 = ((SEM.MAP) val).v;
                else 
                  UTIL.RunTime("Run-Time Error:A record was expected");
                HashSet e1_set_40 = new HashSet();
                if ((e_set_38 instanceof HashSet)) 
                  e1_set_40 = (HashSet) e_set_38;
                else 
                  UTIL.RunTime("Run-Time Error:A set was expected");
                SEM.VAL v = null;
                {
                  for (Iterator enm_42 = e1_set_40.iterator(); enm_42.hasNext(); ) {

                    Object elem_41 = enm_42.next();
                    succ_37 = true;
                    if (new Boolean((elem_41 instanceof Record)).booleanValue()) 
                      v = (SEM.VAL) elem_41;
                    else 
                      succ_37 = false;
                    if (succ_37) {

                      Vector res_s_20 = null;
                      {

                        Vector res_l_21 = new Vector();
                        HashSet resBind_s_23 = new HashSet();
                        HashSet riseq_27 = new HashSet();
                        int max_28 = p_ul.size();
                        for (int i_29 = 1; i_29 <= max_28; i_29++) 
                          riseq_27.add(new Long(i_29));
                        resBind_s_23 = riseq_27;
                        Vector bind_l_22 = null;
                        bind_l_22 = UTIL.Sort(resBind_s_23);
                        Long i = null;
                        for (Iterator enm_36 = bind_l_22.iterator(); enm_36.hasNext(); ) {

                          Long e_25 = UTIL.NumberToLong(enm_36.next());
                          i = e_25;
                          HashMap reselem_30 = new HashMap();
                          IOmlPattern par_31 = null;
                          if ((1 <= i.intValue()) && (i.intValue() <= p_ul.size())) 
                            par_31 = (IOmlPattern) p_ul.get(i.intValue() - 1);
                          else 
                            UTIL.RunTime("Run-Time Error:Illegal index");
                          reselem_30 = eval.PatternMatch((IOmlPattern) par_31, (SEM.VAL) v);
                          res_l_21.add(reselem_30);
                        }
                        res_s_20 = res_l_21;
                      }
                      res_s_19.add(res_s_20);
                    }
                  }
                }
              }
              c_ul_us = res_s_19;
            }
            else 
              c_ul_us = new HashSet();
            HashSet res_s_43 = new HashSet();
            {

              Vector c_ul = null;
              {
                for (Iterator enm_61 = c_ul_us.iterator(); enm_61.hasNext(); ) {

                  Vector elem_60 = (Vector) UTIL.ConvertToList(enm_61.next());
                  c_ul = elem_60;
                  Boolean pred_46 = null;
                  {

                    HashMap c = new HashMap();
                    Vector par_49 = null;
                    Vector var1_50 = null;
                    var1_50 = new Vector();
                    var1_50.add(cxt);
                    par_49 = (Vector) var1_50.clone();
                    par_49.addAll(c_ul);
                    c = (HashMap) eval.MergeContextList(par_49);
                    SEM.VAL var1_53 = null;
                    var1_53 = (SEM.VAL) eval.evaluateExpression((IOmlExpression) best, c);
                    SEM.BOOL var2_56 = null;
                    var2_56 = new SEM.BOOL(new Boolean(true));
                    pred_46 = new Boolean(UTIL.equals(var1_53, var2_56));
                  }
                  if (pred_46.booleanValue()) {

                    HashMap res_s_44 = new HashMap();
                    res_s_44 = (HashMap) eval.MergeContextList(c_ul);
                    res_s_43.add(res_s_44);
                  }
                }
              }
            }
            res_s_10 = res_s_43;
          }
          res_s_9.add(res_s_10);
        }
      }
    }
    unArg_8 = res_s_9;
    HashSet rduset_66 = new HashSet();
    for (Iterator enm_68 = unArg_8.iterator(); enm_68.hasNext(); ) {

      HashSet e_67 = (HashSet) enm_68.next();
      rduset_66.addAll(e_67);
    }
    rexpr_7 = rduset_66;
    return rexpr_7;
  }
// ***** VDMTOOLS END Name=ExtractLetBeSetBinding#3|IOmlSetBind|IOmlExpression|HashSet


// ***** VDMTOOLS START Name=expandRegexpr#1|IOmlTraceDefinitionItem KEEP=NO
  protected Vector expandRegexpr (final IOmlTraceDefinitionItem i) throws CGException {
    return expandRegexprChoose((IOmlTraceDefinitionItem) i);
  }
// ***** VDMTOOLS END Name=expandRegexpr#1|IOmlTraceDefinitionItem


// ***** VDMTOOLS START Name=expandRegexprChoose#1|IOmlTraceDefinitionItem KEEP=NO
  protected Vector expandRegexprChoose (final IOmlTraceDefinitionItem i) throws CGException {

    IOmlTraceRepeatPattern tmpVal_3 = null;
    tmpVal_3 = (IOmlTraceRepeatPattern) i.getRegexpr();
    IOmlTraceRepeatPattern r = null;
    r = (IOmlTraceRepeatPattern) tmpVal_3;
    Boolean cond_4 = null;
    cond_4 = i.hasRegexpr();
    if (cond_4.booleanValue()) 
      return expandSymbol((IOmlTraceDefinitionItem) i, (IOmlTraceRepeatPattern) r);
    else {

      Vector rexpr_5 = null;
      Vector e_seq_6 = null;
      e_seq_6 = new Vector();
      e_seq_6.add(i);
      rexpr_5 = new Vector();
      rexpr_5.add(e_seq_6);
      return rexpr_5;
    }
  }
// ***** VDMTOOLS END Name=expandRegexprChoose#1|IOmlTraceDefinitionItem


// ***** VDMTOOLS START Name=expandN2M#4|Long|Long|IOmlTraceDefinitionItem|Vector KEEP=NO
  protected Vector expandN2M (final Long n, final Long m, final IOmlTraceDefinitionItem s, final Vector o) throws CGException {
    if (new Boolean(!(n.intValue() == m.intValue())).booleanValue()) {

      Vector rexpr_15 = null;
      Vector var1_16 = null;
      var1_16 = new Vector();
      var1_16.add(o);
      Vector var2_18 = null;
      Vector par_24 = null;
      Vector var2_26 = null;
      var2_26 = new Vector();
      var2_26.add(s);
      par_24 = (Vector) o.clone();
      par_24.addAll(var2_26);
      var2_18 = expandN2M(n, new Long(m.intValue() - new Long(1).intValue()), (IOmlTraceDefinitionItem) s, par_24);
      rexpr_15 = (Vector) var1_16.clone();
      rexpr_15.addAll(var2_18);
      return rexpr_15;
    }
    else 
      if (new Boolean(n.intValue() == new Long(0).intValue()).booleanValue()) {

        Vector rexpr_13 = null;
        rexpr_13 = new Vector();
        rexpr_13.add(new Vector());
        return rexpr_13;
      }
      else {

        Vector rexpr_11 = null;
        rexpr_11 = new Vector();
        rexpr_11.add(o);
        return rexpr_11;
      }
  }
// ***** VDMTOOLS END Name=expandN2M#4|Long|Long|IOmlTraceDefinitionItem|Vector


// ***** VDMTOOLS START Name=expandSymbol#2|IOmlTraceDefinitionItem|IOmlTraceRepeatPattern KEEP=NO
  protected Vector expandSymbol (final IOmlTraceDefinitionItem s, final IOmlTraceRepeatPattern r) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceZeroOrMore))) 
        succ_3 = false;
      if (succ_3) 
        return expandSymbolZeroOrMore((IOmlTraceDefinitionItem) s, (IOmlTraceZeroOrMore) r);
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceOneOrMore))) 
          succ_3 = false;
        if (succ_3) 
          return expandSymbolOneOrMore((IOmlTraceDefinitionItem) s, (IOmlTraceOneOrMore) r);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceZeroOrOne))) 
            succ_3 = false;
          if (succ_3) 
            return expandSymbolZeroOrOne((IOmlTraceDefinitionItem) s, (IOmlTraceZeroOrOne) r);
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(r instanceof IOmlTraceRange))) 
              succ_3 = false;
            if (succ_3) 
              return expandSymbolRange((IOmlTraceDefinitionItem) s, (IOmlTraceRange) r);
            else 
              return new Vector();
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=expandSymbol#2|IOmlTraceDefinitionItem|IOmlTraceRepeatPattern


// ***** VDMTOOLS START Name=expandSymbolZeroOrMore#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrMore KEEP=NO
  protected Vector expandSymbolZeroOrMore (final IOmlTraceDefinitionItem var_1_1, final IOmlTraceZeroOrMore var_2_2) throws CGException {

    IOmlTraceDefinitionItem s = null;
    boolean succ_3 = true;
    s = (IOmlTraceDefinitionItem) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation expandSymbolZeroOrMore");
    Vector rexpr_4 = null;
    Vector par_8 = null;
    par_8 = new Vector();
    par_8.add(s);
    rexpr_4 = expandN2M(new Long(0), zeroOrMoreMax, (IOmlTraceDefinitionItem) s, par_8);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=expandSymbolZeroOrMore#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrMore


// ***** VDMTOOLS START Name=expandSymbolOneOrMore#2|IOmlTraceDefinitionItem|IOmlTraceOneOrMore KEEP=NO
  protected Vector expandSymbolOneOrMore (final IOmlTraceDefinitionItem var_1_1, final IOmlTraceOneOrMore var_2_2) throws CGException {

    IOmlTraceDefinitionItem s = null;
    boolean succ_3 = true;
    s = (IOmlTraceDefinitionItem) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation expandSymbolOneOrMore");
    Vector rexpr_4 = null;
    Vector par_8 = null;
    par_8 = new Vector();
    par_8.add(s);
    rexpr_4 = expandN2M(new Long(1), oneOrMoreMax, (IOmlTraceDefinitionItem) s, par_8);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=expandSymbolOneOrMore#2|IOmlTraceDefinitionItem|IOmlTraceOneOrMore


// ***** VDMTOOLS START Name=expandSymbolZeroOrOne#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrOne KEEP=NO
  protected Vector expandSymbolZeroOrOne (final IOmlTraceDefinitionItem var_1_1, final IOmlTraceZeroOrOne var_2_2) throws CGException {

    IOmlTraceDefinitionItem s = null;
    boolean succ_3 = true;
    s = (IOmlTraceDefinitionItem) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation expandSymbolZeroOrOne");
    Vector rexpr_4 = null;
    Vector par_8 = null;
    par_8 = new Vector();
    par_8.add(s);
    rexpr_4 = expandN2M(new Long(0), new Long(1), (IOmlTraceDefinitionItem) s, par_8);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=expandSymbolZeroOrOne#2|IOmlTraceDefinitionItem|IOmlTraceZeroOrOne


// ***** VDMTOOLS START Name=expandSymbolRange#2|IOmlTraceDefinitionItem|IOmlTraceRange KEEP=NO
  protected Vector expandSymbolRange (final IOmlTraceDefinitionItem s, final IOmlTraceRange t) throws CGException {

    Long tmpVal_4 = null;
    IOmlNumericLiteral obj_5 = null;
    obj_5 = (IOmlNumericLiteral) t.getLower();
    tmpVal_4 = obj_5.getVal();
    Long min = null;
    min = tmpVal_4;
    Long max = null;
    IOmlNumericLiteral par_8 = null;
    par_8 = (IOmlNumericLiteral) t.getUpper();
    max = getVal(min, (IOmlNumericLiteral) par_8);
    Vector rexpr_9 = null;
    Vector par_13 = null;
    par_13 = new Vector();
    par_13.add(s);
    rexpr_9 = expandN2M(min, max, (IOmlTraceDefinitionItem) s, par_13);
    return rexpr_9;
  }
// ***** VDMTOOLS END Name=expandSymbolRange#2|IOmlTraceDefinitionItem|IOmlTraceRange


// ***** VDMTOOLS START Name=getVal#2|Long|IOmlNumericLiteral KEEP=NO
  protected Long getVal (final Long min, final IOmlNumericLiteral n) throws CGException {
    if (new Boolean(UTIL.equals(n, null)).booleanValue()) 
      return min;
    else {

      Long rexpr_6 = null;
      rexpr_6 = n.getVal();
      return rexpr_6;
    }
  }
// ***** VDMTOOLS END Name=getVal#2|Long|IOmlNumericLiteral


// ***** VDMTOOLS START Name=getLetBeInfo#1|IOmlTraceLetBeBinding KEEP=NO
  protected HashMap getLetBeInfo (final IOmlTraceLetBeBinding b) throws CGException {

    HashMap rexpr_2 = new HashMap();
    rexpr_2 = new HashMap();
    rexpr_2.put(extractBindingVariable((IOmlTraceLetBeBinding) b), (IOmlExpression) extractBindingExpression((IOmlTraceLetBeBinding) b));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getLetBeInfo#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=isOfTypeSB#1|IOmlTraceLetBeBinding KEEP=NO
  protected Boolean isOfTypeSB (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlBind bind = null;
    bind = (IOmlBind) b.getBind();
    if (new Boolean(bind instanceof IOmlSetBind).booleanValue()) 
      return isOfTypePattern((IOmlSetBind) bind);
    else 
      return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isOfTypeSB#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=isOfTypePattern#1|IOmlSetBind KEEP=NO
  protected Boolean isOfTypePattern (final IOmlSetBind s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = s.getPattern();
    Vector p = null;
    p = tmpVal_3;
    IOmlPattern v = null;
    if ((1 <= new Long(1).intValue()) && (new Long(1).intValue() <= p.size())) 
      v = (IOmlPattern) p.get(new Long(1).intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    return new Boolean(v instanceof IOmlPatternIdentifier);
  }
// ***** VDMTOOLS END Name=isOfTypePattern#1|IOmlSetBind


// ***** VDMTOOLS START Name=extractBindingVariable#1|IOmlTraceLetBeBinding KEEP=NO
  protected String extractBindingVariable (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlBind tmpVal_3 = null;
    tmpVal_3 = (IOmlBind) b.getBind();
    IOmlBind bind = null;
    bind = (IOmlBind) tmpVal_3;
    return getVariable((IOmlSetBind) bind);
  }
// ***** VDMTOOLS END Name=extractBindingVariable#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=getVariable#1|IOmlSetBind KEEP=NO
  protected String getVariable (final IOmlSetBind b) throws CGException {

    Vector p = null;
    p = b.getPattern();
    IOmlPattern v = null;
    if ((1 <= new Long(1).intValue()) && (new Long(1).intValue() <= p.size())) 
      v = (IOmlPattern) p.get(new Long(1).intValue() - 1);
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    return getVariableName((IOmlPatternIdentifier) v);
  }
// ***** VDMTOOLS END Name=getVariable#1|IOmlSetBind


// ***** VDMTOOLS START Name=getVariableName#1|IOmlPatternIdentifier KEEP=NO
  protected String getVariableName (final IOmlPatternIdentifier pi) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = pi.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getVariableName#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=extractBindingExpression#1|IOmlTraceLetBeBinding KEEP=NO
  protected IOmlExpression extractBindingExpression (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlBind tmpVal_3 = null;
    tmpVal_3 = (IOmlBind) b.getBind();
    IOmlBind bind = null;
    bind = (IOmlBind) tmpVal_3;
    return (IOmlExpression) (IOmlExpression) getExpression((IOmlSetBind) bind);
  }
// ***** VDMTOOLS END Name=extractBindingExpression#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=getExpression#1|IOmlSetBind KEEP=NO
  protected IOmlExpression getExpression (final IOmlSetBind b) throws CGException {

    IOmlExpression rexpr_2 = null;
    rexpr_2 = (IOmlExpression) b.getExpression();
    return (IOmlExpression) rexpr_2;
  }
// ***** VDMTOOLS END Name=getExpression#1|IOmlSetBind


// ***** VDMTOOLS START Name=getConstraints#1|IOmlTraceLetBeBinding KEEP=NO
  protected IOmlExpression getConstraints (final IOmlTraceLetBeBinding b) throws CGException {

    IOmlExpression rexpr_2 = null;
    rexpr_2 = (IOmlExpression) b.getBest();
    return (IOmlExpression) rexpr_2;
  }
// ***** VDMTOOLS END Name=getConstraints#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=getLetInfo#1|IOmlTraceLetBinding KEEP=NO
  protected HashMap getLetInfo (final IOmlTraceLetBinding b) throws CGException {

    Vector def_ulist = null;
    def_ulist = b.getDefinitionList();
    HashMap rexpr_4 = new HashMap();
    HashMap res_m_5 = new HashMap();
    {

      HashSet e_set_21 = new HashSet();
      HashSet riseq_23 = new HashSet();
      int max_24 = def_ulist.size();
      for (int i_25 = 1; i_25 <= max_24; i_25++) 
        riseq_23.add(new Long(i_25));
      e_set_21 = riseq_23;
      Long e = null;
      {
        for (Iterator enm_27 = e_set_21.iterator(); enm_27.hasNext(); ) {

          Long elem_26 = UTIL.NumberToLong(enm_27.next());
          e = elem_26;
          Boolean pred_15 = null;
          IOmlPattern obj_16 = null;
          IOmlValueShape obj_17 = null;
          if ((1 <= e.intValue()) && (e.intValue() <= def_ulist.size())) 
            obj_17 = (IOmlValueShape) def_ulist.get(e.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_16 = (IOmlPattern) obj_17.getPattern();
          pred_15 = new Boolean(obj_16 instanceof IOmlPatternIdentifier);
          if (pred_15.booleanValue()) {

            String md_6 = null;
            IOmlPattern par_7 = null;
            IOmlValueShape obj_8 = null;
            if ((1 <= e.intValue()) && (e.intValue() <= def_ulist.size())) 
              obj_8 = (IOmlValueShape) def_ulist.get(e.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_7 = (IOmlPattern) obj_8.getPattern();
            md_6 = getPatternId((IOmlPatternIdentifier) par_7);
            IOmlExpression mr_11 = null;
            IOmlValueShape obj_12 = null;
            if ((1 <= e.intValue()) && (e.intValue() <= def_ulist.size())) 
              obj_12 = (IOmlValueShape) def_ulist.get(e.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            mr_11 = (IOmlExpression) obj_12.getExpression();
            res_m_5.put(md_6, mr_11);
          }
        }
      }
    }
    rexpr_4 = res_m_5;
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=getLetInfo#1|IOmlTraceLetBinding


// ***** VDMTOOLS START Name=getPatternId#1|IOmlPatternIdentifier KEEP=NO
  protected String getPatternId (final IOmlPatternIdentifier p) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = p.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getPatternId#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=PushCxt#1|HashSet KEEP=NO
  private void PushCxt (final HashSet cxt_us) throws CGException {

    Vector rhs_2 = null;
    Vector var1_3 = null;
    var1_3 = new Vector();
    var1_3.add(cxt_us);
    rhs_2 = (Vector) var1_3.clone();
    rhs_2.addAll(cxt_us_ustack);
    cxt_us_ustack = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=PushCxt#1|HashSet


// ***** VDMTOOLS START Name=PopCxt KEEP=NO
  private void PopCxt () throws CGException {
    cxt_us_ustack = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector(cxt_us_ustack.subList(1, cxt_us_ustack.size()))));
  }
// ***** VDMTOOLS END Name=PopCxt


// ***** VDMTOOLS START Name=CxtStackIsEmpty KEEP=NO
  private Boolean CxtStackIsEmpty () throws CGException {
    return new Boolean(UTIL.equals(cxt_us_ustack, new Vector()));
  }
// ***** VDMTOOLS END Name=CxtStackIsEmpty


// ***** VDMTOOLS START Name=GetCurClass KEEP=NO
  static public String GetCurClass () throws CGException {
    return curcl;
  }
// ***** VDMTOOLS END Name=GetCurClass


// ***** VDMTOOLS START Name=GetCurTrace KEEP=NO
  static public String GetCurTrace () throws CGException {
    return curtr;
  }
// ***** VDMTOOLS END Name=GetCurTrace


// ***** VDMTOOLS START Name=HasError#2|String|String KEEP=NO
  public Boolean HasError (final String clnm, final String trnm) throws CGException {

    Boolean rexpr_3 = null;
    rexpr_3 = RTERR.HasError(clnm, trnm);
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=HasError#2|String|String


// ***** VDMTOOLS START Name=GetErrMsg#2|String|String KEEP=NO
  public HashSet GetErrMsg (final String clnm, final String trnm) throws CGException {

    HashSet rexpr_3 = new HashSet();
    rexpr_3 = RTERR.GetErrMsg(clnm, trnm);
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=GetErrMsg#2|String|String

}
;
