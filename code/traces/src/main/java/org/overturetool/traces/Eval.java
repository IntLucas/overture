//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-03-18 by the VDM++ to JAVA Code Generator
// (v8.2b - Thu 05-Mar-2009 17:15:02)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.traces;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
@SuppressWarnings({"unchecked","unused"})
// ***** VDMTOOLS END Name=imports



public class Eval {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=specdefs KEEP=NO
  private DEF specdefs = null;
// ***** VDMTOOLS END Name=specdefs

// ***** VDMTOOLS START Name=curcl KEEP=NO
  private String curcl = null;
// ***** VDMTOOLS END Name=curcl

// ***** VDMTOOLS START Name=errorLog KEEP=NO
  private RTERR errorLog = null;
// ***** VDMTOOLS END Name=errorLog


// ***** VDMTOOLS START Name=vdm_init_Eval KEEP=NO
  private void vdm_init_Eval () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_Eval


// ***** VDMTOOLS START Name=Eval KEEP=NO
  public Eval () throws CGException {
    vdm_init_Eval();
  }
// ***** VDMTOOLS END Name=Eval


// ***** VDMTOOLS START Name=Eval#3|String|DEF|RTERR KEEP=NO
  public Eval (final String clid, final DEF defs, final RTERR errLog) throws CGException {

    vdm_init_Eval();
    {

      errorLog = (RTERR) UTIL.clone(errLog);
      curcl = UTIL.ConvertToString(UTIL.clone(clid));
      specdefs = (DEF) UTIL.clone(defs);
    }
  }
// ***** VDMTOOLS END Name=Eval#3|String|DEF|RTERR


// ***** VDMTOOLS START Name=evaluateExpression#2|IOmlExpression|HashMap KEEP=NO
  public SEM.VAL evaluateExpression (final IOmlExpression expr, final HashMap cxt) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSymbolicLiteralExpression))) 
        succ_3 = false;
      if (succ_3) 
        return (SEM.VAL) (SEM.VAL) getValueOfSymLit((IOmlSymbolicLiteralExpression) expr);
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSequenceEnumeration))) 
          succ_3 = false;
        if (succ_3) 
          return (SEM.VAL) (SEM.VAL) evaluateSeqEnumeration((IOmlSequenceEnumeration) expr, cxt);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSequenceComprehension))) 
            succ_3 = false;
          if (succ_3) 
            return (SEM.VAL) (SEM.VAL) evaluateSeqComprehension((IOmlSequenceComprehension) expr, cxt);
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSubsequenceExpression))) 
              succ_3 = false;
            if (succ_3) 
              return (SEM.VAL) (SEM.VAL) evaluateSubsequenceExpression((IOmlSubsequenceExpression) expr, cxt);
            else {

              succ_3 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSetEnumeration))) 
                succ_3 = false;
              if (succ_3) 
                return (SEM.VAL) (SEM.VAL) evaluateSetEnumeration((IOmlSetEnumeration) expr, cxt);
              else {

                succ_3 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlMapEnumeration))) 
                  succ_3 = false;
                if (succ_3) 
                  return (SEM.VAL) (SEM.VAL) evaluateMapEnumeration((IOmlMapEnumeration) expr, cxt);
                else {

                  succ_3 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSetRangeExpression))) 
                    succ_3 = false;
                  if (succ_3) 
                    return (SEM.VAL) (SEM.VAL) evaluateSetRange((IOmlSetRangeExpression) expr, cxt);
                  else {

                    succ_3 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlName))) 
                      succ_3 = false;
                    if (succ_3) 
                      return (SEM.VAL) (SEM.VAL) evaluateName((IOmlName) expr, cxt);
                    else {

                      succ_3 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlBinaryExpression))) 
                        succ_3 = false;
                      if (succ_3) 
                        return (SEM.VAL) (SEM.VAL) evaluateBinary((IOmlBinaryExpression) expr, cxt);
                      else {

                        succ_3 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlUnaryExpression))) 
                          succ_3 = false;
                        if (succ_3) 
                          return (SEM.VAL) (SEM.VAL) evaluateUnary((IOmlUnaryExpression) expr, cxt);
                        else {

                          succ_3 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlBracketedExpression))) 
                            succ_3 = false;
                          if (succ_3) 
                            return (SEM.VAL) (SEM.VAL) evaluateBracketedExpression((IOmlBracketedExpression) expr, cxt);
                          else {

                            succ_3 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlSetComprehension))) 
                              succ_3 = false;
                            if (succ_3) 
                              return (SEM.VAL) (SEM.VAL) evaluateSetComprehension((IOmlSetComprehension) expr, cxt);
                            else {

                              succ_3 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlMapComprehension))) 
                                succ_3 = false;
                              if (succ_3) 
                                return (SEM.VAL) (SEM.VAL) evaluateMapComprehension((IOmlMapComprehension) expr, cxt);
                              else {

                                succ_3 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlNewExpression))) 
                                  succ_3 = false;
                                if (succ_3) 
                                  return (SEM.VAL) (SEM.VAL) evaluateNewExpression((IOmlNewExpression) expr, cxt);
                                else {

                                  succ_3 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlIfExpression))) 
                                    succ_3 = false;
                                  if (succ_3) 
                                    return (SEM.VAL) (SEM.VAL) evaluateIfExpression((IOmlIfExpression) expr, cxt);
                                  else {

                                    succ_3 = true;
                                    if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlLetExpression))) 
                                      succ_3 = false;
                                    if (succ_3) 
                                      return (SEM.VAL) (SEM.VAL) evaluateLetExpression((IOmlLetExpression) expr, cxt);
                                    else {

                                      succ_3 = true;
                                      if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlLetBeExpression))) 
                                        succ_3 = false;
                                      if (succ_3) 
                                        return (SEM.VAL) (SEM.VAL) evaluateLetBeExpression((IOmlLetBeExpression) expr, cxt);
                                      else {

                                        succ_3 = true;
                                        if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlFieldSelect))) 
                                          succ_3 = false;
                                        if (succ_3) 
                                          return (SEM.VAL) (SEM.VAL) evaluateFieldSelect((IOmlFieldSelect) expr, cxt);
                                        else {

                                          succ_3 = true;
                                          if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlRecordConstructor))) 
                                            succ_3 = false;
                                          if (succ_3) 
                                            return (SEM.VAL) (SEM.VAL) evaluateRecordConstructor((IOmlRecordConstructor) expr, cxt);
                                          else {

                                            succ_3 = true;
                                            if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlTupleConstructor))) 
                                              succ_3 = false;
                                            if (succ_3) 
                                              return (SEM.VAL) (SEM.VAL) evaluateTupleConstructor((IOmlTupleConstructor) expr, cxt);
                                            else {

                                              succ_3 = true;
                                              if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlApplyExpression))) 
                                                succ_3 = false;
                                              if (succ_3) 
                                                return (SEM.VAL) (SEM.VAL) evaluateApplyExpression((IOmlApplyExpression) expr, cxt);
                                              else {

                                                succ_3 = true;
                                                if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlTokenExpression))) 
                                                  succ_3 = false;
                                                if (succ_3) 
                                                  return (SEM.VAL) (SEM.VAL) evaluateTokenExpression((IOmlTokenExpression) expr, cxt);
                                                else {

                                                  succ_3 = true;
                                                  if (!UTIL.equals(new Boolean(true), new Boolean(expr instanceof IOmlMuExpression))) 
                                                    succ_3 = false;
                                                  if (succ_3) 
                                                    return (SEM.VAL) (SEM.VAL) evaluateMuExpression((IOmlMuExpression) expr, cxt);
                                                  else {

                                                    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=evaluateExpression#2|IOmlExpression|HashMap


// ***** VDMTOOLS START Name=evaluateSeqEnumeration#2|IOmlSequenceEnumeration|HashMap KEEP=NO
  public SEM.VAL evaluateSeqEnumeration (final IOmlSequenceEnumeration expr, final HashMap cxt) throws CGException {

    Vector s = null;
    s = expr.getExpressionList();
    SEM.SEQ rexpr_5 = null;
    Vector tmpVar_6 = null;
    {

      Vector res_l_7 = new Vector();
      HashSet resBind_s_9 = new HashSet();
      HashSet riseq_13 = new HashSet();
      int max_14 = s.size();
      for (int i_15 = 1; i_15 <= max_14; i_15++) 
        riseq_13.add(new Long(i_15));
      resBind_s_9 = riseq_13;
      Vector bind_l_8 = null;
      bind_l_8 = UTIL.Sort(resBind_s_9);
      Long i = null;
      for (Iterator enm_22 = bind_l_8.iterator(); enm_22.hasNext(); ) {

        Long e_11 = UTIL.NumberToLong(enm_22.next());
        i = e_11;
        SEM.VAL reselem_16 = null;
        IOmlExpression par_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_17 = (IOmlExpression) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_16 = (SEM.VAL) evaluateExpression((IOmlExpression) par_17, cxt);
        res_l_7.add(reselem_16);
      }
      tmpVar_6 = res_l_7;
    }
    rexpr_5 = new SEM.SEQ(tmpVar_6);
    return (SEM.VAL) rexpr_5;
  }
// ***** VDMTOOLS END Name=evaluateSeqEnumeration#2|IOmlSequenceEnumeration|HashMap


// ***** VDMTOOLS START Name=evaluateSeqComprehension#2|IOmlSequenceComprehension|HashMap KEEP=NO
  public SEM.VAL evaluateSeqComprehension (final IOmlSequenceComprehension expr, final HashMap cxt) throws CGException {

    IOmlExpression elem = null;
    elem = (IOmlExpression) expr.getExpression();
    IOmlSetBind tmpVal_5 = null;
    tmpVal_5 = (IOmlSetBind) expr.getSetBind();
    IOmlSetBind bind = null;
    bind = (IOmlSetBind) tmpVal_5;
    IOmlExpression pred = null;
    Boolean cond_8 = null;
    cond_8 = expr.hasGuard();
    if (cond_8.booleanValue()) 
      pred = (IOmlExpression) expr.getGuard();
    else 
      pred = null;
    Vector cxt_ul = evalBind((IOmlBind) bind, cxt);
    Boolean cond_12 = null;
    boolean tmpQuant_13 = true;
    {

      HashSet e1_set_42 = new HashSet(cxt_ul);
      HashMap cxt_1 = new HashMap();
      {
        for (Iterator enm_44 = e1_set_42.iterator(); enm_44.hasNext() && tmpQuant_13; ) {

          HashMap elem_43 = (HashMap) enm_44.next();
          cxt_1 = elem_43;
          Boolean pred_14 = null;
          Boolean var1_15 = null;
          boolean tmpQuant_16 = true;
          {

            HashSet e1_set_24 = new HashSet(cxt_ul);
            HashMap m = new HashMap();
            {
              for (Iterator enm_26 = e1_set_24.iterator(); enm_26.hasNext() && tmpQuant_16; ) {

                HashMap elem_25 = (HashMap) enm_26.next();
                m = elem_25;
                Boolean pred_17 = null;
                Long var1_18 = null;
                HashSet unArg_19 = new HashSet();
                unArg_19.clear();
                unArg_19.addAll(m.keySet());
                var1_18 = new Long(unArg_19.size());
                pred_17 = new Boolean(var1_18.intValue() == new Long(1).intValue());
                if (!pred_17.booleanValue()) 
                  tmpQuant_16 = false;
              }
            }
          }
          var1_15 = new Boolean(tmpQuant_16);
          {
            if ((pred_14 = var1_15).booleanValue()) {

              Boolean var2_27 = null;
              boolean tmpQuant_28 = true;
              {

                boolean succ_35 = true;
                HashSet e_set_36 = new HashSet();
                e_set_36.clear();
                e_set_36.addAll(cxt_1.values());
                SEM.VAL elem_1 = null;
                {
                  for (Iterator enm_39 = e_set_36.iterator(); enm_39.hasNext() && tmpQuant_28; ) {

                    Object elem_38 = enm_39.next();
                    succ_35 = true;
                    if (new Boolean((elem_38 instanceof Record)).booleanValue()) 
                      elem_1 = (SEM.VAL) elem_38;
                    else 
                      succ_35 = false;
                    if (succ_35) {

                      Boolean pred_29 = null;
                      Boolean var1_30 = null;
                      if ((elem_1 instanceof Record)) 
                        var1_30 = new Boolean(((Object) elem_1 instanceof SEM.NUM));
                      else 
                        var1_30 = new Boolean(false);
                      {
                        if ((pred_29 = var1_30).booleanValue()) {

                          Boolean var2_32 = null;
                          Object argTmp_33 = null;
                          if ((elem_1 instanceof Record)) 
                            if ((elem_1 instanceof SEM.TUPLE)) 
                              argTmp_33 = ((SEM.TUPLE) elem_1).v;
                            else 
                              if ((elem_1 instanceof SEM.TOKEN)) 
                                argTmp_33 = ((SEM.TOKEN) elem_1).v;
                              else 
                                if ((elem_1 instanceof SEM.QUOTE)) 
                                  argTmp_33 = UTIL.ConvertToList(((SEM.QUOTE) elem_1).v);
                                else 
                                  if ((elem_1 instanceof SEM.CHAR)) 
                                    argTmp_33 = ((SEM.CHAR) elem_1).v;
                                  else 
                                    if ((elem_1 instanceof SEM.BOOL)) 
                                      argTmp_33 = ((SEM.BOOL) elem_1).v;
                                    else 
                                      if ((elem_1 instanceof SEM.SET)) 
                                        argTmp_33 = ((SEM.SET) elem_1).v;
                                      else 
                                        if ((elem_1 instanceof SEM.SEQ)) 
                                          argTmp_33 = ((SEM.SEQ) elem_1).v;
                                        else 
                                          if ((elem_1 instanceof SEM.REC)) 
                                            argTmp_33 = ((SEM.REC) elem_1).v;
                                          else 
                                            if ((elem_1 instanceof SEM.NUM)) 
                                              argTmp_33 = ((SEM.NUM) elem_1).v;
                                            else 
                                              argTmp_33 = ((SEM.MAP) elem_1).v;
                          else 
                            UTIL.RunTime("Run-Time Error:A record was expected");
                          var2_32 = new Boolean(UTIL.IsInteger(argTmp_33) && ((Number) argTmp_33).intValue() >= 0);
                          pred_29 = var2_32;
                        }
                      }
                      if (!pred_29.booleanValue()) 
                        tmpQuant_28 = false;
                    }
                  }
                }
              }
              var2_27 = new Boolean(tmpQuant_28);
              pred_14 = var2_27;
            }
          }
          if (!pred_14.booleanValue()) 
            tmpQuant_13 = false;
        }
      }
    }
    cond_12 = new Boolean(tmpQuant_13);
    if (cond_12.booleanValue()) {

      boolean succ_50;
      HashSet n_us = new HashSet();
      HashSet res_s_52 = new HashSet();
      {

        boolean succ_55 = true;
        HashSet e_set_56 = new HashSet();
        HashSet unArg_57 = new HashSet();
        HashSet res_s_58 = new HashSet();
        {

          HashSet e1_set_63 = new HashSet(cxt_ul);
          HashMap m = new HashMap();
          {
            for (Iterator enm_65 = e1_set_63.iterator(); enm_65.hasNext(); ) {

              HashMap elem_64 = (HashMap) enm_65.next();
              m = elem_64;
              HashSet res_s_59 = new HashSet();
              res_s_59.clear();
              res_s_59.addAll(m.values());
              res_s_58.add(res_s_59);
            }
          }
        }
        unArg_57 = res_s_58;
        HashSet rduset_66 = new HashSet();
        for (Iterator enm_68 = unArg_57.iterator(); enm_68.hasNext(); ) {

          HashSet e_67 = (HashSet) enm_68.next();
          rduset_66.addAll(e_67);
        }
        e_set_56 = rduset_66;
        SEM.VAL val = null;
        {
          for (Iterator enm_70 = e_set_56.iterator(); enm_70.hasNext(); ) {

            Object elem_69 = enm_70.next();
            succ_55 = true;
            if (new Boolean((elem_69 instanceof Record)).booleanValue()) 
              val = (SEM.VAL) elem_69;
            else 
              succ_55 = false;
            if (succ_55) {

              Object res_s_53 = null;
              if ((val instanceof Record)) 
                if ((val instanceof SEM.TUPLE)) 
                  res_s_53 = ((SEM.TUPLE) val).v;
                else 
                  if ((val instanceof SEM.TOKEN)) 
                    res_s_53 = ((SEM.TOKEN) val).v;
                  else 
                    if ((val instanceof SEM.QUOTE)) 
                      res_s_53 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
                    else 
                      if ((val instanceof SEM.CHAR)) 
                        res_s_53 = ((SEM.CHAR) val).v;
                      else 
                        if ((val instanceof SEM.BOOL)) 
                          res_s_53 = ((SEM.BOOL) val).v;
                        else 
                          if ((val instanceof SEM.SET)) 
                            res_s_53 = ((SEM.SET) val).v;
                          else 
                            if ((val instanceof SEM.SEQ)) 
                              res_s_53 = ((SEM.SEQ) val).v;
                            else 
                              if ((val instanceof SEM.REC)) 
                                res_s_53 = ((SEM.REC) val).v;
                              else 
                                if ((val instanceof SEM.NUM)) 
                                  res_s_53 = ((SEM.NUM) val).v;
                                else 
                                  res_s_53 = ((SEM.MAP) val).v;
              else 
                UTIL.RunTime("Run-Time Error:A record was expected");
              res_s_52.add(res_s_53);
            }
          }
        }
      }
      n_us = res_s_52;
      HashSet tmpVal_71 = new HashSet();
      {

        HashSet tmpSet_72 = new HashSet();
        HashSet set_77 = new HashSet();
        Enumeration enm_78 = cxt_ul.elements();
        while ( enm_78.hasMoreElements())
          set_77.add(enm_78.nextElement());
        tmpSet_72 = set_77;
        HashMap m = new HashMap();
        boolean succ_74 = false;
        for (Iterator enm_79 = tmpSet_72.iterator(); enm_79.hasNext() && !succ_74; ) {

          HashMap tmpElem_75 = (HashMap) enm_79.next();
          succ_74 = true;
          m = tmpElem_75;
        }
        if (!succ_74) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        tmpVal_71.clear();
        tmpVal_71.addAll(m.keySet());
      }
      String id = null;
      succ_50 = true;
      HashSet succSet_86 = new HashSet();
      if ((tmpVal_71 instanceof HashSet)) {

        HashSet tmpvarExpr_85 = (HashSet) tmpVal_71;
        if (1 == tmpvarExpr_85.size()) {

          Vector valSeq_81 = new Vector();
          for (Iterator enm_90 = tmpvarExpr_85.iterator(); enm_90.hasNext(); ) {

            String e_89 = UTIL.ConvertToString(enm_90.next());
            valSeq_81.add(e_89);
          }
          HashSet permSL_82 = UTIL.Permute(valSeq_81);
          for (Iterator enm_91 = permSL_82.iterator(); enm_91.hasNext(); ) {

            Vector perm_83 = (Vector) UTIL.ConvertToList(enm_91.next());
            boolean succ_set_v_84 = false;
            if (succ_set_v_84 = (1 == perm_83.size())) 
              id = UTIL.ConvertToString(perm_83.get(0));
            if (succ_set_v_84) 
              succSet_86.add(perm_83);
            if (succ_set_v_84) 
              break;
          }
        }
      }
      if (!succSet_86.isEmpty()) {

        succ_50 = true;
        Vector succElem_87 = (Vector) succSet_86.iterator().next();
        boolean succRes_v_88 = false;
        if (succRes_v_88 = (1 == succElem_87.size())) 
          id = UTIL.ConvertToString(succElem_87.get(0));
      }
      else 
        succ_50 = false;
      if (!succ_50) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      SEM.SEQ rexpr_92 = null;
      Vector tmpVar_93 = null;
      {

        Vector res_l_94 = new Vector();
        HashSet resBind_s_96 = new HashSet();
        resBind_s_96 = n_us;
        Vector bind_l_95 = null;
        bind_l_95 = UTIL.Sort(resBind_s_96);
        Long i = null;
        for (Iterator enm_111 = bind_l_95.iterator(); enm_111.hasNext(); ) {

          Long e_98 = UTIL.NumberToLong(enm_111.next());
          i = e_98;
          SEM.VAL reselem_99 = null;
          {

            HashMap cxt2 = new HashMap();
            HashMap modmap_102 = new HashMap();
            SEM.NUM tmpVar2_106 = null;
            tmpVar2_106 = new SEM.NUM(UTIL.NumberToReal(i));
            modmap_102 = new HashMap();
            modmap_102.put(id, tmpVar2_106);
            cxt2 = new HashMap(cxt);
            cxt2.putAll(modmap_102);
            reselem_99 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) elem, cxt2);
          }
          res_l_94.add(reselem_99);
        }
        tmpVar_93 = res_l_94;
      }
      rexpr_92 = new SEM.SEQ(tmpVar_93);
      return (SEM.VAL) rexpr_92;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.SEQ rexpr_48 = null;
      rexpr_48 = new SEM.SEQ(new Vector());
      return (SEM.VAL) rexpr_48;
    }
  }
// ***** VDMTOOLS END Name=evaluateSeqComprehension#2|IOmlSequenceComprehension|HashMap


// ***** VDMTOOLS START Name=evaluateSubsequenceExpression#2|IOmlSubsequenceExpression|HashMap KEEP=NO
  public SEM.VAL evaluateSubsequenceExpression (final IOmlSubsequenceExpression expr, final HashMap cxt) throws CGException {

    IOmlExpression sub = null;
    sub = (IOmlExpression) expr.getExpression();
    IOmlExpression low = null;
    low = (IOmlExpression) expr.getLower();
    IOmlExpression up = null;
    up = (IOmlExpression) expr.getUpper();
    SEM.VAL val = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) sub, cxt);
    SEM.VAL tmpVal_10 = null;
    tmpVal_10 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) low, cxt);
    SEM.VAL l_uv = null;
    l_uv = (SEM.VAL) tmpVal_10;
    SEM.VAL u_uv = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) up, cxt);
    Boolean cond_16 = null;
    Boolean var1_17 = null;
    if ((l_uv instanceof Record)) 
      var1_17 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_17 = new Boolean(false);
    {
      if ((cond_16 = var1_17).booleanValue()) {

        Boolean var2_19 = null;
        if ((u_uv instanceof Record)) 
          var2_19 = new Boolean(((Object) u_uv instanceof SEM.NUM));
        else 
          var2_19 = new Boolean(false);
        cond_16 = var2_19;
      }
    }
    if (cond_16.booleanValue()) {

      Boolean cond_26 = null;
      if ((val instanceof Record)) 
        cond_26 = new Boolean(((Object) val instanceof SEM.SEQ));
      else 
        cond_26 = new Boolean(false);
      if (cond_26.booleanValue()) {

        SEM.SEQ rexpr_33 = null;
        Vector tmpVar_34 = null;
        Object tmpSeq_42 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            tmpSeq_42 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              tmpSeq_42 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                tmpSeq_42 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  tmpSeq_42 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    tmpSeq_42 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      tmpSeq_42 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        tmpSeq_42 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          tmpSeq_42 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            tmpSeq_42 = ((SEM.NUM) val).v;
                          else 
                            tmpSeq_42 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        if (!(tmpSeq_42 instanceof List)) 
          UTIL.RunTime("Run-Time Error:A sequence was expected in subsequence expression");
        Object n1_44 = null;
        if ((l_uv instanceof Record)) 
          if ((l_uv instanceof SEM.TUPLE)) 
            n1_44 = ((SEM.TUPLE) l_uv).v;
          else 
            if ((l_uv instanceof SEM.TOKEN)) 
              n1_44 = ((SEM.TOKEN) l_uv).v;
            else 
              if ((l_uv instanceof SEM.QUOTE)) 
                n1_44 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
              else 
                if ((l_uv instanceof SEM.CHAR)) 
                  n1_44 = ((SEM.CHAR) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.BOOL)) 
                    n1_44 = ((SEM.BOOL) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SET)) 
                      n1_44 = ((SEM.SET) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.SEQ)) 
                        n1_44 = ((SEM.SEQ) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.REC)) 
                          n1_44 = ((SEM.REC) l_uv).v;
                        else 
                          if ((l_uv instanceof SEM.NUM)) 
                            n1_44 = ((SEM.NUM) l_uv).v;
                          else 
                            n1_44 = ((SEM.MAP) l_uv).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        Object n2_46 = null;
        if ((u_uv instanceof Record)) 
          if ((u_uv instanceof SEM.TUPLE)) 
            n2_46 = ((SEM.TUPLE) u_uv).v;
          else 
            if ((u_uv instanceof SEM.TOKEN)) 
              n2_46 = ((SEM.TOKEN) u_uv).v;
            else 
              if ((u_uv instanceof SEM.QUOTE)) 
                n2_46 = UTIL.ConvertToList(((SEM.QUOTE) u_uv).v);
              else 
                if ((u_uv instanceof SEM.CHAR)) 
                  n2_46 = ((SEM.CHAR) u_uv).v;
                else 
                  if ((u_uv instanceof SEM.BOOL)) 
                    n2_46 = ((SEM.BOOL) u_uv).v;
                  else 
                    if ((u_uv instanceof SEM.SET)) 
                      n2_46 = ((SEM.SET) u_uv).v;
                    else 
                      if ((u_uv instanceof SEM.SEQ)) 
                        n2_46 = ((SEM.SEQ) u_uv).v;
                      else 
                        if ((u_uv instanceof SEM.REC)) 
                          n2_46 = ((SEM.REC) u_uv).v;
                        else 
                          if ((u_uv instanceof SEM.NUM)) 
                            n2_46 = ((SEM.NUM) u_uv).v;
                          else 
                            n2_46 = ((SEM.MAP) u_uv).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        int from_38 = (int) Math.max(Math.ceil(UTIL.NumberToReal(n1_44).doubleValue()) - 1, 0);
        int to_39 = (int) Math.min(Math.floor(UTIL.NumberToReal(n2_46).doubleValue()), ((Vector) tmpSeq_42).size());
        if (from_38 > to_39) 
          tmpVar_34 = new Vector();
        else 
          tmpVar_34 = new Vector(((Vector) tmpSeq_42).subList(from_38, to_39));
        rexpr_33 = new SEM.SEQ(tmpVar_34);
        return (SEM.VAL) rexpr_33;
      }
      else {

        errorLog.ReportError(sub, UTIL.ConvertToString(RTERR.SEQ_uEXPECTED));
        SEM.SEQ rexpr_31 = null;
        rexpr_31 = new SEM.SEQ(new Vector());
        return (SEM.VAL) rexpr_31;
      }
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.SEQ rexpr_24 = null;
      rexpr_24 = new SEM.SEQ(new Vector());
      return (SEM.VAL) rexpr_24;
    }
  }
// ***** VDMTOOLS END Name=evaluateSubsequenceExpression#2|IOmlSubsequenceExpression|HashMap


// ***** VDMTOOLS START Name=evaluateBracketedExpression#2|IOmlBracketedExpression|HashMap KEEP=NO
  public SEM.VAL evaluateBracketedExpression (final IOmlBracketedExpression expr, final HashMap cxt) throws CGException {

    IOmlExpression e = null;
    e = (IOmlExpression) expr.getExpression();
    return (SEM.VAL) evaluateExpression((IOmlExpression) e, cxt);
  }
// ***** VDMTOOLS END Name=evaluateBracketedExpression#2|IOmlBracketedExpression|HashMap


// ***** VDMTOOLS START Name=evaluateSetEnumeration#2|IOmlSetEnumeration|HashMap KEEP=NO
  public SEM.VAL evaluateSetEnumeration (final IOmlSetEnumeration expr, final HashMap cxt) throws CGException {

    Vector s = null;
    s = expr.getExpressionList();
    SEM.SET rexpr_5 = null;
    HashSet tmpVar_6 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e_set_14 = new HashSet();
      HashSet riseq_16 = new HashSet();
      int max_17 = s.size();
      for (int i_18 = 1; i_18 <= max_17; i_18++) 
        riseq_16.add(new Long(i_18));
      e_set_14 = riseq_16;
      Long i = null;
      {
        for (Iterator enm_20 = e_set_14.iterator(); enm_20.hasNext(); ) {

          Long elem_19 = UTIL.NumberToLong(enm_20.next());
          i = elem_19;
          SEM.VAL res_s_8 = null;
          IOmlExpression par_9 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            par_9 = (IOmlExpression) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_s_8 = (SEM.VAL) evaluateExpression((IOmlExpression) par_9, cxt);
          res_s_7.add(res_s_8);
        }
      }
    }
    tmpVar_6 = res_s_7;
    rexpr_5 = new SEM.SET(tmpVar_6);
    return (SEM.VAL) rexpr_5;
  }
// ***** VDMTOOLS END Name=evaluateSetEnumeration#2|IOmlSetEnumeration|HashMap


// ***** VDMTOOLS START Name=evaluateMapEnumeration#2|IOmlMapEnumeration|HashMap KEEP=NO
  public SEM.VAL evaluateMapEnumeration (final IOmlMapEnumeration expr, final HashMap cxt) throws CGException {

    Vector s = null;
    s = expr.getMapletList();
    SEM.MAP rexpr_5 = null;
    HashMap tmpVar_6 = new HashMap();
    HashMap res_m_7 = new HashMap();
    {

      HashSet e_set_21 = new HashSet();
      HashSet riseq_23 = new HashSet();
      int max_24 = s.size();
      for (int i_25 = 1; i_25 <= max_24; i_25++) 
        riseq_23.add(new Long(i_25));
      e_set_21 = riseq_23;
      Long i = null;
      {
        for (Iterator enm_27 = e_set_21.iterator(); enm_27.hasNext(); ) {

          Long elem_26 = UTIL.NumberToLong(enm_27.next());
          i = elem_26;
          SEM.VAL md_8 = null;
          IOmlExpression par_9 = null;
          IOmlMaplet obj_10 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            obj_10 = (IOmlMaplet) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          par_9 = (IOmlExpression) obj_10.getDomExpression();
          md_8 = (SEM.VAL) evaluateExpression((IOmlExpression) par_9, cxt);
          SEM.VAL mr_14 = null;
          IOmlExpression par_15 = null;
          IOmlMaplet obj_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            obj_16 = (IOmlMaplet) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          par_15 = (IOmlExpression) obj_16.getRngExpression();
          mr_14 = (SEM.VAL) evaluateExpression((IOmlExpression) par_15, cxt);
          res_m_7.put(md_8, mr_14);
        }
      }
    }
    tmpVar_6 = res_m_7;
    rexpr_5 = new SEM.MAP(tmpVar_6);
    return (SEM.VAL) rexpr_5;
  }
// ***** VDMTOOLS END Name=evaluateMapEnumeration#2|IOmlMapEnumeration|HashMap


// ***** VDMTOOLS START Name=evaluateSetRange#2|IOmlSetRangeExpression|HashMap KEEP=NO
  public SEM.VAL evaluateSetRange (final IOmlSetRangeExpression expr, final HashMap cxt) throws CGException {

    SEM.VAL l = null;
    IOmlExpression par_5 = null;
    par_5 = (IOmlExpression) expr.getLower();
    l = (SEM.VAL) evaluateExpression((IOmlExpression) par_5, cxt);
    SEM.VAL u = null;
    IOmlExpression par_8 = null;
    par_8 = (IOmlExpression) expr.getUpper();
    u = (SEM.VAL) evaluateExpression((IOmlExpression) par_8, cxt);
    HashSet s = new HashSet();
    Boolean cond_12 = null;
    Boolean var1_13 = null;
    if ((l instanceof Record)) 
      var1_13 = new Boolean(((Object) l instanceof SEM.NUM));
    else 
      var1_13 = new Boolean(false);
    {
      if ((cond_12 = var1_13).booleanValue()) {

        Boolean var2_15 = null;
        if ((u instanceof Record)) 
          var2_15 = new Boolean(((Object) u instanceof SEM.NUM));
        else 
          var2_15 = new Boolean(false);
        cond_12 = var2_15;
      }
    }
    if (cond_12.booleanValue()) {

      s = new HashSet();
      Object lb_17 = null;
      if ((l instanceof Record)) 
        if ((l instanceof SEM.TUPLE)) 
          lb_17 = ((SEM.TUPLE) l).v;
        else 
          if ((l instanceof SEM.TOKEN)) 
            lb_17 = ((SEM.TOKEN) l).v;
          else 
            if ((l instanceof SEM.QUOTE)) 
              lb_17 = UTIL.ConvertToList(((SEM.QUOTE) l).v);
            else 
              if ((l instanceof SEM.CHAR)) 
                lb_17 = ((SEM.CHAR) l).v;
              else 
                if ((l instanceof SEM.BOOL)) 
                  lb_17 = ((SEM.BOOL) l).v;
                else 
                  if ((l instanceof SEM.SET)) 
                    lb_17 = ((SEM.SET) l).v;
                  else 
                    if ((l instanceof SEM.SEQ)) 
                      lb_17 = ((SEM.SEQ) l).v;
                    else 
                      if ((l instanceof SEM.REC)) 
                        lb_17 = ((SEM.REC) l).v;
                      else 
                        if ((l instanceof SEM.NUM)) 
                          lb_17 = ((SEM.NUM) l).v;
                        else 
                          lb_17 = ((SEM.MAP) l).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object ub_19 = null;
      if ((u instanceof Record)) 
        if ((u instanceof SEM.TUPLE)) 
          ub_19 = ((SEM.TUPLE) u).v;
        else 
          if ((u instanceof SEM.TOKEN)) 
            ub_19 = ((SEM.TOKEN) u).v;
          else 
            if ((u instanceof SEM.QUOTE)) 
              ub_19 = UTIL.ConvertToList(((SEM.QUOTE) u).v);
            else 
              if ((u instanceof SEM.CHAR)) 
                ub_19 = ((SEM.CHAR) u).v;
              else 
                if ((u instanceof SEM.BOOL)) 
                  ub_19 = ((SEM.BOOL) u).v;
                else 
                  if ((u instanceof SEM.SET)) 
                    ub_19 = ((SEM.SET) u).v;
                  else 
                    if ((u instanceof SEM.SEQ)) 
                      ub_19 = ((SEM.SEQ) u).v;
                    else 
                      if ((u instanceof SEM.REC)) 
                        ub_19 = ((SEM.REC) u).v;
                      else 
                        if ((u instanceof SEM.NUM)) 
                          ub_19 = ((SEM.NUM) u).v;
                        else 
                          ub_19 = ((SEM.MAP) u).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!UTIL.IsInteger(lb_17)) 
        UTIL.RunTime("Run-Time Error:Lower bound was not an integer in set range expression");
      if (!UTIL.IsInteger(ub_19)) 
        UTIL.RunTime("Run-Time Error:Upper bound was not an integer in set range expression");
      int ubi_21 = UTIL.NumberToLong(ub_19).intValue();
      for (int count_22 = UTIL.NumberToLong(lb_17).intValue(); count_22 <= ubi_21; count_22++) 
        s.add(new Long(count_22));
    }
    else 
      s = new HashSet();
    {

      Boolean cond_23 = null;
      Boolean unArg_24 = null;
      if ((l instanceof Record)) 
        unArg_24 = new Boolean(((Object) l instanceof SEM.NUM));
      else 
        unArg_24 = new Boolean(false);
      cond_23 = new Boolean(!unArg_24.booleanValue());
      if (cond_23.booleanValue()) 
        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.LOWER_uBOUND_uNOT_uA_uNUMBER));
      Boolean cond_29 = null;
      Boolean unArg_30 = null;
      if ((u instanceof Record)) 
        unArg_30 = new Boolean(((Object) u instanceof SEM.NUM));
      else 
        unArg_30 = new Boolean(false);
      cond_29 = new Boolean(!unArg_30.booleanValue());
      if (cond_29.booleanValue()) 
        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.UPPER_uBOUND_uNOT_uA_uNUMBER));
      SEM.SET rexpr_35 = null;
      HashSet tmpVar_36 = new HashSet();
      HashSet res_s_37 = new HashSet();
      {

        Long i = null;
        {
          for (Iterator enm_43 = s.iterator(); enm_43.hasNext(); ) {

            Long elem_42 = UTIL.NumberToLong(enm_43.next());
            i = elem_42;
            SEM.NUM res_s_38 = null;
            res_s_38 = new SEM.NUM(UTIL.NumberToReal(i));
            res_s_37.add(res_s_38);
          }
        }
      }
      tmpVar_36 = res_s_37;
      rexpr_35 = new SEM.SET(tmpVar_36);
      return (SEM.VAL) rexpr_35;
    }
  }
// ***** VDMTOOLS END Name=evaluateSetRange#2|IOmlSetRangeExpression|HashMap


// ***** VDMTOOLS START Name=evaluateSetComprehension#2|IOmlSetComprehension|HashMap KEEP=NO
  public SEM.VAL evaluateSetComprehension (final IOmlSetComprehension expr, final HashMap cxt) throws CGException {

    IOmlExpression elem = null;
    elem = (IOmlExpression) expr.getExpression();
    Vector bind_ul = null;
    bind_ul = expr.getBindList();
    IOmlExpression guard = null;
    Boolean cond_8 = null;
    cond_8 = expr.hasGuard();
    if (cond_8.booleanValue()) 
      guard = (IOmlExpression) expr.getGuard();
    else 
      guard = null;
    Vector cxt_ul = evalBindList(bind_ul, cxt);
    SEM.SET rexpr_12 = null;
    HashSet tmpVar_13 = new HashSet();
    HashSet var1_14 = new HashSet();
    HashSet res_s_15 = new HashSet();
    {

      HashSet e1_set_37 = new HashSet(cxt_ul);
      HashMap cxt2 = new HashMap();
      {
        for (Iterator enm_39 = e1_set_37.iterator(); enm_39.hasNext(); ) {

          HashMap elem_38 = (HashMap) enm_39.next();
          cxt2 = elem_38;
          Object res_s_16 = null;
          {

            HashMap cxt3 = new HashMap();
            cxt3 = new HashMap(cxt);
            cxt3.putAll(cxt2);
            Boolean cond_23 = null;
            {
              if (!(cond_23 = new Boolean(UTIL.equals(guard, null))).booleanValue()) {

                Boolean var2_27 = null;
                SEM.BOOL var2_31 = null;
                var2_31 = new SEM.BOOL(new Boolean(true));
                var2_27 = new Boolean(UTIL.equals((SEM.VAL) evaluateExpression((IOmlExpression) guard, cxt3), var2_31));
                cond_23 = var2_27;
              }
            }
            if (cond_23.booleanValue()) 
              res_s_16 = evaluateExpression((IOmlExpression) elem, cxt3);
            else 
              res_s_16 = new quotes.NoVAL();
          }
          res_s_15.add(res_s_16);
        }
      }
    }
    var1_14 = res_s_15;
    HashSet var2_40 = new HashSet();
    var2_40 = new HashSet();
    var2_40.add(new quotes.NoVAL());
    tmpVar_13 = (HashSet) var1_14.clone();
    tmpVar_13.removeAll(var2_40);
    rexpr_12 = new SEM.SET(tmpVar_13);
    return (SEM.VAL) rexpr_12;
  }
// ***** VDMTOOLS END Name=evaluateSetComprehension#2|IOmlSetComprehension|HashMap


// ***** VDMTOOLS START Name=evaluateMapComprehension#2|IOmlMapComprehension|HashMap KEEP=NO
  public SEM.VAL evaluateMapComprehension (final IOmlMapComprehension expr, final HashMap cxt) throws CGException {

    IOmlMaplet maplet = null;
    maplet = (IOmlMaplet) expr.getExpression();
    Vector bind_ul = null;
    bind_ul = expr.getBindList();
    IOmlExpression guard = null;
    Boolean cond_8 = null;
    cond_8 = expr.hasGuard();
    if (cond_8.booleanValue()) 
      guard = (IOmlExpression) expr.getGuard();
    else 
      guard = null;
    Vector cxt_ul = evalBindList(bind_ul, cxt);
    {

      HashSet m_us = new HashSet();
      HashSet res_s_14 = new HashSet();
      {

        HashSet e1_set_45 = new HashSet(cxt_ul);
        HashMap cxt2 = new HashMap();
        {
          for (Iterator enm_47 = e1_set_45.iterator(); enm_47.hasNext(); ) {

            HashMap elem_46 = (HashMap) enm_47.next();
            cxt2 = elem_46;
            HashMap res_s_15 = new HashMap();
            {

              HashMap cxt3 = new HashMap();
              cxt3 = new HashMap(cxt);
              cxt3.putAll(cxt2);
              Boolean cond_22 = null;
              {
                if (!(cond_22 = new Boolean(UTIL.equals(guard, null))).booleanValue()) {

                  Boolean var2_26 = null;
                  SEM.BOOL var2_30 = null;
                  var2_30 = new SEM.BOOL(new Boolean(true));
                  var2_26 = new Boolean(UTIL.equals((SEM.VAL) evaluateExpression((IOmlExpression) guard, cxt3), var2_30));
                  cond_22 = var2_26;
                }
              }
              if (cond_22.booleanValue()) {

                IOmlExpression dom_ue = null;
                dom_ue = (IOmlExpression) maplet.getDomExpression();
                IOmlExpression rng_ue = null;
                rng_ue = (IOmlExpression) maplet.getRngExpression();
                SEM.VAL dom_uv = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) dom_ue, cxt3);
                SEM.VAL rng_uv = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) rng_ue, cxt3);
                res_s_15 = new HashMap();
                res_s_15.put(dom_uv, rng_uv);
              }
              else 
                res_s_15 = new HashMap();
            }
            res_s_14.add(res_s_15);
          }
        }
      }
      m_us = res_s_14;
      Boolean cond_48 = null;
      boolean tmpQuant_49 = true;
      {

        HashMap x = new HashMap();
        HashMap y = new HashMap();
        HashSet e_set_75 = m_us;
        {
          for (Iterator enm_77 = e_set_75.iterator(); enm_77.hasNext() && tmpQuant_49; ) {

            HashMap elem_76 = (HashMap) enm_77.next();
            y = elem_76;
            for (Iterator enm_74 = m_us.iterator(); enm_74.hasNext() && tmpQuant_49; ) {

              HashMap elem_73 = (HashMap) enm_74.next();
              x = elem_73;
              Boolean pred_50 = null;
              if (new Boolean(!UTIL.equals(x, y)).booleanValue()) {

                Boolean var2_54 = null;
                boolean tmpQuant_55 = true;
                {

                  boolean succ_63 = true;
                  HashSet e_set_64 = new HashSet();
                  HashSet var1_65 = new HashSet();
                  var1_65.clear();
                  var1_65.addAll(x.keySet());
                  HashSet var2_67 = new HashSet();
                  var2_67.clear();
                  var2_67.addAll(y.keySet());
                  e_set_64 = (HashSet) var1_65.clone();
                  e_set_64.retainAll(var2_67);
                  SEM.VAL z = null;
                  {
                    for (Iterator enm_70 = e_set_64.iterator(); enm_70.hasNext() && tmpQuant_55; ) {

                      Object elem_69 = enm_70.next();
                      succ_63 = true;
                      if (new Boolean((elem_69 instanceof Record)).booleanValue()) 
                        z = (SEM.VAL) elem_69;
                      else 
                        succ_63 = false;
                      if (succ_63) {
                        if (!new Boolean(UTIL.equals((SEM.VAL) x.get(z), (SEM.VAL) y.get(z))).booleanValue()) 
                          tmpQuant_55 = false;
                      }
                    }
                  }
                }
                var2_54 = new Boolean(tmpQuant_55);
                pred_50 = var2_54;
              }
              else 
                pred_50 = new Boolean(true);
              if (!pred_50.booleanValue()) 
                tmpQuant_49 = false;
            }
          }
        }
      }
      cond_48 = new Boolean(tmpQuant_49);
      if (cond_48.booleanValue()) {

        SEM.MAP rexpr_83 = null;
        HashMap tmpVar_84 = new HashMap();
        HashMap rdmmap_86 = new HashMap();
        for (Iterator enm_93 = m_us.iterator(); enm_93.hasNext(); ) {

          HashMap e_87 = (HashMap) enm_93.next();
          HashSet eq_dom_89 = new HashSet();
          eq_dom_89.addAll(rdmmap_86.keySet());
          eq_dom_89.retainAll(e_87.keySet());
          boolean all_dup_eq_90 = true;
          for (Iterator enm_92 = eq_dom_89.iterator(); enm_92.hasNext() && all_dup_eq_90; ) {

            SEM.VAL d_91 = (SEM.VAL) enm_92.next();
            all_dup_eq_90 = ((SEM.VAL) rdmmap_86.get(d_91)).equals((SEM.VAL) e_87.get(d_91));
          }
          if (!all_dup_eq_90) 
            UTIL.RunTime("Run-Time Error:Duplicate entries for \'merge\' had different values");
          rdmmap_86.putAll(e_87);
        }
        tmpVar_84 = rdmmap_86;
        rexpr_83 = new SEM.MAP(tmpVar_84);
        return (SEM.VAL) rexpr_83;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.DUPLICATES_uNOT_uEQUAL));
        SEM.MAP rexpr_81 = null;
        rexpr_81 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_81;
      }
    }
  }
// ***** VDMTOOLS END Name=evaluateMapComprehension#2|IOmlMapComprehension|HashMap


// ***** VDMTOOLS START Name=evaluateBinary#2|IOmlBinaryExpression|HashMap KEEP=NO
  public SEM.VAL evaluateBinary (final IOmlBinaryExpression expr, final HashMap cxt) throws CGException {

    IOmlExpression l_uexpr = null;
    l_uexpr = (IOmlExpression) expr.getLhsExpression();
    IOmlBinaryOperator operat = null;
    operat = (IOmlBinaryOperator) expr.getOperator();
    IOmlExpression r_uexpr = null;
    r_uexpr = (IOmlExpression) expr.getRhsExpression();
    {

      SEM.VAL tmpVal_8 = null;
      tmpVal_8 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) l_uexpr, cxt);
      SEM.VAL l_uv = null;
      l_uv = (SEM.VAL) tmpVal_8;
      Long tmpVal_11 = null;
      tmpVal_11 = operat.getValue();
      Long op = null;
      op = tmpVal_11;
      Boolean cond_12 = null;
      {
        if ((cond_12 = new Boolean(op.intValue() == OmlBinaryOperatorQuotes.IQAND.intValue())).booleanValue()) {

          Boolean var2_16 = null;
          SEM.BOOL var2_18 = null;
          var2_18 = new SEM.BOOL(new Boolean(false));
          var2_16 = new Boolean(UTIL.equals(l_uv, var2_18));
          cond_12 = var2_16;
        }
      }
      if (cond_12.booleanValue()) {

        SEM.BOOL rexpr_48 = null;
        rexpr_48 = new SEM.BOOL(new Boolean(false));
        return (SEM.VAL) rexpr_48;
      }
      else {

        Boolean cond_29 = null;
        Boolean var1_30 = null;
        {
          if ((var1_30 = new Boolean(op.intValue() == OmlBinaryOperatorQuotes.IQOR.intValue())).booleanValue()) {

            Boolean var2_34 = null;
            SEM.BOOL var2_36 = null;
            var2_36 = new SEM.BOOL(new Boolean(true));
            var2_34 = new Boolean(UTIL.equals(l_uv, var2_36));
            var1_30 = var2_34;
          }
        }
        {
          if (!(cond_29 = var1_30).booleanValue()) {

            Boolean var2_38 = null;
            {
              if ((var2_38 = new Boolean(op.intValue() == OmlBinaryOperatorQuotes.IQIMPLY.intValue())).booleanValue()) {

                Boolean var2_42 = null;
                SEM.BOOL var2_44 = null;
                var2_44 = new SEM.BOOL(new Boolean(false));
                var2_42 = new Boolean(UTIL.equals(l_uv, var2_44));
                var2_38 = var2_42;
              }
            }
            cond_29 = var2_38;
          }
        }
        if (cond_29.booleanValue()) {

          SEM.BOOL rexpr_46 = null;
          rexpr_46 = new SEM.BOOL(new Boolean(true));
          return (SEM.VAL) rexpr_46;
        }
        else {

          SEM.VAL tmpVal_21 = null;
          tmpVal_21 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) r_uexpr, cxt);
          SEM.VAL r_uv = null;
          r_uv = (SEM.VAL) tmpVal_21;
          return (SEM.VAL) (SEM.VAL) BinOpApply((SEM.VAL) l_uv, op, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=evaluateBinary#2|IOmlBinaryExpression|HashMap


// ***** VDMTOOLS START Name=BinOpApply#4|Long|IOmlBinaryExpression KEEP=NO
  private SEM.VAL BinOpApply (final SEM.VAL l_uv, final Long op, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    SEM.VAL rexpr_5 = null;
    boolean succ_6 = true;
    {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMODIFY)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalModify((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQGE)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalGE((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQLT)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalLT((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQPSUBSET)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalPSubset((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMOD)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMod((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMAPDOMRESBY)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalDomResBy((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQINTER)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalInter((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQCOMP)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalComp((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMINUS)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMinus((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQREM)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalRem((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQAND)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalAnd((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQUNION)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalUnion((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQINSET)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalInSet((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQEQUIV)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalEquiv((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMAPRNGRESTO)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMapRngResTo((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQITERATE)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalIterate((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQSUBSET)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalSubset((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMAPRNGRESBY)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMapRngResBy((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQTUPSEL)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalTupSel((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQNOTINSET)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalNotInSet((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMULTIPLY)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMult((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQIMPLY)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalImply((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQOR)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalOr((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQGT)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalGt((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQPLUS)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalPlus((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMUNION)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMUnion((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQMAPDOMRESTO)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalMapDomResTo((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQEQ)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalEq((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQDIV)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalDiv((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQDIFFERENCE)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalDifference((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQCONC)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalConc((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQLE)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalLE((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQDIVIDE)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalDivide((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) {

      succ_6 = true;
      if (!UTIL.equals(op, OmlBinaryOperatorQuotes.IQNE)) 
        succ_6 = false;
      if (succ_6) 
        rexpr_5 = (SEM.VAL) (SEM.VAL) EvalNE((SEM.VAL) l_uv, (SEM.VAL) r_uv, (IOmlBinaryExpression) expr);
    }
    if (!succ_6) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return (SEM.VAL) rexpr_5;
  }
// ***** VDMTOOLS END Name=BinOpApply#4|Long|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalGE#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalGE (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Boolean((((Number) var1_16).doubleValue()) >= (((Number) var2_18).doubleValue()));
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalGE#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalModify#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalModify (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean unArg_5 = null;
    if ((r_uv instanceof Record)) 
      unArg_5 = new Boolean(((Object) r_uv instanceof SEM.MAP));
    else 
      unArg_5 = new Boolean(false);
    cond_4 = new Boolean(!unArg_5.booleanValue());
    if (cond_4.booleanValue()) {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
      SEM.NUM rexpr_26 = null;
      rexpr_26 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_26;
    }
    else {

      Boolean cond_18 = null;
      if ((l_uv instanceof Record)) 
        cond_18 = new Boolean(((Object) l_uv instanceof SEM.MAP));
      else 
        cond_18 = new Boolean(false);
      if (cond_18.booleanValue()) 
        return (SEM.VAL) EvalMapOverrideExpr((SEM.MAP) l_uv, (SEM.MAP) r_uv);
      else {

        Boolean cond_12 = null;
        if ((l_uv instanceof Record)) 
          cond_12 = new Boolean(((Object) l_uv instanceof SEM.SEQ));
        else 
          cond_12 = new Boolean(false);
        if (cond_12.booleanValue()) 
          return (SEM.VAL) EvalSeqModifyExpr((SEM.SEQ) l_uv, (SEM.MAP) r_uv, (IOmlBinaryExpression) expr);
        else {

          errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uOR_uSEQ_uEXPECTED));
          SEM.NUM rexpr_10 = null;
          rexpr_10 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
          return (SEM.VAL) rexpr_10;
        }
      }
    }
  }
// ***** VDMTOOLS END Name=EvalModify#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMapOverrideExpr#2 KEEP=NO
  private SEM.VAL EvalMapOverrideExpr (final SEM.MAP l_uv, final SEM.MAP r_uv) throws CGException {

    SEM.MAP rexpr_3 = null;
    HashMap tmpVar_4 = new HashMap();
    HashMap seqmap_7 = new HashMap();
    seqmap_7 = (l_uv).v;
    HashMap modmap_5 = new HashMap();
    modmap_5 = (r_uv).v;
    tmpVar_4 = new HashMap(seqmap_7);
    tmpVar_4.putAll(modmap_5);
    rexpr_3 = new SEM.MAP(tmpVar_4);
    return (SEM.VAL) rexpr_3;
  }
// ***** VDMTOOLS END Name=EvalMapOverrideExpr#2


// ***** VDMTOOLS START Name=EvalSeqModifyExpr#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalSeqModifyExpr (final SEM.SEQ l_uv, final SEM.MAP r_uv, final IOmlBinaryExpression expr) throws CGException {

    Vector res_ulv = null;
    res_ulv = (l_uv).v;
    {

      boolean succ_5;
      SEM.MAP tmpVal_6 = null;
      tmpVal_6 = r_uv;
      HashMap m = new HashMap();
      succ_5 = true;
      if (tmpVal_6 instanceof SEM.MAP) {

        Vector e_l_7 = new Vector();
        e_l_7.add(tmpVal_6.v);
        if (succ_5 = (1 == e_l_7.size())) 
          m = (HashMap) e_l_7.get(0);
      }
      else 
        succ_5 = false;
      if (!succ_5) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      {

        {

          HashSet iset_9 = new HashSet();
          iset_9.clear();
          iset_9.addAll(m.keySet());
          SEM.VAL d_uv = null;
          for (Iterator enm_59 = iset_9.iterator(); enm_59.hasNext(); ) {

            Object elem_10 = enm_59.next();
            d_uv = (SEM.VAL) elem_10;
            {

              SEM.VAL tmpVal_16 = null;
              tmpVal_16 = (SEM.VAL) (SEM.VAL) m.get(d_uv);
              SEM.VAL r_uv_1 = null;
              r_uv_1 = (SEM.VAL) tmpVal_16;
              Boolean cond_19 = null;
              if ((d_uv instanceof Record)) 
                cond_19 = new Boolean(((Object) d_uv instanceof SEM.NUM));
              else 
                cond_19 = new Boolean(false);
              if (cond_19.booleanValue()) {

                boolean succ_26;
                SEM.VAL tmpVal_27 = null;
                tmpVal_27 = (SEM.VAL) d_uv;
                Double d = null;
                succ_26 = true;
                if (tmpVal_27 instanceof SEM.NUM) {

                  Vector e_l_28 = new Vector();
                  e_l_28.add(((SEM.NUM) tmpVal_27).v);
                  if (succ_26 = (1 == e_l_28.size())) 
                    d = UTIL.NumberToReal(e_l_28.get(0));
                }
                else 
                  succ_26 = false;
                if (!succ_26) 
                  UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
                Boolean cond_30 = null;
                Boolean var1_31 = null;
                {
                  if ((var1_31 = new Boolean((d.doubleValue()) >= (new Long(1).intValue()))).booleanValue()) 
                    var1_31 = new Boolean((d.doubleValue()) <= (new Long(res_ulv.size()).intValue()));
                }
                {
                  if ((cond_30 = var1_31).booleanValue()) 
                    cond_30 = new Boolean(UTIL.IsInteger(d) && ((Number) d).intValue() >= 1);
                }
                if (cond_30.booleanValue()) {

                  HashMap maplet = new HashMap();
                  maplet = new HashMap();
                  maplet.put(d, r_uv_1);
                  Vector rhs_50 = null;
                  rhs_50 = (Vector) UTIL.clone(res_ulv);
                  for (Iterator enm_57 = maplet.keySet().iterator(); enm_57.hasNext(); ) {

                    Object dom_58 = enm_57.next();
                    Long edom_54 = UTIL.NumberToLong(dom_58);
                    SEM.VAL erng_55 = (SEM.VAL) maplet.get(dom_58);
                    if (edom_54.intValue() > rhs_50.size() || edom_54.intValue() < 1) 
                      UTIL.RunTime("Run-Time Error:Illegal index in sequence modifier");
                    else 
                      rhs_50.set(edom_54.intValue() - 1, erng_55);
                  }
                  res_ulv = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_50));
                }
                else {

                  errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ILLEGAL_uINDICES));
                  SEM.NUM rexpr_44 = null;
                  rexpr_44 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
                  return (SEM.VAL) rexpr_44;
                }
              }
              else {

                errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.INT_uEXPECTED));
                SEM.NUM rexpr_24 = null;
                rexpr_24 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
                return (SEM.VAL) rexpr_24;
              }
            }
          }
        }
        SEM.SEQ rexpr_60 = null;
        rexpr_60 = new SEM.SEQ(res_ulv);
        return (SEM.VAL) rexpr_60;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalSeqModifyExpr#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalLT#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalLT (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Boolean((((Number) var1_16).doubleValue()) < (((Number) var2_18).doubleValue()));
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalLT#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalPSubset#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalPSubset (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Boolean(((HashSet) var2_18).containsAll((HashSet) var1_16) && !new Long(((HashSet) var1_16).size()).equals(new Long(((HashSet) var2_18).size())));
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalPSubset#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMod#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMod (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Long tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Long((int) (UTIL.NumberToLong((Number) var1_16).doubleValue() - UTIL.NumberToLong((Number) var2_18).doubleValue() * Math.floor(UTIL.NumberToLong((Number) var1_16).doubleValue() / UTIL.NumberToLong((Number) var2_18).doubleValue())));
      rexpr_14 = new SEM.NUM(UTIL.NumberToReal(tmpVar_15));
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_12 = null;
      rexpr_12 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalMod#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalDomResBy#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalDomResBy (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.MAP));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.MAP rexpr_22 = null;
      HashMap tmpVar_23 = new HashMap();
      Object var1_24 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_24 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_24 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_24 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_24 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_24 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_24 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_24 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_24 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_24 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_24 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_26 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_26 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_26 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_26 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_26 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_26 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_26 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_26 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_26 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_26 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_26 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_23 = (HashMap) var2_26;
      {

        HashMap tmpMap_28 = new HashMap();
        HashSet domM_29 = new HashSet();
        domM_29.addAll(tmpVar_23.keySet());
        Object elm_30;
        for (Iterator bb_31 = domM_29.iterator(); bb_31.hasNext(); ) {

          elm_30 = bb_31.next();
          if (!((HashSet) var1_24).contains(elm_30)) 
            tmpMap_28.put(elm_30, tmpVar_23.get(elm_30));
        }
        tmpVar_23 = tmpMap_28;
      }
      rexpr_22 = new SEM.MAP(tmpVar_23);
      return (SEM.VAL) rexpr_22;
    }
    else {

      Boolean cond_14 = null;
      Boolean unArg_15 = null;
      if ((l_uv instanceof Record)) 
        unArg_15 = new Boolean(((Object) l_uv instanceof SEM.SET));
      else 
        unArg_15 = new Boolean(false);
      cond_14 = new Boolean(!unArg_15.booleanValue());
      if (cond_14.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
        SEM.MAP rexpr_20 = null;
        rexpr_20 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_20;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
        SEM.MAP rexpr_12 = null;
        rexpr_12 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_12;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalDomResBy#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalInter#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalInter (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.SET rexpr_14 = null;
      HashSet tmpVar_15 = new HashSet();
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = (HashSet) ((HashSet) var1_16).clone();
      tmpVar_15.retainAll((HashSet) var2_18);
      rexpr_14 = new SEM.SET(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.SET rexpr_12 = null;
      rexpr_12 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalInter#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalComp#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalComp (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
    return null;
  }
// ***** VDMTOOLS END Name=EvalComp#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMinus#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMinus (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Double tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Double(((Number) var1_16).doubleValue() - ((Number) var2_18).doubleValue());
      rexpr_14 = new SEM.NUM(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_12 = null;
      rexpr_12 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalMinus#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalRem#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalRem (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Long tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Long(UTIL.NumberToLong((Number) var1_16).intValue() % UTIL.NumberToLong((Number) var2_18).intValue());
      rexpr_14 = new SEM.NUM(UTIL.NumberToReal(tmpVar_15));
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_12 = null;
      rexpr_12 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalRem#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalAnd#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalAnd (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.BOOL));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.BOOL));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!(var1_16 instanceof Boolean)) 
        UTIL.RunTime("Run-Time Error:A boolean was expected");
      {
        if ((tmpVar_15 = (Boolean) var1_16).booleanValue()) {

          Object var2_18 = null;
          if ((r_uv instanceof Record)) 
            if ((r_uv instanceof SEM.TUPLE)) 
              var2_18 = ((SEM.TUPLE) r_uv).v;
            else 
              if ((r_uv instanceof SEM.TOKEN)) 
                var2_18 = ((SEM.TOKEN) r_uv).v;
              else 
                if ((r_uv instanceof SEM.QUOTE)) 
                  var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
                else 
                  if ((r_uv instanceof SEM.CHAR)) 
                    var2_18 = ((SEM.CHAR) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.BOOL)) 
                      var2_18 = ((SEM.BOOL) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.SET)) 
                        var2_18 = ((SEM.SET) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.SEQ)) 
                          var2_18 = ((SEM.SEQ) r_uv).v;
                        else 
                          if ((r_uv instanceof SEM.REC)) 
                            var2_18 = ((SEM.REC) r_uv).v;
                          else 
                            if ((r_uv instanceof SEM.NUM)) 
                              var2_18 = ((SEM.NUM) r_uv).v;
                            else 
                              var2_18 = ((SEM.MAP) r_uv).v;
          else 
            UTIL.RunTime("Run-Time Error:A record was expected");
          if (!(var2_18 instanceof Boolean)) 
            UTIL.RunTime("Run-Time Error:A boolean was expected");
          tmpVar_15 = (Boolean) var2_18;
        }
      }
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.BOOL_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalAnd#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalUnion#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalUnion (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.SET rexpr_14 = null;
      HashSet tmpVar_15 = new HashSet();
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = (HashSet) ((HashSet) var1_16).clone();
      tmpVar_15.addAll((HashSet) var2_18);
      rexpr_14 = new SEM.SET(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.SET rexpr_12 = null;
      rexpr_12 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalUnion#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalInSet#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalInSet (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    if ((r_uv instanceof Record)) 
      cond_4 = new Boolean(((Object) r_uv instanceof SEM.SET));
    else 
      cond_4 = new Boolean(false);
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_11 = null;
      Boolean tmpVar_12 = null;
      Object var2_14 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_14 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_14 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_14 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_14 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_14 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_14 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_14 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_14 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_14 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_14 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_12 = new Boolean(((HashSet) var2_14).contains(l_uv));
      rexpr_11 = new SEM.BOOL(tmpVar_12);
      return (SEM.VAL) rexpr_11;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.BOOL rexpr_9 = null;
      rexpr_9 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_9;
    }
  }
// ***** VDMTOOLS END Name=EvalInSet#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalEquiv#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalEquiv (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.BOOL));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.BOOL));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      rexpr_14 = new SEM.BOOL(new Boolean(UTIL.equals(l_uv, r_uv)));
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.BOOL_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalEquiv#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMapRngResTo#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMapRngResTo (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.MAP));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.MAP rexpr_21 = null;
      HashMap tmpVar_22 = new HashMap();
      Object var1_23 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_23 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_23 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_23 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_23 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_23 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_23 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_23 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_23 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_23 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_23 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_25 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_25 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_25 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_25 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_25 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_25 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_25 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_25 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_25 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_25 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_25 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_22 = (HashMap) var1_23;
      {

        HashMap tmpMap_27 = new HashMap();
        HashSet domM_28 = new HashSet();
        domM_28.addAll(tmpVar_22.keySet());
        Object elm_29;
        for (Iterator bb_30 = domM_28.iterator(); bb_30.hasNext(); ) {

          elm_29 = bb_30.next();
          if (((HashSet) var2_25).contains(tmpVar_22.get(elm_29))) 
            tmpMap_27.put(elm_29, tmpVar_22.get(elm_29));
        }
        tmpVar_22 = tmpMap_27;
      }
      rexpr_21 = new SEM.MAP(tmpVar_22);
      return (SEM.VAL) rexpr_21;
    }
    else {

      Boolean cond_14 = null;
      if ((l_uv instanceof Record)) 
        cond_14 = new Boolean(((Object) l_uv instanceof SEM.MAP));
      else 
        cond_14 = new Boolean(false);
      if (cond_14.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
        SEM.MAP rexpr_19 = null;
        rexpr_19 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_19;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
        SEM.MAP rexpr_12 = null;
        rexpr_12 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_12;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalMapRngResTo#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalIterate#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalIterate (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      boolean succ_14;
      SEM.VAL tmpVal_15 = null;
      tmpVal_15 = (SEM.VAL) l_uv;
      Double n1 = null;
      succ_14 = true;
      if (tmpVal_15 instanceof SEM.NUM) {

        Vector e_l_16 = new Vector();
        e_l_16.add(((SEM.NUM) tmpVal_15).v);
        if (succ_14 = (1 == e_l_16.size())) 
          n1 = UTIL.NumberToReal(e_l_16.get(0));
      }
      else 
        succ_14 = false;
      if (!succ_14) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      SEM.VAL tmpVal_18 = null;
      tmpVal_18 = (SEM.VAL) r_uv;
      Double n2 = null;
      succ_14 = true;
      if (tmpVal_18 instanceof SEM.NUM) {

        Vector e_l_19 = new Vector();
        e_l_19.add(((SEM.NUM) tmpVal_18).v);
        if (succ_14 = (1 == e_l_19.size())) 
          n2 = UTIL.NumberToReal(e_l_19.get(0));
      }
      else 
        succ_14 = false;
      if (!succ_14) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      SEM.NUM rexpr_21 = null;
      Double tmpVar_22 = null;
      tmpVar_22 = new Double(Math.pow(n1.doubleValue(), n2.doubleValue()));
      rexpr_21 = new SEM.NUM(tmpVar_22);
      return (SEM.VAL) rexpr_21;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_12 = null;
      rexpr_12 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalIterate#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalSubset#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalSubset (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Boolean(((HashSet) var2_18).containsAll((HashSet) var1_16));
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalSubset#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMapRngResBy#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMapRngResBy (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.MAP));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.MAP rexpr_22 = null;
      HashMap tmpVar_23 = new HashMap();
      Object var1_24 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_24 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_24 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_24 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_24 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_24 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_24 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_24 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_24 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_24 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_24 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_26 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_26 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_26 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_26 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_26 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_26 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_26 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_26 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_26 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_26 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_26 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_23 = (HashMap) var1_24;
      {

        HashMap tmpMap_28 = new HashMap();
        HashSet domM_29 = new HashSet();
        domM_29.addAll(tmpVar_23.keySet());
        Object elm_30;
        for (Iterator bb_31 = domM_29.iterator(); bb_31.hasNext(); ) {

          elm_30 = bb_31.next();
          if (!((HashSet) var2_26).contains(tmpVar_23.get(elm_30))) 
            tmpMap_28.put(elm_30, tmpVar_23.get(elm_30));
        }
        tmpVar_23 = tmpMap_28;
      }
      rexpr_22 = new SEM.MAP(tmpVar_23);
      return (SEM.VAL) rexpr_22;
    }
    else {

      Boolean cond_14 = null;
      Boolean unArg_15 = null;
      if ((l_uv instanceof Record)) 
        unArg_15 = new Boolean(((Object) l_uv instanceof SEM.MAP));
      else 
        unArg_15 = new Boolean(false);
      cond_14 = new Boolean(!unArg_15.booleanValue());
      if (cond_14.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
        SEM.MAP rexpr_20 = null;
        rexpr_20 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_20;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
        SEM.MAP rexpr_12 = null;
        rexpr_12 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_12;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalMapRngResBy#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalTupSel#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalTupSel (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    if ((l_uv instanceof Record)) 
      var1_6 = new Boolean(((Object) l_uv instanceof SEM.TUPLE));
    else 
      var1_6 = new Boolean(false);
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_8 = null;
        if ((r_uv instanceof Record)) 
          var2_8 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_8 = new Boolean(false);
        var1_5 = var2_8;
      }
    }
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_10 = null;
        Object var1_11 = null;
        if ((r_uv instanceof Record)) 
          if ((r_uv instanceof SEM.TUPLE)) 
            var1_11 = ((SEM.TUPLE) r_uv).v;
          else 
            if ((r_uv instanceof SEM.TOKEN)) 
              var1_11 = ((SEM.TOKEN) r_uv).v;
            else 
              if ((r_uv instanceof SEM.QUOTE)) 
                var1_11 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
              else 
                if ((r_uv instanceof SEM.CHAR)) 
                  var1_11 = ((SEM.CHAR) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.BOOL)) 
                    var1_11 = ((SEM.BOOL) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SET)) 
                      var1_11 = ((SEM.SET) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.SEQ)) 
                        var1_11 = ((SEM.SEQ) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.REC)) 
                          var1_11 = ((SEM.REC) r_uv).v;
                        else 
                          if ((r_uv instanceof SEM.NUM)) 
                            var1_11 = ((SEM.NUM) r_uv).v;
                          else 
                            var1_11 = ((SEM.MAP) r_uv).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet var2_13 = new HashSet();
        Object unArg_14 = null;
        if ((l_uv instanceof Record)) 
          if ((l_uv instanceof SEM.TUPLE)) 
            unArg_14 = ((SEM.TUPLE) l_uv).v;
          else 
            if ((l_uv instanceof SEM.TOKEN)) 
              unArg_14 = ((SEM.TOKEN) l_uv).v;
            else 
              if ((l_uv instanceof SEM.QUOTE)) 
                unArg_14 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
              else 
                if ((l_uv instanceof SEM.CHAR)) 
                  unArg_14 = ((SEM.CHAR) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.BOOL)) 
                    unArg_14 = ((SEM.BOOL) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SET)) 
                      unArg_14 = ((SEM.SET) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.SEQ)) 
                        unArg_14 = ((SEM.SEQ) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.REC)) 
                          unArg_14 = ((SEM.REC) l_uv).v;
                        else 
                          if ((l_uv instanceof SEM.NUM)) 
                            unArg_14 = ((SEM.NUM) l_uv).v;
                          else 
                            unArg_14 = ((SEM.MAP) l_uv).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet riseq_16 = new HashSet();
        int max_17 = ((Vector) unArg_14).size();
        for (int i_18 = 1; i_18 <= max_17; i_18++) 
          riseq_16.add(new Long(i_18));
        var2_13 = riseq_16;
        var2_10 = new Boolean(var2_13.contains(var1_11));
        cond_4 = var2_10;
      }
    }
    if (cond_4.booleanValue()) {

      Object rexpr_32 = null;
      Object tmpGen_33 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          tmpGen_33 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            tmpGen_33 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              tmpGen_33 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                tmpGen_33 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  tmpGen_33 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    tmpGen_33 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      tmpGen_33 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        tmpGen_33 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          tmpGen_33 = ((SEM.NUM) l_uv).v;
                        else 
                          tmpGen_33 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object par_36 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          par_36 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            par_36 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              par_36 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                par_36 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  par_36 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    par_36 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      par_36 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        par_36 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          par_36 = ((SEM.NUM) r_uv).v;
                        else 
                          par_36 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if ((tmpGen_33 instanceof List)) {

        Vector tmpRes_35 = (Vector) tmpGen_33;
        rexpr_32 = (Object) tmpRes_35.get(((Long) par_36).intValue() - 1);
      }
      else 
        if ((tmpGen_33 instanceof Map)) {

          HashMap tmpRes_35 = (HashMap) tmpGen_33;
          rexpr_32 = (SEM.VAL) tmpRes_35.get(par_36);
        }
        else 
          UTIL.RunTime("Run-Time Error:The argument could not be applied");
      return (SEM.VAL) rexpr_32;
    }
    else {

      Boolean cond_24 = null;
      Boolean unArg_25 = null;
      if ((l_uv instanceof Record)) 
        unArg_25 = new Boolean(((Object) l_uv instanceof SEM.TUPLE));
      else 
        unArg_25 = new Boolean(false);
      cond_24 = new Boolean(!unArg_25.booleanValue());
      if (cond_24.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.TUPLE_uEXPECTED));
        SEM.NUM rexpr_30 = null;
        rexpr_30 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
        return (SEM.VAL) rexpr_30;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
        SEM.NUM rexpr_22 = null;
        rexpr_22 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
        return (SEM.VAL) rexpr_22;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalTupSel#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalNotInSet#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalNotInSet (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    if ((r_uv instanceof Record)) 
      cond_4 = new Boolean(((Object) r_uv instanceof SEM.SET));
    else 
      cond_4 = new Boolean(false);
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_11 = null;
      Boolean tmpVar_12 = null;
      Object var2_14 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_14 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_14 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_14 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_14 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_14 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_14 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_14 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_14 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_14 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_14 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_12 = new Boolean(!((HashSet) var2_14).contains(l_uv));
      rexpr_11 = new SEM.BOOL(tmpVar_12);
      return (SEM.VAL) rexpr_11;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.BOOL rexpr_9 = null;
      rexpr_9 = new SEM.BOOL(new Boolean(false));
      return (SEM.VAL) rexpr_9;
    }
  }
// ***** VDMTOOLS END Name=EvalNotInSet#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMult#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMult (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Double tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Double(((Number) var1_16).doubleValue() * ((Number) var2_18).doubleValue());
      rexpr_14 = new SEM.NUM(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_12 = null;
      rexpr_12 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalMult#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalImply#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalImply (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.BOOL));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.BOOL));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!(var1_16 instanceof Boolean)) 
        UTIL.RunTime("Run-Time Error:A boolean was expected");
      if (((Boolean) var1_16).booleanValue()) {

        Object var2_18 = null;
        if ((r_uv instanceof Record)) 
          if ((r_uv instanceof SEM.TUPLE)) 
            var2_18 = ((SEM.TUPLE) r_uv).v;
          else 
            if ((r_uv instanceof SEM.TOKEN)) 
              var2_18 = ((SEM.TOKEN) r_uv).v;
            else 
              if ((r_uv instanceof SEM.QUOTE)) 
                var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
              else 
                if ((r_uv instanceof SEM.CHAR)) 
                  var2_18 = ((SEM.CHAR) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.BOOL)) 
                    var2_18 = ((SEM.BOOL) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SET)) 
                      var2_18 = ((SEM.SET) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.SEQ)) 
                        var2_18 = ((SEM.SEQ) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.REC)) 
                          var2_18 = ((SEM.REC) r_uv).v;
                        else 
                          if ((r_uv instanceof SEM.NUM)) 
                            var2_18 = ((SEM.NUM) r_uv).v;
                          else 
                            var2_18 = ((SEM.MAP) r_uv).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        if (!(var2_18 instanceof Boolean)) 
          UTIL.RunTime("Run-Time Error:A boolean was expected");
        tmpVar_15 = (Boolean) var2_18;
      }
      else 
        tmpVar_15 = new Boolean(true);
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.BOOL_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalImply#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalOr#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalOr (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.BOOL));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.BOOL));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!(var1_16 instanceof Boolean)) 
        UTIL.RunTime("Run-Time Error:A boolean was expected");
      {
        if (!(tmpVar_15 = (Boolean) var1_16).booleanValue()) {

          Object var2_18 = null;
          if ((r_uv instanceof Record)) 
            if ((r_uv instanceof SEM.TUPLE)) 
              var2_18 = ((SEM.TUPLE) r_uv).v;
            else 
              if ((r_uv instanceof SEM.TOKEN)) 
                var2_18 = ((SEM.TOKEN) r_uv).v;
              else 
                if ((r_uv instanceof SEM.QUOTE)) 
                  var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
                else 
                  if ((r_uv instanceof SEM.CHAR)) 
                    var2_18 = ((SEM.CHAR) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.BOOL)) 
                      var2_18 = ((SEM.BOOL) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.SET)) 
                        var2_18 = ((SEM.SET) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.SEQ)) 
                          var2_18 = ((SEM.SEQ) r_uv).v;
                        else 
                          if ((r_uv instanceof SEM.REC)) 
                            var2_18 = ((SEM.REC) r_uv).v;
                          else 
                            if ((r_uv instanceof SEM.NUM)) 
                              var2_18 = ((SEM.NUM) r_uv).v;
                            else 
                              var2_18 = ((SEM.MAP) r_uv).v;
          else 
            UTIL.RunTime("Run-Time Error:A record was expected");
          if (!(var2_18 instanceof Boolean)) 
            UTIL.RunTime("Run-Time Error:A boolean was expected");
          tmpVar_15 = (Boolean) var2_18;
        }
      }
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.BOOL_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalOr#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalGt#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalGt (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Boolean((((Number) var1_16).doubleValue()) > (((Number) var2_18).doubleValue()));
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalGt#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalPlus#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalPlus (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Double tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Double(((Number) var1_16).doubleValue() + ((Number) var2_18).doubleValue());
      rexpr_14 = new SEM.NUM(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_12 = null;
      rexpr_12 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalPlus#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMUnion#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMUnion (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    if ((l_uv instanceof Record)) 
      var1_6 = new Boolean(((Object) l_uv instanceof SEM.MAP));
    else 
      var1_6 = new Boolean(false);
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_8 = null;
        if ((r_uv instanceof Record)) 
          var2_8 = new Boolean(((Object) r_uv instanceof SEM.MAP));
        else 
          var2_8 = new Boolean(false);
        var1_5 = var2_8;
      }
    }
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_10 = null;
        {

          SEM.MAP tmpLv = (SEM.MAP) l_uv;
          SEM.MAP tmpRv = (SEM.MAP) r_uv;
          {

            HashMap lv = new HashMap();
            lv = (tmpLv).v;
            HashMap rv = new HashMap();
            rv = (tmpRv).v;
            HashSet lvD = new HashSet();
            lvD.clear();
            lvD.addAll(lv.keySet());
            HashSet rvD = new HashSet();
            rvD.clear();
            rvD.addAll(rv.keySet());
            HashSet s = new HashSet();
            s = (HashSet) lvD.clone();
            s.retainAll(rvD);
            boolean tmpQuant_26 = true;
            {

              boolean succ_34 = true;
              SEM.VAL e = null;
              {
                for (Iterator enm_37 = s.iterator(); enm_37.hasNext() && tmpQuant_26; ) {

                  Object elem_36 = enm_37.next();
                  succ_34 = true;
                  if (new Boolean((elem_36 instanceof Record)).booleanValue()) 
                    e = (SEM.VAL) elem_36;
                  else 
                    succ_34 = false;
                  if (succ_34) {
                    if (!new Boolean(UTIL.equals((SEM.VAL) lv.get(e), (SEM.VAL) rv.get(e))).booleanValue()) 
                      tmpQuant_26 = false;
                  }
                }
              }
            }
            var2_10 = new Boolean(tmpQuant_26);
          }
        }
        cond_4 = var2_10;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.MAP tmpLv = (SEM.MAP) l_uv;
      SEM.MAP tmpRv = (SEM.MAP) r_uv;
      {

        HashMap lv = new HashMap();
        lv = (tmpLv).v;
        HashMap rv = new HashMap();
        rv = (tmpRv).v;
        SEM.MAP rexpr_51 = null;
        HashMap tmpVar_52 = new HashMap();
        {

          HashMap m1_59 = (HashMap) lv.clone();
          HashMap m2_60 = rv;
          HashSet com_55 = new HashSet();
          com_55.addAll(m1_59.keySet());
          com_55.retainAll(m2_60.keySet());
          boolean all_applies_56 = true;
          Object d_57;
          for (Iterator bb_58 = com_55.iterator(); bb_58.hasNext() && all_applies_56; ) {

            d_57 = bb_58.next();
            all_applies_56 = m1_59.get(d_57).equals(m2_60.get(d_57));
          }
          if (!all_applies_56) 
            UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
          m1_59.putAll(m2_60);
          tmpVar_52 = m1_59;
        }
        rexpr_51 = new SEM.MAP(tmpVar_52);
        return (SEM.VAL) rexpr_51;
      }
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
      SEM.MAP rexpr_41 = null;
      rexpr_41 = new SEM.MAP(new HashMap());
      return (SEM.VAL) rexpr_41;
    }
  }
// ***** VDMTOOLS END Name=EvalMUnion#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalMapDomResTo#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalMapDomResTo (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.MAP));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.MAP rexpr_14 = null;
      HashMap tmpVar_15 = new HashMap();
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = (HashMap) var2_18;
      {

        HashMap tmpMap_20 = new HashMap();
        HashSet domM_21 = new HashSet();
        domM_21.addAll(tmpVar_15.keySet());
        Object elm_22;
        for (Iterator bb_23 = domM_21.iterator(); bb_23.hasNext(); ) {

          elm_22 = bb_23.next();
          if (((HashSet) var1_16).contains(elm_22)) 
            tmpMap_20.put(elm_22, tmpVar_15.get(elm_22));
        }
        tmpVar_15 = tmpMap_20;
      }
      rexpr_14 = new SEM.MAP(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
      SEM.MAP rexpr_12 = null;
      rexpr_12 = new SEM.MAP(new HashMap());
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalMapDomResTo#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalEq#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalEq (final SEM.VAL var_1_1, final SEM.VAL var_2_2, final IOmlBinaryExpression var_3_3) throws CGException {

    SEM.VAL l_uv = null;
    SEM.VAL r_uv = null;
    boolean succ_4 = true;
    l_uv = (SEM.VAL) var_1_1;
    r_uv = (SEM.VAL) var_2_2;
    if (!succ_4) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation EvalEq");
    SEM.BOOL rexpr_5 = null;
    rexpr_5 = new SEM.BOOL(new Boolean(UTIL.equals(l_uv, r_uv)));
    return (SEM.VAL) rexpr_5;
  }
// ***** VDMTOOLS END Name=EvalEq#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalDiv#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalDiv (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Long tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Long((int) (UTIL.NumberToLong((Number) var1_16).intValue() / UTIL.NumberToLong((Number) var2_18).intValue()));
      rexpr_14 = new SEM.NUM(UTIL.NumberToReal(tmpVar_15));
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalDiv#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalDifference#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalDifference (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SET));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SET));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.SET rexpr_14 = null;
      HashSet tmpVar_15 = new HashSet();
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = (HashSet) ((HashSet) var1_16).clone();
      tmpVar_15.removeAll((HashSet) var2_18);
      rexpr_14 = new SEM.SET(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.SET rexpr_12 = null;
      rexpr_12 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalDifference#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalConc#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalConc (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.SEQ));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.SEQ));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.SEQ rexpr_14 = null;
      Vector tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = (Vector) ((Vector) var1_16).clone();
      tmpVar_15.addAll((Vector) var2_18);
      rexpr_14 = new SEM.SEQ(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SEQ_uEXPECTED));
      SEM.SEQ rexpr_12 = null;
      rexpr_12 = new SEM.SEQ(new Vector());
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalConc#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalLE#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalLE (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.BOOL rexpr_14 = null;
      Boolean tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Boolean((((Number) var1_16).doubleValue()) <= (((Number) var2_18).doubleValue()));
      rexpr_14 = new SEM.BOOL(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalLE#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalDivide#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalDivide (final SEM.VAL l_uv, final SEM.VAL r_uv, final IOmlBinaryExpression expr) throws CGException {

    Boolean cond_4 = null;
    Boolean var1_5 = null;
    if ((l_uv instanceof Record)) 
      var1_5 = new Boolean(((Object) l_uv instanceof SEM.NUM));
    else 
      var1_5 = new Boolean(false);
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_7 = null;
        if ((r_uv instanceof Record)) 
          var2_7 = new Boolean(((Object) r_uv instanceof SEM.NUM));
        else 
          var2_7 = new Boolean(false);
        cond_4 = var2_7;
      }
    }
    if (cond_4.booleanValue()) {

      SEM.NUM rexpr_14 = null;
      Double tmpVar_15 = null;
      Object var1_16 = null;
      if ((l_uv instanceof Record)) 
        if ((l_uv instanceof SEM.TUPLE)) 
          var1_16 = ((SEM.TUPLE) l_uv).v;
        else 
          if ((l_uv instanceof SEM.TOKEN)) 
            var1_16 = ((SEM.TOKEN) l_uv).v;
          else 
            if ((l_uv instanceof SEM.QUOTE)) 
              var1_16 = UTIL.ConvertToList(((SEM.QUOTE) l_uv).v);
            else 
              if ((l_uv instanceof SEM.CHAR)) 
                var1_16 = ((SEM.CHAR) l_uv).v;
              else 
                if ((l_uv instanceof SEM.BOOL)) 
                  var1_16 = ((SEM.BOOL) l_uv).v;
                else 
                  if ((l_uv instanceof SEM.SET)) 
                    var1_16 = ((SEM.SET) l_uv).v;
                  else 
                    if ((l_uv instanceof SEM.SEQ)) 
                      var1_16 = ((SEM.SEQ) l_uv).v;
                    else 
                      if ((l_uv instanceof SEM.REC)) 
                        var1_16 = ((SEM.REC) l_uv).v;
                      else 
                        if ((l_uv instanceof SEM.NUM)) 
                          var1_16 = ((SEM.NUM) l_uv).v;
                        else 
                          var1_16 = ((SEM.MAP) l_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      Object var2_18 = null;
      if ((r_uv instanceof Record)) 
        if ((r_uv instanceof SEM.TUPLE)) 
          var2_18 = ((SEM.TUPLE) r_uv).v;
        else 
          if ((r_uv instanceof SEM.TOKEN)) 
            var2_18 = ((SEM.TOKEN) r_uv).v;
          else 
            if ((r_uv instanceof SEM.QUOTE)) 
              var2_18 = UTIL.ConvertToList(((SEM.QUOTE) r_uv).v);
            else 
              if ((r_uv instanceof SEM.CHAR)) 
                var2_18 = ((SEM.CHAR) r_uv).v;
              else 
                if ((r_uv instanceof SEM.BOOL)) 
                  var2_18 = ((SEM.BOOL) r_uv).v;
                else 
                  if ((r_uv instanceof SEM.SET)) 
                    var2_18 = ((SEM.SET) r_uv).v;
                  else 
                    if ((r_uv instanceof SEM.SEQ)) 
                      var2_18 = ((SEM.SEQ) r_uv).v;
                    else 
                      if ((r_uv instanceof SEM.REC)) 
                        var2_18 = ((SEM.REC) r_uv).v;
                      else 
                        if ((r_uv instanceof SEM.NUM)) 
                          var2_18 = ((SEM.NUM) r_uv).v;
                        else 
                          var2_18 = ((SEM.MAP) r_uv).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_15 = new Double(((Number) var1_16).doubleValue() / ((Number) var2_18).doubleValue());
      rexpr_14 = new SEM.NUM(tmpVar_15);
      return (SEM.VAL) rexpr_14;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.BOOL rexpr_12 = null;
      rexpr_12 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_12;
    }
  }
// ***** VDMTOOLS END Name=EvalDivide#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=EvalNE#3|IOmlBinaryExpression KEEP=NO
  private SEM.VAL EvalNE (final SEM.VAL var_1_1, final SEM.VAL var_2_2, final IOmlBinaryExpression var_3_3) throws CGException {

    SEM.VAL l_uv = null;
    SEM.VAL r_uv = null;
    boolean succ_4 = true;
    l_uv = (SEM.VAL) var_1_1;
    r_uv = (SEM.VAL) var_2_2;
    if (!succ_4) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation EvalNE");
    SEM.BOOL rexpr_5 = null;
    rexpr_5 = new SEM.BOOL(new Boolean(!UTIL.equals(l_uv, r_uv)));
    return (SEM.VAL) rexpr_5;
  }
// ***** VDMTOOLS END Name=EvalNE#3|IOmlBinaryExpression


// ***** VDMTOOLS START Name=evaluateUnary#2|IOmlUnaryExpression|HashMap KEEP=NO
  public SEM.VAL evaluateUnary (final IOmlUnaryExpression expr, final HashMap cxt) throws CGException {

    SEM.VAL varRes_3 = null;
    {

      IOmlExpression exprarg = null;
      exprarg = (IOmlExpression) expr.getExpression();
      IOmlUnaryOperator operat = null;
      operat = (IOmlUnaryOperator) expr.getOperator();
      {

        SEM.VAL v = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) exprarg, cxt);
        Long op = null;
        op = operat.getValue();
        varRes_3 = (SEM.VAL) (SEM.VAL) UnOpApply((SEM.VAL) v, op, (IOmlUnaryExpression) expr);
      }
    }
    return (SEM.VAL) varRes_3;
  }
// ***** VDMTOOLS END Name=evaluateUnary#2|IOmlUnaryExpression|HashMap


// ***** VDMTOOLS START Name=UnOpApply#3|Long|IOmlUnaryExpression KEEP=NO
  private SEM.VAL UnOpApply (final SEM.VAL val, final Long op, final IOmlUnaryExpression expr) throws CGException {

    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQABS)) 
        succ_4 = false;
      if (succ_4) 
        return (SEM.VAL) EvalAbs((SEM.VAL) val, (IOmlUnaryExpression) expr);
      else {

        succ_4 = true;
        if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQINVERSE)) 
          succ_4 = false;
        if (succ_4) 
          return (SEM.VAL) EvalInverse((SEM.VAL) val, (IOmlUnaryExpression) expr);
        else {

          succ_4 = true;
          if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQHD)) 
            succ_4 = false;
          if (succ_4) 
            return (SEM.VAL) EvalHd((SEM.VAL) val, (IOmlUnaryExpression) expr);
          else {

            succ_4 = true;
            if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQELEMS)) 
              succ_4 = false;
            if (succ_4) 
              return (SEM.VAL) EvalElems((SEM.VAL) val, (IOmlUnaryExpression) expr);
            else {

              succ_4 = true;
              if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQINDS)) 
                succ_4 = false;
              if (succ_4) 
                return (SEM.VAL) EvalInds((SEM.VAL) val, (IOmlUnaryExpression) expr);
              else {

                succ_4 = true;
                if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQTL)) 
                  succ_4 = false;
                if (succ_4) 
                  return (SEM.VAL) EvalTl((SEM.VAL) val, (IOmlUnaryExpression) expr);
                else {

                  succ_4 = true;
                  if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQCARD)) 
                    succ_4 = false;
                  if (succ_4) 
                    return (SEM.VAL) EvalCard((SEM.VAL) val, (IOmlUnaryExpression) expr);
                  else {

                    succ_4 = true;
                    if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQDUNION)) 
                      succ_4 = false;
                    if (succ_4) 
                      return (SEM.VAL) EvalDUnion((SEM.VAL) val, (IOmlUnaryExpression) expr);
                    else {

                      succ_4 = true;
                      if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQPOWER)) 
                        succ_4 = false;
                      if (succ_4) 
                        return (SEM.VAL) EvalPower((SEM.VAL) val, (IOmlUnaryExpression) expr);
                      else {

                        succ_4 = true;
                        if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQLEN)) 
                          succ_4 = false;
                        if (succ_4) 
                          return (SEM.VAL) EvalLen((SEM.VAL) val, (IOmlUnaryExpression) expr);
                        else {

                          succ_4 = true;
                          if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQPLUS)) 
                            succ_4 = false;
                          if (succ_4) 
                            return (SEM.VAL) EvalUPlus((SEM.VAL) val, (IOmlUnaryExpression) expr);
                          else {

                            succ_4 = true;
                            if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQDOM)) 
                              succ_4 = false;
                            if (succ_4) 
                              return (SEM.VAL) EvalDom((SEM.VAL) val, (IOmlUnaryExpression) expr);
                            else {

                              succ_4 = true;
                              if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQDMERGE)) 
                                succ_4 = false;
                              if (succ_4) 
                                return (SEM.VAL) EvalMerge((SEM.VAL) val, (IOmlUnaryExpression) expr);
                              else {

                                succ_4 = true;
                                if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQDINTER)) 
                                  succ_4 = false;
                                if (succ_4) 
                                  return (SEM.VAL) EvalDInter((SEM.VAL) val, (IOmlUnaryExpression) expr);
                                else {

                                  succ_4 = true;
                                  if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQNOT)) 
                                    succ_4 = false;
                                  if (succ_4) 
                                    return (SEM.VAL) EvalNot((SEM.VAL) val, (IOmlUnaryExpression) expr);
                                  else {

                                    succ_4 = true;
                                    if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQMINUS)) 
                                      succ_4 = false;
                                    if (succ_4) 
                                      return (SEM.VAL) EvalUMinus((SEM.VAL) val, (IOmlUnaryExpression) expr);
                                    else {

                                      succ_4 = true;
                                      if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQRNG)) 
                                        succ_4 = false;
                                      if (succ_4) 
                                        return (SEM.VAL) EvalRng((SEM.VAL) val, (IOmlUnaryExpression) expr);
                                      else {

                                        succ_4 = true;
                                        if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQFLOOR)) 
                                          succ_4 = false;
                                        if (succ_4) 
                                          return (SEM.VAL) EvalFloor((SEM.VAL) val, (IOmlUnaryExpression) expr);
                                        else {

                                          succ_4 = true;
                                          if (!UTIL.equals(op, OmlUnaryOperatorQuotes.IQDCONC)) 
                                            succ_4 = false;
                                          if (succ_4) 
                                            return (SEM.VAL) EvalDConc((SEM.VAL) val, (IOmlUnaryExpression) expr);
                                          else {

                                            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=UnOpApply#3|Long|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalAbs#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalAbs (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.NUM));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.NUM rexpr_10 = null;
      Double tmpVar_11 = null;
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!(unArg_12 instanceof Number)) 
        UTIL.RunTime("Run-Time Error:A number was expected");
      else {
        tmpVar_11 = new Double(Math.abs(((Number) unArg_12).doubleValue()));
      }
      rexpr_10 = new SEM.NUM(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_8 = null;
      rexpr_8 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalAbs#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalInverse#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalInverse (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.MAP));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.MAP tmp = (SEM.MAP) val;
      SEM.MAP rexpr_12 = null;
      HashMap tmpVar_13 = new HashMap();
      HashMap mapType_14 = new HashMap();
      mapType_14 = (tmp).v;
      tmpVar_13 = new HashMap();
      for (Iterator enm_20 = mapType_14.keySet().iterator(); enm_20.hasNext(); ) {

        Object dom_21 = enm_20.next();
        SEM.VAL id_d_18 = (SEM.VAL) dom_21;
        SEM.VAL id_r_17 = (SEM.VAL) mapType_14.get(dom_21);
        if (tmpVar_13.containsKey(id_r_17)) 
          UTIL.RunTime("Run-Time Error:Map is not injective - \'inverse\' fails");
        else 
          tmpVar_13.put(id_r_17, id_d_18);
      }
      rexpr_12 = new SEM.MAP(tmpVar_13);
      return (SEM.VAL) rexpr_12;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
      SEM.MAP rexpr_8 = null;
      rexpr_8 = new SEM.MAP(new HashMap());
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalInverse#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalHd#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalHd (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    if ((val instanceof Record)) 
      var1_4 = new Boolean(((Object) val instanceof SEM.SEQ));
    else 
      var1_4 = new Boolean(false);
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_6 = null;
        Object var1_7 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            var1_7 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              var1_7 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                var1_7 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  var1_7 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    var1_7 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      var1_7 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        var1_7 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          var1_7 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            var1_7 = ((SEM.NUM) val).v;
                          else 
                            var1_7 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        var2_6 = new Boolean(!UTIL.equals(var1_7, new Vector()));
        cond_3 = var2_6;
      }
    }
    if (cond_3.booleanValue()) {

      Object rexpr_22 = null;
      Object unArg_23 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_23 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_23 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_23 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_23 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_23 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_23 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_23 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_23 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_23 = ((SEM.NUM) val).v;
                        else 
                          unArg_23 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      rexpr_22 = ((Vector) unArg_23).get(0);
      return (SEM.VAL) rexpr_22;
    }
    else {

      Boolean cond_15 = null;
      if ((val instanceof Record)) 
        cond_15 = new Boolean(((Object) val instanceof SEM.SEQ));
      else 
        cond_15 = new Boolean(false);
      if (cond_15.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NONEMPTY_uSEQ_uEXPECTED));
        SEM.NUM rexpr_20 = null;
        rexpr_20 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
        return (SEM.VAL) rexpr_20;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SEQ_uEXPECTED));
        SEM.NUM rexpr_13 = null;
        rexpr_13 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
        return (SEM.VAL) rexpr_13;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalHd#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalElems#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalElems (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.SEQ));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_10 = null;
      HashSet tmpVar_11 = new HashSet();
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      HashSet set_14 = new HashSet();
      Enumeration enm_15 = ((Vector) unArg_12).elements();
      while ( enm_15.hasMoreElements())
        set_14.add(enm_15.nextElement());
      tmpVar_11 = set_14;
      rexpr_10 = new SEM.SET(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SEQ_uEXPECTED));
      SEM.SET rexpr_8 = null;
      rexpr_8 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalElems#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalInds#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalInds (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.SEQ));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_10 = null;
      HashSet tmpVar_11 = new HashSet();
      HashSet res_s_12 = new HashSet();
      {

        HashSet e_set_16 = new HashSet();
        Object unArg_17 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            unArg_17 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              unArg_17 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                unArg_17 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  unArg_17 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    unArg_17 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      unArg_17 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        unArg_17 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          unArg_17 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            unArg_17 = ((SEM.NUM) val).v;
                          else 
                            unArg_17 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet riseq_19 = new HashSet();
        int max_20 = ((Vector) unArg_17).size();
        for (int i_21 = 1; i_21 <= max_20; i_21++) 
          riseq_19.add(new Long(i_21));
        e_set_16 = riseq_19;
        Long i = null;
        {
          for (Iterator enm_23 = e_set_16.iterator(); enm_23.hasNext(); ) {

            Long elem_22 = UTIL.NumberToLong(enm_23.next());
            i = elem_22;
            SEM.NUM res_s_13 = null;
            res_s_13 = new SEM.NUM(UTIL.NumberToReal(i));
            res_s_12.add(res_s_13);
          }
        }
      }
      tmpVar_11 = res_s_12;
      rexpr_10 = new SEM.SET(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SEQ_uEXPECTED));
      SEM.SET rexpr_8 = null;
      rexpr_8 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalInds#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalTl#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalTl (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    if ((val instanceof Record)) 
      var1_4 = new Boolean(((Object) val instanceof SEM.SEQ));
    else 
      var1_4 = new Boolean(false);
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_6 = null;
        Object var1_7 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            var1_7 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              var1_7 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                var1_7 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  var1_7 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    var1_7 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      var1_7 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        var1_7 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          var1_7 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            var1_7 = ((SEM.NUM) val).v;
                          else 
                            var1_7 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        var2_6 = new Boolean(!UTIL.equals(var1_7, new Vector()));
        cond_3 = var2_6;
      }
    }
    if (cond_3.booleanValue()) {

      SEM.SEQ rexpr_22 = null;
      Vector tmpVar_23 = null;
      Object unArg_24 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_24 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_24 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_24 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_24 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_24 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_24 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_24 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_24 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_24 = ((SEM.NUM) val).v;
                        else 
                          unArg_24 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_23 = new Vector(((Vector) unArg_24).subList(1, ((Vector) unArg_24).size()));
      rexpr_22 = new SEM.SEQ(tmpVar_23);
      return (SEM.VAL) rexpr_22;
    }
    else {

      Boolean cond_15 = null;
      if ((val instanceof Record)) 
        cond_15 = new Boolean(((Object) val instanceof SEM.SEQ));
      else 
        cond_15 = new Boolean(false);
      if (cond_15.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NONEMPTY_uSEQ_uEXPECTED));
        SEM.NUM rexpr_20 = null;
        rexpr_20 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
        return (SEM.VAL) rexpr_20;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
        SEM.BOOL rexpr_13 = null;
        rexpr_13 = new SEM.BOOL(new Boolean(true));
        return (SEM.VAL) rexpr_13;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalTl#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalCard#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalCard (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.SET));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.NUM rexpr_10 = null;
      Long tmpVar_11 = null;
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_11 = new Long(((HashSet) unArg_12).size());
      rexpr_10 = new SEM.NUM(UTIL.NumberToReal(tmpVar_11));
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.NUM rexpr_8 = null;
      rexpr_8 = new SEM.NUM(UTIL.NumberToReal(new Long(0)));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalCard#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalDUnion#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalDUnion (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    if ((val instanceof Record)) 
      var1_4 = new Boolean(((Object) val instanceof SEM.SET));
    else 
      var1_4 = new Boolean(false);
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_6 = null;
        boolean tmpQuant_7 = true;
        {

          boolean succ_10 = true;
          Object e_set_11 = null;
          if ((val instanceof Record)) 
            if ((val instanceof SEM.TUPLE)) 
              e_set_11 = ((SEM.TUPLE) val).v;
            else 
              if ((val instanceof SEM.TOKEN)) 
                e_set_11 = ((SEM.TOKEN) val).v;
              else 
                if ((val instanceof SEM.QUOTE)) 
                  e_set_11 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
                else 
                  if ((val instanceof SEM.CHAR)) 
                    e_set_11 = ((SEM.CHAR) val).v;
                  else 
                    if ((val instanceof SEM.BOOL)) 
                      e_set_11 = ((SEM.BOOL) val).v;
                    else 
                      if ((val instanceof SEM.SET)) 
                        e_set_11 = ((SEM.SET) val).v;
                      else 
                        if ((val instanceof SEM.SEQ)) 
                          e_set_11 = ((SEM.SEQ) val).v;
                        else 
                          if ((val instanceof SEM.REC)) 
                            e_set_11 = ((SEM.REC) val).v;
                          else 
                            if ((val instanceof SEM.NUM)) 
                              e_set_11 = ((SEM.NUM) val).v;
                            else 
                              e_set_11 = ((SEM.MAP) val).v;
          else 
            UTIL.RunTime("Run-Time Error:A record was expected");
          HashSet e1_set_13 = new HashSet();
          if ((e_set_11 instanceof HashSet)) 
            e1_set_13 = (HashSet) e_set_11;
          else 
            UTIL.RunTime("Run-Time Error:A set was expected");
          SEM.VAL s = null;
          {
            for (Iterator enm_15 = e1_set_13.iterator(); enm_15.hasNext() && tmpQuant_7; ) {

              Object elem_14 = enm_15.next();
              succ_10 = true;
              if (new Boolean((elem_14 instanceof Record)).booleanValue()) 
                s = (SEM.VAL) elem_14;
              else 
                succ_10 = false;
              if (succ_10) {

                Boolean pred_8 = null;
                if ((s instanceof Record)) 
                  pred_8 = new Boolean(((Object) s instanceof SEM.SET));
                else 
                  pred_8 = new Boolean(false);
                if (!pred_8.booleanValue()) 
                  tmpQuant_7 = false;
              }
            }
          }
        }
        var2_6 = new Boolean(tmpQuant_7);
        cond_3 = var2_6;
      }
    }
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_28 = null;
      HashSet tmpVar_29 = new HashSet();
      HashSet unArg_30 = new HashSet();
      HashSet res_s_31 = new HashSet();
      {

        boolean succ_34 = true;
        Object e_set_35 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            e_set_35 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              e_set_35 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                e_set_35 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  e_set_35 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    e_set_35 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      e_set_35 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        e_set_35 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          e_set_35 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            e_set_35 = ((SEM.NUM) val).v;
                          else 
                            e_set_35 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet e1_set_37 = new HashSet();
        if ((e_set_35 instanceof HashSet)) 
          e1_set_37 = (HashSet) e_set_35;
        else 
          UTIL.RunTime("Run-Time Error:A set was expected");
        SEM.VAL s = null;
        {
          for (Iterator enm_39 = e1_set_37.iterator(); enm_39.hasNext(); ) {

            Object elem_38 = enm_39.next();
            succ_34 = true;
            if (new Boolean((elem_38 instanceof Record)).booleanValue()) 
              s = (SEM.VAL) elem_38;
            else 
              succ_34 = false;
            if (succ_34) {

              Object res_s_32 = null;
              if ((s instanceof Record)) 
                if ((s instanceof SEM.TUPLE)) 
                  res_s_32 = ((SEM.TUPLE) s).v;
                else 
                  if ((s instanceof SEM.TOKEN)) 
                    res_s_32 = ((SEM.TOKEN) s).v;
                  else 
                    if ((s instanceof SEM.QUOTE)) 
                      res_s_32 = UTIL.ConvertToList(((SEM.QUOTE) s).v);
                    else 
                      if ((s instanceof SEM.CHAR)) 
                        res_s_32 = ((SEM.CHAR) s).v;
                      else 
                        if ((s instanceof SEM.BOOL)) 
                          res_s_32 = ((SEM.BOOL) s).v;
                        else 
                          if ((s instanceof SEM.SET)) 
                            res_s_32 = ((SEM.SET) s).v;
                          else 
                            if ((s instanceof SEM.SEQ)) 
                              res_s_32 = ((SEM.SEQ) s).v;
                            else 
                              if ((s instanceof SEM.REC)) 
                                res_s_32 = ((SEM.REC) s).v;
                              else 
                                if ((s instanceof SEM.NUM)) 
                                  res_s_32 = ((SEM.NUM) s).v;
                                else 
                                  res_s_32 = ((SEM.MAP) s).v;
              else 
                UTIL.RunTime("Run-Time Error:A record was expected");
              res_s_31.add(res_s_32);
            }
          }
        }
      }
      unArg_30 = res_s_31;
      HashSet rduset_40 = new HashSet();
      for (Iterator enm_42 = unArg_30.iterator(); enm_42.hasNext(); ) {

        Object e_41 = enm_42.next();
        rduset_40.addAll((HashSet) e_41);
      }
      tmpVar_29 = rduset_40;
      rexpr_28 = new SEM.SET(tmpVar_29);
      return (SEM.VAL) rexpr_28;
    }
    else {

      Boolean cond_21 = null;
      if ((val instanceof Record)) 
        cond_21 = new Boolean(((Object) val instanceof SEM.SET));
      else 
        cond_21 = new Boolean(false);
      if (cond_21.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
        SEM.NUM rexpr_26 = null;
        rexpr_26 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
        return (SEM.VAL) rexpr_26;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ALL_uSETS_uEXPECTED));
        SEM.NUM rexpr_19 = null;
        rexpr_19 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
        return (SEM.VAL) rexpr_19;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalDUnion#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalPower#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalPower (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.SET));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_10 = null;
      HashSet tmpVar_11 = new HashSet();
      HashSet res_s_12 = new HashSet();
      {

        HashSet e_set_16 = new HashSet();
        Object unArg_17 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            unArg_17 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              unArg_17 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                unArg_17 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  unArg_17 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    unArg_17 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      unArg_17 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        unArg_17 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          unArg_17 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            unArg_17 = ((SEM.NUM) val).v;
                          else 
                            unArg_17 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet rpowset_19 = new HashSet();
        int powcard_21 = (int) Math.pow(2, ((HashSet) unArg_17).size());
        if (((HashSet) unArg_17).size() > 25) 
          UTIL.RunTime("Run-Time Error:Power: Set too big");
        for (int ii_22 = 0; ii_22 < powcard_21; ii_22++) {

          Object tmpg_20;
          HashSet tmps_23 = new HashSet();
          int jj_24 = 0;
          for (Iterator bb_25 = ((HashSet) unArg_17).iterator(); bb_25.hasNext(); ) {

            tmpg_20 = bb_25.next();
            if ((ii_22 & 1 << jj_24) == 0) 
              tmps_23.add(tmpg_20);
            jj_24++;
          }
          rpowset_19.add(tmps_23);
        }
        e_set_16 = rpowset_19;
        HashSet s = new HashSet();
        {
          for (Iterator enm_27 = e_set_16.iterator(); enm_27.hasNext(); ) {

            HashSet elem_26 = (HashSet) enm_27.next();
            s = elem_26;
            SEM.SET res_s_13 = null;
            res_s_13 = new SEM.SET(s);
            res_s_12.add(res_s_13);
          }
        }
      }
      tmpVar_11 = res_s_12;
      rexpr_10 = new SEM.SET(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
      SEM.SET rexpr_8 = null;
      rexpr_8 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalPower#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalLen#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalLen (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.SEQ));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.NUM rexpr_10 = null;
      Long tmpVar_11 = null;
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_11 = new Long(((Vector) unArg_12).size());
      rexpr_10 = new SEM.NUM(UTIL.NumberToReal(tmpVar_11));
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SEQ_uEXPECTED));
      SEM.NUM rexpr_8 = null;
      rexpr_8 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalLen#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalUPlus#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalUPlus (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.NUM));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) 
      return (SEM.VAL) val;
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_8 = null;
      rexpr_8 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalUPlus#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalDom#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalDom (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.MAP));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_10 = null;
      HashSet tmpVar_11 = new HashSet();
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_11.clear();
      tmpVar_11.addAll(((HashMap) unArg_12).keySet());
      rexpr_10 = new SEM.SET(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
      SEM.MAP rexpr_8 = null;
      rexpr_8 = new SEM.MAP(new HashMap());
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalDom#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalMerge#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalMerge (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    if ((val instanceof Record)) 
      var1_4 = new Boolean(((Object) val instanceof SEM.SET));
    else 
      var1_4 = new Boolean(false);
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_6 = null;
        boolean tmpQuant_7 = true;
        {

          boolean succ_10 = true;
          Object e_set_11 = null;
          if ((val instanceof Record)) 
            if ((val instanceof SEM.TUPLE)) 
              e_set_11 = ((SEM.TUPLE) val).v;
            else 
              if ((val instanceof SEM.TOKEN)) 
                e_set_11 = ((SEM.TOKEN) val).v;
              else 
                if ((val instanceof SEM.QUOTE)) 
                  e_set_11 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
                else 
                  if ((val instanceof SEM.CHAR)) 
                    e_set_11 = ((SEM.CHAR) val).v;
                  else 
                    if ((val instanceof SEM.BOOL)) 
                      e_set_11 = ((SEM.BOOL) val).v;
                    else 
                      if ((val instanceof SEM.SET)) 
                        e_set_11 = ((SEM.SET) val).v;
                      else 
                        if ((val instanceof SEM.SEQ)) 
                          e_set_11 = ((SEM.SEQ) val).v;
                        else 
                          if ((val instanceof SEM.REC)) 
                            e_set_11 = ((SEM.REC) val).v;
                          else 
                            if ((val instanceof SEM.NUM)) 
                              e_set_11 = ((SEM.NUM) val).v;
                            else 
                              e_set_11 = ((SEM.MAP) val).v;
          else 
            UTIL.RunTime("Run-Time Error:A record was expected");
          HashSet e1_set_13 = new HashSet();
          if ((e_set_11 instanceof HashSet)) 
            e1_set_13 = (HashSet) e_set_11;
          else 
            UTIL.RunTime("Run-Time Error:A set was expected");
          SEM.VAL m = null;
          {
            for (Iterator enm_15 = e1_set_13.iterator(); enm_15.hasNext() && tmpQuant_7; ) {

              Object elem_14 = enm_15.next();
              succ_10 = true;
              if (new Boolean((elem_14 instanceof Record)).booleanValue()) 
                m = (SEM.VAL) elem_14;
              else 
                succ_10 = false;
              if (succ_10) {

                Boolean pred_8 = null;
                if ((m instanceof Record)) 
                  pred_8 = new Boolean(((Object) m instanceof SEM.MAP));
                else 
                  pred_8 = new Boolean(false);
                if (!pred_8.booleanValue()) 
                  tmpQuant_7 = false;
              }
            }
          }
        }
        var2_6 = new Boolean(tmpQuant_7);
        cond_3 = var2_6;
      }
    }
    if (cond_3.booleanValue()) {

      SEM.MAP rexpr_28 = null;
      HashMap tmpVar_29 = new HashMap();
      HashSet unArg_30 = new HashSet();
      HashSet res_s_31 = new HashSet();
      {

        boolean succ_34 = true;
        Object e_set_35 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            e_set_35 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              e_set_35 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                e_set_35 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  e_set_35 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    e_set_35 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      e_set_35 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        e_set_35 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          e_set_35 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            e_set_35 = ((SEM.NUM) val).v;
                          else 
                            e_set_35 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet e1_set_37 = new HashSet();
        if ((e_set_35 instanceof HashSet)) 
          e1_set_37 = (HashSet) e_set_35;
        else 
          UTIL.RunTime("Run-Time Error:A set was expected");
        SEM.VAL m = null;
        {
          for (Iterator enm_39 = e1_set_37.iterator(); enm_39.hasNext(); ) {

            Object elem_38 = enm_39.next();
            succ_34 = true;
            if (new Boolean((elem_38 instanceof Record)).booleanValue()) 
              m = (SEM.VAL) elem_38;
            else 
              succ_34 = false;
            if (succ_34) {

              Object res_s_32 = null;
              if ((m instanceof Record)) 
                if ((m instanceof SEM.TUPLE)) 
                  res_s_32 = ((SEM.TUPLE) m).v;
                else 
                  if ((m instanceof SEM.TOKEN)) 
                    res_s_32 = ((SEM.TOKEN) m).v;
                  else 
                    if ((m instanceof SEM.QUOTE)) 
                      res_s_32 = UTIL.ConvertToList(((SEM.QUOTE) m).v);
                    else 
                      if ((m instanceof SEM.CHAR)) 
                        res_s_32 = ((SEM.CHAR) m).v;
                      else 
                        if ((m instanceof SEM.BOOL)) 
                          res_s_32 = ((SEM.BOOL) m).v;
                        else 
                          if ((m instanceof SEM.SET)) 
                            res_s_32 = ((SEM.SET) m).v;
                          else 
                            if ((m instanceof SEM.SEQ)) 
                              res_s_32 = ((SEM.SEQ) m).v;
                            else 
                              if ((m instanceof SEM.REC)) 
                                res_s_32 = ((SEM.REC) m).v;
                              else 
                                if ((m instanceof SEM.NUM)) 
                                  res_s_32 = ((SEM.NUM) m).v;
                                else 
                                  res_s_32 = ((SEM.MAP) m).v;
              else 
                UTIL.RunTime("Run-Time Error:A record was expected");
              res_s_31.add(res_s_32);
            }
          }
        }
      }
      unArg_30 = res_s_31;
      HashMap rdmmap_40 = new HashMap();
      for (Iterator enm_47 = unArg_30.iterator(); enm_47.hasNext(); ) {

        Object e_41 = enm_47.next();
        if (!(e_41 instanceof Map)) 
          UTIL.RunTime("Run-Time Error:A map was expected");
        HashMap tmp_42 = (HashMap) e_41;
        HashSet eq_dom_43 = new HashSet();
        eq_dom_43.addAll(rdmmap_40.keySet());
        eq_dom_43.retainAll(tmp_42.keySet());
        boolean all_dup_eq_44 = true;
        for (Iterator enm_46 = eq_dom_43.iterator(); enm_46.hasNext() && all_dup_eq_44; ) {

          SEM.VAL d_45 = (SEM.VAL) enm_46.next();
          all_dup_eq_44 = ((SEM.VAL) rdmmap_40.get(d_45)).equals((SEM.VAL) tmp_42.get(d_45));
        }
        if (!all_dup_eq_44) 
          UTIL.RunTime("Run-Time Error:Duplicate entries for \'merge\' had different values");
        rdmmap_40.putAll(tmp_42);
      }
      tmpVar_29 = rdmmap_40;
      rexpr_28 = new SEM.MAP(tmpVar_29);
      return (SEM.VAL) rexpr_28;
    }
    else {

      Boolean cond_21 = null;
      if ((val instanceof Record)) 
        cond_21 = new Boolean(((Object) val instanceof SEM.SET));
      else 
        cond_21 = new Boolean(false);
      if (cond_21.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
        SEM.MAP rexpr_26 = null;
        rexpr_26 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_26;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ALL_uMAPS_uEXPECTED));
        SEM.MAP rexpr_19 = null;
        rexpr_19 = new SEM.MAP(new HashMap());
        return (SEM.VAL) rexpr_19;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalMerge#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalDInter#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalDInter (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    if ((val instanceof Record)) 
      var1_4 = new Boolean(((Object) val instanceof SEM.SET));
    else 
      var1_4 = new Boolean(false);
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_6 = null;
        boolean tmpQuant_7 = true;
        {

          boolean succ_10 = true;
          Object e_set_11 = null;
          if ((val instanceof Record)) 
            if ((val instanceof SEM.TUPLE)) 
              e_set_11 = ((SEM.TUPLE) val).v;
            else 
              if ((val instanceof SEM.TOKEN)) 
                e_set_11 = ((SEM.TOKEN) val).v;
              else 
                if ((val instanceof SEM.QUOTE)) 
                  e_set_11 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
                else 
                  if ((val instanceof SEM.CHAR)) 
                    e_set_11 = ((SEM.CHAR) val).v;
                  else 
                    if ((val instanceof SEM.BOOL)) 
                      e_set_11 = ((SEM.BOOL) val).v;
                    else 
                      if ((val instanceof SEM.SET)) 
                        e_set_11 = ((SEM.SET) val).v;
                      else 
                        if ((val instanceof SEM.SEQ)) 
                          e_set_11 = ((SEM.SEQ) val).v;
                        else 
                          if ((val instanceof SEM.REC)) 
                            e_set_11 = ((SEM.REC) val).v;
                          else 
                            if ((val instanceof SEM.NUM)) 
                              e_set_11 = ((SEM.NUM) val).v;
                            else 
                              e_set_11 = ((SEM.MAP) val).v;
          else 
            UTIL.RunTime("Run-Time Error:A record was expected");
          HashSet e1_set_13 = new HashSet();
          if ((e_set_11 instanceof HashSet)) 
            e1_set_13 = (HashSet) e_set_11;
          else 
            UTIL.RunTime("Run-Time Error:A set was expected");
          SEM.VAL s = null;
          {
            for (Iterator enm_15 = e1_set_13.iterator(); enm_15.hasNext() && tmpQuant_7; ) {

              Object elem_14 = enm_15.next();
              succ_10 = true;
              if (new Boolean((elem_14 instanceof Record)).booleanValue()) 
                s = (SEM.VAL) elem_14;
              else 
                succ_10 = false;
              if (succ_10) {

                Boolean pred_8 = null;
                if ((s instanceof Record)) 
                  pred_8 = new Boolean(((Object) s instanceof SEM.SET));
                else 
                  pred_8 = new Boolean(false);
                if (!pred_8.booleanValue()) 
                  tmpQuant_7 = false;
              }
            }
          }
        }
        var2_6 = new Boolean(tmpQuant_7);
        cond_3 = var2_6;
      }
    }
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_28 = null;
      HashSet tmpVar_29 = new HashSet();
      HashSet unArg_30 = new HashSet();
      HashSet res_s_31 = new HashSet();
      {

        boolean succ_34 = true;
        Object e_set_35 = null;
        if ((val instanceof Record)) 
          if ((val instanceof SEM.TUPLE)) 
            e_set_35 = ((SEM.TUPLE) val).v;
          else 
            if ((val instanceof SEM.TOKEN)) 
              e_set_35 = ((SEM.TOKEN) val).v;
            else 
              if ((val instanceof SEM.QUOTE)) 
                e_set_35 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
              else 
                if ((val instanceof SEM.CHAR)) 
                  e_set_35 = ((SEM.CHAR) val).v;
                else 
                  if ((val instanceof SEM.BOOL)) 
                    e_set_35 = ((SEM.BOOL) val).v;
                  else 
                    if ((val instanceof SEM.SET)) 
                      e_set_35 = ((SEM.SET) val).v;
                    else 
                      if ((val instanceof SEM.SEQ)) 
                        e_set_35 = ((SEM.SEQ) val).v;
                      else 
                        if ((val instanceof SEM.REC)) 
                          e_set_35 = ((SEM.REC) val).v;
                        else 
                          if ((val instanceof SEM.NUM)) 
                            e_set_35 = ((SEM.NUM) val).v;
                          else 
                            e_set_35 = ((SEM.MAP) val).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet e1_set_37 = new HashSet();
        if ((e_set_35 instanceof HashSet)) 
          e1_set_37 = (HashSet) e_set_35;
        else 
          UTIL.RunTime("Run-Time Error:A set was expected");
        SEM.VAL s = null;
        {
          for (Iterator enm_39 = e1_set_37.iterator(); enm_39.hasNext(); ) {

            Object elem_38 = enm_39.next();
            succ_34 = true;
            if (new Boolean((elem_38 instanceof Record)).booleanValue()) 
              s = (SEM.VAL) elem_38;
            else 
              succ_34 = false;
            if (succ_34) {

              Object res_s_32 = null;
              if ((s instanceof Record)) 
                if ((s instanceof SEM.TUPLE)) 
                  res_s_32 = ((SEM.TUPLE) s).v;
                else 
                  if ((s instanceof SEM.TOKEN)) 
                    res_s_32 = ((SEM.TOKEN) s).v;
                  else 
                    if ((s instanceof SEM.QUOTE)) 
                      res_s_32 = UTIL.ConvertToList(((SEM.QUOTE) s).v);
                    else 
                      if ((s instanceof SEM.CHAR)) 
                        res_s_32 = ((SEM.CHAR) s).v;
                      else 
                        if ((s instanceof SEM.BOOL)) 
                          res_s_32 = ((SEM.BOOL) s).v;
                        else 
                          if ((s instanceof SEM.SET)) 
                            res_s_32 = ((SEM.SET) s).v;
                          else 
                            if ((s instanceof SEM.SEQ)) 
                              res_s_32 = ((SEM.SEQ) s).v;
                            else 
                              if ((s instanceof SEM.REC)) 
                                res_s_32 = ((SEM.REC) s).v;
                              else 
                                if ((s instanceof SEM.NUM)) 
                                  res_s_32 = ((SEM.NUM) s).v;
                                else 
                                  res_s_32 = ((SEM.MAP) s).v;
              else 
                UTIL.RunTime("Run-Time Error:A record was expected");
              res_s_31.add(res_s_32);
            }
          }
        }
      }
      unArg_30 = res_s_31;
      HashSet rdiset_40 = (HashSet) ((HashSet) (Object) unArg_30.iterator().next()).clone();
      for (Iterator enm_42 = unArg_30.iterator(); enm_42.hasNext(); ) {

        Object e_41 = enm_42.next();
        rdiset_40.retainAll((HashSet) e_41);
      }
      tmpVar_29 = rdiset_40;
      rexpr_28 = new SEM.SET(tmpVar_29);
      return (SEM.VAL) rexpr_28;
    }
    else {

      Boolean cond_21 = null;
      if ((val instanceof Record)) 
        cond_21 = new Boolean(((Object) val instanceof SEM.SET));
      else 
        cond_21 = new Boolean(false);
      if (cond_21.booleanValue()) {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.SET_uEXPECTED));
        SEM.SET rexpr_26 = null;
        rexpr_26 = new SEM.SET(new HashSet());
        return (SEM.VAL) rexpr_26;
      }
      else {

        errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ALL_uSETS_uEXPECTED));
        SEM.SET rexpr_19 = null;
        rexpr_19 = new SEM.SET(new HashSet());
        return (SEM.VAL) rexpr_19;
      }
    }
  }
// ***** VDMTOOLS END Name=EvalDInter#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalNot#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalNot (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.BOOL));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.BOOL rexpr_10 = null;
      Boolean tmpVar_11 = null;
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if ((unArg_12 instanceof Boolean)) 
        tmpVar_11 = new Boolean(!((Boolean) unArg_12).booleanValue());
      else 
        UTIL.RunTime("Run-Time Error:A boolean was expected");
      rexpr_10 = new SEM.BOOL(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.BOOL_uEXPECTED));
      SEM.BOOL rexpr_8 = null;
      rexpr_8 = new SEM.BOOL(new Boolean(true));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalNot#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalUMinus#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalUMinus (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.NUM));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.NUM rexpr_10 = null;
      Double tmpVar_11 = null;
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!(unArg_12 instanceof Number)) 
        UTIL.RunTime("Run-Time Error:A number was expected");
      else 
        tmpVar_11 = new Double(-((Number) unArg_12).doubleValue());
      rexpr_10 = new SEM.NUM(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_8 = null;
      rexpr_8 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalUMinus#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalRng#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalRng (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.MAP));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.SET rexpr_10 = null;
      HashSet tmpVar_11 = new HashSet();
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      tmpVar_11.clear();
      tmpVar_11.addAll(((HashMap) unArg_12).values());
      rexpr_10 = new SEM.SET(tmpVar_11);
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uEXPECTED));
      SEM.SET rexpr_8 = null;
      rexpr_8 = new SEM.SET(new HashSet());
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalRng#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalFloor#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalFloor (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    if ((val instanceof Record)) 
      cond_3 = new Boolean(((Object) val instanceof SEM.NUM));
    else 
      cond_3 = new Boolean(false);
    if (cond_3.booleanValue()) {

      SEM.NUM rexpr_10 = null;
      Long tmpVar_11 = null;
      Object unArg_12 = null;
      if ((val instanceof Record)) 
        if ((val instanceof SEM.TUPLE)) 
          unArg_12 = ((SEM.TUPLE) val).v;
        else 
          if ((val instanceof SEM.TOKEN)) 
            unArg_12 = ((SEM.TOKEN) val).v;
          else 
            if ((val instanceof SEM.QUOTE)) 
              unArg_12 = UTIL.ConvertToList(((SEM.QUOTE) val).v);
            else 
              if ((val instanceof SEM.CHAR)) 
                unArg_12 = ((SEM.CHAR) val).v;
              else 
                if ((val instanceof SEM.BOOL)) 
                  unArg_12 = ((SEM.BOOL) val).v;
                else 
                  if ((val instanceof SEM.SET)) 
                    unArg_12 = ((SEM.SET) val).v;
                  else 
                    if ((val instanceof SEM.SEQ)) 
                      unArg_12 = ((SEM.SEQ) val).v;
                    else 
                      if ((val instanceof SEM.REC)) 
                        unArg_12 = ((SEM.REC) val).v;
                      else 
                        if ((val instanceof SEM.NUM)) 
                          unArg_12 = ((SEM.NUM) val).v;
                        else 
                          unArg_12 = ((SEM.MAP) val).v;
      else 
        UTIL.RunTime("Run-Time Error:A record was expected");
      if (!(unArg_12 instanceof Number)) 
        UTIL.RunTime("Run-Time Error:A number was expected");
      else {

        double tmp_14 = ((Number) unArg_12).doubleValue();
        tmpVar_11 = new Long(new Double(Math.floor(tmp_14)).intValue());
      }
      rexpr_10 = new SEM.NUM(UTIL.NumberToReal(tmpVar_11));
      return (SEM.VAL) rexpr_10;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.NUM_uEXPECTED));
      SEM.NUM rexpr_8 = null;
      rexpr_8 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=EvalFloor#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=EvalDConc#2|IOmlUnaryExpression KEEP=NO
  private SEM.VAL EvalDConc (final SEM.VAL val, final IOmlUnaryExpression expr) throws CGException {

    Boolean cond_3 = null;
    Boolean var1_4 = null;
    if ((val instanceof Record)) 
      var1_4 = new Boolean(((Object) val instanceof SEM.SEQ));
    else 
      var1_4 = new Boolean(false);
    {
      if ((cond_3 = var1_4).booleanValue()) {

        Boolean var2_6 = null;
        boolean tmpQuant_7 = true;
        {

          boolean succ_10 = true;
          Vector e_set_11 = null;
          {

            SEM.SEQ tmp1 = (SEM.SEQ) val;
            e_set_11 = (tmp1).v;
          }
          SEM.VAL s = null;
          {
            for (Iterator enm_16 = e_set_11.iterator(); enm_16.hasNext() && tmpQuant_7; ) {

              Object elem_15 = enm_16.next();
              succ_10 = true;
              if (new Boolean((elem_15 instanceof Record)).booleanValue()) 
                s = (SEM.VAL) elem_15;
              else 
                succ_10 = false;
              if (succ_10) {

                Boolean pred_8 = null;
                if ((s instanceof Record)) 
                  pred_8 = new Boolean(((Object) s instanceof SEM.SEQ));
                else 
                  pred_8 = new Boolean(false);
                if (!pred_8.booleanValue()) 
                  tmpQuant_7 = false;
              }
            }
          }
        }
        var2_6 = new Boolean(tmpQuant_7);
        cond_3 = var2_6;
      }
    }
    if (cond_3.booleanValue()) {

      SEM.SEQ tmp = (SEM.SEQ) val;
      Vector l = null;
      l = (tmp).v;
      SEM.SEQ rexpr_26 = null;
      Vector tmpVar_27 = null;
      Vector unArg_28 = null;
      {

        Vector res_l_29 = new Vector();
        HashSet resBind_s_31 = new HashSet();
        HashSet riseq_35 = new HashSet();
        int max_36 = l.size();
        for (int i_37 = 1; i_37 <= max_36; i_37++) 
          riseq_35.add(new Long(i_37));
        resBind_s_31 = riseq_35;
        Vector bind_l_30 = null;
        bind_l_30 = UTIL.Sort(resBind_s_31);
        Long i = null;
        for (Iterator enm_45 = bind_l_30.iterator(); enm_45.hasNext(); ) {

          Long e_33 = UTIL.NumberToLong(enm_45.next());
          i = e_33;
          Vector reselem_38 = null;
          {

            SEM.SEQ tmp2 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= l.size())) 
              tmp2 = (SEM.SEQ) l.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_38 = (tmp2).v;
          }
          res_l_29.add(reselem_38);
        }
        unArg_28 = res_l_29;
      }
      Vector rdcseq_46 = new Vector();
      for (Iterator enm_49 = unArg_28.iterator(); enm_49.hasNext(); ) {

        Vector e_47 = (Vector) UTIL.ConvertToList(enm_49.next());
        rdcseq_46.addAll(e_47);
      }
      tmpVar_27 = rdcseq_46;
      rexpr_26 = new SEM.SEQ(tmpVar_27);
      return (SEM.VAL) rexpr_26;
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ALL_uSEQS_uEXPECTED));
      SEM.SEQ rexpr_20 = null;
      rexpr_20 = new SEM.SEQ(new Vector());
      return (SEM.VAL) rexpr_20;
    }
  }
// ***** VDMTOOLS END Name=EvalDConc#2|IOmlUnaryExpression


// ***** VDMTOOLS START Name=evaluateNewExpression#2|IOmlNewExpression|HashMap KEEP=NO
  public SEM.VAL evaluateNewExpression (final IOmlNewExpression expr, final HashMap cxt) throws CGException {

    IOmlName clnm = null;
    clnm = (IOmlName) expr.getName();
    Vector par_ul = null;
    par_ul = expr.getExpressionList();
    Vector v_ul = null;
    {

      Vector res_l_7 = new Vector();
      HashSet resBind_s_9 = new HashSet();
      HashSet riseq_13 = new HashSet();
      int max_14 = par_ul.size();
      for (int i_15 = 1; i_15 <= max_14; i_15++) 
        riseq_13.add(new Long(i_15));
      resBind_s_9 = riseq_13;
      Vector bind_l_8 = null;
      bind_l_8 = UTIL.Sort(resBind_s_9);
      Long i = null;
      for (Iterator enm_22 = bind_l_8.iterator(); enm_22.hasNext(); ) {

        Long e_11 = UTIL.NumberToLong(enm_22.next());
        i = e_11;
        SEM.VAL reselem_16 = null;
        IOmlExpression par_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= par_ul.size())) 
          par_17 = (IOmlExpression) par_ul.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_16 = (SEM.VAL) evaluateExpression((IOmlExpression) par_17, cxt);
        res_l_7.add(reselem_16);
      }
      v_ul = res_l_7;
    }
    SEM.OBJ rexpr_23 = null;
    String tmpVar_24 = null;
    tmpVar_24 = clnm.getIdentifier();
    rexpr_23 = new SEM.OBJ(tmpVar_24, v_ul);
    return (SEM.VAL) rexpr_23;
  }
// ***** VDMTOOLS END Name=evaluateNewExpression#2|IOmlNewExpression|HashMap


// ***** VDMTOOLS START Name=evaluateIfExpression#2|IOmlIfExpression|HashMap KEEP=NO
  public SEM.VAL evaluateIfExpression (final IOmlIfExpression expr, final HashMap cxt) throws CGException {

    IOmlExpression testexpr = null;
    testexpr = (IOmlExpression) expr.getIfExpression();
    IOmlExpression thenexpr = null;
    thenexpr = (IOmlExpression) expr.getThenExpression();
    Vector elseifexpr = null;
    elseifexpr = expr.getElseifExpressionList();
    IOmlExpression elseexpr = null;
    elseexpr = (IOmlExpression) expr.getElseExpression();
    SEM.VAL testval = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) testexpr, cxt);
    Boolean cond_11 = null;
    Boolean unArg_12 = null;
    if ((testval instanceof Record)) 
      unArg_12 = new Boolean(((Object) testval instanceof SEM.BOOL));
    else 
      unArg_12 = new Boolean(false);
    cond_11 = new Boolean(!unArg_12.booleanValue());
    if (cond_11.booleanValue()) {

      UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
      return null;
    }
    else {

      Boolean cond_24 = null;
      SEM.BOOL var2_26 = null;
      var2_26 = new SEM.BOOL(new Boolean(true));
      cond_24 = new Boolean(UTIL.equals(testval, var2_26));
      if (cond_24.booleanValue()) 
        return (SEM.VAL) evaluateExpression((IOmlExpression) thenexpr, cxt);
      else {
        if (new Boolean(UTIL.equals(elseifexpr, new Vector())).booleanValue()) 
          return (SEM.VAL) evaluateExpression((IOmlExpression) elseexpr, cxt);
        else {
          return (SEM.VAL) evaluateElseIfExpression(elseifexpr, (IOmlExpression) elseexpr, cxt);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=evaluateIfExpression#2|IOmlIfExpression|HashMap


// ***** VDMTOOLS START Name=evaluateElseIfExpression#3|Vector|IOmlExpression|HashMap KEEP=NO
  public SEM.VAL evaluateElseIfExpression (final Vector elseifexpr_ul, final IOmlExpression elseexpr, final HashMap cxt) throws CGException {

    IOmlElseIfExpression first = (IOmlElseIfExpression) (IOmlElseIfExpression) elseifexpr_ul.get(0);
    IOmlExpression testexpr = null;
    testexpr = (IOmlExpression) first.getElseifExpression();
    IOmlExpression thenexpr = null;
    thenexpr = (IOmlExpression) first.getThenExpression();
    SEM.VAL testval = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) testexpr, cxt);
    Boolean cond_12 = null;
    Boolean unArg_13 = null;
    if ((testval instanceof Record)) 
      unArg_13 = new Boolean(((Object) testval instanceof SEM.BOOL));
    else 
      unArg_13 = new Boolean(false);
    cond_12 = new Boolean(!unArg_13.booleanValue());
    if (cond_12.booleanValue()) {

      UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
      return null;
    }
    else {

      Boolean cond_27 = null;
      SEM.BOOL var2_29 = null;
      var2_29 = new SEM.BOOL(new Boolean(true));
      cond_27 = new Boolean(UTIL.equals(testval, var2_29));
      if (cond_27.booleanValue()) 
        return (SEM.VAL) evaluateExpression((IOmlExpression) thenexpr, cxt);
      else {
        if (new Boolean(new Long(elseifexpr_ul.size()).intValue() == new Long(1).intValue()).booleanValue()) 
          return (SEM.VAL) evaluateExpression((IOmlExpression) elseexpr, cxt);
        else {
          return (SEM.VAL) evaluateElseIfExpression(new Vector(elseifexpr_ul.subList(1, elseifexpr_ul.size())), (IOmlExpression) elseexpr, cxt);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=evaluateElseIfExpression#3|Vector|IOmlExpression|HashMap


// ***** VDMTOOLS START Name=evaluateLetExpression#2|IOmlLetExpression|HashMap KEEP=NO
  public SEM.VAL evaluateLetExpression (final IOmlLetExpression expr, final HashMap cxt) throws CGException {

    Vector def_ul = null;
    def_ul = expr.getDefinitionList();
    IOmlExpression inexpr = null;
    inexpr = (IOmlExpression) expr.getExpression();
    HashMap cxt2 = EvalDefList(def_ul, cxt);
    return (SEM.VAL) evaluateExpression((IOmlExpression) inexpr, cxt2);
  }
// ***** VDMTOOLS END Name=evaluateLetExpression#2|IOmlLetExpression|HashMap


// ***** VDMTOOLS START Name=EvalDefList#2|Vector|HashMap KEEP=NO
  private HashMap EvalDefList (final Vector defi_ul, final HashMap cxt) throws CGException {

    HashMap cxt2 = cxt;
    {

      IOmlValueShape defi = null;
      for (Iterator enm_20 = defi_ul.iterator(); enm_20.hasNext(); ) {

        IOmlValueShape elem_4 = (IOmlValueShape) enm_20.next();
        defi = (IOmlValueShape) elem_4;
        {

          IOmlPattern pat = null;
          pat = (IOmlPattern) defi.getPattern();
          IOmlExpression tmpVal_9 = null;
          tmpVal_9 = (IOmlExpression) defi.getExpression();
          IOmlExpression expr = null;
          expr = (IOmlExpression) tmpVal_9;
          SEM.VAL tmpVal_10 = null;
          tmpVal_10 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) expr, cxt2);
          SEM.VAL val = null;
          val = (SEM.VAL) tmpVal_10;
          HashMap rhs_13 = new HashMap();
          HashMap modmap_14 = new HashMap();
          modmap_14 = PatternMatch((IOmlPattern) pat, (SEM.VAL) val);
          rhs_13 = new HashMap(cxt2);
          rhs_13.putAll(modmap_14);
          cxt2 = (HashMap) UTIL.clone(rhs_13);
        }
      }
    }
    return cxt2;
  }
// ***** VDMTOOLS END Name=EvalDefList#2|Vector|HashMap


// ***** VDMTOOLS START Name=evaluateLetBeExpression#2|IOmlLetBeExpression|HashMap KEEP=NO
  public SEM.VAL evaluateLetBeExpression (final IOmlLetBeExpression expr, final HashMap cxt) throws CGException {

    IOmlBind tmpVal_4 = null;
    tmpVal_4 = (IOmlBind) expr.getBind();
    IOmlBind bind = null;
    bind = (IOmlBind) tmpVal_4;
    IOmlExpression bestex = null;
    Boolean cond_7 = null;
    cond_7 = expr.hasBest();
    if (cond_7.booleanValue()) 
      bestex = (IOmlExpression) expr.getBest();
    else 
      bestex = null;
    IOmlExpression inexpr = null;
    inexpr = (IOmlExpression) expr.getExpression();
    Object bestval = null;
    if (new Boolean(UTIL.equals(bestex, null)).booleanValue()) 
      bestval = new SEM.BOOL(new Boolean(true));
    else 
      bestval = evaluateExpression((IOmlExpression) bestex, cxt);
    Vector cxt_ul = evalBind((IOmlBind) bind, cxt);
    {

      HashMap cxt2 = (HashMap) cxt_ul.get(0);
      HashMap tmpArg_v_25 = new HashMap();
      tmpArg_v_25 = new HashMap(cxt);
      tmpArg_v_25.putAll(cxt2);
      return (SEM.VAL) evaluateExpression((IOmlExpression) inexpr, tmpArg_v_25);
    }
  }
// ***** VDMTOOLS END Name=evaluateLetBeExpression#2|IOmlLetBeExpression|HashMap


// ***** VDMTOOLS START Name=evaluateFieldSelect#2|IOmlFieldSelect|HashMap KEEP=NO
  public SEM.VAL evaluateFieldSelect (final IOmlFieldSelect expr, final HashMap cxt) throws CGException {

    IOmlExpression argexpr = null;
    argexpr = (IOmlExpression) expr.getExpression();
    IOmlName name = null;
    name = (IOmlName) expr.getName();
    SEM.VAL tmpVal_6 = null;
    tmpVal_6 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) argexpr, cxt);
    SEM.VAL val = null;
    val = (SEM.VAL) tmpVal_6;
    String id = null;
    id = name.getIdentifier();
    Boolean cond_10 = null;
    if ((val instanceof Record)) 
      cond_10 = new Boolean(((Object) val instanceof SEM.REC));
    else 
      cond_10 = new Boolean(false);
    if (cond_10.booleanValue()) {

      SEM.VAL tmpObj_24 = null;
      tmpObj_24 = (SEM.VAL) specdefs.LookUpRecSel((SEM.REC) val, id, (IOmlFieldSelect) expr);
      return (SEM.VAL) tmpObj_24;
    }
    else {

      Boolean cond_12 = null;
      if ((val instanceof Record)) 
        cond_12 = new Boolean(((Object) val instanceof SEM.OBJ));
      else 
        cond_12 = new Boolean(false);
      if (cond_12.booleanValue()) {

        String clnm = null;
        if ((val instanceof Record)) 
          clnm = ((SEM.OBJ) val).nm;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        IOmlExpression cexpr = null;
        cexpr = (IOmlExpression) specdefs.LookUp(clnm, id);
        return (SEM.VAL) evaluateExpression((IOmlExpression) cexpr, cxt);
      }
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return null;
      }
    }
  }
// ***** VDMTOOLS END Name=evaluateFieldSelect#2|IOmlFieldSelect|HashMap


// ***** VDMTOOLS START Name=evaluateRecordConstructor#2|IOmlRecordConstructor|HashMap KEEP=NO
  public SEM.VAL evaluateRecordConstructor (final IOmlRecordConstructor expr, final HashMap cxt) throws CGException {

    IOmlName name = null;
    name = (IOmlName) expr.getName();
    Vector e_ul = null;
    e_ul = expr.getExpressionList();
    String clnm = null;
    Boolean cond_8 = null;
    cond_8 = name.hasClassIdentifier();
    if (cond_8.booleanValue()) 
      clnm = name.getClassIdentifier();
    else 
      clnm = curcl;
    String id = null;
    id = name.getIdentifier();
    Vector v_ul = null;
    {

      Vector res_l_11 = new Vector();
      HashSet resBind_s_13 = new HashSet();
      HashSet riseq_17 = new HashSet();
      int max_18 = e_ul.size();
      for (int i_19 = 1; i_19 <= max_18; i_19++) 
        riseq_17.add(new Long(i_19));
      resBind_s_13 = riseq_17;
      Vector bind_l_12 = null;
      bind_l_12 = UTIL.Sort(resBind_s_13);
      Long i = null;
      for (Iterator enm_26 = bind_l_12.iterator(); enm_26.hasNext(); ) {

        Long e_15 = UTIL.NumberToLong(enm_26.next());
        i = e_15;
        SEM.VAL reselem_20 = null;
        IOmlExpression par_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= e_ul.size())) 
          par_21 = (IOmlExpression) e_ul.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_20 = (SEM.VAL) evaluateExpression((IOmlExpression) par_21, cxt);
        res_l_11.add(reselem_20);
      }
      v_ul = res_l_11;
    }
    SEM.REC rexpr_27 = null;
    DEF.Name tmpVar_28 = null;
    tmpVar_28 = new DEF.Name(clnm, id);
    rexpr_27 = new SEM.REC(tmpVar_28, v_ul);
    return (SEM.VAL) rexpr_27;
  }
// ***** VDMTOOLS END Name=evaluateRecordConstructor#2|IOmlRecordConstructor|HashMap


// ***** VDMTOOLS START Name=evaluateTupleConstructor#2|IOmlTupleConstructor|HashMap KEEP=NO
  public SEM.VAL evaluateTupleConstructor (final IOmlTupleConstructor expr, final HashMap cxt) throws CGException {

    Vector e_ul = null;
    e_ul = expr.getExpressionList();
    Vector v_ul = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = e_ul.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_21 = bind_l_7.iterator(); enm_21.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_21.next());
        i = e_10;
        SEM.VAL reselem_15 = null;
        IOmlExpression par_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= e_ul.size())) 
          par_16 = (IOmlExpression) e_ul.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = (SEM.VAL) evaluateExpression((IOmlExpression) par_16, cxt);
        res_l_6.add(reselem_15);
      }
      v_ul = res_l_6;
    }
    SEM.TUPLE rexpr_22 = null;
    rexpr_22 = new SEM.TUPLE(v_ul);
    return (SEM.VAL) rexpr_22;
  }
// ***** VDMTOOLS END Name=evaluateTupleConstructor#2|IOmlTupleConstructor|HashMap


// ***** VDMTOOLS START Name=evaluateApplyExpression#2|IOmlApplyExpression|HashMap KEEP=NO
  public SEM.VAL evaluateApplyExpression (final IOmlApplyExpression expr, final HashMap cxt) throws CGException {

    IOmlExpression morl = null;
    morl = (IOmlExpression) expr.getExpression();
    Vector arg_ul = null;
    arg_ul = expr.getExpressionList();
    SEM.VAL tmpVal_6 = null;
    tmpVal_6 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) morl, cxt);
    SEM.VAL val = null;
    val = (SEM.VAL) tmpVal_6;
    Vector a_ul = null;
    {

      Vector res_l_10 = new Vector();
      HashSet resBind_s_12 = new HashSet();
      HashSet riseq_16 = new HashSet();
      int max_17 = arg_ul.size();
      for (int i_18 = 1; i_18 <= max_17; i_18++) 
        riseq_16.add(new Long(i_18));
      resBind_s_12 = riseq_16;
      Vector bind_l_11 = null;
      bind_l_11 = UTIL.Sort(resBind_s_12);
      Long i = null;
      for (Iterator enm_25 = bind_l_11.iterator(); enm_25.hasNext(); ) {

        Long e_14 = UTIL.NumberToLong(enm_25.next());
        i = e_14;
        SEM.VAL reselem_19 = null;
        IOmlExpression par_20 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= arg_ul.size())) 
          par_20 = (IOmlExpression) arg_ul.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_19 = (SEM.VAL) evaluateExpression((IOmlExpression) par_20, cxt);
        res_l_10.add(reselem_19);
      }
      a_ul = res_l_10;
    }
    if (new Boolean(new Long(a_ul.size()).intValue() == new Long(1).intValue()).booleanValue()) {

      SEM.VAL arg = (SEM.VAL) (SEM.VAL) a_ul.get(0);
      Boolean cond_38 = null;
      if ((val instanceof Record)) 
        cond_38 = new Boolean(((Object) val instanceof SEM.MAP));
      else 
        cond_38 = new Boolean(false);
      if (cond_38.booleanValue()) {

        SEM.MAP val2 = (SEM.MAP) val;
        HashMap v = new HashMap();
        v = (val2).v;
        Boolean cond_82 = null;
        cond_82 = new Boolean(v.containsKey(arg));
        if (cond_82.booleanValue()) {

          HashMap v2 = v;
          return (SEM.VAL) (SEM.VAL) v2.get(arg);
        }
        else {

          errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ARG_uNOT_uIN_uDOM));
          SEM.NUM rexpr_88 = null;
          rexpr_88 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
          return (SEM.VAL) rexpr_88;
        }
      }
      else {

        Boolean cond_45 = null;
        if ((val instanceof Record)) 
          cond_45 = new Boolean(((Object) val instanceof SEM.SEQ));
        else 
          cond_45 = new Boolean(false);
        if (cond_45.booleanValue()) {

          SEM.SEQ val2 = (SEM.SEQ) val;
          Vector v = null;
          v = (val2).v;
          Boolean cond_51 = null;
          Object argTmp_52 = null;
          if ((arg instanceof Record)) 
            if ((arg instanceof SEM.TUPLE)) 
              argTmp_52 = ((SEM.TUPLE) arg).v;
            else 
              if ((arg instanceof SEM.TOKEN)) 
                argTmp_52 = ((SEM.TOKEN) arg).v;
              else 
                if ((arg instanceof SEM.QUOTE)) 
                  argTmp_52 = UTIL.ConvertToList(((SEM.QUOTE) arg).v);
                else 
                  if ((arg instanceof SEM.CHAR)) 
                    argTmp_52 = ((SEM.CHAR) arg).v;
                  else 
                    if ((arg instanceof SEM.BOOL)) 
                      argTmp_52 = ((SEM.BOOL) arg).v;
                    else 
                      if ((arg instanceof SEM.SET)) 
                        argTmp_52 = ((SEM.SET) arg).v;
                      else 
                        if ((arg instanceof SEM.SEQ)) 
                          argTmp_52 = ((SEM.SEQ) arg).v;
                        else 
                          if ((arg instanceof SEM.REC)) 
                            argTmp_52 = ((SEM.REC) arg).v;
                          else 
                            if ((arg instanceof SEM.NUM)) 
                              argTmp_52 = ((SEM.NUM) arg).v;
                            else 
                              argTmp_52 = ((SEM.MAP) arg).v;
          else 
            UTIL.RunTime("Run-Time Error:A record was expected");
          cond_51 = new Boolean(UTIL.IsInteger(argTmp_52) && ((Number) argTmp_52).intValue() >= 0);
          if (cond_51.booleanValue()) {

            Vector v2 = v;
            Long v3 = null;
            if ((arg instanceof Record)) 
              if ((arg instanceof SEM.TUPLE)) 
                v3 = UTIL.NumberToLong(((SEM.TUPLE) arg).v);
              else 
                if ((arg instanceof SEM.TOKEN)) 
                  v3 = UTIL.NumberToLong(((SEM.TOKEN) arg).v);
                else 
                  if ((arg instanceof SEM.QUOTE)) 
                    v3 = UTIL.NumberToLong(((SEM.QUOTE) arg).v);
                  else 
                    if ((arg instanceof SEM.CHAR)) 
                      v3 = UTIL.NumberToLong(((SEM.CHAR) arg).v);
                    else 
                      if ((arg instanceof SEM.BOOL)) 
                        v3 = UTIL.NumberToLong(((SEM.BOOL) arg).v);
                      else 
                        if ((arg instanceof SEM.SET)) 
                          v3 = UTIL.NumberToLong(((SEM.SET) arg).v);
                        else 
                          if ((arg instanceof SEM.SEQ)) 
                            v3 = UTIL.NumberToLong(((SEM.SEQ) arg).v);
                          else 
                            if ((arg instanceof SEM.REC)) 
                              v3 = UTIL.NumberToLong(((SEM.REC) arg).v);
                            else 
                              if ((arg instanceof SEM.NUM)) 
                                v3 = UTIL.NumberToLong(((SEM.NUM) arg).v);
                              else 
                                v3 = UTIL.NumberToLong(((SEM.MAP) arg).v);
            else 
              UTIL.RunTime("Run-Time Error:A record was expected");
            Boolean cond_63 = null;
            HashSet var2_65 = new HashSet();
            HashSet riseq_67 = new HashSet();
            int max_68 = v2.size();
            for (int i_69 = 1; i_69 <= max_68; i_69++) 
              riseq_67.add(new Long(i_69));
            var2_65 = riseq_67;
            cond_63 = new Boolean(var2_65.contains(v3));
            if (cond_63.booleanValue()) {

              SEM.VAL rexpr_75 = null;
              if ((1 <= v3.intValue()) && (v3.intValue() <= v2.size())) 
                rexpr_75 = (SEM.VAL) v2.get(v3.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              return (SEM.VAL) rexpr_75;
            }
            else {

              errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ILLEGAL_uINDICES));
              SEM.NUM rexpr_73 = null;
              rexpr_73 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
              return (SEM.VAL) rexpr_73;
            }
          }
          else {

            errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.ILLEGAL_uINDICES));
            SEM.NUM rexpr_57 = null;
            rexpr_57 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
            return (SEM.VAL) rexpr_57;
          }
        }
        else {

          errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uOR_uSEQ_uEXPECTED));
          SEM.NUM rexpr_43 = null;
          rexpr_43 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
          return (SEM.VAL) rexpr_43;
        }
      }
    }
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.MAP_uOR_uSEQ_uEXPECTED));
      SEM.NUM rexpr_33 = null;
      rexpr_33 = new SEM.NUM(UTIL.NumberToReal(new Long(1)));
      return (SEM.VAL) rexpr_33;
    }
  }
// ***** VDMTOOLS END Name=evaluateApplyExpression#2|IOmlApplyExpression|HashMap


// ***** VDMTOOLS START Name=evaluateTokenExpression#2|IOmlTokenExpression|HashMap KEEP=NO
  public SEM.VAL evaluateTokenExpression (final IOmlTokenExpression texpr, final HashMap cxt) throws CGException {

    IOmlExpression tmpVal_4 = null;
    tmpVal_4 = (IOmlExpression) texpr.getExpression();
    IOmlExpression expr = null;
    expr = (IOmlExpression) tmpVal_4;
    SEM.VAL tmpVal_5 = null;
    tmpVal_5 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) expr, cxt);
    SEM.VAL val = null;
    val = (SEM.VAL) tmpVal_5;
    SEM.TOKEN rexpr_8 = null;
    rexpr_8 = new SEM.TOKEN((SEM.VAL) val);
    return (SEM.VAL) rexpr_8;
  }
// ***** VDMTOOLS END Name=evaluateTokenExpression#2|IOmlTokenExpression|HashMap


// ***** VDMTOOLS START Name=evaluateMuExpression#2|IOmlMuExpression|HashMap KEEP=NO
  public SEM.VAL evaluateMuExpression (final IOmlMuExpression expr, final HashMap cxt) throws CGException {

    IOmlExpression recexpr = null;
    recexpr = (IOmlExpression) expr.getExpression();
    Vector modlist = null;
    modlist = expr.getModifierList();
    SEM.VAL recval = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) expr, cxt);
    Boolean cond_9 = null;
    if ((recval instanceof Record)) 
      cond_9 = new Boolean(((Object) recval instanceof SEM.REC));
    else 
      cond_9 = new Boolean(false);
    if (cond_9.booleanValue()) 
      return (SEM.VAL) evaluateRecordModifier((SEM.REC) recval, modlist, (IOmlExpression) expr, cxt);
    else {

      errorLog.ReportError(expr, UTIL.ConvertToString(RTERR.REC_uEXPECTED));
      SEM.SEQ rexpr_14 = null;
      rexpr_14 = new SEM.SEQ(new Vector());
      return (SEM.VAL) rexpr_14;
    }
  }
// ***** VDMTOOLS END Name=evaluateMuExpression#2|IOmlMuExpression|HashMap


// ***** VDMTOOLS START Name=evaluateRecordModifier#4|Vector|IOmlExpression|HashMap KEEP=NO
  public SEM.REC evaluateRecordModifier (final SEM.REC val, final Vector mod_ul, final IOmlExpression expr, final HashMap cxt) throws CGException {

    SEM.REC rec = val;
    {

      IOmlRecordModifier m = null;
      for (Iterator enm_21 = mod_ul.iterator(); enm_21.hasNext(); ) {

        IOmlRecordModifier elem_6 = (IOmlRecordModifier) enm_21.next();
        m = (IOmlRecordModifier) elem_6;
        {

          String id = null;
          id = m.getIdentifier();
          IOmlExpression tmpVal_11 = null;
          tmpVal_11 = (IOmlExpression) m.getExpression();
          IOmlExpression expr_1 = null;
          expr_1 = (IOmlExpression) tmpVal_11;
          SEM.VAL tmpVal_12 = null;
          tmpVal_12 = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) expr_1, cxt);
          SEM.VAL val_1 = null;
          val_1 = (SEM.VAL) tmpVal_12;
          SEM.REC rhs_15 = null;
          rhs_15 = specdefs.UpdateRecVal(rec, id, (SEM.VAL) val_1, (IOmlExpression) expr_1);
          rec = (SEM.REC) UTIL.clone(rhs_15);
        }
      }
    }
    return rec;
  }
// ***** VDMTOOLS END Name=evaluateRecordModifier#4|Vector|IOmlExpression|HashMap


// ***** VDMTOOLS START Name=evaluateName#2|IOmlName|HashMap KEEP=NO
  public SEM.VAL evaluateName (final IOmlName expr, final HashMap cxt) throws CGException {

    String nm = null;
    nm = expr.getIdentifier();
    Boolean cond_5 = null;
    cond_5 = new Boolean(cxt.containsKey(nm));
    if (cond_5.booleanValue()) 
      return (SEM.VAL) (SEM.VAL) cxt.get(nm);
    else {

      Boolean hascl = null;
      hascl = expr.hasClassIdentifier();
      String clnm = null;
      if (hascl.booleanValue()) 
        clnm = expr.getClassIdentifier();
      else 
        clnm = curcl;
      IOmlExpression expr2 = null;
      expr2 = (IOmlExpression) specdefs.LookUp(clnm, nm);
      return (SEM.VAL) evaluateExpression((IOmlExpression) expr2, cxt);
    }
  }
// ***** VDMTOOLS END Name=evaluateName#2|IOmlName|HashMap


// ***** VDMTOOLS START Name=getValueOfSymLit#1|IOmlSymbolicLiteralExpression KEEP=NO
  public SEM.VAL getValueOfSymLit (final IOmlSymbolicLiteralExpression expr) throws CGException {

    IOmlLiteral tmpVal_3 = null;
    tmpVal_3 = (IOmlLiteral) expr.getLiteral();
    IOmlLiteral val = null;
    val = (IOmlLiteral) tmpVal_3;
    return (SEM.VAL) (SEM.VAL) getValue((IOmlLiteral) val);
  }
// ***** VDMTOOLS END Name=getValueOfSymLit#1|IOmlSymbolicLiteralExpression


// ***** VDMTOOLS START Name=getValue#1|IOmlLiteral KEEP=NO
  public SEM.VAL getValue (final IOmlLiteral lit) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlNumericLiteral))) 
        succ_2 = false;
      if (succ_2) 
        return (SEM.VAL) getValueNumeric((IOmlNumericLiteral) lit);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlRealLiteral))) 
          succ_2 = false;
        if (succ_2) 
          return (SEM.VAL) getValueReal((IOmlRealLiteral) lit);
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlBooleanLiteral))) 
            succ_2 = false;
          if (succ_2) 
            return (SEM.VAL) getValueBoolean((IOmlBooleanLiteral) lit);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlCharacterLiteral))) 
              succ_2 = false;
            if (succ_2) 
              return (SEM.VAL) getValueChar((IOmlCharacterLiteral) lit);
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlTextLiteral))) 
                succ_2 = false;
              if (succ_2) 
                return (SEM.VAL) getValueText((IOmlTextLiteral) lit);
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlQuoteLiteral))) 
                  succ_2 = false;
                if (succ_2) 
                  return (SEM.VAL) getValueQuote((IOmlQuoteLiteral) lit);
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof IOmlNilLiteral))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (SEM.VAL) getValueNil((IOmlNilLiteral) lit);
                  else {

                    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                    return null;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=getValue#1|IOmlLiteral


// ***** VDMTOOLS START Name=getValueNumeric#1|IOmlNumericLiteral KEEP=NO
  public SEM.NUM getValueNumeric (final IOmlNumericLiteral lit) throws CGException {

    SEM.NUM rexpr_2 = null;
    Long tmpVar_3 = null;
    tmpVar_3 = lit.getVal();
    rexpr_2 = new SEM.NUM(UTIL.NumberToReal(tmpVar_3));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getValueNumeric#1|IOmlNumericLiteral


// ***** VDMTOOLS START Name=getValueReal#1|IOmlRealLiteral KEEP=NO
  public SEM.NUM getValueReal (final IOmlRealLiteral lit) throws CGException {

    SEM.NUM rexpr_2 = null;
    Double tmpVar_3 = null;
    tmpVar_3 = lit.getVal();
    rexpr_2 = new SEM.NUM(tmpVar_3);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getValueReal#1|IOmlRealLiteral


// ***** VDMTOOLS START Name=getValueBoolean#1|IOmlBooleanLiteral KEEP=NO
  public SEM.BOOL getValueBoolean (final IOmlBooleanLiteral lit) throws CGException {

    SEM.BOOL rexpr_2 = null;
    Boolean tmpVar_3 = null;
    tmpVar_3 = lit.getVal();
    rexpr_2 = new SEM.BOOL(tmpVar_3);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getValueBoolean#1|IOmlBooleanLiteral


// ***** VDMTOOLS START Name=getValueChar#1|IOmlCharacterLiteral KEEP=NO
  public SEM.CHAR getValueChar (final IOmlCharacterLiteral lit) throws CGException {

    SEM.CHAR rexpr_2 = null;
    Character tmpVar_3 = null;
    tmpVar_3 = lit.getVal();
    rexpr_2 = new SEM.CHAR(tmpVar_3);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getValueChar#1|IOmlCharacterLiteral


// ***** VDMTOOLS START Name=getValueText#1|IOmlTextLiteral KEEP=YES
  static public SEM.SEQ getValueText (final IOmlTextLiteral lit) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    String str = null;
    str = tmpVal_3;
    SEM.SEQ rexpr_4 = null;
    Vector tmpVar_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      Long max_13 = new Long(str.length());
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_20 = bind_l_7.iterator(); enm_20.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_20.next());
        i = e_10;
        SEM.CHAR reselem_15 = null;
        Character tmpVar_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= str.length())) 
          tmpVar_16 = new Character(str.charAt(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = new SEM.CHAR(tmpVar_16);
        res_l_6.add(reselem_15);
      }
      tmpVar_5 = res_l_6;
    }
    rexpr_4 = new SEM.SEQ(tmpVar_5);
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=getValueText#1|IOmlTextLiteral


// ***** VDMTOOLS START Name=getValueQuote#1|IOmlQuoteLiteral KEEP=NO
  public SEM.QUOTE getValueQuote (final IOmlQuoteLiteral lit) throws CGException {

    SEM.QUOTE rexpr_2 = null;
    String tmpVar_3 = null;
    tmpVar_3 = lit.getVal();
    rexpr_2 = new SEM.QUOTE(tmpVar_3);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getValueQuote#1|IOmlQuoteLiteral


// ***** VDMTOOLS START Name=getValueNil#1|IOmlNilLiteral KEEP=NO
  public SEM.NIL getValueNil (final IOmlNilLiteral var_1_1) throws CGException {
    return new SEM.NIL();
  }
// ***** VDMTOOLS END Name=getValueNil#1|IOmlNilLiteral


// ***** VDMTOOLS START Name=evalBindList#2|Vector|HashMap KEEP=NO
  private Vector evalBindList (final Vector b_ul, final HashMap cxt) throws CGException {

    Vector varRes_3 = null;
    if (new Boolean(UTIL.equals(b_ul, new Vector())).booleanValue()) {

      varRes_3 = new Vector();
      varRes_3.add(new HashMap());
    }
    else {

      Vector c_ul1 = evalBind((IOmlBind) (IOmlBind) b_ul.get(0), cxt);
      Vector c_ul2 = evalBindList(new Vector(b_ul.subList(1, b_ul.size())), cxt);
      varRes_3 = CombineContexts(c_ul1, c_ul2);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=evalBindList#2|Vector|HashMap


// ***** VDMTOOLS START Name=evalBind#2|IOmlBind|HashMap KEEP=NO
  private Vector evalBind (final IOmlBind bind, final HashMap cxt) throws CGException {
    if (new Boolean(bind instanceof IOmlSetBind).booleanValue()) 
      return evalSetBind((IOmlSetBind) bind, cxt);
    else {

      errorLog.ReportError(bind, UTIL.ConvertToString(RTERR.TYPE_uBIND_uEVAL));
      Vector rexpr_8 = null;
      rexpr_8 = new Vector();
      rexpr_8.add(new HashMap());
      return rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=evalBind#2|IOmlBind|HashMap


// ***** VDMTOOLS START Name=evalSetBind#2|IOmlSetBind|HashMap KEEP=NO
  private Vector evalSetBind (final IOmlSetBind bind, final HashMap cxt) throws CGException {

    Vector p_ul = null;
    p_ul = bind.getPattern();
    IOmlExpression s = null;
    s = (IOmlExpression) bind.getExpression();
    SEM.VAL s_uv = (SEM.VAL) (SEM.VAL) evaluateExpression((IOmlExpression) s, cxt);
    HashSet c_ul_us = new HashSet();
    Boolean cond_11 = null;
    if ((s_uv instanceof Record)) 
      cond_11 = new Boolean(((Object) s_uv instanceof SEM.SET));
    else 
      cond_11 = new Boolean(false);
    if (cond_11.booleanValue()) {

      HashSet res_s_13 = new HashSet();
      {

        boolean succ_31 = true;
        Object e_set_32 = null;
        if ((s_uv instanceof Record)) 
          if ((s_uv instanceof SEM.TUPLE)) 
            e_set_32 = ((SEM.TUPLE) s_uv).v;
          else 
            if ((s_uv instanceof SEM.TOKEN)) 
              e_set_32 = ((SEM.TOKEN) s_uv).v;
            else 
              if ((s_uv instanceof SEM.QUOTE)) 
                e_set_32 = UTIL.ConvertToList(((SEM.QUOTE) s_uv).v);
              else 
                if ((s_uv instanceof SEM.CHAR)) 
                  e_set_32 = ((SEM.CHAR) s_uv).v;
                else 
                  if ((s_uv instanceof SEM.BOOL)) 
                    e_set_32 = ((SEM.BOOL) s_uv).v;
                  else 
                    if ((s_uv instanceof SEM.SET)) 
                      e_set_32 = ((SEM.SET) s_uv).v;
                    else 
                      if ((s_uv instanceof SEM.SEQ)) 
                        e_set_32 = ((SEM.SEQ) s_uv).v;
                      else 
                        if ((s_uv instanceof SEM.REC)) 
                          e_set_32 = ((SEM.REC) s_uv).v;
                        else 
                          if ((s_uv instanceof SEM.NUM)) 
                            e_set_32 = ((SEM.NUM) s_uv).v;
                          else 
                            e_set_32 = ((SEM.MAP) s_uv).v;
        else 
          UTIL.RunTime("Run-Time Error:A record was expected");
        HashSet e1_set_34 = new HashSet();
        if ((e_set_32 instanceof HashSet)) 
          e1_set_34 = (HashSet) e_set_32;
        else 
          UTIL.RunTime("Run-Time Error:A set was expected");
        SEM.VAL v = null;
        {
          for (Iterator enm_36 = e1_set_34.iterator(); enm_36.hasNext(); ) {

            Object elem_35 = enm_36.next();
            succ_31 = true;
            if (new Boolean((elem_35 instanceof Record)).booleanValue()) 
              v = (SEM.VAL) elem_35;
            else 
              succ_31 = false;
            if (succ_31) {

              Vector res_s_14 = null;
              {

                Vector res_l_15 = new Vector();
                HashSet resBind_s_17 = new HashSet();
                HashSet riseq_21 = new HashSet();
                int max_22 = p_ul.size();
                for (int i_23 = 1; i_23 <= max_22; i_23++) 
                  riseq_21.add(new Long(i_23));
                resBind_s_17 = riseq_21;
                Vector bind_l_16 = null;
                bind_l_16 = UTIL.Sort(resBind_s_17);
                Long i = null;
                for (Iterator enm_30 = bind_l_16.iterator(); enm_30.hasNext(); ) {

                  Long e_19 = UTIL.NumberToLong(enm_30.next());
                  i = e_19;
                  HashMap reselem_24 = new HashMap();
                  IOmlPattern par_25 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= p_ul.size())) 
                    par_25 = (IOmlPattern) p_ul.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  reselem_24 = PatternMatch((IOmlPattern) par_25, (SEM.VAL) v);
                  res_l_15.add(reselem_24);
                }
                res_s_14 = res_l_15;
              }
              res_s_13.add(res_s_14);
            }
          }
        }
      }
      c_ul_us = res_s_13;
    }
    else 
      c_ul_us = new HashSet();
    {

      Boolean cond_37 = null;
      Boolean unArg_38 = null;
      if ((s_uv instanceof Record)) 
        unArg_38 = new Boolean(((Object) s_uv instanceof SEM.SET));
      else 
        unArg_38 = new Boolean(false);
      cond_37 = new Boolean(!unArg_38.booleanValue());
      if (cond_37.booleanValue()) {

        errorLog.ReportError(bind, UTIL.ConvertToString(RTERR.TYPE_uBIND_uEVAL));
        Vector rexpr_52 = null;
        rexpr_52 = new Vector();
        rexpr_52.add(new HashMap());
        return rexpr_52;
      }
      else {

        Vector rexpr_40 = null;
        HashSet par_41 = new HashSet();
        HashSet res_s_42 = new HashSet();
        {

          Vector c_ul = null;
          {
            for (Iterator enm_48 = c_ul_us.iterator(); enm_48.hasNext(); ) {

              Vector elem_47 = (Vector) UTIL.ConvertToList(enm_48.next());
              c_ul = elem_47;
              res_s_42.add(MergeContextList(c_ul));
            }
          }
        }
        par_41 = res_s_42;
        rexpr_40 = (Vector) UTIL.ConvertToList(VDMUtil.set2seq(par_41));
        return rexpr_40;
      }
    }
  }
// ***** VDMTOOLS END Name=evalSetBind#2|IOmlSetBind|HashMap


// ***** VDMTOOLS START Name=CombineContexts#2|Vector|Vector KEEP=NO
  public Vector CombineContexts (final Vector c_ul1, final Vector c_ul2) throws CGException {

    Vector varRes_3 = null;
    Vector unArg_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = c_ul2.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_35 = bind_l_6.iterator(); enm_35.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_35.next());
        i = e_9;
        Vector reselem_14 = null;
        {

          Vector res_l_15 = new Vector();
          HashSet resBind_s_17 = new HashSet();
          HashSet riseq_21 = new HashSet();
          int max_22 = c_ul1.size();
          for (int i_23 = 1; i_23 <= max_22; i_23++) 
            riseq_21.add(new Long(i_23));
          resBind_s_17 = riseq_21;
          Vector bind_l_16 = null;
          bind_l_16 = UTIL.Sort(resBind_s_17);
          Long j = null;
          for (Iterator enm_33 = bind_l_16.iterator(); enm_33.hasNext(); ) {

            Long e_19 = UTIL.NumberToLong(enm_33.next());
            j = e_19;
            HashMap reselem_24 = new HashMap();
            HashMap seqmap_27 = new HashMap();
            if ((1 <= j.intValue()) && (j.intValue() <= c_ul1.size())) 
              seqmap_27 = (HashMap) c_ul1.get(j.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            HashMap modmap_25 = new HashMap();
            if ((1 <= i.intValue()) && (i.intValue() <= c_ul2.size())) 
              modmap_25 = (HashMap) c_ul2.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_24 = new HashMap(seqmap_27);
            reselem_24.putAll(modmap_25);
            res_l_15.add(reselem_24);
          }
          reselem_14 = res_l_15;
        }
        res_l_5.add(reselem_14);
      }
      unArg_4 = res_l_5;
    }
    Vector rdcseq_36 = new Vector();
    for (Iterator enm_39 = unArg_4.iterator(); enm_39.hasNext(); ) {

      Vector e_37 = (Vector) UTIL.ConvertToList(enm_39.next());
      rdcseq_36.addAll(e_37);
    }
    varRes_3 = rdcseq_36;
    return varRes_3;
  }
// ***** VDMTOOLS END Name=CombineContexts#2|Vector|Vector


// ***** VDMTOOLS START Name=MergeContextList#1|Vector KEEP=NO
  public HashMap MergeContextList (final Vector cxt_ul) throws CGException {

    HashMap varRes_2 = new HashMap();
    if (new Boolean(new Long(cxt_ul.size()).intValue() == new Long(1).intValue()).booleanValue()) 
      varRes_2 = (HashMap) cxt_ul.get(0);
    else {

      HashMap modmap_8 = new HashMap();
      modmap_8 = MergeContextList(new Vector(cxt_ul.subList(1, cxt_ul.size())));
      varRes_2 = new HashMap((HashMap) cxt_ul.get(0));
      varRes_2.putAll(modmap_8);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=MergeContextList#1|Vector


// ***** VDMTOOLS START Name=LenCList#1|Vector KEEP=NO
  private Long LenCList (final Vector c_ul) throws CGException {
    return new Long(c_ul.size());
  }
// ***** VDMTOOLS END Name=LenCList#1|Vector


// ***** VDMTOOLS START Name=PatternMatch#2|IOmlPattern KEEP=NO
  public HashMap PatternMatch (final IOmlPattern pat, final SEM.VAL val) throws CGException {
    if (new Boolean(pat instanceof IOmlPatternIdentifier).booleanValue()) 
      return MatchPatternId((IOmlPatternIdentifier) pat, (SEM.VAL) val);
    else {

      UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
      return new HashMap();
    }
  }
// ***** VDMTOOLS END Name=PatternMatch#2|IOmlPattern


// ***** VDMTOOLS START Name=MatchPatternId#2|IOmlPatternIdentifier KEEP=NO
  private HashMap MatchPatternId (final IOmlPatternIdentifier patid, final SEM.VAL val) throws CGException {

    HashMap varRes_3 = new HashMap();
    {

      String id = null;
      id = patid.getIdentifier();
      varRes_3 = new HashMap();
      varRes_3.put(id, val);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=MatchPatternId#2|IOmlPatternIdentifier

}
;
