\section{Expansion of Traces}

The \texttt{Expand} class is responsible for expanding trace
definitions to collections of sequences of expressions. This class
contains functionality for expansion of traces and uses evaluation of
expressions that occur inside such traces in the \texttt{Eval}
class. Finally the class contains functionality for combining
collections of different kinds of structures.

\begin{vdm_al}
class Expand is subclass of DEF


instance variables

------------------------------------------------------
-- Maximum number of repetitions of the operators 
-- + and * are defined here 
------------------------------------------------------
private zeroOrMoreMax : nat := 0;
private oneOrMoreMax : nat := 0;
private seqOfNames : seq of (seq of char) := [];
private eval : Eval;
private dfs : DEF;
private errorLog : RTERR;

cxt_l_stack : seq of seq of Eval`Context := [];
\end{vdm_al}

\subsection{Expansion of Trace ASTs}

Traces in VDM++ can be expressed in using different kinds of
constructs for choices, bindings and repetitions. Common to all of
these are that the expansion functions/operations yield a mapping from
the name of a trace (the name is a pair of the name of the class and
the name of the trace) to a set of test cases. Each test case can be
seen as a sequnce of expressions that needs to be executed after each
other to conduct the required test. The expressions are represented in
the AST form and then later these are transformed to a sequence of
chars such that these can be executed by an interpreter.

\begin{vdm_al}
types

public TraceDefExpMap = map Identifier to seq of seq of IOmlExpression

operations

public Expand : RTERR ==> Expand
Expand(errLog) == 
(
  errorLog := errLog;
  zeroOrMoreMax := 3;
  oneOrMoreMax  := 3;

);

public Expand : nat * RTERR==> Expand
Expand(unlimitedValue,errLog ) == 
(
  errorLog := errLog;
  zeroOrMoreMax := unlimitedValue;
  oneOrMoreMax  := unlimitedValue;

);

public ExpandSpecTraces : IOmlSpecifications * set of DEF`Identifier ==>
                          map Identifier to TraceDefExpMap
ExpandSpecTraces(spec,cl_s) ==
 (dcl res_m : map Identifier to TraceDefExpMap := {|->};
  dfs := new DEF(spec,errorLog);
  for cl in spec.getClassList() do
    let id    = cl.getIdentifier()
    in
      if id in set cl_s
      then res_m(id) := ExpandClassTraces(cl);
  return res_m
 );

protected ExpandClassTraces : IOmlClass ==> TraceDefExpMap
ExpandClassTraces(cl) ==
 (dcl res_m : TraceDefExpMap := {|->};
  let clid = cl.getIdentifier(),
      body = cl.getClassBody()
  in
  (errorLog.SetCurrentClass( clid);
    eval := new Eval(clid,dfs,errorLog);
    for def_l in body do
      if isofclass(IOmlTraceDefinitions,def_l)
      then res_m := res_m ++ ExpandTraceDefs(clid,def_l)
   );
  return res_m
 );

protected ExpandTraceDefs: DEF`Identifier * IOmlTraceDefinitions ==> 
                           TraceDefExpMap
ExpandTraceDefs(clid, def_l) ==
 (dcl res_m :TraceDefExpMap := {|->};
  for ntrace : OmlNamedTrace in def_l.getTraces() do
    let name = Util`GetNameOfTrace(ntrace.getName()),
        defs = ntrace.getDefs()
    in
    (
       errorLog.SetCurrentTrace( name);
      res_m(name) := ExpandTraceDef(defs,[{|->}]);
    );
  return res_m
 );

ExpandTraceDef: IOmlTraceDefinition * seq of Eval`Context ==> 
                seq of seq of IOmlExpression
ExpandTraceDef(tdef,ctx_l) ==
  if isofclass(IOmlTraceDefinitionItem,tdef)
  then ExpandTraceDefItem(tdef,ctx_l)
  elseif isofclass(IOmlTraceSequenceDefinition,tdef)
  then ExpandTraceSeqDef(tdef,ctx_l)
  else ExpandTraceChoiceDef(tdef,ctx_l);
\end{vdm_al}

A \texttt{TraceDefinitionItem} is composed of a collection of
bindings, a trace core definition and a trace repeat pattern (enabling
repetition of the trace core expressions).

In the \texttt{overture.ast} file it is defined as:
\begin{lstlisting}
TraceDefinitionItem ::
  bind    : seq of TraceBinding
  test    : TraceCoreDefinition
  regexpr : [TraceRepeatPattern];
\end{lstlisting}

At the concrete syntax level that corresponds to:

\Ruledef{trace definition}{
  \Ruleref{trace core definition} \dsep
  \Ruleref{trace bindings}, \Ruleref{trace core definition} \dsep
  \Ruleref{trace core definition}, \Ruleref{trace repeat pattern} \dsep
  \Ruleref{trace bindings}, \Ruleref{trace core definition}, 
  \Ruleref{trace repeat pattern}
}

\Ruledef{trace core definition}{
  \Ruleref{trace apply expression} \dsep
  \Ruleref{trace bracketed expression}
}

\Ruledef{trace apply expression}{
  \Ruleref{identifier}, \Lit{.}, \Ruleref{Identifier}, 
  \Lit{(}, \Ruleref{expression list}, \Lit{)}
}

\Ruledef{trace repeat pattern}{
  \Lit{*} \dsep 
  \Lit{+} \dsep
  \Lit{?} \dsep
  \Lit{\{}, \Ruleref{numeric literal}, \Lit{\}} \dsep
  \Lit{\{}, \Ruleref{numeric literal}, \Lit{,} 
  \Ruleref{numeric literal}, \Lit{\}}
} 

\Ruledef{trace bracketed expression}{
  \Lit{(}, \Ruleref{trace definition list}, \Lit{)}
}

\Ruledef{trace bindings}{
  \SeqPt{\Ruleref{trace binding}}
}

\Ruledef{trace binding}{
  \Lop{let}, \Ruleref{list of local definitions}, \Lop{in} \dsep
  \Lop{let}, \Ruleref{bind}, \Lop{in} \dsep
  \Lop{let}, \Ruleref{bind}, \Lop{be}, \Lop{st}, \Ruleref{expression}, \Lop{in}
}


\begin{vdm_al}
ExpandTraceDefItem: IOmlTraceDefinitionItem * seq of Eval`Context ==> 
                    seq of seq of IOmlExpression
ExpandTraceDefItem(tdef,ctx_l) ==
  let bind      = tdef.getBind(),
      trace     = tdef.getTest(),
      regexpr   = if tdef.hasRegexpr() then tdef.getRegexpr() else nil,
      new_ctx_l = ExpandTraceBinds(bind,ctx_l),
      expr_l_l  = ExpandTraceCoreDef(trace,new_ctx_l)
  in
    return if regexpr = nil
           then expr_l_l
           else ExpandTraceRepeatPat(regexpr,expr_l_l);

ExpandTraceSeqDef: IOmlTraceSequenceDefinition * seq of Eval`Context ==> 
                   seq of seq of IOmlExpression
ExpandTraceSeqDef(tdef,ctx_l) ==
  (dcl expr_l_l : seq of seq of IOmlExpression := [[]];
   for td in tdef.getDefs() do
     let e_l_l = ExpandTraceDef(td,ctx_l)
     in
       expr_l_l := CombineTraces(expr_l_l,e_l_l);

   return expr_l_l);

ExpandTraceChoiceDef: IOmlTraceChoiceDefinition * seq of Eval`Context ==> 
                      seq of seq of IOmlExpression
ExpandTraceChoiceDef(tdef,ctx_l) ==
  (dcl expr_l_l : seq of seq of IOmlExpression := [];
   for td in tdef.getDefs() do
     let e_l_l = ExpandTraceDef(td,ctx_l)
     in
       expr_l_l := expr_l_l ^ e_l_l;

   return expr_l_l);

ExpandTraceBinds: seq of IOmlTraceBinding * seq of Eval`Context ==> 
                  seq of Eval`Context
ExpandTraceBinds(bind_l,cxt_l) ==
  (dcl c_l : seq of Eval`Context := cxt_l;

   for bind in bind_l do
     let c_l2 =  if isofclass(IOmlTraceLetBinding,bind)
                 then ExtractLetBinding(bind,c_l)
                 else ExtractLetBeBinding(bind,c_l)
     in
       c_l := eval.CombineContexts(c_l,c_l2); 

   return c_l);

functions
  
ExpandTraceCoreDef: IOmlTraceCoreDefinition * seq of Eval`Context -> 
                    seq of seq of IOmlExpression
ExpandTraceCoreDef(tdef,cxt_l) ==
  if isofclass(IOmlTraceMethodApply,tdef)
  then ExpandTraceMethodApply(tdef,cxt_l)
  else ExpandBracketedTraceDef(tdef,cxt_l);
\end{vdm_al}

Bracketed trace definitions actually give raise to an extra level of 
complexity. The reason for this is that one needs to be able to distingush 
cases such as:
\begin{lstlisting}
  PushBeforePop : let x in set {1,3}
                  in
                    let y in set {3,8}
                    in
                      (s.Push(x); s.Push(y))
\end{lstlisting}
\noindent from 
\begin{lstlisting}
  PushBeforePop : let x in set {1,3}
                  in
                    let y in set {3,8}
                    in
                      s.Push(x); 
                  let x in set {1,3}
                  in
                    let y in set {3,8}
                    in
                      s.Push(y)
\end{lstlisting}

In the first case it is essential when combining contexts that the variables 
\texttt{x} and \texttt{y} are mapped to the same value for each subexpression
inside the trace definition enclosed inside the brackets. In the second case 
where no brackets are used it is essential to include all possible combinations
in the resulting collection of test cases.

\begin{vdm_al}
operations

ExpandBracketedTraceDef: IOmlTraceBracketedDefinition * seq of Eval`Context ==>
                         seq of seq of IOmlExpression
ExpandBracketedTraceDef(tdef,cxt_l) ==
  (PushCxt(cxt_l);
   let e_l_l = ExpandTraceDef(tdef.getDefinition(),[{|->}]),
       e_l_l2 = [ AddContextToExprList(e_l_l(i),hd cxt_l_stack) 
                | i in set inds e_l_l]
   in
     (PopCxt();
      return conc e_l_l2)
  );

functions

ExpandTraceMethodApply: IOmlTraceMethodApply * seq of Eval`Context -> 
                        seq of seq of IOmlExpression
ExpandTraceMethodApply(tdef,cxt_l) ==
  let var      = tdef.getVariableName(),
      met_nm   = tdef.getMethodName(),
      args     = tdef.getArgs(),
      fieldsel = new OmlFieldSelect(new OmlName(nil,var),
                                    new OmlName(nil,met_nm)),
      expr     = new OmlApplyExpression(fieldsel,args)
  in
    AddContextToExpr(expr,cxt_l);

operations

ExpandTraceRepeatPat: IOmlTraceRepeatPattern * seq of seq of IOmlExpression ==>
                      seq of seq of IOmlExpression
ExpandTraceRepeatPat(regexpr,expr_l_l) ==
  cases true:
    (isofclass(IOmlTraceZeroOrMore,regexpr)) -> 
        let rep = RepeatCombine(expr_l_l,1,oneOrMoreMax)
        in 
          return [[]] ^ rep,
    (isofclass(IOmlTraceOneOrMore,regexpr))  -> 
        return RepeatCombine(expr_l_l,1,oneOrMoreMax),
    (isofclass(IOmlTraceZeroOrOne,regexpr))   -> 
        return expr_l_l ^ [[]],
    (isofclass(IOmlTraceRange,regexpr))      -> 
        return ExpandTraceRange(regexpr,expr_l_l),
        others -> error
  end;

ExpandTraceRange: IOmlTraceRange * seq of seq of IOmlExpression ==>
                  seq of seq of IOmlExpression
ExpandTraceRange(regexpr, expr_l_l) ==
  let low  = regexpr.getLower().getVal(), 
      high = if regexpr.hasUpper() 
             then regexpr.getUpper().getVal() 
             else low,
      l    = if low = 0 then 1 else low,
      no   = if low = 0
             then [[]]
             else [],
      rep  = RepeatCombine(expr_l_l,l,high)
  in
   return no ^ rep;
\end{vdm_al}

There are a number of functions/operations for combining different kinds of 
collections in different ways. 

\begin{vdm_al}
operations

RepeatCombine: (seq of seq of IOmlExpression) * nat1 * nat1 ==>
               seq of seq of IOmlExpression
RepeatCombine(expr_l_l,low,high) ==
 (dcl acc_e_l_l :  seq of seq of IOmlExpression := [],
      ith_e_l_l :  seq of seq of IOmlExpression := [[]],
      i : nat1 := 1;
  while i <= high do
    let oldith = ith_e_l_l
    in
      (ith_e_l_l := conc [[ oldith(i1) ^ expr_l_l(i2)
                          | i1 in set inds oldith]
                         | i2 in set inds expr_l_l];
       if i >= low
       then acc_e_l_l := acc_e_l_l ^ ith_e_l_l;
       i := i + 1;
      );
  return Util`RemoveDublicates[seq of IOmlExpression](acc_e_l_l,{})
 );

functions

AddContextToExpr: IOmlExpression * seq of Eval`Context -> 
                  seq of seq of IOmlExpression
AddContextToExpr(expr,cxt_l) ==
  [let def_l = Context2ValShapeL(cxt_l(i))
   in
     if def_l = []
     then [expr]
     else [new OmlLetExpression(def_l, expr)]
  | i in set inds cxt_l];

AddContextToExprList: seq of IOmlExpression * seq of Eval`Context -> 
                      seq of seq of IOmlExpression
AddContextToExprList(e_l,cxt_l) ==
  [let def_l = Context2ValShapeL(cxt_l(i))
   in
     if def_l = []
     then e_l
     else [new OmlLetExpression(def_l, e_l(i))
          | i in set inds e_l]
  | i in set inds cxt_l];

Context2ValShapeL: Eval`Context -> seq of IOmlValueShape
Context2ValShapeL(cxt) ==
  if cxt = {|->}
  then []
  else let id in set dom cxt
       in
         let pat      = new OmlPatternIdentifier(id),
             val      = SEM`VAL2IOmlExpr(cxt(id)),
             valshape = new OmlValueShape(pat,nil,val),
             rest     = Context2ValShapeL({id} <-: cxt)
         in
           [valshape] ^ rest
measure SmallerContext;

SmallerContext: Eval`Context -> nat
SmallerContext(cxt) == 
  card dom cxt;

CombineTraces: (seq of seq of IOmlExpression) * 
               (seq of seq of IOmlExpression) ->
               (seq of seq of IOmlExpression)
CombineTraces(e_l_l1, e_l_l2) ==
  Util`RemoveDublicates[seq of IOmlExpression](
  conc [[ e_l_l1(i1) ^ e_l_l2(i2)
        | i1 in set inds e_l_l1]
       | i2 in set inds e_l_l2],
   {});

operations

ExtractLetBinding: IOmlTraceLetBinding * seq of Eval`Context ==> 
                   seq of Eval`Context
ExtractLetBinding(bind,cxt_l) ==
  let def_l = bind.getDefinitionList()
  in
    (dcl c_l : seq of Eval`Context := cxt_l;

     for valshape in def_l do
       let pat    = valshape.getPattern(),
           expr   = valshape.getExpression(),
           val_l  = [eval.evaluateExpression(expr,c_l(i)) 
                    | i in set inds c_l],
           newc_l = [eval.PatternMatch(pat,val_l(i))
                    | i in set inds val_l]
       in
         c_l := eval.CombineContexts(c_l,newc_l);

     return c_l);

functions
         
ExtractLetBeBinding: IOmlTraceLetBeBinding * seq of Eval`Context -> 
                     seq of Eval`Context
ExtractLetBeBinding(lbbind,cxt_l) ==
  let bind = lbbind.getBind(),
      best = if lbbind.hasBest() then lbbind.getBest() else nil
  in
    if isofclass(IOmlSetBind,bind)
    then let bestex = if best = nil
                      then new OmlSymbolicLiteralExpression(new OmlBooleanLiteral(true)) 
                      else best
         in
           ExtractLetBeSetBinding(bind,bestex,cxt_l)
    else []; -- no support with type bindings --FIXME code gen bug

operations 
ExtractLetBeSetBinding: IOmlSetBind * IOmlExpression * seq of Eval`Context ==> 
                        seq of Eval`Context
ExtractLetBeSetBinding(bind,best,cxt_l) ==
  let p_l  = bind.getPattern(),
      expr = bind.getExpression()
  in
    return conc [ let val = eval.evaluateExpression(expr,cxt_l(i)),
                      c_l_l = if is_SEM`SET(val)
                              then let l = {[eval.PatternMatch(p_l(i),v) 
                                            | i in set inds p_l]
                                           | v in set val.v}
                                   in
                                     VDMUtil`set2seq[seq1 of Eval`Context](l)
                              else []--FIXME code gen bug
                  in
                    [eval.MergeContextList(c_l_l(i2)) 
                    | i2 in set inds c_l_l
                    & let c = eval.MergeContextList([cxt_l(i)] ^ c_l_l(i2))
                      in
                        eval.evaluateExpression(best,c) = mk_SEM`BOOL(true)]
           | i in set inds cxt_l];

\end{vdm_al}


\begin{vdm_al}
--------------------------------------------------------------------
-- Expand Regular Expression  --------------------------------------
--------------------------------------------------------------------
operations

--Responsible for expanding the regexprs like +, *, ?, {n,m}
protected expandRegexpr : 
  IOmlTraceDefinitionItem ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandRegexpr(i) == 
  return expandRegexprChoose(i);


protected expandRegexprChoose : 
  IOmlTraceDefinitionItem ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandRegexprChoose(i) == 
  let r = i.getRegexpr()
  in if i.hasRegexpr() 
     then return expandSymbol(i,r) 
     else return [[i]];

	
protected expandN2M : 
  nat * 
  nat * 
  IOmlTraceDefinitionItem * 
  seq of IOmlTraceDefinitionItem ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandN2M(n,m,s,o) == 
  if n <> m 
  then return  [o] ^ expandN2M(n,m-1,s, o ^ [s]) 
  else if n = 0 
       then return [[]]
       else return [o];


protected expandSymbol : 
  IOmlTraceDefinitionItem  * 
  IOmlTraceRepeatPattern ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandSymbol(s,r) ==
  cases true:
    (isofclass(IOmlTraceZeroOrMore,r)) 
      -> return expandSymbolZeroOrMore(s,r),
    (isofclass(IOmlTraceOneOrMore,r)) 
      -> return expandSymbolOneOrMore(s,r),
    (isofclass(IOmlTraceZeroOrOne,r)) 
      -> return expandSymbolZeroOrOne(s,r),
    (isofclass(IOmlTraceRange,r)) 
      -> return expandSymbolRange(s,r),
    others
      -> return []
  end;


protected expandSymbolZeroOrMore : 
  IOmlTraceDefinitionItem * 
  IOmlTraceZeroOrMore ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandSymbolZeroOrMore(s,-) == 
  return expandN2M(0,zeroOrMoreMax,s,[s]);

        
protected expandSymbolOneOrMore : 
  IOmlTraceDefinitionItem * 
  IOmlTraceOneOrMore ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandSymbolOneOrMore(s,-) == 
  return expandN2M(1,oneOrMoreMax,s,[s]);


protected expandSymbolZeroOrOne : 
  IOmlTraceDefinitionItem * 
  IOmlTraceZeroOrOne ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandSymbolZeroOrOne(s,-) == 
  return expandN2M(0,1,s,[s]);


protected expandSymbolRange : 
  IOmlTraceDefinitionItem * 
  IOmlTraceRange ==> 
  seq of (seq of IOmlTraceDefinitionItem)
expandSymbolRange(s,t) == 
  let min = t.getLower().getVal(),
      max = getVal(min,t.getUpper())
  in return expandN2M(min,max,s,[s]);


protected getVal : 
  nat * 
  [IOmlNumericLiteral] ==> 
  nat
getVal(min,n) == 
  if n = nil 
  then return min 
  else return n.getVal();

protected getLetBeInfo : 
  IOmlTraceLetBeBinding ==> 
  map seq of char to IOmlExpression
getLetBeInfo(b) == 
  return { extractBindingVariable(b) 
           |->
           extractBindingExpression(b)
         }
pre isOfTypeSB(b);


protected isOfTypeSB : 
  IOmlTraceLetBeBinding ==> 
  bool
isOfTypeSB(b) == 
  let bind = b.getBind()
  in if isofclass(IOmlSetBind,bind) 
     then return isOfTypePattern(bind) 
     else return false;


protected isOfTypePattern : 
  IOmlSetBind ==> 
  bool
isOfTypePattern(s) == 
  let p = s.getPattern(),
      v = p(1)
  in return isofclass(IOmlPatternIdentifier,v)
pre len(s.getPattern()) = 1;


protected extractBindingVariable : 
  IOmlTraceLetBeBinding ==> 
  seq of char
extractBindingVariable(b) == 
  let bind = b.getBind()
  in return getVariable(bind)
pre is_(b.getBind(),IOmlSetBind);


protected getVariable : 
  IOmlSetBind ==> 
  seq of char
getVariable(b) == 
  let p = b.getPattern(),
      v = p(1)
  in return getVariableName(v)
pre len(b.getPattern()) = 1 
    and isofclass(IOmlPatternIdentifier,b.getPattern()(1));

protected getVariableName :
  IOmlPatternIdentifier ==>
  seq of char
getVariableName(pi) == 
  return pi.getIdentifier();

protected extractBindingExpression :
  IOmlTraceLetBeBinding ==>
  IOmlExpression
extractBindingExpression(b) ==
  let bind = b.getBind()
  in return getExpression(bind)
pre isofclass(IOmlSetBind,b.getBind());

protected getExpression :
  IOmlSetBind ==>
  IOmlExpression
getExpression(b) ==
  return b.getExpression();

protected getConstraints :
  IOmlTraceLetBeBinding ==>
  [IOmlExpression]
getConstraints(b) ==
  return b.getBest();

--------------------------------
-- Let Information ------------
--------------------------------

protected getLetInfo :
  IOmlTraceLetBinding ==>
  map seq of char to IOmlExpression
getLetInfo(b) ==
  let def_list = b.getDefinitionList()
  in return 
      { getPatternId(def_list(e).getPattern()) 
        |-> 
        def_list(e).getExpression()
      | e in set inds def_list 
        & isofclass(IOmlPatternIdentifier,def_list(e).getPattern())
      };

protected getPatternId : 
  IOmlPatternIdentifier ==> 
  seq of char
getPatternId(p) ==
 return p.getIdentifier();
\end{vdm_al}

\subsection{Popping and Pushing the Context Stack}

This is needed to be able to handle bracketed traces appropriately.

\begin{vdm_al}

PushCxt: seq of Eval`Context ==> () 
PushCxt(cxt_l) ==
  cxt_l_stack := [cxt_l] ^ cxt_l_stack;  

PopCxt: () ==> ()
PopCxt() ==
  cxt_l_stack := tl cxt_l_stack
pre not CxtStackIsEmpty();

CxtStackIsEmpty: () ==> bool
CxtStackIsEmpty() ==
  return cxt_l_stack = [];

 
-----------------------------------------
-- Error handling
-----------------------------------------
operations

public HasError : DEF`Identifier * DEF`Identifier ==> bool
HasError(clnm,trnm) ==
  return errorLog.HasError(clnm,trnm);
  
public GetErrMsg: DEF`Identifier * DEF`Identifier ==> set of RTERR`ErrMsg
GetErrMsg(clnm,trnm) ==
  return errorLog.GetErrMsg(clnm,trnm);

end Expand
\end{vdm_al}

\begin{rtinfo}
[TotalxCoverage]{vdm.tc}[Expand]
\end{rtinfo}
