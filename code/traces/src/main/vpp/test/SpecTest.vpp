class SpecTest

instance variables

  Print     : bool := true;
  exp       : Expand := new Expand();
  eval      : Eval := new Eval();
  filter    : Filtering := new Filtering();
--  io        : IO := new IO();
  ppvisitor : Oml2VppVisitor := new Oml2VppVisitor();

operations

public Run: IOmlSpecifications * seq of char ==> 
            map seq of char to seq of seq of char
Run(model,name) ==
  (--DEF`ExpandSpec(model);
   let clnm_s = ExtractClIds(model),
       tc_m_s = exp.ExpandSpecTraces(model,clnm_s),
       tc_m   = filter.fillMap(tc_m_s),
       tc_m_char = merge dunion
                   { { {clnm ^"|" ^ tnm ^ "|" ^ StdLib`ToStringInt(num) |->
                         ExprToString(tc_m(clnm)(tnm)(num))
                       | num in set dom tc_m(clnm)(tnm)}
                     | tnm in set dom tc_m(clnm)}
                   | clnm in set dom tc_m}
   in
     (if Print
      then Util`SaveCharSeqMapSeqSeq(name^".res",tc_m_char);
          
          --( Util`SetFileName(name^".res");
          --Util`PrintL("Not supported");
          
          --);
      return tc_m_char)
   );

ExprToString: seq of IOmlExpression ==> seq of seq of char
ExprToString(e_l) ==
  (dcl argexpr_l : seq of seq of char := [];
   for e in e_l do
     (ppvisitor.visitExpression(e);
      argexpr_l := argexpr_l ^ [ppvisitor.result]);
   return argexpr_l);

ExtractClIds: IOmlSpecifications ==> set of seq of char
ExtractClIds(model) ==
  (dcl clnm_s : set of seq of char := {};

   for cl in model.getClassList() do
     clnm_s := clnm_s union {cl.getIdentifier()};
   return clnm_s);

public SetPrint: bool ==> ()
SetPrint(b) ==
  Print := b;

end SpecTest
