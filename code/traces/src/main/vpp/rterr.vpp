% The RTERR Class
% This is a part of the combinatorial testing plug-in providing run-time 
% errors for the evaluation of expressions inside trace definitions

% Copyright (C) 2009 Overture
% This program is free software: you can redistribute it and/or modify it 
% under the terms of the GNU General Public License as published by the 
% Free Software Foundation, either version 3 of the License, or (at 
% your option) any later version. This program is distributed in the 
% hope that it will be useful,  but WITHOUT ANY WARRANTY; without even 
% the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
% See the GNU General Public License for more details. You should have 
% received a copy of the GNU General  Public License along with this program. 
% If not, see <http://www.gnu.org/licenses/>. 

\section{The RTERR Class}

\begin{vdm_al}

class RTERR

types
  public ERR = seq of char;

  public ErrMsg ::
    line : nat
    col  : nat
    mes  : seq of char;  
    
instance variables
  errmsgs : map DEF`Identifier to map DEF`Identifier to set of ErrMsg := {|->};
  curcl : DEF`Identifier := "";
  curtr : DEF`Identifier := "";


operations

 public ReportError : [IOmlExpression | IOmlBind] * ERR ==> ()
ReportError(expr,errmsg) ==
  if expr = nil
  then 
         AddErrMsg(curcl,curtr,1,1,errmsg)
  else let node : IOmlNode = expr,
           line = node.getLine(),
           col  = node.getColumn()
       in
         AddErrMsg(curcl,curtr,line,col,errmsg);
  

public  AddErrMsg: DEF`Identifier * DEF`Identifier * nat * nat * ERR ==> ()
AddErrMsg(clnm, trnm,line, col,errmsg) ==
  if clnm in set dom errmsgs
   then errmsgs(clnm)(trnm) := (if trnm in set dom errmsgs(clnm)
                               then errmsgs(clnm)(trnm) 
                               else {}) union {mk_ErrMsg(line,col,errmsg)}
  else errmsgs := errmsgs ++ {clnm |-> {trnm |-> {mk_ErrMsg(line,col,errmsg)}
                                       }
                             };
	
public  GetErrMsg: DEF`Identifier * DEF`Identifier ==> set of ErrMsg
GetErrMsg(clnm,trnm) ==
  if clnm in set dom errmsgs and trnm in set dom errmsgs(clnm)
  then return errmsgs(clnm)(trnm)
  else return {};
  
public HasError : DEF`Identifier * DEF`Identifier ==> bool
HasError(clnm,trnm) ==  
   if clnm in set dom errmsgs
   then
   ( let tmp : map DEF`Identifier to set of ErrMsg = errmsgs(clnm)
     in
     if trnm in set dom tmp
     then
     ( 
         return (card errmsgs(clnm)(trnm)) > 0
     )
     else 
     (
         return false
     )
   )
   else
     return false;

public  GetErrors : () ==> map DEF`Identifier to map DEF`Identifier to set of ErrMsg
GetErrors() == return errmsgs;

public SetCurrentClass : DEF`Identifier ==> ()
SetCurrentClass(clnm) ==  curcl := clnm;

public SetCurrentTrace : DEF`Identifier ==> ()
SetCurrentTrace(trnm) ==  curtr := trnm;

values
public BOOL_EXPECTED = "1: A boolean was expected.";
public INT_EXPECTED =  "2: An integer was expected.";
public NUM_EXPECTED =  "3: A number was expected";
public SET_EXPECTED = "4: A set was expected";
public SEQ_EXPECTED = "5: A sequence was expected";
public REC_EXPECTED = "6: A record was expected";
public MAP_EXPECTED = "7: A map was expected";
public TUPLE_EXPECTED = "8: A tuple was expected";
SYMB_LIT_EXPECTED = "9: A symbolic literal was expected";
TWO_BOOL_EXPECTED = "11: Two booleans were expected";
TWO_INT_EXPECTED = "12: Two integers were expected";
TWO_NUM_EXPECTED = "13: Two numbers were expected";
TWO_SET_EXPECTED = "14: Two sets were expected";
TWO_SEQ_EXPECTED = "15: Two sequences were expected";
public MAP_OR_SEQ_EXPECTED = "16: A map or a sequence was expected";
TWO_MAP_EXPECTED = "17: Two maps were expected";
SET_AND_MAP_EXPECTED = "18: A set and a map were expected";
SEQ_AND_INT_EXPECTED = "19: A sequence and two integers were expected";
PATTERNNAME_EXPECTED = "20: The binding pattern must evaluate to one patternname";
CHAR_EXPECTED = "21: A char was expected";
ALL_INTS_EXPECTED = "22: The binding set can only contain integers";
ALL_NUMS_EXPECTED = "23: The indices for the loop must all be numbers";
public ALL_SETS_EXPECTED = "24: All elements to 'dunion' or 'dinter' must be sets";
public ALL_SEQS_EXPECTED = "25: All elements to 'conc' must be sequences";
public ALL_MAPS_EXPECTED = "27: All elements to 'merge' must be maps";
OLDID_NOT_IN_OS = "51: The old name is not stored in the state";
MAP_MERGE_DOM_OVERLAP = "52: Duplicate entries for 'merge' had different values";
EMPTY_ENV_S = "53: The binding environment was empty";
ZERO_BY_STEP = "57: Step length in loop was 0";
EVAL_PRE_GIVES_FALSE = "58: The pre-condition evaluated to false";
EVAL_POST_GIVES_FALSE = "59: The post-condition evaluated to false";
ERROR_STATEMENT = "61: Can not evaluate 'error' statement";
UNDEFINED_EXPRESSION = "62: Can not evaluate 'undefined' expression";
NO_OTHERS_EXPR = "63: No 'others' branch in 'cases' expr";
WRONG_QUANTIFIER = "64: Wrong quantifier";
PAT_NAME_IN_SEQCOMP = "65: Only pattern name is allowed in sequence comprehension";
public ILLEGAL_INDICES = "66: Illegal index";
public DUPLICATES_NOT_EQUAL = "67: Duplicate entries had different values";
RECORD_TAG_UNKNOWN = "68: Unknown record tag";
RECORD_SIZE_WRONG = "69: Actual record size different from definition";
public RECORD_FIELD_ID_UNKNOWN = "70: Unknown record field selector";
public ARG_NOT_IN_DOM = "71: Argument not found in map domain";
FCT_V_TYPE_EXPECTED = "72: An explicit function/operation was expected";
UNDEF_ENCOUNTERED = "73: Identifier is undefined/not initialized";
ID_UNKNOWN = "74: Unknown identifier";
OPERATOR_UNKNOWN = "75: Unknown operator";
public DIVISION_WITH_ZERO = "76: Division with zero";
ZERO_LENGTH_DETECTED = "77: The sequence was empty";
PATTERN_UNKNOWN = "78: Unknown pattern";
SET_TOO_BIG = "79: Set too big for 'power' - limit is 16";
EXPR_UNKNOWN = "80: Expression unknown";
WRONG_NO_OF_ARGS = "81: Wrong number of arguments";
STMT_UNKNOWN = "83: Unknown statement";
REF_UNKNOWN = "84: Unknown reference in assign statement";
TYPE_UNKNOWN = "85: Unknown type";
IS_TYPE_UNKNOWN = "86: Unknown type in is_ expression";
IDENTICAL_FIELDS = "89: identical selector names in composite type";
TYPE_INCOMP = "98: Incompatible types found in dynamic type check";
STATE_INVARIANT_ERROR = "99: State invariant was broken";
TAG_MULTIPLE_DEF = "100: Multiple definitions of tag";
NO_UNIQ_ELEM = "110: No unique element in 'iota'";
OP_EXIT_CONT = "111: Operation exited or returned no result";
NO_POLY_FUNC = "112: Instantiated function is not polymorhic";
NO_INJECTIVE_MAP = "113: Map is not injective - 'inverse' fails";
NOT_RNG_DOM_SUBSET = "114: The range is not a subset of the domain";
TWO_FN_OR_MAP_EXPECTED = "115: Two functions or maps expected for 'comp'";
FN_OR_MAP_OR_NUM_EXPECTED = "116: Wrong arguments for '**'";
NAT_EXPECTED = "117: A natural number was expected";
OP_RETURNED_CONT = "119: The operation did not return a value";
STATE_DESIG_UNKNOWN = "120: Unknown state component";
IMPL_OP_CALL = "121: Tried to call an implicit operation";
ILLEGAL_STATE_INIT = "122: Illegal state initialisation";
ILL_STATE_INIT_PAT = "123: Illegal state initialisation pattern";
REC_PAT_EXPECTED = "124: Record pattern expected for state initialisation";
ALL_PATID_EXPECTED = "125: Only pattern identifiers allowed for state initialisation";
public TYPE_BIND_EVAL = "126: Can not evaluate type binds";
FNDEF_EXPECTED = "127: Function definition expected";
IMPL_FN_APPLY = "128: Tried to apply an implicit function";
POLY_NOT_INST = "129: The applied polymorhic function is not instantiated";
MAP_AND_SET_EXPECTED = "130: A map and a set were expected";
NOT_EXPL_OP_CALL = "131: The called object is not an explicit operation";
GET_VALUE_EXPR = "132: No input value to get_value()";
OP_CANT_RETURN_A_VALUE = "133: The operation's range is empty";

MOD_ALREADY_DEF = "150: The module is already defined";
EQUAL_RENAMINGS = "151: Name clash for renaming";
PARMOD_NOT_DEFINED = "152: Parameterised module is not defined";
NOT_FULLY_INST = "153: Parameterised module is not fully instantiated";
TYPE_ALREADY_DEF = "154: The type is already defined";
MOD_NOT_DEFINED = "155: The module is not defined";
TYPE_NOT_EXPORTED = "156: The type is not exported";
CONSTRUCT_NOT_EXPORTED = "157: The construct is not exported";
WRONG_STATE_TYPE = "158: Wrong state type";
NOT_DEFINED_IN_MOD = "159: Incorrect use of 'using'";
LIB_NOT_DEFINED = "160: couldn't open library: ";
LIB_SYMBOL_NOT_DEFINED = "161: token not defined in library";
LIB_ARGUMENT_WRONG_NUMBER = "162: actual number of argument didn't match the number the extern function expected";
LIB_NOT_DECLARED = "163: Not declared in dl module";
INTERNAL_ERROR = "164: Internal error, please report";
LIB_TYPE_ERROR = "165: Incompatible type in dl module call";
TYPE_NOT_SUPPORTED = "166: Type is not yet supported";
LIB_CLOSE_ERR = "167: Couldn't close dynamic library";
TAG_NOT_IN_NAME_MAP = "168: Name not defined in NameMap in dynamic library file";
LIB_WRONG_SIGN = "169: Library function has wrong signature";
FILE_DOES_NOT_EXISTS = "170: Library Name not found in the search path";
CAN_NOT_BE_EVALUATED = "171: Extern function cannot be evaluated";
FN_EXIT_CONT = "172: Function exited or returned no result";
LIB_VERSION_NOT_FOUND = "173: Symbol VDMLibVersion not found in dynamic lib";
LIB_WRONG_VERSION = "174: Version of VDM C++ library";
EXTENDED_FCT_EXPECTED = "175: Extended function or operation expected";
UNEXPECTED_INFLOW = "176: Unexpected input flow";
COUND_NOT_MATCH_OUTFLOW = " 177: Return value could not match output flows";

NONEMPTYSET_EXPECTED = "200: A nonempty set was expected";
NUMBER_ARG_NEQ_NUMBER_TYPE = "201: Number of arguments does not match number type domain in function or operation";
TYPE_INCOMP_RETURN = "202: Incompatible return type in function or operation application";
TYPE_INCOMP_APPLY =  "203: Incompatible type in variables in function or operation application";
SET_EXP_IN_PATTERN_BIND = "204: Set Expected in pattern bind in Define Expression";
VALUE_NOT_IN_SETBIND = "205: Value in Def Expression is not in Set Bind";
MTHD_EXIT_CONT = "206: Method exited or returned no result";
OBJ_REF_EXP = "207: An object reference was expected in the expression";
CLNM_NOT_DEFINED = "208: Class name is not defined";
TAG_UNKNOWN = "209: Tag is unknown within the current scope";

MULT_DEF_METHS = "211: The method name is multiple defined within the current scope";
MULT_DEF_FCTS = "212: The function name is multiple defined within the current scope";
MULT_INST_VARS = "213: The instance variable name is multiple defined within the current scope";
MULT_VAL_IDS = "214: The identifier is multiple defined as a value in the current scope";
TOPOLOGY_STMT = "215: Cannot evaluate topology statement";
SPEC_STMT = "216: Cannot evaluate specification statement";
INST_ABS_CL = "217: Cannot instantiate an abstract class";
NOT_CL_NAME_IN_NEW_STMT = "218: Unknown class name in new statement";
OBJ_REF_EXP_CALL = "219: An object reference was expected in call statement";
NOT_MTHD_NAME = "220: A name of a full method was expected in invoke statement";
INST_INV_BROKEN = "221: Instance invariant was broken";
IND_INH_NOT_SUPPORTED = "222: Indexed inheritance is not supported";
UNEXP_RET_VAL_INIT_CL = "223: Initialisation statement returned a value";
CIRC_CL_DEPENDENCY = "224: Circular inheritance dependecy detected";
MULT_TPS_NAME = "225: Multiple defined types with the same name within current scope";
DB_OBJ_EXISTS = "226: The object name already exists. Please destroy the object before creating a new object of the same name";
DB_OBJ_NOT_EXISTS = "227: The name is not an object";
OBJ_RECORD_EXP = "228: An object or record was expected";
CIRC_CL_INIT = "229: Circular dependency in initialisation detected";
NAME_UNKNOWN = "230: Name unknown";
DC_NOT_PATTERN_NAME = "231: An abstract field of a record must only pattern match with a pattern name";
LOCAL_COMPOSE_TYPEDEF = "232: The interpreter does not support local type definitions of records";
NOTYETSPECFCT = "233: Cannot evaluate `not yet specified' functions";
NOTYETSPECOP = "234: Cannot evaluate `not yet specified' operations";
-- REC_OR_OBJ_EXPECTED = "235: A record or object was expected";
BUG_263 = "236: You has hit bug number 263, please see the bug report for a work-around";
EXIT_IN_INIT = "237: Exit value returned in initialisation of instance variable";


SUBRESP = "238: Cannot evaluate `sub responsible' functions";
NUMERIC_SET = "239: Quantification in sequence comprehension must be over numeric values";
WRONG_NO_RES = "240: Wrong number of results";
public LOWER_BOUND_NOT_A_NUMBER = "241: Lower bound is not a number";
public UPPER_BOUND_NOT_A_NUMBER = "242: Upper bound is not a number";
STEP_NOT_A_NUMBER = "243: Step is not a number";
UPPER_BOUND_LARGER_THAN_LOWER_BOUND = "244: Lower bound larger than upper bound";
LOWER_BOUND_LARGER_THAN_UPPER_BOUND = "245:Lower bound larger than upper bound";
STEP_INDEX_IS_ZERO = "246: Step index is zero";
LOOP_EXPR_NOT_AN_EXPR = "247: Expression in while-statment does not evaluate to an expression";
TEST_EXPR_NOT_AN_EXPR = "248: Test expression in if-statment does not evaluate to an expression";
TUPLE_OUTSIDE_INDEX = "249: Tuple selection outside its index";
INSTVAR_NOT_PUBLIC = "250: Instance variable must be public";
INSTVAR_NOT_IN_SCOPE = "251: Instance variable is not in scope";
FUN_NOT_IN_SCOPE = "252: Function is not in scope";
OP_NOT_IN_SCOPE = "253: Operation is not in scope";
VAL_NOT_IN_SCOPE = "254: Value is not in scope";
TYPE_NOT_IN_SCOPE = "256: Type is not in scope";
NOT_IN_SCOPE = "257: Construct not in scope";
MULT_DEF = "258: Construct is multiple defined within the current scope";
INIT_NOT_POSSIBLE = "259: Initialisation is not possible";
-- this is probably caused by a value definition inside a class which
-- is referring to a class which has not yet been initialised.
INDEXED_ASSIGN = "260: Indexed assignment can only be done when initialised";
OP_IN_GUARD = "261: You cannot use an operation inside a permission guard";
NO_THREAD = "262: This class have no thread to start";
DEADLOCK_DETECTED = "263: Deadlock is detected";
PRE_COND_APPLY_EXPR = "264: The special pre-condition application expression is not supported in the interpreter";
NO_GUARD_IN_INIT = "265: An operation with a permission guard may not " ^
                   "be used in the initialisation of an instance variable";
OP_OR_FUN_NOT_IN_SCOPE = "266: Operation or function is not in scope";
OP_DEF_IN_MULTSUPERS = "267: Operation defined in multiple super classes, so it is not alllowed to add permission predicate for class";
SEL_NONVALID_THREADID = "268: A non-valid thread id was used";
MULT_THREAD_INH = "269: More than one thread inherited";
NOCONSTRUCTOR = "280: No constructor with this parameter list is in scope";
MULTIOVERLOADED = "281: Unable to resolve overloaded operation call";
STATIC_NOT_IN_SCOPE = "282: Static member is not in scope";
STATIC_IV_NO_VALUE = "283: Static instance variable must be initialised";
NOOVERLOADED = "285: No overloaded operation or function with this parameter list is in scope";
NOOBJECT = "286: No object is present";
public NONEMPTY_SEQ_EXPECTED = "287: A non-empty sequence was expected";
end RTERR
\end{vdm_al}

\vspace{0.5cm}

\begin{rtinfo}
{vdm.tc}[RTERR]
\end{rtinfo}
