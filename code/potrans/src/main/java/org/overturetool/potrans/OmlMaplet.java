//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlMaplet extends IOmlMaplet {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivDomExpression KEEP=NO
  private IOmlExpression ivDomExpression = null;
// ***** VDMTOOLS END Name=ivDomExpression

// ***** VDMTOOLS START Name=ivRngExpression KEEP=NO
  private IOmlExpression ivRngExpression = null;
// ***** VDMTOOLS END Name=ivRngExpression


// ***** VDMTOOLS START Name=vdm_init_OmlMaplet KEEP=NO
  private void vdm_init_OmlMaplet () throws CGException {
    try {

      ivDomExpression = null;
      ivRngExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlMaplet


// ***** VDMTOOLS START Name=OmlMaplet KEEP=NO
  public OmlMaplet () throws CGException {
    vdm_init_OmlMaplet();
  }
// ***** VDMTOOLS END Name=OmlMaplet


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("Maplet");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitMaplet((IOmlMaplet) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlMaplet#2|IOmlExpression|IOmlExpression KEEP=NO
  public OmlMaplet (final IOmlExpression p1, final IOmlExpression p2) throws CGException {

    vdm_init_OmlMaplet();
    {

      setDomExpression((IOmlExpression) p1);
      setRngExpression((IOmlExpression) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlMaplet#2|IOmlExpression|IOmlExpression


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("dom_expression");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setDomExpression((IOmlExpression) data.get(fname));
    }
    {

      String fname = new String("rng_expression");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setRngExpression((IOmlExpression) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getDomExpression KEEP=NO
  public IOmlExpression getDomExpression () throws CGException {
    return (IOmlExpression) ivDomExpression;
  }
// ***** VDMTOOLS END Name=getDomExpression


// ***** VDMTOOLS START Name=setDomExpression#1|IOmlExpression KEEP=NO
  public void setDomExpression (final IOmlExpression parg) throws CGException {
    ivDomExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setDomExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=getRngExpression KEEP=NO
  public IOmlExpression getRngExpression () throws CGException {
    return (IOmlExpression) ivRngExpression;
  }
// ***** VDMTOOLS END Name=getRngExpression


// ***** VDMTOOLS START Name=setRngExpression#1|IOmlExpression KEEP=NO
  public void setRngExpression (final IOmlExpression parg) throws CGException {
    ivRngExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setRngExpression#1|IOmlExpression

}
;
