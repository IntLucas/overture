//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolRecordUpdate extends HolExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=record KEEP=NO
  private HolExpression record = null;
// ***** VDMTOOLS END Name=record

// ***** VDMTOOLS START Name=fieldNames KEEP=NO
  private Vector fieldNames = null;
// ***** VDMTOOLS END Name=fieldNames

// ***** VDMTOOLS START Name=fieldValues KEEP=NO
  private Vector fieldValues = null;
// ***** VDMTOOLS END Name=fieldValues


// ***** VDMTOOLS START Name=vdm_init_HolRecordUpdate KEEP=NO
  private void vdm_init_HolRecordUpdate () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolRecordUpdate


// ***** VDMTOOLS START Name=HolRecordUpdate KEEP=NO
  public HolRecordUpdate () throws CGException {
    vdm_init_HolRecordUpdate();
  }
// ***** VDMTOOLS END Name=HolRecordUpdate


// ***** VDMTOOLS START Name=HolRecordUpdate#3|HolExpression|Vector|Vector KEEP=NO
  public HolRecordUpdate (final HolExpression newRecord, final Vector newFieldNames, final Vector newFieldValues) throws CGException {

    vdm_init_HolRecordUpdate();
    {

      record = (HolExpression) UTIL.clone(newRecord);
      fieldNames = (Vector) UTIL.ConvertToList(UTIL.clone(newFieldNames));
      fieldValues = (Vector) UTIL.ConvertToList(UTIL.clone(newFieldValues));
    }
  }
// ***** VDMTOOLS END Name=HolRecordUpdate#3|HolExpression|Vector|Vector


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    for (int ilb_5 = 1; ilb_5 <= new Integer(fieldValues.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolExpression obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= fieldValues.size())) 
        obj_7 = (HolExpression) fieldValues.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
    if (new Boolean(!UTIL.equals(record, null)).booleanValue()) 
      record.setTypeInformation((HolTypeDescription) typeInfo);
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    if (new Boolean(!UTIL.equals(record, null)).booleanValue()) 
      result = record.requires();
    else 
      result = new HashSet();
    for (int ilb_8 = 1; ilb_8 <= new Integer(fieldValues.size()).intValue(); ilb_8++) {

      Integer i = new Integer(ilb_8);
      HashSet rhs_9 = new HashSet();
      HashSet var2_11 = new HashSet();
      HolExpression obj_12 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= fieldValues.size())) 
        obj_12 = (HolExpression) fieldValues.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_11 = obj_12.requires();
      rhs_9 = (HashSet) result.clone();
      rhs_9.addAll(var2_11);
      result = (HashSet) UTIL.clone(rhs_9);
    }
    return result;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String result = null;
    result = UTIL.ConvertToString(UTIL.clone(new String("<|")));
    for (int ilb_5 = 1; ilb_5 <= new Integer(fieldNames.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      {

        String rhs_6 = null;
        String var1_7 = null;
        String var1_8 = null;
        String var2_10 = null;
        HolIdentifier obj_11 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= fieldNames.size())) 
          obj_11 = (HolIdentifier) fieldNames.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_10 = obj_11.print();
        var1_8 = result.concat(var2_10);
        var1_7 = var1_8.concat(new String(":="));
        String var2_15 = null;
        HolExpression obj_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= fieldValues.size())) 
          obj_16 = (HolExpression) fieldValues.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_15 = obj_16.print();
        rhs_6 = var1_7.concat(var2_15);
        result = UTIL.ConvertToString(UTIL.clone(rhs_6));
        if (new Boolean((i.intValue()) < (new Integer(fieldNames.size()).intValue())).booleanValue()) {

          String rhs_23 = null;
          rhs_23 = result.concat(new String("; "));
          result = UTIL.ConvertToString(UTIL.clone(rhs_23));
        }
      }
    }
    String rhs_26 = null;
    Vector unArg_27 = null;
    unArg_27 = new Vector();
    unArg_27.add(result);
    unArg_27.add(new String("|>"));
    String rdcseq_30 = new String();
    for (Iterator enm_33 = unArg_27.iterator(); enm_33.hasNext(); ) {

      String e_31 = UTIL.ConvertToString(enm_33.next());
      rdcseq_30 = rdcseq_30.concat(e_31);
    }
    rhs_26 = rdcseq_30;
    result = UTIL.ConvertToString(UTIL.clone(rhs_26));
    if (new Boolean(UTIL.equals(record, null)).booleanValue()) 
      return result;
    else {

      String rexpr_37 = null;
      String var1_38 = null;
      String var1_39 = null;
      String var1_40 = null;
      String var2_42 = null;
      var2_42 = record.print();
      var1_40 = new String("(").concat(var2_42);
      var1_39 = var1_40.concat(new String(" with "));
      var1_38 = var1_39.concat(result);
      rexpr_37 = var1_38.concat(new String(")"));
      return rexpr_37;
    }
  }
// ***** VDMTOOLS END Name=print

}
;
