//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlCasesStatement extends IOmlCasesStatement {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivMatchExpression KEEP=NO
  private IOmlExpression ivMatchExpression = null;
// ***** VDMTOOLS END Name=ivMatchExpression

// ***** VDMTOOLS START Name=ivAlternativeList KEEP=NO
  private Vector ivAlternativeList = null;
// ***** VDMTOOLS END Name=ivAlternativeList

// ***** VDMTOOLS START Name=ivOthersStatement KEEP=NO
  private IOmlStatement ivOthersStatement = null;
// ***** VDMTOOLS END Name=ivOthersStatement


// ***** VDMTOOLS START Name=vdm_init_OmlCasesStatement KEEP=NO
  private void vdm_init_OmlCasesStatement () throws CGException {
    try {

      ivMatchExpression = null;
      ivAlternativeList = new Vector();
      ivOthersStatement = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlCasesStatement


// ***** VDMTOOLS START Name=OmlCasesStatement KEEP=NO
  public OmlCasesStatement () throws CGException {
    vdm_init_OmlCasesStatement();
  }
// ***** VDMTOOLS END Name=OmlCasesStatement


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("CasesStatement");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitCasesStatement((IOmlCasesStatement) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlCasesStatement#3|IOmlExpression|Vector|IOmlStatement KEEP=NO
  public OmlCasesStatement (final IOmlExpression p1, final Vector p2, final IOmlStatement p3) throws CGException {

    vdm_init_OmlCasesStatement();
    {

      setMatchExpression((IOmlExpression) p1);
      setAlternativeList(p2);
      setOthersStatement((IOmlStatement) p3);
    }
  }
// ***** VDMTOOLS END Name=OmlCasesStatement#3|IOmlExpression|Vector|IOmlStatement


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("match_expression");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setMatchExpression((IOmlExpression) data.get(fname));
    }
    {

      String fname = new String("alternative_list");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setAlternativeList((Vector) data.get(fname));
    }
    {

      String fname = new String("others_statement");
      Boolean cond_22 = null;
      cond_22 = new Boolean(data.containsKey(fname));
      if (cond_22.booleanValue()) 
        setOthersStatement((IOmlStatement) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getMatchExpression KEEP=NO
  public IOmlExpression getMatchExpression () throws CGException {
    return (IOmlExpression) ivMatchExpression;
  }
// ***** VDMTOOLS END Name=getMatchExpression


// ***** VDMTOOLS START Name=setMatchExpression#1|IOmlExpression KEEP=NO
  public void setMatchExpression (final IOmlExpression parg) throws CGException {
    ivMatchExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setMatchExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=getAlternativeList KEEP=NO
  public Vector getAlternativeList () throws CGException {
    return ivAlternativeList;
  }
// ***** VDMTOOLS END Name=getAlternativeList


// ***** VDMTOOLS START Name=setAlternativeList#1|Vector KEEP=NO
  public void setAlternativeList (final Vector parg) throws CGException {
    ivAlternativeList = (Vector) UTIL.ConvertToList(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setAlternativeList#1|Vector


// ***** VDMTOOLS START Name=addAlternativeList#1|IOmlNode KEEP=NO
  public void addAlternativeList (final IOmlNode parg) throws CGException {
    ivAlternativeList.add(parg);
  }
// ***** VDMTOOLS END Name=addAlternativeList#1|IOmlNode


// ***** VDMTOOLS START Name=getOthersStatement KEEP=NO
  public IOmlStatement getOthersStatement () throws CGException {
    return (IOmlStatement) ivOthersStatement;
  }
// ***** VDMTOOLS END Name=getOthersStatement


// ***** VDMTOOLS START Name=hasOthersStatement KEEP=NO
  public Boolean hasOthersStatement () throws CGException {
    return new Boolean(!UTIL.equals(ivOthersStatement, null));
  }
// ***** VDMTOOLS END Name=hasOthersStatement


// ***** VDMTOOLS START Name=setOthersStatement#1|IOmlStatement KEEP=NO
  public void setOthersStatement (final IOmlStatement parg) throws CGException {
    ivOthersStatement = (IOmlStatement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setOthersStatement#1|IOmlStatement

}
;
