//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolDocument {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=expression KEEP=NO
  private HolExpression expression = null;
// ***** VDMTOOLS END Name=expression

// ***** VDMTOOLS START Name=specifications KEEP=NO
  private Vector specifications = null;
// ***** VDMTOOLS END Name=specifications


// ***** VDMTOOLS START Name=vdm_init_HolDocument KEEP=NO
  private void vdm_init_HolDocument () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolDocument


// ***** VDMTOOLS START Name=HolDocument KEEP=NO
  public HolDocument () throws CGException {

    vdm_init_HolDocument();
    {

      expression = null;
      specifications = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector()));
    }
  }
// ***** VDMTOOLS END Name=HolDocument


// ***** VDMTOOLS START Name=HolDocument#2|HolExpression|Vector KEEP=NO
  public HolDocument (final HolExpression newExpression, final Vector newSpecs) throws CGException {

    vdm_init_HolDocument();
    {

      expression = (HolExpression) UTIL.clone(newExpression);
      specifications = (Vector) UTIL.ConvertToList(UTIL.clone(newSpecs));
    }
  }
// ***** VDMTOOLS END Name=HolDocument#2|HolExpression|Vector


// ***** VDMTOOLS START Name=processTypeInformation#1|HolTypeDescription KEEP=NO
  public HolTypeDescription processTypeInformation (final HolTypeDescription typeDesc) throws CGException {

    HolTypeDescription result = typeDesc;
    for (int ilb_5 = 1; ilb_5 <= new Integer(specifications.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolTypeDescription rhs_6 = null;
      HolClass obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= specifications.size())) 
        obj_7 = (HolClass) specifications.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      rhs_6 = (HolTypeDescription) obj_7.processTypeInformation((HolTypeDescription) result);
      result = (HolTypeDescription) UTIL.clone(rhs_6);
    }
    return (HolTypeDescription) result;
  }
// ***** VDMTOOLS END Name=processTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public HolDocument setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    for (int ilb_5 = 1; ilb_5 <= new Integer(specifications.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolClass obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= specifications.size())) 
        obj_7 = (HolClass) specifications.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
    return (HolDocument) this;
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String result = null;
    result = UTIL.ConvertToString(UTIL.clone(new String("")));
    if (new Boolean(!UTIL.equals(expression, null)).booleanValue()) {

      String rhs_5 = null;
      Vector unArg_6 = null;
      unArg_6 = new Vector();
      unArg_6.add(result);
      String e_seq_8 = null;
      e_seq_8 = expression.print();
      unArg_6.add(e_seq_8);
      unArg_6.add(new String(";"));
      String rdcseq_10 = new String();
      for (Iterator enm_13 = unArg_6.iterator(); enm_13.hasNext(); ) {

        String e_11 = UTIL.ConvertToString(enm_13.next());
        rdcseq_10 = rdcseq_10.concat(e_11);
      }
      rhs_5 = rdcseq_10;
      result = UTIL.ConvertToString(UTIL.clone(rhs_5));
    }
    for (int ilb_17 = 1; ilb_17 <= new Integer(specifications.size()).intValue(); ilb_17++) {

      Integer i = new Integer(ilb_17);
      String rhs_18 = null;
      Vector unArg_19 = null;
      unArg_19 = new Vector();
      unArg_19.add(result);
      String e_seq_21 = null;
      HolClass obj_22 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= specifications.size())) 
        obj_22 = (HolClass) specifications.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      e_seq_21 = obj_22.print();
      unArg_19.add(e_seq_21);
      String rdcseq_25 = new String();
      for (Iterator enm_28 = unArg_19.iterator(); enm_28.hasNext(); ) {

        String e_26 = UTIL.ConvertToString(enm_28.next());
        rdcseq_25 = rdcseq_25.concat(e_26);
      }
      rhs_18 = rdcseq_25;
      result = UTIL.ConvertToString(UTIL.clone(rhs_18));
    }
    return result;
  }
// ***** VDMTOOLS END Name=print

}
;
