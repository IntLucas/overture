//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolComplexTypeDefinition extends HolTypeDefinition {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_HolComplexTypeDefinition KEEP=NO
  private void vdm_init_HolComplexTypeDefinition () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolComplexTypeDefinition


// ***** VDMTOOLS START Name=HolComplexTypeDefinition KEEP=NO
  public HolComplexTypeDefinition () throws CGException {
    vdm_init_HolComplexTypeDefinition();
  }
// ***** VDMTOOLS END Name=HolComplexTypeDefinition


// ***** VDMTOOLS START Name=HolComplexTypeDefinition#3|HolTypeIdentifier|Object|HolFunction KEEP=NO
  public HolComplexTypeDefinition (final HolTypeIdentifier newName, final Object newType, final HolFunction newInv) throws CGException {

    vdm_init_HolComplexTypeDefinition();
    {

      name = (HolTypeIdentifier) UTIL.clone(newName);
      type = (HolType) UTIL.clone(newType);
      invar = (HolFunction) UTIL.clone(newInv);
    }
  }
// ***** VDMTOOLS END Name=HolComplexTypeDefinition#3|HolTypeIdentifier|Object|HolFunction


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String namep = null;
    namep = name.print(new org.overturetool.potrans.quotes.plain());
    String typeDefinition = null;
    Boolean cond_6 = null;
    {
      if (!(cond_6 = new Boolean(type instanceof HolUnionType)).booleanValue()) 
        cond_6 = new Boolean(type instanceof HolQuoteType);
    }
    if (cond_6.booleanValue()) {

      Vector unArg_37 = null;
      unArg_37 = new Vector();
      unArg_37.add(new String("Hol_datatype `"));
      String e_seq_39 = null;
      e_seq_39 = name.print(new org.overturetool.potrans.quotes.plain());
      unArg_37.add(e_seq_39);
      unArg_37.add(new String(" = "));
      String e_seq_42 = null;
      e_seq_42 = type.print(new org.overturetool.potrans.quotes.type());
      unArg_37.add(e_seq_42);
      unArg_37.add(new String("`;\n"));
      String rdcseq_45 = new String();
      for (Iterator enm_48 = unArg_37.iterator(); enm_48.hasNext(); ) {

        String e_46 = UTIL.ConvertToString(enm_48.next());
        rdcseq_45 = rdcseq_45.concat(e_46);
      }
      typeDefinition = rdcseq_45;
    }
    else {

      HashSet defs = definitionShouldProvide((HolRecordType) type);
      Vector unArg_14 = null;
      unArg_14 = new Vector();
      unArg_14.add(new String("Hol_datatype `"));
      String e_seq_16 = null;
      e_seq_16 = name.print(new org.overturetool.potrans.quotes.plain());
      unArg_14.add(e_seq_16);
      unArg_14.add(new String(" = "));
      String e_seq_19 = null;
      e_seq_19 = type.print(new org.overturetool.potrans.quotes.type());
      unArg_14.add(e_seq_19);
      unArg_14.add(new String("`;\n"));
      String e_seq_22 = null;
      HolFunctionDefinition obj_23 = null;
      obj_23 = (HolFunctionDefinition) (HolFunctionDefinition) getOrderedRecordConstructor((HolRecordType) type);
      e_seq_22 = obj_23.print();
      unArg_14.add(e_seq_22);
      unArg_14.add(printNumberedFieldSelectors((HolRecordType) type));
      String e_seq_27 = null;
      String var1_28 = null;
      var1_28 = new String("BasicProvers.export_rewrites([").concat(printExportDefs(defs));
      e_seq_27 = var1_28.concat(new String("]);\n"));
      unArg_14.add(e_seq_27);
      String rdcseq_33 = new String();
      for (Iterator enm_36 = unArg_14.iterator(); enm_36.hasNext(); ) {

        String e_34 = UTIL.ConvertToString(enm_36.next());
        rdcseq_33 = rdcseq_33.concat(e_34);
      }
      typeDefinition = rdcseq_33;
    }
    {

      String invariantDef = null;
      String var1_51 = null;
      String var1_52 = null;
      String var1_53 = null;
      if (new Boolean(UTIL.equals(invar, null)).booleanValue()) {

        HolFunctionDefinition obj_68 = null;
        String arg_69 = null;
        Vector unArg_71 = null;
        unArg_71 = new Vector();
        unArg_71.add(new String("inv_"));
        unArg_71.add(namep);
        String rdcseq_74 = new String();
        for (Iterator enm_77 = unArg_71.iterator(); enm_77.hasNext(); ) {

          String e_75 = UTIL.ConvertToString(enm_77.next());
          rdcseq_74 = rdcseq_74.concat(e_75);
        }
        arg_69 = rdcseq_74;
        HolLambdaFunction arg_70 = null;
        Vector arg_78 = null;
        arg_78 = new Vector();
        arg_78.add(new HolIdentifier(new String("inv_param")));
        HolFunctionType arg_79 = null;
        Vector arg_83 = null;
        arg_83 = new Vector();
        arg_83.add(name);
        arg_79 = new HolFunctionType(arg_83, new HolNativeTypeIdentifier(new String("bool")));
        arg_70 = new HolLambdaFunction(arg_78, arg_79, new HolNativeIdentifier(new String("T")));
        obj_68 = new HolFunctionDefinition(arg_69, arg_70);
        var1_53 = obj_68.print();
      }
      else {

        HolFunctionDefinition obj_58 = null;
        String arg_59 = null;
        Vector unArg_61 = null;
        unArg_61 = new Vector();
        unArg_61.add(new String("inv_"));
        unArg_61.add(namep);
        String rdcseq_64 = new String();
        for (Iterator enm_67 = unArg_61.iterator(); enm_67.hasNext(); ) {

          String e_65 = UTIL.ConvertToString(enm_67.next());
          rdcseq_64 = rdcseq_64.concat(e_65);
        }
        arg_59 = rdcseq_64;
        obj_58 = new HolFunctionDefinition(arg_59, invar);
        var1_53 = obj_58.print();
      }
      var1_52 = var1_53.concat(new String("BasicProvers.export_rewrites([\"inv_"));
      var1_51 = var1_52.concat(namep);
      invariantDef = var1_51.concat(new String("_def\"]);\n"));
      String rexpr_91 = null;
      Vector unArg_92 = null;
      unArg_92 = new Vector();
      unArg_92.add(typeDefinition);
      unArg_92.add(invariantDef);
      String rdcseq_95 = new String();
      for (Iterator enm_98 = unArg_92.iterator(); enm_98.hasNext(); ) {

        String e_96 = UTIL.ConvertToString(enm_98.next());
        rdcseq_95 = rdcseq_95.concat(e_96);
      }
      rexpr_91 = rdcseq_95;
      return rexpr_91;
    }
  }
// ***** VDMTOOLS END Name=print


// ***** VDMTOOLS START Name=provides KEEP=NO
  public HashSet provides () throws CGException {

    HashSet result = new HashSet();
    String enum_set_1 = null;
    enum_set_1 = name.print(new org.overturetool.potrans.quotes.plain());
    result = new HashSet();
    result.add(enum_set_1);
    if (new Boolean(type instanceof HolRecordType).booleanValue()) {

      HashSet rhs_5 = new HashSet();
      rhs_5 = (HashSet) result.clone();
      rhs_5.addAll(definitionShouldProvide((HolRecordType) type));
      result = (HashSet) UTIL.clone(rhs_5);
    }
    if (new Boolean(type instanceof HolQuoteType).booleanValue()) {

      HashSet rhs_11 = new HashSet();
      rhs_11 = (HashSet) result.clone();
      rhs_11.addAll(quoteLiteral((HolQuoteType) type));
      result = (HashSet) UTIL.clone(rhs_11);
    }
    if (new Boolean(!UTIL.equals(invar, null)).booleanValue()) {

      HashSet rexpr_19 = new HashSet();
      HashSet var2_21 = new HashSet();
      String enum_set_22 = null;
      String var2_24 = null;
      var2_24 = name.print(new org.overturetool.potrans.quotes.plain());
      enum_set_22 = new String("inv_").concat(var2_24);
      var2_21 = new HashSet();
      var2_21.add(enum_set_22);
      rexpr_19 = (HashSet) result.clone();
      rexpr_19.addAll(var2_21);
      return rexpr_19;
    }
    else 
      return result;
  }
// ***** VDMTOOLS END Name=provides


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    if (new Boolean(!UTIL.equals(invar, null)).booleanValue()) {

      HashSet rhs_5 = new HashSet();
      HashSet var1_6 = new HashSet();
      var1_6 = type.requires();
      HashSet var2_7 = new HashSet();
      var2_7 = invar.requires();
      rhs_5 = (HashSet) var1_6.clone();
      rhs_5.addAll(var2_7);
      result = (HashSet) UTIL.clone(rhs_5);
    }
    else {

      HashSet rhs_4 = new HashSet();
      rhs_4 = type.requires();
      result = (HashSet) UTIL.clone(rhs_4);
    }
    HashSet rexpr_8 = new HashSet();
    rexpr_8 = (HashSet) result.clone();
    rexpr_8.removeAll(provides());
    return rexpr_8;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=printNumberedFieldSelectors#1|HolRecordType KEEP=NO
  private String printNumberedFieldSelectors (final HolRecordType recType) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = recType.getNumberedFieldSelectors();
    Vector defs = null;
    defs = tmpVal_3;
    {

      String result = new String("");
      for (int ilb_7 = 1; ilb_7 <= new Integer(defs.size()).intValue(); ilb_7++) {

        Integer i = new Integer(ilb_7);
        {

          String rhs_8 = null;
          String var2_10 = null;
          HolFunctionDefinition obj_11 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= defs.size())) 
            obj_11 = (HolFunctionDefinition) defs.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var2_10 = obj_11.print();
          rhs_8 = result.concat(var2_10);
          result = UTIL.ConvertToString(UTIL.clone(rhs_8));
        }
      }
      return result;
    }
  }
// ***** VDMTOOLS END Name=printNumberedFieldSelectors#1|HolRecordType


// ***** VDMTOOLS START Name=printExportDefs#1|HashSet KEEP=NO
  private String printExportDefs (final HashSet defs) throws CGException {

    String result = new String("");
    Integer counter = new Integer(0);
    {

      String defin = null;
      for (Iterator enm_23 = defs.iterator(); enm_23.hasNext(); ) {

        String elem_3 = UTIL.ConvertToString(enm_23.next());
        defin = elem_3;
        {

          String rhs_6 = null;
          String var1_7 = null;
          String var1_8 = null;
          var1_8 = result.concat(new String("\""));
          var1_7 = var1_8.concat(defin);
          rhs_6 = var1_7.concat(new String("_def\""));
          result = UTIL.ConvertToString(UTIL.clone(rhs_6));
          counter = UTIL.NumberToInt(UTIL.clone(new Integer(counter.intValue() + new Integer(1).intValue())));
          if (new Boolean((counter.intValue()) < ((new Integer(defs.size())).intValue())).booleanValue()) {

            String rhs_20 = null;
            rhs_20 = result.concat(new String(", "));
            result = UTIL.ConvertToString(UTIL.clone(rhs_20));
          }
        }
      }
    }
    return result;
  }
// ***** VDMTOOLS END Name=printExportDefs#1|HashSet


// ***** VDMTOOLS START Name=getOrderedRecordConstructor#1|HolRecordType KEEP=NO
  private HolFunctionDefinition getOrderedRecordConstructor (final HolRecordType recType) throws CGException {

    HolFunctionDefinition varRes_2 = null;
    varRes_2 = (HolFunctionDefinition) recType.getOrderedRecordConstructor();
    return (HolFunctionDefinition) varRes_2;
  }
// ***** VDMTOOLS END Name=getOrderedRecordConstructor#1|HolRecordType


// ***** VDMTOOLS START Name=definitionShouldProvide#1|HolRecordType KEEP=NO
  private HashSet definitionShouldProvide (final HolRecordType recType) throws CGException {

    HashSet varRes_2 = new HashSet();
    varRes_2 = recType.definitionShouldProvide();
    return varRes_2;
  }
// ***** VDMTOOLS END Name=definitionShouldProvide#1|HolRecordType


// ***** VDMTOOLS START Name=quoteLiteral#1|HolQuoteType KEEP=NO
  private HashSet quoteLiteral (final HolQuoteType qType) throws CGException {

    HashSet varRes_2 = new HashSet();
    varRes_2 = qType.provides();
    return varRes_2;
  }
// ***** VDMTOOLS END Name=quoteLiteral#1|HolQuoteType

}
;
