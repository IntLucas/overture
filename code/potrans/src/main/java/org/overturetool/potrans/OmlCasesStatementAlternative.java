//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlCasesStatementAlternative extends IOmlCasesStatementAlternative {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivPatternList KEEP=NO
  private Vector ivPatternList = null;
// ***** VDMTOOLS END Name=ivPatternList

// ***** VDMTOOLS START Name=ivStatement KEEP=NO
  private IOmlStatement ivStatement = null;
// ***** VDMTOOLS END Name=ivStatement


// ***** VDMTOOLS START Name=vdm_init_OmlCasesStatementAlternative KEEP=NO
  private void vdm_init_OmlCasesStatementAlternative () throws CGException {
    try {

      ivPatternList = new Vector();
      ivStatement = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlCasesStatementAlternative


// ***** VDMTOOLS START Name=OmlCasesStatementAlternative KEEP=NO
  public OmlCasesStatementAlternative () throws CGException {
    vdm_init_OmlCasesStatementAlternative();
  }
// ***** VDMTOOLS END Name=OmlCasesStatementAlternative


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("CasesStatementAlternative");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitCasesStatementAlternative((IOmlCasesStatementAlternative) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlCasesStatementAlternative#2|Vector|IOmlStatement KEEP=NO
  public OmlCasesStatementAlternative (final Vector p1, final IOmlStatement p2) throws CGException {

    vdm_init_OmlCasesStatementAlternative();
    {

      setPatternList(p1);
      setStatement((IOmlStatement) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlCasesStatementAlternative#2|Vector|IOmlStatement


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("pattern_list");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setPatternList((Vector) data.get(fname));
    }
    {

      String fname = new String("statement");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setStatement((IOmlStatement) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getPatternList KEEP=NO
  public Vector getPatternList () throws CGException {
    return ivPatternList;
  }
// ***** VDMTOOLS END Name=getPatternList


// ***** VDMTOOLS START Name=setPatternList#1|Vector KEEP=NO
  public void setPatternList (final Vector parg) throws CGException {
    ivPatternList = (Vector) UTIL.ConvertToList(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setPatternList#1|Vector


// ***** VDMTOOLS START Name=addPatternList#1|IOmlNode KEEP=NO
  public void addPatternList (final IOmlNode parg) throws CGException {
    ivPatternList.add(parg);
  }
// ***** VDMTOOLS END Name=addPatternList#1|IOmlNode


// ***** VDMTOOLS START Name=getStatement KEEP=NO
  public IOmlStatement getStatement () throws CGException {
    return (IOmlStatement) ivStatement;
  }
// ***** VDMTOOLS END Name=getStatement


// ***** VDMTOOLS START Name=setStatement#1|IOmlStatement KEEP=NO
  public void setStatement (final IOmlStatement parg) throws CGException {
    ivStatement = (IOmlStatement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setStatement#1|IOmlStatement

}
;
