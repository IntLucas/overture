//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sun 20-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.mapper;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;

import org.overturetool.ast.imp.*;
import org.overturetool.ast.itf.*;
import org.overturetool.jml.ast.imp.*;
import org.overturetool.jml.ast.itf.*;

//import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Jml2Vdm {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=Jml2Vdm KEEP=NO
  public Jml2Vdm () throws CGException {}
// ***** VDMTOOLS END Name=Jml2Vdm


// ***** VDMTOOLS START Name=build_uvdm KEEP=NO
  public OmlSpecifications build_uvdm (final JmlSpecifications specs) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = specs.getClassList();
    Vector classes = null;
    classes = tmpVal_3;
    Vector vdmclasses = convertJmlClasses(classes);
    return (OmlSpecifications) new OmlSpecifications(vdmclasses);
  }
// ***** VDMTOOLS END Name=build_uvdm


// ***** VDMTOOLS START Name=convertJmlClasses KEEP=NO
  public Vector convertJmlClasses (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlClass reselem_12 = null;
        JmlWrappedJmlClass par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlWrappedJmlClass) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlClass) convertJmlClass((JmlWrappedJmlClass) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertJmlClasses


// ***** VDMTOOLS START Name=convertJmlClass KEEP=NO
  public OmlClass convertJmlClass (final JmlWrappedJmlClass c) throws CGException {

    IJmlClass cl = null;
    cl = (IJmlClass) c.getClassVal();
    String tmpVal_4 = null;
    tmpVal_4 = cl.getIdentifier();
    String id = null;
    id = tmpVal_4;
    IJmlClassInheritanceClause ic = null;
    ic = (IJmlClassInheritanceClause) cl.getInheritanceClause();
    IJmlInterfaceInheritanceClause ii = null;
    ii = (IJmlInterfaceInheritanceClause) cl.getInterfaceInheritance();
    IOmlInheritanceClause ih = (IOmlInheritanceClause) (IOmlInheritanceClause) getInheritanceClauses((JmlClassInheritanceClause) ic, (JmlInterfaceInheritanceClause) ii);
    Vector bd = null;
    bd = cl.getClassBody();
    Vector tmpVal_11 = null;
    tmpVal_11 = convertClassBody(bd);
    Vector body = null;
    body = tmpVal_11;
    return (OmlClass) new OmlClass(id, new Vector(), ih, body, new Boolean(false));
  }
// ***** VDMTOOLS END Name=convertJmlClass


// ***** VDMTOOLS START Name=getInheritanceClauses KEEP=NO
  public IOmlInheritanceClause getInheritanceClauses (final JmlClassInheritanceClause c, final JmlInterfaceInheritanceClause i) throws CGException {

    Vector s1 = getClassInheritance((JmlClassInheritanceClause) c);
    Vector s2 = getInterfaceInheritance((JmlInterfaceInheritanceClause) i);
    Boolean cond_8 = null;
    {
      if ((cond_8 = new Boolean(UTIL.equals(s1, new String("")))).booleanValue()) 
        cond_8 = new Boolean(UTIL.equals(s2, new String("")));
    }
    if (cond_8.booleanValue()) 
      return null;
    else {

      OmlInheritanceClause rexpr_15 = null;
      Vector arg_16 = null;
      arg_16 = (Vector) s1.clone();
      arg_16.addAll(s2);
      rexpr_15 = new OmlInheritanceClause(arg_16);
      return (IOmlInheritanceClause) rexpr_15;
    }
  }
// ***** VDMTOOLS END Name=getInheritanceClauses


// ***** VDMTOOLS START Name=getClassInheritance KEEP=NO
  public Vector getClassInheritance (final JmlClassInheritanceClause c) throws CGException {
    if (new Boolean(!UTIL.equals(c, null)).booleanValue()) {

      Vector rexpr_6 = null;
      String e_seq_7 = null;
      e_seq_7 = c.getIdentifierList();
      rexpr_6 = new Vector();
      rexpr_6.add(e_seq_7);
      return rexpr_6;
    }
    else 
      return (Vector) UTIL.ConvertToList(new String(""));
  }
// ***** VDMTOOLS END Name=getClassInheritance


// ***** VDMTOOLS START Name=getInterfaceInheritance KEEP=NO
  public Vector getInterfaceInheritance (final JmlInterfaceInheritanceClause c) throws CGException {
    if (new Boolean(!UTIL.equals(c, null)).booleanValue()) {

      Vector rexpr_6 = null;
      rexpr_6 = c.getIdentifierList();
      return rexpr_6;
    }
    else 
      return (Vector) UTIL.ConvertToList(new String(""));
  }
// ***** VDMTOOLS END Name=getInterfaceInheritance


// ***** VDMTOOLS START Name=convertClassBody KEEP=NO
  public Vector convertClassBody (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        IOmlDefinitionBlock reselem_13 = null;
        IJmlDefinitionBlock par_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_14 = (IJmlDefinitionBlock) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = (IOmlDefinitionBlock) convertJmlBlock((IJmlDefinitionBlock) par_14);
        res_l_4.add(reselem_13);
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    Vector tmpVal_19 = null;
    tmpVal_19 = removeNil(l);
    Vector q = null;
    q = tmpVal_19;
    return q;
  }
// ***** VDMTOOLS END Name=convertClassBody


// ***** VDMTOOLS START Name=removeNil KEEP=NO
  public Vector removeNil (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_21 = bind_l_4.iterator(); enm_21.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_21.next());
        i = e_7;
        Boolean pred_15 = null;
        IOmlDefinitionBlock var1_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          var1_16 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_15 = new Boolean(!UTIL.equals(var1_16, null));
        if (pred_15.booleanValue()) {

          IOmlDefinitionBlock reselem_12 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_12 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_3.add(reselem_12);
        }
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=removeNil


// ***** VDMTOOLS START Name=convertJmlBlock KEEP=NO
  public IOmlDefinitionBlock convertJmlBlock (final IJmlDefinitionBlock b) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof JmlInstanceVariableDefinitions))) 
        succ_2 = false;
      if (succ_2) 
        return (IOmlDefinitionBlock) (OmlInstanceVariableDefinitions) convertInstanceVariables((JmlInstanceVariableDefinitions) b);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof JmlValueDefinitions))) 
          succ_2 = false;
        if (succ_2) 
          return (IOmlDefinitionBlock) (OmlValueDefinitions) convertValueDefinitions((JmlValueDefinitions) b);
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof JmlInvariantDefinitions))) 
            succ_2 = false;
          if (succ_2) 
            return (IOmlDefinitionBlock) (OmlInstanceVariableDefinitions) convertInvariantDefinitions((JmlInvariantDefinitions) b);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof JmlOperationDefinitions))) 
              succ_2 = false;
            if (succ_2) 
              return (IOmlDefinitionBlock) (OmlOperationDefinitions) convertOperationDefinitions((JmlOperationDefinitions) b);
            else 
              return null;
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertJmlBlock


// ***** VDMTOOLS START Name=convertInstanceVariables KEEP=NO
  public OmlInstanceVariableDefinitions convertInstanceVariables (final JmlInstanceVariableDefinitions s) throws CGException {

    Vector jml_uvars = null;
    jml_uvars = s.getJmlVariables();
    Vector java_uvars = null;
    java_uvars = s.getJavaVariables();
    Vector vdm_u1 = convertVariables(jml_uvars);
    Vector vdm_u2 = convertVariables(java_uvars);
    Vector res = null;
    res = (Vector) vdm_u1.clone();
    res.addAll(vdm_u2);
    return (OmlInstanceVariableDefinitions) new OmlInstanceVariableDefinitions(res);
  }
// ***** VDMTOOLS END Name=convertInstanceVariables


// ***** VDMTOOLS START Name=convertVariables KEEP=NO
  public Vector convertVariables (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlInstanceVariable reselem_12 = null;
        JmlVariable par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlVariable) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlInstanceVariable) convertVariable((JmlVariable) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertVariables


// ***** VDMTOOLS START Name=convertVariable KEEP=NO
  public OmlInstanceVariable convertVariable (final JmlVariable v) throws CGException {

    IJmlAccessDefinition oldaccess = null;
    oldaccess = (IJmlAccessDefinition) v.getAccess();
    Boolean tmpVal_4 = null;
    tmpVal_4 = v.getStatickeyword();
    Boolean statickey = null;
    statickey = tmpVal_4;
    OmlAccessDefinition tmpVal_5 = null;
    tmpVal_5 = (OmlAccessDefinition) (OmlAccessDefinition) buildAccessDefinition((JmlAccessDefinition) oldaccess, statickey);
    OmlAccessDefinition access = null;
    access = (OmlAccessDefinition) tmpVal_5;
    String tmpVal_8 = null;
    tmpVal_8 = v.getIdentifier();
    String id = null;
    id = tmpVal_8;
    IJmlType tmpVal_9 = null;
    tmpVal_9 = (IJmlType) v.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_9;
    IJmlExpression tmpVal_10 = null;
    tmpVal_10 = (IJmlExpression) v.getExpression();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_10;
    OmlAssignmentDefinition assign = (OmlAssignmentDefinition) (OmlAssignmentDefinition) createOmlAssignmentDefinition(id, (JmlType) tp, (JmlExpression) expr);
    return (OmlInstanceVariable) new OmlInstanceVariable(access, assign);
  }
// ***** VDMTOOLS END Name=convertVariable


// ***** VDMTOOLS START Name=buildAccessDefinition KEEP=NO
  public OmlAccessDefinition buildAccessDefinition (final JmlAccessDefinition a, final Boolean stk) throws CGException {

    IJmlScope sc = null;
    sc = (IJmlScope) a.getScope();
    Long tmpVal_5 = null;
    tmpVal_5 = sc.getValue();
    Long val = null;
    val = tmpVal_5;
    OmlScope scope = (OmlScope) (OmlScope) buildScope(val);
    return (OmlAccessDefinition) new OmlAccessDefinition(new Boolean(false), stk, scope);
  }
// ***** VDMTOOLS END Name=buildAccessDefinition


// ***** VDMTOOLS START Name=buildScope KEEP=NO
  public OmlScope buildScope (final Long n) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(n.intValue() == new Long(0).intValue()))) 
        succ_2 = false;
      if (succ_2) 
        return (OmlScope) new OmlScope(new Long(0));
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(n.intValue() == new Long(1).intValue()))) 
          succ_2 = false;
        if (succ_2) 
          return (OmlScope) new OmlScope(new Long(1));
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(n.intValue() == new Long(2).intValue()))) 
            succ_2 = false;
          if (succ_2) 
            return (OmlScope) new OmlScope(new Long(3));
          else 
            return (OmlScope) new OmlScope(new Long(2));
        }
      }
    }
  }
// ***** VDMTOOLS END Name=buildScope


// ***** VDMTOOLS START Name=createOmlAssignmentDefinition KEEP=NO
  public OmlAssignmentDefinition createOmlAssignmentDefinition (final String id, final JmlType tp, final JmlExpression expr) throws CGException {

    IOmlType newtp = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    IOmlExpression newexpr = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    return (OmlAssignmentDefinition) new OmlAssignmentDefinition(id, newtp, newexpr);
  }
// ***** VDMTOOLS END Name=createOmlAssignmentDefinition


// ***** VDMTOOLS START Name=convertValueDefinitions KEEP=NO
  public OmlValueDefinitions convertValueDefinitions (final JmlValueDefinitions s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = s.getValueList();
    Vector l = null;
    l = tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = convertValues(l);
    Vector q = null;
    q = tmpVal_4;
    return (OmlValueDefinitions) new OmlValueDefinitions(q);
  }
// ***** VDMTOOLS END Name=convertValueDefinitions


// ***** VDMTOOLS START Name=convertValues KEEP=NO
  public Vector convertValues (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlValueDefinition reselem_12 = null;
        JmlValueDefinition par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlValueDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlValueDefinition) convertValue((JmlValueDefinition) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertValues


// ***** VDMTOOLS START Name=convertValue KEEP=NO
  public OmlValueDefinition convertValue (final JmlValueDefinition v) throws CGException {

    IJmlAccessDefinition tmpVal_3 = null;
    tmpVal_3 = (IJmlAccessDefinition) v.getAccess();
    IJmlAccessDefinition access = null;
    access = (IJmlAccessDefinition) tmpVal_3;
    Boolean statkey = null;
    statkey = v.getStaticMod();
    IJmlValueShape tmpVal_5 = null;
    tmpVal_5 = (IJmlValueShape) v.getShape();
    IJmlValueShape shape = null;
    shape = (IJmlValueShape) tmpVal_5;
    OmlAccessDefinition newaccess = (OmlAccessDefinition) (OmlAccessDefinition) buildAccessDefinition((JmlAccessDefinition) access, statkey);
    OmlValueShape newshape = (OmlValueShape) (OmlValueShape) convertValueShape((JmlValueShape) shape);
    return (OmlValueDefinition) new OmlValueDefinition(newaccess, newshape);
  }
// ***** VDMTOOLS END Name=convertValue


// ***** VDMTOOLS START Name=convertValueShape KEEP=NO
  public OmlValueShape convertValueShape (final JmlValueShape s) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = s.getIdentifier();
    String id = null;
    id = tmpVal_3;
    IJmlType tmpVal_4 = null;
    tmpVal_4 = (IJmlType) s.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_4;
    IJmlExpression tmpVal_5 = null;
    tmpVal_5 = (IJmlExpression) s.getExpression();
    IJmlExpression ex = null;
    ex = (IJmlExpression) tmpVal_5;
    IOmlType newtp = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    IOmlExpression newex = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) ex);
    OmlPatternIdentifier pat = (OmlPatternIdentifier) new OmlPatternIdentifier(id);
    return (OmlValueShape) new OmlValueShape(pat, newtp, newex);
  }
// ***** VDMTOOLS END Name=convertValueShape


// ***** VDMTOOLS START Name=convertInvariantDefinitions KEEP=NO
  public OmlInstanceVariableDefinitions convertInvariantDefinitions (final JmlInvariantDefinitions s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = s.getInvariantList();
    Vector l = null;
    l = tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = convertInvariants(l);
    Vector q = null;
    q = tmpVal_4;
    return (OmlInstanceVariableDefinitions) new OmlInstanceVariableDefinitions(q);
  }
// ***** VDMTOOLS END Name=convertInvariantDefinitions


// ***** VDMTOOLS START Name=convertInvariants KEEP=NO
  public Vector convertInvariants (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlInstanceVariableInvariant reselem_12 = null;
        JmlInvariantDefinition par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlInvariantDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlInstanceVariableInvariant) convertInvariant((JmlInvariantDefinition) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertInvariants


// ***** VDMTOOLS START Name=convertInvariant KEEP=NO
  public OmlInstanceVariableInvariant convertInvariant (final JmlInvariantDefinition i) throws CGException {

    IJmlExpression tmpVal_3 = null;
    tmpVal_3 = (IJmlExpression) i.getPredicate();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    IOmlExpression newexpr = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    return (OmlInstanceVariableInvariant) new OmlInstanceVariableInvariant(newexpr);
  }
// ***** VDMTOOLS END Name=convertInvariant


// ***** VDMTOOLS START Name=convertOperationDefinitions KEEP=NO
  public OmlOperationDefinitions convertOperationDefinitions (final JmlOperationDefinitions s) throws CGException {

    Vector list = null;
    list = s.getOperationList();
    Vector newlist = convertOperations(list);
    return (OmlOperationDefinitions) new OmlOperationDefinitions(newlist);
  }
// ***** VDMTOOLS END Name=convertOperationDefinitions


// ***** VDMTOOLS START Name=convertOperations KEEP=NO
  public Vector convertOperations (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        IOmlOperationDefinition reselem_12 = null;
        JmlOperationDefinition par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlOperationDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (IOmlOperationDefinition) convertOperation((JmlOperationDefinition) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertOperations


// ***** VDMTOOLS START Name=convertOperation KEEP=NO
  public IOmlOperationDefinition convertOperation (final JmlOperationDefinition op) throws CGException {

    IJmlAccessDefinition tmpVal_3 = null;
    tmpVal_3 = (IJmlAccessDefinition) op.getAccess();
    IJmlAccessDefinition access = null;
    access = (IJmlAccessDefinition) tmpVal_3;
    Boolean stat = null;
    stat = op.getStatickeyword();
    OmlAccessDefinition newaccess = (OmlAccessDefinition) (OmlAccessDefinition) buildAccessDefinition((JmlAccessDefinition) access, stat);
    String tmpVal_8 = null;
    tmpVal_8 = op.getIdentifier();
    String id = null;
    id = tmpVal_8;
    IJmlType tmpVal_9 = null;
    tmpVal_9 = (IJmlType) op.getReturningType();
    IJmlType t = null;
    t = (IJmlType) tmpVal_9;
    Vector tmpVal_10 = null;
    tmpVal_10 = op.getParameterList();
    Vector p = null;
    p = tmpVal_10;
    Vector tmpVal_11 = null;
    tmpVal_11 = buildOperationType((JmlType) t, p, id);
    Vector tp = null;
    tp = tmpVal_11;
    Vector params = buildParametersList(p);
    IJmlMethodSpecifications trl = null;
    trl = (IJmlMethodSpecifications) op.getTrailer();
    OmlOperationTrailer tmpVal_18 = null;
    tmpVal_18 = (OmlOperationTrailer) (OmlOperationTrailer) buildOperationTrailers((JmlMethodSpecifications) trl);
    OmlOperationTrailer trailer = null;
    trailer = (OmlOperationTrailer) tmpVal_18;
    OmlImplicitOperation tmpVal_20 = null;
    tmpVal_20 = (OmlImplicitOperation) new OmlImplicitOperation(id, params, tp, trailer);
    OmlImplicitOperation shape = null;
    shape = (OmlImplicitOperation) tmpVal_20;
    return (IOmlOperationDefinition) new OmlOperationDefinition(newaccess, shape);
  }
// ***** VDMTOOLS END Name=convertOperation


// ***** VDMTOOLS START Name=buildOperationType KEEP=NO
  public Vector buildOperationType (final JmlType var_1_1, final Vector var_2_2, final String var_3_3) throws CGException {

    JmlType t = null;
    String id = null;
    boolean succ_4 = true;
    t = (JmlType) var_1_1;
    id = var_3_3;
    if (!succ_4) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation buildOperationType");
    {

      IOmlType tmpVal_6 = null;
      tmpVal_6 = (IOmlType) (IOmlType) convertType((IJmlType) t);
      IOmlType tp = null;
      tp = (IOmlType) tmpVal_6;
      String ni = null;
      ni = new String("var").concat(id);
      Vector rexpr_11 = null;
      rexpr_11 = new Vector();
      rexpr_11.add(new OmlIdentifierTypePair(ni, tp));
      return rexpr_11;
    }
  }
// ***** VDMTOOLS END Name=buildOperationType


// ***** VDMTOOLS START Name=buildParametersList KEEP=NO
  public Vector buildParametersList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlPatternTypePair reselem_12 = null;
        JmlParameter par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlParameter) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlPatternTypePair) buildParameter((JmlParameter) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildParametersList


// ***** VDMTOOLS START Name=buildParameter KEEP=NO
  public OmlPatternTypePair buildParameter (final JmlParameter p) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = p.getIdentifier();
    String id = null;
    id = tmpVal_3;
    IJmlType tmpVal_4 = null;
    tmpVal_4 = (IJmlType) p.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_4;
    IOmlType nt = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    OmlPatternIdentifier pa = (OmlPatternIdentifier) new OmlPatternIdentifier(id);
    OmlPatternTypePair rexpr_9 = null;
    Vector arg_10 = null;
    arg_10 = new Vector();
    arg_10.add(pa);
    rexpr_9 = new OmlPatternTypePair(arg_10, nt);
    return (OmlPatternTypePair) rexpr_9;
  }
// ***** VDMTOOLS END Name=buildParameter


// ***** VDMTOOLS START Name=buildOperationTrailers KEEP=NO
  public OmlOperationTrailer buildOperationTrailers (final JmlMethodSpecifications specs) throws CGException {
    if (new Boolean(UTIL.equals(specs, null)).booleanValue()) 
      return (OmlOperationTrailer) new OmlOperationTrailer(null, null, null, null);
    else {

      IJmlSpecs sp = null;
      sp = (IJmlSpecs) specs.getSpecs();
      IJmlSpecs al = null;
      al = (IJmlSpecs) specs.getAlso();
      Vector s1 = null;
      s1 = sp.getList();
      Vector s2 = null;
      s2 = al.getList();
      Vector tmpVal_10 = null;
      tmpVal_10 = (Vector) s1.clone();
      tmpVal_10.addAll(s2);
      Vector s = null;
      s = tmpVal_10;
      return (OmlOperationTrailer) (OmlOperationTrailer) buildTrailers(s);
    }
  }
// ***** VDMTOOLS END Name=buildOperationTrailers


// ***** VDMTOOLS START Name=buildTrailers KEEP=NO
  public OmlOperationTrailer buildTrailers (final Vector s) throws CGException {

    Vector list = joinTrailers(s);
    IOmlExpression tmpVal_5 = null;
    tmpVal_5 = (IOmlExpression) (IOmlExpression) buildPreConditions(list);
    IOmlExpression pres = null;
    pres = (IOmlExpression) tmpVal_5;
    OmlExpression posts = (OmlExpression) (OmlExpression) buildPostConditions(list);
    OmlExternals extr = (OmlExternals) (OmlExternals) buildExternalConditions(list);
    OmlExceptions excp = (OmlExceptions) (OmlExceptions) buildExceptionalConditions(list);
    return (OmlOperationTrailer) new OmlOperationTrailer(extr, pres, posts, excp);
  }
// ***** VDMTOOLS END Name=buildTrailers


// ***** VDMTOOLS START Name=buildPreConditions KEEP=NO
  public IOmlExpression buildPreConditions (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_21 = bind_l_5.iterator(); enm_21.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_21.next());
        i = e_8;
        Boolean pred_16 = null;
        IJmlTrailers obj_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_17 = (IJmlTrailers) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_16 = new Boolean(obj_17 instanceof JmlRequiresClause);
        if (pred_16.booleanValue()) {

          IJmlTrailers reselem_13 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_13 = (IJmlTrailers) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_4.add(reselem_13);
        }
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    return (IOmlExpression) (IOmlExpression) buildPreConditionsHelper(l);
  }
// ***** VDMTOOLS END Name=buildPreConditions


// ***** VDMTOOLS START Name=buildPreConditionsHelper KEEP=NO
  public IOmlExpression buildPreConditionsHelper (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return null;
    else {

      Vector tmpVal_7 = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = s.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_22 = bind_l_9.iterator(); enm_22.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_22.next());
          i = e_12;
          OmlExpression reselem_17 = null;
          JmlRequiresClause par_18 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            par_18 = (JmlRequiresClause) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_17 = (OmlExpression) convertPreCondition((JmlRequiresClause) par_18);
          res_l_8.add(reselem_17);
        }
        tmpVal_7 = res_l_8;
      }
      Vector l = null;
      l = tmpVal_7;
      return (IOmlExpression) (IOmlExpression) landExpression(l);
    }
  }
// ***** VDMTOOLS END Name=buildPreConditionsHelper


// ***** VDMTOOLS START Name=landExpression KEEP=NO
  public IOmlExpression landExpression (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(1).intValue()).booleanValue()) 
      return (IOmlExpression) (OmlExpression) s.get(0);
    else {

      OmlBinaryOperator tmpVal_7 = null;
      tmpVal_7 = (OmlBinaryOperator) new OmlBinaryOperator(new Long(10));
      OmlBinaryOperator op = null;
      op = (OmlBinaryOperator) tmpVal_7;
      OmlExpression lhs = (OmlExpression) (OmlExpression) s.get(0);
      IOmlExpression rhs = (IOmlExpression) (IOmlExpression) landExpression(new Vector(s.subList(1, s.size())));
      return (IOmlExpression) new OmlBinaryExpression(lhs, op, rhs);
    }
  }
// ***** VDMTOOLS END Name=landExpression


// ***** VDMTOOLS START Name=buildPostConditions KEEP=NO
  public OmlExpression buildPostConditions (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_21 = bind_l_5.iterator(); enm_21.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_21.next());
        i = e_8;
        Boolean pred_16 = null;
        IJmlTrailers obj_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_17 = (IJmlTrailers) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_16 = new Boolean(obj_17 instanceof JmlEnsuresClause);
        if (pred_16.booleanValue()) {

          IJmlTrailers reselem_13 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_13 = (IJmlTrailers) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_4.add(reselem_13);
        }
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    return (OmlExpression) (IOmlExpression) buildPostConditionsHelper(l);
  }
// ***** VDMTOOLS END Name=buildPostConditions


// ***** VDMTOOLS START Name=buildPostConditionsHelper KEEP=NO
  public IOmlExpression buildPostConditionsHelper (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return null;
    else {

      Vector tmpVal_7 = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = s.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_22 = bind_l_9.iterator(); enm_22.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_22.next());
          i = e_12;
          OmlExpression reselem_17 = null;
          JmlEnsuresClause par_18 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            par_18 = (JmlEnsuresClause) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_17 = (OmlExpression) convertPostCondition((JmlEnsuresClause) par_18);
          res_l_8.add(reselem_17);
        }
        tmpVal_7 = res_l_8;
      }
      Vector l = null;
      l = tmpVal_7;
      return (IOmlExpression) (IOmlExpression) landExpression(l);
    }
  }
// ***** VDMTOOLS END Name=buildPostConditionsHelper


// ***** VDMTOOLS START Name=buildExternalConditions KEEP=NO
  public OmlExternals buildExternalConditions (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return null;
    else {

      Vector tmpVal_7 = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = s.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_26 = bind_l_9.iterator(); enm_26.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_26.next());
          i = e_12;
          Boolean pred_21 = null;
          IJmlTrailers obj_22 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            obj_22 = (IJmlTrailers) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_21 = new Boolean(obj_22 instanceof JmlAssignableClause);
          if (pred_21.booleanValue()) {

            Vector reselem_17 = null;
            IJmlTrailers par_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
              par_18 = (IJmlTrailers) s.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_17 = convertAssignableClause((JmlAssignableClause) par_18);
            res_l_8.add(reselem_17);
          }
        }
        tmpVal_7 = res_l_8;
      }
      Vector l = null;
      l = tmpVal_7;
      OmlExternals rexpr_27 = null;
      Vector arg_28 = null;
      Vector rdcseq_30 = new Vector();
      for (Iterator enm_33 = l.iterator(); enm_33.hasNext(); ) {

        Vector e_31 = (Vector) UTIL.ConvertToList(enm_33.next());
        rdcseq_30.addAll(e_31);
      }
      arg_28 = rdcseq_30;
      rexpr_27 = new OmlExternals(arg_28);
      return (OmlExternals) rexpr_27;
    }
  }
// ***** VDMTOOLS END Name=buildExternalConditions


// ***** VDMTOOLS START Name=buildExceptionalConditions KEEP=NO
  public OmlExceptions buildExceptionalConditions (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return null;
    else {

      Vector tmpVal_7 = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = s.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_26 = bind_l_9.iterator(); enm_26.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_26.next());
          i = e_12;
          Boolean pred_21 = null;
          IJmlTrailers obj_22 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            obj_22 = (IJmlTrailers) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_21 = new Boolean(obj_22 instanceof JmlSignalsClause);
          if (pred_21.booleanValue()) {

            OmlError reselem_17 = null;
            IJmlTrailers par_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
              par_18 = (IJmlTrailers) s.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_17 = (OmlError) convertSignalsClause((JmlSignalsClause) par_18);
            res_l_8.add(reselem_17);
          }
        }
        tmpVal_7 = res_l_8;
      }
      Vector l = null;
      l = tmpVal_7;
      return (OmlExceptions) new OmlExceptions(l);
    }
  }
// ***** VDMTOOLS END Name=buildExceptionalConditions


// ***** VDMTOOLS START Name=joinTrailers KEEP=NO
  public Vector joinTrailers (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    Vector unArg_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        Vector reselem_13 = null;
        IJmlOperationTrailer par_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_14 = (IJmlOperationTrailer) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = getTrailers((IJmlOperationTrailer) par_14);
        res_l_4.add(reselem_13);
      }
      unArg_3 = res_l_4;
    }
    Vector rdcseq_19 = new Vector();
    for (Iterator enm_22 = unArg_3.iterator(); enm_22.hasNext(); ) {

      Vector e_20 = (Vector) UTIL.ConvertToList(enm_22.next());
      rdcseq_19.addAll(e_20);
    }
    rexpr_2 = rdcseq_19;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=joinTrailers


// ***** VDMTOOLS START Name=getTrailers KEEP=NO
  public Vector getTrailers (final IJmlOperationTrailer t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlBehaviourSpec))) 
        succ_2 = false;
      if (succ_2) 
        return getBehaviourTrailerList((JmlBehaviourSpec) t);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlExceptionalSpec))) 
          succ_2 = false;
        if (succ_2) 
          return getExceptTrailerList((JmlExceptionalSpec) t);
        else 
          return getNormalTrailerList((JmlNormalSpec) t);
      }
    }
  }
// ***** VDMTOOLS END Name=getTrailers


// ***** VDMTOOLS START Name=getBehaviourTrailerList KEEP=NO
  public Vector getBehaviourTrailerList (final JmlBehaviourSpec s) throws CGException {

    Vector rexpr_2 = null;
    rexpr_2 = s.getList();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getBehaviourTrailerList


// ***** VDMTOOLS START Name=getExceptTrailerList KEEP=NO
  public Vector getExceptTrailerList (final JmlExceptionalSpec s) throws CGException {

    Vector rexpr_2 = null;
    rexpr_2 = s.getList();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getExceptTrailerList


// ***** VDMTOOLS START Name=getNormalTrailerList KEEP=NO
  public Vector getNormalTrailerList (final JmlNormalSpec s) throws CGException {

    Vector rexpr_2 = null;
    rexpr_2 = s.getList();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getNormalTrailerList


// ***** VDMTOOLS START Name=convertPostCondition KEEP=NO
  public OmlExpression convertPostCondition (final JmlEnsuresClause e) throws CGException {

    IJmlExpression tmpVal_3 = null;
    tmpVal_3 = (IJmlExpression) e.getEnsuresExpression();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    return (OmlExpression) nexp;
  }
// ***** VDMTOOLS END Name=convertPostCondition


// ***** VDMTOOLS START Name=convertPreCondition KEEP=NO
  public OmlExpression convertPreCondition (final JmlRequiresClause e) throws CGException {

    IJmlExpression tmpVal_3 = null;
    tmpVal_3 = (IJmlExpression) e.getRequiresExpression();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    return (OmlExpression) nexp;
  }
// ***** VDMTOOLS END Name=convertPreCondition


// ***** VDMTOOLS START Name=convertAssignableClause KEEP=NO
  public Vector convertAssignableClause (final JmlAssignableClause a) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = a.getAssignableList();
    Vector l = null;
    l = tmpVal_3;
    OmlMode mode = (OmlMode) new OmlMode(new Long(0));
    Vector nl = buildNames(l);
    Vector tmpVal_8 = null;
    tmpVal_8 = buildVarInformation(nl, (OmlMode) mode);
    Vector s = null;
    s = tmpVal_8;
    return s;
  }
// ***** VDMTOOLS END Name=convertAssignableClause


// ***** VDMTOOLS START Name=buildNames KEEP=NO
  public Vector buildNames (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlName reselem_12 = null;
        String par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = UTIL.ConvertToString(s.get(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlName) buildName(par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildNames


// ***** VDMTOOLS START Name=buildName KEEP=NO
  public OmlName buildName (final String s) throws CGException {
    return (OmlName) new OmlName(null, s);
  }
// ***** VDMTOOLS END Name=buildName


// ***** VDMTOOLS START Name=buildVarInformation KEEP=NO
  public Vector buildVarInformation (final Vector s, final OmlMode m) throws CGException {

    OmlVarInformation tmpVal_4 = null;
    tmpVal_4 = (OmlVarInformation) new OmlVarInformation(m, s, null);
    OmlVarInformation vdm_var = null;
    vdm_var = (OmlVarInformation) tmpVal_4;
    Vector rexpr_8 = null;
    rexpr_8 = new Vector();
    rexpr_8.add(vdm_var);
    return rexpr_8;
  }
// ***** VDMTOOLS END Name=buildVarInformation


// ***** VDMTOOLS START Name=convertSignalsClause KEEP=NO
  public OmlError convertSignalsClause (final JmlSignalsClause s) throws CGException {

    IJmlException tmpVal_3 = null;
    tmpVal_3 = (IJmlException) s.getException();
    IJmlException exc = null;
    exc = (IJmlException) tmpVal_3;
    IJmlExpression prd = null;
    prd = (IJmlExpression) s.getPredicate();
    IOmlExpression npred = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) prd);
    String tmpVal_7 = null;
    tmpVal_7 = getIdFromException((JmlException) exc);
    String id = null;
    id = tmpVal_7;
    OmlSymbolicLiteralExpression tmpVal_9 = null;
    tmpVal_9 = (OmlSymbolicLiteralExpression) buildFalseExpression();
    OmlSymbolicLiteralExpression expr = null;
    expr = (OmlSymbolicLiteralExpression) tmpVal_9;
    return (OmlError) new OmlError(id, npred, expr);
  }
// ***** VDMTOOLS END Name=convertSignalsClause


// ***** VDMTOOLS START Name=getIdFromException KEEP=NO
  public String getIdFromException (final JmlException e) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = e.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getIdFromException


// ***** VDMTOOLS START Name=buildFalseExpression KEEP=NO
  public OmlSymbolicLiteralExpression buildFalseExpression () throws CGException {

    OmlBooleanLiteral tmpVal_2 = null;
    tmpVal_2 = (OmlBooleanLiteral) new OmlBooleanLiteral(new Boolean(false));
    OmlBooleanLiteral f = null;
    f = (OmlBooleanLiteral) tmpVal_2;
    OmlSymbolicLiteralExpression tmpVal_4 = null;
    tmpVal_4 = (OmlSymbolicLiteralExpression) new OmlSymbolicLiteralExpression(f);
    OmlSymbolicLiteralExpression expr = null;
    expr = (OmlSymbolicLiteralExpression) tmpVal_4;
    return (OmlSymbolicLiteralExpression) expr;
  }
// ***** VDMTOOLS END Name=buildFalseExpression


// ***** VDMTOOLS START Name=convertType KEEP=NO
  public IOmlType convertType (final IJmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlCharType))) 
        succ_2 = false;
      if (succ_2) 
        return (IOmlType) new OmlCharType();
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlBoolType))) 
          succ_2 = false;
        if (succ_2) 
          return (IOmlType) new OmlBoolType();
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlEnumerationType))) 
            succ_2 = false;
          if (succ_2) 
            return (IOmlType) (OmlQuoteType) convertEnumerationType((JmlEnumerationType) t);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlIntegerType))) 
              succ_2 = false;
            if (succ_2) 
              return (IOmlType) new OmlIntType();
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlFloatType))) 
                succ_2 = false;
              if (succ_2) 
                return (IOmlType) new OmlRealType();
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlMapValueToValueType))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IOmlType) (OmlGeneralMapType) convertMapType((JmlMapValueToValueType) t);
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlSetValueType))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IOmlType) (OmlSetType) convertSetType((JmlSetValueType) t);
                  else {

                    succ_2 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlSeqValueType))) 
                      succ_2 = false;
                    if (succ_2) 
                      return (IOmlType) (OmlSeq0Type) convertSeqType((JmlSeqValueType) t);
                    else {

                      succ_2 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlObjectType))) 
                        succ_2 = false;
                      if (succ_2) 
                        return (IOmlType) new OmlTokenType();
                      else {

                        succ_2 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlVoidType))) 
                          succ_2 = false;
                        if (succ_2) 
                          return (IOmlType) new OmlEmptyType();
                        else {

                          succ_2 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlTupleType))) 
                            succ_2 = false;
                          if (succ_2) 
                            return (IOmlType) (OmlProductType) convertTupleType((JmlTupleType) t);
                          else {

                            succ_2 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlNatType))) 
                              succ_2 = false;
                            if (succ_2) 
                              return (IOmlType) new OmlNatType();
                            else {

                              succ_2 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlClassType))) 
                                succ_2 = false;
                              if (succ_2) 
                                return (IOmlType) (OmlCompositeType) convertClassType((JmlClassType) t);
                              else {

                                succ_2 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlClassName))) 
                                  succ_2 = false;
                                if (succ_2) 
                                  return (IOmlType) (OmlTypeName) convertClassName((JmlClassName) t);
                                else 
                                  return (IOmlType) new OmlEmptyType();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertType


// ***** VDMTOOLS START Name=convertEnumerationType KEEP=NO
  public OmlQuoteType convertEnumerationType (final JmlEnumerationType e) throws CGException {

    IJmlEnumLiteral tmpVal_3 = null;
    tmpVal_3 = (IJmlEnumLiteral) e.getEnumLiteral();
    IJmlEnumLiteral lit = null;
    lit = (IJmlEnumLiteral) tmpVal_3;
    IOmlLiteral newlit = (IOmlLiteral) (IOmlLiteral) convertLiteral((IJmlLiteral) lit);
    return (OmlQuoteType) new OmlQuoteType((IOmlQuoteLiteral) newlit);
  }
// ***** VDMTOOLS END Name=convertEnumerationType


// ***** VDMTOOLS START Name=convertMapType KEEP=NO
  public OmlGeneralMapType convertMapType (final JmlMapValueToValueType m) throws CGException {

    IJmlType domtp = null;
    domtp = (IJmlType) m.getDomType();
    IJmlType rngtp = null;
    rngtp = (IJmlType) m.getRngType();
    IOmlType tpd = (IOmlType) (IOmlType) convertType((IJmlType) domtp);
    IOmlType tpr = (IOmlType) (IOmlType) convertType((IJmlType) rngtp);
    return (OmlGeneralMapType) new OmlGeneralMapType(tpd, tpr);
  }
// ***** VDMTOOLS END Name=convertMapType


// ***** VDMTOOLS START Name=convertSetType KEEP=NO
  public OmlSetType convertSetType (final JmlSetValueType s) throws CGException {

    IJmlType tmpVal_3 = null;
    tmpVal_3 = (IJmlType) s.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_3;
    IOmlType newtp = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    return (OmlSetType) new OmlSetType(newtp);
  }
// ***** VDMTOOLS END Name=convertSetType


// ***** VDMTOOLS START Name=convertSeqType KEEP=NO
  public OmlSeq0Type convertSeqType (final JmlSeqValueType s) throws CGException {

    IJmlType tmpVal_3 = null;
    tmpVal_3 = (IJmlType) s.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_3;
    IOmlType newtp = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    return (OmlSeq0Type) new OmlSeq0Type(newtp);
  }
// ***** VDMTOOLS END Name=convertSeqType


// ***** VDMTOOLS START Name=convertTupleType KEEP=NO
  public OmlProductType convertTupleType (final JmlTupleType t) throws CGException {

    Vector tps = null;
    tps = t.getVals();
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(new Long(tps.size()).intValue() == new Long(0).intValue()))) 
        succ_4 = false;
      if (succ_4) {

        OmlEmptyType t1 = (OmlEmptyType) new OmlEmptyType();
        OmlEmptyType t2 = (OmlEmptyType) new OmlEmptyType();
        return (OmlProductType) new OmlProductType(t1, t2);
      }
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(new Long(tps.size()).intValue() == new Long(1).intValue()))) 
          succ_4 = false;
        if (succ_4) {

          IJmlType t1 = (IJmlType) (IJmlType) tps.get(0);
          IOmlType nt = (IOmlType) (IOmlType) convertType((IJmlType) t1);
          OmlEmptyType t2 = (OmlEmptyType) new OmlEmptyType();
          return (OmlProductType) new OmlProductType(nt, t2);
        }
        else {

          IJmlType t1 = (IJmlType) (IJmlType) tps.get(0);
          IOmlType lhs = (IOmlType) (IOmlType) convertType((IJmlType) t1);
          IOmlType rhs = (IOmlType) (IOmlType) convertRhsTypes(new Vector(tps.subList(1, tps.size())));
          return (OmlProductType) new OmlProductType(lhs, rhs);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertTupleType


// ***** VDMTOOLS START Name=convertRhsTypes KEEP=NO
  public IOmlType convertRhsTypes (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(1).intValue()).booleanValue()) {

      JmlType tmpVal_18 = null;
      tmpVal_18 = (JmlType) (JmlType) s.get(0);
      JmlType tp = null;
      tp = (JmlType) tmpVal_18;
      IOmlType nt = (IOmlType) (IOmlType) convertType((IJmlType) tp);
      return (IOmlType) nt;
    }
    else {

      JmlType tmpVal_7 = null;
      tmpVal_7 = (JmlType) (JmlType) s.get(0);
      JmlType tp = null;
      tp = (JmlType) tmpVal_7;
      IOmlType lhs = (IOmlType) (IOmlType) convertType((IJmlType) tp);
      IOmlType rhs = (IOmlType) (IOmlType) convertRhsTypes(new Vector(s.subList(1, s.size())));
      return (IOmlType) new OmlProductType(lhs, rhs);
    }
  }
// ***** VDMTOOLS END Name=convertRhsTypes


// ***** VDMTOOLS START Name=convertClassType KEEP=NO
  public OmlCompositeType convertClassType (final JmlClassType c) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = c.getId();
    String id = null;
    id = tmpVal_3;
    Vector fl = null;
    fl = c.getFieldList();
    Vector newfl = convertFieldList(fl);
    return (OmlCompositeType) new OmlCompositeType(id, newfl);
  }
// ***** VDMTOOLS END Name=convertClassType


// ***** VDMTOOLS START Name=convertFieldList KEEP=NO
  public Vector convertFieldList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlField reselem_12 = null;
        JmlField par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlField) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlField) convertField((JmlField) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertFieldList


// ***** VDMTOOLS START Name=convertField KEEP=NO
  public OmlField convertField (final JmlField f) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = f.getId();
    String id = null;
    id = tmpVal_3;
    IJmlType tmpVal_4 = null;
    tmpVal_4 = (IJmlType) f.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_4;
    IOmlType newtp = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    return (OmlField) new OmlField(id, newtp, new Boolean(false));
  }
// ***** VDMTOOLS END Name=convertField


// ***** VDMTOOLS START Name=convertClassName KEEP=NO
  public OmlTypeName convertClassName (final JmlClassName n) throws CGException {

    IJmlName tmpVal_3 = null;
    tmpVal_3 = (IJmlName) n.getId();
    IJmlName name = null;
    name = (IJmlName) tmpVal_3;
    IOmlName newname = (IOmlName) (IOmlName) convertName((IJmlName) name);
    return (OmlTypeName) new OmlTypeName(newname);
  }
// ***** VDMTOOLS END Name=convertClassName


// ***** VDMTOOLS START Name=convertExpression KEEP=NO
  public IOmlExpression convertExpression (final IJmlExpression e) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlBracketedExpression))) 
        succ_2 = false;
      if (succ_2) 
        return (IOmlExpression) (OmlBracketedExpression) convertBracketedExpression((JmlBracketedExpression) e);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlIfExpression))) 
          succ_2 = false;
        if (succ_2) 
          return (IOmlExpression) (OmlIfExpression) convertIfExpression((JmlIfExpression) e);
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlUnaryExpression))) 
            succ_2 = false;
          if (succ_2) 
            return (IOmlExpression) (OmlUnaryExpression) convertUnaryExpression((JmlUnaryExpression) e);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlBinaryExpression))) 
              succ_2 = false;
            if (succ_2) 
              return (IOmlExpression) (OmlBinaryExpression) convertBinaryExpression((JmlBinaryExpression) e);
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlForAllExpression))) 
                succ_2 = false;
              if (succ_2) 
                return (IOmlExpression) (OmlForAllExpression) convertForAllExpression((JmlForAllExpression) e);
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlExistsExpression))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IOmlExpression) (OmlExistsExpression) convertExistsExpression((JmlExistsExpression) e);
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlOldName))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IOmlExpression) (OmlOldName) convertOldName((JmlOldName) e);
                  else {

                    succ_2 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlNewExpression))) 
                      succ_2 = false;
                    if (succ_2) 
                      return (IOmlExpression) (OmlNewExpression) convertNewExpression((JmlNewExpression) e);
                    else {

                      succ_2 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlNewExpression))) 
                        succ_2 = false;
                      if (succ_2) 
                        return (IOmlExpression) (IOmlName) convertName((IJmlName) e);
                      else {

                        succ_2 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlSetEnumeration))) 
                          succ_2 = false;
                        if (succ_2) 
                          return (IOmlExpression) (OmlSetEnumeration) convertSetEnumeration((JmlSetEnumeration) e);
                        else {

                          succ_2 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlSequenceEnumeration))) 
                            succ_2 = false;
                          if (succ_2) 
                            return (IOmlExpression) (OmlSequenceEnumeration) convertSequenceEnumeration((JmlSequenceEnumeration) e);
                          else {

                            succ_2 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlMapEnumeration))) 
                              succ_2 = false;
                            if (succ_2) 
                              return (IOmlExpression) (OmlMapEnumeration) convertMapEnumeration((JmlMapEnumeration) e);
                            else {

                              succ_2 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlApplyExpression))) 
                                succ_2 = false;
                              if (succ_2) 
                                return (IOmlExpression) (OmlApplyExpression) convertApplyExpression((JmlApplyExpression) e);
                              else {

                                succ_2 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlFieldSelectExpression))) 
                                  succ_2 = false;
                                if (succ_2) 
                                  return (IOmlExpression) (OmlFieldSelect) convertFieldSelect((JmlFieldSelectExpression) e);
                                else {

                                  succ_2 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlLiteralExpression))) 
                                    succ_2 = false;
                                  if (succ_2) 
                                    return (IOmlExpression) (OmlSymbolicLiteralExpression) convertLiteralExpression((JmlLiteralExpression) e);
                                  else {

                                    succ_2 = true;
                                    if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlBlockExpression))) 
                                      succ_2 = false;
                                    if (succ_2) 
                                      return (IOmlExpression) (OmlLetExpression) convertBlockExpression((JmlBlockExpression) e);
                                    else {

                                      succ_2 = true;
                                      if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlThisExpression))) 
                                        succ_2 = false;
                                      if (succ_2) 
                                        return (IOmlExpression) (OmlSelfExpression) convertThisExpression((JmlThisExpression) e);
                                      else {

                                        succ_2 = true;
                                        if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof JmlInstanceOfExpression))) 
                                          succ_2 = false;
                                        if (succ_2) 
                                          return (IOmlExpression) (OmlIsExpression) convertInstanceOf((JmlInstanceOfExpression) e);
                                        else 
                                          return (IOmlExpression) new OmlUndefinedExpression();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertExpression


// ***** VDMTOOLS START Name=convertBracketedExpression KEEP=NO
  public OmlBracketedExpression convertBracketedExpression (final JmlBracketedExpression e) throws CGException {

    IJmlExpression tmpVal_3 = null;
    tmpVal_3 = (IJmlExpression) e.getExpression();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    return (OmlBracketedExpression) new OmlBracketedExpression(nexp);
  }
// ***** VDMTOOLS END Name=convertBracketedExpression


// ***** VDMTOOLS START Name=convertIfExpression KEEP=NO
  public OmlIfExpression convertIfExpression (final JmlIfExpression e) throws CGException {

    IJmlExpression ifexp = null;
    ifexp = (IJmlExpression) e.getIfExpression();
    IJmlExpression thenexp = null;
    thenexp = (IJmlExpression) e.getThenExpression();
    IJmlExpression elseexp = null;
    elseexp = (IJmlExpression) e.getElseExpression();
    IOmlExpression nif = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) ifexp);
    IOmlExpression nthen = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) thenexp);
    IOmlExpression nelse = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) elseexp);
    return (OmlIfExpression) new OmlIfExpression(nif, nthen, new Vector(), nelse);
  }
// ***** VDMTOOLS END Name=convertIfExpression


// ***** VDMTOOLS START Name=convertUnaryExpression KEEP=NO
  public OmlUnaryExpression convertUnaryExpression (final JmlUnaryExpression e) throws CGException {

    IJmlUnaryOperator tmpVal_3 = null;
    tmpVal_3 = (IJmlUnaryOperator) e.getOperator();
    IJmlUnaryOperator op = null;
    op = (IJmlUnaryOperator) tmpVal_3;
    IJmlExpression tmpVal_4 = null;
    tmpVal_4 = (IJmlExpression) e.getExpression();
    IJmlExpression ex = null;
    ex = (IJmlExpression) tmpVal_4;
    OmlUnaryOperator nop = (OmlUnaryOperator) (OmlUnaryOperator) convertOperator((JmlUnaryOperator) op);
    IOmlExpression nex = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) ex);
    return (OmlUnaryExpression) new OmlUnaryExpression(nop, nex);
  }
// ***** VDMTOOLS END Name=convertUnaryExpression


// ***** VDMTOOLS START Name=convertOperator KEEP=NO
  public OmlUnaryOperator convertOperator (final JmlUnaryOperator op) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = op.getValue();
    Long val = null;
    val = tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(4).intValue()))) 
        succ_4 = false;
      if (succ_4) 
        return (OmlUnaryOperator) new OmlUnaryOperator(new Long(0));
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(5).intValue()))) 
          succ_4 = false;
        if (succ_4) 
          return (OmlUnaryOperator) new OmlUnaryOperator(new Long(1));
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(10).intValue()))) 
            succ_4 = false;
          if (succ_4) 
            return (OmlUnaryOperator) new OmlUnaryOperator(new Long(2));
          else {

            succ_4 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(7).intValue()))) 
              succ_4 = false;
            if (succ_4) 
              return (OmlUnaryOperator) new OmlUnaryOperator(new Long(3));
            else {

              succ_4 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(2).intValue()))) 
                succ_4 = false;
              if (succ_4) 
                return (OmlUnaryOperator) new OmlUnaryOperator(new Long(5));
              else {

                succ_4 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(0).intValue()))) 
                  succ_4 = false;
                if (succ_4) 
                  return (OmlUnaryOperator) new OmlUnaryOperator(new Long(6));
                else {

                  succ_4 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(6).intValue()))) 
                    succ_4 = false;
                  if (succ_4) 
                    return (OmlUnaryOperator) new OmlUnaryOperator(new Long(8));
                  else {

                    succ_4 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(14).intValue()))) 
                      succ_4 = false;
                    if (succ_4) 
                      return (OmlUnaryOperator) new OmlUnaryOperator(new Long(9));
                    else {

                      succ_4 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(12).intValue()))) 
                        succ_4 = false;
                      if (succ_4) 
                        return (OmlUnaryOperator) new OmlUnaryOperator(new Long(10));
                      else {

                        succ_4 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(8).intValue()))) 
                          succ_4 = false;
                        if (succ_4) 
                          return (OmlUnaryOperator) new OmlUnaryOperator(new Long(11));
                        else {

                          succ_4 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(15).intValue()))) 
                            succ_4 = false;
                          if (succ_4) 
                            return (OmlUnaryOperator) new OmlUnaryOperator(new Long(14));
                          else {

                            succ_4 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(1).intValue()))) 
                              succ_4 = false;
                            if (succ_4) 
                              return (OmlUnaryOperator) new OmlUnaryOperator(new Long(15));
                            else {

                              succ_4 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(13).intValue()))) 
                                succ_4 = false;
                              if (succ_4) 
                                return (OmlUnaryOperator) new OmlUnaryOperator(new Long(16));
                              else {

                                succ_4 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(3).intValue()))) 
                                  succ_4 = false;
                                if (succ_4) 
                                  return (OmlUnaryOperator) new OmlUnaryOperator(new Long(17));
                                else 
                                  return (OmlUnaryOperator) new OmlUnaryOperator();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertOperator


// ***** VDMTOOLS START Name=convertBinaryExpression KEEP=NO
  public OmlBinaryExpression convertBinaryExpression (final JmlBinaryExpression e) throws CGException {

    IJmlExpression lhs = null;
    lhs = (IJmlExpression) e.getLhsExpression();
    IJmlBinaryOperator tmpVal_4 = null;
    tmpVal_4 = (IJmlBinaryOperator) e.getOperator();
    IJmlBinaryOperator op = null;
    op = (IJmlBinaryOperator) tmpVal_4;
    IJmlExpression rhs = null;
    rhs = (IJmlExpression) e.getRhsExpression();
    IOmlExpression nlhs = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) lhs);
    OmlBinaryOperator nop = (OmlBinaryOperator) (OmlBinaryOperator) convertBinaryOperator((JmlBinaryOperator) op);
    IOmlExpression nrhs = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) rhs);
    return (OmlBinaryExpression) new OmlBinaryExpression(nlhs, nop, nrhs);
  }
// ***** VDMTOOLS END Name=convertBinaryExpression


// ***** VDMTOOLS START Name=convertBinaryOperator KEEP=NO
  public OmlBinaryOperator convertBinaryOperator (final JmlBinaryOperator op) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = op.getValue();
    Long val = null;
    val = tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(1).intValue()))) 
        succ_4 = false;
      if (succ_4) 
        return (OmlBinaryOperator) new OmlBinaryOperator(new Long(18));
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(2).intValue()))) 
          succ_4 = false;
        if (succ_4) 
          return (OmlBinaryOperator) new OmlBinaryOperator(new Long(23));
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(3).intValue()))) 
            succ_4 = false;
          if (succ_4) 
            return (OmlBinaryOperator) new OmlBinaryOperator(new Long(13));
          else {

            succ_4 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(6).intValue()))) 
              succ_4 = false;
            if (succ_4) 
              return (OmlBinaryOperator) new OmlBinaryOperator(new Long(22));
            else {

              succ_4 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(7).intValue()))) 
                succ_4 = false;
              if (succ_4) 
                return (OmlBinaryOperator) new OmlBinaryOperator(new Long(33));
              else {

                succ_4 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(8).intValue()))) 
                  succ_4 = false;
                if (succ_4) 
                  return (OmlBinaryOperator) new OmlBinaryOperator(new Long(1));
                else {

                  succ_4 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(10).intValue()))) 
                    succ_4 = false;
                  if (succ_4) 
                    return (OmlBinaryOperator) new OmlBinaryOperator(new Long(16));
                  else {

                    succ_4 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(11).intValue()))) 
                      succ_4 = false;
                    if (succ_4) 
                      return (OmlBinaryOperator) new OmlBinaryOperator(new Long(0));
                    else {

                      succ_4 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(12).intValue()))) 
                        succ_4 = false;
                      if (succ_4) 
                        return (OmlBinaryOperator) new OmlBinaryOperator(new Long(12));
                      else {

                        succ_4 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(13).intValue()))) 
                          succ_4 = false;
                        if (succ_4) 
                          return (OmlBinaryOperator) new OmlBinaryOperator(new Long(4));
                        else {

                          succ_4 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(14).intValue()))) 
                            succ_4 = false;
                          if (succ_4) 
                            return (OmlBinaryOperator) new OmlBinaryOperator(new Long(15));
                          else {

                            succ_4 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(16).intValue()))) 
                              succ_4 = false;
                            if (succ_4) 
                              return (OmlBinaryOperator) new OmlBinaryOperator(new Long(28));
                            else {

                              succ_4 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(19).intValue()))) 
                                succ_4 = false;
                              if (succ_4) 
                                return (OmlBinaryOperator) new OmlBinaryOperator(new Long(6));
                              else {

                                succ_4 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(20).intValue()))) 
                                  succ_4 = false;
                                if (succ_4) 
                                  return (OmlBinaryOperator) new OmlBinaryOperator(new Long(34));
                                else {

                                  succ_4 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(21).intValue()))) 
                                    succ_4 = false;
                                  if (succ_4) 
                                    return (OmlBinaryOperator) new OmlBinaryOperator(new Long(32));
                                  else {

                                    succ_4 = true;
                                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(22).intValue()))) 
                                      succ_4 = false;
                                    if (succ_4) 
                                      return (OmlBinaryOperator) new OmlBinaryOperator(new Long(2));
                                    else {

                                      succ_4 = true;
                                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(23).intValue()))) 
                                        succ_4 = false;
                                      if (succ_4) 
                                        return (OmlBinaryOperator) new OmlBinaryOperator(new Long(8));
                                      else {

                                        succ_4 = true;
                                        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(24).intValue()))) 
                                          succ_4 = false;
                                        if (succ_4) 
                                          return (OmlBinaryOperator) new OmlBinaryOperator(new Long(30));
                                        else {

                                          succ_4 = true;
                                          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(25).intValue()))) 
                                            succ_4 = false;
                                          if (succ_4) 
                                            return (OmlBinaryOperator) new OmlBinaryOperator(new Long(31));
                                          else {

                                            succ_4 = true;
                                            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(26).intValue()))) 
                                              succ_4 = false;
                                            if (succ_4) 
                                              return (OmlBinaryOperator) new OmlBinaryOperator(new Long(14));
                                            else {

                                              succ_4 = true;
                                              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(27).intValue()))) 
                                                succ_4 = false;
                                              if (succ_4) 
                                                return (OmlBinaryOperator) new OmlBinaryOperator(new Long(7));
                                              else {

                                                succ_4 = true;
                                                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(30).intValue()))) 
                                                  succ_4 = false;
                                                if (succ_4) 
                                                  return (OmlBinaryOperator) new OmlBinaryOperator(new Long(21));
                                                else {

                                                  succ_4 = true;
                                                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(31).intValue()))) 
                                                    succ_4 = false;
                                                  if (succ_4) 
                                                    return (OmlBinaryOperator) new OmlBinaryOperator(new Long(24));
                                                  else {

                                                    succ_4 = true;
                                                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(32).intValue()))) 
                                                      succ_4 = false;
                                                    if (succ_4) 
                                                      return (OmlBinaryOperator) new OmlBinaryOperator(new Long(19));
                                                    else {

                                                      succ_4 = true;
                                                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(33).intValue()))) 
                                                        succ_4 = false;
                                                      if (succ_4) 
                                                        return (OmlBinaryOperator) new OmlBinaryOperator(new Long(9));
                                                      else 
                                                        return (OmlBinaryOperator) new OmlBinaryOperator();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertBinaryOperator


// ***** VDMTOOLS START Name=convertForAllExpression KEEP=NO
  public OmlForAllExpression convertForAllExpression (final JmlForAllExpression e) throws CGException {

    IJmlQuantifierDeclaration tmpVal_3 = null;
    tmpVal_3 = (IJmlQuantifierDeclaration) e.getBindList();
    IJmlQuantifierDeclaration bind = null;
    bind = (IJmlQuantifierDeclaration) tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = e.getExpression();
    Vector expr = null;
    expr = tmpVal_4;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) getQuantifierExpression(expr);
    Vector nbind = convertBind((JmlQuantifierDeclaration) bind);
    return (OmlForAllExpression) new OmlForAllExpression(nbind, nexp);
  }
// ***** VDMTOOLS END Name=convertForAllExpression


// ***** VDMTOOLS START Name=getQuantifierExpression KEEP=NO
  public IOmlExpression getQuantifierExpression (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) {

      OmlBooleanLiteral tmpVal_21 = null;
      tmpVal_21 = (OmlBooleanLiteral) new OmlBooleanLiteral(new Boolean(true));
      OmlBooleanLiteral lit = null;
      lit = (OmlBooleanLiteral) tmpVal_21;
      OmlSymbolicLiteralExpression exp = (OmlSymbolicLiteralExpression) new OmlSymbolicLiteralExpression(lit);
      return (IOmlExpression) exp;
    }
    else {

      IJmlExpression fst = (IJmlExpression) (IJmlExpression) s.get(0);
      IOmlExpression lhs = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) fst);
      OmlBinaryOperator tmpVal_11 = null;
      tmpVal_11 = (OmlBinaryOperator) new OmlBinaryOperator(new Long(10));
      OmlBinaryOperator op = null;
      op = (OmlBinaryOperator) tmpVal_11;
      IOmlExpression rhs = (IOmlExpression) (IOmlExpression) getQuantifierExpression(new Vector(s.subList(1, s.size())));
      return (IOmlExpression) new OmlBinaryExpression(lhs, op, rhs);
    }
  }
// ***** VDMTOOLS END Name=getQuantifierExpression


// ***** VDMTOOLS START Name=convertBind KEEP=NO
  public Vector convertBind (final JmlQuantifierDeclaration q) throws CGException {

    IJmlType tmpVal_3 = null;
    tmpVal_3 = (IJmlType) q.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_3;
    IOmlType ntp = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    Vector tmpVal_6 = null;
    tmpVal_6 = q.getVars();
    Vector vdm_var = null;
    vdm_var = tmpVal_6;
    Vector pat = buildPatternIdentifiers(vdm_var);
    OmlTypeBind tmpVal_9 = null;
    tmpVal_9 = (OmlTypeBind) new OmlTypeBind(pat, ntp);
    OmlTypeBind bind = null;
    bind = (OmlTypeBind) tmpVal_9;
    Vector rexpr_12 = null;
    rexpr_12 = new Vector();
    rexpr_12.add(bind);
    return rexpr_12;
  }
// ***** VDMTOOLS END Name=convertBind


// ***** VDMTOOLS START Name=buildPatternIdentifiers KEEP=NO
  public Vector buildPatternIdentifiers (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlPatternIdentifier reselem_12 = null;
        String arg_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          arg_13 = UTIL.ConvertToString(s.get(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = new OmlPatternIdentifier(arg_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildPatternIdentifiers


// ***** VDMTOOLS START Name=convertExistsExpression KEEP=NO
  public OmlExistsExpression convertExistsExpression (final JmlExistsExpression e) throws CGException {

    IJmlQuantifierDeclaration tmpVal_3 = null;
    tmpVal_3 = (IJmlQuantifierDeclaration) e.getBindList();
    IJmlQuantifierDeclaration bind = null;
    bind = (IJmlQuantifierDeclaration) tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = e.getExpression();
    Vector expr = null;
    expr = tmpVal_4;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) getQuantifierExpression(expr);
    Vector nbind = convertBind((JmlQuantifierDeclaration) bind);
    return (OmlExistsExpression) new OmlExistsExpression(nbind, nexp);
  }
// ***** VDMTOOLS END Name=convertExistsExpression


// ***** VDMTOOLS START Name=convertOldName KEEP=NO
  public OmlOldName convertOldName (final JmlOldName o) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = o.getIdentifier();
    String id = null;
    id = tmpVal_3;
    return (OmlOldName) new OmlOldName(id);
  }
// ***** VDMTOOLS END Name=convertOldName


// ***** VDMTOOLS START Name=convertNewExpression KEEP=NO
  public OmlNewExpression convertNewExpression (final JmlNewExpression e) throws CGException {

    IJmlType tmpVal_3 = null;
    tmpVal_3 = (IJmlType) e.getType();
    IJmlType t = null;
    t = (IJmlType) tmpVal_3;
    JmlName t1 = (JmlName) (JmlName) getTypeName((IJmlType) t);
    IOmlName nt = (IOmlName) (IOmlName) convertName((IJmlName) t1);
    Vector tmpVal_8 = null;
    tmpVal_8 = e.getExpressionList();
    Vector l = null;
    l = tmpVal_8;
    Vector nl = convertExpressionList(l);
    return (OmlNewExpression) new OmlNewExpression(nt, new Vector(), nl);
  }
// ***** VDMTOOLS END Name=convertNewExpression


// ***** VDMTOOLS START Name=getTypeName KEEP=NO
  public JmlName getTypeName (final IJmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof JmlClassName))) 
        succ_2 = false;
      if (succ_2) 
        return (JmlName) (JmlName) getClassName((JmlClassName) t);
      else 
        return (JmlName) new JmlName(null, "");
    }
  }
// ***** VDMTOOLS END Name=getTypeName


// ***** VDMTOOLS START Name=getClassName KEEP=NO
  public JmlName getClassName (final JmlClassName c) throws CGException {

    IJmlName rexpr_2 = null;
    rexpr_2 = (IJmlName) c.getId();
    return (JmlName) rexpr_2;
  }
// ***** VDMTOOLS END Name=getClassName


// ***** VDMTOOLS START Name=convertName KEEP=NO
  public IOmlName convertName (final IJmlName n) throws CGException {

    String cl = null;
    cl = n.getClassIdentifier();
    String tmpVal_4 = null;
    tmpVal_4 = n.getIdentifier();
    String id = null;
    id = tmpVal_4;
    return (IOmlName) new OmlName(cl, id);
  }
// ***** VDMTOOLS END Name=convertName


// ***** VDMTOOLS START Name=convertExpressionList KEEP=NO
  public Vector convertExpressionList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_22 = bind_l_4.iterator(); enm_22.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_22.next());
        i = e_7;
        Boolean pred_16 = null;
        JmlExpression var1_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          var1_17 = (JmlExpression) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_16 = new Boolean(!UTIL.equals(var1_17, null));
        if (pred_16.booleanValue()) {

          IOmlExpression reselem_12 = null;
          JmlExpression par_13 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            par_13 = (JmlExpression) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_12 = (IOmlExpression) convertExpression((IJmlExpression) par_13);
          res_l_3.add(reselem_12);
        }
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertExpressionList


// ***** VDMTOOLS START Name=convertSetEnumeration KEEP=NO
  public OmlSetEnumeration convertSetEnumeration (final JmlSetEnumeration e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getList();
    Vector l = null;
    l = tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = convertExpressionList(l);
    Vector q = null;
    q = tmpVal_4;
    return (OmlSetEnumeration) new OmlSetEnumeration(q);
  }
// ***** VDMTOOLS END Name=convertSetEnumeration


// ***** VDMTOOLS START Name=convertSequenceEnumeration KEEP=NO
  public OmlSequenceEnumeration convertSequenceEnumeration (final JmlSequenceEnumeration e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getList();
    Vector l = null;
    l = tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = convertExpressionList(l);
    Vector q = null;
    q = tmpVal_4;
    return (OmlSequenceEnumeration) new OmlSequenceEnumeration(q);
  }
// ***** VDMTOOLS END Name=convertSequenceEnumeration


// ***** VDMTOOLS START Name=convertMapEnumeration KEEP=NO
  public OmlMapEnumeration convertMapEnumeration (final JmlMapEnumeration e) throws CGException {

    Vector ml = null;
    ml = e.getList();
    Vector nm = convertMapletList(ml);
    return (OmlMapEnumeration) new OmlMapEnumeration(nm);
  }
// ***** VDMTOOLS END Name=convertMapEnumeration


// ***** VDMTOOLS START Name=convertMapletList KEEP=NO
  public Vector convertMapletList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlMaplet reselem_12 = null;
        JmlMapLet par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlMapLet) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlMaplet) convertMaplet((JmlMapLet) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertMapletList


// ***** VDMTOOLS START Name=convertMaplet KEEP=NO
  public OmlMaplet convertMaplet (final JmlMapLet m) throws CGException {

    IJmlExpression dval = null;
    dval = (IJmlExpression) m.getDomVal();
    IJmlExpression rval = null;
    rval = (IJmlExpression) m.getRngVal();
    IOmlExpression ndom = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) dval);
    IOmlExpression nrng = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) rval);
    return (OmlMaplet) new OmlMaplet(ndom, nrng);
  }
// ***** VDMTOOLS END Name=convertMaplet


// ***** VDMTOOLS START Name=convertApplyExpression KEEP=NO
  public OmlApplyExpression convertApplyExpression (final JmlApplyExpression e) throws CGException {

    IJmlExpression tmpVal_3 = null;
    tmpVal_3 = (IJmlExpression) e.getExpression();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    Vector expl = null;
    expl = e.getExpressionList();
    IOmlExpression nexpr = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    Vector nexpl = convertExpressionList(expl);
    return (OmlApplyExpression) new OmlApplyExpression(nexpr, nexpl);
  }
// ***** VDMTOOLS END Name=convertApplyExpression


// ***** VDMTOOLS START Name=convertFieldSelect KEEP=NO
  public OmlFieldSelect convertFieldSelect (final JmlFieldSelectExpression f) throws CGException {

    IJmlExpression tmpVal_3 = null;
    tmpVal_3 = (IJmlExpression) f.getExpression();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    IJmlName tmpVal_4 = null;
    tmpVal_4 = (IJmlName) f.getName();
    IJmlName name = null;
    name = (IJmlName) tmpVal_4;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    IOmlName newname = (IOmlName) (IOmlName) convertName((IJmlName) name);
    return (OmlFieldSelect) new OmlFieldSelect(nexp, newname);
  }
// ***** VDMTOOLS END Name=convertFieldSelect


// ***** VDMTOOLS START Name=convertLiteralExpression KEEP=NO
  public OmlSymbolicLiteralExpression convertLiteralExpression (final JmlLiteralExpression e) throws CGException {

    IJmlLiteral tmpVal_3 = null;
    tmpVal_3 = (IJmlLiteral) e.getLit();
    IJmlLiteral lit = null;
    lit = (IJmlLiteral) tmpVal_3;
    IOmlLiteral nlit = (IOmlLiteral) (IOmlLiteral) convertLiteral((IJmlLiteral) lit);
    return (OmlSymbolicLiteralExpression) new OmlSymbolicLiteralExpression(nlit);
  }
// ***** VDMTOOLS END Name=convertLiteralExpression


// ***** VDMTOOLS START Name=convertBlockExpression KEEP=NO
  public OmlLetExpression convertBlockExpression (final JmlBlockExpression e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getBind();
    Vector bind = null;
    bind = tmpVal_3;
    IJmlExpression tmpVal_4 = null;
    tmpVal_4 = (IJmlExpression) e.getReturnExpr();
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_4;
    IOmlExpression nexp = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) expr);
    Vector nbind = convertValueShapes(bind);
    return (OmlLetExpression) new OmlLetExpression(nbind, nexp);
  }
// ***** VDMTOOLS END Name=convertBlockExpression


// ***** VDMTOOLS START Name=convertValueShapes KEEP=NO
  public Vector convertValueShapes (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        OmlValueShape reselem_12 = null;
        JmlValueShape par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (JmlValueShape) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (OmlValueShape) convertValueShape((JmlValueShape) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertValueShapes


// ***** VDMTOOLS START Name=convertThisExpression KEEP=NO
  public OmlSelfExpression convertThisExpression (final JmlThisExpression var_1_1) throws CGException {
    return (OmlSelfExpression) new OmlSelfExpression();
  }
// ***** VDMTOOLS END Name=convertThisExpression


// ***** VDMTOOLS START Name=convertInstanceOf KEEP=NO
  public OmlIsExpression convertInstanceOf (final JmlInstanceOfExpression i) throws CGException {

    IJmlType tmpVal_3 = null;
    tmpVal_3 = (IJmlType) i.getType();
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_3;
    IJmlExpression tmpVal_4 = null;
    tmpVal_4 = (IJmlExpression) i.getExpression();
    IJmlExpression ex = null;
    ex = (IJmlExpression) tmpVal_4;
    IOmlType nt = (IOmlType) (IOmlType) convertType((IJmlType) tp);
    IOmlExpression ne = (IOmlExpression) (IOmlExpression) convertExpression((IJmlExpression) ex);
    return (OmlIsExpression) new OmlIsExpression(nt, ne);
  }
// ***** VDMTOOLS END Name=convertInstanceOf


// ***** VDMTOOLS START Name=convertLiteral KEEP=NO
  public IOmlLiteral convertLiteral (final IJmlLiteral lit) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlNumericalLiteral))) 
        succ_2 = false;
      if (succ_2) 
        return (IOmlLiteral) (OmlNumericLiteral) convertNumericalLiteral((JmlNumericalLiteral) lit);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlFloatLiteral))) 
          succ_2 = false;
        if (succ_2) 
          return (IOmlLiteral) (OmlRealLiteral) convertFloatLiteral((JmlFloatLiteral) lit);
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlEnumLiteral))) 
            succ_2 = false;
          if (succ_2) 
            return (IOmlLiteral) (OmlQuoteLiteral) convertEnumLiteral((JmlEnumLiteral) lit);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlBooleanLiteral))) 
              succ_2 = false;
            if (succ_2) 
              return (IOmlLiteral) (OmlBooleanLiteral) convertBooleanLiteral((JmlBooleanLiteral) lit);
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlCharacterLiteral))) 
                succ_2 = false;
              if (succ_2) 
                return (IOmlLiteral) (OmlCharacterLiteral) convertCharacterLiteral((JmlCharacterLiteral) lit);
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlStringLiteral))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IOmlLiteral) (OmlTextLiteral) convertStringLiteral((JmlStringLiteral) lit);
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(lit instanceof JmlNullLiteral))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IOmlLiteral) new OmlNilLiteral();
                  else 
                    return (IOmlLiteral) new OmlNilLiteral();
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertLiteral


// ***** VDMTOOLS START Name=convertNumericalLiteral KEEP=NO
  public OmlNumericLiteral convertNumericalLiteral (final JmlNumericalLiteral lit) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    Long val = null;
    val = tmpVal_3;
    return (OmlNumericLiteral) new OmlNumericLiteral(val);
  }
// ***** VDMTOOLS END Name=convertNumericalLiteral


// ***** VDMTOOLS START Name=convertFloatLiteral KEEP=NO
  public OmlRealLiteral convertFloatLiteral (final JmlFloatLiteral lit) throws CGException {

    Double tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    Double val = null;
    val = tmpVal_3;
    return (OmlRealLiteral) new OmlRealLiteral(val);
  }
// ***** VDMTOOLS END Name=convertFloatLiteral


// ***** VDMTOOLS START Name=convertEnumLiteral KEEP=NO
  public OmlQuoteLiteral convertEnumLiteral (final JmlEnumLiteral lit) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    String val = null;
    val = tmpVal_3;
    return (OmlQuoteLiteral) new OmlQuoteLiteral(val);
  }
// ***** VDMTOOLS END Name=convertEnumLiteral


// ***** VDMTOOLS START Name=convertBooleanLiteral KEEP=NO
  public OmlBooleanLiteral convertBooleanLiteral (final JmlBooleanLiteral lit) throws CGException {

    Boolean tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    Boolean val = null;
    val = tmpVal_3;
    return (OmlBooleanLiteral) new OmlBooleanLiteral(val);
  }
// ***** VDMTOOLS END Name=convertBooleanLiteral


// ***** VDMTOOLS START Name=convertCharacterLiteral KEEP=NO
  public OmlCharacterLiteral convertCharacterLiteral (final JmlCharacterLiteral lit) throws CGException {

    Character tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    Character val = null;
    val = tmpVal_3;
    return (OmlCharacterLiteral) new OmlCharacterLiteral(val);
  }
// ***** VDMTOOLS END Name=convertCharacterLiteral


// ***** VDMTOOLS START Name=convertStringLiteral KEEP=NO
  public OmlTextLiteral convertStringLiteral (final JmlStringLiteral lit) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = lit.getVal();
    String val = null;
    val = tmpVal_3;
    return (OmlTextLiteral) new OmlTextLiteral(val);
  }
// ***** VDMTOOLS END Name=convertStringLiteral

}
;
