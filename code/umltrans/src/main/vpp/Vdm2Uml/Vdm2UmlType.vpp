\begin{vdm_al}
class Vdm2UmlType
types

public String = seq of char;



operations 
-----------------------------------------------------
-- Convert Types ------------------------------------
-----------------------------------------------------
public static  extractMultiplicity : IOmlType ==> IUmlMultiplicityElement
extractMultiplicity(t) == 
(   dcl isOrdered : bool := false,
      isUnique : bool := true, 
      lower : nat := 1, 
      upper : [nat] := 1;
  
  cases true:
    (isofclass(IOmlSetType,t))-> 
      (upper := nil ; lower := 0 ; isOrdered := false),
    (isofclass(IOmlSeq0Type,t))->
      (lower :=0 ; upper := nil ; isOrdered := true; isUnique := false),
    (isofclass(IOmlSeq1Type,t))->
      (lower := 1 ; upper := nil ; isOrdered := true; isUnique := false),
    (isofclass(IOmlGeneralMapType,t)),
    (isofclass(IOmlInjectiveMapType,t))->
      (isOrdered := true ; upper := nil ; lower := 0; isUnique := false),
    (isofclass(IOmlOptionalType,t))->
      (upper := 1 ; lower := 0)
  end;
   return new UmlMultiplicityElement(isOrdered, isUnique, lower, upper);
);
functions
public static getQualifier : IOmlType -> [IUmlType]
getQualifier(t) ==
  cases true:
    (isofclass(IOmlInjectiveMapType,t)) -> let t1 : IOmlInjectiveMapType  = t in  convertType(t1.getDomType()),
    (isofclass(IOmlGeneralMapType,t))-> let t1 : IOmlGeneralMapType = t in  convertType(t1.getDomType()),
    others ->  nil
  end;

public static  convertType : IOmlType -> [IUmlType]
convertType(t) ==
  cases true:
	(isofclass(IOmlBoolType,t))		->  new UmlBoolType(),
	(isofclass(IOmlNat1Type,t))		->  new UmlIntegerType(),
	(isofclass(IOmlNatType,t))		->  new UmlIntegerType(),
	(isofclass(IOmlIntType,t))		->  new UmlIntegerType(),
	(isofclass(IOmlRealType,t))		->  new UmlUnlimitedNatural(),
	(isofclass(IOmlCharType,t))		->  new UmlCharType(),
	(isofclass(IOmlTokenType,t))	->  new UmlIntegerType(),
	(isofclass(IOmlSetType,t))		-> let t1: IOmlSetType = t in 
	   convertType(t1.getType()),
	(isofclass(IOmlSeq0Type,t))		-> let t1: IOmlSeq0Type = t in 
	   convertType(t1.getType()),
	(isofclass(IOmlSeq1Type,t)) 		-> let t1: IOmlSeq1Type = t in 
	   convertType(t1.getType()),
	(isofclass(IOmlInjectiveMapType,t)) -> let t1 : IOmlInjectiveMapType = t in 
	   convertType(t1.getRngType()),
	(isofclass(IOmlGeneralMapType,t))   -> let t1 : IOmlGeneralMapType = t in 
	   convertType(t1.getRngType()),
	(isofclass(IOmlEmptyType,t))		->  new UmlVoidType(),
	(isofclass(IOmlOptionalType,t))		-> let t1 : IOmlOptionalType = t in 
	   convertType(t1.getType()),
    (isofclass(IOmlTypeName,t))-> let a: IOmlTypeName = t in 
       new UmlClassNameType(a.getName().getIdentifier()),
	others 							->  nil 
  end;

public static convertPropertyType : IOmlType * String -> IUmlType
convertPropertyType(t,owner) ==
  let ty = convertType(t)
  in
    if ty = nil 
    then new UmlClassNameType(owner)
    else ty;



--public convertBracketedType : OmlBracketedType ==> JmlType
--convertBracketedType(t) ==
--  return convertType(t.getType());


--public convertQuoteType : OmlQuoteType ==> JmlEnumerationType
--convertQuoteType(t) ==
--  let q = t.getQuoteLiteral(),
--      id = q.getVal(),
--      l = new JmlEnumLiteral(id)
--  in return new JmlEnumerationType(l);


--public convertProductType : OmlProductType ==> JmlTupleType
--convertProductType(t) ==
--  let tp = buildSeqTypes(t),
--      sq = [ convertType(tp(i)) | i in set inds tp ]
--  in return new JmlTupleType(sq);


--public convertCompositeType : OmlCompositeType ==> JmlClassType
--convertCompositeType(t) ==
--  let id = t.getIdentifier()
--  in return new JmlClassType(id,[]);


--public static  convertSetType : IOmlSetType ==> UmlSetValueType
--convertSetType(t) == 
--  let tp = t.getType(),
--      newtp = convertType(tp)
--  in return new UmlSetValueType(newtp);


--public static  convertSeq0Type : IOmlSeq0Type ==> UmlSeqValueType
--convertSeq0Type(t) ==
--  let tp = t.getType(),
--      newtp = convertType(tp)
--  in return new UmlSeqValueType(newtp);--,0
  
  
--public static  convertSeq1Type : IOmlSeq1Type ==> UmlSeqValueType
--convertSeq1Type(t) ==
--  let tp = t.getType(),
--      newtp = convertType(tp)
--  in return new UmlSeqValueType(newtp);--,1


--public static  convertMapType : OmlGeneralMapType ==> IUmlType
--convertMapType(t) ==
--  let mapdom = t.getDomType(),
--	  maprng = t.getRngType(),
--      newdom = convertType(mapdom),
--     newrng = convertType(maprng)
--  in return convertType(;


--public convertTypeName : OmlTypeName ==> JmlClassName
--convertTypeName(t) ==
--  let id = t.getName(),
--      newid = convertName(id)
--  in return new JmlClassName(newid);


--public static  getDomType : OmlOperationType ==> UmlType
--getDomType(op) == 
--  return convertType(op.getDomType());


--public static getRngType : OmlOperationType ==> UmlType
--getRngType(op) == 
--  return convertType(op.getRngType());




end Vdm2UmlType


\end{vdm_al}


\begin{rtinfo}
[TotalxCoverage]{vdm.tc}[Vdm2UmlType]

\end{rtinfo}