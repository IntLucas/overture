//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.quotes.*;
// ***** VDMTOOLS END Name=imports



public class UmlLexem extends IUmlLexem {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivLine KEEP=NO
  private Integer ivLine = null;
// ***** VDMTOOLS END Name=ivLine

// ***** VDMTOOLS START Name=ivColumn KEEP=NO
  private Integer ivColumn = null;
// ***** VDMTOOLS END Name=ivColumn

// ***** VDMTOOLS START Name=ivLexval KEEP=NO
  private Integer ivLexval = null;
// ***** VDMTOOLS END Name=ivLexval

// ***** VDMTOOLS START Name=ivText KEEP=NO
  private String ivText = null;
// ***** VDMTOOLS END Name=ivText

// ***** VDMTOOLS START Name=ivType KEEP=NO
  private Integer ivType = null;
// ***** VDMTOOLS END Name=ivType


// ***** VDMTOOLS START Name=vdm_init_UmlLexem KEEP=NO
  private void vdm_init_UmlLexem () throws CGException {
    try {

      ivLine = new Integer(0);
      ivColumn = new Integer(0);
      ivLexval = new Integer(0);
      ivText = UTIL.ConvertToString(new String());
      ivType = ILEXEMUNKNOWN;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_UmlLexem


// ***** VDMTOOLS START Name=UmlLexem KEEP=NO
  public UmlLexem () throws CGException {
    vdm_init_UmlLexem();
  }
// ***** VDMTOOLS END Name=UmlLexem


// ***** VDMTOOLS START Name=accept#1|IUmlVisitor KEEP=NO
  public void accept (final IUmlVisitor pVisitor) throws CGException {
    pVisitor.visitLexem((IUmlLexem) this);
  }
// ***** VDMTOOLS END Name=accept#1|IUmlVisitor


// ***** VDMTOOLS START Name=getLine KEEP=NO
  public Integer getLine () throws CGException {
    return ivLine;
  }
// ***** VDMTOOLS END Name=getLine


// ***** VDMTOOLS START Name=setLine#1|Integer KEEP=NO
  public void setLine (final Integer pline) throws CGException {
    ivLine = UTIL.NumberToInt(UTIL.clone(pline));
  }
// ***** VDMTOOLS END Name=setLine#1|Integer


// ***** VDMTOOLS START Name=getColumn KEEP=NO
  public Integer getColumn () throws CGException {
    return ivColumn;
  }
// ***** VDMTOOLS END Name=getColumn


// ***** VDMTOOLS START Name=setColumn#1|Integer KEEP=NO
  public void setColumn (final Integer pcolumn) throws CGException {
    ivColumn = UTIL.NumberToInt(UTIL.clone(pcolumn));
  }
// ***** VDMTOOLS END Name=setColumn#1|Integer


// ***** VDMTOOLS START Name=getLexval KEEP=NO
  public Integer getLexval () throws CGException {
    return ivLexval;
  }
// ***** VDMTOOLS END Name=getLexval


// ***** VDMTOOLS START Name=setLexval#1|Integer KEEP=NO
  public void setLexval (final Integer plexval) throws CGException {
    ivLexval = UTIL.NumberToInt(UTIL.clone(plexval));
  }
// ***** VDMTOOLS END Name=setLexval#1|Integer


// ***** VDMTOOLS START Name=getText KEEP=NO
  public String getText () throws CGException {
    return ivText;
  }
// ***** VDMTOOLS END Name=getText


// ***** VDMTOOLS START Name=setText#1|String KEEP=NO
  public void setText (final String ptext) throws CGException {
    ivText = UTIL.ConvertToString(UTIL.clone(ptext));
  }
// ***** VDMTOOLS END Name=setText#1|String


// ***** VDMTOOLS START Name=getType KEEP=NO
  public Integer getType () throws CGException {
    return ivType;
  }
// ***** VDMTOOLS END Name=getType


// ***** VDMTOOLS START Name=isKeyword KEEP=NO
  public Boolean isKeyword () throws CGException {
    return new Boolean(ivType.intValue() == ILEXEMKEYWORD.intValue());
  }
// ***** VDMTOOLS END Name=isKeyword


// ***** VDMTOOLS START Name=isIdentifier KEEP=NO
  public Boolean isIdentifier () throws CGException {
    return new Boolean(ivType.intValue() == ILEXEMIDENTIFIER.intValue());
  }
// ***** VDMTOOLS END Name=isIdentifier


// ***** VDMTOOLS START Name=isComment KEEP=NO
  public Boolean isComment () throws CGException {

    Boolean rexpr_1 = null;
    {
      if (!(rexpr_1 = new Boolean(ivType.intValue() == ILEXEMLINECOMMENT.intValue())).booleanValue()) 
        rexpr_1 = new Boolean(ivType.intValue() == ILEXEMBLOCKCOMMENT.intValue());
    }
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=isComment


// ***** VDMTOOLS START Name=isLineComment KEEP=NO
  public Boolean isLineComment () throws CGException {
    return new Boolean(ivType.intValue() == ILEXEMLINECOMMENT.intValue());
  }
// ***** VDMTOOLS END Name=isLineComment


// ***** VDMTOOLS START Name=isBlockComment KEEP=NO
  public Boolean isBlockComment () throws CGException {
    return new Boolean(ivType.intValue() == ILEXEMBLOCKCOMMENT.intValue());
  }
// ***** VDMTOOLS END Name=isBlockComment


// ***** VDMTOOLS START Name=UmlLexem#5|Integer|Integer|Integer|String|Integer KEEP=NO
  public UmlLexem (final Integer pline, final Integer pcolumn, final Integer plexval, final String ptext, final Integer ptype) throws CGException {

    vdm_init_UmlLexem();
    {

      ivLine = UTIL.NumberToInt(UTIL.clone(pline));
      ivColumn = UTIL.NumberToInt(UTIL.clone(pcolumn));
      ivLexval = UTIL.NumberToInt(UTIL.clone(plexval));
      ivText = UTIL.ConvertToString(UTIL.clone(ptext));
      ivType = UTIL.NumberToInt(UTIL.clone(ptype));
    }
  }
// ***** VDMTOOLS END Name=UmlLexem#5|Integer|Integer|Integer|String|Integer

}
;
