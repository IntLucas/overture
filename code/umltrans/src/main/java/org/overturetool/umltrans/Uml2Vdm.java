//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-01-24 by the VDM++ to JAVA Code Generator
// (v8.2b - Fri 23-Jan-2009 13:05:50)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.quotes.*;
import org.overturetool.ast.imp.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class Uml2Vdm {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=classInstanceVars KEEP=NO
  private HashMap classInstanceVars = new HashMap();
// ***** VDMTOOLS END Name=classInstanceVars


// ***** VDMTOOLS START Name=vdm_init_Uml2Vdm KEEP=NO
  private void vdm_init_Uml2Vdm () throws CGException {
    try {
      classInstanceVars = new HashMap();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Uml2Vdm


// ***** VDMTOOLS START Name=Uml2Vdm KEEP=NO
  public Uml2Vdm () throws CGException {
    vdm_init_Uml2Vdm();
  }
// ***** VDMTOOLS END Name=Uml2Vdm


// ***** VDMTOOLS START Name=init#1|IUmlModel KEEP=NO
  public IOmlDocument init (final IUmlModel model) throws CGException {

    HashSet tmpVal_3 = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      HashSet e_set_9 = new HashSet();
      e_set_9 = model.getDefinitions();
      IUmlModelElement a = null;
      {
        for (Iterator enm_11 = e_set_9.iterator(); enm_11.hasNext(); ) {

          IUmlModelElement elem_10 = (IUmlModelElement) enm_11.next();
          a = (IUmlModelElement) elem_10;
          if (new Boolean(a instanceof IUmlAssociation).booleanValue()) {
            res_s_4.add(a);
          }
        }
      }
    }
    tmpVal_3 = res_s_4;
    HashSet associations = new HashSet();
    associations = tmpVal_3;
    HashSet tmpVal_12 = new HashSet();
    HashSet res_s_13 = new HashSet();
    {

      HashSet e_set_18 = new HashSet();
      e_set_18 = model.getDefinitions();
      IUmlModelElement a = null;
      {
        for (Iterator enm_20 = e_set_18.iterator(); enm_20.hasNext(); ) {

          IUmlModelElement elem_19 = (IUmlModelElement) enm_20.next();
          a = (IUmlModelElement) elem_19;
          if (new Boolean(a instanceof IUmlConstraint).booleanValue()) {
            res_s_13.add(a);
          }
        }
      }
    }
    tmpVal_12 = res_s_13;
    HashSet constraints = new HashSet();
    constraints = tmpVal_12;
    {

      extractInstanceVarsFromAssociations(associations, constraints);
      OmlDocument rexpr_24 = null;
      String arg_25 = null;
      arg_25 = model.getName();
      rexpr_24 = new OmlDocument(arg_25, new OmlSpecifications(build_uclasses((IUmlModel) model)), new Vector());
      return (IOmlDocument) rexpr_24;
    }
  }
// ***** VDMTOOLS END Name=init#1|IUmlModel


// ***** VDMTOOLS START Name=build_uclasses#1|IUmlModel KEEP=NO
  public Vector build_uclasses (final IUmlModel model) throws CGException {

    HashMap traceDefMap = build_utraces((IUmlModel) model);
    HashSet classes = new HashSet();
    HashSet res_s_6 = new HashSet();
    {

      HashSet e_set_11 = new HashSet();
      e_set_11 = model.getDefinitions();
      IUmlModelElement c = null;
      {
        for (Iterator enm_13 = e_set_11.iterator(); enm_13.hasNext(); ) {

          IUmlModelElement elem_12 = (IUmlModelElement) enm_13.next();
          c = (IUmlModelElement) elem_12;
          if (new Boolean(c instanceof IUmlClass).booleanValue()) {
            res_s_6.add(c);
          }
        }
      }
    }
    classes = res_s_6;
    Vector rexpr_14 = null;
    HashSet par_15 = new HashSet();
    HashSet res_s_16 = new HashSet();
    {

      IUmlClass c = null;
      {
        for (Iterator enm_32 = classes.iterator(); enm_32.hasNext(); ) {

          IUmlClass elem_31 = (IUmlClass) enm_32.next();
          c = (IUmlClass) elem_31;
          IOmlClass res_s_17 = null;
          {

            String cName = null;
            cName = c.getName();
            IOmlTraceDefinitions tmpVal_20 = null;
            Boolean cond_22 = null;
            cond_22 = new Boolean(traceDefMap.containsKey(cName));
            if (cond_22.booleanValue()) 
              tmpVal_20 = (IOmlTraceDefinitions) (IOmlTraceDefinitions) traceDefMap.get(cName);
            else 
              tmpVal_20 = null;
            IOmlTraceDefinitions traceDef = null;
            traceDef = (IOmlTraceDefinitions) tmpVal_20;
            res_s_17 = (IOmlClass) (IOmlClass) build_uclass((IUmlClass) c, (IOmlTraceDefinitions) traceDef);
          }
          res_s_16.add(res_s_17);
        }
      }
    }
    par_15 = res_s_16;
    rexpr_14 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_15));
    return rexpr_14;
  }
// ***** VDMTOOLS END Name=build_uclasses#1|IUmlModel


// ***** VDMTOOLS START Name=build_uclass#2|IUmlClass|IOmlTraceDefinitions KEEP=NO
  public IOmlClass build_uclass (final IUmlClass c, final IOmlTraceDefinitions traceDef) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = c.getName();
    String name = null;
    name = tmpVal_4;
    Vector tmpVal_5 = null;
    tmpVal_5 = c.getSuperClass();
    Vector supers = null;
    supers = tmpVal_5;
    OmlInheritanceClause inheritanceClause = null;
    if (new Boolean((new Long(supers.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      Vector arg_12 = null;
      {

        Vector res_l_13 = new Vector();
        HashSet resBind_s_15 = new HashSet();
        HashSet riseq_19 = new HashSet();
        int max_20 = supers.size();
        for (int i_21 = 1; i_21 <= max_20; i_21++) 
          riseq_19.add(new Long(i_21));
        resBind_s_15 = riseq_19;
        Vector bind_l_14 = null;
        bind_l_14 = UTIL.Sort(resBind_s_15);
        Long i = null;
        for (Iterator enm_27 = bind_l_14.iterator(); enm_27.hasNext(); ) {

          Long e_17 = UTIL.NumberToLong(enm_27.next());
          i = e_17;
          String reselem_22 = null;
          IUmlClassNameType obj_23 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= supers.size())) 
            obj_23 = (IUmlClassNameType) supers.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_22 = obj_23.getName();
          res_l_13.add(reselem_22);
        }
        arg_12 = res_l_13;
      }
      inheritanceClause = new OmlInheritanceClause(arg_12);
    }
    else 
      inheritanceClause = null;
    HashSet body = new HashSet();
    HashSet unArg_29 = new HashSet();
    HashSet res_s_30 = new HashSet();
    {

      HashSet e_set_34 = new HashSet();
      e_set_34 = c.getClassBody();
      IUmlDefinitionBlock d = null;
      {
        for (Iterator enm_36 = e_set_34.iterator(); enm_36.hasNext(); ) {

          IUmlDefinitionBlock elem_35 = (IUmlDefinitionBlock) enm_36.next();
          d = (IUmlDefinitionBlock) elem_35;
          res_s_30.add(build_udefs((IUmlDefinitionBlock) d));
        }
      }
    }
    unArg_29 = res_s_30;
    HashSet rduset_37 = new HashSet();
    for (Iterator enm_39 = unArg_29.iterator(); enm_39.hasNext(); ) {

      HashSet e_38 = (HashSet) enm_39.next();
      rduset_37.addAll(e_38);
    }
    body = rduset_37;
    HashSet bodyWithTrace = new HashSet();
    if (new Boolean(!UTIL.equals(traceDef, null)).booleanValue()) {

      HashSet var2_46 = new HashSet();
      var2_46 = new HashSet();
      var2_46.add(traceDef);
      bodyWithTrace = (HashSet) body.clone();
      bodyWithTrace.addAll(var2_46);
    }
    else 
      bodyWithTrace = body;
    Boolean systemSpec = new Boolean(false);
    Vector instVars = getAssociationInstanceVars(name);
    HashSet bodyLst = new HashSet();
    if (new Boolean((new Long(instVars.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      HashSet var2_58 = new HashSet();
      var2_58 = new HashSet();
      var2_58.add(new OmlInstanceVariableDefinitions(instVars));
      bodyLst = (HashSet) bodyWithTrace.clone();
      bodyLst.addAll(var2_58);
    }
    else 
      bodyLst = bodyWithTrace;
    OmlClass rexpr_61 = null;
    Vector arg_65 = null;
    arg_65 = (Vector) UTIL.ConvertToList(Util.SetToSeq(bodyLst));
    rexpr_61 = new OmlClass(name, new Vector(), inheritanceClause, arg_65, systemSpec);
    return (IOmlClass) rexpr_61;
  }
// ***** VDMTOOLS END Name=build_uclass#2|IUmlClass|IOmlTraceDefinitions


// ***** VDMTOOLS START Name=build_udefs#1|IUmlDefinitionBlock KEEP=NO
  public HashSet build_udefs (final IUmlDefinitionBlock db) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(db instanceof IUmlOwnedProperties))) 
        succ_2 = false;
      if (succ_2) {

        IUmlOwnedProperties tmp = (IUmlOwnedProperties) db;
        HashSet rexpr_16 = new HashSet();
        HashSet var1_17 = new HashSet();
        var1_17 = new HashSet();
        var1_17.add((IOmlDefinitionBlock) build_udefValues((IUmlOwnedProperties) tmp));
        HashSet var2_20 = new HashSet();
        var2_20 = new HashSet();
        var2_20.add((IOmlDefinitionBlock) build_udefInstanceVariables((IUmlOwnedProperties) tmp));
        rexpr_16 = (HashSet) var1_17.clone();
        rexpr_16.addAll(var2_20);
        return rexpr_16;
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(db instanceof IUmlOwnedOperations))) 
          succ_2 = false;
        if (succ_2) {

          IUmlOwnedOperations tmp = (IUmlOwnedOperations) db;
          return build_udefOperations((IUmlOwnedOperations) tmp);
        }
        else 
          return new HashSet();
      }
    }
  }
// ***** VDMTOOLS END Name=build_udefs#1|IUmlDefinitionBlock


// ***** VDMTOOLS START Name=build_udefValues#1|IUmlOwnedProperties KEEP=NO
  public IOmlDefinitionBlock build_udefValues (final IUmlOwnedProperties block) throws CGException {

    HashSet tmpVal_3 = new HashSet();
    tmpVal_3 = block.getPropetityList();
    HashSet props = new HashSet();
    props = tmpVal_3;
    HashSet valueProps = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlProperty p = null;
      {
        for (Iterator enm_15 = props.iterator(); enm_15.hasNext(); ) {

          IUmlProperty elem_14 = (IUmlProperty) enm_15.next();
          p = (IUmlProperty) elem_14;
          Boolean pred_7 = null;
          Boolean var1_8 = null;
          var1_8 = p.hasIsReadOnly();
          {
            if ((pred_7 = var1_8).booleanValue()) {

              Boolean var2_9 = null;
              Boolean var1_10 = null;
              var1_10 = p.getIsReadOnly();
              var2_9 = new Boolean(UTIL.equals(var1_10, new Boolean(true)));
              pred_7 = var2_9;
            }
          }
          if (pred_7.booleanValue()) {
            res_s_5.add(p);
          }
        }
      }
    }
    valueProps = res_s_5;
    HashSet val = new HashSet();
    HashSet res_s_17 = new HashSet();
    {

      IUmlProperty v = null;
      {
        for (Iterator enm_23 = valueProps.iterator(); enm_23.hasNext(); ) {

          IUmlProperty elem_22 = (IUmlProperty) enm_23.next();
          v = (IUmlProperty) elem_22;
          res_s_17.add((IOmlValueDefinition) build_uvalue((IUmlProperty) v));
        }
      }
    }
    val = res_s_17;
    OmlValueDefinitions rexpr_24 = null;
    Vector arg_25 = null;
    arg_25 = (Vector) UTIL.ConvertToList(Util.SetToSeq(val));
    rexpr_24 = new OmlValueDefinitions(arg_25);
    return (IOmlDefinitionBlock) rexpr_24;
  }
// ***** VDMTOOLS END Name=build_udefValues#1|IUmlOwnedProperties


// ***** VDMTOOLS START Name=build_uvalue#1|IUmlProperty KEEP=NO
  public IOmlValueDefinition build_uvalue (final IUmlProperty prop) throws CGException {

    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_6 = null;
    par_6 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_6);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    OmlPatternIdentifier pattern = null;
    String arg_12 = null;
    arg_12 = prop.getName();
    pattern = new OmlPatternIdentifier(arg_12);
    IUmlMultiplicityElement multiplicity = null;
    Boolean cond_15 = null;
    cond_15 = prop.hasMultiplicity();
    if (cond_15.booleanValue()) 
      multiplicity = (IUmlMultiplicityElement) prop.getMultiplicity();
    else 
      multiplicity = null;
    IOmlType tmpVal_16 = null;
    IUmlType par_17 = null;
    par_17 = (IUmlType) prop.getType();
    tmpVal_16 = (IOmlType) ConvertType((IUmlType) par_17, (IUmlMultiplicityElement) multiplicity);
    IOmlType type = null;
    type = (IOmlType) tmpVal_16;
    IOmlExpression tmpVal_19 = null;
    IUmlValueSpecification par_20 = null;
    par_20 = (IUmlValueSpecification) prop.getDefault();
    tmpVal_19 = (IOmlExpression) getDefaultExpression((IUmlValueSpecification) par_20, (IOmlType) type);
    IOmlExpression expression = null;
    expression = (IOmlExpression) tmpVal_19;
    OmlValueShape valueShape = (OmlValueShape) new OmlValueShape(pattern, type, expression);
    return (IOmlValueDefinition) new OmlValueDefinition(access, valueShape);
  }
// ***** VDMTOOLS END Name=build_uvalue#1|IUmlProperty


// ***** VDMTOOLS START Name=build_udefInstanceVariables#1|IUmlOwnedProperties KEEP=NO
  public IOmlDefinitionBlock build_udefInstanceVariables (final IUmlOwnedProperties block) throws CGException {

    HashSet tmpVal_3 = new HashSet();
    tmpVal_3 = block.getPropetityList();
    HashSet props = new HashSet();
    props = tmpVal_3;
    HashSet valueProps = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlProperty p = null;
      {
        for (Iterator enm_15 = props.iterator(); enm_15.hasNext(); ) {

          IUmlProperty elem_14 = (IUmlProperty) enm_15.next();
          p = (IUmlProperty) elem_14;
          Boolean pred_7 = null;
          Boolean var1_8 = null;
          var1_8 = p.hasIsReadOnly();
          {
            if ((pred_7 = var1_8).booleanValue()) {

              Boolean var2_9 = null;
              Boolean var1_10 = null;
              var1_10 = p.getIsReadOnly();
              var2_9 = new Boolean(UTIL.equals(var1_10, new Boolean(false)));
              pred_7 = var2_9;
            }
          }
          if (pred_7.booleanValue()) {
            res_s_5.add(p);
          }
        }
      }
    }
    valueProps = res_s_5;
    HashSet val = new HashSet();
    HashSet res_s_17 = new HashSet();
    {

      IUmlProperty v = null;
      {
        for (Iterator enm_23 = valueProps.iterator(); enm_23.hasNext(); ) {

          IUmlProperty elem_22 = (IUmlProperty) enm_23.next();
          v = (IUmlProperty) elem_22;
          res_s_17.add((IOmlInstanceVariable) build_uinstanceVariable((IUmlProperty) v));
        }
      }
    }
    val = res_s_17;
    Vector seqVal = null;
    seqVal = (Vector) UTIL.ConvertToList(Util.SetToSeq(val));
    return (IOmlDefinitionBlock) new OmlInstanceVariableDefinitions(seqVal);
  }
// ***** VDMTOOLS END Name=build_udefInstanceVariables#1|IUmlOwnedProperties


// ***** VDMTOOLS START Name=build_uinstanceVariable#1|IUmlProperty KEEP=NO
  public IOmlInstanceVariable build_uinstanceVariable (final IUmlProperty prop) throws CGException {

    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_6 = null;
    par_6 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_6);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    IUmlMultiplicityElement multiplicity = null;
    Boolean cond_13 = null;
    cond_13 = prop.hasMultiplicity();
    if (cond_13.booleanValue()) 
      multiplicity = (IUmlMultiplicityElement) prop.getMultiplicity();
    else 
      multiplicity = null;
    IOmlType tmpVal_14 = null;
    IUmlType par_15 = null;
    par_15 = (IUmlType) prop.getType();
    tmpVal_14 = (IOmlType) ConvertType((IUmlType) par_15, (IUmlMultiplicityElement) multiplicity);
    IOmlType type = null;
    type = (IOmlType) tmpVal_14;
    IOmlExpression tmpVal_17 = null;
    Boolean cond_19 = null;
    cond_19 = prop.hasDefault();
    if (cond_19.booleanValue()) {

      IUmlValueSpecification par_20 = null;
      par_20 = (IUmlValueSpecification) prop.getDefault();
      tmpVal_17 = (IOmlExpression) getDefaultExpression((IUmlValueSpecification) par_20, (IOmlType) type);
    }
    else 
      tmpVal_17 = null;
    IOmlExpression expression = null;
    expression = (IOmlExpression) tmpVal_17;
    OmlAssignmentDefinition assignmentDef = null;
    String arg_23 = null;
    arg_23 = prop.getName();
    assignmentDef = new OmlAssignmentDefinition(arg_23, type, expression);
    return (IOmlInstanceVariable) new OmlInstanceVariable(access, assignmentDef);
  }
// ***** VDMTOOLS END Name=build_uinstanceVariable#1|IUmlProperty


// ***** VDMTOOLS START Name=build_udefOperations#1|IUmlOwnedOperations KEEP=NO
  public HashSet build_udefOperations (final IUmlOwnedOperations block) throws CGException {

    HashSet tmpVal_3 = new HashSet();
    tmpVal_3 = block.getOperationList();
    HashSet props = new HashSet();
    props = tmpVal_3;
    HashSet valOps = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlOperation p = null;
      {
        for (Iterator enm_10 = props.iterator(); enm_10.hasNext(); ) {

          IUmlOperation elem_9 = (IUmlOperation) enm_10.next();
          p = (IUmlOperation) elem_9;
          res_s_5.add(p);
        }
      }
    }
    valOps = res_s_5;
    HashSet valOperations = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlOperation v = null;
      {
        for (Iterator enm_20 = valOps.iterator(); enm_20.hasNext(); ) {

          IUmlOperation elem_19 = (IUmlOperation) enm_20.next();
          v = (IUmlOperation) elem_19;
          Boolean pred_15 = null;
          Boolean unArg_16 = null;
          unArg_16 = v.getIsQuery();
          pred_15 = new Boolean(!unArg_16.booleanValue());
          if (pred_15.booleanValue()) {
            res_s_12.add((IOmlOperationDefinition) build_uOperation((IUmlOperation) v));
          }
        }
      }
    }
    valOperations = res_s_12;
    HashSet valFunctions = new HashSet();
    HashSet res_s_22 = new HashSet();
    {

      IUmlOperation v = null;
      {
        for (Iterator enm_29 = valOps.iterator(); enm_29.hasNext(); ) {

          IUmlOperation elem_28 = (IUmlOperation) enm_29.next();
          v = (IUmlOperation) elem_28;
          Boolean pred_25 = null;
          pred_25 = v.getIsQuery();
          if (pred_25.booleanValue()) {
            res_s_22.add((IOmlFunctionDefinition) build_uFunction((IUmlOperation) v));
          }
        }
      }
    }
    valFunctions = res_s_22;
    Vector seqValOperations = null;
    seqValOperations = (Vector) UTIL.ConvertToList(Util.SetToSeq(valOperations));
    Vector seqValFunctions = null;
    seqValFunctions = (Vector) UTIL.ConvertToList(Util.SetToSeq(valFunctions));
    HashSet retOps = new HashSet();
    if (new Boolean((new Long(seqValOperations.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      retOps = new HashSet();
      retOps.add(new OmlOperationDefinitions(seqValOperations));
    }
    else 
      retOps = new HashSet();
    HashSet retFunc = new HashSet();
    if (new Boolean((new Long(seqValFunctions.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      retFunc = new HashSet();
      retFunc.add(new OmlFunctionDefinitions(seqValFunctions));
    }
    else 
      retFunc = new HashSet();
    HashSet rexpr_50 = new HashSet();
    rexpr_50 = (HashSet) retOps.clone();
    rexpr_50.addAll(retFunc);
    return rexpr_50;
  }
// ***** VDMTOOLS END Name=build_udefOperations#1|IUmlOwnedOperations


// ***** VDMTOOLS START Name=build_uOperation#1|IUmlOperation KEEP=NO
  public IOmlOperationDefinition build_uOperation (final IUmlOperation prop) throws CGException {

    boolean succ_2;
    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_6 = null;
    par_6 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_6);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    Tuple tmpVal_11 = new Tuple(2);
    Vector par_12 = null;
    Boolean cond_14 = null;
    cond_14 = prop.hasOwnedParameters();
    if (cond_14.booleanValue()) {

      IUmlParameters obj_15 = null;
      obj_15 = (IUmlParameters) prop.getOwnedParameters();
      par_12 = obj_15.getParameterList();
    }
    else 
      par_12 = new Vector();
    Boolean par_16 = null;
    par_16 = prop.getIsQuery();
    tmpVal_11 = buildParameters(par_12, par_16);
    IOmlType type = null;
    Vector parms = null;
    succ_2 = true;
    {

      Vector e_l_17 = new Vector();
      for (int i_18 = 1; i_18 <= tmpVal_11.Length(); i_18++) 
        e_l_17.add(tmpVal_11.GetField(i_18));
      if (succ_2 = (2 == e_l_17.size())) {

        parms = (Vector) e_l_17.get(0);
        type = (IOmlType) e_l_17.get(2 - 1);
      }
    }
    if (!succ_2) 
      UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
    String tmpVal_19 = null;
    tmpVal_19 = prop.getName();
    String name = null;
    name = tmpVal_19;
    OmlOperationBody body = (OmlOperationBody) new OmlOperationBody(new OmlSkipStatement(), new Boolean(true), new Boolean(false));
    OmlOperationTrailer trailer = (OmlOperationTrailer) new OmlOperationTrailer(null, null, null, null);
    OmlExplicitOperation explicitOp = (OmlExplicitOperation) new OmlExplicitOperation(name, type, parms, body, trailer);
    return (IOmlOperationDefinition) new OmlOperationDefinition(access, explicitOp);
  }
// ***** VDMTOOLS END Name=build_uOperation#1|IUmlOperation


// ***** VDMTOOLS START Name=buildParameters#2|Vector|Boolean KEEP=NO
  private Tuple buildParameters (final Vector parms, final Boolean buildFunction) throws CGException {
    if (new Boolean(UTIL.equals(parms, new Vector())).booleanValue()) {
      if (buildFunction.booleanValue()) {

        Tuple rexpr_44 = new Tuple(2);
        rexpr_44 = new Tuple(2);
        rexpr_44.SetField(1, new Vector());
        rexpr_44.SetField(2, new OmlPartialFunctionType(new OmlEmptyType(), new OmlEmptyType()));
        return rexpr_44;
      }
      else {

        Tuple rexpr_39 = new Tuple(2);
        rexpr_39 = new Tuple(2);
        rexpr_39.SetField(1, new Vector());
        rexpr_39.SetField(2, new OmlOperationType(new OmlEmptyType(), new OmlEmptyType()));
        return rexpr_39;
      }
    }
    else {

      IOmlType tmpVal_7 = null;
      tmpVal_7 = (IOmlType) (IOmlType) buildParameterType(parms, buildFunction);
      IOmlType type = null;
      type = (IOmlType) tmpVal_7;
      Vector patterns = null;
      {

        Vector res_l_11 = new Vector();
        HashSet resBind_s_13 = new HashSet();
        HashSet riseq_17 = new HashSet();
        int max_18 = parms.size();
        for (int i_19 = 1; i_19 <= max_18; i_19++) 
          riseq_17.add(new Long(i_19));
        resBind_s_13 = riseq_17;
        Vector bind_l_12 = null;
        bind_l_12 = UTIL.Sort(resBind_s_13);
        Long i = null;
        for (Iterator enm_33 = bind_l_12.iterator(); enm_33.hasNext(); ) {

          Long e_15 = UTIL.NumberToLong(enm_33.next());
          i = e_15;
          Boolean pred_25 = null;
          Long var1_26 = null;
          IUmlParameterDirectionKind obj_27 = null;
          IUmlParameter obj_28 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
            obj_28 = (IUmlParameter) parms.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_27 = (IUmlParameterDirectionKind) obj_28.getDirection();
          var1_26 = obj_27.getValue();
          pred_25 = new Boolean(!(var1_26.intValue() == UmlParameterDirectionKindQuotes.IQRETURN.intValue()));
          if (pred_25.booleanValue()) {

            OmlPatternIdentifier reselem_20 = null;
            String arg_21 = null;
            IUmlParameter obj_22 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
              obj_22 = (IUmlParameter) parms.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            arg_21 = obj_22.getName();
            reselem_20 = new OmlPatternIdentifier(arg_21);
            res_l_11.add(reselem_20);
          }
        }
        patterns = res_l_11;
      }
      Tuple rexpr_34 = new Tuple(2);
      rexpr_34 = new Tuple(2);
      rexpr_34.SetField(1, flip(patterns));
      rexpr_34.SetField(2, type);
      return rexpr_34;
    }
  }
// ***** VDMTOOLS END Name=buildParameters#2|Vector|Boolean


// ***** VDMTOOLS START Name=flip#1|Vector KEEP=NO
  public Vector flip (final Vector list) throws CGException {
    if (new Boolean(new Long(list.size()).intValue() == new Long(1).intValue()).booleanValue()) {

      Vector rexpr_18 = null;
      rexpr_18 = new Vector();
      rexpr_18.add((IOmlPatternIdentifier) list.get(0));
      return rexpr_18;
    }
    else 
      if (new Boolean(new Long(list.size()).intValue() == new Long(0).intValue()).booleanValue()) 
        return new Vector();
      else {

        Vector rexpr_10 = null;
        Vector var2_14 = null;
        var2_14 = new Vector();
        var2_14.add((IOmlPatternIdentifier) list.get(0));
        rexpr_10 = (Vector) flip(new Vector(list.subList(1, list.size()))).clone();
        rexpr_10.addAll(var2_14);
        return rexpr_10;
      }
  }
// ***** VDMTOOLS END Name=flip#1|Vector


// ***** VDMTOOLS START Name=buildParameterType#2|Vector|Boolean KEEP=NO
  private IOmlType buildParameterType (final Vector tps, final Boolean buildFunction) throws CGException {

    UmlMultiplicityElement mult = (UmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1));
    IUmlParameter retType = null;
    {

      HashSet tmpSet_10 = new HashSet();
      HashSet res_s_14 = new HashSet();
      {

        HashSet e1_set_22 = new HashSet(tps);
        IUmlParameter t = null;
        {
          for (Iterator enm_24 = e1_set_22.iterator(); enm_24.hasNext(); ) {

            IUmlParameter elem_23 = (IUmlParameter) enm_24.next();
            t = (IUmlParameter) elem_23;
            Boolean pred_16 = null;
            Long var1_17 = null;
            IUmlParameterDirectionKind obj_18 = null;
            obj_18 = (IUmlParameterDirectionKind) t.getDirection();
            var1_17 = obj_18.getValue();
            pred_16 = new Boolean(var1_17.intValue() == UmlParameterDirectionKindQuotes.IQRETURN.intValue());
            if (pred_16.booleanValue()) {
              res_s_14.add(t);
            }
          }
        }
      }
      tmpSet_10 = res_s_14;
      IUmlParameter tmp = null;
      boolean succ_12 = false;
      for (Iterator enm_25 = tmpSet_10.iterator(); enm_25.hasNext() && !succ_12; ) {

        IUmlParameter tmpElem_13 = (IUmlParameter) enm_25.next();
        succ_12 = true;
        tmp = (IUmlParameter) tmpElem_13;
      }
      if (!succ_12) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      retType = (IUmlParameter) tmp;
    }
    Vector parTypes = null;
    {

      Vector res_l_27 = new Vector();
      HashSet resBind_s_29 = new HashSet();
      HashSet riseq_33 = new HashSet();
      int max_34 = tps.size();
      for (int i_35 = 1; i_35 <= max_34; i_35++) 
        riseq_33.add(new Long(i_35));
      resBind_s_29 = riseq_33;
      Vector bind_l_28 = null;
      bind_l_28 = UTIL.Sort(resBind_s_29);
      Long i = null;
      for (Iterator enm_48 = bind_l_28.iterator(); enm_48.hasNext(); ) {

        Long e_31 = UTIL.NumberToLong(enm_48.next());
        i = e_31;
        Boolean pred_40 = null;
        Long var1_41 = null;
        IUmlParameterDirectionKind obj_42 = null;
        IUmlParameter obj_43 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= tps.size())) 
          obj_43 = (IUmlParameter) tps.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        obj_42 = (IUmlParameterDirectionKind) obj_43.getDirection();
        var1_41 = obj_42.getValue();
        pred_40 = new Boolean(!(var1_41.intValue() == UmlParameterDirectionKindQuotes.IQRETURN.intValue()));
        if (pred_40.booleanValue()) {

          IUmlType reselem_36 = null;
          IUmlParameter obj_37 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= tps.size())) 
            obj_37 = (IUmlParameter) tps.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_36 = (IUmlType) obj_37.getType();
          res_l_27.add(reselem_36);
        }
      }
      parTypes = res_l_27;
    }
    Object tmpVal_49 = null;
    if (new Boolean(!buildFunction.booleanValue()).booleanValue()) {

      IOmlType arg_59 = null;
      IUmlType par_61 = null;
      par_61 = (IUmlType) retType.getType();
      arg_59 = (IOmlType) ConvertType((IUmlType) par_61, (IUmlMultiplicityElement) mult);
      tmpVal_49 = new OmlOperationType((IOmlType) ConvertTypes(parTypes), arg_59);
    }
    else {

      IOmlType arg_54 = null;
      IUmlType par_56 = null;
      par_56 = (IUmlType) retType.getType();
      arg_54 = (IOmlType) ConvertType((IUmlType) par_56, (IUmlMultiplicityElement) mult);
      tmpVal_49 = new OmlPartialFunctionType((IOmlType) ConvertTypes(parTypes), arg_54);
    }
    IOmlType type = null;
    type = (IOmlType) tmpVal_49;
    return (IOmlType) type;
  }
// ***** VDMTOOLS END Name=buildParameterType#2|Vector|Boolean


// ***** VDMTOOLS START Name=ConvertTypes#1|Vector KEEP=NO
  private IOmlType ConvertTypes (final Vector tps) throws CGException {

    UmlMultiplicityElement mult = (UmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1));
    if (new Boolean((new Long(tps.size()).intValue()) > (new Long(1).intValue())).booleanValue()) 
      return (IOmlType) new OmlProductType((IOmlType) ConvertTypes(new Vector(tps.subList(1, tps.size()))), (IOmlType) ConvertType((IUmlType) (IUmlType) tps.get(0), (IUmlMultiplicityElement) mult));
    else 
      if (new Boolean(new Long(tps.size()).intValue() == new Long(1).intValue()).booleanValue()) 
        return (IOmlType) (IOmlType) ConvertType((IUmlType) (IUmlType) tps.get(0), (IUmlMultiplicityElement) mult);
      else 
        return (IOmlType) new OmlEmptyType();
  }
// ***** VDMTOOLS END Name=ConvertTypes#1|Vector


// ***** VDMTOOLS START Name=build_uFunction#1|IUmlOperation KEEP=NO
  public IOmlFunctionDefinition build_uFunction (final IUmlOperation prop) throws CGException {

    boolean succ_2;
    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_6 = null;
    par_6 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_6);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    Tuple tmpVal_11 = new Tuple(2);
    Vector par_12 = null;
    Boolean cond_14 = null;
    cond_14 = prop.hasOwnedParameters();
    if (cond_14.booleanValue()) {

      IUmlParameters obj_15 = null;
      obj_15 = (IUmlParameters) prop.getOwnedParameters();
      par_12 = obj_15.getParameterList();
    }
    else 
      par_12 = new Vector();
    Boolean par_16 = null;
    par_16 = prop.getIsQuery();
    tmpVal_11 = buildParameters(par_12, par_16);
    IOmlType type = null;
    Vector parms = null;
    succ_2 = true;
    {

      Vector e_l_17 = new Vector();
      for (int i_18 = 1; i_18 <= tmpVal_11.Length(); i_18++) 
        e_l_17.add(tmpVal_11.GetField(i_18));
      if (succ_2 = (2 == e_l_17.size())) {

        parms = (Vector) e_l_17.get(0);
        type = (IOmlType) e_l_17.get(2 - 1);
      }
    }
    if (!succ_2) 
      UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
    String tmpVal_19 = null;
    tmpVal_19 = prop.getName();
    String name = null;
    name = tmpVal_19;
    OmlFunctionBody body = (OmlFunctionBody) new OmlFunctionBody(null, new Boolean(true), new Boolean(false));
    OmlFunctionTrailer trailer = (OmlFunctionTrailer) new OmlFunctionTrailer(null, null, new Long(0), new Long(0));
    OmlExplicitFunction explicitOp = null;
    Vector arg_33 = null;
    arg_33 = new Vector();
    arg_33.add(new OmlParameter(parms));
    explicitOp = new OmlExplicitFunction(name, new Vector(), type, arg_33, body, trailer);
    return (IOmlFunctionDefinition) new OmlFunctionDefinition(access, explicitOp);
  }
// ***** VDMTOOLS END Name=build_uFunction#1|IUmlOperation


// ***** VDMTOOLS START Name=extractInstanceVarsFromAssociations#2|HashSet|HashSet KEEP=NO
  public void extractInstanceVarsFromAssociations (final HashSet associations, final HashSet constraints) throws CGException {

    HashSet normalBiAss = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlAssociation a = null;
      {
        for (Iterator enm_22 = associations.iterator(); enm_22.hasNext(); ) {

          IUmlAssociation elem_21 = (IUmlAssociation) enm_22.next();
          a = (IUmlAssociation) elem_21;
          Boolean pred_7 = null;
          Boolean var1_8 = null;
          Boolean unArg_9 = null;
          String par_11 = null;
          par_11 = a.getId();
          unArg_9 = hasXorConstraint(constraints, par_11);
          var1_8 = new Boolean(!unArg_9.booleanValue());
          {
            if ((pred_7 = var1_8).booleanValue()) {

              Boolean var2_12 = null;
              Long var1_13 = null;
              Long var1_14 = null;
              HashSet unArg_15 = new HashSet();
              unArg_15 = a.getOwnedEnds();
              var1_14 = new Long(unArg_15.size());
              Long var2_16 = null;
              HashSet unArg_17 = new HashSet();
              unArg_17 = a.getOwnedNavigableEnds();
              var2_16 = new Long(unArg_17.size());
              var1_13 = new Long(var1_14.intValue() + var2_16.intValue());
              var2_12 = new Boolean(var1_13.intValue() == new Long(2).intValue());
              pred_7 = var2_12;
            }
          }
          if (pred_7.booleanValue()) {
            res_s_5.add(a);
          }
        }
      }
    }
    normalBiAss = res_s_5;
    HashSet product = new HashSet();
    HashSet res_s_24 = new HashSet();
    {

      IUmlAssociation a = null;
      {
        for (Iterator enm_41 = associations.iterator(); enm_41.hasNext(); ) {

          IUmlAssociation elem_40 = (IUmlAssociation) enm_41.next();
          a = (IUmlAssociation) elem_40;
          Boolean pred_26 = null;
          Boolean var1_27 = null;
          Boolean unArg_28 = null;
          String par_30 = null;
          par_30 = a.getId();
          unArg_28 = hasXorConstraint(constraints, par_30);
          var1_27 = new Boolean(!unArg_28.booleanValue());
          {
            if ((pred_26 = var1_27).booleanValue()) {

              Boolean var2_31 = null;
              Long var1_32 = null;
              Long var1_33 = null;
              HashSet unArg_34 = new HashSet();
              unArg_34 = a.getOwnedEnds();
              var1_33 = new Long(unArg_34.size());
              Long var2_35 = null;
              HashSet unArg_36 = new HashSet();
              unArg_36 = a.getOwnedNavigableEnds();
              var2_35 = new Long(unArg_36.size());
              var1_32 = new Long(var1_33.intValue() + var2_35.intValue());
              var2_31 = new Boolean((var1_32.intValue()) > (new Long(2).intValue()));
              pred_26 = var2_31;
            }
          }
          if (pred_26.booleanValue()) {
            res_s_24.add(a);
          }
        }
      }
    }
    product = res_s_24;
    HashSet xor = new HashSet();
    HashSet res_s_43 = new HashSet();
    {

      IUmlAssociation a = null;
      {
        for (Iterator enm_59 = associations.iterator(); enm_59.hasNext(); ) {

          IUmlAssociation elem_58 = (IUmlAssociation) enm_59.next();
          a = (IUmlAssociation) elem_58;
          Boolean pred_45 = null;
          Boolean var1_46 = null;
          String par_48 = null;
          par_48 = a.getId();
          var1_46 = hasXorConstraint(constraints, par_48);
          {
            if ((pred_45 = var1_46).booleanValue()) {

              Boolean var2_49 = null;
              Long var1_50 = null;
              Long var1_51 = null;
              HashSet unArg_52 = new HashSet();
              unArg_52 = a.getOwnedEnds();
              var1_51 = new Long(unArg_52.size());
              Long var2_53 = null;
              HashSet unArg_54 = new HashSet();
              unArg_54 = a.getOwnedNavigableEnds();
              var2_53 = new Long(unArg_54.size());
              var1_50 = new Long(var1_51.intValue() + var2_53.intValue());
              var2_49 = new Boolean((var1_50.intValue()) >= (new Long(2).intValue()));
              pred_45 = var2_49;
            }
          }
          if (pred_45.booleanValue()) {
            res_s_43.add(a);
          }
        }
      }
    }
    xor = res_s_43;
    {

      {

        IUmlAssociation a = null;
        for (Iterator enm_68 = normalBiAss.iterator(); enm_68.hasNext(); ) {

          IUmlAssociation elem_61 = (IUmlAssociation) enm_68.next();
          a = (IUmlAssociation) elem_61;
          {

            HashSet tmpArg_v_65 = new HashSet();
            HashSet var1_66 = new HashSet();
            var1_66 = a.getOwnedEnds();
            HashSet var2_67 = new HashSet();
            var2_67 = a.getOwnedNavigableEnds();
            tmpArg_v_65 = (HashSet) var1_66.clone();
            tmpArg_v_65.addAll(var2_67);
            extractBinaryAssociation(tmpArg_v_65);
          }
        }
      }
      {

        HashSet xorEndss = new HashSet();
        HashSet res_s_71 = new HashSet();
        {

          IUmlConstraint c = null;
          {
            for (Iterator enm_97 = constraints.iterator(); enm_97.hasNext(); ) {

              IUmlConstraint elem_96 = (IUmlConstraint) enm_97.next();
              c = (IUmlConstraint) elem_96;
              HashSet res_s_72 = new HashSet();
              HashSet unArg_73 = new HashSet();
              HashSet res_s_74 = new HashSet();
              {

                IUmlAssociation a = null;
                {
                  for (Iterator enm_90 = xor.iterator(); enm_90.hasNext(); ) {

                    IUmlAssociation elem_89 = (IUmlAssociation) enm_90.next();
                    a = (IUmlAssociation) elem_89;
                    Boolean pred_78 = null;
                    boolean tmpQuant_79 = false;
                    {

                      HashSet e_set_84 = new HashSet();
                      e_set_84 = c.getConstraintElements();
                      String id = null;
                      {
                        for (Iterator enm_86 = e_set_84.iterator(); enm_86.hasNext() && !tmpQuant_79; ) {

                          String elem_85 = UTIL.ConvertToString(enm_86.next());
                          id = elem_85;
                          Boolean pred_80 = null;
                          String var2_82 = null;
                          var2_82 = a.getId();
                          pred_80 = new Boolean(UTIL.equals(id, var2_82));
                          if (pred_80.booleanValue()) 
                            tmpQuant_79 = true;
                        }
                      }
                    }
                    pred_78 = new Boolean(tmpQuant_79);
                    if (pred_78.booleanValue()) {

                      HashSet res_s_75 = new HashSet();
                      HashSet var1_76 = new HashSet();
                      var1_76 = a.getOwnedEnds();
                      HashSet var2_77 = new HashSet();
                      var2_77 = a.getOwnedNavigableEnds();
                      res_s_75 = (HashSet) var1_76.clone();
                      res_s_75.addAll(var2_77);
                      res_s_74.add(res_s_75);
                    }
                  }
                }
              }
              unArg_73 = res_s_74;
              HashSet rduset_91 = new HashSet();
              for (Iterator enm_93 = unArg_73.iterator(); enm_93.hasNext(); ) {

                HashSet e_92 = (HashSet) enm_93.next();
                rduset_91.addAll(e_92);
              }
              res_s_72 = rduset_91;
              res_s_71.add(res_s_72);
            }
          }
        }
        xorEndss = res_s_71;
        {

          HashSet a = new HashSet();
          for (Iterator enm_104 = xorEndss.iterator(); enm_104.hasNext(); ) {

            HashSet elem_99 = (HashSet) enm_104.next();
            a = elem_99;
            extractUnionAssociation(a);
          }
        }
      }
      {

        IUmlAssociation a = null;
        for (Iterator enm_113 = product.iterator(); enm_113.hasNext(); ) {

          IUmlAssociation elem_106 = (IUmlAssociation) enm_113.next();
          a = (IUmlAssociation) elem_106;
          {

            HashSet tmpArg_v_110 = new HashSet();
            HashSet var1_111 = new HashSet();
            var1_111 = a.getOwnedEnds();
            HashSet var2_112 = new HashSet();
            var2_112 = a.getOwnedNavigableEnds();
            tmpArg_v_110 = (HashSet) var1_111.clone();
            tmpArg_v_110.addAll(var2_112);
            extractProductAssociation(tmpArg_v_110);
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=extractInstanceVarsFromAssociations#2|HashSet|HashSet


// ***** VDMTOOLS START Name=hasXorConstraint#2|HashSet|String KEEP=NO
  public Boolean hasXorConstraint (final HashSet constraints, final String associationId) throws CGException {

    Boolean rexpr_3 = null;
    boolean tmpQuant_4 = false;
    {

      IUmlConstraint c = null;
      {
        for (Iterator enm_26 = constraints.iterator(); enm_26.hasNext() && !tmpQuant_4; ) {

          IUmlConstraint elem_25 = (IUmlConstraint) enm_26.next();
          c = (IUmlConstraint) elem_25;
          Boolean pred_5 = null;
          Boolean cond_7 = null;
          IUmlValueSpecification obj_8 = null;
          obj_8 = (IUmlValueSpecification) c.getSpecification();
          cond_7 = new Boolean(obj_8 instanceof IUmlLiteralString);
          if (cond_7.booleanValue()) {

            IUmlLiteralString spec = null;
            spec = (IUmlLiteralString) c.getSpecification();
            String var1_21 = null;
            var1_21 = spec.getValue();
            pred_5 = new Boolean(UTIL.equals(var1_21, new String("xor")));
          }
          else {
            if ((pred_5 = new Boolean(false)).booleanValue()) {

              Boolean var2_10 = null;
              boolean tmpQuant_11 = false;
              {

                HashSet e_set_16 = new HashSet();
                e_set_16 = c.getConstraintElements();
                String ce = null;
                {
                  for (Iterator enm_18 = e_set_16.iterator(); enm_18.hasNext() && !tmpQuant_11; ) {

                    String elem_17 = UTIL.ConvertToString(enm_18.next());
                    ce = elem_17;
                    if (new Boolean(UTIL.equals(ce, associationId)).booleanValue()) 
                      tmpQuant_11 = true;
                  }
                }
              }
              var2_10 = new Boolean(tmpQuant_11);
              pred_5 = var2_10;
            }
          }
          if (pred_5.booleanValue()) 
            tmpQuant_4 = true;
        }
      }
    }
    rexpr_3 = new Boolean(tmpQuant_4);
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=hasXorConstraint#2|HashSet|String


// ***** VDMTOOLS START Name=extractBinaryAssociation#1|HashSet KEEP=NO
  public void extractBinaryAssociation (final HashSet props) throws CGException {

    Vector propSeq = null;
    propSeq = (Vector) UTIL.ConvertToList(Util.SetToSeq(props));
    IUmlProperty pOwnerEnd = null;
    Vector unArg_6 = null;
    {

      Vector res_l_7 = new Vector();
      HashSet resBind_s_9 = new HashSet();
      HashSet riseq_13 = new HashSet();
      int max_14 = propSeq.size();
      for (int i_15 = 1; i_15 <= max_14; i_15++) 
        riseq_13.add(new Long(i_15));
      resBind_s_9 = riseq_13;
      Vector bind_l_8 = null;
      bind_l_8 = UTIL.Sort(resBind_s_9);
      Long i = null;
      for (Iterator enm_27 = bind_l_8.iterator(); enm_27.hasNext(); ) {

        Long e_11 = UTIL.NumberToLong(enm_27.next());
        i = e_11;
        Boolean pred_19 = null;
        Long var1_20 = null;
        String unArg_21 = null;
        IUmlProperty obj_22 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
          obj_22 = (IUmlProperty) propSeq.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        unArg_21 = obj_22.getName();
        var1_20 = new Long(unArg_21.length());
        pred_19 = new Boolean(var1_20.intValue() == new Long(0).intValue());
        if (pred_19.booleanValue()) {

          IUmlProperty reselem_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            reselem_16 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_7.add(reselem_16);
        }
      }
      unArg_6 = res_l_7;
    }
    pOwnerEnd = (IUmlProperty) unArg_6.get(0);
    IUmlProperty pTypeEnd = null;
    Vector unArg_29 = null;
    {

      Vector res_l_30 = new Vector();
      HashSet resBind_s_32 = new HashSet();
      HashSet riseq_36 = new HashSet();
      int max_37 = propSeq.size();
      for (int i_38 = 1; i_38 <= max_37; i_38++) 
        riseq_36.add(new Long(i_38));
      resBind_s_32 = riseq_36;
      Vector bind_l_31 = null;
      bind_l_31 = UTIL.Sort(resBind_s_32);
      Long i = null;
      for (Iterator enm_50 = bind_l_31.iterator(); enm_50.hasNext(); ) {

        Long e_34 = UTIL.NumberToLong(enm_50.next());
        i = e_34;
        Boolean pred_42 = null;
        Long var1_43 = null;
        String unArg_44 = null;
        IUmlProperty obj_45 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
          obj_45 = (IUmlProperty) propSeq.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        unArg_44 = obj_45.getName();
        var1_43 = new Long(unArg_44.length());
        pred_42 = new Boolean((var1_43.intValue()) > (new Long(0).intValue()));
        if (pred_42.booleanValue()) {

          IUmlProperty reselem_39 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            reselem_39 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_30.add(reselem_39);
        }
      }
      unArg_29 = res_l_30;
    }
    pTypeEnd = (IUmlProperty) unArg_29.get(0);
    String tmpVal_51 = null;
    {

      IUmlType tmpVal_53 = null;
      tmpVal_53 = (IUmlType) pOwnerEnd.getType();
      IUmlClassNameType t = null;
      t = (IUmlClassNameType) tmpVal_53;
      tmpVal_51 = t.getName();
    }
    String clName = null;
    clName = tmpVal_51;
    IUmlMultiplicityElement multiplicity = null;
    Boolean cond_56 = null;
    cond_56 = pTypeEnd.hasMultiplicity();
    if (cond_56.booleanValue()) 
      multiplicity = (IUmlMultiplicityElement) pTypeEnd.getMultiplicity();
    else 
      multiplicity = null;
    IOmlType tmpVal_57 = null;
    IUmlType par_58 = null;
    par_58 = (IUmlType) pTypeEnd.getType();
    tmpVal_57 = (IOmlType) ConvertType((IUmlType) par_58, (IUmlMultiplicityElement) multiplicity);
    IOmlType type = null;
    type = (IOmlType) tmpVal_57;
    AddInstanceVarToClass(clName, (IOmlInstanceVariable) (IOmlInstanceVariable) CreateInstanceVar((IUmlProperty) pTypeEnd, (IOmlType) type));
  }
// ***** VDMTOOLS END Name=extractBinaryAssociation#1|HashSet


// ***** VDMTOOLS START Name=extractUnionAssociation#1|HashSet KEEP=NO
  public void extractUnionAssociation (final HashSet props) throws CGException {

    HashSet ownerEndSet = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      IUmlProperty p = null;
      {
        for (Iterator enm_13 = props.iterator(); enm_13.hasNext(); ) {

          IUmlProperty elem_12 = (IUmlProperty) enm_13.next();
          p = (IUmlProperty) elem_12;
          Boolean pred_6 = null;
          Long var1_7 = null;
          String unArg_8 = null;
          unArg_8 = p.getName();
          var1_7 = new Long(unArg_8.length());
          pred_6 = new Boolean(var1_7.intValue() == new Long(0).intValue());
          if (pred_6.booleanValue()) {
            res_s_4.add(p);
          }
        }
      }
    }
    ownerEndSet = res_s_4;
    Vector propSeq = null;
    propSeq = (Vector) UTIL.ConvertToList(Util.SetToSeq(props));
    IUmlProperty pOwnerEnd = null;
    Vector unArg_17 = null;
    unArg_17 = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownerEndSet));
    pOwnerEnd = (IUmlProperty) unArg_17.get(0);
    Vector pTypeEnd = null;
    {

      Vector res_l_20 = new Vector();
      HashSet resBind_s_22 = new HashSet();
      HashSet riseq_26 = new HashSet();
      int max_27 = propSeq.size();
      for (int i_28 = 1; i_28 <= max_27; i_28++) 
        riseq_26.add(new Long(i_28));
      resBind_s_22 = riseq_26;
      Vector bind_l_21 = null;
      bind_l_21 = UTIL.Sort(resBind_s_22);
      Long i = null;
      for (Iterator enm_40 = bind_l_21.iterator(); enm_40.hasNext(); ) {

        Long e_24 = UTIL.NumberToLong(enm_40.next());
        i = e_24;
        Boolean pred_32 = null;
        Long var1_33 = null;
        String unArg_34 = null;
        IUmlProperty obj_35 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
          obj_35 = (IUmlProperty) propSeq.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        unArg_34 = obj_35.getName();
        var1_33 = new Long(unArg_34.length());
        pred_32 = new Boolean((var1_33.intValue()) > (new Long(0).intValue()));
        if (pred_32.booleanValue()) {

          IUmlProperty reselem_29 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            reselem_29 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_20.add(reselem_29);
        }
      }
      pTypeEnd = res_l_20;
    }
    String tmpVal_41 = null;
    {

      IUmlType tmpVal_43 = null;
      tmpVal_43 = (IUmlType) pOwnerEnd.getType();
      IUmlClassNameType t = null;
      t = (IUmlClassNameType) tmpVal_43;
      tmpVal_41 = t.getName();
    }
    String clName = null;
    clName = tmpVal_41;
    Vector endTypes = null;
    HashSet par_45 = new HashSet();
    HashSet res_s_46 = new HashSet();
    {

      HashSet e1_set_54 = new HashSet(pTypeEnd);
      IUmlProperty p = null;
      {
        for (Iterator enm_56 = e1_set_54.iterator(); enm_56.hasNext(); ) {

          IUmlProperty elem_55 = (IUmlProperty) enm_56.next();
          p = (IUmlProperty) elem_55;
          IOmlType res_s_47 = null;
          IUmlType par_48 = null;
          par_48 = (IUmlType) p.getType();
          IUmlMultiplicityElement par_49 = null;
          Boolean cond_51 = null;
          cond_51 = p.hasMultiplicity();
          if (cond_51.booleanValue()) 
            par_49 = (IUmlMultiplicityElement) p.getMultiplicity();
          else 
            par_49 = null;
          res_s_47 = (IOmlType) ConvertType((IUmlType) par_48, (IUmlMultiplicityElement) par_49);
          res_s_46.add(res_s_47);
        }
      }
    }
    par_45 = res_s_46;
    endTypes = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_45));
    IOmlType lhs = (IOmlType) (IOmlType) endTypes.get(0);
    IOmlType rhs = null;
    Vector unArg_60 = null;
    HashSet par_61 = new HashSet();
    HashSet var1_62 = new HashSet();
    HashSet set_64 = new HashSet();
    Enumeration enm_65 = endTypes.elements();
    while ( enm_65.hasMoreElements())
      set_64.add(enm_65.nextElement());
    var1_62 = set_64;
    HashSet var2_66 = new HashSet();
    var2_66 = new HashSet();
    var2_66.add(lhs);
    par_61 = (HashSet) var1_62.clone();
    par_61.removeAll(var2_66);
    unArg_60 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_61));
    rhs = (IOmlType) unArg_60.get(0);
    OmlUnionType tmpVal_68 = null;
    tmpVal_68 = (OmlUnionType) new OmlUnionType(lhs, rhs);
    OmlUnionType type = null;
    type = (OmlUnionType) tmpVal_68;
    AddInstanceVarToClass(clName, (IOmlInstanceVariable) (IOmlInstanceVariable) CreateInstanceVar((IUmlProperty) (IUmlProperty) pTypeEnd.get(0), (IOmlType) type));
  }
// ***** VDMTOOLS END Name=extractUnionAssociation#1|HashSet


// ***** VDMTOOLS START Name=extractProductAssociation#1|HashSet KEEP=NO
  public void extractProductAssociation (final HashSet props) throws CGException {

    HashSet ownerEndSet = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      IUmlProperty p = null;
      {
        for (Iterator enm_13 = props.iterator(); enm_13.hasNext(); ) {

          IUmlProperty elem_12 = (IUmlProperty) enm_13.next();
          p = (IUmlProperty) elem_12;
          Boolean pred_6 = null;
          Long var1_7 = null;
          String unArg_8 = null;
          unArg_8 = p.getName();
          var1_7 = new Long(unArg_8.length());
          pred_6 = new Boolean(var1_7.intValue() == new Long(0).intValue());
          if (pred_6.booleanValue()) {
            res_s_4.add(p);
          }
        }
      }
    }
    ownerEndSet = res_s_4;
    Vector propSeq = null;
    propSeq = (Vector) UTIL.ConvertToList(Util.SetToSeq(props));
    IUmlProperty pOwnerEnd = null;
    Vector unArg_17 = null;
    unArg_17 = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownerEndSet));
    pOwnerEnd = (IUmlProperty) unArg_17.get(0);
    Vector pTypeEnd = null;
    {

      Vector res_l_20 = new Vector();
      HashSet resBind_s_22 = new HashSet();
      HashSet riseq_26 = new HashSet();
      int max_27 = propSeq.size();
      for (int i_28 = 1; i_28 <= max_27; i_28++) 
        riseq_26.add(new Long(i_28));
      resBind_s_22 = riseq_26;
      Vector bind_l_21 = null;
      bind_l_21 = UTIL.Sort(resBind_s_22);
      Long i = null;
      for (Iterator enm_40 = bind_l_21.iterator(); enm_40.hasNext(); ) {

        Long e_24 = UTIL.NumberToLong(enm_40.next());
        i = e_24;
        Boolean pred_32 = null;
        Long var1_33 = null;
        String unArg_34 = null;
        IUmlProperty obj_35 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
          obj_35 = (IUmlProperty) propSeq.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        unArg_34 = obj_35.getName();
        var1_33 = new Long(unArg_34.length());
        pred_32 = new Boolean((var1_33.intValue()) > (new Long(0).intValue()));
        if (pred_32.booleanValue()) {

          IUmlProperty reselem_29 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            reselem_29 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_20.add(reselem_29);
        }
      }
      pTypeEnd = res_l_20;
    }
    String tmpVal_41 = null;
    {

      IUmlType tmpVal_43 = null;
      tmpVal_43 = (IUmlType) pOwnerEnd.getType();
      IUmlClassNameType t = null;
      t = (IUmlClassNameType) tmpVal_43;
      tmpVal_41 = t.getName();
    }
    String clName = null;
    clName = tmpVal_41;
    Vector endTypes = null;
    HashSet par_45 = new HashSet();
    HashSet res_s_46 = new HashSet();
    {

      HashSet e1_set_50 = new HashSet(pTypeEnd);
      IUmlProperty p = null;
      {
        for (Iterator enm_52 = e1_set_50.iterator(); enm_52.hasNext(); ) {

          IUmlProperty elem_51 = (IUmlProperty) enm_52.next();
          p = (IUmlProperty) elem_51;
          IUmlType res_s_47 = null;
          res_s_47 = (IUmlType) p.getType();
          res_s_46.add(res_s_47);
        }
      }
    }
    par_45 = res_s_46;
    endTypes = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_45));
    IOmlType tmpVal_53 = null;
    tmpVal_53 = (IOmlType) (IOmlType) CreateProductType(endTypes);
    IOmlType type = null;
    type = (IOmlType) tmpVal_53;
    AddInstanceVarToClass(clName, (IOmlInstanceVariable) (IOmlInstanceVariable) CreateInstanceVar((IUmlProperty) (IUmlProperty) pTypeEnd.get(0), (IOmlType) type));
  }
// ***** VDMTOOLS END Name=extractProductAssociation#1|HashSet


// ***** VDMTOOLS START Name=CreateProductType#1|Vector KEEP=NO
  private IOmlType CreateProductType (final Vector tps) throws CGException {

    Object varRes_2 = null;
    {

      IUmlType first = (IUmlType) (IUmlType) tps.get(0);
      Vector vdm_rest = new Vector(tps.subList(1, tps.size()));
      IOmlType front = (IOmlType) (IOmlType) ConvertType((IUmlType) first, null);
      if (new Boolean(new Long(tps.size()).intValue() == new Long(1).intValue()).booleanValue()) 
        varRes_2 = front;
      else 
        varRes_2 = new OmlProductType(front, (IOmlType) CreateProductType(vdm_rest));
    }
    return (IOmlType) varRes_2;
  }
// ***** VDMTOOLS END Name=CreateProductType#1|Vector


// ***** VDMTOOLS START Name=CreateInstanceVar#2|IUmlProperty|IOmlType KEEP=NO
  public IOmlInstanceVariable CreateInstanceVar (final IUmlProperty prop, final IOmlType type) throws CGException {

    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_7 = null;
    par_7 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_7);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    IUmlMultiplicityElement multiplicity = null;
    Boolean cond_14 = null;
    cond_14 = prop.hasMultiplicity();
    if (cond_14.booleanValue()) 
      multiplicity = (IUmlMultiplicityElement) prop.getMultiplicity();
    else 
      multiplicity = null;
    IOmlType type1 = null;
    IUmlType par_16 = null;
    par_16 = (IUmlType) prop.getType();
    type1 = (IOmlType) ConvertType((IUmlType) par_16, (IUmlMultiplicityElement) multiplicity);
    IOmlExpression tmpVal_18 = null;
    Boolean cond_20 = null;
    cond_20 = prop.hasDefault();
    if (cond_20.booleanValue()) {

      IUmlValueSpecification par_21 = null;
      par_21 = (IUmlValueSpecification) prop.getDefault();
      tmpVal_18 = (IOmlExpression) getDefaultExpression((IUmlValueSpecification) par_21, (IOmlType) type1);
    }
    else 
      tmpVal_18 = null;
    IOmlExpression expression = null;
    expression = (IOmlExpression) tmpVal_18;
    OmlAssignmentDefinition assignmentDef = null;
    String arg_24 = null;
    arg_24 = prop.getName();
    assignmentDef = new OmlAssignmentDefinition(arg_24, type, expression);
    return (IOmlInstanceVariable) new OmlInstanceVariable(access, assignmentDef);
  }
// ***** VDMTOOLS END Name=CreateInstanceVar#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=AddInstanceVarToClass#2|String|IOmlInstanceVariable KEEP=NO
  private void AddInstanceVarToClass (final String clName, final IOmlInstanceVariable instanceVar) throws CGException {

    Vector existingSet = getAssociationInstanceVars(clName);
    Vector addedSet = null;
    if (new Boolean((new Long(existingSet.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      Vector var2_14 = null;
      var2_14 = new Vector();
      var2_14.add(instanceVar);
      addedSet = (Vector) existingSet.clone();
      addedSet.addAll(var2_14);
    }
    else {

      addedSet = new Vector();
      addedSet.add(instanceVar);
    }
    classInstanceVars.put(clName, addedSet);
  }
// ***** VDMTOOLS END Name=AddInstanceVarToClass#2|String|IOmlInstanceVariable


// ***** VDMTOOLS START Name=getAssociationInstanceVars#1|String KEEP=NO
  public Vector getAssociationInstanceVars (final String clName) throws CGException {

    Boolean cond_2 = null;
    cond_2 = new Boolean(classInstanceVars.containsKey(clName));
    if (cond_2.booleanValue()) 
      return (Vector) UTIL.ConvertToList(classInstanceVars.get(clName));
    else 
      return new Vector();
  }
// ***** VDMTOOLS END Name=getAssociationInstanceVars#1|String


// ***** VDMTOOLS START Name=getDefaultExpression#2|IUmlValueSpecification|IOmlType KEEP=NO
  public IOmlExpression getDefaultExpression (final IUmlValueSpecification defaultValue, final IOmlType t) throws CGException {
    if (new Boolean(UTIL.equals(defaultValue, null)).booleanValue()) 
      return null;
    else {

      Object val = null;
      if (new Boolean(defaultValue instanceof IUmlLiteralString).booleanValue()) {

        IUmlLiteralString ls = (IUmlLiteralString) defaultValue;
        val = ls.getValue();
      }
      else {

        IUmlLiteralInteger li = (IUmlLiteralInteger) defaultValue;
        val = li.getValue();
      }
      boolean succ_15 = true;
      {

        succ_15 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlTypeName))) 
          succ_15 = false;
        if (succ_15) {

          String tmp = UTIL.ConvertToString(val);
          return (IOmlExpression) new OmlNewExpression(new OmlName(null, tmp), new Vector(), new Vector());
        }
        else {

          succ_15 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlIntType))) 
            succ_15 = false;
          if (succ_15) {

            Long tmp = UTIL.NumberToLong(val);
            return (IOmlExpression) new OmlSymbolicLiteralExpression(new OmlNumericLiteral(tmp));
          }
          else {

            succ_15 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlCharType))) 
              succ_15 = false;
            if (succ_15) {

              String tmp = UTIL.ConvertToString(val);
              return (IOmlExpression) new OmlSymbolicLiteralExpression(new OmlTextLiteral(tmp));
            }
            else {

              succ_15 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq0Type))) 
                succ_15 = false;
              if (succ_15) {

                IOmlExpression rexpr_21 = null;
                IOmlType par_23 = null;
                {

                  IOmlSeq0Type tmp = (IOmlSeq0Type) t;
                  par_23 = (IOmlType) tmp.getType();
                }
                rexpr_21 = (IOmlExpression) getDefaultExpression((IUmlValueSpecification) defaultValue, (IOmlType) par_23);
                return (IOmlExpression) rexpr_21;
              }
              else 
                return null;
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=getDefaultExpression#2|IUmlValueSpecification|IOmlType


// ***** VDMTOOLS START Name=ConvertVisibility#1|IUmlVisibilityKind KEEP=NO
  public IOmlScope ConvertVisibility (final IUmlVisibilityKind visibility) throws CGException {

    Long val = null;
    val = visibility.getValue();
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(val, UmlVisibilityKindQuotes.IQPUBLIC)) 
        succ_4 = false;
      if (succ_4) 
        return (IOmlScope) new OmlScope(OmlScopeQuotes.IQPUBLIC);
      else {

        succ_4 = true;
        if (!UTIL.equals(val, UmlVisibilityKindQuotes.IQPRIVATE)) 
          succ_4 = false;
        if (succ_4) 
          return (IOmlScope) new OmlScope(OmlScopeQuotes.IQDEFAULT);
        else {

          succ_4 = true;
          if (!UTIL.equals(val, UmlVisibilityKindQuotes.IQPROTECTED)) 
            succ_4 = false;
          if (succ_4) 
            return (IOmlScope) new OmlScope(OmlScopeQuotes.IQPROTECTED);
        }
      }
    }
    throw new CGException();
  }
// ***** VDMTOOLS END Name=ConvertVisibility#1|IUmlVisibilityKind


// ***** VDMTOOLS START Name=ConvertType#2|IUmlType|IUmlMultiplicityElement KEEP=NO
  public IOmlType ConvertType (final IUmlType t, final IUmlMultiplicityElement mul) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlClassNameType))) 
        succ_3 = false;
      if (succ_3) {

        OmlTypeName rexpr_35 = null;
        OmlName arg_36 = null;
        {

          IUmlClassNameType tmp = (IUmlClassNameType) t;
          String arg_40 = null;
          arg_40 = tmp.getName();
          arg_36 = new OmlName(null, arg_40);
        }
        rexpr_35 = new OmlTypeName(arg_36);
        return (IOmlType) rexpr_35;
      }
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
          succ_3 = false;
        if (succ_3) 
          return (IOmlType) (IOmlType) ApplyMultiplicity((IOmlType) new OmlCharType(), (IUmlMultiplicityElement) mul);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlStringType))) 
            succ_3 = false;
          if (succ_3) 
            return (IOmlType) new OmlSeq0Type(new OmlCharType());
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
              succ_3 = false;
            if (succ_3) 
              return (IOmlType) (IOmlType) ApplyMultiplicity((IOmlType) new OmlIntType(), (IUmlMultiplicityElement) mul);
            else {

              succ_3 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
                succ_3 = false;
              if (succ_3) 
                return (IOmlType) (IOmlType) ApplyMultiplicity((IOmlType) new OmlBoolType(), (IUmlMultiplicityElement) mul);
              else {

                succ_3 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
                  succ_3 = false;
                if (succ_3) 
                  return (IOmlType) (IOmlType) ApplyMultiplicity((IOmlType) new OmlRealType(), (IUmlMultiplicityElement) mul);
                else 
                  return (IOmlType) (IOmlType) ApplyMultiplicity((IOmlType) new OmlNatType(), (IUmlMultiplicityElement) mul);
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=ConvertType#2|IUmlType|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=ApplyMultiplicity#2|IOmlType|IUmlMultiplicityElement KEEP=NO
  private IOmlType ApplyMultiplicity (final IOmlType t, final IUmlMultiplicityElement mul) throws CGException {
    if (new Boolean(UTIL.equals(mul, null)).booleanValue()) 
      return (IOmlType) t;
    else {

      Boolean cond_6 = null;
      Boolean var1_7 = null;
      Long var1_8 = null;
      var1_8 = mul.getLower();
      var1_7 = new Boolean(var1_8.intValue() == new Long(0).intValue());
      {
        if ((cond_6 = var1_7).booleanValue()) {

          Boolean var2_10 = null;
          Boolean unArg_11 = null;
          unArg_11 = mul.hasUpper();
          var2_10 = new Boolean(!unArg_11.booleanValue());
          cond_6 = var2_10;
        }
      }
      if (cond_6.booleanValue()) 
        return (IOmlType) new OmlSeq0Type(t);
      else 
        return (IOmlType) t;
    }
  }
// ***** VDMTOOLS END Name=ApplyMultiplicity#2|IOmlType|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=build_utraces#1|IUmlModel KEEP=NO
  private HashMap build_utraces (final IUmlModel model) throws CGException {

    HashMap varRes_2 = new HashMap();
    {

      HashSet collOwnedBehavior = new HashSet();
      HashSet unArg_5 = new HashSet();
      HashSet res_s_6 = new HashSet();
      {

        HashSet e_set_13 = new HashSet();
        e_set_13 = model.getDefinitions();
        IUmlModelElement coll = null;
        {
          for (Iterator enm_15 = e_set_13.iterator(); enm_15.hasNext(); ) {

            IUmlModelElement elem_14 = (IUmlModelElement) enm_15.next();
            coll = (IUmlModelElement) elem_14;
            if (new Boolean(coll instanceof IUmlCollaboration).booleanValue()) {

              HashSet res_s_7 = new HashSet();
              {

                IUmlCollaboration tmp = (IUmlCollaboration) coll;
                res_s_7 = tmp.getOwnedBehavior();
              }
              res_s_6.add(res_s_7);
            }
          }
        }
      }
      unArg_5 = res_s_6;
      HashSet rduset_16 = new HashSet();
      for (Iterator enm_18 = unArg_5.iterator(); enm_18.hasNext(); ) {

        HashSet e_17 = (HashSet) enm_18.next();
        rduset_16.addAll(e_17);
      }
      collOwnedBehavior = rduset_16;
      HashSet unArg_19 = new HashSet();
      HashSet res_s_20 = new HashSet();
      {

        IUmlInteraction interaction = null;
        {
          for (Iterator enm_26 = collOwnedBehavior.iterator(); enm_26.hasNext(); ) {

            IUmlInteraction elem_25 = (IUmlInteraction) enm_26.next();
            interaction = (IUmlInteraction) elem_25;
            res_s_20.add(build_utrace((IUmlInteraction) interaction));
          }
        }
      }
      unArg_19 = res_s_20;
      HashMap rdmmap_27 = new HashMap();
      for (Iterator enm_34 = unArg_19.iterator(); enm_34.hasNext(); ) {

        HashMap e_28 = (HashMap) enm_34.next();
        HashSet eq_dom_30 = new HashSet();
        eq_dom_30.addAll(rdmmap_27.keySet());
        eq_dom_30.retainAll(e_28.keySet());
        boolean all_dup_eq_31 = true;
        for (Iterator enm_33 = eq_dom_30.iterator(); enm_33.hasNext() && all_dup_eq_31; ) {

          String d_32 = UTIL.ConvertToString(enm_33.next());
          all_dup_eq_31 = ((IOmlTraceDefinitions) rdmmap_27.get(d_32)).equals((IOmlTraceDefinitions) e_28.get(d_32));
        }
        if (!all_dup_eq_31) 
          UTIL.RunTime("Run-Time Error:Duplicate entries for \'merge\' had different values");
        rdmmap_27.putAll(e_28);
      }
      varRes_2 = rdmmap_27;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=build_utraces#1|IUmlModel


// ***** VDMTOOLS START Name=build_utrace#1|IUmlInteraction KEEP=NO
  private HashMap build_utrace (final IUmlInteraction interaction) throws CGException {

    HashMap varRes_2 = new HashMap();
    {

      String tmpVal_4 = null;
      tmpVal_4 = interaction.getName();
      String name = null;
      name = tmpVal_4;
      Vector messages = null;
      messages = interaction.getMessages();
      {

        IOmlTraceDefinition tmpVal_7 = null;
        HashSet par_9 = new HashSet();
        par_9 = interaction.getFragments();
        tmpVal_7 = (IOmlTraceDefinition) getTraceDefinition(messages, par_9, null);
        IOmlTraceDefinition defs = null;
        defs = (IOmlTraceDefinition) tmpVal_7;
        {

          HashSet tmpSet_11 = new HashSet();
          HashSet res_s_15 = new HashSet();
          {

            HashSet e1_set_21 = new HashSet(messages);
            IUmlMessage m = null;
            {
              for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

                IUmlMessage elem_22 = (IUmlMessage) enm_23.next();
                m = (IUmlMessage) elem_22;
                IUmlType res_s_16 = null;
                IUmlLifeLine obj_17 = null;
                IUmlMos obj_18 = null;
                obj_18 = (IUmlMos) m.getSendEvent();
                obj_17 = (IUmlLifeLine) obj_18.getCovered();
                res_s_16 = (IUmlType) obj_17.getRepresents();
                res_s_15.add(res_s_16);
              }
            }
          }
          tmpSet_11 = res_s_15;
          IUmlType ownerClass = null;
          boolean succ_13 = false;
          for (Iterator enm_24 = tmpSet_11.iterator(); enm_24.hasNext() && !succ_13; ) {

            IUmlType tmpElem_14 = (IUmlType) enm_24.next();
            succ_13 = true;
            ownerClass = (IUmlType) tmpElem_14;
          }
          if (!succ_13) 
            UTIL.RunTime("Run-Time Error:The binding environment was empty");
          String tmpVar1_25 = null;
          {

            IUmlClassNameType owr = (IUmlClassNameType) ownerClass;
            tmpVar1_25 = owr.getName();
          }
          OmlTraceDefinitions tmpVar2_28 = null;
          Vector arg_29 = null;
          arg_29 = new Vector();
          arg_29.add(new OmlNamedTrace(name, defs));
          tmpVar2_28 = new OmlTraceDefinitions(arg_29);
          varRes_2 = new HashMap();
          varRes_2.put(tmpVar1_25, tmpVar2_28);
        }
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=build_utrace#1|IUmlInteraction


// ***** VDMTOOLS START Name=getTraceDefinition#3|Vector|HashSet|IUmlInteractionOperand KEEP=NO
  private IOmlTraceDefinition getTraceDefinition (final Vector msgs, final HashSet fg, final IUmlInteractionOperand io) throws CGException {

    IOmlTraceDefinition varRes_4 = null;
    if (new Boolean((new Long(msgs.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      IUmlMessage m = (IUmlMessage) (IUmlMessage) msgs.get(0);
      Vector vdm_rest = null;
      if (new Boolean((new Long(msgs.size()).intValue()) > (new Long(1).intValue())).booleanValue()) 
        vdm_rest = new Vector(msgs.subList(1, msgs.size()));
      else 
        vdm_rest = new Vector();
      HashSet cfg = new HashSet();
      HashSet res_s_21 = new HashSet();
      {

        IUmlInteractionFragment f = null;
        {
          for (Iterator enm_28 = fg.iterator(); enm_28.hasNext(); ) {

            IUmlInteractionFragment elem_27 = (IUmlInteractionFragment) enm_28.next();
            f = (IUmlInteractionFragment) elem_27;
            if (new Boolean(f instanceof IUmlCombinedFragment).booleanValue()) {
              res_s_21.add(f);
            }
          }
        }
      }
      cfg = res_s_21;
      IUmlInteractionOperand tmpVal_29 = null;
      tmpVal_29 = (IUmlInteractionOperand) (IUmlInteractionOperand) getOperand((IUmlMessage) m, cfg);
      IUmlInteractionOperand op = null;
      op = (IUmlInteractionOperand) tmpVal_29;
      Boolean cond_33 = null;
      Boolean var1_34 = null;
      {
        if ((var1_34 = new Boolean(UTIL.equals(io, null))).booleanValue()) 
          var1_34 = new Boolean(UTIL.equals(op, null));
      }
      {
        if (!(cond_33 = var1_34).booleanValue()) 
          cond_33 = new Boolean(UTIL.equals(io, op));
      }
      if (cond_33.booleanValue()) {

        IOmlTraceDefinition mappDef = (IOmlTraceDefinition) new OmlTraceDefinitionItem(new Vector(), (IOmlTraceMethodApply) getMethodApply((IUmlMessage) m), null);
        IOmlTraceDefinition restDef = (IOmlTraceDefinition) (IOmlTraceDefinition) getTraceDefinition(vdm_rest, cfg, (IUmlInteractionOperand) op);
        Vector tmpVal_116 = null;
        tmpVal_116 = new Vector();
        tmpVal_116.add(mappDef);
        tmpVal_116.add(restDef);
        Vector defs = null;
        defs = tmpVal_116;
        {

          IOmlTraceDefinition ret = (IOmlTraceDefinition) new OmlTraceSequenceDefinition(defs);
          varRes_4 = (IOmlTraceDefinition) ret;
        }
      }
      else {

        Boolean cond_45 = null;
        {
          if ((cond_45 = new Boolean(!UTIL.equals(op, null))).booleanValue()) {

            Boolean var2_49 = null;
            Long var1_50 = null;
            IUmlInteractionOperatorKind obj_51 = null;
            obj_51 = (IUmlInteractionOperatorKind) (IUmlInteractionOperatorKind) getCfIoKind(fg, (IUmlInteractionOperand) op);
            var1_50 = obj_51.getValue();
            var2_49 = new Boolean(var1_50.intValue() == UmlInteractionOperatorKindQuotes.IQLOOP.intValue());
            cond_45 = var2_49;
          }
        }
        if (cond_45.booleanValue()) {

          IOmlTraceDefinition loopDef = (IOmlTraceDefinition) (IOmlTraceDefinition) getLoopDef((IUmlMessage) m, (IUmlInteractionOperand) op);
          IOmlTraceDefinition restDef = (IOmlTraceDefinition) (IOmlTraceDefinition) getTraceDefinition(vdm_rest, cfg, (IUmlInteractionOperand) op);
          Vector tmpVal_96 = null;
          if (new Boolean(!UTIL.equals(restDef, null)).booleanValue()) {

            tmpVal_96 = new Vector();
            tmpVal_96.add(loopDef);
            tmpVal_96.add(restDef);
          }
          else {

            tmpVal_96 = new Vector();
            tmpVal_96.add(loopDef);
          }
          Vector defs = null;
          defs = tmpVal_96;
          IOmlTraceDefinition ret = (IOmlTraceDefinition) new OmlTraceSequenceDefinition(defs);
          varRes_4 = (IOmlTraceDefinition) ret;
        }
        else {

          Boolean cond_56 = null;
          {
            if ((cond_56 = new Boolean(!UTIL.equals(op, null))).booleanValue()) {

              Boolean var2_60 = null;
              Long var1_61 = null;
              IUmlInteractionOperatorKind obj_62 = null;
              obj_62 = (IUmlInteractionOperatorKind) (IUmlInteractionOperatorKind) getCfIoKind(fg, (IUmlInteractionOperand) op);
              var1_61 = obj_62.getValue();
              var2_60 = new Boolean(var1_61.intValue() == UmlInteractionOperatorKindQuotes.IQALT.intValue());
              cond_56 = var2_60;
            }
          }
          if (cond_56.booleanValue()) {

            IOmlTraceDefinition altDef = (IOmlTraceDefinition) (IOmlTraceDefinition) getAltDef(vdm_rest, (IUmlMessage) m, cfg, (IUmlInteractionOperand) op);
            IOmlTraceDefinition restDef = (IOmlTraceDefinition) (IOmlTraceDefinition) getTraceDefinition(vdm_rest, cfg, (IUmlInteractionOperand) op);
            Vector tmpVal_78 = null;
            if (new Boolean(!UTIL.equals(restDef, null)).booleanValue()) {

              tmpVal_78 = new Vector();
              tmpVal_78.add(altDef);
              tmpVal_78.add(restDef);
            }
            else {

              tmpVal_78 = new Vector();
              tmpVal_78.add(altDef);
            }
            Vector defs = null;
            defs = tmpVal_78;
            IOmlTraceDefinition ret = (IOmlTraceDefinition) new OmlTraceSequenceDefinition(defs);
            varRes_4 = (IOmlTraceDefinition) ret;
          }
          else {

            IOmlTraceDefinition ret = (IOmlTraceDefinition) new OmlTraceSequenceDefinition();
            varRes_4 = (IOmlTraceDefinition) ret;
          }
        }
      }
    }
    else 
      varRes_4 = null;
    return (IOmlTraceDefinition) varRes_4;
  }
// ***** VDMTOOLS END Name=getTraceDefinition#3|Vector|HashSet|IUmlInteractionOperand


// ***** VDMTOOLS START Name=getLoopDef#2|IUmlMessage|IUmlInteractionOperand KEEP=NO
  private IOmlTraceDefinition getLoopDef (final IUmlMessage m, final IUmlInteractionOperand io) throws CGException {
    return (IOmlTraceDefinition) new OmlTraceDefinitionItem(new Vector(), (IOmlTraceMethodApply) getMethodApply((IUmlMessage) m), (IOmlTraceRepeatPattern) getRpEx((IUmlInteractionOperand) io));
  }
// ***** VDMTOOLS END Name=getLoopDef#2|IUmlMessage|IUmlInteractionOperand


// ***** VDMTOOLS START Name=getRpEx#1|IUmlInteractionOperand KEEP=NO
  private IOmlTraceRepeatPattern getRpEx (final IUmlInteractionOperand iOperand) throws CGException {

    Object varRes_2 = null;
    if (new Boolean(UTIL.equals(iOperand, null)).booleanValue()) 
      varRes_2 = null;
    else {

      Boolean cond_8 = null;
      cond_8 = iOperand.hasGuard();
      if (cond_8.booleanValue()) {

        IUmlInteractionConstraint guard = null;
        guard = (IUmlInteractionConstraint) iOperand.getGuard();
        Long min = null;
        Boolean cond_13 = null;
        cond_13 = guard.hasMinint();
        if (cond_13.booleanValue()) {

          IUmlLiteralInteger tmp = null;
          tmp = (IUmlLiteralInteger) guard.getMinint();
          min = tmp.getValue();
        }
        else 
          min = null;
        Long max = null;
        Boolean cond_18 = null;
        cond_18 = guard.hasMaxint();
        if (cond_18.booleanValue()) {

          IUmlLiteralInteger tmp = null;
          tmp = (IUmlLiteralInteger) guard.getMaxint();
          max = tmp.getValue();
        }
        else 
          max = null;
        Boolean cond_22 = null;
        Boolean var1_23 = null;
        {
          if ((var1_23 = new Boolean(!UTIL.equals(min, null))).booleanValue()) 
            var1_23 = new Boolean(min.intValue() == new Long(0).intValue());
        }
        {
          if ((cond_22 = var1_23).booleanValue()) 
            cond_22 = new Boolean(UTIL.equals(max, null));
        }
        if (cond_22.booleanValue()) 
          varRes_2 = new OmlTraceZeroOrMore();
        else {

          Boolean cond_34 = null;
          Boolean var1_35 = null;
          {
            if ((var1_35 = new Boolean(!UTIL.equals(min, null))).booleanValue()) 
              var1_35 = new Boolean(min.intValue() == new Long(1).intValue());
          }
          {
            if ((cond_34 = var1_35).booleanValue()) 
              cond_34 = new Boolean(UTIL.equals(max, null));
          }
          if (cond_34.booleanValue()) 
            varRes_2 = new OmlTraceOneOrMore();
          else {

            Boolean cond_46 = null;
            Boolean var1_47 = null;
            Boolean var1_48 = null;
            {
              if ((var1_48 = new Boolean(!UTIL.equals(min, null))).booleanValue()) 
                var1_48 = new Boolean(!UTIL.equals(max, null));
            }
            {
              if ((var1_47 = var1_48).booleanValue()) 
                var1_47 = new Boolean(min.intValue() == new Long(0).intValue());
            }
            {
              if ((cond_46 = var1_47).booleanValue()) 
                cond_46 = new Boolean(max.intValue() == new Long(1).intValue());
            }
            if (cond_46.booleanValue()) 
              varRes_2 = new OmlTraceZeroOrOne();
            else 
              if (new Boolean(!UTIL.equals(min, null)).booleanValue()) {

                OmlNumericLiteral minL = (OmlNumericLiteral) new OmlNumericLiteral(min);
                OmlNumericLiteral maxL = null;
                if (new Boolean(!UTIL.equals(max, null)).booleanValue()) 
                  maxL = (OmlNumericLiteral) new OmlNumericLiteral(max);
                else 
                  maxL = null;
                varRes_2 = new OmlTraceRange(minL, maxL);
              }
              else 
                varRes_2 = null;
          }
        }
      }
      else 
        varRes_2 = null;
    }
    return (IOmlTraceRepeatPattern) varRes_2;
  }
// ***** VDMTOOLS END Name=getRpEx#1|IUmlInteractionOperand


// ***** VDMTOOLS START Name=getAltDef#4|Vector|IUmlMessage|HashSet|IUmlInteractionOperand KEEP=NO
  private IOmlTraceDefinition getAltDef (final Vector msgs, final IUmlMessage m, final HashSet fg, final IUmlInteractionOperand io) throws CGException {

    OmlTraceChoiceDefinition varRes_5 = null;
    {

      IOmlTraceMethodApply mapp = (IOmlTraceMethodApply) (IOmlTraceMethodApply) getMethodApply((IUmlMessage) m);
      IOmlTraceDefinition vdm_rest = (IOmlTraceDefinition) (IOmlTraceDefinition) getTraceDefinition(msgs, fg, (IUmlInteractionOperand) io);
      Vector tmpVal_13 = null;
      if (new Boolean(!UTIL.equals(vdm_rest, null)).booleanValue()) {

        tmpVal_13 = new Vector();
        tmpVal_13.add(new OmlTraceDefinitionItem(new Vector(), mapp, null));
        tmpVal_13.add(vdm_rest);
      }
      else {

        tmpVal_13 = new Vector();
        tmpVal_13.add(new OmlTraceDefinitionItem(new Vector(), mapp, null));
      }
      Vector defs = null;
      defs = tmpVal_13;
      varRes_5 = (OmlTraceChoiceDefinition) new OmlTraceChoiceDefinition(defs);
    }
    return (IOmlTraceDefinition) varRes_5;
  }
// ***** VDMTOOLS END Name=getAltDef#4|Vector|IUmlMessage|HashSet|IUmlInteractionOperand


// ***** VDMTOOLS START Name=getMethodApply#1|IUmlMessage KEEP=NO
  private IOmlTraceMethodApply getMethodApply (final IUmlMessage message) throws CGException {

    OmlTraceMethodApply varRes_2 = null;
    {

      String methodName = null;
      IUmlOperation obj_5 = null;
      IUmlCallEvent obj_6 = null;
      IUmlMos obj_7 = null;
      obj_7 = (IUmlMos) message.getSendReceive();
      obj_6 = (IUmlCallEvent) obj_7.getEvent();
      obj_5 = (IUmlOperation) obj_6.getOperation();
      methodName = obj_5.getName();
      String variableName = null;
      IUmlLifeLine obj_9 = null;
      IUmlMos obj_10 = null;
      obj_10 = (IUmlMos) message.getSendReceive();
      obj_9 = (IUmlLifeLine) obj_10.getCovered();
      variableName = obj_9.getName();
      Vector args = new Vector();
      varRes_2 = (OmlTraceMethodApply) new OmlTraceMethodApply(variableName, methodName, args);
    }
    return (IOmlTraceMethodApply) varRes_2;
  }
// ***** VDMTOOLS END Name=getMethodApply#1|IUmlMessage


// ***** VDMTOOLS START Name=getOperand#2|IUmlMessage|HashSet KEEP=NO
  private IUmlInteractionOperand getOperand (final IUmlMessage m, final HashSet fragments) throws CGException {

    IUmlInteractionOperand varRes_3 = null;
    {

      HashSet tmpVal_5 = new HashSet();
      HashSet res_s_6 = new HashSet();
      {

        Vector e_set_18 = null;
        Vector unArg_19 = null;
        HashSet par_20 = new HashSet();
        HashSet res_s_21 = new HashSet();
        {

          IUmlCombinedFragment f = null;
          {
            for (Iterator enm_28 = fragments.iterator(); enm_28.hasNext(); ) {

              IUmlCombinedFragment elem_27 = (IUmlCombinedFragment) enm_28.next();
              f = (IUmlCombinedFragment) elem_27;
              if (new Boolean(f instanceof IUmlCombinedFragment).booleanValue()) {

                Vector res_s_22 = null;
                res_s_22 = f.getOperand();
                res_s_21.add(res_s_22);
              }
            }
          }
        }
        par_20 = res_s_21;
        unArg_19 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_20));
        Vector rdcseq_29 = new Vector();
        for (Iterator enm_32 = unArg_19.iterator(); enm_32.hasNext(); ) {

          Vector e_30 = (Vector) UTIL.ConvertToList(enm_32.next());
          rdcseq_29.addAll(e_30);
        }
        e_set_18 = rdcseq_29;
        IUmlInteractionOperand io = null;
        {
          for (Iterator enm_34 = e_set_18.iterator(); enm_34.hasNext(); ) {

            IUmlInteractionOperand elem_33 = (IUmlInteractionOperand) enm_34.next();
            io = (IUmlInteractionOperand) elem_33;
            Boolean pred_8 = null;
            boolean tmpQuant_9 = false;
            {

              HashSet e_set_14 = new HashSet();
              e_set_14 = io.getCovered();
              IUmlMos mos = null;
              {
                for (Iterator enm_16 = e_set_14.iterator(); enm_16.hasNext() && !tmpQuant_9; ) {

                  IUmlMos elem_15 = (IUmlMos) enm_16.next();
                  mos = (IUmlMos) elem_15;
                  Boolean pred_10 = null;
                  IUmlMos var2_12 = null;
                  var2_12 = (IUmlMos) m.getSendEvent();
                  pred_10 = new Boolean(UTIL.equals(mos, var2_12));
                  if (pred_10.booleanValue()) 
                    tmpQuant_9 = true;
                }
              }
            }
            pred_8 = new Boolean(tmpQuant_9);
            if (pred_8.booleanValue()) {
              res_s_6.add(io);
            }
          }
        }
      }
      tmpVal_5 = res_s_6;
      HashSet ops = new HashSet();
      ops = tmpVal_5;
      if (new Boolean((new Long(ops.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

        HashSet tmpSet_40 = new HashSet();
        tmpSet_40 = ops;
        IUmlInteractionOperand p = null;
        boolean succ_42 = false;
        for (Iterator enm_44 = tmpSet_40.iterator(); enm_44.hasNext() && !succ_42; ) {

          IUmlInteractionOperand tmpElem_43 = (IUmlInteractionOperand) enm_44.next();
          succ_42 = true;
          p = (IUmlInteractionOperand) tmpElem_43;
        }
        if (!succ_42) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        varRes_3 = (IUmlInteractionOperand) p;
      }
      else 
        varRes_3 = null;
    }
    return (IUmlInteractionOperand) varRes_3;
  }
// ***** VDMTOOLS END Name=getOperand#2|IUmlMessage|HashSet


// ***** VDMTOOLS START Name=getCfIoKind#2|HashSet|IUmlInteractionOperand KEEP=NO
  private IUmlInteractionOperatorKind getCfIoKind (final HashSet fms, final IUmlInteractionOperand io) throws CGException {

    IUmlInteractionOperatorKind varRes_3 = null;
    {

      HashSet tmpSet_4 = new HashSet();
      HashSet res_s_8 = new HashSet();
      {

        IUmlCombinedFragment f = null;
        {
          for (Iterator enm_25 = fms.iterator(); enm_25.hasNext(); ) {

            IUmlCombinedFragment elem_24 = (IUmlCombinedFragment) enm_25.next();
            f = (IUmlCombinedFragment) elem_24;
            Boolean pred_10 = null;
            {
              if ((pred_10 = new Boolean(f instanceof IUmlCombinedFragment)).booleanValue()) {

                Boolean var2_13 = null;
                boolean tmpQuant_14 = false;
                {

                  Vector e_set_19 = null;
                  e_set_19 = f.getOperand();
                  IUmlInteractionOperand iop = null;
                  {
                    for (Iterator enm_21 = e_set_19.iterator(); enm_21.hasNext() && !tmpQuant_14; ) {

                      IUmlInteractionOperand elem_20 = (IUmlInteractionOperand) enm_21.next();
                      iop = (IUmlInteractionOperand) elem_20;
                      if (new Boolean(UTIL.equals(iop, io)).booleanValue()) 
                        tmpQuant_14 = true;
                    }
                  }
                }
                var2_13 = new Boolean(tmpQuant_14);
                pred_10 = var2_13;
              }
            }
            if (pred_10.booleanValue()) {
              res_s_8.add(f);
            }
          }
        }
      }
      tmpSet_4 = res_s_8;
      IUmlCombinedFragment cf = null;
      boolean succ_6 = false;
      for (Iterator enm_26 = tmpSet_4.iterator(); enm_26.hasNext() && !succ_6; ) {

        IUmlCombinedFragment tmpElem_7 = (IUmlCombinedFragment) enm_26.next();
        succ_6 = true;
        cf = (IUmlCombinedFragment) tmpElem_7;
      }
      if (!succ_6) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      varRes_3 = (IUmlInteractionOperatorKind) cf.getInteractionOperator();
    }
    return (IUmlInteractionOperatorKind) varRes_3;
  }
// ***** VDMTOOLS END Name=getCfIoKind#2|HashSet|IUmlInteractionOperand

}
;
