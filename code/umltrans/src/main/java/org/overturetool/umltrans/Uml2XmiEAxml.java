//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Vector;

import jp.co.csk.vdm.toolbox.VDM.CGException;
import jp.co.csk.vdm.toolbox.VDM.Record;
import jp.co.csk.vdm.toolbox.VDM.UTIL;



public class Uml2XmiEAxml extends Uml2Xmi {


// ***** VDMTOOLS START Name=QualifierInfo KEEP=NO
  public static class QualifierInfo implements Record {

    public String AssociationId;

    public String ClassId;

    public String QualifierName;


    public QualifierInfo () {}


    public QualifierInfo (String p1, String p2, String p3) {

      AssociationId = p1;
      ClassId = p2;
      QualifierName = p3;
    }


    public Object clone () {
      return new QualifierInfo(AssociationId, ClassId, QualifierName);
    }


    public String toString () {
      return "mk_Uml2XmiEAxml`QualifierInfo(" + UTIL.toString(AssociationId) + "," + UTIL.toString(ClassId) + "," + UTIL.toString(QualifierName) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierInfo)) 
        return false;
      else {

        QualifierInfo temp = (QualifierInfo) obj;
        return UTIL.equals(AssociationId, temp.AssociationId) && UTIL.equals(ClassId, temp.ClassId) && UTIL.equals(QualifierName, temp.QualifierName);
      }
    }


    public int hashCode () {
      return (AssociationId == null ? 0 : AssociationId.hashCode()) + (ClassId == null ? 0 : ClassId.hashCode()) + (QualifierName == null ? 0 : QualifierName.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierInfo
;


// ***** VDMTOOLS START Name=QualifierEnd KEEP=NO
  private static class QualifierEnd implements Record {

    public IUmlProperty Property;

    public Boolean IsNavigable;


    public QualifierEnd () {}


    public QualifierEnd (IUmlProperty p1, Boolean p2) {

      Property = p1;
      IsNavigable = p2;
    }


    public Object clone () {
      return new QualifierEnd((IUmlProperty) UTIL.clone(Property), IsNavigable);
    }


    public String toString () {
      return "mk_Uml2XmiEAxml`QualifierEnd(" + UTIL.toString(Property) + "," + UTIL.toString(IsNavigable) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierEnd)) 
        return false;
      else {

        QualifierEnd temp = (QualifierEnd) obj;
        return UTIL.equals(Property, temp.Property) && UTIL.equals(IsNavigable, temp.IsNavigable);
      }
    }


    public int hashCode () {
      return (Property == null ? 0 : Property.hashCode()) + (IsNavigable == null ? 0 : IsNavigable.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierEnd
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=id KEEP=NO
  protected Integer id = null;
// ***** VDMTOOLS END Name=id

// ***** VDMTOOLS START Name=packageId KEEP=NO
  protected Integer packageId = null;
// ***** VDMTOOLS END Name=packageId

// ***** VDMTOOLS START Name=classes KEEP=NO
  protected HashMap classes = new HashMap();
// ***** VDMTOOLS END Name=classes

// ***** VDMTOOLS START Name=primitiveTypes KEEP=NO
  protected HashMap primitiveTypes = new HashMap();
// ***** VDMTOOLS END Name=primitiveTypes

// ***** VDMTOOLS START Name=associationIdMap KEEP=NO
  protected HashMap associationIdMap = new HashMap();
// ***** VDMTOOLS END Name=associationIdMap

// ***** VDMTOOLS START Name=oe KEEP=NO
  protected String oe = null;
// ***** VDMTOOLS END Name=oe

// ***** VDMTOOLS START Name=extensionTemplateClasses KEEP=NO
  protected HashSet extensionTemplateClasses = new HashSet();
// ***** VDMTOOLS END Name=extensionTemplateClasses

// ***** VDMTOOLS START Name=extensionConstrainElem KEEP=NO
  protected HashSet extensionConstrainElem = new HashSet();
// ***** VDMTOOLS END Name=extensionConstrainElem

// ***** VDMTOOLS START Name=extensionConectorNonNavigable KEEP=NO
  protected HashSet extensionConectorNonNavigable = new HashSet();
// ***** VDMTOOLS END Name=extensionConectorNonNavigable

// ***** VDMTOOLS START Name=extensionConectorQualifier KEEP=NO
  protected HashSet extensionConectorQualifier = new HashSet();
// ***** VDMTOOLS END Name=extensionConectorQualifier

// ***** VDMTOOLS START Name=ID_uTAG KEEP=NO
  private static final String ID_uTAG = new String("xmi:id");
// ***** VDMTOOLS END Name=ID_uTAG

// ***** VDMTOOLS START Name=ownedMemberElementName KEEP=NO
  private static final String ownedMemberElementName = new String("ownedMember");
// ***** VDMTOOLS END Name=ownedMemberElementName


// ***** VDMTOOLS START Name=vdm_init_Uml2XmiEAxml KEEP=NO
  private void vdm_init_Uml2XmiEAxml () throws CGException {
    try {

      id = new Integer(1);
      packageId = new Integer(0);
      classes = new HashMap();
      primitiveTypes = new HashMap();
      associationIdMap = new HashMap();
      oe = new String("");
      extensionTemplateClasses = new HashSet();
      extensionConstrainElem = new HashSet();
      extensionConectorNonNavigable = new HashSet();
      extensionConectorQualifier = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Uml2XmiEAxml


// ***** VDMTOOLS START Name=Uml2XmiEAxml KEEP=NO
  public Uml2XmiEAxml () throws CGException {
    vdm_init_Uml2XmiEAxml();
  }
// ***** VDMTOOLS END Name=Uml2XmiEAxml


// ***** VDMTOOLS START Name=Save#2|String|IUmlModel KEEP=NO
  public void Save (final String fileName, final IUmlModel model) throws CGException {

    XmlFileOutputVisitor xmlVisitor = new XmlFileOutputVisitor();
    CreateXmlFile((IUmlModel) model);
    Util.Clear();
    xmlVisitor.VisitXmlDocument((XmlDocument) doc);
    Util.SaveBuf(fileName);
  }
// ***** VDMTOOLS END Name=Save#2|String|IUmlModel


// ***** VDMTOOLS START Name=CreateXmlFile#1|IUmlModel KEEP=NO
  protected void CreateXmlFile (final IUmlModel m) throws CGException {

    oe = UTIL.ConvertToString(UTIL.clone(ownedMemberElementName));
    doc.StartE(new String("xmi:XMI"));
    doc.StartA(new String("xmi:version"), new String("2.1"));
    doc.StartA(new String("xmlns:uml"), new String("http://schema.omg.org/spec/UML/2.0"));
    doc.StartA(new String("xmlns:xmi"), new String("http://schema.omg.org/spec/XMI/2.1"));
    doc.StartE(new String("xmi:Documentation"));
    doc.StartA(new String("xmi:Exporter"), new String("Enterprise Architect"));
    doc.StartA(new String("xmi:ExporterVersion"), new String("6.5"));
    doc.StopE(new String("xmi:Documentation"));
    doc.StartE(new String("uml:Model"));
    String par_28 = null;
    par_28 = m.getName();
    doc.StartA(new String("name"), par_28);
    doc.StartA(ID_uTAG, GetNextId());
    doc.StartE(oe);
    doc.StartA(new String("xmi:type"), new String("uml:Package"));
    doc.StartA(ID_uTAG, GetId(packageId));
    doc.StartA(new String("name"), new String("VDM Generated model"));
    AddStdTypes();
    HashSet tmpArg_v_46 = new HashSet();
    tmpArg_v_46 = m.getDefinitions();
    GenerateClassIds(tmpArg_v_46);
    HashSet tmpArg_v_48 = new HashSet();
    HashSet res_s_49 = new HashSet();
    {

      HashSet e_set_54 = new HashSet();
      e_set_54 = m.getDefinitions();
      IUmlModelElement d = null;
      {
        for (Iterator enm_56 = e_set_54.iterator(); enm_56.hasNext(); ) {

          IUmlModelElement elem_55 = (IUmlModelElement) enm_56.next();
          d = (IUmlModelElement) elem_55;
          if (new Boolean(d instanceof IUmlClass).booleanValue()) {
            res_s_49.add(d);
          }
        }
      }
    }
    tmpArg_v_48 = res_s_49;
    AddDefinitions(tmpArg_v_48);
    HashSet tmpArg_v_58 = new HashSet();
    HashSet res_s_59 = new HashSet();
    {

      HashSet e_set_64 = new HashSet();
      e_set_64 = m.getDefinitions();
      IUmlModelElement d = null;
      {
        for (Iterator enm_66 = e_set_64.iterator(); enm_66.hasNext(); ) {

          IUmlModelElement elem_65 = (IUmlModelElement) enm_66.next();
          d = (IUmlModelElement) elem_65;
          if (new Boolean(d instanceof IUmlAssociation).booleanValue()) {
            res_s_59.add(d);
          }
        }
      }
    }
    tmpArg_v_58 = res_s_59;
    AddDefinitions(tmpArg_v_58);
    HashSet tmpArg_v_68 = new HashSet();
    HashSet res_s_69 = new HashSet();
    {

      HashSet e_set_74 = new HashSet();
      e_set_74 = m.getDefinitions();
      IUmlModelElement d = null;
      {
        for (Iterator enm_76 = e_set_74.iterator(); enm_76.hasNext(); ) {

          IUmlModelElement elem_75 = (IUmlModelElement) enm_76.next();
          d = (IUmlModelElement) elem_75;
          if (new Boolean(d instanceof IUmlConstraint).booleanValue()) {
            res_s_69.add(d);
          }
        }
      }
    }
    tmpArg_v_68 = res_s_69;
    AddDefinitions(tmpArg_v_68);
    doc.StopE(oe);
    doc.StopE(new String("uml:Model"));
    AddExstention();
    doc.StopE(new String("xmi:XMI"));
  }
// ***** VDMTOOLS END Name=CreateXmlFile#1|IUmlModel


// ***** VDMTOOLS START Name=AddDefinitions#1|HashSet KEEP=NO
  private void AddDefinitions (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_33 = iset_2.iterator(); enm_33.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_33.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlConstraint))) 
            succ_18 = false;
          if (succ_18) 
            AddConstraint((IUmlConstraint) c);
          else {

            succ_18 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlAssociation))) 
              succ_18 = false;
            if (succ_18) 
              AddAssociation((IUmlAssociation) c);
            else {

              succ_18 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlClass))) 
                succ_18 = false;
              if (succ_18) 
                AddClass((IUmlClass) c);
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=AddDefinitions#1|HashSet


// ***** VDMTOOLS START Name=AddConstraint#1|IUmlConstraint KEEP=NO
  private void AddConstraint (final IUmlConstraint c) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("xmi:type"), new String("uml:Constraint"));
    {

      String constrainId = GetNextId();
      {

        extensionConstrainElem.add(constrainId);
        doc.StartA(ID_uTAG, constrainId);
      }
    }
    {

      HashSet iset_14 = new HashSet();
      iset_14 = c.getConstraintElements();
      String a = null;
      for (Iterator enm_27 = iset_14.iterator(); enm_27.hasNext(); ) {

        String elem_15 = UTIL.ConvertToString(enm_27.next());
        a = elem_15;
        {

          doc.StartE(new String("constrainedElement"));
          doc.StartA(new String("xmi:idref"), UTIL.ConvertToString(associationIdMap.get(a)));
          doc.StopE(new String("constrainedElement"));
        }
      }
    }
    doc.StartE(new String("specification"));
    doc.StartA(new String("xmi:type"), new String("uml:OpaqueExpression"));
    doc.StartA(ID_uTAG, GetNextId());
    doc.StopE(new String("specification"));
    doc.StartE(new String("body"));
    String par_41 = null;
    par_41 = c.getSpecification();
    doc.StartD(par_41);
    doc.StopE(new String("body"));
    doc.StopE(new String("specification"));
    doc.StopE(oe);
  }
// ***** VDMTOOLS END Name=AddConstraint#1|IUmlConstraint


// ***** VDMTOOLS START Name=AddExstention KEEP=NO
  private void AddExstention () throws CGException {

    doc.StartE(new String("xmi:Extension"));
    doc.StartA(new String("extender"), new String("Enterprise Architect"));
    doc.StartA(new String("extenderID"), new String("6.5"));
    doc.StartE(new String("elements"));
    {

      String c = null;
      for (Iterator enm_43 = extensionTemplateClasses.iterator(); enm_43.hasNext(); ) {

        String elem_12 = UTIL.ConvertToString(enm_43.next());
        c = elem_12;
        {

          doc.StartE(new String("element"));
          doc.StartA(new String("xmi:idref"), UTIL.ConvertToString(classes.get(c)));
          doc.StartA(new String("xmi:type"), new String("uml:Class"));
          doc.StartA(new String("name"), c);
          doc.StartA(new String("scope"), new String("public"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("sType"), new String("Class"));
          doc.StartA(new String("nType"), new String("1"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("element"));
        }
      }
    }
    {

      String constrainId = null;
      for (Iterator enm_80 = extensionConstrainElem.iterator(); enm_80.hasNext(); ) {

        String elem_45 = UTIL.ConvertToString(enm_80.next());
        constrainId = elem_45;
        {

          doc.StartE(new String("element"));
          doc.StartA(new String("xmi:idref"), constrainId);
          doc.StartA(new String("xmi:type"), new String("uml:Constraint"));
          doc.StartA(new String("scope"), new String("public"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("documentation"), new String("xor"));
          doc.StartA(new String("isSpecification"), new String("false"));
          doc.StartA(new String("sType"), new String("Constraint"));
          doc.StartA(new String("nType"), new String("2"));
          doc.StartA(new String("scope"), new String("public"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("element"));
        }
      }
    }
    doc.StopE(new String("elements"));
    doc.StartE(new String("diagrams"));
    {

      String constrainId = null;
      for (Iterator enm_143 = extensionConstrainElem.iterator(); enm_143.hasNext(); ) {

        String elem_86 = UTIL.ConvertToString(enm_143.next());
        constrainId = elem_86;
        {

          doc.StartE(new String("diagram"));
          doc.StartA(ID_uTAG, GetNextId());
          doc.StartE(new String("model"));
          doc.StartA(new String("package"), GetId(packageId));
          doc.StartA(new String("localID"), new String("24"));
          doc.StartA(new String("owner"), GetId(packageId));
          doc.StopE(new String("model"));
          doc.StartE(new String("properties"));
          String par_113 = null;
          par_113 = new String("Constrain diagram ").concat(constrainId);
          doc.StartA(new String("name"), par_113);
          doc.StartA(new String("type"), new String("Logical"));
          doc.StopE(new String("properties"));
          doc.StartE(new String("elements"));
          doc.StartE(new String("element"));
          doc.StartA(new String("geometry"), new String("Left=100;Top=100;Right=100;Bottom=100;"));
          doc.StartA(new String("subject"), constrainId);
          doc.StartA(new String("seqno"), new String("1"));
          doc.StartA(new String("style"), new String("DUID=AE8AC20D;"));
          doc.StopE(new String("element"));
          doc.StopE(new String("elements"));
          doc.StopE(new String("diagram"));
        }
      }
    }
    doc.StopE(new String("diagrams"));
    doc.StartE(new String("connectors"));
    {

      String associationEndId = null;
      for (Iterator enm_169 = extensionConectorNonNavigable.iterator(); enm_169.hasNext(); ) {

        String elem_149 = UTIL.ConvertToString(enm_169.next());
        associationEndId = elem_149;
        {

          doc.StartE(new String("connector"));
          doc.StartA(new String("xmi:idref"), associationEndId);
          doc.StartE(new String("properties"));
          doc.StartA(new String("ea_type"), new String("Association"));
          doc.StartA(new String("direction"), new String("Unspecified"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("connector"));
        }
      }
    }
    {

      QualifierInfo qualifier = null;
      for (Iterator enm_198 = extensionConectorQualifier.iterator(); enm_198.hasNext(); ) {

        QualifierInfo elem_171 = (QualifierInfo) enm_198.next();
        qualifier = elem_171;
        {

          doc.StartE(new String("connector"));
          String par_178 = null;
          par_178 = (qualifier).AssociationId;
          doc.StartA(new String("xmi:idref"), par_178);
          doc.StartE(new String("target"));
          String par_184 = null;
          par_184 = (qualifier).ClassId;
          doc.StartA(new String("xmi:idref"), par_184);
          doc.StartE(new String("constraints"));
          String par_190 = null;
          par_190 = (qualifier).QualifierName;
          doc.StartA(new String("qualifier"), par_190);
          doc.StopE(new String("constraints"));
          doc.StopE(new String("target"));
          doc.StopE(new String("connector"));
        }
      }
    }
    doc.StopE(new String("connectors"));
    doc.StopE(new String("xmi:Extension"));
  }
// ***** VDMTOOLS END Name=AddExstention


// ***** VDMTOOLS START Name=GenerateClassIds#1|HashSet KEEP=NO
  protected void GenerateClassIds (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_28 = iset_2.iterator(); enm_28.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_28.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlClass))) 
            succ_18 = false;
          if (succ_18) {

            IUmlModelElement tmpVal_24 = null;
            tmpVal_24 = (IUmlModelElement) c;
            IUmlClass cl = null;
            cl = (IUmlClass) tmpVal_24;
            String md_26 = null;
            md_26 = cl.getName();
            classes.put(md_26, GetNextId());
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=GenerateClassIds#1|HashSet


// ***** VDMTOOLS START Name=AddClass#1|IUmlClass KEEP=NO
  protected void AddClass (final IUmlClass cl) throws CGException {

    doc.StartE(oe);
    String par_6 = null;
    Boolean par_7 = null;
    par_7 = cl.getIsAbstract();
    par_6 = UTIL.ConvertToString(Util.ToStringBool(par_7));
    doc.StartA(new String("isAbstract"), par_6);
    String par_10 = null;
    Boolean par_11 = null;
    par_11 = cl.getIsActive();
    par_10 = UTIL.ConvertToString(Util.ToStringBool(par_11));
    doc.StartA(new String("isActive"), par_10);
    doc.StartA(new String("isLeaf"), new String("false"));
    String par_17 = null;
    par_17 = cl.getName();
    doc.StartA(new String("name"), par_17);
    doc.StartA(new String("visibility"), new String("public"));
    String par_23 = null;
    String tmppar_25 = null;
    tmppar_25 = cl.getName();
    par_23 = UTIL.ConvertToString(classes.get(tmppar_25));
    doc.StartA(ID_uTAG, par_23);
    doc.StartA(new String("xmi:type"), new String("uml:Class"));
    HashSet tmpArg_v_30 = new HashSet();
    HashSet unArg_31 = new HashSet();
    HashSet res_s_32 = new HashSet();
    {

      HashSet e_set_39 = new HashSet();
      e_set_39 = cl.getClassBody();
      IUmlDefinitionBlock df = null;
      {
        for (Iterator enm_41 = e_set_39.iterator(); enm_41.hasNext(); ) {

          IUmlDefinitionBlock elem_40 = (IUmlDefinitionBlock) enm_41.next();
          df = (IUmlDefinitionBlock) elem_40;
          if (new Boolean(df instanceof IUmlOwnedPropeties).booleanValue()) {

            HashSet res_s_33 = new HashSet();
            {

              IUmlOwnedPropeties d = (IUmlOwnedPropeties) df;
              res_s_33 = d.getPropetityList();
            }
            res_s_32.add(res_s_33);
          }
        }
      }
    }
    unArg_31 = res_s_32;
    HashSet rduset_42 = new HashSet();
    for (Iterator enm_44 = unArg_31.iterator(); enm_44.hasNext(); ) {

      HashSet e_43 = (HashSet) enm_44.next();
      rduset_42.addAll(e_43);
    }
    tmpArg_v_30 = rduset_42;
    AddPropeties(tmpArg_v_30);
    HashSet tmpArg_v_46 = new HashSet();
    HashSet unArg_47 = new HashSet();
    HashSet res_s_48 = new HashSet();
    {

      HashSet e_set_55 = new HashSet();
      e_set_55 = cl.getClassBody();
      IUmlDefinitionBlock df = null;
      {
        for (Iterator enm_57 = e_set_55.iterator(); enm_57.hasNext(); ) {

          IUmlDefinitionBlock elem_56 = (IUmlDefinitionBlock) enm_57.next();
          df = (IUmlDefinitionBlock) elem_56;
          if (new Boolean(df instanceof IUmlOwnedOperations).booleanValue()) {

            HashSet res_s_49 = new HashSet();
            {

              IUmlOwnedOperations d = (IUmlOwnedOperations) df;
              res_s_49 = d.getOperationList();
            }
            res_s_48.add(res_s_49);
          }
        }
      }
    }
    unArg_47 = res_s_48;
    HashSet rduset_58 = new HashSet();
    for (Iterator enm_60 = unArg_47.iterator(); enm_60.hasNext(); ) {

      HashSet e_59 = (HashSet) enm_60.next();
      rduset_58.addAll(e_59);
    }
    tmpArg_v_46 = rduset_58;
    AddOperstions(tmpArg_v_46);
    Boolean cond_61 = null;
    cond_61 = cl.hasSupers();
    if (cond_61.booleanValue()) {

      IUmlInheritanceClause tmpArg_v_63 = null;
      tmpArg_v_63 = (IUmlInheritanceClause) cl.getSupers();
      AddGeneralization((IUmlInheritanceClause) tmpArg_v_63);
    }
    Boolean cond_64 = null;
    cond_64 = cl.hasTemplatesignature();
    if (cond_64.booleanValue()) {

      IUmlTemplateSignature tmpArg_v_66 = null;
      tmpArg_v_66 = (IUmlTemplateSignature) cl.getTemplatesignature();
      AddTemplates((IUmlTemplateSignature) tmpArg_v_66);
      String elem_68 = null;
      elem_68 = cl.getName();
      extensionTemplateClasses.add(elem_68);
    }
    doc.StopE(oe);
  }
// ***** VDMTOOLS END Name=AddClass#1|IUmlClass


// ***** VDMTOOLS START Name=AddPropeties#1|HashSet KEEP=NO
  protected void AddPropeties (final HashSet propeties) throws CGException {

    IUmlProperty prop = null;
    for (Iterator enm_61 = propeties.iterator(); enm_61.hasNext(); ) {

      IUmlProperty elem_3 = (IUmlProperty) enm_61.next();
      prop = (IUmlProperty) elem_3;
      {

        doc.StartE(new String("ownedAttribute"));
        String par_10 = null;
        par_10 = prop.getName();
        doc.StartA(new String("name"), par_10);
        doc.StartA(new String("ownerScope"), new String("instance"));
        Boolean cond_14 = null;
        cond_14 = prop.hasIsStatic();
        if (cond_14.booleanValue()) {

          String par_17 = null;
          Boolean par_18 = null;
          par_18 = prop.getIsStatic();
          par_17 = UTIL.ConvertToString(Util.ToStringBool(par_18));
          doc.StartA(new String("isStatic"), par_17);
        }
        String par_21 = null;
        IUmlVisibilityKind par_22 = null;
        par_22 = (IUmlVisibilityKind) prop.getVisibility();
        par_21 = GetVisibilityKind((IUmlVisibilityKind) par_22);
        doc.StartA(new String("visibility"), par_21);
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("xmi:type"), new String("uml:Property"));
        Boolean cond_29 = null;
        cond_29 = prop.hasMultiplicity();
        if (cond_29.booleanValue()) {

          String par_32 = null;
          Boolean par_33 = null;
          IUmlMultiplicityElement obj_34 = null;
          obj_34 = (IUmlMultiplicityElement) prop.getMultiplicity();
          par_33 = obj_34.getIsOrdered();
          par_32 = UTIL.ConvertToString(Util.ToStringBool(par_33));
          doc.StartA(new String("isOrdered"), par_32);
          IUmlMultiplicityElement tmpArg_v_36 = null;
          tmpArg_v_36 = (IUmlMultiplicityElement) prop.getMultiplicity();
          AddAssociationMp((IUmlMultiplicityElement) tmpArg_v_36);
        }
        Boolean cond_37 = null;
        cond_37 = prop.hasDefault();
        if (cond_37.booleanValue()) {

          doc.StartE(new String("defaultValue"));
          doc.StartA(new String("xmi:type"), new String("uml:LiteralString"));
          doc.StartA(ID_uTAG, GetNextId());
          String par_48 = null;
          par_48 = prop.getDefault();
          doc.StartA(new String("value"), par_48);
          doc.StopE(new String("defaultValue"));
        }
        doc.StartE(new String("type"));
        String par_55 = null;
        IUmlType par_56 = null;
        par_56 = (IUmlType) prop.getType();
        par_55 = GetUmlPrimitiveTypeId((IUmlType) par_56);
        doc.StartA(new String("xmi:idref"), par_55);
        doc.StopE(new String("type"));
        doc.StopE(new String("ownedAttribute"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddPropeties#1|HashSet


// ***** VDMTOOLS START Name=AddOperstions#1|HashSet KEEP=NO
  protected void AddOperstions (final HashSet ops) throws CGException {

    IUmlOperation op = null;
    for (Iterator enm_35 = ops.iterator(); enm_35.hasNext(); ) {

      IUmlOperation elem_3 = (IUmlOperation) enm_35.next();
      op = (IUmlOperation) elem_3;
      {

        doc.StartE(new String("ownedOperation"));
        doc.StartA(new String("isAbstract"), new String("false"));
        doc.StartA(new String("isLeaf"), new String("false"));
        doc.StartA(new String("isQuery"), new String("false"));
        String par_19 = null;
        par_19 = op.getName();
        doc.StartA(new String("name"), par_19);
        doc.StartA(new String("ownerScope"), new String("instance"));
        String par_25 = null;
        IUmlVisibilityKind par_26 = null;
        par_26 = (IUmlVisibilityKind) op.getVisibility();
        par_25 = GetVisibilityKind((IUmlVisibilityKind) par_26);
        doc.StartA(new String("visibility"), par_25);
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("xmi:type"), new String("uml:Operation"));
        doc.StopE(new String("ownedOperation"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddOperstions#1|HashSet


// ***** VDMTOOLS START Name=AddAssociation#1|IUmlAssociation KEEP=NO
  protected void AddAssociation (final IUmlAssociation association) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("isAbstract"), new String("false"));
    doc.StartA(new String("isDerived"), new String("false"));
    doc.StartA(new String("isLeaf"), new String("false"));
    doc.StartA(new String("name"), new String(""));
    {

      String tmpVal_17 = null;
      tmpVal_17 = GetNextId();
      String associationId = null;
      associationId = tmpVal_17;
      {

        doc.StartA(ID_uTAG, associationId);
        String md_22 = null;
        md_22 = association.getId();
        associationIdMap.put(md_22, associationId);
        doc.StartA(new String("xmi:type"), new String("uml:Association"));
        {

          Vector unNamedProps = null;
          HashSet par_29 = new HashSet();
          HashSet var1_30 = new HashSet();
          HashSet res_s_31 = new HashSet();
          {

            HashSet e_set_40 = new HashSet();
            e_set_40 = association.getOwnedEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_42 = e_set_40.iterator(); enm_42.hasNext(); ) {

                IUmlProperty elem_41 = (IUmlProperty) enm_42.next();
                p = (IUmlProperty) elem_41;
                Boolean pred_35 = null;
                Integer var1_36 = null;
                String unArg_37 = null;
                unArg_37 = p.getName();
                var1_36 = new Integer(unArg_37.length());
                pred_35 = new Boolean(var1_36.intValue() == new Integer(0).intValue());
                if (pred_35.booleanValue()) {

                  QualifierEnd res_s_32 = null;
                  res_s_32 = new QualifierEnd((IUmlProperty) p, new Boolean(false));
                  res_s_31.add(res_s_32);
                }
              }
            }
          }
          var1_30 = res_s_31;
          HashSet var2_43 = new HashSet();
          HashSet res_s_44 = new HashSet();
          {

            HashSet e_set_53 = new HashSet();
            e_set_53 = association.getOwnedNavivableEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_55 = e_set_53.iterator(); enm_55.hasNext(); ) {

                IUmlProperty elem_54 = (IUmlProperty) enm_55.next();
                p = (IUmlProperty) elem_54;
                Boolean pred_48 = null;
                Integer var1_49 = null;
                String unArg_50 = null;
                unArg_50 = p.getName();
                var1_49 = new Integer(unArg_50.length());
                pred_48 = new Boolean(var1_49.intValue() == new Integer(0).intValue());
                if (pred_48.booleanValue()) {

                  QualifierEnd res_s_45 = null;
                  res_s_45 = new QualifierEnd((IUmlProperty) p, new Boolean(true));
                  res_s_44.add(res_s_45);
                }
              }
            }
          }
          var2_43 = res_s_44;
          par_29 = (HashSet) var1_30.clone();
          par_29.addAll(var2_43);
          unNamedProps = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_29));
          Vector namedProps = null;
          HashSet par_57 = new HashSet();
          HashSet var1_58 = new HashSet();
          HashSet res_s_59 = new HashSet();
          {

            HashSet e_set_68 = new HashSet();
            e_set_68 = association.getOwnedEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_70 = e_set_68.iterator(); enm_70.hasNext(); ) {

                IUmlProperty elem_69 = (IUmlProperty) enm_70.next();
                p = (IUmlProperty) elem_69;
                Boolean pred_63 = null;
                Integer var1_64 = null;
                String unArg_65 = null;
                unArg_65 = p.getName();
                var1_64 = new Integer(unArg_65.length());
                pred_63 = new Boolean((var1_64.intValue()) > (new Integer(0).intValue()));
                if (pred_63.booleanValue()) {

                  QualifierEnd res_s_60 = null;
                  res_s_60 = new QualifierEnd((IUmlProperty) p, new Boolean(false));
                  res_s_59.add(res_s_60);
                }
              }
            }
          }
          var1_58 = res_s_59;
          HashSet var2_71 = new HashSet();
          HashSet res_s_72 = new HashSet();
          {

            HashSet e_set_81 = new HashSet();
            e_set_81 = association.getOwnedNavivableEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_83 = e_set_81.iterator(); enm_83.hasNext(); ) {

                IUmlProperty elem_82 = (IUmlProperty) enm_83.next();
                p = (IUmlProperty) elem_82;
                Boolean pred_76 = null;
                Integer var1_77 = null;
                String unArg_78 = null;
                unArg_78 = p.getName();
                var1_77 = new Integer(unArg_78.length());
                pred_76 = new Boolean((var1_77.intValue()) > (new Integer(0).intValue()));
                if (pred_76.booleanValue()) {

                  QualifierEnd res_s_73 = null;
                  res_s_73 = new QualifierEnd((IUmlProperty) p, new Boolean(true));
                  res_s_72.add(res_s_73);
                }
              }
            }
          }
          var2_71 = res_s_72;
          par_57 = (HashSet) var1_58.clone();
          par_57.addAll(var2_71);
          namedProps = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_57));
          Vector tmpVal_84 = null;
          tmpVal_84 = (Vector) unNamedProps.clone();
          tmpVal_84.addAll(namedProps);
          Vector props = null;
          props = tmpVal_84;
          {

            HashSet iset_87 = new HashSet();
            HashSet riseq_96 = new HashSet();
            int max_97 = props.size();
            for (int i_98 = 1; i_98 <= max_97; i_98++) 
              riseq_96.add(new Integer(i_98));
            iset_87 = riseq_96;
            Integer i = null;
            for (Iterator enm_263 = iset_87.iterator(); enm_263.hasNext(); ) {

              Integer elem_88 = UTIL.NumberToInt(enm_263.next());
              i = elem_88;
              {

                QualifierEnd tmpVal_100 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= props.size())) 
                  tmpVal_100 = (QualifierEnd) props.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                QualifierEnd prop = null;
                prop = tmpVal_100;
                {

                  {

                    IUmlProperty p = null;
                    p = (IUmlProperty) (prop).Property;
                    String tmpArg_v_107 = null;
                    String var1_108 = null;
                    String var1_109 = null;
                    String var1_110 = null;
                    String var1_111 = null;
                    String var2_113 = null;
                    var2_113 = p.getName();
                    var1_111 = new String("\nXMI#").concat(var2_113);
                    var1_110 = var1_111.concat(new String("|"));
                    String var2_115 = null;
                    var2_115 = p.getOwnerClass();
                    var1_109 = var1_110.concat(var2_115);
                    var1_108 = var1_109.concat(new String("|"));
                    String var2_117 = null;
                    Boolean cond_119 = null;
                    cond_119 = p.hasQualifier();
                    if (cond_119.booleanValue()) {

                      Boolean cond_121 = null;
                      IUmlType obj_122 = null;
                      obj_122 = (IUmlType) p.getQualifier();
                      cond_121 = new Boolean(obj_122 instanceof IUmlIntegerType);
                      if (cond_121.booleanValue()) 
                        var2_117 = new String("int");
                      else 
                        var2_117 = new String("");
                    }
                    else 
                      var2_117 = new String("");
                    tmpArg_v_107 = var1_108.concat(var2_117);
                    Util.Print(tmpArg_v_107);
                  }
                  Boolean cond_123 = null;
                  IUmlProperty obj_124 = null;
                  obj_124 = (IUmlProperty) (prop).Property;
                  cond_123 = obj_124.hasQualifier();
                  if (cond_123.booleanValue()) {

                    QualifierInfo elem_127 = null;
                    String tmpVar_129 = null;
                    UmlClassNameType par_130 = null;
                    String arg_131 = null;
                    IUmlProperty obj_132 = null;
                    obj_132 = (IUmlProperty) (prop).Property;
                    arg_131 = obj_132.getOwnerClass();
                    par_130 = new UmlClassNameType(arg_131);
                    tmpVar_129 = GetTypeId((IUmlType) par_130);
                    String tmpVar_134 = null;
                    HashMap tmp_m_135 = new HashMap();
                    tmp_m_135 = new HashMap();
                    HashMap mapType_137 = primitiveTypes;
                    for (Iterator enm_141 = mapType_137.keySet().iterator(); enm_141.hasNext(); ) {

                      Object dom_142 = enm_141.next();
                      String id_d_139 = UTIL.ConvertToString(dom_142);
                      String id_r_138 = UTIL.ConvertToString(mapType_137.get(dom_142));
                      if (tmp_m_135.containsKey(id_r_138)) 
                        UTIL.RunTime("Run-Time Error:Map is not injective - \'inverse\' fails");
                      else 
                        tmp_m_135.put(id_r_138, id_d_139);
                    }
                    String tmppar_143 = null;
                    IUmlType par_144 = null;
                    IUmlProperty obj_145 = null;
                    obj_145 = (IUmlProperty) (prop).Property;
                    par_144 = (IUmlType) obj_145.getQualifier();
                    tmppar_143 = GetUmlPrimitiveTypeId((IUmlType) par_144);
                    tmpVar_134 = UTIL.ConvertToString(tmp_m_135.get(tmppar_143));
                    elem_127 = new QualifierInfo(associationId, tmpVar_129, tmpVar_134);
                    extensionConectorQualifier.add(elem_127);
                    String tmpArg_v_148 = null;
                    String var1_149 = null;
                    String var1_150 = null;
                    String var1_151 = null;
                    String var1_152 = null;
                    var1_152 = new String("\n#QualifierInfo: ").concat(associationId);
                    var1_151 = var1_152.concat(new String("| "));
                    String var2_156 = null;
                    UmlClassNameType par_157 = null;
                    String arg_158 = null;
                    IUmlProperty obj_159 = null;
                    obj_159 = (IUmlProperty) (prop).Property;
                    arg_158 = obj_159.getOwnerClass();
                    par_157 = new UmlClassNameType(arg_158);
                    var2_156 = GetTypeId((IUmlType) par_157);
                    var1_150 = var1_151.concat(var2_156);
                    var1_149 = var1_150.concat(new String("| "));
                    String var2_162 = null;
                    HashMap tmp_m_163 = new HashMap();
                    tmp_m_163 = new HashMap();
                    HashMap mapType_165 = primitiveTypes;
                    for (Iterator enm_169 = mapType_165.keySet().iterator(); enm_169.hasNext(); ) {

                      Object dom_170 = enm_169.next();
                      String id_d_167 = UTIL.ConvertToString(dom_170);
                      String id_r_166 = UTIL.ConvertToString(mapType_165.get(dom_170));
                      if (tmp_m_163.containsKey(id_r_166)) 
                        UTIL.RunTime("Run-Time Error:Map is not injective - \'inverse\' fails");
                      else 
                        tmp_m_163.put(id_r_166, id_d_167);
                    }
                    String tmppar_171 = null;
                    IUmlType par_172 = null;
                    IUmlProperty obj_173 = null;
                    obj_173 = (IUmlProperty) (prop).Property;
                    par_172 = (IUmlType) obj_173.getQualifier();
                    tmppar_171 = GetUmlPrimitiveTypeId((IUmlType) par_172);
                    var2_162 = UTIL.ConvertToString(tmp_m_163.get(tmppar_171));
                    tmpArg_v_148 = var1_149.concat(var2_162);
                    Util.Print(tmpArg_v_148);
                  }
                  doc.StartE(new String("ownedEnd"));
                  doc.StartA(new String("aggregation"), new String("none"));
                  doc.StartA(new String("association"), associationId);
                  String par_185 = null;
                  Boolean par_186 = null;
                  par_186 = (prop).IsNavigable;
                  par_185 = UTIL.ConvertToString(Util.ToStringBool(par_186));
                  doc.StartA(new String("isNavigable"), par_185);
                  Boolean cond_188 = null;
                  Integer var1_189 = null;
                  String unArg_190 = null;
                  IUmlProperty obj_191 = null;
                  obj_191 = (IUmlProperty) (prop).Property;
                  unArg_190 = obj_191.getName();
                  var1_189 = new Integer(unArg_190.length());
                  cond_188 = new Boolean((var1_189.intValue()) > (new Integer(0).intValue()));
                  if (cond_188.booleanValue()) {

                    String par_199 = null;
                    IUmlProperty obj_200 = null;
                    obj_200 = (IUmlProperty) (prop).Property;
                    par_199 = obj_200.getName();
                    doc.StartA(new String("name"), par_199);
                  }
                  else 
                    doc.StartA(new String("name"), new String(""));
                  String par_204 = null;
                  IUmlVisibilityKind par_205 = null;
                  IUmlProperty obj_206 = null;
                  obj_206 = (IUmlProperty) (prop).Property;
                  par_205 = (IUmlVisibilityKind) obj_206.getVisibility();
                  par_204 = GetVisibilityKind((IUmlVisibilityKind) par_205);
                  doc.StartA(new String("visibility"), par_204);
                  {

                    String associationEndId = GetNextId();
                    {

                      doc.StartA(ID_uTAG, associationEndId);
                      doc.StartA(new String("xmi:type"), new String("uml:Property"));
                      Boolean cond_216 = null;
                      IUmlProperty obj_217 = null;
                      obj_217 = (IUmlProperty) (prop).Property;
                      cond_216 = obj_217.hasMultiplicity();
                      if (cond_216.booleanValue()) {

                        String par_221 = null;
                        Boolean par_222 = null;
                        IUmlMultiplicityElement obj_223 = null;
                        IUmlProperty obj_224 = null;
                        obj_224 = (IUmlProperty) (prop).Property;
                        obj_223 = (IUmlMultiplicityElement) obj_224.getMultiplicity();
                        par_222 = obj_223.getIsOrdered();
                        par_221 = UTIL.ConvertToString(Util.ToStringBool(par_222));
                        doc.StartA(new String("isOrdered"), par_221);
                        IUmlMultiplicityElement tmpArg_v_227 = null;
                        IUmlProperty obj_228 = null;
                        obj_228 = (IUmlProperty) (prop).Property;
                        tmpArg_v_227 = (IUmlMultiplicityElement) obj_228.getMultiplicity();
                        AddAssociationMp((IUmlMultiplicityElement) tmpArg_v_227);
                      }
                      Boolean cond_230 = null;
                      Boolean unArg_231 = null;
                      unArg_231 = (prop).IsNavigable;
                      cond_230 = new Boolean(!unArg_231.booleanValue());
                      if (cond_230.booleanValue()) 
                        extensionConectorNonNavigable.add(associationEndId);
                      Boolean cond_235 = null;
                      IUmlProperty obj_236 = null;
                      obj_236 = (IUmlProperty) (prop).Property;
                      cond_235 = obj_236.hasIsStatic();
                      if (cond_235.booleanValue()) {

                        String par_240 = null;
                        Boolean par_241 = null;
                        IUmlProperty obj_242 = null;
                        obj_242 = (IUmlProperty) (prop).Property;
                        par_241 = obj_242.getIsStatic();
                        par_240 = UTIL.ConvertToString(Util.ToStringBool(par_241));
                        doc.StartA(new String("isStatic"), par_240);
                      }
                      doc.StartE(new String("type"));
                      String par_248 = null;
                      IUmlType par_249 = null;
                      IUmlProperty obj_250 = null;
                      obj_250 = (IUmlProperty) (prop).Property;
                      par_249 = (IUmlType) obj_250.getType();
                      par_248 = GetTypeId((IUmlType) par_249);
                      doc.StartA(new String("xmi:idref"), par_248);
                      doc.StopE(new String("type"));
                      doc.StopE(new String("ownedEnd"));
                      doc.StartE(new String("memberEnd"));
                      doc.StartA(new String("xmi:idref"), associationEndId);
                      doc.StopE(new String("memberEnd"));
                    }
                  }
                }
              }
            }
          }
        }
        doc.StopE(oe);
      }
    }
  }
// ***** VDMTOOLS END Name=AddAssociation#1|IUmlAssociation


// ***** VDMTOOLS START Name=AddAssociationMp#1|IUmlMultiplicityElement KEEP=NO
  protected void AddAssociationMp (final IUmlMultiplicityElement me) throws CGException {

    doc.StartE(new String("lowerValue"));
    String par_6 = null;
    Integer par_7 = null;
    par_7 = me.getLower();
    par_6 = UTIL.ConvertToString(Util.ToString(par_7));
    doc.StartA(new String("value"), par_6);
    doc.StartA(ID_uTAG, GetNextId());
    doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
    doc.StopE(new String("lowerValue"));
    Boolean cond_16 = null;
    cond_16 = me.hasUpper();
    if (cond_16.booleanValue()) {

      doc.StartE(new String("upperValue"));
      String par_34 = null;
      Integer par_35 = null;
      par_35 = me.getUpper();
      par_34 = UTIL.ConvertToString(Util.ToString(par_35));
      doc.StartA(new String("value"), par_34);
      doc.StartA(ID_uTAG, GetNextId());
      doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
      doc.StopE(new String("upperValue"));
    }
    else {

      doc.StartE(new String("upperValue"));
      doc.StartA(new String("value"), new String("*"));
      doc.StartA(ID_uTAG, GetNextId());
      doc.StartA(new String("xmi:type"), new String("uml:LiteralString"));
      doc.StopE(new String("upperValue"));
    }
  }
// ***** VDMTOOLS END Name=AddAssociationMp#1|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=AddGeneralization#1|IUmlInheritanceClause KEEP=NO
  protected void AddGeneralization (final IUmlInheritanceClause ihc) throws CGException {

    HashSet iset_2 = new HashSet();
    Vector unArg_9 = null;
    unArg_9 = ihc.getIdentifierList();
    HashSet set_10 = new HashSet();
    Enumeration enm_11 = unArg_9.elements();
    while ( enm_11.hasMoreElements())
      set_10.add(enm_11.nextElement());
    iset_2 = set_10;
    String a = null;
    for (Iterator enm_27 = iset_2.iterator(); enm_27.hasNext(); ) {

      String elem_3 = UTIL.ConvertToString(enm_27.next());
      a = elem_3;
      {

        doc.StartE(new String("generalization"));
        doc.StartA(new String("xmi:type"), new String("uml:Generalization"));
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("general"), UTIL.ConvertToString(classes.get(a)));
        doc.StopE(new String("generalization"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddGeneralization#1|IUmlInheritanceClause


// ***** VDMTOOLS START Name=AddTemplates#1|IUmlTemplateSignature KEEP=NO
  protected void AddTemplates (final IUmlTemplateSignature tps) throws CGException {

    doc.StartE(new String("ownedTemplateSignature"));
    doc.StartA(new String("xmi:type"), new String("uml:TemplateSignature"));
    doc.StartA(ID_uTAG, GetNextId());
    {

      HashSet iset_10 = new HashSet();
      iset_10 = tps.getTemplateParameters();
      IUmlClassifierTemplateParameter a = null;
      for (Iterator enm_51 = iset_10.iterator(); enm_51.hasNext(); ) {

        IUmlClassifierTemplateParameter elem_11 = (IUmlClassifierTemplateParameter) enm_51.next();
        a = (IUmlClassifierTemplateParameter) elem_11;
        {

          String parameterId = GetNextId();
          doc.StartE(new String("ownedParameter"));
          doc.StartA(new String("xmi:type"), new String("uml:ClassifierTemplateParameter"));
          doc.StartA(ID_uTAG, parameterId);
          doc.StartE(new String("ownedElement"));
          doc.StartA(new String("xmi:type"), new String("uml:Class"));
          doc.StartA(ID_uTAG, GetNextId());
          String par_32 = null;
          par_32 = a.getName();
          doc.StartA(new String("name"), par_32);
          String par_35 = null;
          IUmlVisibilityKind par_36 = null;
          par_36 = (IUmlVisibilityKind) a.getVisibility();
          par_35 = GetVisibilityKind((IUmlVisibilityKind) par_36);
          doc.StartA(new String("visibility"), par_35);
          doc.StartA(new String("templateParameter"), parameterId);
          doc.StopE(new String("ownedElement"));
          doc.StopE(new String("ownedParameter"));
          doc.StartE(new String("parameter"));
          doc.StartA(new String("xmi:idref"), parameterId);
          doc.StopE(new String("parameter"));
        }
      }
    }
    doc.StopE(new String("ownedTemplateSignature"));
  }
// ***** VDMTOOLS END Name=AddTemplates#1|IUmlTemplateSignature


// ***** VDMTOOLS START Name=GetUmlPrimitiveTypeId#1|IUmlType KEEP=NO
  protected String GetUmlPrimitiveTypeId (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
        succ_2 = false;
      if (succ_2) 
        return UTIL.ConvertToString(primitiveTypes.get(new String("bool")));
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
          succ_2 = false;
        if (succ_2) 
          return UTIL.ConvertToString(primitiveTypes.get(new String("int")));
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
            succ_2 = false;
          if (succ_2) 
            return UTIL.ConvertToString(primitiveTypes.get(new String("unlimitedNatural")));
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
              succ_2 = false;
            if (succ_2) 
              return UTIL.ConvertToString(primitiveTypes.get(new String("char")));
            else 
              return UTIL.ConvertToString(primitiveTypes.get(new String("String")));
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=GetUmlPrimitiveTypeId#1|IUmlType


// ***** VDMTOOLS START Name=AddStdTypes KEEP=NO
  protected void AddStdTypes () throws CGException {

    primitiveTypes.put(new String("bool"), AddPrimitiveType(new String("bool")));
    primitiveTypes.put(new String("int"), AddPrimitiveType(new String("int")));
    primitiveTypes.put(new String("char"), AddPrimitiveType(new String("char")));
    primitiveTypes.put(new String("unlimitedNatural"), AddPrimitiveType(new String("unlimitedNatural")));
    primitiveTypes.put(new String("String"), AddPrimitiveType(new String("String")));
    primitiveTypes.put(new String("NotSupportedType"), AddPrimitiveType(new String("NotSupportedType")));
  }
// ***** VDMTOOLS END Name=AddStdTypes


// ***** VDMTOOLS START Name=AddPrimitiveType#1|String KEEP=NO
  protected String AddPrimitiveType (final String typeName) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("name"), typeName);
    doc.StartA(new String("visibility"), new String("public"));
    {

      String tid = GetNextId();
      {

        doc.StartA(ID_uTAG, tid);
        doc.StartA(new String("xmi:type"), new String("uml:Class"));
        doc.StopE(oe);
        return tid;
      }
    }
  }
// ***** VDMTOOLS END Name=AddPrimitiveType#1|String


// ***** VDMTOOLS START Name=GetTypeId#1|IUmlType KEEP=NO
  protected String GetTypeId (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlClassNameType))) 
        succ_2 = false;
      if (succ_2) {

        IUmlClassNameType qc = (IUmlClassNameType) t;
        {

          Boolean cond_22 = null;
          boolean tmpQuant_23 = false;
          {

            HashSet e_set_28 = new HashSet();
            e_set_28.clear();
            e_set_28.addAll(classes.keySet());
            String x = null;
            {
              for (Iterator enm_31 = e_set_28.iterator(); enm_31.hasNext() && !tmpQuant_23; ) {

                String elem_30 = UTIL.ConvertToString(enm_31.next());
                x = elem_30;
                Boolean pred_24 = null;
                String var2_26 = null;
                var2_26 = qc.getName();
                pred_24 = new Boolean(UTIL.equals(x, var2_26));
                if (pred_24.booleanValue()) 
                  tmpQuant_23 = true;
              }
            }
          }
          cond_22 = new Boolean(tmpQuant_23);
          if (cond_22.booleanValue()) {

            String rexpr_35 = null;
            String tmppar_37 = null;
            tmppar_37 = qc.getName();
            rexpr_35 = UTIL.ConvertToString(classes.get(tmppar_37));
            return rexpr_35;
          }
          else 
            return UTIL.ConvertToString(primitiveTypes.get(new String("NotSupportedType")));
        }
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
          succ_2 = false;
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
            succ_2 = false;
        }
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
            succ_2 = false;
        }
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
            succ_2 = false;
        }
        if (succ_2) 
          return GetUmlPrimitiveTypeId((IUmlType) t);
        else 
          return UTIL.ConvertToString(primitiveTypes.get(new String("NotSupportedType")));
      }
    }
  }
// ***** VDMTOOLS END Name=GetTypeId#1|IUmlType


// ***** VDMTOOLS START Name=GetNextId KEEP=NO
  protected String GetNextId () throws CGException {

    id = UTIL.NumberToInt(UTIL.clone(new Integer(id.intValue() + new Integer(1).intValue())));
    return GetId(id);
  }
// ***** VDMTOOLS END Name=GetNextId


// ***** VDMTOOLS START Name=GetId#1|Integer KEEP=NO
  protected String GetId (final Integer idNum) throws CGException {

    String rexpr_2 = null;
    String var2_4 = null;
    var2_4 = UTIL.ConvertToString(Util.ToString(idNum));
    rexpr_2 = new String("VDM.").concat(var2_4);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=GetId#1|Integer


// ***** VDMTOOLS START Name=GetVisibilityKind#1|IUmlVisibilityKind KEEP=NO
  protected String GetVisibilityKind (final IUmlVisibilityKind visibility) throws CGException {

    Integer selRes_3 = null;
    selRes_3 = visibility.getValue();
    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(selRes_3, UmlVisibilityKindQuotes.IQPUBLIC)) 
        succ_2 = false;
      if (succ_2) 
        return new String("public");
      else {

        succ_2 = true;
        if (!UTIL.equals(selRes_3, UmlVisibilityKindQuotes.IQPRIVATE)) 
          succ_2 = false;
        if (succ_2) 
          return new String("private");
        else {

          succ_2 = true;
          if (!UTIL.equals(selRes_3, UmlVisibilityKindQuotes.IQPROTECTED)) 
            succ_2 = false;
          if (succ_2) 
            return new String("protected");
        }
      }
    }
    throw new CGException();
  }
// ***** VDMTOOLS END Name=GetVisibilityKind#1|IUmlVisibilityKind

}
;
