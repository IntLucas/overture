//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.quotes.*;
import org.overturetool.ast.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class Vdm2UmlType {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_Vdm2UmlType KEEP=NO
  private void vdm_init_Vdm2UmlType () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_Vdm2UmlType


// ***** VDMTOOLS START Name=Vdm2UmlType KEEP=NO
  public Vdm2UmlType () throws CGException {
    vdm_init_Vdm2UmlType();
  }
// ***** VDMTOOLS END Name=Vdm2UmlType


// ***** VDMTOOLS START Name=exstractMultiplicity#1|IOmlType KEEP=NO
  static public IUmlMultiplicityElement exstractMultiplicity (final IOmlType t) throws CGException {

    Boolean isOrdered = new Boolean(false);
    Boolean isUnique = new Boolean(true);
    Integer lower = new Integer(1);
    Integer upper = new Integer(1);
    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSetType))) 
        succ_2 = false;
      if (succ_2) {

        upper = null;
        lower = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
        isOrdered = (Boolean) UTIL.clone(new Boolean(false));
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq0Type))) 
          succ_2 = false;
        if (succ_2) {

          lower = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
          upper = null;
          isOrdered = (Boolean) UTIL.clone(new Boolean(true));
          isUnique = (Boolean) UTIL.clone(new Boolean(false));
        }
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq1Type))) 
            succ_2 = false;
          if (succ_2) {

            lower = UTIL.NumberToInt(UTIL.clone(new Integer(1)));
            upper = null;
            isOrdered = (Boolean) UTIL.clone(new Boolean(true));
            isUnique = (Boolean) UTIL.clone(new Boolean(false));
          }
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlGeneralMapType))) 
              succ_2 = false;
            if (!succ_2) {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlInjectiveMapType))) 
                succ_2 = false;
            }
            if (succ_2) {

              isOrdered = (Boolean) UTIL.clone(new Boolean(true));
              upper = null;
              lower = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
              isUnique = (Boolean) UTIL.clone(new Boolean(false));
            }
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlOptionalType))) 
                succ_2 = false;
              if (succ_2) {

                upper = UTIL.NumberToInt(UTIL.clone(new Integer(1)));
                lower = UTIL.NumberToInt(UTIL.clone(new Integer(0)));
              }
            }
          }
        }
      }
    }
    return (IUmlMultiplicityElement) new UmlMultiplicityElement(isOrdered, isUnique, lower, upper);
  }
// ***** VDMTOOLS END Name=exstractMultiplicity#1|IOmlType


// ***** VDMTOOLS START Name=getQualifier#1|IOmlType KEEP=NO
  static public IUmlType getQualifier (final IOmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlInjectiveMapType))) 
        succ_2 = false;
      if (succ_2) {

        IOmlInjectiveMapType t1 = (IOmlInjectiveMapType) t;
        IUmlType rexpr_16 = null;
        IOmlType par_17 = null;
        par_17 = (IOmlType) t1.getDomType();
        rexpr_16 = (IUmlType) convertType((IOmlType) par_17);
        return (IUmlType) rexpr_16;
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlGeneralMapType))) 
          succ_2 = false;
        if (succ_2) {

          IOmlGeneralMapType t1 = (IOmlGeneralMapType) t;
          IUmlType rexpr_10 = null;
          IOmlType par_11 = null;
          par_11 = (IOmlType) t1.getDomType();
          rexpr_10 = (IUmlType) convertType((IOmlType) par_11);
          return (IUmlType) rexpr_10;
        }
        else 
          return null;
      }
    }
  }
// ***** VDMTOOLS END Name=getQualifier#1|IOmlType


// ***** VDMTOOLS START Name=convertType#1|IOmlType KEEP=NO
  static public IUmlType convertType (final IOmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlBoolType))) 
        succ_2 = false;
      if (succ_2) 
        return (IUmlType) new UmlBoolType();
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlNat1Type))) 
          succ_2 = false;
        if (succ_2) 
          return (IUmlType) new UmlIntegerType();
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlNatType))) 
            succ_2 = false;
          if (succ_2) 
            return (IUmlType) new UmlIntegerType();
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlIntType))) 
              succ_2 = false;
            if (succ_2) 
              return (IUmlType) new UmlIntegerType();
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlRealType))) 
                succ_2 = false;
              if (succ_2) 
                return (IUmlType) new UmlUnlimitedNatural();
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlCharType))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IUmlType) new UmlCharType();
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlTokenType))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IUmlType) new UmlIntegerType();
                  else {

                    succ_2 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSetType))) 
                      succ_2 = false;
                    if (succ_2) {

                      IOmlSetType t1 = (IOmlSetType) t;
                      IUmlType rexpr_50 = null;
                      IOmlType par_51 = null;
                      par_51 = (IOmlType) t1.getType();
                      rexpr_50 = (IUmlType) convertType((IOmlType) par_51);
                      return (IUmlType) rexpr_50;
                    }
                    else {

                      succ_2 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq0Type))) 
                        succ_2 = false;
                      if (succ_2) {

                        IOmlSeq0Type t1 = (IOmlSeq0Type) t;
                        IUmlType rexpr_44 = null;
                        IOmlType par_45 = null;
                        par_45 = (IOmlType) t1.getType();
                        rexpr_44 = (IUmlType) convertType((IOmlType) par_45);
                        return (IUmlType) rexpr_44;
                      }
                      else {

                        succ_2 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq1Type))) 
                          succ_2 = false;
                        if (succ_2) {

                          IOmlSeq1Type t1 = (IOmlSeq1Type) t;
                          IUmlType rexpr_38 = null;
                          IOmlType par_39 = null;
                          par_39 = (IOmlType) t1.getType();
                          rexpr_38 = (IUmlType) convertType((IOmlType) par_39);
                          return (IUmlType) rexpr_38;
                        }
                        else {

                          succ_2 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlInjectiveMapType))) 
                            succ_2 = false;
                          if (succ_2) {

                            IOmlInjectiveMapType t1 = (IOmlInjectiveMapType) t;
                            IUmlType rexpr_32 = null;
                            IOmlType par_33 = null;
                            par_33 = (IOmlType) t1.getRngType();
                            rexpr_32 = (IUmlType) convertType((IOmlType) par_33);
                            return (IUmlType) rexpr_32;
                          }
                          else {

                            succ_2 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlGeneralMapType))) 
                              succ_2 = false;
                            if (succ_2) {

                              IOmlGeneralMapType t1 = (IOmlGeneralMapType) t;
                              IUmlType rexpr_26 = null;
                              IOmlType par_27 = null;
                              par_27 = (IOmlType) t1.getRngType();
                              rexpr_26 = (IUmlType) convertType((IOmlType) par_27);
                              return (IUmlType) rexpr_26;
                            }
                            else {

                              succ_2 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlEmptyType))) 
                                succ_2 = false;
                              if (succ_2) 
                                return null;
                              else {

                                succ_2 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlOptionalType))) 
                                  succ_2 = false;
                                if (succ_2) {

                                  IOmlOptionalType t1 = (IOmlOptionalType) t;
                                  IUmlType rexpr_17 = null;
                                  IOmlType par_18 = null;
                                  par_18 = (IOmlType) t1.getType();
                                  rexpr_17 = (IUmlType) convertType((IOmlType) par_18);
                                  return (IUmlType) rexpr_17;
                                }
                                else {

                                  succ_2 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlTypeName))) 
                                    succ_2 = false;
                                  if (succ_2) {

                                    IOmlTypeName a = (IOmlTypeName) t;
                                    UmlClassNameType rexpr_10 = null;
                                    String arg_11 = null;
                                    IOmlName obj_12 = null;
                                    obj_12 = (IOmlName) a.getName();
                                    arg_11 = obj_12.getIdentifier();
                                    rexpr_10 = new UmlClassNameType(arg_11);
                                    return (IUmlType) rexpr_10;
                                  }
                                  else 
                                    return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertType#1|IOmlType


// ***** VDMTOOLS START Name=convertPropertyType#2|IOmlType|String KEEP=NO
  static public IUmlType convertPropertyType (final IOmlType t, final String owner) throws CGException {

    IUmlType ty = (IUmlType) (IUmlType) convertType((IOmlType) t);
    if (new Boolean(UTIL.equals(ty, null)).booleanValue()) 
      return (IUmlType) new UmlClassNameType(owner);
    else 
      return (IUmlType) ty;
  }
// ***** VDMTOOLS END Name=convertPropertyType#2|IOmlType|String

}
;
