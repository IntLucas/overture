//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sat 16-Aug-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:09:07)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class OmlFunctionTrailer extends OmlNode implements IOmlFunctionTrailer {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivPreExpression KEEP=NO
  private IOmlExpression ivPreExpression = null;
// ***** VDMTOOLS END Name=ivPreExpression

// ***** VDMTOOLS START Name=ivPostExpression KEEP=NO
  private IOmlExpression ivPostExpression = null;
// ***** VDMTOOLS END Name=ivPostExpression


// ***** VDMTOOLS START Name=OmlFunctionTrailer KEEP=NO
  public OmlFunctionTrailer () throws CGException {
    try {

      ivPreExpression = null;
      ivPostExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=OmlFunctionTrailer


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("FunctionTrailer");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitFunctionTrailer((IOmlFunctionTrailer) this);
  }
// ***** VDMTOOLS END Name=accept


// ***** VDMTOOLS START Name=OmlFunctionTrailer KEEP=NO
  public OmlFunctionTrailer (final IOmlExpression p1, final IOmlExpression p2) throws CGException {

    try {

      ivPreExpression = null;
      ivPostExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setPreExpression((IOmlExpression) p1);
      setPostExpression((IOmlExpression) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlFunctionTrailer


// ***** VDMTOOLS START Name=OmlFunctionTrailer KEEP=NO
  public OmlFunctionTrailer (final IOmlExpression p1, final IOmlExpression p2, final Long line, final Long column) throws CGException {

    try {

      ivPreExpression = null;
      ivPostExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setPreExpression((IOmlExpression) p1);
      setPostExpression((IOmlExpression) p2);
      setPosition(line, column);
    }
  }
// ***** VDMTOOLS END Name=OmlFunctionTrailer


// ***** VDMTOOLS START Name=init KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("pre_expression");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setPreExpression((IOmlExpression) data.get(fname));
    }
    {

      String fname = new String("post_expression");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setPostExpression((IOmlExpression) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init


// ***** VDMTOOLS START Name=getPreExpression KEEP=NO
  public IOmlExpression getPreExpression () throws CGException {

    if (!this.pre_getPreExpression().booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getPreExpression");
    return (IOmlExpression) ivPreExpression;
  }
// ***** VDMTOOLS END Name=getPreExpression


// ***** VDMTOOLS START Name=pre_getPreExpression KEEP=NO
  public Boolean pre_getPreExpression () throws CGException {
    return hasPreExpression();
  }
// ***** VDMTOOLS END Name=pre_getPreExpression


// ***** VDMTOOLS START Name=hasPreExpression KEEP=NO
  public Boolean hasPreExpression () throws CGException {
    return new Boolean(!UTIL.equals(ivPreExpression, null));
  }
// ***** VDMTOOLS END Name=hasPreExpression


// ***** VDMTOOLS START Name=setPreExpression KEEP=NO
  public void setPreExpression (final IOmlExpression parg) throws CGException {
    ivPreExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setPreExpression


// ***** VDMTOOLS START Name=getPostExpression KEEP=NO
  public IOmlExpression getPostExpression () throws CGException {

    if (!this.pre_getPostExpression().booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getPostExpression");
    return (IOmlExpression) ivPostExpression;
  }
// ***** VDMTOOLS END Name=getPostExpression


// ***** VDMTOOLS START Name=pre_getPostExpression KEEP=NO
  public Boolean pre_getPostExpression () throws CGException {
    return hasPostExpression();
  }
// ***** VDMTOOLS END Name=pre_getPostExpression


// ***** VDMTOOLS START Name=hasPostExpression KEEP=NO
  public Boolean hasPostExpression () throws CGException {
    return new Boolean(!UTIL.equals(ivPostExpression, null));
  }
// ***** VDMTOOLS END Name=hasPostExpression


// ***** VDMTOOLS START Name=setPostExpression KEEP=NO
  public void setPostExpression (final IOmlExpression parg) throws CGException {
    ivPostExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setPostExpression

}
;
