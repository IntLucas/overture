["legal function application obligation in \u0027Environment\u0027 (environment.vdmpp) at line 34:23: (forall fname:seq of (char) \u0026 pre_(((io.freadval))[seq of (inline)]fname))","type compatibility obligation in \u0027Environment\u0027 (environment.vdmpp) at line 35:16: (forall fname:seq of (char) \u0026 is_(input, seq of (inline)))","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 32:8: (forall fname:seq of (char) \u0026 ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 40:4: (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom (ranges munion {id |-\u003e (psens.getAperture)()})) \u003d (dom (sensors munion {id |-\u003e psens}))))","while loop termination obligation in \u0027Environment\u0027 (environment.vdmpp) at line 48:3: ...","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 49:6: (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","while loop termination obligation in \u0027Environment\u0027 (environment.vdmpp) at line 61:10: ...","non-empty sequence obligation in \u0027Environment\u0027 (environment.vdmpp) at line 62:48: (inlines \u003c\u003e [])","legal map application obligation in \u0027Environment\u0027 (environment.vdmpp) at line 65:50: (id in set (dom ranges))","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 68:20: (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","non-empty sequence obligation in \u0027Environment\u0027 (environment.vdmpp) at line 68:34: (inlines \u003c\u003e [])","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 69:20: (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 71:20: (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 73:10: (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors)))","state invariant holds obligation in \u0027Environment\u0027 (environment.vdmpp) at line 78:4: (forall newevid:EventId, pfltp:FlareType, angle:Angle, pt1:Time, pt2:Time \u0026 (((dom ranges) \u003d (dom sensors)) \u003d\u003e ((dom ranges) \u003d (dom sensors))))","legal function application obligation in \u0027Environment\u0027 (environment.vdmpp) at line 82:11: pre_(((io.writeval))[seq of (outline)]outlines)","type compatibility obligation in \u0027Environment\u0027 (environment.vdmpp) at line 88:8: is_(RESULT, (Angle * Angle))","type compatibility obligation in \u0027Sensor\u0027 (sensor.vdmpp) at line 18:8: is_(RESULT, (Angle * Angle))","state invariant holds obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 22:8: (forall papp:Angle \u0026 ((dom ranges) \u003d (dom dispensers)))","state invariant holds obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 29:6: (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom (ranges munion {id |-\u003e mk_(angle, DISPENSER_APERTURE)})) \u003d (dom (dispensers munion {id |-\u003e pfldisp}))))","legal map application obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 40:42: (id in set (dom ranges))","state invariant holds obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 43:4: (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers)))","type compatibility obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 48:8: is_(RESULT, (Angle * Angle))","state invariant holds obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 56:4: (forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers))))","state invariant holds obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 57:4: (forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers))))","non-empty sequence obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 62:57: (threats \u003c\u003e [])","state invariant holds obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 63:4: (((dom ranges) \u003d (dom dispensers)) \u003d\u003e ((dom ranges) \u003d (dom dispensers)))","non-empty sequence obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 63:18: (threats \u003c\u003e [])","legal map application obligation in \u0027FlareController\u0027 (flarecontroller.vdmpp) at line 69:13: (forall id in set (dom dispensers) \u0026 (id in set (dom dispensers)))","enumeration map injectivity obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 7:3: (forall m1, m2 in set {{\u003cMissileA\u003e |-\u003e [mk_(\u003cFlareOneA\u003e, 900), mk_(\u003cFlareTwoA\u003e, 500), mk_(\u003cDoNothingA\u003e, 100), mk_(\u003cFlareOneA\u003e, 500)]}, {\u003cMissileB\u003e |-\u003e [mk_(\u003cFlareTwoB\u003e, 500), mk_(\u003cFlareTwoB\u003e, 700)]}, {\u003cMissileC\u003e |-\u003e [mk_(\u003cFlareOneC\u003e, 400), mk_(\u003cDoNothingC\u003e, 100), mk_(\u003cFlareTwoC\u003e, 400), mk_(\u003cFlareOneC\u003e, 500)]}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","enumeration map injectivity obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 19:3: (forall m1, m2 in set {{\u003cNone\u003e |-\u003e 0}, {\u003cMissileA\u003e |-\u003e 1}, {\u003cMissileB\u003e |-\u003e 2}, {\u003cMissileC\u003e |-\u003e 3}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","type compatibility obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 42:15: (forall ang:nat \u0026 inv_Angle(ang))","non-empty sequence obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 48:36: (curplan \u003c\u003e [])","non-empty sequence obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 49:31: (curplan \u003c\u003e [])","legal map application obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 66:6: (forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (pmt in set (dom missilePriority))))","legal map application obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 70:34: (forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (pmt in set (dom responseDB))))","non-empty sequence obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 74:36: (forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e ((newplan ^ [mk_(fltp, newtime)]) \u003c\u003e [])))","non-empty sequence obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 78:23: (forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (forall curplan1:Plan, curprio2:nat, busy3:bool, aperture4:Angle, eventid5:[EventId] \u0026 (true \u003d\u003e (newplan \u003c\u003e [])))))","legal map application obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 80:20: (forall evid:EventId, pmt:MissileType, ptime:Time \u0026 (((pmt in set (dom missilePriority)) and (pmt in set (dom responseDB))) \u003d\u003e (forall curplan1:Plan, curprio2:nat, busy3:bool, aperture4:Angle, eventid5:[EventId] \u0026 (true \u003d\u003e (pmt in set (dom missilePriority))))))","type compatibility obligation in \u0027FlareDispenser\u0027 (flaredispenser.vdmpp) at line 93:8: is_(RESULT, (Angle * Angle))","type invariant satisfiable obligation in \u0027GLOBAL\u0027 (global.vdmpp) at line 22:8: (exists num:Angle \u0026 (num \u003c 360))","state invariant initialized obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 13:1: ((dom {|-\u003e}) \u003d (dom {|-\u003e}))","state invariant satisfiable obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 13:1: (exists ranges:map (nat) to ((Angle * Angle)), controllers:map (nat) to (FlareController), threats:seq of ((EventId * MissileType * Angle * Time)), busy:bool \u0026 ((dom ranges) \u003d (dom controllers)))","state invariant holds obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 27:4: (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom (ranges munion {nid |-\u003e (pctrl.getAperture)()})) \u003d (dom (controllers munion {nid |-\u003e pctrl}))))","legal map application obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 38:42: (id in set (dom ranges))","state invariant holds obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 41:5: (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers)))","state invariant holds obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 51:4: (forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers))))","state invariant holds obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 52:4: (forall evid:EventId, pmt:MissileType, pa:Angle, pt:Time \u0026 (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers))))","non-empty sequence obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 57:57: (threats \u003c\u003e [])","state invariant holds obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 58:4: (((dom ranges) \u003d (dom controllers)) \u003d\u003e ((dom ranges) \u003d (dom controllers)))","non-empty sequence obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 58:18: (threats \u003c\u003e [])","legal map application obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 64:13: (forall id in set (dom controllers) \u0026 (id in set (dom controllers)))","type compatibility obligation in \u0027MissileDetector\u0027 (missiledetector.vdmpp) at line 66:8: is_(RESULT, (Angle * Angle))","operation call obligation in \u0027IO\u0027 (IO.vdmpp) at line 80:3: (forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))"]