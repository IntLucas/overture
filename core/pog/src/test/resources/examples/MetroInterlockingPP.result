["enumeration map injectivity obligation:(forall m1, m2 in set {{\u003cRunning\u003e |-\u003e \u0027R\u0027}, {\u003cStopped\u003e |-\u003e \u0027 \u0027}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal function application obligation:(forall name:MetroLineName, tracks:seq of (Track) \u0026 pre_CreateCircularLine(name, tracks))","type compatibility obligation:(forall name:MetroLineName, tracks:seq of (Track) \u0026 is_(tracks, seq1 of (Track)))","type compatibility obligation:(forall name:MetroLineName, tracks:seq of (Track) \u0026 is_(tracks, seq1 of (Track)))","legal sequence application obligation:(1 in set (inds lines))","legal sequence application obligation:(1 in set (inds lines))","legal sequence application obligation:(1 in set (inds lines))","legal sequence application obligation:(1 in set (inds lines))","legal sequence application obligation:(2 in set (inds lines))","legal sequence application obligation:(2 in set (inds lines))","legal sequence application obligation:(2 in set (inds lines))","legal map application obligation:(forall step:nat1 \u0026 (forall i in set (inds units) \u0026 ((units(i).GetState)() in set (dom stateCharacters))))","legal sequence application obligation:(forall step:nat1 \u0026 (forall i in set (inds units) \u0026 (i in set (inds units))))","type compatibility obligation:(forall name:MetroLineName, tracks:seq of (Track) \u0026 is_(tracks, seq1 of (Track)))","legal sequence application obligation:(1 in set (inds lines))","legal sequence application obligation:(2 in set (inds lines))","legal sequence application obligation:(3 in set (inds lines))","legal sequence application obligation:(4 in set (inds lines))","legal sequence application obligation:(5 in set (inds lines))","legal sequence application obligation:(6 in set (inds lines))","legal sequence application obligation:(7 in set (inds lines))","legal sequence application obligation:(8 in set (inds lines))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(1 in set (inds lines))","legal sequence application obligation:(2 in set (inds lines))","legal sequence application obligation:(3 in set (inds lines))","legal sequence application obligation:(4 in set (inds lines))","legal sequence application obligation:(5 in set (inds lines))","legal sequence application obligation:(6 in set (inds lines))","legal sequence application obligation:(7 in set (inds lines))","legal sequence application obligation:(8 in set (inds lines))","legal sequence application obligation:(forall i in set (inds units) \u0026 (i in set (inds units)))","legal sequence application obligation:(1 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(2 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(1 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(4 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(3 in set (inds prioritisedUnits))","legal sequence application obligation:(5 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(6 in set (inds prioritisedUnits))","legal sequence application obligation:(6 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(5 in set (inds prioritisedUnits))","legal sequence application obligation:(7 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(8 in set (inds prioritisedUnits))","legal sequence application obligation:(8 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(7 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(2 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(1 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(4 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(3 in set (inds prioritisedUnits))","legal sequence application obligation:(5 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(6 in set (inds prioritisedUnits))","legal sequence application obligation:(6 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(5 in set (inds prioritisedUnits))","legal sequence application obligation:(7 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(8 in set (inds prioritisedUnits))","legal sequence application obligation:(8 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(7 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(2 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds prioritisedUnits))","legal sequence application obligation:(2 in set (inds units))","legal sequence application obligation:(6 in set (inds units))","legal sequence application obligation:(1 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(4 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds prioritisedUnits))","legal sequence application obligation:(4 in set (inds units))","legal sequence application obligation:(8 in set (inds units))","legal sequence application obligation:(3 in set (inds prioritisedUnits))","legal sequence application obligation:(5 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(6 in set (inds prioritisedUnits))","legal sequence application obligation:(6 in set (inds prioritisedUnits))","legal sequence application obligation:(3 in set (inds units))","legal sequence application obligation:(7 in set (inds units))","legal sequence application obligation:(5 in set (inds prioritisedUnits))","legal sequence application obligation:(7 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(8 in set (inds prioritisedUnits))","legal sequence application obligation:(8 in set (inds prioritisedUnits))","legal sequence application obligation:(1 in set (inds units))","legal sequence application obligation:(5 in set (inds units))","legal sequence application obligation:(7 in set (inds prioritisedUnits))","state invariant holds obligation:(forall newId:MetroUnitId \u0026 (InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)))","legal function application obligation:pre_TrackAt(line, trackIndex)","legal function application obligation:pre_TrackAt(line, InterlockingSystem`NextTrackIndex(line, trackIndex))","state invariant holds obligation:((InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)) \u003d\u003e (InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)))","state invariant holds obligation:((InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)) \u003d\u003e (InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)))","state invariant holds obligation:((InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)) \u003d\u003e (InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)))","state invariant holds obligation:((InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)) \u003d\u003e (InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)))","state invariant holds obligation:((InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len recentStates) \u003c\u003d 10)) \u003d\u003e (InterlockingSystem`InRangeOfTracks(line, trackIndex) and ((len ((if ((len recentStates) \u003d 10)\nthen (tl recentStates)\nelse recentStates) ^ [state])) \u003c\u003d 10)))","non-empty sequence obligation:(((len recentStates) \u003d 10) \u003d\u003e (recentStates \u003c\u003e []))","operation establishes postcondition obligation:((len ((if ((len recentStates) \u003d 10)\nthen (tl recentStates)\nelse recentStates) ^ [state])) \u003c\u003d 10)","type invariant satisfiable obligation:(exists mk_MetroLine(-, t):MetroLine \u0026 IsCircular(t))","state invariant initialized obligation:((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits())","state invariant satisfiable obligation:(exists lines:inmap (MetroLineName) to (MetroLine), units:inmap (MetroUnitId) to (MetroUnit) \u0026 (forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))))","state invariant initialized obligation:((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits())","state invariant satisfiable obligation:(exists lines:inmap (MetroLineName) to (MetroLine), units:inmap (MetroUnitId) to (MetroUnit) \u0026 TracksAccommodateAllMetroUnits())","legal sequence application obligation:(forall tracks:seq1 of (Track) \u0026 ((len tracks) in set (inds tracks)))","function establishes postcondition obligation:(forall line:[MetroLine], currentTrackIndex:nat1 \u0026 post_NextTrackIndex(line, currentTrackIndex, (if (line \u003d nil)\nthen currentTrackIndex\nelseif (currentTrackIndex \u003c ((len (line.tracks)) - 1))\nthen (currentTrackIndex + 1)\nelse 1)))","legal sequence application obligation:(forall line:[MetroLine], trackIndex:nat1 \u0026 (InRangeOfTracks(line, trackIndex) \u003d\u003e ((line \u003c\u003e nil) \u003d\u003e (trackIndex in set (inds (line.tracks))))))","type compatibility obligation:(forall name:MetroLineName, tracks:seq1 of (Track) \u0026 (IsCircular(tracks) \u003d\u003e inv_MetroLine(mk_MetroLine(name, tracks))))","type compatibility obligation:(forall name:MetroLineName, tracks:seq1 of (Track) \u0026 (IsCircular(tracks) \u003d\u003e is_(Reverse(tracks), seq1 of (Track))))","type compatibility obligation:(forall name:MetroLineName, tracks:seq1 of (Track) \u0026 (IsCircular(tracks) \u003d\u003e (inv_MetroLine(mk_MetroLine(name, Reverse(tracks))) and is_(Reverse(tracks), seq1 of (Track)))))","type compatibility obligation:(forall name:MetroLineName, tracks:seq1 of (Track) \u0026 inv_MetroLine(mk_MetroLine(name, LinearToCircularLine(tracks))))","function establishes postcondition obligation:(forall tracks:seq1 of (Track) \u0026 post_LinearToCircularLine(tracks, (tracks ^ (tl Reverse(tracks)))))","non-empty sequence obligation:(forall tracks:seq1 of (Track) \u0026 (Reverse(tracks) \u003c\u003e []))","recursive function obligation:(forall tracks:seq of (Track) \u0026 ((not (tracks \u003d [])) \u003d\u003e (Length(tracks) \u003e Length((tl tracks)))))","non-empty sequence obligation:(forall tracks:seq of (Track) \u0026 ((not (tracks \u003d [])) \u003d\u003e (tracks \u003c\u003e [])))","non-empty sequence obligation:(forall tracks:seq of (Track) \u0026 ((not (tracks \u003d [])) \u003d\u003e (tracks \u003c\u003e [])))","let be st existence obligation:(forall unitSet:set of (MetroUnit) \u0026 ((not (unitSet \u003d {})) \u003d\u003e (exists unit in set unitSet \u0026 true)))","recursive function obligation:(forall unitSet:set of (MetroUnit) \u0026 ((not (unitSet \u003d {})) \u003d\u003e (forall unit in set unitSet \u0026 (Card(unitSet) \u003e Card((unitSet \\ {unit}))))))","state invariant holds obligation:(forall unit:MetroUnit \u0026 ((((unit.GetId)() not in set (dom units)) and ((((unit.GetLine)() \u003c\u003e nil) \u003d\u003e ((unit.GetLine)() in set (rng lines))) and (((unit.GetLocation)() \u003c\u003e nil) \u003d\u003e (RemainingCapacityOf((unit.GetLocation)()) \u003e 0)))) \u003d\u003e (((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()) \u003d\u003e ((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()))))","map compatible obligation:(forall unit:MetroUnit \u0026 ((((unit.GetId)() not in set (dom units)) and ((((unit.GetLine)() \u003c\u003e nil) \u003d\u003e ((unit.GetLine)() in set (rng lines))) and (((unit.GetLocation)() \u003c\u003e nil) \u003d\u003e (RemainingCapacityOf((unit.GetLocation)()) \u003e 0)))) \u003d\u003e (forall ldom1 in set (dom units), rdom2 in set (dom {(unit.GetId)() |-\u003e unit}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (units(ldom1) \u003d {(unit.GetId)() |-\u003e unit}(rdom2))))))","type compatibility obligation:(forall unit:MetroUnit \u0026 ((((unit.GetId)() not in set (dom units)) and ((((unit.GetLine)() \u003c\u003e nil) \u003d\u003e ((unit.GetLine)() in set (rng lines))) and (((unit.GetLocation)() \u003c\u003e nil) \u003d\u003e (RemainingCapacityOf((unit.GetLocation)()) \u003e 0)))) \u003d\u003e is_((units munion {(unit.GetId)() |-\u003e unit}), inmap (MetroUnitId) to (MetroUnit))))","state invariant holds obligation:(forall unitId:MetroUnitId \u0026 (((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()) \u003d\u003e ((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits())))","state invariant holds obligation:(forall line:MetroLine \u0026 (((line.name) not in set (dom lines)) \u003d\u003e (((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()) \u003d\u003e ((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()))))","map compatible obligation:(forall line:MetroLine \u0026 (((line.name) not in set (dom lines)) \u003d\u003e (forall ldom1 in set (dom lines), rdom2 in set (dom {(line.name) |-\u003e line}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (lines(ldom1) \u003d {(line.name) |-\u003e line}(rdom2))))))","type compatibility obligation:(forall line:MetroLine \u0026 (((line.name) not in set (dom lines)) \u003d\u003e is_((lines munion {(line.name) |-\u003e line}), inmap (MetroLineName) to (MetroLine))))","state invariant holds obligation:(forall lineName:MetroLineName \u0026 (((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()) \u003d\u003e ((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits())))","let be st existence obligation:(IsAnyUnitStuck() \u003d\u003e (exists u in set (rng units) \u0026 (u.IsStuck)()))","operation establishes postcondition obligation:(forall track in set AllTracks((rng lines)) \u0026 (NumberOfEnteringUnitsOn(track) \u003c\u003d RemainingCapacityOf(track)))","comprehension map injectivity obligation:(forall m1, m2 in set {{track |-\u003e RemainingCapacityOf(track)} | track in set AllTracks((rng lines))} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","state invariant holds obligation:(((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()) \u003d\u003e ((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()))","state invariant holds obligation:(((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()) \u003d\u003e ((forall u in set (rng units) \u0026 (((u.GetLine)() \u003c\u003e nil) \u003d\u003e ((u.GetLine)() in set (rng lines)))) and TracksAccommodateAllMetroUnits()))","non-empty sequence obligation:(forall unitsToPrioritise:set of (MetroUnit), priorities:seq of (TrackKind) \u0026 (priorities \u003c\u003e []))","non-empty sequence obligation:(forall unitsToPrioritise:set of (MetroUnit), priorities:seq of (TrackKind) \u0026 (priorities \u003c\u003e []))","operation establishes postcondition obligation:(forall unitsToPrioritise:set of (MetroUnit), priorities:seq of (TrackKind) \u0026 (forall unit in set (elems RESULT) \u0026 ((unit.GetNextLocation)() in set AllTracks((rng lines)))))","legal map application obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 (((unit.GetNextLocation)() in set (dom capacities)) \u003d\u003e ((unit.GetNextLocation)() in set (dom capacities))))","type compatibility obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 (((unit.GetNextLocation)() in set (dom capacities)) \u003d\u003e is_((unit.GetNextLocation)(), Track)))","legal map application obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 ((((unit.GetNextLocation)() in set (dom capacities)) and (capacities((unit.GetNextLocation)()) \u003e 0)) \u003d\u003e (((unit.GetNextLocation)() in set (dom capacities)) \u003d\u003e ((unit.GetNextLocation)() in set (dom capacities)))))","type compatibility obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 ((((unit.GetNextLocation)() in set (dom capacities)) and (capacities((unit.GetNextLocation)()) \u003e 0)) \u003d\u003e (((unit.GetNextLocation)() in set (dom capacities)) \u003d\u003e is_((unit.GetNextLocation)(), Track))))","legal map application obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 ((((unit.GetNextLocation)() in set (dom capacities)) and (capacities((unit.GetNextLocation)()) \u003e 0)) \u003d\u003e ((unit.GetNextLocation)() in set (dom capacities))))","type compatibility obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 ((((unit.GetNextLocation)() in set (dom capacities)) and (capacities((unit.GetNextLocation)()) \u003e 0)) \u003d\u003e is_((unit.GetNextLocation)(), Track)))","type compatibility obligation:(forall capacities:CapacityMap, unit:MetroUnit \u0026 ((((unit.GetNextLocation)() in set (dom capacities)) and (capacities((unit.GetNextLocation)()) \u003e 0)) \u003d\u003e is_(RESULT, map (Track) to (int))))","operation call obligation:(forall text:seq of (char) \u0026 ((\"\" \u003d \"\") \u003c\u003d\u003e (\"\" \u003d nil)))","legal sequence application obligation:(forall index:int \u0026 (((index \u003e 0) and (index \u003c (len fTests))) \u003d\u003e (index in set (inds fTests))))","type compatibility obligation:(forall ptst:Test, perr:Throwable \u0026 is_(perr, Error))","legal function application obligation:pre_ToStringInt(runCount())","legal function application obligation:pre_ToStringInt(failureCount())","legal function application obligation:pre_ToStringInt(errorCount())","legal sequence application obligation:(i in set (inds fFailures))","legal sequence application obligation:(i in set (inds fErrors))","legal sequence application obligation:(i in set (inds fErrors))","type compatibility obligation:(forall val:int \u0026 is_(val, real))","type compatibility obligation:(forall val:int \u0026 ((val \u003e\u003d 0) \u003d\u003e is_(val, real)))","type compatibility obligation:(forall val:int \u0026 ((val \u003e\u003d 0) \u003d\u003e is_(val, real)))","legal function application obligation:(forall val:int \u0026 ((val \u003e\u003d 0) \u003d\u003e let result:int \u003d (val mod 10), rest:int \u003d (val div 10) in ((rest \u003e 0) \u003d\u003e pre_ToStringInt(rest))))","legal function application obligation:(forall val:int \u0026 ((val \u003e\u003d 0) \u003d\u003e let result:int \u003d (val mod 10), rest:int \u003d (val div 10) in ((rest \u003e 0) \u003d\u003e pre_GetStringFromNum(result))))","legal function application obligation:(forall val:int \u0026 ((val \u003e\u003d 0) \u003d\u003e let result:int \u003d (val mod 10), rest:int \u003d (val div 10) in ((not (rest \u003e 0)) \u003d\u003e pre_GetStringFromNum(result))))","legal sequence application obligation:(forall val:int \u0026 ((val \u003c 10) \u003d\u003e ((val + 1) in set (inds \"0123456789\"))))"]