["type invariant satisfiable obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 8:1: (exists num:TargetTemp \u0026 (num \u003c\u003d 100))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 11:1: (exists num:CurrentTemp \u0026 (num \u003c\u003d 100))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 14:1: (exists num:TargetHumid \u0026 (num \u003c\u003d 100))","type invariant satisfiable obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 17:1: (exists num:CurrentHumid \u0026 (num \u003c\u003d 100))","non-empty sequence obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 44:77: (forall haInputs:HAInputs, outputSoFar:HAOut, curTime:nat \u0026 ((not (haInputs \u003d [])) \u003d\u003e (haInputs \u003c\u003e [])))","non-empty sequence obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 45:22: (forall haInputs:HAInputs, outputSoFar:HAOut, curTime:nat \u0026 ((not (haInputs \u003d [])) \u003d\u003e (haInputs \u003c\u003e [])))","legal sequence application obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 49:44: (forall haInputs:HAInputs, outputSoFar:HAOut, curTime:nat \u0026 ((not (haInputs \u003d [])) \u003d\u003e let mk_(change, targetTemp, currentTemp, targetHumid, currentHumid):HAInput \u003d (hd haInputs), rest:HAInputs \u003d (tl haInputs), nextTime:nat \u003d (curTime + StepLength) in ((outputSoFar \u003c\u003e []) \u003d\u003e ((len outputSoFar) in set (inds outputSoFar)))))","non-empty sequence obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 62:72: (forall haInputs:HAInputs, outputSoFar:HAOut, curTime:AbsTime \u0026 (haInputs \u003c\u003e []))","non-empty sequence obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 63:17: (forall haInputs:HAInputs, outputSoFar:HAOut, curTime:AbsTime \u0026 (haInputs \u003c\u003e []))","non-zero obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 90:63: (forall targetTemp:nat, curTemp:nat, targetHumid:nat, curHumid:nat, curTime:nat, outputSoFar:seq of (OutStep) \u0026 (TempChangeDuration \u003c\u003e 0))","type compatibility obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 88:1: (forall targetTemp:nat, curTemp:nat, targetHumid:nat, curHumid:nat, curTime:nat, outputSoFar:seq of (OutStep) \u0026 is_(let tempChanged:real \u003d (((curHumid - targetHumid) * HumidChangeDuration) / TempChangeDuration), action:(\u003cDecTemp\u003e | \u003cIncTemp\u003e) \u003d (if ((curTemp - tempChanged) \u003e targetTemp)\nthen \u003cDecTemp\u003e\nelse \u003cIncTemp\u003e), timeChange:int \u003d (curTime + ((curHumid - targetHumid) * HumidChangeDuration)) in ((outputSoFar ^ [mk_(\u003cOpenWindow\u003e, curTime)]) ^ (if ((curTemp - tempChanged) \u003c\u003e targetTemp)\nthen [mk_(\u003cCloseWindow\u003e, timeChange), mk_(action, timeChange), mk_(\u003cLeaveTemp\u003e, (timeChange + (((abs (curTemp - targetTemp)) - tempChanged) * TempChangeDuration)))]\nelse [mk_(\u003cCloseWindow\u003e, timeChange)])), seq of (OutStep)))","legal sequence application obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 105:4: (forall output:seq of (OutStep), curTime:nat \u0026 (forall i in set (inds output) \u0026 (let mk_(-, t):OutStep \u003d output(i) in (t \u003c\u003d curTime) \u003d\u003e (i in set (inds output)))))","legal sequence application obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 105:54: (forall output:seq of (OutStep), curTime:nat \u0026 (forall i in set (inds output) \u0026 (i in set (inds output))))","legal sequence application obligation in \u0027DEFAULT\u0027 (HA.vdmsl) at line 109:27: (forall output:seq of (OutStep), curTime:nat \u0026 ((len output) in set (inds output)))"]