["state invariant initialized obligation in \u0027Account\u0027 (Account.vdmpp) at line 15:3: TransactionsInvariant([])","state invariant satisfiable obligation in \u0027Account\u0027 (Account.vdmpp) at line 15:3: (exists cards:map (CardId) to (Cardholder), balance:nat, transactions:seq of (Transaction) \u0026 TransactionsInvariant(transactions))","state invariant holds obligation in \u0027Account\u0027 (Account.vdmpp) at line 48:6: (forall cs:map (CardId) to (Cardholder), b:nat \u0026 (TransactionsInvariant(transactions) \u003d\u003e TransactionsInvariant(transactions)))","state invariant holds obligation in \u0027Account\u0027 (Account.vdmpp) at line 49:6: (forall cs:map (CardId) to (Cardholder), b:nat \u0026 (TransactionsInvariant(transactions) \u003d\u003e TransactionsInvariant(transactions)))","state invariant holds obligation in \u0027Account\u0027 (Account.vdmpp) at line 68:9: (forall cardId:CardId, amount:nat, date:Date \u0026 ((cardId in set (dom cards)) \u003d\u003e (TransactionsInvariant(transactions) \u003d\u003e TransactionsInvariant(transactions))))","type compatibility obligation in \u0027Account\u0027 (Account.vdmpp) at line 68:28: (forall cardId:CardId, amount:nat, date:Date \u0026 ((cardId in set (dom cards)) \u003d\u003e ((balance - amount) \u003e\u003d 0)))","state invariant holds obligation in \u0027Account\u0027 (Account.vdmpp) at line 69:9: (forall cardId:CardId, amount:nat, date:Date \u0026 ((cardId in set (dom cards)) \u003d\u003e (TransactionsInvariant(transactions) \u003d\u003e TransactionsInvariant((transactions ^ [transaction])))))","legal map application obligation in \u0027Account\u0027 (Account.vdmpp) at line 77:14: (forall cardId:CardId, date:Date \u0026 ((cardId in set (dom cards)) \u003d\u003e (cardId in set (dom cards))))","legal map application obligation in \u0027Account\u0027 (Account.vdmpp) at line 78:16: (forall cardId:CardId, date:Date \u0026 ((cardId in set (dom cards)) \u003d\u003e (cardId in set (dom cards))))","state invariant holds obligation in \u0027Account\u0027 (Account.vdmpp) at line 97:5: (forall cId:CardId, ch:Cardholder \u0026 ((cId not in set (dom cards)) \u003d\u003e (TransactionsInvariant(transactions) \u003d\u003e TransactionsInvariant(transactions))))","map compatible obligation in \u0027Account\u0027 (Account.vdmpp) at line 97:14: (forall cId:CardId, ch:Cardholder \u0026 ((cId not in set (dom cards)) \u003d\u003e (forall ldom1 in set (dom cards), rdom2 in set (dom {cId |-\u003e ch}) \u0026 ((ldom1 \u003d rdom2) \u003d\u003e (cards(ldom1) \u003d {cId |-\u003e ch}(rdom2))))))","state invariant holds obligation in \u0027Account\u0027 (Account.vdmpp) at line 102:5: (forall cId:CardId \u0026 ((cId in set (dom cards)) \u003d\u003e (TransactionsInvariant(transactions) \u003d\u003e TransactionsInvariant(transactions))))","legal sequence application obligation in \u0027Account\u0027 (Account.vdmpp) at line 108:25: (forall ts:seq of (Transaction) \u0026 (forall i in set (inds ts) \u0026 (i in set (inds ts))))","legal sequence application obligation in \u0027Account\u0027 (Account.vdmpp) at line 117:10: (forall date:Date, ts:seq of (Transaction) \u0026 (forall i in set (inds ts) \u0026 (((ts(i).date) \u003d date) \u003d\u003e (i in set (inds ts)))))","legal sequence application obligation in \u0027Account\u0027 (Account.vdmpp) at line 117:44: (forall date:Date, ts:seq of (Transaction) \u0026 (forall i in set (inds ts) \u0026 (i in set (inds ts))))","type compatibility obligation in \u0027Account\u0027 (Account.vdmpp) at line 115:3: (forall date:Date, ts:seq of (Transaction) \u0026 is_(Sum([(ts(i).amount) | i in set (inds ts) \u0026 ((ts(i).date) \u003d date)]), nat))","non-empty sequence obligation in \u0027Account\u0027 (Account.vdmpp) at line 123:10: (forall rs:seq of (real) \u0026 ((not (rs \u003d [])) \u003d\u003e (rs \u003c\u003e [])))","non-empty sequence obligation in \u0027Account\u0027 (Account.vdmpp) at line 123:22: (forall rs:seq of (real) \u0026 ((not (rs \u003d [])) \u003d\u003e (rs \u003c\u003e [])))","legal sequence application obligation in \u0027Test\u0027 (Test.vdmpp) at line 25:11: (forall events:seq of (Event) \u0026 (forall i in set (inds events) \u0026 (i in set (inds events))))","enumeration map injectivity obligation in \u0027System\u0027 (System.vdmpp) at line 20:20: (forall m1, m2 in set {{1 |-\u003e new Till(resource)}, {2 |-\u003e new Till(resource)}, {3 |-\u003e new Till(resource)}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","legal map application obligation in \u0027System\u0027 (System.vdmpp) at line 37:12: (forall tid:TillId \u0026 (tid in set (dom tills)))","enumeration map injectivity obligation in \u0027System\u0027 (System.vdmpp) at line 60:43: (forall m1, m2 in set {{5 |-\u003e peter}, {6 |-\u003e sten}, {7 |-\u003e CSK}} \u0026 (forall d3 in set (dom m1), d4 in set (dom m2) \u0026 ((d3 \u003d d4) \u003d\u003e (m1(d3) \u003d m2(d4)))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 27:10: (forall res:CentralResource \u0026 ((curCard \u003d nil) \u003d\u003e (not cardOk)))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 37:5: (forall c:Card \u0026 ((not CardInside()) \u003d\u003e (((curCard \u003d nil) \u003d\u003e (not cardOk)) \u003d\u003e ((c \u003d nil) \u003d\u003e (not cardOk)))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 52:8: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e (((curCard \u003d nil) \u003d\u003e (not cardOk)) \u003d\u003e ((curCard \u003d nil) \u003d\u003e (not (codeOk and cardLegal))))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 54:11: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e (((curCard \u003d nil) \u003d\u003e (not (codeOk and cardLegal))) \u003d\u003e ((curCard \u003d nil) \u003d\u003e (not (codeOk and cardLegal))))))","type compatibility obligation in \u0027Till\u0027 (Till.vdmpp) at line 54:42: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e is_((retainedCards union {curCard}), set of (Card))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 55:11: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e (((curCard \u003d nil) \u003d\u003e (not (codeOk and cardLegal))) \u003d\u003e ((nil \u003d nil) \u003d\u003e (not (codeOk and cardLegal))))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 62:14: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e (((nil \u003d nil) \u003d\u003e (not (codeOk and cardLegal))) \u003d\u003e ((nil \u003d nil) \u003d\u003e (not (codeOk and cardLegal))))))","type compatibility obligation in \u0027Till\u0027 (Till.vdmpp) at line 62:45: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e is_((retainedCards union {curCard}), set of (Card))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 63:14: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e (((nil \u003d nil) \u003d\u003e (not (codeOk and cardLegal))) \u003d\u003e ((nil \u003d nil) \u003d\u003e (not false)))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 64:14: (forall pin:PinCode \u0026 ((CardInside() and (not cardOk)) \u003d\u003e (((nil \u003d nil) \u003d\u003e (not false)) \u003d\u003e ((nil \u003d nil) \u003d\u003e (not false)))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 80:6: (CardInside() \u003d\u003e (((curCard \u003d nil) \u003d\u003e (not cardOk)) \u003d\u003e ((curCard \u003d nil) \u003d\u003e (not false))))","state invariant holds obligation in \u0027Till\u0027 (Till.vdmpp) at line 81:6: (CardInside() \u003d\u003e (((curCard \u003d nil) \u003d\u003e (not false)) \u003d\u003e ((nil \u003d nil) \u003d\u003e (not false))))","legal map application obligation in \u0027SimpleTest\u0027 (SimpleTest.vdmpp) at line 32:14: (1 in set (dom tills))","legal map application obligation in \u0027SimpleTest\u0027 (SimpleTest.vdmpp) at line 33:23: (1 in set (dom tills))","legal sequence application obligation in \u0027Letterbox\u0027 (Letterbox.vdmpp) at line 18:12: ((statements \u003c\u003e []) \u003d\u003e ((len statements) in set (inds statements)))","state invariant initialized obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 15:1: ((((dom {|-\u003e}) union {}) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))","state invariant satisfiable obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 15:1: (exists accounts:map (AccountId) to (Account), numberOfTries:map (CardId) to (nat), illegalCards:set of (CardId), letterbox:Letterbox, clock:Clock \u0026 (((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})))","state invariant initialized obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 25:3: ((((dom {|-\u003e}) union {}) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))","state invariant satisfiable obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 25:3: (exists accounts:map (AccountId) to (Account), numberOfTries:map (CardId) to (nat), illegalCards:set of (CardId), letterbox:Letterbox, clock:Clock \u0026 (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))","state invariant holds obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 35:6: (forall c:Clock, l:Letterbox \u0026 (((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))) \u003d\u003e ((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))))","state invariant holds obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 36:6: (forall c:Clock, l:Letterbox \u0026 (((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))) \u003d\u003e ((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))))","legal map application obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 66:10: (forall accountId:AccountId, cardId:CardId \u0026 (accountId in set (dom accounts)))","legal map application obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 81:21: (forall accountId:AccountId, cardId:CardId \u0026 ((cardId not in set illegalCards) \u003d\u003e ((accountId in set (dom accounts)) \u003d\u003e (accountId in set (dom accounts)))))","legal map application obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 85:12: (forall cardId:CardId \u0026 (cardId in set (dom numberOfTries)))","state invariant holds obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 89:5: (forall cardId:CardId \u0026 (((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))) \u003d\u003e ((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))))","state invariant holds obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 93:5: (forall cardId:CardId \u0026 (((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))) \u003d\u003e ((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))))","legal map application obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 93:30: (forall cardId:CardId \u0026 (cardId in set (dom numberOfTries)))","state invariant holds obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 101:5: (((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))) \u003d\u003e ((((dom (numberOfTries ++ {cId |-\u003e 0 | cId in set (acc.GetCardIds)()})) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))))","state invariant holds obligation in \u0027CentralResource\u0027 (CentralResource.vdmpp) at line 110:5: (forall cId:CardId \u0026 (((((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))) \u003d\u003e ((((dom numberOfTries) union (illegalCards union {cId})) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)})) and (forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {}))))))"]