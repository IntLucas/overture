["legal map application obligation in \u0027PacemakerAOO\u0027 (PacemakerAOO.vdmsl) at line 103:36: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 (forall i in set (dom r) \u0026 (i in set (dom r)))))","legal map application obligation in \u0027PacemakerAOO\u0027 (PacemakerAOO.vdmsl) at line 106:29: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 let m:set of (Time) \u003d {i | i in set (dom r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in ((((card (dom r)) \u003d (card (dom inp))) and ((card (dom inp)) \u003e 1)) \u003d\u003e (1 in set (dom r)))))","non-zero obligation in \u0027PacemakerAOO\u0027 (PacemakerAOO.vdmsl) at line 110:58: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 let m:set of (Time) \u003d {i | i in set (dom r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in ((((card (dom r)) \u003d (card (dom inp))) and ((card (dom inp)) \u003e 1)) \u003d\u003e ((r(1) \u003d \u003cPULSE\u003e) \u003d\u003e (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e (forall y in set m \u0026 (LRL \u003c\u003e 0))))))))","function postcondition satisfiable obligation in \u0027PacemakerAOO\u0027 (PacemakerAOO.vdmsl) at line 102:1: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 post_Pacemaker(inp, r)))","non-zero obligation in \u0027PacemakerDOO\u0027 (PacemakerDOO.vdmsl) at line 75:23: (forall mk_(inp, n):(SensedTimeline * nat1) \u0026 (exists r:ReactionTimeline \u0026 let nPulsesAtria:nat \u003d (card {i | i in set r \u0026 ((i.#1) \u003d \u003cATRIA\u003e)}), nPulsesVentricle:nat \u003d (card {i | i in set r \u0026 ((i.#1) \u003d \u003cVENTRICLE\u003e)}) in (n \u003c\u003e 0)))","non-zero obligation in \u0027PacemakerDOO\u0027 (PacemakerDOO.vdmsl) at line 77:27: (forall mk_(inp, n):(SensedTimeline * nat1) \u0026 (exists r:ReactionTimeline \u0026 let nPulsesAtria:nat \u003d (card {i | i in set r \u0026 ((i.#1) \u003d \u003cATRIA\u003e)}), nPulsesVentricle:nat \u003d (card {i | i in set r \u0026 ((i.#1) \u003d \u003cVENTRICLE\u003e)}) in (((nPulsesAtria / n) \u003e\u003d ((LRL / 60) / 1000)) \u003d\u003e (n \u003c\u003e 0))))","function postcondition satisfiable obligation in \u0027PacemakerDOO\u0027 (PacemakerDOO.vdmsl) at line 72:1: (forall mk_(inp, n):(SensedTimeline * nat1) \u0026 (exists r:ReactionTimeline \u0026 post_Pacemaker(mk_(inp, n), r)))","legal sequence application obligation in \u0027PacemakerAAT\u0027 (PacemakerAAT.vdmsl) at line 74:37: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 (forall i in set (inds r) \u0026 (i in set (inds r)))))","non-zero obligation in \u0027PacemakerAAT\u0027 (PacemakerAAT.vdmsl) at line 79:65: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 let m:set of (nat1) \u003d {i | i in set (inds r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in (((len r) \u003d (len inp)) \u003d\u003e (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e (forall z in set m \u0026 ((z \u003e\u003d x) \u003d\u003e (LRL \u003c\u003e 0))))))))","function postcondition satisfiable obligation in \u0027PacemakerAAT\u0027 (PacemakerAAT.vdmsl) at line 73:1: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 post_Pacemaker(inp, r)))","legal sequence application obligation in \u0027PacemakerAAI\u0027 (PacemakerAAI.vdmsl) at line 72:37: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 (forall i in set (inds r) \u0026 (i in set (inds r)))))","legal sequence application obligation in \u0027PacemakerAAI\u0027 (PacemakerAAI.vdmsl) at line 75:9: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 let m:set of (nat1) \u003d {i | i in set (inds r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in (((len r) \u003d (len inp)) \u003d\u003e (1 in set (inds r)))))","non-zero obligation in \u0027PacemakerAAI\u0027 (PacemakerAAI.vdmsl) at line 79:65: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 let m:set of (nat1) \u003d {i | i in set (inds r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in (((len r) \u003d (len inp)) \u003d\u003e ((r(1) \u003d \u003cPULSE\u003e) \u003d\u003e (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e (forall z in set m \u0026 ((z \u003e\u003d x) \u003d\u003e (LRL \u003c\u003e 0)))))))))","legal sequence application obligation in \u0027PacemakerAAI\u0027 (PacemakerAAI.vdmsl) at line 81:74: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 let m:set of (nat1) \u003d {i | i in set (inds r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in (((len r) \u003d (len inp)) \u003d\u003e ((r(1) \u003d \u003cPULSE\u003e) \u003d\u003e (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e ((not (exists z in set m \u0026 ((z \u003e\u003d x) and ((z - x) \u003c\u003d (60000 / LRL))))) \u003d\u003e (forall z in set (inds inp) \u0026 ((z \u003e\u003d x) \u003d\u003e (((z - x) \u003e ARP) \u003d\u003e (z in set (inds inp))))))))))))","function postcondition satisfiable obligation in \u0027PacemakerAAI\u0027 (PacemakerAAI.vdmsl) at line 71:1: (forall inp:SenseTimeline \u0026 (exists r:ReactionTimeline \u0026 post_Pacemaker(inp, r)))","legal sequence application obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 60:21: (forall stl:seq of ((Sense * [AccelerometerData] * Time)) \u0026 (forall i in set (inds stl) \u0026 (((stl(i).#2) \u003c\u003e nil) \u003d\u003e (i in set (inds stl)))))","legal sequence application obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 60:53: (forall stl:seq of ((Sense * [AccelerometerData] * Time)) \u0026 (forall i in set (inds stl) \u0026 (i in set (inds stl))))","legal sequence application obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 61:15: (forall stl:seq of ((Sense * [AccelerometerData] * Time)) \u0026 let l:seq of ([AccelerometerData]) \u003d [(stl(i).#2) | i in set (inds stl) \u0026 ((stl(i).#2) \u003c\u003e nil)] in (1 in set (inds l)))","legal sequence application obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 61:56: (forall stl:seq of ((Sense * [AccelerometerData] * Time)) \u0026 let l:seq of ([AccelerometerData]) \u003d [(stl(i).#2) | i in set (inds stl) \u0026 ((stl(i).#2) \u003c\u003e nil)] in ((l(1) \u003d HIGH) \u003d\u003e (forall i in set (inds l) \u0026 (i in set (inds l)))))","legal sequence application obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 61:70: (forall stl:seq of ((Sense * [AccelerometerData] * Time)) \u0026 let l:seq of ([AccelerometerData]) \u003d [(stl(i).#2) | i in set (inds stl) \u0026 ((stl(i).#2) \u003c\u003e nil)] in ((l(1) \u003d HIGH) \u003d\u003e (forall i in set (inds l) \u0026 ((l(i) \u003c MED) \u003d\u003e ((i - 1) in set (inds l))))))","type invariant satisfiable obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 59:1: (exists stl:SenseTimeline \u0026 let l:seq of ([AccelerometerData]) \u003d [(stl(i).#2) | i in set (inds stl) \u0026 ((stl(i).#2) \u003c\u003e nil)] in ((l(1) \u003d HIGH) and (forall i in set (inds l) \u0026 ((l(i) \u003c MED) \u003d\u003e (l((i - 1)) \u003e MED)))))","type invariant satisfiable obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 63:1: (exists n:AccelerometerData \u0026 (n \u003c 3))","non-empty sequence obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 99:36: (forall inp:SenseTimeline, oldstate:Sigma \u0026 ((not (inp \u003d [])) \u003d\u003e (inp \u003c\u003e [])))","non-empty sequence obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 99:57: (forall inp:SenseTimeline, oldstate:Sigma \u0026 ((not (inp \u003d [])) \u003d\u003e (inp \u003c\u003e [])))","legal map application obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 105:55: (forall mk_(-, acc, time):(Sense * [AccelerometerData] * Time), oldstate:Sigma \u0026 (true \u003d\u003e (time in set (dom rateChangePlan))))","type compatibility obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 134:28: inv_AccelerometerData(0)","type compatibility obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 135:28: inv_AccelerometerData(1)","type compatibility obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 136:28: inv_AccelerometerData(2)","type compatibility obligation in \u0027PacemakerAOOR\u0027 (PacemakerAOOR.vdmsl) at line 142:22: is_((((([mk_(\u003cNONE\u003e, nil, i) | i in set {1, ... ,120}] ^ [mk_(\u003cNONE\u003e, HIGH, 121)]) ^ [mk_(\u003cNONE\u003e, nil, i) | i in set {121, ... ,190}]) ^ [mk_(\u003cNONE\u003e, LOW, 191)]) ^ [mk_(\u003cNONE\u003e, nil, i) | i in set {192, ... ,436}]), seq of ((Sense * [AccelerometerData] * Time)))","type invariant satisfiable obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 58:1: (exists a:ActivityData \u0026 (a \u003c\u003d 7))","type invariant satisfiable obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 66:1: (exists rf:RF \u0026 (rf \u003c\u003d 16))","type invariant satisfiable obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 77:1: (exists ppm:PPM \u0026 ((ppm \u003e\u003d 30) and (ppm \u003c\u003d 175)))","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 86:26: inv_PPM(60)","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 87:26: inv_PPM(120)","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 88:35: inv_ActivityData(6)","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 90:25: inv_RF(8)","legal map application obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 102:14: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 (t in set (dom out))))))","legal map application obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 102:31: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 ((out(t) \u003d MSR) \u003d\u003e ((t - ReactionTime) in set (dom inp)))))))","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 102:36: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 ((out(t) \u003d MSR) \u003d\u003e is_((t - ReactionTime), nat1))))))","legal map application obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 102:66: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 ((out(t) \u003d MSR) \u003d\u003e ((not (inp((t - ReactionTime)) \u003e Threshold)) \u003d\u003e ((t - 1) in set (dom out))))))))","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 102:71: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 ((out(t) \u003d MSR) \u003d\u003e ((not (inp((t - ReactionTime)) \u003e Threshold)) \u003d\u003e is_((t - 1), nat1)))))))","legal map application obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 105:14: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 (((out(t) \u003d MSR) \u003d\u003e ((inp((t - ReactionTime)) \u003e Threshold) or (out((t - 1)) \u003d MSR))) \u003d\u003e (forall t in set ((dom inp) \\ {1}) \u0026 (t in set (dom out))))))))","legal map application obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 105:31: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 (((out(t) \u003d MSR) \u003d\u003e ((inp((t - ReactionTime)) \u003e Threshold) or (out((t - 1)) \u003d MSR))) \u003d\u003e (forall t in set ((dom inp) \\ {1}) \u0026 ((out(t) \u003d LRL) \u003d\u003e ((t - RecoveryTime) in set (dom inp)))))))))","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 105:36: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 (((out(t) \u003d MSR) \u003d\u003e ((inp((t - ReactionTime)) \u003e Threshold) or (out((t - 1)) \u003d MSR))) \u003d\u003e (forall t in set ((dom inp) \\ {1}) \u0026 ((out(t) \u003d LRL) \u003d\u003e is_((t - RecoveryTime), nat1))))))))","legal map application obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 105:66: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 (((out(t) \u003d MSR) \u003d\u003e ((inp((t - ReactionTime)) \u003e Threshold) or (out((t - 1)) \u003d MSR))) \u003d\u003e (forall t in set ((dom inp) \\ {1}) \u0026 ((out(t) \u003d LRL) \u003d\u003e ((not (inp((t - RecoveryTime)) \u003c Threshold)) \u003d\u003e ((t - 1) in set (dom out))))))))))","type compatibility obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 105:71: (forall inp:Input \u0026 ((0 not in set (dom inp)) \u003d\u003e (exists out:Output \u0026 (forall t in set (dom inp) \u0026 (((out(t) \u003d MSR) \u003d\u003e ((inp((t - ReactionTime)) \u003e Threshold) or (out((t - 1)) \u003d MSR))) \u003d\u003e (forall t in set ((dom inp) \\ {1}) \u0026 ((out(t) \u003d LRL) \u003d\u003e ((not (inp((t - RecoveryTime)) \u003c Threshold)) \u003d\u003e is_((t - 1), nat1)))))))))","function postcondition satisfiable obligation in \u0027RateController\u0027 (RateController.vdmsl) at line 99:1: (forall inp:Input \u0026 (pre_Simulate(inp) \u003d\u003e (exists out:Output \u0026 post_Simulate(inp, out))))","type compatibility obligation in \u0027PacemakerDDD\u0027 (PacemakerDDD.vdmsl) at line 45:1: (forall t:Time, r:ReactionTimeline, AA:Alarm, VA:Alarm, LastA:Time, LastV:Time \u0026 is_((if (((t - LastA) \u003c ARP) or ((VA \u003e 0) or ((t - LastA) \u003c PVARP)))\nthen SensedNothing(t, r, AA, VA, LastA, LastV)\nelse mk_(r, 0, (t + AVD), t, LastV)), (ReactionTimeline * Alarm * Alarm * Time * Time)))","type compatibility obligation in \u0027PacemakerDDD\u0027 (PacemakerDDD.vdmsl) at line 53:1: (forall t:Time, r:ReactionTimeline, AA:Alarm, VA:Alarm, LastA:Time, LastV:Time \u0026 is_((if ((t - LastV) \u003c VRP)\nthen SensedNothing(t, r, AA, VA, LastA, LastV)\nelse mk_(r, (t + VAD), 0, LastA, t)), (ReactionTimeline * Alarm * Alarm * Time * Time)))","type compatibility obligation in \u0027PacemakerDDD\u0027 (PacemakerDDD.vdmsl) at line 61:1: (forall t:Time, r:ReactionTimeline, AA:Alarm, VA:Alarm, LastA:Time, LastV:Time \u0026 is_((if ((AA \u003e 0) and (t \u003e\u003d AA))\nthen mk_((r union {mk_(t, \u003cATRIUM\u003e)}), 0, (t + AVD), t, LastV)\nelseif ((VA \u003e 0) and (t \u003e\u003d VA))\nthen mk_((r union {mk_(t, \u003cVENTRICLE\u003e)}), (t + VAD), 0, LastA, t)\nelse mk_(r, AA, VA, LastA, LastV)), (ReactionTimeline * Alarm * Alarm * Time * Time)))"]