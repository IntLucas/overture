<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="6" line="55" message="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 55:6&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  mk_token(&quot;pinit&quot;) in set dom Os)&#10;" number="1" object="" resource="PlannerSL" toString="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 55:6&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  mk_token(&quot;pinit&quot;) in set dom Os)&#10;"/>
<po column="6" line="56" message="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 56:6&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    mk_token(&quot;goal&quot;) in set dom Os))&#10;" number="2" object="" resource="PlannerSL" toString="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 56:6&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    mk_token(&quot;goal&quot;) in set dom Os))&#10;"/>
<po column="32" line="57" message="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 57:32&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    ((Os(mk_token(&quot;goal&quot;)) = mk_Action([mk_token(&quot;goal&quot;)], (pp.G), {}, {})) =&gt;&#10;      mk_token(&quot;pinit&quot;) in set dom Os)))&#10;" number="3" object="" resource="PlannerSL" toString="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 57:32&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    ((Os(mk_token(&quot;goal&quot;)) = mk_Action([mk_token(&quot;goal&quot;)], (pp.G), {}, {})) =&gt;&#10;      mk_token(&quot;pinit&quot;) in set dom Os)))&#10;"/>
<po column="55" line="57" message="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 57:55&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    ((Os(mk_token(&quot;goal&quot;)) = mk_Action([mk_token(&quot;goal&quot;)], (pp.G), {}, {})) =&gt;&#10;      mk_token(&quot;goal&quot;) in set dom Os)))&#10;" number="4" object="" resource="PlannerSL" toString="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 57:55&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    ((Os(mk_token(&quot;goal&quot;)) = mk_Action([mk_token(&quot;goal&quot;)], (pp.G), {}, {})) =&gt;&#10;      mk_token(&quot;goal&quot;) in set dom Os)))&#10;"/>
<po column="47" line="60" message="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 60:47&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    ((Os(mk_token(&quot;goal&quot;)) = mk_Action([mk_token(&quot;goal&quot;)], (pp.G), {}, {})) =&gt;&#10;      (((rng Os) subset ((pp.AS) union {Os(mk_token(&quot;pinit&quot;)), Os(mk_token(&quot;goal&quot;))})) =&gt;&#10;        (((dom Os) = get_nodes(Ts)) =&gt;&#10;          (((As inter Ps) = {}) =&gt;&#10;            (forall A in set (dom Os) &amp;&#10;              A in set dom Os)))))))&#10;" number="5" object="" resource="PlannerSL" toString="pp, pp~, Os, Os~, Ts, Ts~, Ps, Ps~, As, As~, Partial_Plan, Partial_Plan~: map apply obligation in 'DEFAULT' (PlannerSL) at line 60:47&#10;(forall mk_Partial_Plan(pp, Os, Ts, Ps, As):Partial_Plan &amp;&#10;  ((Os(mk_token(&quot;pinit&quot;)) = mk_Action([mk_token(&quot;pinit&quot;)], {}, (pp.I), {})) =&gt;&#10;    ((Os(mk_token(&quot;goal&quot;)) = mk_Action([mk_token(&quot;goal&quot;)], (pp.G), {}, {})) =&gt;&#10;      (((rng Os) subset ((pp.AS) union {Os(mk_token(&quot;pinit&quot;)), Os(mk_token(&quot;goal&quot;))})) =&gt;&#10;        (((dom Os) = get_nodes(Ts)) =&gt;&#10;          (((As inter Ps) = {}) =&gt;&#10;            (forall A in set (dom Os) &amp;&#10;              A in set dom Os)))))))&#10;"/>
<po column="1" line="84" message="initposet: subtype obligation in 'DEFAULT' (PlannerSL) at line 84:1&#10;inv_Bounded_Poset({mk_Arc(mk_token(&quot;pinit&quot;), mk_token(&quot;goal&quot;))}) and (&#10;and is_({mk_Arc(mk_token(&quot;pinit&quot;), mk_token(&quot;goal&quot;))}, set of (Arc)))&#10;" number="6" object="" resource="PlannerSL" toString="initposet: subtype obligation in 'DEFAULT' (PlannerSL) at line 84:1&#10;inv_Bounded_Poset({mk_Arc(mk_token(&quot;pinit&quot;), mk_token(&quot;goal&quot;))}) and (&#10;and is_({mk_Arc(mk_token(&quot;pinit&quot;), mk_token(&quot;goal&quot;))}, set of (Arc)))&#10;"/>
<po column="1" line="88" message="add_node: subtype obligation in 'DEFAULT' (PlannerSL) at line 88:1&#10;(forall u:Action_id, p:Bounded_Poset &amp;&#10;  inv_Bounded_Poset((p union {mk_Arc(mk_token(&quot;pinit&quot;), u), mk_Arc(u, mk_token(&quot;goal&quot;))})) and (is_((p union {mk_Arc(mk_token(&quot;pinit&quot;), u), mk_Arc(u, mk_token(&quot;goal&quot;))}), set of (Arc))))&#10;" number="7" object="" resource="PlannerSL" toString="add_node: subtype obligation in 'DEFAULT' (PlannerSL) at line 88:1&#10;(forall u:Action_id, p:Bounded_Poset &amp;&#10;  inv_Bounded_Poset((p union {mk_Arc(mk_token(&quot;pinit&quot;), u), mk_Arc(u, mk_token(&quot;goal&quot;))})) and (is_((p union {mk_Arc(mk_token(&quot;pinit&quot;), u), mk_Arc(u, mk_token(&quot;goal&quot;))}), set of (Arc))))&#10;"/>
<po column="1" line="92" message="make_before: subtype obligation in 'DEFAULT' (PlannerSL) at line 92:1&#10;(forall u:Action_id, v:Action_id, p:Bounded_Poset &amp;&#10;  inv_Bounded_Poset((if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))&#10;  then (p union {mk_Arc(u, v)})&#10;  else p)) and (is_((if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))&#10;  then (p union {mk_Arc(u, v)})&#10;  else p), set of (Arc))))&#10;" number="8" object="" resource="PlannerSL" toString="make_before: subtype obligation in 'DEFAULT' (PlannerSL) at line 92:1&#10;(forall u:Action_id, v:Action_id, p:Bounded_Poset &amp;&#10;  inv_Bounded_Poset((if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))&#10;  then (p union {mk_Arc(u, v)})&#10;  else p)) and (is_((if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))&#10;  then (p union {mk_Arc(u, v)})&#10;  else p), set of (Arc))))&#10;"/>
<po column="1" line="98" message="newid: function satisfiability obligation in 'DEFAULT' (PlannerSL) at line 98:1&#10;(forall isa:set of (Action_id) &amp;&#10;  exists i:Action_id &amp; post_newid(isa, i))&#10;" number="9" object="" resource="PlannerSL" toString="newid: function satisfiability obligation in 'DEFAULT' (PlannerSL) at line 98:1&#10;(forall isa:set of (Action_id) &amp;&#10;  exists i:Action_id &amp; post_newid(isa, i))&#10;"/>
<po column="14" line="104" message="achieve: map apply obligation in 'DEFAULT' (PlannerSL) at line 104:14&#10;(forall Os:Action_instances, Ts:Bounded_Poset, A:Action_id, mk_Goal_instance(p, O):Goal_instance &amp;&#10;  (before(A, O, Ts) =&gt;&#10;    A in set dom Os))&#10;" number="10" object="" resource="PlannerSL" toString="achieve: map apply obligation in 'DEFAULT' (PlannerSL) at line 104:14&#10;(forall Os:Action_instances, Ts:Bounded_Poset, A:Action_id, mk_Goal_instance(p, O):Goal_instance &amp;&#10;  (before(A, O, Ts) =&gt;&#10;    A in set dom Os))&#10;"/>
<po column="14" line="108" message="achieve: map apply obligation in 'DEFAULT' (PlannerSL) at line 108:14&#10;(forall Os:Action_instances, Ts:Bounded_Poset, A:Action_id, mk_Goal_instance(p, O):Goal_instance &amp;&#10;  (before(A, O, Ts) =&gt;&#10;    ((p in set (Os(A).add)) =&gt;&#10;      (forall C in set (dom Os) &amp;&#10;        (possibly_before(C, O, Ts) =&gt;&#10;          (possibly_before(A, C, Ts) =&gt;&#10;            C in set dom Os))))))&#10;" number="11" object="" resource="PlannerSL" toString="achieve: map apply obligation in 'DEFAULT' (PlannerSL) at line 108:14&#10;(forall Os:Action_instances, Ts:Bounded_Poset, A:Action_id, mk_Goal_instance(p, O):Goal_instance &amp;&#10;  (before(A, O, Ts) =&gt;&#10;    ((p in set (Os(A).add)) =&gt;&#10;      (forall C in set (dom Os) &amp;&#10;        (possibly_before(C, O, Ts) =&gt;&#10;          (possibly_before(A, C, Ts) =&gt;&#10;            C in set dom Os))))))&#10;"/>
<po column="18" line="113" message="declobber: map apply obligation in 'DEFAULT' (PlannerSL) at line 113:18&#10;(forall Os:Action_instances, Ts:Bounded_Poset, NewA:Action_id, mk_Goal_instance(q, C):Goal_instance &amp;&#10;  (not before(C, NewA, Ts) =&gt;&#10;    NewA in set dom Os))&#10;" number="12" object="" resource="PlannerSL" toString="declobber: map apply obligation in 'DEFAULT' (PlannerSL) at line 113:18&#10;(forall Os:Action_instances, Ts:Bounded_Poset, NewA:Action_id, mk_Goal_instance(q, C):Goal_instance &amp;&#10;  (not before(C, NewA, Ts) =&gt;&#10;    NewA in set dom Os))&#10;"/>
<po column="14" line="117" message="declobber: map apply obligation in 'DEFAULT' (PlannerSL) at line 117:14&#10;(forall Os:Action_instances, Ts:Bounded_Poset, NewA:Action_id, mk_Goal_instance(q, C):Goal_instance &amp;&#10;  (not before(C, NewA, Ts) =&gt;&#10;    (not (not (q in set (Os(NewA).del))) =&gt;&#10;      (forall W in set (dom Os) &amp;&#10;        (before(NewA, W, Ts) =&gt;&#10;          (before(W, C, Ts) =&gt;&#10;            W in set dom Os))))))&#10;" number="13" object="" resource="PlannerSL" toString="declobber: map apply obligation in 'DEFAULT' (PlannerSL) at line 117:14&#10;(forall Os:Action_instances, Ts:Bounded_Poset, NewA:Action_id, mk_Goal_instance(q, C):Goal_instance &amp;&#10;  (not before(C, NewA, Ts) =&gt;&#10;    (not (not (q in set (Os(NewA).del))) =&gt;&#10;      (forall W in set (dom Os) &amp;&#10;        (before(NewA, W, Ts) =&gt;&#10;          (before(W, C, Ts) =&gt;&#10;            W in set dom Os))))))&#10;"/>
<po column="11" line="128" message="INIT: map sequence compatible obligation in 'DEFAULT' (PlannerSL) at line 128:11&#10;((pp = ppi) =&gt;&#10;  forall m1, m2 in set {{mk_token(&quot;pinit&quot;) |-&gt; mk_Action([mk_token(&quot;pinit&quot;)], {}, (ppi.I), {})}, {mk_token(&quot;goal&quot;) |-&gt; mk_Action([mk_token(&quot;goal&quot;)], (ppi.G), {}, {})}} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="14" object="" resource="PlannerSL" toString="INIT: map sequence compatible obligation in 'DEFAULT' (PlannerSL) at line 128:11&#10;((pp = ppi) =&gt;&#10;  forall m1, m2 in set {{mk_token(&quot;pinit&quot;) |-&gt; mk_Action([mk_token(&quot;pinit&quot;)], {}, (ppi.I), {})}, {mk_token(&quot;goal&quot;) |-&gt; mk_Action([mk_token(&quot;goal&quot;)], (ppi.G), {}, {})}} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="1" line="121" message="INIT: operation post condition obligation in 'DEFAULT' (PlannerSL) at line 121:1&#10;((pp = ppi) and ((Os = {mk_token(&quot;pinit&quot;) |-&gt; mk_Action([mk_token(&quot;pinit&quot;)], {}, (ppi.I), {}), mk_token(&quot;goal&quot;) |-&gt; mk_Action([mk_token(&quot;goal&quot;)], (ppi.G), {}, {})}) and ((Ts = initposet()) and ((Ps = {mk_Goal_instance(g, mk_token(&quot;goal&quot;)) | [g in set (ppi.G)]}) and (As = {})))))&#10;" number="15" object="" resource="PlannerSL" toString="INIT: operation post condition obligation in 'DEFAULT' (PlannerSL) at line 121:1&#10;((pp = ppi) and ((Os = {mk_token(&quot;pinit&quot;) |-&gt; mk_Action([mk_token(&quot;pinit&quot;)], {}, (ppi.I), {}), mk_token(&quot;goal&quot;) |-&gt; mk_Action([mk_token(&quot;goal&quot;)], (ppi.G), {}, {})}) and ((Ts = initposet()) and ((Ps = {mk_Goal_instance(g, mk_token(&quot;goal&quot;)) | [g in set (ppi.G)]}) and (As = {})))))&#10;"/>
<po column="1" line="121" message="INIT: operation satifiability obligation in 'DEFAULT' (PlannerSL) at line 121:1&#10;(forall ppi:Planning_Problem, oldstate:Partial_Plan &amp;&#10;  post_INIT(ppi, oldstate, newstate))&#10;" number="16" object="" resource="PlannerSL" toString="INIT: operation satifiability obligation in 'DEFAULT' (PlannerSL) at line 121:1&#10;(forall ppi:Planning_Problem, oldstate:Partial_Plan &amp;&#10;  post_INIT(ppi, oldstate, newstate))&#10;"/>
<po column="1" line="137" message="ACHIEVE_1: operation post condition obligation in 'DEFAULT' (PlannerSL) at line 137:1&#10;(exists [A in set (dom Os)] &amp; (achieve(Os, Ts, A, gi) and (completion_of(Ts, Ts~) and ((Ps = (Ps~ \ {gi})) and (As = (As~ union {gi}))))))&#10;" number="17" object="" resource="PlannerSL" toString="ACHIEVE_1: operation post condition obligation in 'DEFAULT' (PlannerSL) at line 137:1&#10;(exists [A in set (dom Os)] &amp; (achieve(Os, Ts, A, gi) and (completion_of(Ts, Ts~) and ((Ps = (Ps~ \ {gi})) and (As = (As~ union {gi}))))))&#10;"/>
<po column="1" line="137" message="ACHIEVE_1: operation satifiability obligation in 'DEFAULT' (PlannerSL) at line 137:1&#10;(forall gi:Goal_instance, oldstate:Partial_Plan &amp;&#10;  pre_ACHIEVE_1(gi, oldstate) =&gt;&#10;  post_ACHIEVE_1(gi, oldstate, newstate))&#10;" number="18" object="" resource="PlannerSL" toString="ACHIEVE_1: operation satifiability obligation in 'DEFAULT' (PlannerSL) at line 137:1&#10;(forall gi:Goal_instance, oldstate:Partial_Plan &amp;&#10;  pre_ACHIEVE_1(gi, oldstate) =&gt;&#10;  post_ACHIEVE_1(gi, oldstate, newstate))&#10;"/>
<po column="1" line="149" message="ACHIEVE_2: operation post condition obligation in 'DEFAULT' (PlannerSL) at line 149:1&#10;let NewA:Action_id = newid((dom Os~)) in (exists [A in set (pp.AS)] &amp; ((Os = (Os~ ++ {NewA |-&gt; A})) and (achieve(Os, Ts, NewA, gi) and (forall gj in set As~ &amp; (declobber(Os, Ts, NewA, gj) and (completion_of(Ts, add_node(NewA, Ts~)) and ((Ps = ((Ps~ \ {gi}) union {mk_Goal_instance(p, NewA) | [p in set (A.pra)]})) and (As = (As~ union {gi})))))))))&#10;" number="19" object="" resource="PlannerSL" toString="ACHIEVE_2: operation post condition obligation in 'DEFAULT' (PlannerSL) at line 149:1&#10;let NewA:Action_id = newid((dom Os~)) in (exists [A in set (pp.AS)] &amp; ((Os = (Os~ ++ {NewA |-&gt; A})) and (achieve(Os, Ts, NewA, gi) and (forall gj in set As~ &amp; (declobber(Os, Ts, NewA, gj) and (completion_of(Ts, add_node(NewA, Ts~)) and ((Ps = ((Ps~ \ {gi}) union {mk_Goal_instance(p, NewA) | [p in set (A.pra)]})) and (As = (As~ union {gi})))))))))&#10;"/>
<po column="1" line="149" message="ACHIEVE_2: operation satifiability obligation in 'DEFAULT' (PlannerSL) at line 149:1&#10;(forall gi:Goal_instance, oldstate:Partial_Plan &amp;&#10;  pre_ACHIEVE_2(gi, oldstate) =&gt;&#10;  post_ACHIEVE_2(gi, oldstate, newstate))&#10;" number="20" object="" resource="PlannerSL" toString="ACHIEVE_2: operation satifiability obligation in 'DEFAULT' (PlannerSL) at line 149:1&#10;(forall gi:Goal_instance, oldstate:Partial_Plan &amp;&#10;  pre_ACHIEVE_2(gi, oldstate) =&gt;&#10;  post_ACHIEVE_2(gi, oldstate, newstate))&#10;"/>
</result>
</testResult>
