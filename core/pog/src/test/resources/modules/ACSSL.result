<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="31" line="12" message="Kg: subtype obligation in 'DEFAULT' (ACSSL) at line 12:31&#10;(forall k:(Inf | real) &amp;&#10;  is_real(k))&#10;" number="1" object="" resource="ACSSL" toString="Kg: subtype obligation in 'DEFAULT' (ACSSL) at line 12:31&#10;(forall k:(Inf | real) &amp;&#10;  is_real(k))&#10;"/>
<po column="26" line="69" message="Quad: function apply obligation in 'DEFAULT' (ACSSL) at line 69:26&#10;(forall q:seq of (Point) &amp;&#10;  (((len q) = 4) =&gt;&#10;    pre_rectangular(q)))&#10;" number="2" object="" resource="ACSSL" toString="Quad: function apply obligation in 'DEFAULT' (ACSSL) at line 69:26&#10;(forall q:seq of (Point) &amp;&#10;  (((len q) = 4) =&gt;&#10;    pre_rectangular(q)))&#10;"/>
<po column="35" line="77" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 77:35&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="3" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 77:35&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="37" line="77" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 77:37&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="4" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 77:37&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="40" line="77" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 77:40&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (exs.vertices)))&#10;" number="5" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 77:40&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (exs.vertices)))&#10;"/>
<po column="43" line="78" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 78:43&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="6" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 78:43&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="45" line="78" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 78:45&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="7" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 78:45&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="35" line="79" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 79:35&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="8" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 79:35&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="37" line="79" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 79:37&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="9" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 79:37&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="40" line="79" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 79:40&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      1 in set inds (exs.vertices))))&#10;" number="10" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 79:40&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      1 in set inds (exs.vertices))))&#10;"/>
<po column="43" line="80" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 80:43&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="11" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 80:43&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="45" line="80" message="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 80:45&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="12" object="" resource="ACSSL" toString="Exposed_site: subtype obligation in 'DEFAULT' (ACSSL) at line 80:45&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="23" line="81" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 81:23&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (exs.vertices)))&#10;" number="13" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 81:23&#10;(forall exs:Exposed_site &amp;&#10;  (forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (exs.vertices)))&#10;"/>
<po column="26" line="85" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 85:26&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          1 in set inds (exs.vertices))))))&#10;" number="14" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 85:26&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          1 in set inds (exs.vertices))))))&#10;"/>
<po column="42" line="85" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 85:42&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          i in set inds (exs.vertices))))))&#10;" number="15" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 85:42&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          i in set inds (exs.vertices))))))&#10;"/>
<po column="26" line="87" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 87:26&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          ((distance((exs.vertices)(1), (exs.vertices)(i)) = ((exs.building).length)) =&gt;&#10;            1 in set inds (exs.vertices)))))))&#10;" number="16" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 87:26&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          ((distance((exs.vertices)(1), (exs.vertices)(i)) = ((exs.building).length)) =&gt;&#10;            1 in set inds (exs.vertices)))))))&#10;"/>
<po column="42" line="87" message="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 87:42&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          ((distance((exs.vertices)(1), (exs.vertices)(i)) = ((exs.building).length)) =&gt;&#10;            j in set inds (exs.vertices)))))))&#10;" number="17" object="" resource="ACSSL" toString="Exposed_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 87:42&#10;(forall exs:Exposed_site &amp;&#10;  ((forall p in set (elems ((exs.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (exs.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((exs.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((exs.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) &amp;&#10;        (((abs (j - i)) = 2) =&gt;&#10;          ((distance((exs.vertices)(1), (exs.vertices)(i)) = ((exs.building).length)) =&gt;&#10;            j in set inds (exs.vertices)))))))&#10;"/>
<po column="35" line="94" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 94:35&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="18" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 94:35&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="37" line="94" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 94:37&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="19" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 94:37&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="40" line="94" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 94:40&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (pes.vertices)))&#10;" number="20" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 94:40&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (pes.vertices)))&#10;"/>
<po column="43" line="95" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 95:43&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="21" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 95:43&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="45" line="95" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 95:45&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;" number="22" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 95:45&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    inv_Realp(0) and (is_real(0))))&#10;"/>
<po column="35" line="96" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 96:35&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="23" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 96:35&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="37" line="96" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 96:37&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="24" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 96:37&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="40" line="96" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 96:40&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      1 in set inds (pes.vertices))))&#10;" number="25" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 96:40&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      1 in set inds (pes.vertices))))&#10;"/>
<po column="43" line="97" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 97:43&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="26" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 97:43&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="45" line="97" message="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 97:45&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;" number="27" object="" resource="ACSSL" toString="Pot_explosion_site: subtype obligation in 'DEFAULT' (ACSSL) at line 97:45&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    ((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) =&gt;&#10;      inv_Realp(0) and (is_real(0)))))&#10;"/>
<po column="23" line="98" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 98:23&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (pes.vertices)))&#10;" number="28" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 98:23&#10;(forall pes:Pot_explosion_site &amp;&#10;  (forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp;&#10;    1 in set inds (pes.vertices)))&#10;"/>
<po column="26" line="101" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 101:26&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        1 in set inds (pes.vertices)))))&#10;" number="29" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 101:26&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        1 in set inds (pes.vertices)))))&#10;"/>
<po column="42" line="101" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 101:42&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        i in set inds (pes.vertices)))))&#10;" number="30" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 101:42&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        i in set inds (pes.vertices)))))&#10;"/>
<po column="26" line="103" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 103:26&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        ((distance((pes.vertices)(1), (pes.vertices)(i)) = ((pes.mgzn).length)) =&gt;&#10;          1 in set inds (pes.vertices))))))&#10;" number="31" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 103:26&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        ((distance((pes.vertices)(1), (pes.vertices)(i)) = ((pes.mgzn).length)) =&gt;&#10;          1 in set inds (pes.vertices))))))&#10;"/>
<po column="42" line="103" message="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 103:42&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        ((distance((pes.vertices)(1), (pes.vertices)(i)) = ((pes.mgzn).length)) =&gt;&#10;          j in set inds (pes.vertices))))))&#10;" number="32" object="" resource="ACSSL" toString="Pot_explosion_site: sequence apply obligation in 'DEFAULT' (ACSSL) at line 103:42&#10;(forall pes:Pot_explosion_site &amp;&#10;  ((forall p in set (elems ((pes.vertices)(2, ... ,4))) &amp; (((distance(mk_Point(0, 0), (pes.vertices)(1)) &lt;= distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) = distance(mk_Point(0, 0), p))) =&gt; (((pes.vertices)(1).y) &lt; (p.y)))) =&gt;&#10;    (((pes.door) in set {0, ... ,3}) =&gt;&#10;      (forall i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) &amp;&#10;        ((distance((pes.vertices)(1), (pes.vertices)(i)) = ((pes.mgzn).length)) =&gt;&#10;          j in set inds (pes.vertices))))))&#10;"/>
<po column="3" line="125" message="asharp: map set compatible obligation in 'DEFAULT' (ACSSL) at line 125:3&#10;forall m1, m2 in set {{h |-&gt; let m:map (Table_Co_ordinate) to (real) in m} | h:Hzd} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="33" object="" resource="ACSSL" toString="asharp: map set compatible obligation in 'DEFAULT' (ACSSL) at line 125:3&#10;forall m1, m2 in set {{h |-&gt; let m:map (Table_Co_ordinate) to (real) in m} | h:Hzd} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="15" line="125" message="asharp: let be st existence obligation in 'DEFAULT' (ACSSL) at line 125:15&#10;(forall h:Hzd &amp;&#10;  exists m:map (Table_Co_ordinate) to (real))&#10;" number="34" object="" resource="ACSSL" toString="asharp: let be st existence obligation in 'DEFAULT' (ACSSL) at line 125:15&#10;(forall h:Hzd &amp;&#10;  exists m:map (Table_Co_ordinate) to (real))&#10;"/>
<po column="3" line="125" message="asharp: finite map obligation in 'DEFAULT' (ACSSL) at line 125:3&#10;exists finmap1:map nat to (map (Hzd) to (map (Table_Co_ordinate) to (real))) &amp;&#10;  forall h:Hzd &amp;&#10;    null =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = {h |-&gt; let m:map (Table_Co_ordinate) to (real) in m}&#10;" number="35" object="" resource="ACSSL" toString="asharp: finite map obligation in 'DEFAULT' (ACSSL) at line 125:3&#10;exists finmap1:map nat to (map (Hzd) to (map (Table_Co_ordinate) to (real))) &amp;&#10;  forall h:Hzd &amp;&#10;    null =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = {h |-&gt; let m:map (Table_Co_ordinate) to (real) in m}&#10;"/>
<po column="3" line="129" message="bsharp: map set compatible obligation in 'DEFAULT' (ACSSL) at line 129:3&#10;forall m1, m2 in set {{h |-&gt; let m:map (Table_Co_ordinate) to (real) in m} | h:Hzd} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="36" object="" resource="ACSSL" toString="bsharp: map set compatible obligation in 'DEFAULT' (ACSSL) at line 129:3&#10;forall m1, m2 in set {{h |-&gt; let m:map (Table_Co_ordinate) to (real) in m} | h:Hzd} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="15" line="129" message="bsharp: let be st existence obligation in 'DEFAULT' (ACSSL) at line 129:15&#10;(forall h:Hzd &amp;&#10;  exists m:map (Table_Co_ordinate) to (real))&#10;" number="37" object="" resource="ACSSL" toString="bsharp: let be st existence obligation in 'DEFAULT' (ACSSL) at line 129:15&#10;(forall h:Hzd &amp;&#10;  exists m:map (Table_Co_ordinate) to (real))&#10;"/>
<po column="3" line="129" message="bsharp: finite map obligation in 'DEFAULT' (ACSSL) at line 129:3&#10;exists finmap1:map nat to (map (Hzd) to (map (Table_Co_ordinate) to (real))) &amp;&#10;  forall h:Hzd &amp;&#10;    null =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = {h |-&gt; let m:map (Table_Co_ordinate) to (real) in m}&#10;" number="38" object="" resource="ACSSL" toString="bsharp: finite map obligation in 'DEFAULT' (ACSSL) at line 129:3&#10;exists finmap1:map nat to (map (Hzd) to (map (Table_Co_ordinate) to (real))) &amp;&#10;  forall h:Hzd &amp;&#10;    null =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = {h |-&gt; let m:map (Table_Co_ordinate) to (real) in m}&#10;"/>
<po column="7" line="133" message="exceptions_hd1_1: let be st existence obligation in 'DEFAULT' (ACSSL) at line 133:7&#10;exists s:set of (Table_Co_ordinate)&#10;" number="39" object="" resource="ACSSL" toString="exceptions_hd1_1: let be st existence obligation in 'DEFAULT' (ACSSL) at line 133:7&#10;exists s:set of (Table_Co_ordinate)&#10;"/>
<po column="7" line="136" message="exceptions_hd1_2: let be st existence obligation in 'DEFAULT' (ACSSL) at line 136:7&#10;exists s:set of (Table_Co_ordinate)&#10;" number="40" object="" resource="ACSSL" toString="exceptions_hd1_2: let be st existence obligation in 'DEFAULT' (ACSSL) at line 136:7&#10;exists s:set of (Table_Co_ordinate)&#10;"/>
<po column="7" line="139" message="exceptions_hd1_3a: let be st existence obligation in 'DEFAULT' (ACSSL) at line 139:7&#10;exists s:set of (Table_Co_ordinate)&#10;" number="41" object="" resource="ACSSL" toString="exceptions_hd1_3a: let be st existence obligation in 'DEFAULT' (ACSSL) at line 139:7&#10;exists s:set of (Table_Co_ordinate)&#10;"/>
<po column="7" line="142" message="exceptions_hd1_3b: let be st existence obligation in 'DEFAULT' (ACSSL) at line 142:7&#10;exists s:set of (Table_Co_ordinate)&#10;" number="42" object="" resource="ACSSL" toString="exceptions_hd1_3b: let be st existence obligation in 'DEFAULT' (ACSSL) at line 142:7&#10;exists s:set of (Table_Co_ordinate)&#10;"/>
<po column="5" line="148" message="next_point: map sequence compatible obligation in 'DEFAULT' (ACSSL) at line 148:5&#10;forall m1, m2 in set {{1 |-&gt; 2}, {2 |-&gt; 3}, {3 |-&gt; 4}, {4 |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="43" object="" resource="ACSSL" toString="next_point: map sequence compatible obligation in 'DEFAULT' (ACSSL) at line 148:5&#10;forall m1, m2 in set {{1 |-&gt; 2}, {2 |-&gt; 3}, {3 |-&gt; 4}, {4 |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="158" message="hzdnum: map sequence compatible obligation in 'DEFAULT' (ACSSL) at line 158:5&#10;forall m1, m2 in set {{&lt;ONEPONE&gt; |-&gt; 1}, {&lt;ONEPTWO&gt; |-&gt; 2}, {&lt;ONEPTHREE&gt; |-&gt; 3}, {&lt;ONEPFOUR&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="44" object="" resource="ACSSL" toString="hzdnum: map sequence compatible obligation in 'DEFAULT' (ACSSL) at line 158:5&#10;forall m1, m2 in set {{&lt;ONEPONE&gt; |-&gt; 1}, {&lt;ONEPTWO&gt; |-&gt; 2}, {&lt;ONEPTHREE&gt; |-&gt; 3}, {&lt;ONEPFOUR&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="161" message="orientation: map sequence compatible obligation in 'DEFAULT' (ACSSL) at line 161:5&#10;forall m1, m2 in set {{0 |-&gt; &lt;PERP&gt;}, {1 |-&gt; &lt;FACING&gt;}, {2 |-&gt; &lt;PERP&gt;}, {3 |-&gt; &lt;AWAY&gt;}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="45" object="" resource="ACSSL" toString="orientation: map sequence compatible obligation in 'DEFAULT' (ACSSL) at line 161:5&#10;forall m1, m2 in set {{0 |-&gt; &lt;PERP&gt;}, {1 |-&gt; &lt;FACING&gt;}, {2 |-&gt; &lt;PERP&gt;}, {3 |-&gt; &lt;AWAY&gt;}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="19" line="164" message="esharp: let be st existence obligation in 'DEFAULT' (ACSSL) at line 164:19&#10;exists x:nat&#10;" number="46" object="" resource="ACSSL" toString="esharp: let be st existence obligation in 'DEFAULT' (ACSSL) at line 164:19&#10;exists x:nat&#10;"/>
<po column="53" line="174" message="pes, pes~, exs, exs~, xmax, xmax~, ymax, ymax~, Store, Store~: map apply obligation in 'DEFAULT' (ACSSL) at line 174:53&#10;(forall mk_Store(pes, exs, xmax, ymax):Store &amp;&#10;  ((xmax &gt; 0) =&gt;&#10;    ((ymax &gt; 0) =&gt;&#10;      (((dom pes) subset (dom exs)) =&gt;&#10;        (forall p in set (dom pes) &amp;&#10;          p in set dom exs)))))&#10;" number="47" object="" resource="ACSSL" toString="pes, pes~, exs, exs~, xmax, xmax~, ymax, ymax~, Store, Store~: map apply obligation in 'DEFAULT' (ACSSL) at line 174:53&#10;(forall mk_Store(pes, exs, xmax, ymax):Store &amp;&#10;  ((xmax &gt; 0) =&gt;&#10;    ((ymax &gt; 0) =&gt;&#10;      (((dom pes) subset (dom exs)) =&gt;&#10;        (forall p in set (dom pes) &amp;&#10;          p in set dom exs)))))&#10;"/>
<po column="18" line="183" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:18&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  1 in set inds v)&#10;" number="48" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:18&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  1 in set inds v)&#10;"/>
<po column="23" line="183" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:23&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  2 in set inds v)&#10;" number="49" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:23&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  2 in set inds v)&#10;"/>
<po column="40" line="183" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:40&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  3 in set inds v)&#10;" number="50" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:40&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  3 in set inds v)&#10;"/>
<po column="45" line="183" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:45&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  4 in set inds v)&#10;" number="51" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 183:45&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  4 in set inds v)&#10;"/>
<po column="18" line="184" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:18&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    1 in set inds v))&#10;" number="52" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:18&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    1 in set inds v))&#10;"/>
<po column="23" line="184" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:23&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    4 in set inds v))&#10;" number="53" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:23&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    4 in set inds v))&#10;"/>
<po column="40" line="184" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:40&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    2 in set inds v))&#10;" number="54" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:40&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    2 in set inds v))&#10;"/>
<po column="45" line="184" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:45&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    3 in set inds v))&#10;" number="55" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 184:45&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    3 in set inds v))&#10;"/>
<po column="18" line="185" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:18&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      1 in set inds v)))&#10;" number="56" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:18&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      1 in set inds v)))&#10;"/>
<po column="23" line="185" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:23&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      3 in set inds v)))&#10;" number="57" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:23&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      3 in set inds v)))&#10;"/>
<po column="40" line="185" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:40&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      2 in set inds v)))&#10;" number="58" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:40&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      2 in set inds v)))&#10;"/>
<po column="45" line="185" message="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:45&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      4 in set inds v)))&#10;" number="59" object="" resource="ACSSL" toString="rectangular: sequence apply obligation in 'DEFAULT' (ACSSL) at line 185:45&#10;(forall v:seq of (Point) &amp; ((len v) = 4) =&gt;&#10;  ((distance(v(1), v(2)) = distance(v(3), v(4))) =&gt;&#10;    ((distance(v(1), v(4)) = distance(v(2), v(3))) =&gt;&#10;      4 in set inds v)))&#10;"/>
<po column="20" line="190" message="distance: function apply obligation in 'DEFAULT' (ACSSL) at line 190:20&#10;(forall p1:Point, p2:Point &amp;&#10;  pre_sqrt(((((p2.x) - (p1.x)) ** 2) + (((p2.y) - (p1.y)) ** 2))))&#10;" number="60" object="" resource="ACSSL" toString="distance: function apply obligation in 'DEFAULT' (ACSSL) at line 190:20&#10;(forall p1:Point, p2:Point &amp;&#10;  pre_sqrt(((((p2.x) - (p1.x)) ** 2) + (((p2.y) - (p1.y)) ** 2))))&#10;"/>
<po column="1" line="192" message="sqrt: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 192:1&#10;(forall x:real &amp;&#10;  pre_sqrt(x) =&gt; exists s:Realp &amp; post_sqrt(x, s))&#10;" number="61" object="" resource="ACSSL" toString="sqrt: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 192:1&#10;(forall x:real &amp;&#10;  pre_sqrt(x) =&gt; exists s:Realp &amp; post_sqrt(x, s))&#10;"/>
<po column="1" line="205" message="find_point: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 205:1&#10;(forall o:Object, m:Magazine &amp;&#10;  pre_find_point(o, m) =&gt; exists pt:Point &amp; post_find_point(o, m, pt))&#10;" number="62" object="" resource="ACSSL" toString="find_point: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 205:1&#10;(forall o:Object, m:Magazine &amp;&#10;  pre_find_point(o, m) =&gt; exists pt:Point &amp; post_find_point(o, m, pt))&#10;"/>
<po column="3" line="211" message="within_hazard: map apply obligation in 'DEFAULT' (ACSSL) at line 211:3&#10;(forall o:Object, m:Magazine &amp;&#10;  (o.hzd) in set dom hzdnum)&#10;" number="63" object="" resource="ACSSL" toString="within_hazard: map apply obligation in 'DEFAULT' (ACSSL) at line 211:3&#10;(forall o:Object, m:Magazine &amp;&#10;  (o.hzd) in set dom hzdnum)&#10;"/>
<po column="20" line="211" message="within_hazard: map apply obligation in 'DEFAULT' (ACSSL) at line 211:20&#10;(forall o:Object, m:Magazine &amp;&#10;  (m.hzd) in set dom hzdnum)&#10;" number="64" object="" resource="ACSSL" toString="within_hazard: map apply obligation in 'DEFAULT' (ACSSL) at line 211:20&#10;(forall o:Object, m:Magazine &amp;&#10;  (m.hzd) in set dom hzdnum)&#10;"/>
<po column="12" line="225" message="sum: let be st existence obligation in 'DEFAULT' (ACSSL) at line 225:12&#10;(forall s:set of (real) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists x:real &amp; (x in set s)))&#10;" number="65" object="" resource="ACSSL" toString="sum: let be st existence obligation in 'DEFAULT' (ACSSL) at line 225:12&#10;(forall s:set of (real) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists x:real &amp; (x in set s)))&#10;"/>
<po column="1" line="221" message="sum: recursive function obligation in 'DEFAULT' (ACSSL) at line 221:1&#10;(forall s:set of (real) &amp;&#10;  (not (s = {}) =&gt;&#10;    (forall x:real &amp; (x in set s) =&gt;&#10;      Card(s) &gt; Card((s \ {x})))))&#10;" number="66" object="" resource="ACSSL" toString="sum: recursive function obligation in 'DEFAULT' (ACSSL) at line 221:1&#10;(forall s:set of (real) &amp;&#10;  (not (s = {}) =&gt;&#10;    (forall x:real &amp; (x in set s) =&gt;&#10;      Card(s) &gt; Card((s \ {x})))))&#10;"/>
<po column="68" line="237" message="suff_capacity: subtype obligation in 'DEFAULT' (ACSSL) at line 237:68&#10;(forall o:Object, m:Magazine &amp;&#10;  (((m.max_neq) &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;    is_real((m.max_neq))))&#10;" number="67" object="" resource="ACSSL" toString="suff_capacity: subtype obligation in 'DEFAULT' (ACSSL) at line 237:68&#10;(forall o:Object, m:Magazine &amp;&#10;  (((m.max_neq) &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;    is_real((m.max_neq))))&#10;"/>
<po column="59" line="237" message="suff_capacity: subtype obligation in 'DEFAULT' (ACSSL) at line 237:59&#10;(forall o:Object, m:Magazine &amp;&#10;  (((m.max_neq) &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;    is_real((o.neq))))&#10;" number="68" object="" resource="ACSSL" toString="suff_capacity: subtype obligation in 'DEFAULT' (ACSSL) at line 237:59&#10;(forall o:Object, m:Magazine &amp;&#10;  (((m.max_neq) &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;    is_real((o.neq))))&#10;"/>
<po column="12" line="237" message="suff_capacity: subtype obligation in 'DEFAULT' (ACSSL) at line 237:12&#10;(forall o:Object, m:Magazine &amp;&#10;  (((m.max_neq) &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;    is_({((elt.object).neq) | [elt in set (rng (m.elements))]}, set of (real))))&#10;" number="69" object="" resource="ACSSL" toString="suff_capacity: subtype obligation in 'DEFAULT' (ACSSL) at line 237:12&#10;(forall o:Object, m:Magazine &amp;&#10;  (((m.max_neq) &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;    is_({((elt.object).neq) | [elt in set (rng (m.elements))]}, set of (real))))&#10;"/>
<po column="1" line="247" message="rel_pos: subtype obligation in 'DEFAULT' (ACSSL) at line 247:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  ((floor ang_sep(pes, exs)) div 90) &gt;= 0)&#10;" number="70" object="" resource="ACSSL" toString="rel_pos: subtype obligation in 'DEFAULT' (ACSSL) at line 247:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  ((floor ang_sep(pes, exs)) div 90) &gt;= 0)&#10;"/>
<po column="24" line="254" message="table_entry, exs_ro: map apply obligation in 'DEFAULT' (ACSSL) at line 254:24&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let inc:nat = rel_pos(pes, exs) in&#10;    (is_(((exs.building).type), Storage_building) =&gt;&#10;      ((inc + (exs.door)) mod 4) in set dom orientation)))&#10;" number="71" object="" resource="ACSSL" toString="table_entry, exs_ro: map apply obligation in 'DEFAULT' (ACSSL) at line 254:24&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let inc:nat = rel_pos(pes, exs) in&#10;    (is_(((exs.building).type), Storage_building) =&gt;&#10;      ((inc + (exs.door)) mod 4) in set dom orientation)))&#10;"/>
<po column="24" line="257" message="table_entry, pes_ro: map apply obligation in 'DEFAULT' (ACSSL) at line 257:24&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let inc:nat = rel_pos(pes, exs) in&#10;    ((((pes.mgzn).type) = &lt;EARTHCOVEREDBUILDING&gt;) =&gt;&#10;      ((inc + (pes.door)) mod 4) in set dom orientation)))&#10;" number="72" object="" resource="ACSSL" toString="table_entry, pes_ro: map apply obligation in 'DEFAULT' (ACSSL) at line 257:24&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let inc:nat = rel_pos(pes, exs) in&#10;    ((((pes.mgzn).type) = &lt;EARTHCOVEREDBUILDING&gt;) =&gt;&#10;      ((inc + (pes.door)) mod 4) in set dom orientation)))&#10;"/>
<po column="1" line="250" message="table_entry: subtype obligation in 'DEFAULT' (ACSSL) at line 250:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (is_(let inc:nat = rel_pos(pes, exs) in let exs_ro:(&lt;NONE&gt; | RelOrientation) = (if is_(((exs.building).type), Storage_building)&#10;  then orientation(((inc + (exs.door)) mod 4))&#10;  else &lt;NONE&gt;), pes_ro:(&lt;NONE&gt; | RelOrientation) = (if (((pes.mgzn).type) = &lt;EARTHCOVEREDBUILDING&gt;)&#10;  then orientation(((inc + (pes.door)) mod 4))&#10;  else &lt;NONE&gt;) in let o_exs:(Exs_types * (&lt;NONE&gt; | RelOrientation)) = mk_(((exs.building).type), exs_ro), o_pes:(Pes_types * (&lt;NONE&gt; | RelOrientation)) = mk_(((pes.mgzn).type), pes_ro) in mk_(o_exs, o_pes), (OrientedExs * OrientedPes))))&#10;" number="73" object="" resource="ACSSL" toString="table_entry: subtype obligation in 'DEFAULT' (ACSSL) at line 250:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (is_(let inc:nat = rel_pos(pes, exs) in let exs_ro:(&lt;NONE&gt; | RelOrientation) = (if is_(((exs.building).type), Storage_building)&#10;  then orientation(((inc + (exs.door)) mod 4))&#10;  else &lt;NONE&gt;), pes_ro:(&lt;NONE&gt; | RelOrientation) = (if (((pes.mgzn).type) = &lt;EARTHCOVEREDBUILDING&gt;)&#10;  then orientation(((inc + (pes.door)) mod 4))&#10;  else &lt;NONE&gt;) in let o_exs:(Exs_types * (&lt;NONE&gt; | RelOrientation)) = mk_(((exs.building).type), exs_ro), o_pes:(Pes_types * (&lt;NONE&gt; | RelOrientation)) = mk_(((pes.mgzn).type), pes_ro) in mk_(o_exs, o_pes), (OrientedExs * OrientedPes))))&#10;"/>
<po column="1" line="263" message="min: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 263:1&#10;(forall s:set of (Realp) &amp;&#10;  pre_min(s) =&gt; exists m:Realp &amp; post_min(s, m))&#10;" number="74" object="" resource="ACSSL" toString="min: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 263:1&#10;(forall s:set of (Realp) &amp;&#10;  pre_min(s) =&gt; exists m:Realp &amp; post_min(s, m))&#10;"/>
<po column="1" line="267" message="max: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 267:1&#10;(forall s:set of (Realp) &amp;&#10;  pre_max(s) =&gt; exists m:Realp &amp; post_max(s, m))&#10;" number="75" object="" resource="ACSSL" toString="max: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 267:1&#10;(forall s:set of (Realp) &amp;&#10;  pre_max(s) =&gt; exists m:Realp &amp; post_max(s, m))&#10;"/>
<po column="11" line="277" message="side: finite set obligation in 'DEFAULT' (ACSSL) at line 277:11&#10;(forall p1:Point, p2:Point &amp;&#10;  (((p2.x) = (p1.x)) =&gt;&#10;    exists finmap1:map nat to (Point) &amp;&#10;      forall y:Realp &amp;&#10;        (truncated(y) and ((min({(p1.y), (p2.y)}) &lt;= y) and (y &lt;= max({(p1.y), (p2.y)})))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = mk_Point((p1.x), y)))&#10;" number="76" object="" resource="ACSSL" toString="side: finite set obligation in 'DEFAULT' (ACSSL) at line 277:11&#10;(forall p1:Point, p2:Point &amp;&#10;  (((p2.x) = (p1.x)) =&gt;&#10;    exists finmap1:map nat to (Point) &amp;&#10;      forall y:Realp &amp;&#10;        (truncated(y) and ((min({(p1.y), (p2.y)}) &lt;= y) and (y &lt;= max({(p1.y), (p2.y)})))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = mk_Point((p1.x), y)))&#10;"/>
<po column="25" line="279" message="side: function apply obligation in 'DEFAULT' (ACSSL) at line 279:25&#10;(forall p1:Point, p2:Point &amp;&#10;  (((p2.x) = (p1.x)) =&gt;&#10;    (forall y:Realp &amp;&#10;      (truncated(y) =&gt;&#10;        pre_min({(p1.y), (p2.y)})))))&#10;" number="77" object="" resource="ACSSL" toString="side: function apply obligation in 'DEFAULT' (ACSSL) at line 279:25&#10;(forall p1:Point, p2:Point &amp;&#10;  (((p2.x) = (p1.x)) =&gt;&#10;    (forall y:Realp &amp;&#10;      (truncated(y) =&gt;&#10;        pre_min({(p1.y), (p2.y)})))))&#10;"/>
<po column="54" line="279" message="side: function apply obligation in 'DEFAULT' (ACSSL) at line 279:54&#10;(forall p1:Point, p2:Point &amp;&#10;  (((p2.x) = (p1.x)) =&gt;&#10;    (forall y:Realp &amp;&#10;      (truncated(y) =&gt;&#10;        ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;          pre_max({(p1.y), (p2.y)}))))))&#10;" number="78" object="" resource="ACSSL" toString="side: function apply obligation in 'DEFAULT' (ACSSL) at line 279:54&#10;(forall p1:Point, p2:Point &amp;&#10;  (((p2.x) = (p1.x)) =&gt;&#10;    (forall y:Realp &amp;&#10;      (truncated(y) =&gt;&#10;        ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;          pre_max({(p1.y), (p2.y)}))))))&#10;"/>
<po column="11" line="280" message="side: finite set obligation in 'DEFAULT' (ACSSL) at line 280:11&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    exists finmap1:map nat to (Point) &amp;&#10;      forall x:Realp, y:Realp &amp;&#10;        (truncated(x) and (truncated(y) and ((min({(p1.x), (p2.x)}) &lt;= x) and ((x &lt;= max({(p1.x), (p2.x)})) and ((min({(p1.y), (p2.y)}) &lt;= y) and ((y &lt;= max({(p1.y), (p2.y)})) and (if (x &lt;&gt; (p1.x))&#10;    then (((y - (p1.y)) / (x - (p1.x))) = (((p2.y) - (p1.y)) / ((p2.x) - (p1.x))))&#10;    else (y = (p1.y))))))))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = mk_Point(x, y)))&#10;" number="79" object="" resource="ACSSL" toString="side: finite set obligation in 'DEFAULT' (ACSSL) at line 280:11&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    exists finmap1:map nat to (Point) &amp;&#10;      forall x:Realp, y:Realp &amp;&#10;        (truncated(x) and (truncated(y) and ((min({(p1.x), (p2.x)}) &lt;= x) and ((x &lt;= max({(p1.x), (p2.x)})) and ((min({(p1.y), (p2.y)}) &lt;= y) and ((y &lt;= max({(p1.y), (p2.y)})) and (if (x &lt;&gt; (p1.x))&#10;    then (((y - (p1.y)) / (x - (p1.x))) = (((p2.y) - (p1.y)) / ((p2.x) - (p1.x))))&#10;    else (y = (p1.y))))))))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = mk_Point(x, y)))&#10;"/>
<po column="17" line="283" message="side: function apply obligation in 'DEFAULT' (ACSSL) at line 283:17&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          pre_min({(p1.x), (p2.x)}))))))&#10;" number="80" object="" resource="ACSSL" toString="side: function apply obligation in 'DEFAULT' (ACSSL) at line 283:17&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          pre_min({(p1.x), (p2.x)}))))))&#10;"/>
<po column="48" line="283" message="side: function apply obligation in 'DEFAULT' (ACSSL) at line 283:48&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            pre_max({(p1.x), (p2.x)})))))))&#10;" number="81" object="" resource="ACSSL" toString="side: function apply obligation in 'DEFAULT' (ACSSL) at line 283:48&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            pre_max({(p1.x), (p2.x)})))))))&#10;"/>
<po column="17" line="284" message="side: function apply obligation in 'DEFAULT' (ACSSL) at line 284:17&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              pre_min({(p1.y), (p2.y)}))))))))&#10;" number="82" object="" resource="ACSSL" toString="side: function apply obligation in 'DEFAULT' (ACSSL) at line 284:17&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              pre_min({(p1.y), (p2.y)}))))))))&#10;"/>
<po column="48" line="284" message="side: function apply obligation in 'DEFAULT' (ACSSL) at line 284:48&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;                pre_max({(p1.y), (p2.y)})))))))))&#10;" number="83" object="" resource="ACSSL" toString="side: function apply obligation in 'DEFAULT' (ACSSL) at line 284:48&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;                pre_max({(p1.y), (p2.y)})))))))))&#10;"/>
<po column="32" line="286" message="side: non-zero obligation in 'DEFAULT' (ACSSL) at line 286:32&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;                ((y &lt;= max({(p1.y), (p2.y)})) =&gt;&#10;                  ((x &lt;&gt; (p1.x)) =&gt;&#10;                    (x - (p1.x)) &lt;&gt; 0))))))))))&#10;" number="84" object="" resource="ACSSL" toString="side: non-zero obligation in 'DEFAULT' (ACSSL) at line 286:32&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;                ((y &lt;= max({(p1.y), (p2.y)})) =&gt;&#10;                  ((x &lt;&gt; (p1.x)) =&gt;&#10;                    (x - (p1.x)) &lt;&gt; 0))))))))))&#10;"/>
<po column="59" line="286" message="side: non-zero obligation in 'DEFAULT' (ACSSL) at line 286:59&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;                ((y &lt;= max({(p1.y), (p2.y)})) =&gt;&#10;                  ((x &lt;&gt; (p1.x)) =&gt;&#10;                    ((p2.x) - (p1.x)) &lt;&gt; 0))))))))))&#10;" number="85" object="" resource="ACSSL" toString="side: non-zero obligation in 'DEFAULT' (ACSSL) at line 286:59&#10;(forall p1:Point, p2:Point &amp;&#10;  (not ((p2.x) = (p1.x)) =&gt;&#10;    (forall x:Realp, y:Realp &amp;&#10;      (truncated(x) =&gt;&#10;        (truncated(y) =&gt;&#10;          ((min({(p1.x), (p2.x)}) &lt;= x) =&gt;&#10;            ((x &lt;= max({(p1.x), (p2.x)})) =&gt;&#10;              ((min({(p1.y), (p2.y)}) &lt;= y) =&gt;&#10;                ((y &lt;= max({(p1.y), (p2.y)})) =&gt;&#10;                  ((x &lt;&gt; (p1.x)) =&gt;&#10;                    ((p2.x) - (p1.x)) &lt;&gt; 0))))))))))&#10;"/>
<po column="16" line="291" message="perimeter: sequence apply obligation in 'DEFAULT' (ACSSL) at line 291:16&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    i in set inds (site.vertices)))&#10;" number="86" object="" resource="ACSSL" toString="perimeter: sequence apply obligation in 'DEFAULT' (ACSSL) at line 291:16&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    i in set inds (site.vertices)))&#10;"/>
<po column="33" line="291" message="perimeter: sequence apply obligation in 'DEFAULT' (ACSSL) at line 291:33&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    next_point(i) in set inds (site.vertices)))&#10;" number="87" object="" resource="ACSSL" toString="perimeter: sequence apply obligation in 'DEFAULT' (ACSSL) at line 291:33&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    next_point(i) in set inds (site.vertices)))&#10;"/>
<po column="47" line="291" message="perimeter: map apply obligation in 'DEFAULT' (ACSSL) at line 291:47&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    i in set dom next_point))&#10;" number="88" object="" resource="ACSSL" toString="perimeter: map apply obligation in 'DEFAULT' (ACSSL) at line 291:47&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    i in set dom next_point))&#10;"/>
<po column="58" line="291" message="perimeter: subtype obligation in 'DEFAULT' (ACSSL) at line 291:58&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    i &gt;= 0))&#10;" number="89" object="" resource="ACSSL" toString="perimeter: subtype obligation in 'DEFAULT' (ACSSL) at line 291:58&#10;(forall site:(Exposed_site | Pot_explosion_site) &amp;&#10;  (forall i in set {1, ... ,4} &amp;&#10;    i &gt;= 0))&#10;"/>
<po column="3" line="296" message="shortest_dist: function apply obligation in 'DEFAULT' (ACSSL) at line 296:3&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  pre_min({distance(p1, p2) | [p1:Point, p2:Point] &amp; ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs)))}))&#10;" number="90" object="" resource="ACSSL" toString="shortest_dist: function apply obligation in 'DEFAULT' (ACSSL) at line 296:3&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  pre_min({distance(p1, p2) | [p1:Point, p2:Point] &amp; ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs)))}))&#10;"/>
<po column="7" line="296" message="shortest_dist: finite set obligation in 'DEFAULT' (ACSSL) at line 296:7&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  exists finmap1:map nat to (Metre) &amp;&#10;    forall p1:Point, p2:Point &amp;&#10;      ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = distance(p1, p2))&#10;" number="91" object="" resource="ACSSL" toString="shortest_dist: finite set obligation in 'DEFAULT' (ACSSL) at line 296:7&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  exists finmap1:map nat to (Metre) &amp;&#10;    forall p1:Point, p2:Point &amp;&#10;      ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = distance(p1, p2))&#10;"/>
<po column="29" line="302" message="min_separation: map apply obligation in 'DEFAULT' (ACSSL) at line 302:29&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  table_entry(pes, exs) in set dom bsharp(((pes.mgzn).hzd)))&#10;" number="92" object="" resource="ACSSL" toString="min_separation: map apply obligation in 'DEFAULT' (ACSSL) at line 302:29&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  table_entry(pes, exs) in set dom bsharp(((pes.mgzn).hzd)))&#10;"/>
<po column="29" line="302" message="min_separation: map apply obligation in 'DEFAULT' (ACSSL) at line 302:29&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  ((pes.mgzn).hzd) in set dom bsharp)&#10;" number="93" object="" resource="ACSSL" toString="min_separation: map apply obligation in 'DEFAULT' (ACSSL) at line 302:29&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  ((pes.mgzn).hzd) in set dom bsharp)&#10;"/>
<po column="22" line="316" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 316:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    ((&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;      (not (tbe in set exceptions_hd1_1) =&gt;&#10;        tbe in set dom asharp(&lt;ONEPONE&gt;)))))&#10;" number="94" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 316:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    ((&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;      (not (tbe in set exceptions_hd1_1) =&gt;&#10;        tbe in set dom asharp(&lt;ONEPONE&gt;)))))&#10;"/>
<po column="22" line="316" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 316:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    ((&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;      (not (tbe in set exceptions_hd1_1) =&gt;&#10;        &lt;ONEPONE&gt; in set dom asharp))))&#10;" number="95" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 316:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    ((&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;      (not (tbe in set exceptions_hd1_1) =&gt;&#10;        &lt;ONEPONE&gt; in set dom asharp))))&#10;"/>
<po column="22" line="320" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 320:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      ((&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt; &#10;        (not (tbe in set exceptions_hd1_2) =&gt;&#10;          tbe in set dom asharp(&lt;ONEPTWO&gt;))))))&#10;" number="96" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 320:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      ((&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt; &#10;        (not (tbe in set exceptions_hd1_2) =&gt;&#10;          tbe in set dom asharp(&lt;ONEPTWO&gt;))))))&#10;"/>
<po column="22" line="320" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 320:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      ((&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt; &#10;        (not (tbe in set exceptions_hd1_2) =&gt;&#10;          &lt;ONEPTWO&gt; in set dom asharp)))))&#10;" number="97" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 320:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      ((&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt; &#10;        (not (tbe in set exceptions_hd1_2) =&gt;&#10;          &lt;ONEPTWO&gt; in set dom asharp)))))&#10;"/>
<po column="22" line="325" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 325:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            ((tbe in set exceptions_hd1_3b) =&gt;&#10;              tbe in set dom asharp(&lt;ONEPTHREE&gt;))))))))&#10;" number="98" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 325:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            ((tbe in set exceptions_hd1_3b) =&gt;&#10;              tbe in set dom asharp(&lt;ONEPTHREE&gt;))))))))&#10;"/>
<po column="22" line="325" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 325:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            ((tbe in set exceptions_hd1_3b) =&gt;&#10;              &lt;ONEPTHREE&gt; in set dom asharp)))))))&#10;" number="99" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 325:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            ((tbe in set exceptions_hd1_3b) =&gt;&#10;              &lt;ONEPTHREE&gt; in set dom asharp)))))))&#10;"/>
<po column="22" line="326" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 326:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            (not (tbe in set exceptions_hd1_3b) =&gt;&#10;              tbe in set dom asharp(&lt;ONEPTHREE&gt;))))))))&#10;" number="100" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 326:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            (not (tbe in set exceptions_hd1_3b) =&gt;&#10;              tbe in set dom asharp(&lt;ONEPTHREE&gt;))))))))&#10;"/>
<po column="22" line="326" message="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 326:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            (not (tbe in set exceptions_hd1_3b) =&gt;&#10;              &lt;ONEPTHREE&gt; in set dom asharp)))))))&#10;" number="101" object="" resource="ACSSL" toString="qd: map apply obligation in 'DEFAULT' (ACSSL) at line 326:22&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    (not (&lt;ONEPONE&gt;) = ((pes.mgzn).hzd) =&gt;&#10;      (not (&lt;ONEPTWO&gt;) = ((pes.mgzn).hzd) =&gt;&#10;        ((&lt;ONEPTHREE&gt;) = ((pes.mgzn).hzd) =&gt; &#10;          (not (tbe in set exceptions_hd1_3a) =&gt;&#10;            (not (tbe in set exceptions_hd1_3b) =&gt;&#10;              &lt;ONEPTHREE&gt; in set dom asharp)))))))&#10;"/>
<po column="9" line="308" message="qd: cases exhaustive obligation in 'DEFAULT' (ACSSL) at line 308:9&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    ((pes.mgzn).hzd) = (&lt;ONEPONE&gt;) or ((pes.mgzn).hzd) = (&lt;ONEPTWO&gt;) or ((pes.mgzn).hzd) = (&lt;ONEPTHREE&gt;) or ((pes.mgzn).hzd) = (&lt;ONEPFOUR&gt;)))&#10;" number="102" object="" resource="ACSSL" toString="qd: cases exhaustive obligation in 'DEFAULT' (ACSSL) at line 308:9&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  (let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in&#10;    ((pes.mgzn).hzd) = (&lt;ONEPONE&gt;) or ((pes.mgzn).hzd) = (&lt;ONEPTWO&gt;) or ((pes.mgzn).hzd) = (&lt;ONEPTHREE&gt;) or ((pes.mgzn).hzd) = (&lt;ONEPFOUR&gt;)))&#10;"/>
<po column="1" line="304" message="qd: subtype obligation in 'DEFAULT' (ACSSL) at line 304:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  inv_Kg(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end)) and ((is_(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end), Inf)) or&#10;  (is_(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end), real) and is_real(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end)))))&#10;" number="103" object="" resource="ACSSL" toString="qd: subtype obligation in 'DEFAULT' (ACSSL) at line 304:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  inv_Kg(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end)) and ((is_(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end), Inf)) or&#10;  (is_(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end), real) and is_real(let d:Metre = shortest_dist(pes, exs), tbe:Table_Co_ordinate = table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :&#10;  case (&lt;ONEPONE&gt;) -&gt; (if (tbe in set exceptions_hd1_1)&#10;  then (if (d &lt; 180)&#10;  then (0.54 * (d ** (3 / 2)))&#10;  elseif ((180 &lt;= d) and (d &lt; 240))&#10;  then (0.03 * (d ** 2))&#10;  else ((9.1 * (10 ** -5)) * (d ** 3)))&#10;  else (asharp(&lt;ONEPONE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPTWO&gt;) -&gt; (if (tbe in set exceptions_hd1_2)&#10;  then &lt;INFINITY&gt;&#10;  else (asharp(&lt;ONEPTWO&gt;)(tbe) * (d ** 5.5))),&#10;  case (&lt;ONEPTHREE&gt;) -&gt; (if (tbe in set exceptions_hd1_3a)&#10;  then &lt;INFINITY&gt;&#10;  elseif (tbe in set exceptions_hd1_3b)&#10;  then (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 2))&#10;  else (asharp(&lt;ONEPTHREE&gt;)(tbe) * (d ** 3))),&#10;  case (&lt;ONEPFOUR&gt;) -&gt; &lt;INFINITY&gt;&#10;  end)))))&#10;"/>
<po column="1" line="331" message="nearest_storage_building: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 331:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_storage_building(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_storage_building(pes, exs, e))&#10;" number="104" object="" resource="ACSSL" toString="nearest_storage_building: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 331:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_storage_building(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_storage_building(pes, exs, e))&#10;"/>
<po column="1" line="340" message="nearest_inhabited_building: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 340:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_inhabited_building(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_inhabited_building(pes, exs, e))&#10;" number="105" object="" resource="ACSSL" toString="nearest_inhabited_building: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 340:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_inhabited_building(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_inhabited_building(pes, exs, e))&#10;"/>
<po column="1" line="349" message="nearest_traffic_route: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 349:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_traffic_route(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_traffic_route(pes, exs, e))&#10;" number="106" object="" resource="ACSSL" toString="nearest_traffic_route: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 349:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_traffic_route(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_traffic_route(pes, exs, e))&#10;"/>
<po column="1" line="358" message="nearest_process_building: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 358:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_process_building(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_process_building(pes, exs, e))&#10;" number="107" object="" resource="ACSSL" toString="nearest_process_building: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 358:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  pre_nearest_process_building(pes, exs) =&gt; exists e:Exposed_site &amp; post_nearest_process_building(pes, exs, e))&#10;"/>
<po column="12" line="370" message="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 370:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_storage_building(pes, exs))&#10;" number="108" object="" resource="ACSSL" toString="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 370:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_storage_building(pes, exs))&#10;"/>
<po column="12" line="372" message="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 372:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_process_building(pes, exs))&#10;" number="109" object="" resource="ACSSL" toString="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 372:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_process_building(pes, exs))&#10;"/>
<po column="12" line="374" message="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 374:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_inhabited_building(pes, exs))&#10;" number="110" object="" resource="ACSSL" toString="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 374:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_inhabited_building(pes, exs))&#10;"/>
<po column="12" line="376" message="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 376:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_traffic_route(pes, exs))&#10;" number="111" object="" resource="ACSSL" toString="nearest_buildings: function apply obligation in 'DEFAULT' (ACSSL) at line 376:12&#10;(forall exset:set of (Exposed_site) &amp; &#10;  pre_nearest_traffic_route(pes, exs))&#10;"/>
<po column="1" line="367" message="nearest_buildings: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 367:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  exists exset:set of (Exposed_site) &amp; post_nearest_buildings(pes, exs, exset))&#10;" number="112" object="" resource="ACSSL" toString="nearest_buildings: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 367:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp;&#10;  exists exset:set of (Exposed_site) &amp; post_nearest_buildings(pes, exs, exset))&#10;"/>
<po column="3" line="380" message="find_max_neq: function apply obligation in 'DEFAULT' (ACSSL) at line 380:3&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp; (exs &lt;&gt; {}) =&gt;&#10;  pre_min({qd(pes, e) | [e in set nearest_buildings(pes, exs)]}))&#10;" number="113" object="" resource="ACSSL" toString="find_max_neq: function apply obligation in 'DEFAULT' (ACSSL) at line 380:3&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp; (exs &lt;&gt; {}) =&gt;&#10;  pre_min({qd(pes, e) | [e in set nearest_buildings(pes, exs)]}))&#10;"/>
<po column="7" line="380" message="find_max_neq: subtype obligation in 'DEFAULT' (ACSSL) at line 380:7&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp; (exs &lt;&gt; {}) =&gt;&#10;  is_({qd(pes, e) | [e in set nearest_buildings(pes, exs)]}, set of (Realp)))&#10;" number="114" object="" resource="ACSSL" toString="find_max_neq: subtype obligation in 'DEFAULT' (ACSSL) at line 380:7&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp; (exs &lt;&gt; {}) =&gt;&#10;  is_({qd(pes, e) | [e in set nearest_buildings(pes, exs)]}, set of (Realp)))&#10;"/>
<po column="1" line="378" message="find_max_neq: subtype obligation in 'DEFAULT' (ACSSL) at line 378:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp; (exs &lt;&gt; {}) =&gt;&#10;  inv_Kg(min({qd(pes, e) | [e in set nearest_buildings(pes, exs)]})))&#10;" number="115" object="" resource="ACSSL" toString="find_max_neq: subtype obligation in 'DEFAULT' (ACSSL) at line 378:1&#10;(forall pes:Pot_explosion_site, exs:set of (Exposed_site) &amp; (exs &lt;&gt; {}) =&gt;&#10;  inv_Kg(min({qd(pes, e) | [e in set nearest_buildings(pes, exs)]})))&#10;"/>
<po column="20" line="385" message="centre: sequence apply obligation in 'DEFAULT' (ACSSL) at line 385:20&#10;(forall p:Point &amp; &#10;  (forall i in set {1, ... ,3} &amp;&#10;    i in set inds v))&#10;" number="116" object="" resource="ACSSL" toString="centre: sequence apply obligation in 'DEFAULT' (ACSSL) at line 385:20&#10;(forall p:Point &amp; &#10;  (forall i in set {1, ... ,3} &amp;&#10;    i in set inds v))&#10;"/>
<po column="39" line="385" message="centre: sequence apply obligation in 'DEFAULT' (ACSSL) at line 385:39&#10;(forall p:Point &amp; &#10;  (forall i in set {1, ... ,3} &amp;&#10;    1 in set inds v))&#10;" number="117" object="" resource="ACSSL" toString="centre: sequence apply obligation in 'DEFAULT' (ACSSL) at line 385:39&#10;(forall p:Point &amp; &#10;  (forall i in set {1, ... ,3} &amp;&#10;    1 in set inds v))&#10;"/>
<po column="1" line="383" message="centre: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 383:1&#10;(forall v:Quad &amp;&#10;  exists p:Point &amp; post_centre(v, p))&#10;" number="118" object="" resource="ACSSL" toString="centre: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 383:1&#10;(forall v:Quad &amp;&#10;  exists p:Point &amp; post_centre(v, p))&#10;"/>
<po column="34" line="389" message="line_eqn: non-zero obligation in 'DEFAULT' (ACSSL) at line 389:34&#10;(forall p1:Point, p2:Point, p3:Point &amp; (distance(p1, p3) = distance(p2, p3)) =&gt;&#10;  (((p1.x) + (p2.x)) - (2 * (p3.x))) &lt;&gt; 0)&#10;" number="119" object="" resource="ACSSL" toString="line_eqn: non-zero obligation in 'DEFAULT' (ACSSL) at line 389:34&#10;(forall p1:Point, p2:Point, p3:Point &amp; (distance(p1, p3) = distance(p2, p3)) =&gt;&#10;  (((p1.x) + (p2.x)) - (2 * (p3.x))) &lt;&gt; 0)&#10;"/>
<po column="50" line="390" message="line_eqn: non-zero obligation in 'DEFAULT' (ACSSL) at line 390:50&#10;(forall p1:Point, p2:Point, p3:Point &amp; (distance(p1, p3) = distance(p2, p3)) =&gt;&#10;  (((p1.x) + (p2.x)) - (2 * (p3.x))) &lt;&gt; 0)&#10;" number="120" object="" resource="ACSSL" toString="line_eqn: non-zero obligation in 'DEFAULT' (ACSSL) at line 390:50&#10;(forall p1:Point, p2:Point, p3:Point &amp; (distance(p1, p3) = distance(p2, p3)) =&gt;&#10;  (((p1.x) + (p2.x)) - (2 * (p3.x))) &lt;&gt; 0)&#10;"/>
<po column="5" line="402" message="incline: function apply obligation in 'DEFAULT' (ACSSL) at line 402:5&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp;&#10;  ((distance(p1, p2) = distance(p1, p4)) =&gt;&#10;    ((distance(p2, p5) = distance(p2, p6)) =&gt;&#10;      pre_line_eqn(p5, p6, p2))))&#10;" number="121" object="" resource="ACSSL" toString="incline: function apply obligation in 'DEFAULT' (ACSSL) at line 402:5&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp;&#10;  ((distance(p1, p2) = distance(p1, p4)) =&gt;&#10;    ((distance(p2, p5) = distance(p2, p6)) =&gt;&#10;      pre_line_eqn(p5, p6, p2))))&#10;"/>
<po column="26" line="402" message="incline: function apply obligation in 'DEFAULT' (ACSSL) at line 402:26&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp;&#10;  ((distance(p1, p2) = distance(p1, p4)) =&gt;&#10;    ((distance(p2, p5) = distance(p2, p6)) =&gt;&#10;      pre_line_eqn(p3, p4, p1))))&#10;" number="122" object="" resource="ACSSL" toString="incline: function apply obligation in 'DEFAULT' (ACSSL) at line 402:26&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp;&#10;  ((distance(p1, p2) = distance(p1, p4)) =&gt;&#10;    ((distance(p2, p5) = distance(p2, p6)) =&gt;&#10;      pre_line_eqn(p3, p4, p1))))&#10;"/>
<po column="27" line="395" message="incline, m1, c1: function apply obligation in 'DEFAULT' (ACSSL) at line 395:27&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  pre_line_eqn(p5, p6, p2))&#10;" number="123" object="" resource="ACSSL" toString="incline, m1, c1: function apply obligation in 'DEFAULT' (ACSSL) at line 395:27&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  pre_line_eqn(p5, p6, p2))&#10;"/>
<po column="27" line="396" message="incline, c2, m2: function apply obligation in 'DEFAULT' (ACSSL) at line 396:27&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    pre_line_eqn(p3, p4, p1)))&#10;" number="124" object="" resource="ACSSL" toString="incline, c2, m2: function apply obligation in 'DEFAULT' (ACSSL) at line 396:27&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    pre_line_eqn(p3, p4, p1)))&#10;"/>
<po column="22" line="397" message="incline, x3: non-zero obligation in 'DEFAULT' (ACSSL) at line 397:22&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (m2 - m1) &lt;&gt; 0)))&#10;" number="125" object="" resource="ACSSL" toString="incline, x3: non-zero obligation in 'DEFAULT' (ACSSL) at line 397:22&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (m2 - m1) &lt;&gt; 0)))&#10;"/>
<po column="31" line="398" message="incline, y3: non-zero obligation in 'DEFAULT' (ACSSL) at line 398:31&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (let x3:real = ((c1 - c2) / (m2 - m1)) in&#10;        (m2 - m1) &lt;&gt; 0))))&#10;" number="126" object="" resource="ACSSL" toString="incline, y3: non-zero obligation in 'DEFAULT' (ACSSL) at line 398:31&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (let x3:real = ((c1 - c2) / (m2 - m1)) in&#10;        (m2 - m1) &lt;&gt; 0))))&#10;"/>
<po column="12" line="399" message="incline: function apply obligation in 'DEFAULT' (ACSSL) at line 399:12&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (let x3:real = ((c1 - c2) / (m2 - m1)) in&#10;        (let y3:real = (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in&#10;          pre_sqrt(((((x3 - (p2.x)) ** 2) + ((y3 - (p2.y)) ** 2)) / (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2)))))))))&#10;" number="127" object="" resource="ACSSL" toString="incline: function apply obligation in 'DEFAULT' (ACSSL) at line 399:12&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (let x3:real = ((c1 - c2) / (m2 - m1)) in&#10;        (let y3:real = (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in&#10;          pre_sqrt(((((x3 - (p2.x)) ** 2) + ((y3 - (p2.y)) ** 2)) / (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2)))))))))&#10;"/>
<po column="47" line="399" message="incline: non-zero obligation in 'DEFAULT' (ACSSL) at line 399:47&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (let x3:real = ((c1 - c2) / (m2 - m1)) in&#10;        (let y3:real = (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in&#10;          (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2)) &lt;&gt; 0)))))&#10;" number="128" object="" resource="ACSSL" toString="incline: non-zero obligation in 'DEFAULT' (ACSSL) at line 399:47&#10;(forall p1:Point, p2:Point, p3:Point, p4:Point, p5:Point, p6:Point &amp; ((distance(p1, p2) = distance(p1, p4)) and ((distance(p2, p5) = distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) = -1))) =&gt;&#10;  (let mk_Line(m1, c1):Line = line_eqn(p5, p6, p2) in&#10;    (let mk_Line(m2, c2):Line = line_eqn(p3, p4, p1) in&#10;      (let x3:real = ((c1 - c2) / (m2 - m1)) in&#10;        (let y3:real = (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in&#10;          (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2)) &lt;&gt; 0)))))&#10;"/>
<po column="26" line="406" message="ang_sep, fsharp: function apply obligation in 'DEFAULT' (ACSSL) at line 406:26&#10;(forall qsharp:real &amp; &#10;  pre_incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2)))&#10;" number="129" object="" resource="ACSSL" toString="ang_sep, fsharp: function apply obligation in 'DEFAULT' (ACSSL) at line 406:26&#10;(forall qsharp:real &amp; &#10;  pre_incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2)))&#10;"/>
<po column="41" line="406" message="ang_sep, fsharp: subtype obligation in 'DEFAULT' (ACSSL) at line 406:41&#10;(forall qsharp:real &amp; &#10;  inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))&#10;" number="130" object="" resource="ACSSL" toString="ang_sep, fsharp: subtype obligation in 'DEFAULT' (ACSSL) at line 406:41&#10;(forall qsharp:real &amp; &#10;  inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))&#10;"/>
<po column="25" line="407" message="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 407:25&#10;(forall qsharp:real &amp; &#10;  1 in set inds (pes.vertices))&#10;" number="131" object="" resource="ACSSL" toString="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 407:25&#10;(forall qsharp:real &amp; &#10;  1 in set inds (pes.vertices))&#10;"/>
<po column="42" line="407" message="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 407:42&#10;(forall qsharp:real &amp; &#10;  4 in set inds (pes.vertices))&#10;" number="132" object="" resource="ACSSL" toString="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 407:42&#10;(forall qsharp:real &amp; &#10;  4 in set inds (pes.vertices))&#10;"/>
<po column="59" line="407" message="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 407:59&#10;(forall qsharp:real &amp; &#10;  1 in set inds (exs.vertices))&#10;" number="133" object="" resource="ACSSL" toString="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 407:59&#10;(forall qsharp:real &amp; &#10;  1 in set inds (exs.vertices))&#10;"/>
<po column="25" line="408" message="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 408:25&#10;(forall qsharp:real &amp; &#10;  2 in set inds (exs.vertices))&#10;" number="134" object="" resource="ACSSL" toString="ang_sep, fsharp: sequence apply obligation in 'DEFAULT' (ACSSL) at line 408:25&#10;(forall qsharp:real &amp; &#10;  2 in set inds (exs.vertices))&#10;"/>
<po column="16" line="409" message="ang_sep: subtype obligation in 'DEFAULT' (ACSSL) at line 409:16&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point)))))&#10;" number="135" object="" resource="ACSSL" toString="ang_sep: subtype obligation in 'DEFAULT' (ACSSL) at line 409:16&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point)))))&#10;"/>
<po column="23" line="410" message="ang_sep: subtype obligation in 'DEFAULT' (ACSSL) at line 410:23&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;" number="136" object="" resource="ACSSL" toString="ang_sep: subtype obligation in 'DEFAULT' (ACSSL) at line 410:23&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;"/>
<po column="20" line="413" message="ang_sep, m1: function apply obligation in 'DEFAULT' (ACSSL) at line 413:20&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      pre_line_eqn((pes.vertices)(1), (pes.vertices)(4), centre((pes.vertices))))))&#10;" number="137" object="" resource="ACSSL" toString="ang_sep, m1: function apply obligation in 'DEFAULT' (ACSSL) at line 413:20&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      pre_line_eqn((pes.vertices)(1), (pes.vertices)(4), centre((pes.vertices))))))&#10;"/>
<po column="29" line="413" message="ang_sep, m1: sequence apply obligation in 'DEFAULT' (ACSSL) at line 413:29&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      1 in set inds (pes.vertices))))&#10;" number="138" object="" resource="ACSSL" toString="ang_sep, m1: sequence apply obligation in 'DEFAULT' (ACSSL) at line 413:29&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      1 in set inds (pes.vertices))))&#10;"/>
<po column="46" line="413" message="ang_sep, m1: sequence apply obligation in 'DEFAULT' (ACSSL) at line 413:46&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      4 in set inds (pes.vertices))))&#10;" number="139" object="" resource="ACSSL" toString="ang_sep, m1: sequence apply obligation in 'DEFAULT' (ACSSL) at line 413:46&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      4 in set inds (pes.vertices))))&#10;"/>
<po column="43" line="414" message="ang_sep, m1: subtype obligation in 'DEFAULT' (ACSSL) at line 414:43&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;" number="140" object="" resource="ACSSL" toString="ang_sep, m1: subtype obligation in 'DEFAULT' (ACSSL) at line 414:43&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;"/>
<po column="54" line="415" message="ang_sep, m2: subtype obligation in 'DEFAULT' (ACSSL) at line 415:54&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;" number="141" object="" resource="ACSSL" toString="ang_sep, m2: subtype obligation in 'DEFAULT' (ACSSL) at line 415:54&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;"/>
<po column="59" line="416" message="ang_sep, m2: subtype obligation in 'DEFAULT' (ACSSL) at line 416:59&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;" number="142" object="" resource="ACSSL" toString="ang_sep, m2: subtype obligation in 'DEFAULT' (ACSSL) at line 416:59&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      inv_Quad((pes.vertices)) and (is_((pes.vertices), seq of (Point))))))&#10;"/>
<po column="70" line="415" message="ang_sep, m2: non-zero obligation in 'DEFAULT' (ACSSL) at line 415:70&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      ((centre((exs.vertices)).x) - (centre((pes.vertices)).x)) &lt;&gt; 0)))&#10;" number="143" object="" resource="ACSSL" toString="ang_sep, m2: non-zero obligation in 'DEFAULT' (ACSSL) at line 415:70&#10;(forall qsharp:real &amp; &#10;  (let fsharp:real = arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in&#10;    (not ((centre((pes.vertices)).x) = (centre((exs.vertices)).x)) =&gt;&#10;      ((centre((exs.vertices)).x) - (centre((pes.vertices)).x)) &lt;&gt; 0)))&#10;"/>
<po column="1" line="405" message="ang_sep: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 405:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  exists qsharp:real &amp; post_ang_sep(pes, exs, qsharp))&#10;" number="144" object="" resource="ACSSL" toString="ang_sep: function satisfiability obligation in 'DEFAULT' (ACSSL) at line 405:1&#10;(forall pes:Pot_explosion_site, exs:Exposed_site &amp;&#10;  exists qsharp:real &amp; post_ang_sep(pes, exs, qsharp))&#10;"/>
<po column="5" line="421" message="arctan: let be st existence obligation in 'DEFAULT' (ACSSL) at line 421:5&#10;(forall r:real &amp;&#10;  exists res:real)&#10;" number="145" object="" resource="ACSSL" toString="arctan: let be st existence obligation in 'DEFAULT' (ACSSL) at line 421:5&#10;(forall r:real &amp;&#10;  exists res:real)&#10;"/>
<po column="42" line="428" message="ADD_OBJECT: map apply obligation in 'DEFAULT' (ACSSL) at line 428:42&#10;((site in set (dom pes)) =&gt;&#10;  (forall pt:Point &amp;&#10;    site in set dom pes))&#10;" number="146" object="" resource="ACSSL" toString="ADD_OBJECT: map apply obligation in 'DEFAULT' (ACSSL) at line 428:42&#10;((site in set (dom pes)) =&gt;&#10;  (forall pt:Point &amp;&#10;    site in set dom pes))&#10;"/>
<po column="45" line="429" message="ADD_OBJECT: map apply obligation in 'DEFAULT' (ACSSL) at line 429:45&#10;((site in set (dom pes)) =&gt;&#10;  (forall pt:Point &amp;&#10;    (safe_addition(o, (pes(site).mgzn), pt) =&gt;&#10;      site in set dom pes)))&#10;" number="147" object="" resource="ACSSL" toString="ADD_OBJECT: map apply obligation in 'DEFAULT' (ACSSL) at line 429:45&#10;((site in set (dom pes)) =&gt;&#10;  (forall pt:Point &amp;&#10;    (safe_addition(o, (pes(site).mgzn), pt) =&gt;&#10;      site in set dom pes)))&#10;"/>
<po column="14" line="430" message="ADD_OBJECT, p: map apply obligation in 'DEFAULT' (ACSSL) at line 430:14&#10;site in set dom pes~&#10;" number="148" object="" resource="ACSSL" toString="ADD_OBJECT, p: map apply obligation in 'DEFAULT' (ACSSL) at line 430:14&#10;site in set dom pes~&#10;"/>
<po column="26" line="431" message="ADD_OBJECT, x, y: function apply obligation in 'DEFAULT' (ACSSL) at line 431:26&#10;(let p:Pot_explosion_site = pes~(site) in&#10;  pre_find_point(o, (p.mgzn)))&#10;" number="149" object="" resource="ACSSL" toString="ADD_OBJECT, x, y: function apply obligation in 'DEFAULT' (ACSSL) at line 431:26&#10;(let p:Pot_explosion_site = pes~(site) in&#10;  pre_find_point(o, (p.mgzn)))&#10;"/>
<po column="1" line="425" message="ADD_OBJECT: operation post condition obligation in 'DEFAULT' (ACSSL) at line 425:1&#10;let p:Pot_explosion_site = pes~(site) in let mk_Point(x, y):Point = find_point(o, (p.mgzn)) in let new_elems:map (Element_label) to (Element) = (((p.mgzn).elements) ++ {elt |-&gt; mk_Element(o, x, y)}) in let new_mag:Magazine = mu((p.mgzn), elements |-&gt; new_elems) in let new_site:Pot_explosion_site = mu(p, mgzn |-&gt; new_mag) in (pes = (pes~ ++ {site |-&gt; new_site}))&#10;" number="150" object="" resource="ACSSL" toString="ADD_OBJECT: operation post condition obligation in 'DEFAULT' (ACSSL) at line 425:1&#10;let p:Pot_explosion_site = pes~(site) in let mk_Point(x, y):Point = find_point(o, (p.mgzn)) in let new_elems:map (Element_label) to (Element) = (((p.mgzn).elements) ++ {elt |-&gt; mk_Element(o, x, y)}) in let new_mag:Magazine = mu((p.mgzn), elements |-&gt; new_elems) in let new_site:Pot_explosion_site = mu(p, mgzn |-&gt; new_mag) in (pes = (pes~ ++ {site |-&gt; new_site}))&#10;"/>
<po column="1" line="425" message="ADD_OBJECT: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 425:1&#10;(forall o:Object, elt:Element_label, site:Site_label, oldstate:Store &amp;&#10;  pre_ADD_OBJECT(o, elt, site, oldstate) =&gt;&#10;  post_ADD_OBJECT(o, elt, site, oldstate, newstate))&#10;" number="151" object="" resource="ACSSL" toString="ADD_OBJECT: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 425:1&#10;(forall o:Object, elt:Element_label, site:Site_label, oldstate:Store &amp;&#10;  pre_ADD_OBJECT(o, elt, site, oldstate) =&gt;&#10;  post_ADD_OBJECT(o, elt, site, oldstate, newstate))&#10;"/>
<po column="45" line="440" message="REMOVE_OBJECT: map apply obligation in 'DEFAULT' (ACSSL) at line 440:45&#10;((site in set (dom pes)) =&gt;&#10;  site in set dom pes)&#10;" number="152" object="" resource="ACSSL" toString="REMOVE_OBJECT: map apply obligation in 'DEFAULT' (ACSSL) at line 440:45&#10;((site in set (dom pes)) =&gt;&#10;  site in set dom pes)&#10;"/>
<po column="14" line="441" message="REMOVE_OBJECT, p: map apply obligation in 'DEFAULT' (ACSSL) at line 441:14&#10;site in set dom pes~&#10;" number="153" object="" resource="ACSSL" toString="REMOVE_OBJECT, p: map apply obligation in 'DEFAULT' (ACSSL) at line 441:14&#10;site in set dom pes~&#10;"/>
<po column="1" line="438" message="REMOVE_OBJECT: operation post condition obligation in 'DEFAULT' (ACSSL) at line 438:1&#10;let p:Pot_explosion_site = pes~(site) in let new_elems:inmap of (Element_label) to (Element) = ({elt} &lt;-: ((p.mgzn).elements)) in let new_mag:Magazine = mu((p.mgzn), elements |-&gt; new_elems) in let new_site:Pot_explosion_site = mu(p, mgzn |-&gt; new_mag) in (pes = (pes~ ++ {site |-&gt; new_site}))&#10;" number="154" object="" resource="ACSSL" toString="REMOVE_OBJECT: operation post condition obligation in 'DEFAULT' (ACSSL) at line 438:1&#10;let p:Pot_explosion_site = pes~(site) in let new_elems:inmap of (Element_label) to (Element) = ({elt} &lt;-: ((p.mgzn).elements)) in let new_mag:Magazine = mu((p.mgzn), elements |-&gt; new_elems) in let new_site:Pot_explosion_site = mu(p, mgzn |-&gt; new_mag) in (pes = (pes~ ++ {site |-&gt; new_site}))&#10;"/>
<po column="1" line="438" message="REMOVE_OBJECT: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 438:1&#10;(forall elt:Element_label, site:Site_label, oldstate:Store &amp;&#10;  pre_REMOVE_OBJECT(elt, site, oldstate) =&gt;&#10;  post_REMOVE_OBJECT(elt, site, oldstate, newstate))&#10;" number="155" object="" resource="ACSSL" toString="REMOVE_OBJECT: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 438:1&#10;(forall elt:Element_label, site:Site_label, oldstate:Store &amp;&#10;  pre_REMOVE_OBJECT(elt, site, oldstate) =&gt;&#10;  post_REMOVE_OBJECT(elt, site, oldstate, newstate))&#10;"/>
<po column="20" line="457" message="ADD_PES, new_neq: function apply obligation in 'DEFAULT' (ACSSL) at line 457:20&#10;pre_find_max_neq(pex, (rng exs~))&#10;" number="156" object="" resource="ACSSL" toString="ADD_PES, new_neq: function apply obligation in 'DEFAULT' (ACSSL) at line 457:20&#10;pre_find_max_neq(pex, (rng exs~))&#10;"/>
<po column="49" line="462" message="ADD_PES, new_exp: subtype obligation in 'DEFAULT' (ACSSL) at line 462:49&#10;(let new_neq:Kg = find_max_neq(pex, (rng exs~)) in&#10;  (let new_mgzn:Magazine = mu((pex.mgzn), max_neq |-&gt; new_neq) in&#10;    (let new_pex:Pot_explosion_site = mu(pex, mgzn |-&gt; new_mgzn) in&#10;      (let new_building:Building = mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in&#10;        inv_Quad((pex.vertices)) and (is_((pex.vertices), seq of (Point)))))))&#10;" number="157" object="" resource="ACSSL" toString="ADD_PES, new_exp: subtype obligation in 'DEFAULT' (ACSSL) at line 462:49&#10;(let new_neq:Kg = find_max_neq(pex, (rng exs~)) in&#10;  (let new_mgzn:Magazine = mu((pex.mgzn), max_neq |-&gt; new_neq) in&#10;    (let new_pex:Pot_explosion_site = mu(pex, mgzn |-&gt; new_mgzn) in&#10;      (let new_building:Building = mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in&#10;        inv_Quad((pex.vertices)) and (is_((pex.vertices), seq of (Point)))))))&#10;"/>
<po column="20" line="462" message="ADD_PES, new_exp: subtype obligation in 'DEFAULT' (ACSSL) at line 462:20&#10;(let new_neq:Kg = find_max_neq(pex, (rng exs~)) in&#10;  (let new_mgzn:Magazine = mu((pex.mgzn), max_neq |-&gt; new_neq) in&#10;    (let new_pex:Pot_explosion_site = mu(pex, mgzn |-&gt; new_mgzn) in&#10;      (let new_building:Building = mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in&#10;        inv_Exposed_site(mk_Exposed_site(new_building, (pex.vertices), (pex.door))) and (inv_Quad((pex.vertices)) and (is_((pex.vertices), seq of (Point))))))))&#10;" number="158" object="" resource="ACSSL" toString="ADD_PES, new_exp: subtype obligation in 'DEFAULT' (ACSSL) at line 462:20&#10;(let new_neq:Kg = find_max_neq(pex, (rng exs~)) in&#10;  (let new_mgzn:Magazine = mu((pex.mgzn), max_neq |-&gt; new_neq) in&#10;    (let new_pex:Pot_explosion_site = mu(pex, mgzn |-&gt; new_mgzn) in&#10;      (let new_building:Building = mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in&#10;        inv_Exposed_site(mk_Exposed_site(new_building, (pex.vertices), (pex.door))) and (inv_Quad((pex.vertices)) and (is_((pex.vertices), seq of (Point))))))))&#10;"/>
<po column="1" line="448" message="ADD_PES: operation post condition obligation in 'DEFAULT' (ACSSL) at line 448:1&#10;let new_neq:Kg = find_max_neq(pex, (rng exs~)) in let new_mgzn:Magazine = mu((pex.mgzn), max_neq |-&gt; new_neq) in let new_pex:Pot_explosion_site = mu(pex, mgzn |-&gt; new_mgzn) in let new_building:Building = mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in let new_exp:Exposed_site = mk_Exposed_site(new_building, (pex.vertices), (pex.door)) in ((pes = (pes~ ++ {label |-&gt; new_pex})) and (exs = (exs~ ++ {label |-&gt; new_exp})))&#10;" number="159" object="" resource="ACSSL" toString="ADD_PES: operation post condition obligation in 'DEFAULT' (ACSSL) at line 448:1&#10;let new_neq:Kg = find_max_neq(pex, (rng exs~)) in let new_mgzn:Magazine = mu((pex.mgzn), max_neq |-&gt; new_neq) in let new_pex:Pot_explosion_site = mu(pex, mgzn |-&gt; new_mgzn) in let new_building:Building = mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in let new_exp:Exposed_site = mk_Exposed_site(new_building, (pex.vertices), (pex.door)) in ((pes = (pes~ ++ {label |-&gt; new_pex})) and (exs = (exs~ ++ {label |-&gt; new_exp})))&#10;"/>
<po column="1" line="448" message="ADD_PES: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 448:1&#10;(forall pex:Pot_explosion_site, label:Site_label, type:Storage_building, oldstate:Store &amp;&#10;  pre_ADD_PES(pex, label, type, oldstate) =&gt;&#10;  post_ADD_PES(pex, label, type, oldstate, newstate))&#10;" number="160" object="" resource="ACSSL" toString="ADD_PES: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 448:1&#10;(forall pex:Pot_explosion_site, label:Site_label, type:Storage_building, oldstate:Store &amp;&#10;  pre_ADD_PES(pex, label, type, oldstate) =&gt;&#10;  post_ADD_PES(pex, label, type, oldstate, newstate))&#10;"/>
<po column="27" line="480" message="ADD_EXP, proposed_neq: function apply obligation in 'DEFAULT' (ACSSL) at line 480:27&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          pre_find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))))))))&#10;" number="161" object="" resource="ACSSL" toString="ADD_EXP, proposed_neq: function apply obligation in 'DEFAULT' (ACSSL) at line 480:27&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          pre_find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))))))))&#10;"/>
<po column="15" line="482" message="ADD_EXP: subtype obligation in 'DEFAULT' (ACSSL) at line 482:15&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          (let proposed_neq:Kg = find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))) in&#10;            ((proposed_neq &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;              is_real(find_max_neq(pex, (rng exs))))))))))&#10;" number="162" object="" resource="ACSSL" toString="ADD_EXP: subtype obligation in 'DEFAULT' (ACSSL) at line 482:15&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          (let proposed_neq:Kg = find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))) in&#10;            ((proposed_neq &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;              is_real(find_max_neq(pex, (rng exs))))))))))&#10;"/>
<po column="45" line="482" message="ADD_EXP: subtype obligation in 'DEFAULT' (ACSSL) at line 482:45&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          (let proposed_neq:Kg = find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))) in&#10;            ((proposed_neq &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;              is_real(proposed_neq))))))))&#10;" number="163" object="" resource="ACSSL" toString="ADD_EXP: subtype obligation in 'DEFAULT' (ACSSL) at line 482:45&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          (let proposed_neq:Kg = find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))) in&#10;            ((proposed_neq &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;              is_real(proposed_neq))))))))&#10;"/>
<po column="15" line="482" message="ADD_EXP: function apply obligation in 'DEFAULT' (ACSSL) at line 482:15&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          (let proposed_neq:Kg = find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))) in&#10;            ((proposed_neq &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;              pre_find_max_neq(pex, (rng exs)))))))))&#10;" number="164" object="" resource="ACSSL" toString="ADD_EXP: function apply obligation in 'DEFAULT' (ACSSL) at line 482:15&#10;((not is_(((ex.building).type), Storage_building)) =&gt;&#10;  (forall v in set (elems (ex.vertices)) &amp;&#10;    (((0 &lt;= (v.x)) and (((v.x) &lt;= xmax) and ((0 &lt;= (v.y)) and ((v.y) &lt;= ymax)))) =&gt;&#10;      ((label not in set (dom exs)) =&gt;&#10;        (forall pex in set (rng pes) &amp;&#10;          (let proposed_neq:Kg = find_max_neq(pex, (rng (exs ++ {label |-&gt; ex}))) in&#10;            ((proposed_neq &lt;&gt; &lt;INFINITY&gt;) =&gt;&#10;              pre_find_max_neq(pex, (rng exs)))))))))&#10;"/>
<po column="1" line="470" message="ADD_EXP: operation post condition obligation in 'DEFAULT' (ACSSL) at line 470:1&#10;(exs = (exs~ ++ {label |-&gt; ex}))&#10;" number="165" object="" resource="ACSSL" toString="ADD_EXP: operation post condition obligation in 'DEFAULT' (ACSSL) at line 470:1&#10;(exs = (exs~ ++ {label |-&gt; ex}))&#10;"/>
<po column="1" line="470" message="ADD_EXP: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 470:1&#10;(forall ex:Exposed_site, label:Site_label, oldstate:Store &amp;&#10;  pre_ADD_EXP(ex, label, oldstate) =&gt;&#10;  post_ADD_EXP(ex, label, oldstate, newstate))&#10;" number="166" object="" resource="ACSSL" toString="ADD_EXP: operation satifiability obligation in 'DEFAULT' (ACSSL) at line 470:1&#10;(forall ex:Exposed_site, label:Site_label, oldstate:Store &amp;&#10;  pre_ADD_EXP(ex, label, oldstate) =&gt;&#10;  post_ADD_EXP(ex, label, oldstate, newstate))&#10;"/>
</result>
</testResult>
