-- TCErrors: WARNING:5000:67,3 WARNING:5000:74,3 WARNING:5000:78,3 WARNING:5000:82,3 PROOFOBLIGATION: R2F0ZXdheSwgcmVzdF9wLDAsKGZvcmFsbCBtczpzZXEgb2YgKE1lc3NhZ2UpLCBjYXQ6Q2F0ZWdvcnkgJgogIChub3QgKG1zID0gW10pID0+CiAgICBNZXNMZW4obXMsIGNhdCkgPiBNZXNMZW4oKHRsIG1zKSwgY2F0KSkpCixyZWN1cnNpdmUgZnVuY3Rpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: R2F0ZXdheSwgcmVzdF9wLDAsKGZvcmFsbCBtczpzZXEgb2YgKE1lc3NhZ2UpLCBjYXQ6Q2F0ZWdvcnkgJgogIChub3QgKG1zID0gW10pID0+CiAgICBtcyA8PiBbXSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: R2F0ZXdheSwwLChmb3JhbGwgbXM6c2VxIG9mIChNZXNzYWdlKSwgY2F0OkNhdGVnb3J5ICYKICAobm90IChtcyA9IFtdKSA9PgogICAgKGxldCByZXN0X3A6UG9ydHMgPSBHYXRld2F5KCh0bCBtcyksIGNhdCkgaW4KICAgICAgbXMgPD4gW10pKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: R2F0ZXdheTIsMCwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBtcykgJiAoQ2xhc3NpZnkobXMoaSksIGNhdCkgPSA8SEk+KSA9PgogICAgaSBpbiBzZXQgaW5kcyBtcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: R2F0ZXdheTIsMCwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBtcykgJgogICAgaSBpbiBzZXQgaW5kcyBtcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: R2F0ZXdheTIsMCwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBtcykgJiAoQ2xhc3NpZnkobXMoaSksIGNhdCkgPSA8TE8+KSA9PgogICAgaSBpbiBzZXQgaW5kcyBtcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: R2F0ZXdheTIsMCwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBtcykgJgogICAgaSBpbiBzZXQgaW5kcyBtcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Q2Vuc29yLDAsKGZvcmFsbCBtczpzZXEgb2YgKE1lc3NhZ2UpLCBjYXQ6Q2F0ZWdvcnkgJgogIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgbXMpICYgKENsYXNzaWZ5KG1zKGkpLCBjYXQpID0gPExPPikgPT4KICAgIGkgaW4gc2V0IGluZHMgbXMpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Q2Vuc29yLDAsKGZvcmFsbCBtczpzZXEgb2YgKE1lc3NhZ2UpLCBjYXQ6Q2F0ZWdvcnkgJgogIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgbXMpICYKICAgIGkgaW4gc2V0IGluZHMgbXMpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RmxhdHRlbk1lc3NhZ2VzLDAsKGZvcmFsbCBtczpzZXEgb2YgKE1lc3NhZ2UpICYgKChsZW4gKGNvbmMgbXMpKSA8PSAxMDApID0+CiAgaW52X01lc3NhZ2UoKGNvbmMgbXMpKSBhbmQgKGludl9TdHJpbmcoKGNvbmMgbXMpKSBhbmQgKGlzXygoY29uYyBtcyksIHNlcSBvZiAoY2hhcikpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs


--gateway.vdmsl

-- A trusted gateway
-- For Chapter 7 (Sequences)

types

  String = seq of char
  inv s == s <> [];  

  Message = String
  inv m == len m <= 100;

  Classification = <HI> | <LO>;

  Category = set of String;

  Ports :: high: seq of Message
           low : seq of Message

functions

-- checking whether a substring occur in another string

  Occurs: String * String -> bool
  Occurs(substr,str) ==
    exists i,j in set inds str & substr = str(i,...,j);

-- Classifying messages

  Classify: Message * Category -> Classification
  Classify(m,cat) ==
    if exists hi in set cat & Occurs(hi,m)
    then <HI>
    else <LO>;


-- The main gateway function using recursion

  Gateway: seq of Message * Category -> Ports
  Gateway(ms,cat) ==
    if ms = []
    then mk_Ports([],[])
    else let rest_p = Gateway(tl ms,cat)
         in
           ProcessMessage(hd ms,cat,rest_p)
   measure MesLen;
   
   MesLen: seq of Message * Category -> nat
   MesLen(list,-) ==
     len list;

-- Classify the message and add to the appropriate port.

  ProcessMessage: Message * Category * Ports -> Ports
  ProcessMessage(m,cat,ps) ==
    if Classify(m,cat) = <HI>
    then mk_Ports([m]^ps.high,ps.low)
    else mk_Ports(ps.high,[m]^ps.low);


-- The main gateway function without using recursion

  Gateway2: seq of Message * Category -> Ports
  Gateway2(ms,cat) ==
    mk_Ports([ms(i)|i in set inds ms & Classify(ms(i),cat) = <HI>],
             [ms(i)|i in set inds ms & Classify(ms(i),cat) = <LO>]);

-- Functions illustrating other sequence operators. 

  AnyHighClass: seq of Message * Category -> bool
  AnyHighClass(ms,cat) ==
    exists m in set elems ms & Classify(m,cat) = <HI>;

  Censor: seq of Message * Category -> seq of Message
  Censor(ms,cat) ==
    [ms(i) | i in set inds ms & Classify(ms(i),cat) = <LO>];

  FlattenMessages: seq of Message -> Message
  FlattenMessages(ms) ==
    conc ms
  pre len conc ms <= 100 