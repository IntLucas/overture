<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="3" line="60" message="AuxSeqToBag: recursive function obligation in 'BAG' (barSL) at line 60:3&#10;(forall s:seq of (Elem), b:Bag &amp;&#10;  (not [] = s =&gt;&#10;    (exists [e] ^ rest:seq of (Elem) &amp; [e] ^ rest = s =&gt;&#10;    let [e] ^ rest = s in&#10;      LenPar1(s, b) &gt; LenPar1(rest, Add(e, b)))))&#10;" number="1" object="" resource="barSL" toString="AuxSeqToBag: recursive function obligation in 'BAG' (barSL) at line 60:3&#10;(forall s:seq of (Elem), b:Bag &amp;&#10;  (not [] = s =&gt;&#10;    (exists [e] ^ rest:seq of (Elem) &amp; [e] ^ rest = s =&gt;&#10;    let [e] ^ rest = s in&#10;      LenPar1(s, b) &gt; LenPar1(rest, Add(e, b)))))&#10;"/>
<po column="5" line="62" message="AuxSeqToBag: cases exhaustive obligation in 'BAG' (barSL) at line 62:5&#10;(forall s:seq of (Elem), b:Bag &amp;&#10;  s = [] or (exists [e] ^ rest:seq of (Elem) &amp; s = [e] ^ rest))&#10;" number="2" object="" resource="barSL" toString="AuxSeqToBag: cases exhaustive obligation in 'BAG' (barSL) at line 62:5&#10;(forall s:seq of (Elem), b:Bag &amp;&#10;  s = [] or (exists [e] ^ rest:seq of (Elem) &amp; s = [e] ^ rest))&#10;"/>
<po column="22" line="85" message="Add: map apply obligation in 'BAG' (barSL) at line 85:22&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    e in set dom b))&#10;" number="3" object="" resource="barSL" toString="Add: map apply obligation in 'BAG' (barSL) at line 85:22&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    e in set dom b))&#10;"/>
<po column="13" line="91" message="Remove: map apply obligation in 'BAG' (barSL) at line 91:13&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    e in set dom b))&#10;" number="4" object="" resource="barSL" toString="Remove: map apply obligation in 'BAG' (barSL) at line 91:13&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    e in set dom b))&#10;"/>
<po column="27" line="93" message="Remove: map apply obligation in 'BAG' (barSL) at line 93:27&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    (not (b(e) = 1) =&gt;&#10;      e in set dom b)))&#10;" number="5" object="" resource="barSL" toString="Remove: map apply obligation in 'BAG' (barSL) at line 93:27&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    (not (b(e) = 1) =&gt;&#10;      e in set dom b)))&#10;"/>
<po column="3" line="88" message="Remove: subtype obligation in 'BAG' (barSL) at line 88:3&#10;(forall e:Elem, b:Bag &amp;&#10;  (is_((if (e in set (dom b))&#10;  then (if (b(e) = 1)&#10;  then ({e} &lt;-: b)&#10;  else (b ++ {e |-&gt; (b(e) - 1)}))&#10;  else b), map (Elem) to (nat1))))&#10;" number="6" object="" resource="barSL" toString="Remove: subtype obligation in 'BAG' (barSL) at line 88:3&#10;(forall e:Elem, b:Bag &amp;&#10;  (is_((if (e in set (dom b))&#10;  then (if (b(e) = 1)&#10;  then ({e} &lt;-: b)&#10;  else (b ++ {e |-&gt; (b(e) - 1)}))&#10;  else b), map (Elem) to (nat1))))&#10;"/>
<po column="10" line="99" message="Count: map apply obligation in 'BAG' (barSL) at line 99:10&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    e in set dom b))&#10;" number="7" object="" resource="barSL" toString="Count: map apply obligation in 'BAG' (barSL) at line 99:10&#10;(forall e:Elem, b:Bag &amp;&#10;  ((e in set (dom b)) =&gt;&#10;    e in set dom b))&#10;"/>
<po column="5" line="110" message="Join: map set compatible obligation in 'BAG' (barSL) at line 110:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; Max(Count(e, b1), Count(e, b2))} | e in set ((dom b1) union (dom b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="8" object="" resource="barSL" toString="Join: map set compatible obligation in 'BAG' (barSL) at line 110:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; Max(Count(e, b1), Count(e, b2))} | e in set ((dom b1) union (dom b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="3" line="108" message="Join: subtype obligation in 'BAG' (barSL) at line 108:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; Max(Count(e, b1), Count(e, b2)) | e in set ((dom b1) union (dom b2))}, map (Elem) to (nat1))))&#10;" number="9" object="" resource="barSL" toString="Join: subtype obligation in 'BAG' (barSL) at line 108:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; Max(Count(e, b1), Count(e, b2)) | e in set ((dom b1) union (dom b2))}, map (Elem) to (nat1))))&#10;"/>
<po column="5" line="115" message="Union: map set compatible obligation in 'BAG' (barSL) at line 115:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; (Count(e, b1) + Count(e, b2))} | e in set ((dom b1) union (dom b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="10" object="" resource="barSL" toString="Union: map set compatible obligation in 'BAG' (barSL) at line 115:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; (Count(e, b1) + Count(e, b2))} | e in set ((dom b1) union (dom b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="3" line="113" message="Union: subtype obligation in 'BAG' (barSL) at line 113:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; (Count(e, b1) + Count(e, b2)) | e in set ((dom b1) union (dom b2))}, map (Elem) to (nat1))))&#10;" number="11" object="" resource="barSL" toString="Union: subtype obligation in 'BAG' (barSL) at line 113:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; (Count(e, b1) + Count(e, b2)) | e in set ((dom b1) union (dom b2))}, map (Elem) to (nat1))))&#10;"/>
<po column="5" line="125" message="Difference: map set compatible obligation in 'BAG' (barSL) at line 125:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; (Count(e, b1) - Count(e, b2))} | e in set (dom b1) &amp; (Count(e, b1) &gt; Count(e, b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="12" object="" resource="barSL" toString="Difference: map set compatible obligation in 'BAG' (barSL) at line 125:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; (Count(e, b1) - Count(e, b2))} | e in set (dom b1) &amp; (Count(e, b1) &gt; Count(e, b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="3" line="123" message="Difference: subtype obligation in 'BAG' (barSL) at line 123:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; (Count(e, b1) - Count(e, b2)) | e in set (dom b1) &amp; (Count(e, b1) &gt; Count(e, b2))}, map (Elem) to (nat1))))&#10;" number="13" object="" resource="barSL" toString="Difference: subtype obligation in 'BAG' (barSL) at line 123:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; (Count(e, b1) - Count(e, b2)) | e in set (dom b1) &amp; (Count(e, b1) &gt; Count(e, b2))}, map (Elem) to (nat1))))&#10;"/>
<po column="14" line="136" message="Size: let be st existence obligation in 'BAG' (barSL) at line 136:14&#10;(forall b:Bag &amp;&#10;  (not (b = {}) =&gt;&#10;    exists e in set (dom b)))&#10;" number="14" object="" resource="barSL" toString="Size: let be st existence obligation in 'BAG' (barSL) at line 136:14&#10;(forall b:Bag &amp;&#10;  (not (b = {}) =&gt;&#10;    exists e in set (dom b)))&#10;"/>
<po column="10" line="138" message="Size: map apply obligation in 'BAG' (barSL) at line 138:10&#10;(forall b:Bag &amp;&#10;  (not (b = {}) =&gt;&#10;    (forall e in set (dom b) &amp;&#10;      e in set dom b)))&#10;" number="15" object="" resource="barSL" toString="Size: map apply obligation in 'BAG' (barSL) at line 138:10&#10;(forall b:Bag &amp;&#10;  (not (b = {}) =&gt;&#10;    (forall e in set (dom b) &amp;&#10;      e in set dom b)))&#10;"/>
<po column="3" line="132" message="Size: recursive function obligation in 'BAG' (barSL) at line 132:3&#10;(forall b:Bag &amp;&#10;  (not (b = {}) =&gt;&#10;    (forall e in set (dom b) &amp;&#10;      CardDom(b) &gt; CardDom(({e} &lt;-: b)))))&#10;" number="16" object="" resource="barSL" toString="Size: recursive function obligation in 'BAG' (barSL) at line 132:3&#10;(forall b:Bag &amp;&#10;  (not (b = {}) =&gt;&#10;    (forall e in set (dom b) &amp;&#10;      CardDom(b) &gt; CardDom(({e} &lt;-: b)))))&#10;"/>
<po column="5" line="149" message="Intersection: map set compatible obligation in 'BAG' (barSL) at line 149:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; Min(Count(e, b1), Count(e, b2))} | e in set ((dom b1) inter (dom b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="17" object="" resource="barSL" toString="Intersection: map set compatible obligation in 'BAG' (barSL) at line 149:5&#10;(forall b1:Bag, b2:Bag &amp;&#10;  forall m1, m2 in set {{e |-&gt; Min(Count(e, b1), Count(e, b2))} | e in set ((dom b1) inter (dom b2))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="3" line="147" message="Intersection: subtype obligation in 'BAG' (barSL) at line 147:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; Min(Count(e, b1), Count(e, b2)) | e in set ((dom b1) inter (dom b2))}, map (Elem) to (nat1))))&#10;" number="18" object="" resource="barSL" toString="Intersection: subtype obligation in 'BAG' (barSL) at line 147:3&#10;(forall b1:Bag, b2:Bag &amp;&#10;  (is_({e |-&gt; Min(Count(e, b1), Count(e, b2)) | e in set ((dom b1) inter (dom b2))}, map (Elem) to (nat1))))&#10;"/>
<po column="16" line="162" message="baga: map sequence compatible obligation in 'BAG' (barSL) at line 162:16&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="19" object="" resource="barSL" toString="baga: map sequence compatible obligation in 'BAG' (barSL) at line 162:16&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="16" line="163" message="bagb: map sequence compatible obligation in 'BAG' (barSL) at line 163:16&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 5}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="20" object="" resource="barSL" toString="bagb: map sequence compatible obligation in 'BAG' (barSL) at line 163:16&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 5}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="214" message="TestAdd1: map sequence compatible obligation in 'BAGTEST' (barSL) at line 214:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 5}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="21" object="" resource="barSL" toString="TestAdd1: map sequence compatible obligation in 'BAGTEST' (barSL) at line 214:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 5}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="219" message="TestAdd2: map sequence compatible obligation in 'BAGTEST' (barSL) at line 219:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}, {&lt;D&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="22" object="" resource="barSL" toString="TestAdd2: map sequence compatible obligation in 'BAGTEST' (barSL) at line 219:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}, {&lt;D&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="232" message="TestDifference: map sequence compatible obligation in 'BAGTEST' (barSL) at line 232:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="23" object="" resource="barSL" toString="TestDifference: map sequence compatible obligation in 'BAGTEST' (barSL) at line 232:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="249" message="TestIntersection: map sequence compatible obligation in 'BAGTEST' (barSL) at line 249:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="24" object="" resource="barSL" toString="TestIntersection: map sequence compatible obligation in 'BAGTEST' (barSL) at line 249:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="254" message="TestJoin: map sequence compatible obligation in 'BAGTEST' (barSL) at line 254:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 5}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="25" object="" resource="barSL" toString="TestJoin: map sequence compatible obligation in 'BAGTEST' (barSL) at line 254:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 5}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="260" message="TestRemove1: map sequence compatible obligation in 'BAGTEST' (barSL) at line 260:5&#10;forall m1, m2 in set {{&lt;C&gt; |-&gt; 5}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="26" object="" resource="barSL" toString="TestRemove1: map sequence compatible obligation in 'BAGTEST' (barSL) at line 260:5&#10;forall m1, m2 in set {{&lt;C&gt; |-&gt; 5}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="265" message="TestRemove2: map sequence compatible obligation in 'BAGTEST' (barSL) at line 265:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="27" object="" resource="barSL" toString="TestRemove2: map sequence compatible obligation in 'BAGTEST' (barSL) at line 265:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="274" message="TestSeqToBag: map sequence compatible obligation in 'BAGTEST' (barSL) at line 274:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="28" object="" resource="barSL" toString="TestSeqToBag: map sequence compatible obligation in 'BAGTEST' (barSL) at line 274:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="16" line="286" message="TestSubBag2: map sequence compatible obligation in 'BAGTEST' (barSL) at line 286:16&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="29" object="" resource="barSL" toString="TestSubBag2: map sequence compatible obligation in 'BAGTEST' (barSL) at line 286:16&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="5" line="291" message="TestUnion: map sequence compatible obligation in 'BAGTEST' (barSL) at line 291:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 4}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 9}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="30" object="" resource="barSL" toString="TestUnion: map sequence compatible obligation in 'BAGTEST' (barSL) at line 291:5&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 4}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 9}, {&lt;D&gt; |-&gt; 4}, {&lt;E&gt; |-&gt; 1}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="26" line="363" message="BuyStock: map apply obligation in 'BAR' (barSL) at line 363:26&#10;(forall supps:map (Supplier) to (Stock), s:Supplier, stock:Order, mk_(c, r):Pub &amp;&#10;  ((s in set (dom supps)) =&gt;&#10;    s in set dom supps))&#10;" number="31" object="" resource="barSL" toString="BuyStock: map apply obligation in 'BAR' (barSL) at line 363:26&#10;(forall supps:map (Supplier) to (Stock), s:Supplier, stock:Order, mk_(c, r):Pub &amp;&#10;  ((s in set (dom supps)) =&gt;&#10;    s in set dom supps))&#10;"/>
<po column="11" line="397" message="RestockCellar: let be st existence obligation in 'BAR' (barSL) at line 397:11&#10;(forall cl:CellarLevel, mk_(c, r):Pub, sb:map (Supplier) to (Stock) &amp;&#10;  (not (sb = {}) =&gt;&#10;    exists s in set (dom sb)))&#10;" number="32" object="" resource="barSL" toString="RestockCellar: let be st existence obligation in 'BAR' (barSL) at line 397:11&#10;(forall cl:CellarLevel, mk_(c, r):Pub, sb:map (Supplier) to (Stock) &amp;&#10;  (not (sb = {}) =&gt;&#10;    exists s in set (dom sb)))&#10;"/>
<po column="53" line="403" message="RestockCellar, can_restock: map apply obligation in 'BAR' (barSL) at line 403:53&#10;(forall cl:CellarLevel, mk_(c, r):Pub, sb:map (Supplier) to (Stock) &amp;&#10;  (not (sb = {}) =&gt;&#10;    (forall s in set (dom sb) &amp;&#10;      (let missing:Bag = BAG`Difference(cl, c) in&#10;        ((BAG`Size(missing) &gt; 0) =&gt;&#10;          s in set dom sb)))))&#10;" number="33" object="" resource="barSL" toString="RestockCellar, can_restock: map apply obligation in 'BAR' (barSL) at line 403:53&#10;(forall cl:CellarLevel, mk_(c, r):Pub, sb:map (Supplier) to (Stock) &amp;&#10;  (not (sb = {}) =&gt;&#10;    (forall s in set (dom sb) &amp;&#10;      (let missing:Bag = BAG`Difference(cl, c) in&#10;        ((BAG`Size(missing) &gt; 0) =&gt;&#10;          s in set dom sb)))))&#10;"/>
<po column="3" line="391" message="RestockCellar: recursive function obligation in 'BAR' (barSL) at line 391:3&#10;(forall cl:CellarLevel, mk_(c, r):Pub, sb:map (Supplier) to (Stock) &amp;&#10;  (not (sb = {}) =&gt;&#10;    (forall s in set (dom sb) &amp;&#10;      (let missing:Bag = BAG`Difference(cl, c) in&#10;        ((BAG`Size(missing) &gt; 0) =&gt;&#10;          (let can_restock:Bag = BAG`Intersection(missing, sb(s)) in&#10;            CardCellar(cl, mk_(c, r), sb) &gt; CardCellar(cl, mk_(BAG`Union(c, can_restock), r), ({s} &lt;-: sb))))))))&#10;" number="34" object="" resource="barSL" toString="RestockCellar: recursive function obligation in 'BAR' (barSL) at line 391:3&#10;(forall cl:CellarLevel, mk_(c, r):Pub, sb:map (Supplier) to (Stock) &amp;&#10;  (not (sb = {}) =&gt;&#10;    (forall s in set (dom sb) &amp;&#10;      (let missing:Bag = BAG`Difference(cl, c) in&#10;        ((BAG`Size(missing) &gt; 0) =&gt;&#10;          (let can_restock:Bag = BAG`Intersection(missing, sb(s)) in&#10;            CardCellar(cl, mk_(c, r), sb) &gt; CardCellar(cl, mk_(BAG`Union(c, can_restock), r), ({s} &lt;-: sb))))))))&#10;"/>
<po column="11" line="442" message="HighestStock: let be st existence obligation in 'BAR' (barSL) at line 442:11&#10;(forall supps:map (Supplier) to (Stock) &amp;&#10;  (not ((dom supps) = {}) =&gt;&#10;    exists s in set (dom supps)))&#10;" number="35" object="" resource="barSL" toString="HighestStock: let be st existence obligation in 'BAR' (barSL) at line 442:11&#10;(forall supps:map (Supplier) to (Stock) &amp;&#10;  (not ((dom supps) = {}) =&gt;&#10;    exists s in set (dom supps)))&#10;"/>
<po column="18" line="444" message="HighestStock: map apply obligation in 'BAR' (barSL) at line 444:18&#10;(forall supps:map (Supplier) to (Stock) &amp;&#10;  (not ((dom supps) = {}) =&gt;&#10;    (forall s in set (dom supps) &amp;&#10;      s in set dom supps)))&#10;" number="36" object="" resource="barSL" toString="HighestStock: map apply obligation in 'BAR' (barSL) at line 444:18&#10;(forall supps:map (Supplier) to (Stock) &amp;&#10;  (not ((dom supps) = {}) =&gt;&#10;    (forall s in set (dom supps) &amp;&#10;      s in set dom supps)))&#10;"/>
<po column="3" line="437" message="HighestStock: recursive function obligation in 'BAR' (barSL) at line 437:3&#10;(forall supps:map (Supplier) to (Stock) &amp;&#10;  (not ((dom supps) = {}) =&gt;&#10;    (forall s in set (dom supps) &amp;&#10;      CardDom(supps) &gt; CardDom(({s} &lt;-: supps)))))&#10;" number="37" object="" resource="barSL" toString="HighestStock: recursive function obligation in 'BAR' (barSL) at line 437:3&#10;(forall supps:map (Supplier) to (Stock) &amp;&#10;  (not ((dom supps) = {}) =&gt;&#10;    (forall s in set (dom supps) &amp;&#10;      CardDom(supps) &gt; CardDom(({s} &lt;-: supps)))))&#10;"/>
<po column="18" line="456" message="cellarlevel1: map sequence compatible obligation in 'BAR' (barSL) at line 456:18&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 5}, {&lt;B&gt; |-&gt; 5}, {&lt;C&gt; |-&gt; 3}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="38" object="" resource="barSL" toString="cellarlevel1: map sequence compatible obligation in 'BAR' (barSL) at line 456:18&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 5}, {&lt;B&gt; |-&gt; 5}, {&lt;C&gt; |-&gt; 3}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="15" line="457" message="barlevel1: map sequence compatible obligation in 'BAR' (barSL) at line 457:15&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 5}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="39" object="" resource="barSL" toString="barlevel1: map sequence compatible obligation in 'BAR' (barSL) at line 457:15&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 2}, {&lt;C&gt; |-&gt; 5}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="13" line="458" message="cellar1: map sequence compatible obligation in 'BAR' (barSL) at line 458:13&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 8}, {&lt;B&gt; |-&gt; 5}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="40" object="" resource="barSL" toString="cellar1: map sequence compatible obligation in 'BAR' (barSL) at line 458:13&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 8}, {&lt;B&gt; |-&gt; 5}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="13" line="459" message="cellar2: map sequence compatible obligation in 'BAR' (barSL) at line 459:13&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="41" object="" resource="barSL" toString="cellar2: map sequence compatible obligation in 'BAR' (barSL) at line 459:13&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="10" line="460" message="bar1: map sequence compatible obligation in 'BAR' (barSL) at line 460:10&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 3}, {&lt;C&gt; |-&gt; 6}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="42" object="" resource="barSL" toString="bar1: map sequence compatible obligation in 'BAR' (barSL) at line 460:10&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 2}, {&lt;B&gt; |-&gt; 3}, {&lt;C&gt; |-&gt; 6}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="10" line="461" message="bar2: map sequence compatible obligation in 'BAR' (barSL) at line 461:10&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;C&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="43" object="" resource="barSL" toString="bar2: map sequence compatible obligation in 'BAR' (barSL) at line 461:10&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;C&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="10" line="462" message="bar3: map sequence compatible obligation in 'BAR' (barSL) at line 462:10&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 3}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="44" object="" resource="barSL" toString="bar3: map sequence compatible obligation in 'BAR' (barSL) at line 462:10&#10;forall m1, m2 in set {{&lt;A&gt; |-&gt; 3}, {&lt;B&gt; |-&gt; 3}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="24" line="469" message="supps1: map sequence compatible obligation in 'BAR' (barSL) at line 469:24&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 10}, {&lt;C&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="45" object="" resource="barSL" toString="supps1: map sequence compatible obligation in 'BAR' (barSL) at line 469:24&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 10}, {&lt;C&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="27" line="470" message="supps1: map sequence compatible obligation in 'BAR' (barSL) at line 470:27&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 10}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="46" object="" resource="barSL" toString="supps1: map sequence compatible obligation in 'BAR' (barSL) at line 470:27&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 10}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="12" line="468" message="supps1: map sequence compatible obligation in 'BAR' (barSL) at line 468:12&#10;forall m1, m2 in set {{&quot;Fizz&quot; |-&gt; {&lt;A&gt; |-&gt; 10}}, {&quot;Real&quot; |-&gt; {&lt;B&gt; |-&gt; 10, &lt;C&gt; |-&gt; 2}}, {&quot;Scrumpy&quot; |-&gt; {&lt;B&gt; |-&gt; 1, &lt;C&gt; |-&gt; 10}}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="47" object="" resource="barSL" toString="supps1: map sequence compatible obligation in 'BAR' (barSL) at line 468:12&#10;forall m1, m2 in set {{&quot;Fizz&quot; |-&gt; {&lt;A&gt; |-&gt; 10}}, {&quot;Real&quot; |-&gt; {&lt;B&gt; |-&gt; 10, &lt;C&gt; |-&gt; 2}}, {&quot;Scrumpy&quot; |-&gt; {&lt;B&gt; |-&gt; 1, &lt;C&gt; |-&gt; 10}}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="24" line="472" message="supps2: map sequence compatible obligation in 'BAR' (barSL) at line 472:24&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 5}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="48" object="" resource="barSL" toString="supps2: map sequence compatible obligation in 'BAR' (barSL) at line 472:24&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 5}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="27" line="473" message="supps2: map sequence compatible obligation in 'BAR' (barSL) at line 473:27&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 10}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="49" object="" resource="barSL" toString="supps2: map sequence compatible obligation in 'BAR' (barSL) at line 473:27&#10;forall m1, m2 in set {{&lt;B&gt; |-&gt; 1}, {&lt;C&gt; |-&gt; 10}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="12" line="471" message="supps2: map sequence compatible obligation in 'BAR' (barSL) at line 471:12&#10;forall m1, m2 in set {{&quot;Fizz&quot; |-&gt; {&lt;A&gt; |-&gt; 10}}, {&quot;Real&quot; |-&gt; {&lt;B&gt; |-&gt; 1, &lt;C&gt; |-&gt; 5}}, {&quot;Scrumpy&quot; |-&gt; {&lt;B&gt; |-&gt; 1, &lt;C&gt; |-&gt; 10}}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="50" object="" resource="barSL" toString="supps2: map sequence compatible obligation in 'BAR' (barSL) at line 471:12&#10;forall m1, m2 in set {{&quot;Fizz&quot; |-&gt; {&lt;A&gt; |-&gt; 10}}, {&quot;Real&quot; |-&gt; {&lt;B&gt; |-&gt; 1, &lt;C&gt; |-&gt; 5}}, {&quot;Scrumpy&quot; |-&gt; {&lt;B&gt; |-&gt; 1, &lt;C&gt; |-&gt; 10}}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
</result>
</testResult>
