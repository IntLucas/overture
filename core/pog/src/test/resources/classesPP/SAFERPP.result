<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="30" line="38" message="Update(): map apply obligation in 'AAH' (src\test\resources\classesPP\SAFERPP) at line 38:30&#10;(forall a in set Command`allaxes &amp;&#10;  (not starting =&gt;&#10;    ((engage &lt;&gt; &lt;AAH_off&gt;) =&gt;&#10;      ((a in set active_rot_axes) =&gt;&#10;        a in set dom rot))))&#10;" number="0" object="" resource="SAFERPP" toString="Update(): map apply obligation in 'AAH' (src\test\resources\classesPP\SAFERPP) at line 38:30&#10;(forall a in set Command`allaxes &amp;&#10;  (not starting =&gt;&#10;    ((engage &lt;&gt; &lt;AAH_off&gt;) =&gt;&#10;      ((a in set active_rot_axes) =&gt;&#10;        a in set dom rot))))&#10;"/>
<po column="42" line="41" message="Update(): map apply obligation in 'AAH' (src\test\resources\classesPP\SAFERPP) at line 41:42&#10;(forall a in set Command`allaxes &amp;&#10;  (starting =&gt;&#10;    a in set dom rot))&#10;" number="0" object="" resource="SAFERPP" toString="Update(): map apply obligation in 'AAH' (src\test\resources\classesPP\SAFERPP) at line 41:42&#10;(forall a in set Command`allaxes &amp;&#10;  (starting =&gt;&#10;    a in set dom rot))&#10;"/>
<po column="8" line="91" message="ButtonTransition(Button, nat): cases exhaustive obligation in 'AAH' (src\test\resources\classesPP\SAFERPP) at line 91:8&#10;mk_(toggle, button_pos) = mk_(&lt;AAH_off&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_off&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_started&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_started&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_on&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_on&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_once&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_once&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_closing&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_closing&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_twice&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_twice&gt;, &lt;Down&gt;)&#10;" number="0" object="" resource="SAFERPP" toString="ButtonTransition(Button, nat): cases exhaustive obligation in 'AAH' (src\test\resources\classesPP\SAFERPP) at line 91:8&#10;mk_(toggle, button_pos) = mk_(&lt;AAH_off&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_off&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_started&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_started&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_on&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_on&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_once&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_once&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_closing&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;AAH_closing&gt;, &lt;Down&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_twice&gt;, &lt;Up&gt;) or mk_(toggle, button_pos) = mk_(&lt;pressed_twice&gt;, &lt;Down&gt;)&#10;"/>
<po column="34" line="184" message="nullaxesdir: map set compatible obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 184:34&#10;forall m1, m2 in set {{a |-&gt; &lt;Zero&gt;} | a in set allaxes} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="nullaxesdir: map set compatible obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 184:34&#10;forall m1, m2 in set {{a |-&gt; &lt;Zero&gt;} | a in set allaxes} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="34" line="184" message="nullaxesdir: subtype obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 184:34&#10;inv_AxisMap({a |-&gt; &lt;Zero&gt; | a in set allaxes}) and (is_({a |-&gt; &lt;Zero&gt; | a in set allaxes}, map (Axis) to (Direction)))&#10;" number="0" object="" resource="SAFERPP" toString="nullaxesdir: subtype obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 184:34&#10;inv_AxisMap({a |-&gt; &lt;Zero&gt; | a in set allaxes}) and (is_({a |-&gt; &lt;Zero&gt; | a in set allaxes}, map (Axis) to (Direction)))&#10;"/>
<po column="12" line="203" message="GetDirection(Axis): map apply obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 203:12&#10;a in set dom axesdir&#10;" number="0" object="" resource="SAFERPP" toString="GetDirection(Axis): map apply obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 203:12&#10;a in set dom axesdir&#10;"/>
<po column="24" line="208" message="SetDirection(Axis, Direction): subtype obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 208:24&#10;inv_AxisMap((axesdir ++ {a |-&gt; d})) and (is_((axesdir ++ {a |-&gt; d}), map (Axis) to (Direction)))&#10;" number="0" object="" resource="SAFERPP" toString="SetDirection(Axis, Direction): subtype obligation in 'Command' (src\test\resources\classesPP\SAFERPP) at line 208:24&#10;inv_AxisMap((axesdir ++ {a |-&gt; d})) and (is_((axesdir ++ {a |-&gt; d}), map (Axis) to (Direction)))&#10;"/>
<po column="44" line="321" message="CombineRotCmds(), aah_axes: map apply obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 321:44&#10;(forall a in set Command`allaxes &amp;&#10;  a in set dom (rotcmd.GetAxesdir)())&#10;" number="0" object="" resource="SAFERPP" toString="CombineRotCmds(), aah_axes: map apply obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 321:44&#10;(forall a in set Command`allaxes &amp;&#10;  a in set dom (rotcmd.GetAxesdir)())&#10;"/>
<po column="11" line="323" message="CombineRotCmds(): map set compatible obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 323:11&#10;forall m1, m2 in set {{a |-&gt; (aah.GetRotcmd)()(a)} | a in set aah_axes} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="CombineRotCmds(): map set compatible obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 323:11&#10;forall m1, m2 in set {{a |-&gt; (aah.GetRotcmd)()(a)} | a in set aah_axes} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="18" line="323" message="CombineRotCmds(): map apply obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 323:18&#10;(forall a in set aah_axes &amp;&#10;  a in set dom (aah.GetRotcmd)())&#10;" number="0" object="" resource="SAFERPP" toString="CombineRotCmds(): map apply obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 323:18&#10;(forall a in set aah_axes &amp;&#10;  a in set dom (aah.GetRotcmd)())&#10;"/>
<po column="11" line="324" message="CombineRotCmds(): map set compatible obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 324:11&#10;forall m1, m2 in set {{a |-&gt; (rotcmd.GetAxesdir)()(a)} | a in set (Command`allaxes \ aah_axes)} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="CombineRotCmds(): map set compatible obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 324:11&#10;forall m1, m2 in set {{a |-&gt; (rotcmd.GetAxesdir)()(a)} | a in set (Command`allaxes \ aah_axes)} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="18" line="324" message="CombineRotCmds(): map apply obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 324:18&#10;(forall a in set (Command`allaxes \ aah_axes) &amp;&#10;  a in set dom (rotcmd.GetAxesdir)())&#10;" number="0" object="" resource="SAFERPP" toString="CombineRotCmds(): map apply obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 324:18&#10;(forall a in set (Command`allaxes \ aah_axes) &amp;&#10;  a in set dom (rotcmd.GetAxesdir)())&#10;"/>
<po column="11" line="323" message="CombineRotCmds(): map compatible obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 323:11&#10;forall ldom1 in set dom {a |-&gt; (aah.GetRotcmd)()(a) | a in set aah_axes}, rdom2 in set dom {a |-&gt; (rotcmd.GetAxesdir)()(a) | a in set (Command`allaxes \ aah_axes)} &amp;&#10;ldom1 = rdom2 =&gt; {a |-&gt; (aah.GetRotcmd)()(a) | a in set aah_axes}(ldom1) = {a |-&gt; (rotcmd.GetAxesdir)()(a) | a in set (Command`allaxes \ aah_axes)}(rdom2)&#10;" number="0" object="" resource="SAFERPP" toString="CombineRotCmds(): map compatible obligation in 'IntegratedCommand' (src\test\resources\classesPP\SAFERPP) at line 323:11&#10;forall ldom1 in set dom {a |-&gt; (aah.GetRotcmd)()(a) | a in set aah_axes}, rdom2 in set dom {a |-&gt; (rotcmd.GetAxesdir)()(a) | a in set (Command`allaxes \ aah_axes)} &amp;&#10;ldom1 = rdom2 =&gt; {a |-&gt; (aah.GetRotcmd)()(a) | a in set aah_axes}(ldom1) = {a |-&gt; (rotcmd.GetAxesdir)()(a) | a in set (Command`allaxes \ aah_axes)}(rdom2)&#10;"/>
<po column="56" line="356" message="ThrusterMatrix: sequence apply obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 356:56&#10;(forall tm:seq of (seq of (bool)) &amp;&#10;  (((len tm) = 4) =&gt;&#10;    (forall i in set (inds tm) &amp;&#10;      i in set inds tm)))&#10;" number="0" object="" resource="SAFERPP" toString="ThrusterMatrix: sequence apply obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 356:56&#10;(forall tm:seq of (seq of (bool)) &amp;&#10;  (((len tm) = 4) =&gt;&#10;    (forall i in set (inds tm) &amp;&#10;      i in set inds tm)))&#10;"/>
<po column="7" line="386" message="TransformInput(Input): map sequence compatible obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 386:7&#10;(forall inp:Input &amp;&#10;  (let [mode, aah, horiz, trans, vert, twist, roll, pitch, yaw]:Input = inp in&#10;    forall m1, m2 in set {{&lt;axis3&gt; |-&gt; ConvertAxisCmd(roll)}, {&lt;axis1&gt; |-&gt; ConvertAxisCmd(pitch)}, {&lt;axis2&gt; |-&gt; ConvertAxisCmd(yaw)}} &amp;&#10;      forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;        d3 = d4 =&gt; m1(d3) = m2(d4)))&#10;" number="0" object="" resource="SAFERPP" toString="TransformInput(Input): map sequence compatible obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 386:7&#10;(forall inp:Input &amp;&#10;  (let [mode, aah, horiz, trans, vert, twist, roll, pitch, yaw]:Input = inp in&#10;    forall m1, m2 in set {{&lt;axis3&gt; |-&gt; ConvertAxisCmd(roll)}, {&lt;axis1&gt; |-&gt; ConvertAxisCmd(pitch)}, {&lt;axis2&gt; |-&gt; ConvertAxisCmd(yaw)}} &amp;&#10;      forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;        d3 = d4 =&gt; m1(d3) = m2(d4)))&#10;"/>
<po column="1" line="374" message="TransformInput(Input): subtype obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 374:1&#10;(forall inp:Input &amp;&#10;  is_(let [mode, aah, horiz, trans, vert, twist, roll, pitch, yaw]:Input = inp in mk_(ConvertAxisCmd(horiz), ConvertAxisCmd(twist), ConvertAxisCmd(trans), ConvertAxisCmd(vert), (if (mode = 1)&#10;  then &lt;Tran&gt;&#10;  else &lt;Rot&gt;), (if (aah = 0)&#10;  then &lt;Up&gt;&#10;  else &lt;Down&gt;), {&lt;axis3&gt; |-&gt; ConvertAxisCmd(roll), &lt;axis1&gt; |-&gt; ConvertAxisCmd(pitch), &lt;axis2&gt; |-&gt; ConvertAxisCmd(yaw)}), (Direction * Direction * Direction * Direction * Mode * Button * AxisMap)))&#10;" number="0" object="" resource="SAFERPP" toString="TransformInput(Input): subtype obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 374:1&#10;(forall inp:Input &amp;&#10;  is_(let [mode, aah, horiz, trans, vert, twist, roll, pitch, yaw]:Input = inp in mk_(ConvertAxisCmd(horiz), ConvertAxisCmd(twist), ConvertAxisCmd(trans), ConvertAxisCmd(vert), (if (mode = 1)&#10;  then &lt;Tran&gt;&#10;  else &lt;Rot&gt;), (if (aah = 0)&#10;  then &lt;Up&gt;&#10;  else &lt;Down&gt;), {&lt;axis3&gt; |-&gt; ConvertAxisCmd(roll), &lt;axis1&gt; |-&gt; ConvertAxisCmd(pitch), &lt;axis2&gt; |-&gt; ConvertAxisCmd(yaw)}), (Direction * Direction * Direction * Direction * Mode * Button * AxisMap)))&#10;"/>
<po column="1" line="399" message="GenerateThrusterMatrix(set of (ThrusterPosition)): subtype obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 399:1&#10;(forall ts:set of (ThrusterPosition) &amp;&#10;  inv_ThrusterMatrix(let tson:set of ((nat * nat)) = {GenerateThrusterLabel(t) | [t in set ts]} in [[(mk_(j, i) in set tson) | i in set {1, ... ,6}] | j in set {1, ... ,4}]) and (is_(let tson:set of ((nat * nat)) = {GenerateThrusterLabel(t) | [t in set ts]} in [[(mk_(j, i) in set tson) | i in set {1, ... ,6}] | j in set {1, ... ,4}], seq of (seq of (bool)))))&#10;" number="0" object="" resource="SAFERPP" toString="GenerateThrusterMatrix(set of (ThrusterPosition)): subtype obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 399:1&#10;(forall ts:set of (ThrusterPosition) &amp;&#10;  inv_ThrusterMatrix(let tson:set of ((nat * nat)) = {GenerateThrusterLabel(t) | [t in set ts]} in [[(mk_(j, i) in set tson) | i in set {1, ... ,6}] | j in set {1, ... ,4}]) and (is_(let tson:set of ((nat * nat)) = {GenerateThrusterLabel(t) | [t in set ts]} in [[(mk_(j, i) in set tson) | i in set {1, ... ,6}] | j in set {1, ... ,4}], seq of (seq of (bool)))))&#10;"/>
<po column="3" line="408" message="GenerateThrusterLabel(ThrusterPosition): cases exhaustive obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 408:3&#10;(forall tnm:ThrusterPosition &amp;&#10;  tnm = &lt;B1&gt; or tnm = &lt;B2&gt; or tnm = &lt;B3&gt; or tnm = &lt;B4&gt; or tnm = &lt;F1&gt; or tnm = &lt;F2&gt; or tnm = &lt;F3&gt; or tnm = &lt;F4&gt; or tnm = &lt;L1R&gt; or tnm = &lt;L1F&gt; or tnm = &lt;R2R&gt; or tnm = &lt;R2F&gt; or tnm = &lt;L3R&gt; or tnm = &lt;L3F&gt; or tnm = &lt;R4R&gt; or tnm = &lt;R4F&gt; or tnm = &lt;D1R&gt; or tnm = &lt;D1F&gt; or tnm = &lt;D2R&gt; or tnm = &lt;D2F&gt; or tnm = &lt;U3R&gt; or tnm = &lt;U3F&gt; or tnm = &lt;U4R&gt; or tnm = &lt;U4F&gt;)&#10;" number="0" object="" resource="SAFERPP" toString="GenerateThrusterLabel(ThrusterPosition): cases exhaustive obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 408:3&#10;(forall tnm:ThrusterPosition &amp;&#10;  tnm = &lt;B1&gt; or tnm = &lt;B2&gt; or tnm = &lt;B3&gt; or tnm = &lt;B4&gt; or tnm = &lt;F1&gt; or tnm = &lt;F2&gt; or tnm = &lt;F3&gt; or tnm = &lt;F4&gt; or tnm = &lt;L1R&gt; or tnm = &lt;L1F&gt; or tnm = &lt;R2R&gt; or tnm = &lt;R2F&gt; or tnm = &lt;L3R&gt; or tnm = &lt;L3F&gt; or tnm = &lt;R4R&gt; or tnm = &lt;R4F&gt; or tnm = &lt;D1R&gt; or tnm = &lt;D1F&gt; or tnm = &lt;D2R&gt; or tnm = &lt;D2F&gt; or tnm = &lt;U3R&gt; or tnm = &lt;U3F&gt; or tnm = &lt;U4R&gt; or tnm = &lt;U4F&gt;)&#10;"/>
<po column="17" line="438" message="thrusters: map sequence compatible obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 438:17&#10;forall m1, m2 in set {{&lt;Roll&gt; |-&gt; &lt;Zero&gt;}, {&lt;Pitch&gt; |-&gt; &lt;Zero&gt;}, {&lt;Yaw&gt; |-&gt; &lt;Zero&gt;}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="thrusters: map sequence compatible obligation in 'Interface' (src\test\resources\classesPP\SAFERPP) at line 438:17&#10;forall m1, m2 in set {{&lt;Roll&gt; |-&gt; &lt;Zero&gt;}, {&lt;Pitch&gt; |-&gt; &lt;Zero&gt;}, {&lt;Yaw&gt; |-&gt; &lt;Zero&gt;}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="43" line="458" message="RotCmdsPresent(): map apply obligation in 'RotationCommand' (src\test\resources\classesPP\SAFERPP) at line 458:43&#10;(forall a in set (dom axesdir) &amp;&#10;  a in set dom axesdir)&#10;" number="0" object="" resource="SAFERPP" toString="RotCmdsPresent(): map apply obligation in 'RotationCommand' (src\test\resources\classesPP\SAFERPP) at line 458:43&#10;(forall a in set (dom axesdir) &amp;&#10;  a in set dom axesdir)&#10;"/>
<po column="16" line="500" message="ConvertGrip(), tran: map sequence compatible obligation in 'SixDOfCommand' (src\test\resources\classesPP\SAFERPP) at line 500:16&#10;forall m1, m2 in set {{Command`X |-&gt; x}, {Command`Y |-&gt; (if (modeswitch = &lt;Tran&gt;)&#10;then yaw_y&#10;else &lt;Zero&gt;)}, {Command`Z |-&gt; (if (modeswitch = &lt;Tran&gt;)&#10;then roll_z&#10;else &lt;Zero&gt;)}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="ConvertGrip(), tran: map sequence compatible obligation in 'SixDOfCommand' (src\test\resources\classesPP\SAFERPP) at line 500:16&#10;forall m1, m2 in set {{Command`X |-&gt; x}, {Command`Y |-&gt; (if (modeswitch = &lt;Tran&gt;)&#10;then yaw_y&#10;else &lt;Zero&gt;)}, {Command`Z |-&gt; (if (modeswitch = &lt;Tran&gt;)&#10;then roll_z&#10;else &lt;Zero&gt;)}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="15" line="505" message="ConvertGrip(), rot: map sequence compatible obligation in 'SixDOfCommand' (src\test\resources\classesPP\SAFERPP) at line 505:15&#10;forall m1, m2 in set {{Command`ROLL |-&gt; (if (modeswitch = &lt;Rot&gt;)&#10;then roll_z&#10;else &lt;Zero&gt;)}, {Command`PITCH |-&gt; pitch}, {Command`YAW |-&gt; (if (modeswitch = &lt;Rot&gt;)&#10;then yaw_y&#10;else &lt;Zero&gt;)}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="ConvertGrip(), rot: map sequence compatible obligation in 'SixDOfCommand' (src\test\resources\classesPP\SAFERPP) at line 505:15&#10;forall m1, m2 in set {{Command`ROLL |-&gt; (if (modeswitch = &lt;Rot&gt;)&#10;then roll_z&#10;else &lt;Zero&gt;)}, {Command`PITCH |-&gt; pitch}, {Command`YAW |-&gt; (if (modeswitch = &lt;Rot&gt;)&#10;then yaw_y&#10;else &lt;Zero&gt;)}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="6" line="549" message="RotCmdSet: map sequence compatible obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 549:6&#10;(forall a, b, c in set {&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;} &amp;&#10;  forall m1, m2 in set {{&lt;axis1&gt; |-&gt; a}, {&lt;axis2&gt; |-&gt; b}, {&lt;axis3&gt; |-&gt; c}} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="0" object="" resource="SAFERPP" toString="RotCmdSet: map sequence compatible obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 549:6&#10;(forall a, b, c in set {&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;} &amp;&#10;  forall m1, m2 in set {{&lt;axis1&gt; |-&gt; a}, {&lt;axis2&gt; |-&gt; b}, {&lt;axis3&gt; |-&gt; c}} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="5" line="549" message="RotCmdSet: subtype obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 549:5&#10;is_({{&lt;axis1&gt; |-&gt; a, &lt;axis2&gt; |-&gt; b, &lt;axis3&gt; |-&gt; c} | [a, b, c in set {&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;}]}, set of (AxisMap))&#10;" number="0" object="" resource="SAFERPP" toString="RotCmdSet: subtype obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 549:5&#10;is_({{&lt;axis1&gt; |-&gt; a, &lt;axis2&gt; |-&gt; b, &lt;axis3&gt; |-&gt; c} | [a, b, c in set {&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;}]}, set of (AxisMap))&#10;"/>
<po column="7" line="562" message="BigTest(): map set compatible obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 562:7&#10;forall m1, m2 in set {{mk_(x, pitch, yaw_y, roll_z, modeswitch, &lt;Up&gt;) |-&gt; ControlCycle(x, pitch, yaw_y, roll_z, modeswitch, &lt;Up&gt;, Command`nullaxesdir)} | x, pitch, yaw_y, roll_z in set DirectionSet, modeswitch in set ModeSet} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="BigTest(): map set compatible obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 562:7&#10;forall m1, m2 in set {{mk_(x, pitch, yaw_y, roll_z, modeswitch, &lt;Up&gt;) |-&gt; ControlCycle(x, pitch, yaw_y, roll_z, modeswitch, &lt;Up&gt;, Command`nullaxesdir)} | x, pitch, yaw_y, roll_z in set DirectionSet, modeswitch in set ModeSet} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="6" line="573" message="HugeTest(): map set compatible obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 573:6&#10;forall m1, m2 in set {{mk_(x, pitch, yaw_y, roll_z, modeswitch, aahbutton, aahcmd) |-&gt; ControlCycle(x, pitch, yaw_y, roll_z, modeswitch, aahbutton, aahcmd)} | x, pitch, yaw_y, roll_z in set DirectionSet, modeswitch in set ModeSet, aahbutton in set AAHButtonSet, aahcmd in set RotCmdSet} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="HugeTest(): map set compatible obligation in 'Test' (src\test\resources\classesPP\SAFERPP) at line 573:6&#10;forall m1, m2 in set {{mk_(x, pitch, yaw_y, roll_z, modeswitch, aahbutton, aahcmd) |-&gt; ControlCycle(x, pitch, yaw_y, roll_z, modeswitch, aahbutton, aahcmd)} | x, pitch, yaw_y, roll_z in set DirectionSet, modeswitch in set ModeSet, aahbutton in set AAHButtonSet, aahcmd in set RotCmdSet} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="6" line="657" message="bf_thrusters1: map sequence compatible obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 657:6&#10;forall m1, m2 in set {{mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B4&gt;}, {&lt;B2&gt;, &lt;B3&gt;})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;, &lt;B4&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;}, {&lt;B1&gt;, &lt;B4&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;, &lt;B4&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;B4&gt;}, {&lt;B2&gt;, &lt;B3&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;B3&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;}, {&lt;B1&gt;, &lt;B4&gt;})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;B2&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;}, {&lt;B2&gt;, &lt;B3&gt;})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B4&gt;, &lt;F1&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B4&gt;, &lt;F2&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;, &lt;F2&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;, &lt;F1&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;, &lt;F3&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;F3&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;F1&gt;}, {&lt;F2&gt;, &lt;F3&gt;})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;F1&gt;, &lt;F2&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;F2&gt;}, {&lt;F1&gt;, &lt;F4&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;F1&gt;, &lt;F3&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;F2&gt;, &lt;F3&gt;}, {&lt;F1&gt;, &lt;F4&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;F2&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;F3&gt;}, {&lt;F1&gt;, &lt;F4&gt;})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;F3&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;F4&gt;}, {&lt;F2&gt;, &lt;F3&gt;})}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="bf_thrusters1: map sequence compatible obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 657:6&#10;forall m1, m2 in set {{mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B4&gt;}, {&lt;B2&gt;, &lt;B3&gt;})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;, &lt;B4&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;}, {&lt;B1&gt;, &lt;B4&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;, &lt;B4&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;B4&gt;}, {&lt;B2&gt;, &lt;B3&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;B3&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;}, {&lt;B1&gt;, &lt;B4&gt;})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;B2&gt;}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;}, {&lt;B2&gt;, &lt;B3&gt;})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B4&gt;, &lt;F1&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B4&gt;, &lt;F2&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;, &lt;F2&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;, &lt;F1&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B3&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;B2&gt;, &lt;F3&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;F3&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;B1&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;F1&gt;}, {&lt;F2&gt;, &lt;F3&gt;})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;F1&gt;, &lt;F2&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;F2&gt;}, {&lt;F1&gt;, &lt;F4&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;F1&gt;, &lt;F3&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;F2&gt;, &lt;F3&gt;}, {&lt;F1&gt;, &lt;F4&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;F2&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;F3&gt;}, {&lt;F1&gt;, &lt;F4&gt;})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;F3&gt;, &lt;F4&gt;}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;F4&gt;}, {&lt;F2&gt;, &lt;F3&gt;})}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="6" line="696" message="lrud_thrusters1: map sequence compatible obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 696:6&#10;forall m1, m2 in set {{mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;L1R&gt;}, {&lt;L1F&gt;, &lt;L3F&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;L1R&gt;, &lt;L3R&gt;}, {&lt;L1F&gt;, &lt;L3F&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;L3R&gt;}, {&lt;L1F&gt;, &lt;L3F&gt;})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;U3R&gt;}, {&lt;U3F&gt;, &lt;U4F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;U3R&gt;, &lt;U4R&gt;}, {&lt;U3F&gt;, &lt;U4F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;U4R&gt;}, {&lt;U3F&gt;, &lt;U4F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;L1R&gt;, &lt;R4R&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;R2R&gt;, &lt;L3R&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;D2R&gt;}, {&lt;D1F&gt;, &lt;D2F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;D1R&gt;, &lt;D2R&gt;}, {&lt;D1F&gt;, &lt;D2F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;D1R&gt;}, {&lt;D1F&gt;, &lt;D2F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;R4R&gt;}, {&lt;R2F&gt;, &lt;R4F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;R2R&gt;, &lt;R4R&gt;}, {&lt;R2F&gt;, &lt;R4F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;R2R&gt;}, {&lt;R2F&gt;, &lt;R4F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="lrud_thrusters1: map sequence compatible obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 696:6&#10;forall m1, m2 in set {{mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;L1R&gt;}, {&lt;L1F&gt;, &lt;L3F&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;L1R&gt;, &lt;L3R&gt;}, {&lt;L1F&gt;, &lt;L3F&gt;})}, {mk_(&lt;Neg&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;L3R&gt;}, {&lt;L1F&gt;, &lt;L3F&gt;})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Neg&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;U3R&gt;}, {&lt;U3F&gt;, &lt;U4F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;U3R&gt;, &lt;U4R&gt;}, {&lt;U3F&gt;, &lt;U4F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;U4R&gt;}, {&lt;U3F&gt;, &lt;U4F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;L1R&gt;, &lt;R4R&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Zero&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;R2R&gt;, &lt;L3R&gt;}, {})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;D2R&gt;}, {&lt;D1F&gt;, &lt;D2F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;D1R&gt;, &lt;D2R&gt;}, {&lt;D1F&gt;, &lt;D2F&gt;})}, {mk_(&lt;Zero&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;D1R&gt;}, {&lt;D1F&gt;, &lt;D2F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Neg&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({&lt;R4R&gt;}, {&lt;R2F&gt;, &lt;R4F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({&lt;R2R&gt;, &lt;R4R&gt;}, {&lt;R2F&gt;, &lt;R4F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Zero&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({&lt;R2R&gt;}, {&lt;R2F&gt;, &lt;R4F&gt;})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Neg&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Zero&gt;) |-&gt; mk_ThrSel({}, {})}, {mk_(&lt;Pos&gt;, &lt;Pos&gt;, &lt;Pos&gt;) |-&gt; mk_ThrSel({}, {})}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="36" line="783" message="SelectThrusters(), lookup1: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 783:36&#10;Command`X in set dom tran&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lookup1: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 783:36&#10;Command`X in set dom tran&#10;"/>
<po column="53" line="783" message="SelectThrusters(), lookup1: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 783:53&#10;Command`PITCH in set dom rot&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lookup1: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 783:53&#10;Command`PITCH in set dom rot&#10;"/>
<po column="36" line="784" message="SelectThrusters(), lookup1: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 784:36&#10;Command`YAW in set dom rot&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lookup1: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 784:36&#10;Command`YAW in set dom rot&#10;"/>
<po column="35" line="785" message="SelectThrusters(), lookup2: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 785:35&#10;Command`Y in set dom tran&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lookup2: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 785:35&#10;Command`Y in set dom tran&#10;"/>
<po column="52" line="785" message="SelectThrusters(), lookup2: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 785:52&#10;Command`Z in set dom tran&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lookup2: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 785:52&#10;Command`Z in set dom tran&#10;"/>
<po column="35" line="786" message="SelectThrusters(), lookup2: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 786:35&#10;Command`ROLL in set dom rot&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lookup2: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 786:35&#10;Command`ROLL in set dom rot&#10;"/>
<po column="21" line="787" message="SelectThrusters(), bf_thr: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 787:21&#10;Command`ROLL in set dom rot&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), bf_thr: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 787:21&#10;Command`ROLL in set dom rot&#10;"/>
<po column="23" line="790" message="SelectThrusters(), lrud_thr: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 790:23&#10;Command`PITCH in set dom rot&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lrud_thr: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 790:23&#10;Command`PITCH in set dom rot&#10;"/>
<po column="23" line="791" message="SelectThrusters(), lrud_thr: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 791:23&#10;((rot(Command`PITCH) = &lt;Zero&gt;) =&gt;&#10;  Command`YAW in set dom rot)&#10;" number="0" object="" resource="SAFERPP" toString="SelectThrusters(), lrud_thr: map apply obligation in 'ThrusterControl' (src\test\resources\classesPP\SAFERPP) at line 791:23&#10;((rot(Command`PITCH) = &lt;Zero&gt;) =&gt;&#10;  Command`YAW in set dom rot)&#10;"/>
<po column="12" line="839" message="Lookup(Direction, Direction, Direction): map apply obligation in 'ThrusterSelectionTable' (src\test\resources\classesPP\SAFERPP) at line 839:12&#10;mk_(dir1, dir2, dir3) in set dom selections&#10;" number="0" object="" resource="SAFERPP" toString="Lookup(Direction, Direction, Direction): map apply obligation in 'ThrusterSelectionTable' (src\test\resources\classesPP\SAFERPP) at line 839:12&#10;mk_(dir1, dir2, dir3) in set dom selections&#10;"/>
<po column="19" line="867" message="Prioritize(): map apply obligation in 'TranslationCommand' (src\test\resources\classesPP\SAFERPP) at line 867:19&#10;X in set dom axesdir&#10;" number="0" object="" resource="SAFERPP" toString="Prioritize(): map apply obligation in 'TranslationCommand' (src\test\resources\classesPP\SAFERPP) at line 867:19&#10;X in set dom axesdir&#10;"/>
<po column="32" line="868" message="Prioritize(): map sequence compatible obligation in 'TranslationCommand' (src\test\resources\classesPP\SAFERPP) at line 868:32&#10;((axesdir(X) &lt;&gt; &lt;Zero&gt;) =&gt;&#10;  forall m1, m2 in set {{Y |-&gt; &lt;Zero&gt;}, {Z |-&gt; &lt;Zero&gt;}} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="0" object="" resource="SAFERPP" toString="Prioritize(): map sequence compatible obligation in 'TranslationCommand' (src\test\resources\classesPP\SAFERPP) at line 868:32&#10;((axesdir(X) &lt;&gt; &lt;Zero&gt;) =&gt;&#10;  forall m1, m2 in set {{Y |-&gt; &lt;Zero&gt;}, {Z |-&gt; &lt;Zero&gt;}} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="16" line="867" message="Prioritize(): subtype obligation in 'TranslationCommand' (src\test\resources\classesPP\SAFERPP) at line 867:16&#10;inv_AxisMap((if (axesdir(X) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Y |-&gt; &lt;Zero&gt;, Z |-&gt; &lt;Zero&gt;})&#10;elseif (axesdir(Y) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Z |-&gt; &lt;Zero&gt;})&#10;else axesdir)) and (is_((if (axesdir(X) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Y |-&gt; &lt;Zero&gt;, Z |-&gt; &lt;Zero&gt;})&#10;elseif (axesdir(Y) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Z |-&gt; &lt;Zero&gt;})&#10;else axesdir), map (Axis) to (Direction)))&#10;" number="0" object="" resource="SAFERPP" toString="Prioritize(): subtype obligation in 'TranslationCommand' (src\test\resources\classesPP\SAFERPP) at line 867:16&#10;inv_AxisMap((if (axesdir(X) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Y |-&gt; &lt;Zero&gt;, Z |-&gt; &lt;Zero&gt;})&#10;elseif (axesdir(Y) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Z |-&gt; &lt;Zero&gt;})&#10;else axesdir)) and (is_((if (axesdir(X) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Y |-&gt; &lt;Zero&gt;, Z |-&gt; &lt;Zero&gt;})&#10;elseif (axesdir(Y) &lt;&gt; &lt;Zero&gt;)&#10;then (axesdir ++ {Z |-&gt; &lt;Zero&gt;})&#10;else axesdir), map (Axis) to (Direction)))&#10;"/>
<po column="5" line="893" message="thrusters: map set compatible obligation in 'ValveDriveAssembly' (src\test\resources\classesPP\SAFERPP) at line 893:5&#10;forall m1, m2 in set {{thr |-&gt; new Thruster()} | thr in set ThrusterControl`ThrusterSet} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="0" object="" resource="SAFERPP" toString="thrusters: map set compatible obligation in 'ValveDriveAssembly' (src\test\resources\classesPP\SAFERPP) at line 893:5&#10;forall m1, m2 in set {{thr |-&gt; new Thruster()} | thr in set ThrusterControl`ThrusterSet} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="13" line="908" message="ThrustersOn(): map apply obligation in 'ValveDriveAssembly' (src\test\resources\classesPP\SAFERPP) at line 908:13&#10;(forall thr in set ThrusterControl`ThrusterSet &amp;&#10;  thr in set dom thrusters)&#10;" number="0" object="" resource="SAFERPP" toString="ThrustersOn(): map apply obligation in 'ValveDriveAssembly' (src\test\resources\classesPP\SAFERPP) at line 908:13&#10;(forall thr in set ThrusterControl`ThrusterSet &amp;&#10;  thr in set dom thrusters)&#10;"/>
<po column="3" line="951" message="ControlCycle(Direction, Direction, Direction, Direction, Mode, Button, AxisMap): operation post condition obligation in 'WorkSpace' (src\test\resources\classesPP\SAFERPP) at line 951:3&#10;(((card RESULT) &lt;= 4) and ThrusterConsistency(RESULT))&#10;" number="0" object="" resource="SAFERPP" toString="ControlCycle(Direction, Direction, Direction, Direction, Mode, Button, AxisMap): operation post condition obligation in 'WorkSpace' (src\test\resources\classesPP\SAFERPP) at line 951:3&#10;(((card RESULT) &lt;= 4) and ThrusterConsistency(RESULT))&#10;"/>
</result>
</testResult>
