<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="5" line="36" message="responseDB: map sequence compatible obligation in 'DEFAULT' (CMSL) at line 36:5&#10;forall m1, m2 in set {{&lt;MissileA&gt; |-&gt; [mk_(&lt;FlareOneA&gt;, 900), mk_(&lt;FlareTwoA&gt;, 500), mk_(&lt;DoNothingA&gt;, 100), mk_(&lt;FlareOneA&gt;, 500)]}, {&lt;MissileB&gt; |-&gt; [mk_(&lt;FlareTwoB&gt;, 500), mk_(&lt;FlareTwoB&gt;, 700)]}, {&lt;MissileC&gt; |-&gt; [mk_(&lt;FlareOneC&gt;, 400), mk_(&lt;DoNothingC&gt;, 100), mk_(&lt;FlareTwoC&gt;, 400), mk_(&lt;FlareOneC&gt;, 500)]}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="1" object="" resource="CMSL" toString="responseDB: map sequence compatible obligation in 'DEFAULT' (CMSL) at line 36:5&#10;forall m1, m2 in set {{&lt;MissileA&gt; |-&gt; [mk_(&lt;FlareOneA&gt;, 900), mk_(&lt;FlareTwoA&gt;, 500), mk_(&lt;DoNothingA&gt;, 100), mk_(&lt;FlareOneA&gt;, 500)]}, {&lt;MissileB&gt; |-&gt; [mk_(&lt;FlareTwoB&gt;, 500), mk_(&lt;FlareTwoB&gt;, 700)]}, {&lt;MissileC&gt; |-&gt; [mk_(&lt;FlareOneC&gt;, 400), mk_(&lt;DoNothingC&gt;, 100), mk_(&lt;FlareTwoC&gt;, 400), mk_(&lt;FlareOneC&gt;, 500)]}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="25" line="44" message="missilePriority: map sequence compatible obligation in 'DEFAULT' (CMSL) at line 44:25&#10;forall m1, m2 in set {{&lt;MissileA&gt; |-&gt; 1}, {&lt;MissileB&gt; |-&gt; 2}, {&lt;MissileC&gt; |-&gt; 3}, {&lt;None&gt; |-&gt; 0}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="2" object="" resource="CMSL" toString="missilePriority: map sequence compatible obligation in 'DEFAULT' (CMSL) at line 44:25&#10;forall m1, m2 in set {{&lt;MissileA&gt; |-&gt; 1}, {&lt;MissileB&gt; |-&gt; 2}, {&lt;MissileC&gt; |-&gt; 3}, {&lt;None&gt; |-&gt; 0}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="30" line="51" message="testval1: subtype obligation in 'DEFAULT' (CMSL) at line 51:30&#10;((((inv_Angle(88) and (is_nat(88)))))&#10;and (((inv_Angle(70) and (is_nat(70)))))&#10;and (((inv_Angle(222) and (is_nat(222)))))&#10;and (((inv_Angle(44) and (is_nat(44))))))&#10;" number="3" object="" resource="CMSL" toString="testval1: subtype obligation in 'DEFAULT' (CMSL) at line 51:30&#10;((((inv_Angle(88) and (is_nat(88)))))&#10;and (((inv_Angle(70) and (is_nat(70)))))&#10;and (((inv_Angle(222) and (is_nat(222)))))&#10;and (((inv_Angle(44) and (is_nat(44))))))&#10;"/>
<po column="30" line="56" message="testval2: subtype obligation in 'DEFAULT' (CMSL) at line 56:30&#10;((((inv_Angle(188) and (is_nat(188)))))&#10;and (((inv_Angle(70) and (is_nat(70)))))&#10;and (((inv_Angle(2) and (is_nat(2)))))&#10;and (((inv_Angle(44) and (is_nat(44))))))&#10;" number="4" object="" resource="CMSL" toString="testval2: subtype obligation in 'DEFAULT' (CMSL) at line 56:30&#10;((((inv_Angle(188) and (is_nat(188)))))&#10;and (((inv_Angle(70) and (is_nat(70)))))&#10;and (((inv_Angle(2) and (is_nat(2)))))&#10;and (((inv_Angle(44) and (is_nat(44))))))&#10;"/>
<po column="30" line="61" message="testval3: subtype obligation in 'DEFAULT' (CMSL) at line 61:30&#10;((((inv_Angle(288) and (is_nat(288)))))&#10;and (((inv_Angle(170) and (is_nat(170)))))&#10;and (((inv_Angle(222) and (is_nat(222)))))&#10;and (((inv_Angle(44) and (is_nat(44))))))&#10;" number="5" object="" resource="CMSL" toString="testval3: subtype obligation in 'DEFAULT' (CMSL) at line 61:30&#10;((((inv_Angle(288) and (is_nat(288)))))&#10;and (((inv_Angle(170) and (is_nat(170)))))&#10;and (((inv_Angle(222) and (is_nat(222)))))&#10;and (((inv_Angle(44) and (is_nat(44))))))&#10;"/>
<po column="35" line="77" message="CM, curMis, angle: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 77:35&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    missileInputs &lt;&gt; []))&#10;" number="6" object="" resource="CMSL" toString="CM, curMis, angle: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 77:35&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    missileInputs &lt;&gt; []))&#10;"/>
<po column="14" line="82" message="CM: map apply obligation in 'DEFAULT' (CMSL) at line 82:14&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          curMis in set dom missilePriority)))))&#10;" number="7" object="" resource="CMSL" toString="CM: map apply obligation in 'DEFAULT' (CMSL) at line 82:14&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          curMis in set dom missilePriority)))))&#10;"/>
<po column="14" line="83" message="CM: map apply obligation in 'DEFAULT' (CMSL) at line 83:14&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          lastMissile(magid) in set dom missilePriority)))))&#10;" number="8" object="" resource="CMSL" toString="CM: map apply obligation in 'DEFAULT' (CMSL) at line 83:14&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          lastMissile(magid) in set dom missilePriority)))))&#10;"/>
<po column="30" line="83" message="CM: subtype obligation in 'DEFAULT' (CMSL) at line 83:30&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          ((is_(lastMissile(magid), &lt;MissileA&gt;)) or&#10;          (is_(lastMissile(magid), &lt;MissileB&gt;)) or&#10;          (is_(lastMissile(magid), &lt;MissileC&gt;)) or&#10;          (is_(lastMissile(magid), &lt;None&gt;))))))))&#10;" number="9" object="" resource="CMSL" toString="CM: subtype obligation in 'DEFAULT' (CMSL) at line 83:30&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          ((is_(lastMissile(magid), &lt;MissileA&gt;)) or&#10;          (is_(lastMissile(magid), &lt;MissileB&gt;)) or&#10;          (is_(lastMissile(magid), &lt;MissileC&gt;)) or&#10;          (is_(lastMissile(magid), &lt;None&gt;))))))))&#10;"/>
<po column="30" line="83" message="CM: map apply obligation in 'DEFAULT' (CMSL) at line 83:30&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          magid in set dom lastMissile)))))&#10;" number="10" object="" resource="CMSL" toString="CM: map apply obligation in 'DEFAULT' (CMSL) at line 83:30&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not (magid not in set (dom lastMissile)) =&gt;&#10;        ((magid in set (dom lastMissile)) =&gt;&#10;          magid in set dom lastMissile)))))&#10;"/>
<po column="36" line="86" message="CM, newOutput: map apply obligation in 'DEFAULT' (CMSL) at line 86:36&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        curMis in set dom responseDB))))&#10;" number="11" object="" resource="CMSL" toString="CM, newOutput: map apply obligation in 'DEFAULT' (CMSL) at line 86:36&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        curMis in set dom responseDB))))&#10;"/>
<po column="18" line="88" message="CM: recursive function obligation in 'DEFAULT' (CMSL) at line 88:18&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        (let newOutput:Output = InterruptPlan(curTime, outputSoFar, responseDB(curMis), magid) in&#10;          CMLen(missileInputs, outputSoFar, lastMissile, curTime) &gt; CMLen((tl missileInputs), newOutput, (lastMissile ++ {magid |-&gt; curMis}), (curTime + stepLength)))))))&#10;" number="12" object="" resource="CMSL" toString="CM: recursive function obligation in 'DEFAULT' (CMSL) at line 88:18&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        (let newOutput:Output = InterruptPlan(curTime, outputSoFar, responseDB(curMis), magid) in&#10;          CMLen(missileInputs, outputSoFar, lastMissile, curTime) &gt; CMLen((tl missileInputs), newOutput, (lastMissile ++ {magid |-&gt; curMis}), (curTime + stepLength)))))))&#10;"/>
<po column="24" line="88" message="CM: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 88:24&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        (let newOutput:Output = InterruptPlan(curTime, outputSoFar, responseDB(curMis), magid) in&#10;          missileInputs &lt;&gt; [])))))&#10;" number="13" object="" resource="CMSL" toString="CM: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 88:24&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        (let newOutput:Output = InterruptPlan(curTime, outputSoFar, responseDB(curMis), magid) in&#10;          missileInputs &lt;&gt; [])))))&#10;"/>
<po column="15" line="91" message="CM: recursive function obligation in 'DEFAULT' (CMSL) at line 91:15&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not ((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        CMLen(missileInputs, outputSoFar, lastMissile, curTime) &gt; CMLen((tl missileInputs), outputSoFar, lastMissile, (curTime + stepLength))))))&#10;" number="14" object="" resource="CMSL" toString="CM: recursive function obligation in 'DEFAULT' (CMSL) at line 91:15&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not ((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        CMLen(missileInputs, outputSoFar, lastMissile, curTime) &gt; CMLen((tl missileInputs), outputSoFar, lastMissile, (curTime + stepLength))))))&#10;"/>
<po column="21" line="91" message="CM: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 91:21&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not ((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        missileInputs &lt;&gt; []))))&#10;" number="15" object="" resource="CMSL" toString="CM: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 91:21&#10;(forall missileInputs:MissileInputs, outputSoFar:Output, lastMissile:map (MagId) to ([MissileType]), curTime:nat &amp;&#10;  (not (missileInputs = []) =&gt;&#10;    (let mk_(curMis, angle):MissileInput = (hd missileInputs), magid:MagId = Angle2MagId(angle) in&#10;      (not ((magid not in set (dom lastMissile)) or ((magid in set (dom lastMissile)) and (missilePriority(curMis) &gt; missilePriority(lastMissile(magid))))) =&gt;&#10;        missileInputs &lt;&gt; []))))&#10;"/>
<po column="41" line="101" message="InterruptPlan: map apply obligation in 'DEFAULT' (CMSL) at line 101:41&#10;(forall curTime:nat, expOutput:Output, plan:Plan, magid:MagId &amp;&#10;  ((magid in set (dom expOutput)) =&gt;&#10;    magid in set dom expOutput))&#10;" number="16" object="" resource="CMSL" toString="InterruptPlan: map apply obligation in 'DEFAULT' (CMSL) at line 101:41&#10;(forall curTime:nat, expOutput:Output, plan:Plan, magid:MagId &amp;&#10;  ((magid in set (dom expOutput)) =&gt;&#10;    magid in set dom expOutput))&#10;"/>
<po column="3" line="100" message="InterruptPlan: map compatible obligation in 'DEFAULT' (CMSL) at line 100:3&#10;(forall curTime:nat, expOutput:Output, plan:Plan, magid:MagId &amp;&#10;  forall ldom1 in set dom {magid |-&gt; ((if (magid in set (dom expOutput))&#10;  then LeavePrefixUnchanged(expOutput(magid), curTime)&#10;  else []) ^ MakeOutputFromPlan(curTime, plan))}, rdom2 in set dom ({magid} &lt;-: expOutput) &amp;&#10;  ldom1 = rdom2 =&gt; {magid |-&gt; ((if (magid in set (dom expOutput))&#10;  then LeavePrefixUnchanged(expOutput(magid), curTime)&#10;  else []) ^ MakeOutputFromPlan(curTime, plan))}(ldom1) = ({magid} &lt;-: expOutput)(rdom2))&#10;" number="17" object="" resource="CMSL" toString="InterruptPlan: map compatible obligation in 'DEFAULT' (CMSL) at line 100:3&#10;(forall curTime:nat, expOutput:Output, plan:Plan, magid:MagId &amp;&#10;  forall ldom1 in set dom {magid |-&gt; ((if (magid in set (dom expOutput))&#10;  then LeavePrefixUnchanged(expOutput(magid), curTime)&#10;  else []) ^ MakeOutputFromPlan(curTime, plan))}, rdom2 in set dom ({magid} &lt;-: expOutput) &amp;&#10;  ldom1 = rdom2 =&gt; {magid |-&gt; ((if (magid in set (dom expOutput))&#10;  then LeavePrefixUnchanged(expOutput(magid), curTime)&#10;  else []) ^ MakeOutputFromPlan(curTime, plan))}(ldom1) = ({magid} &lt;-: expOutput)(rdom2))&#10;"/>
<po column="4" line="111" message="LeavePrefixUnchanged: sequence apply obligation in 'DEFAULT' (CMSL) at line 111:4&#10;(forall output_l:seq of (OutputStep), curTime:nat &amp;&#10;  (forall i in set (inds output_l) &amp; let mk_(-, t):OutputStep = output_l(i) in (t &lt;= curTime) =&gt;&#10;    i in set inds output_l))&#10;" number="18" object="" resource="CMSL" toString="LeavePrefixUnchanged: sequence apply obligation in 'DEFAULT' (CMSL) at line 111:4&#10;(forall output_l:seq of (OutputStep), curTime:nat &amp;&#10;  (forall i in set (inds output_l) &amp; let mk_(-, t):OutputStep = output_l(i) in (t &lt;= curTime) =&gt;&#10;    i in set inds output_l))&#10;"/>
<po column="33" line="112" message="LeavePrefixUnchanged, t: sequence apply obligation in 'DEFAULT' (CMSL) at line 112:33&#10;(forall output_l:seq of (OutputStep), curTime:nat &amp;&#10;  (forall i in set (inds output_l) &amp;&#10;    i in set inds output_l))&#10;" number="19" object="" resource="CMSL" toString="LeavePrefixUnchanged, t: sequence apply obligation in 'DEFAULT' (CMSL) at line 112:33&#10;(forall output_l:seq of (OutputStep), curTime:nat &amp;&#10;  (forall i in set (inds output_l) &amp;&#10;    i in set inds output_l))&#10;"/>
<po column="25" line="117" message="MakeOutputFromPlan, t, flare: sequence apply obligation in 'DEFAULT' (CMSL) at line 117:25&#10;(forall curTime:nat, response:seq of (Response) &amp;&#10;  (let output:seq of (OutputStep) = OutputAtTimeZero(response) in&#10;    (forall i in set (inds output) &amp;&#10;      i in set inds output)))&#10;" number="20" object="" resource="CMSL" toString="MakeOutputFromPlan, t, flare: sequence apply obligation in 'DEFAULT' (CMSL) at line 117:25&#10;(forall curTime:nat, response:seq of (Response) &amp;&#10;  (let output:seq of (OutputStep) = OutputAtTimeZero(response) in&#10;    (forall i in set (inds output) &amp;&#10;      i in set inds output)))&#10;"/>
<po column="32" line="125" message="OutputAtTimeZero, firstFlare: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 125:32&#10;(forall response:seq of (Response) &amp;&#10;  (let absTimes:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes(response) in&#10;    absTimes &lt;&gt; []))&#10;" number="21" object="" resource="CMSL" toString="OutputAtTimeZero, firstFlare: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 125:32&#10;(forall response:seq of (Response) &amp;&#10;  (let absTimes:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes(response) in&#10;    absTimes &lt;&gt; []))&#10;"/>
<po column="24" line="127" message="OutputAtTimeZero, t: sequence apply obligation in 'DEFAULT' (CMSL) at line 127:24&#10;(forall response:seq of (Response) &amp;&#10;  (let absTimes:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes(response) in&#10;    (let mk_(firstFlare, -):(FlareType * nat) = (hd absTimes) in&#10;      (forall i in set {2, ... ,(len absTimes)} &amp;&#10;        (i - 1) in set inds absTimes))))&#10;" number="22" object="" resource="CMSL" toString="OutputAtTimeZero, t: sequence apply obligation in 'DEFAULT' (CMSL) at line 127:24&#10;(forall response:seq of (Response) &amp;&#10;  (let absTimes:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes(response) in&#10;    (let mk_(firstFlare, -):(FlareType * nat) = (hd absTimes) in&#10;      (forall i in set {2, ... ,(len absTimes)} &amp;&#10;        (i - 1) in set inds absTimes))))&#10;"/>
<po column="24" line="128" message="OutputAtTimeZero, f: sequence apply obligation in 'DEFAULT' (CMSL) at line 128:24&#10;(forall response:seq of (Response) &amp;&#10;  (let absTimes:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes(response) in&#10;    (let mk_(firstFlare, -):(FlareType * nat) = (hd absTimes) in&#10;      (forall i in set {2, ... ,(len absTimes)} &amp;&#10;        i in set inds absTimes))))&#10;" number="23" object="" resource="CMSL" toString="OutputAtTimeZero, f: sequence apply obligation in 'DEFAULT' (CMSL) at line 128:24&#10;(forall response:seq of (Response) &amp;&#10;  (let absTimes:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes(response) in&#10;    (let mk_(firstFlare, -):(FlareType * nat) = (hd absTimes) in&#10;      (forall i in set {2, ... ,(len absTimes)} &amp;&#10;        i in set inds absTimes))))&#10;"/>
<po column="26" line="136" message="RelativeToAbsoluteTimes, t, f: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 136:26&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;" number="24" object="" resource="CMSL" toString="RelativeToAbsoluteTimes, t, f: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 136:26&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;"/>
<po column="17" line="137" message="RelativeToAbsoluteTimes, ns: recursive function obligation in 'DEFAULT' (CMSL) at line 137:17&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    RespLen(ts) &gt; RespLen((tl ts))))&#10;" number="25" object="" resource="CMSL" toString="RelativeToAbsoluteTimes, ns: recursive function obligation in 'DEFAULT' (CMSL) at line 137:17&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    RespLen(ts) &gt; RespLen((tl ts))))&#10;"/>
<po column="44" line="137" message="RelativeToAbsoluteTimes, ns: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 137:44&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;" number="26" object="" resource="CMSL" toString="RelativeToAbsoluteTimes, ns: non-empty sequence obligation in 'DEFAULT' (CMSL) at line 137:44&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;"/>
<po column="43" line="138" message="RelativeToAbsoluteTimes, nf, nt: sequence apply obligation in 'DEFAULT' (CMSL) at line 138:43&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    (let mk_(f, t):Response = (hd ts), ns:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes((tl ts)) in&#10;      (forall i in set (inds ns) &amp;&#10;        i in set inds ns))))&#10;" number="27" object="" resource="CMSL" toString="RelativeToAbsoluteTimes, nf, nt: sequence apply obligation in 'DEFAULT' (CMSL) at line 138:43&#10;(forall ts:seq of (Response) &amp;&#10;  (not (ts = []) =&gt;&#10;    (let mk_(f, t):Response = (hd ts), ns:seq of ((FlareType * nat)) = RelativeToAbsoluteTimes((tl ts)) in&#10;      (forall i in set (inds ns) &amp;&#10;        i in set inds ns))))&#10;"/>
</result>
</testResult>
