// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

public class JavaBinaryOperator extends JavaNode implements IJavaBinaryOperator
{
	// private member variable to store enumerated value
	private JavaBinaryOperatorEnum m_enum;

	// public operation to set the enumeration value
	public void setEnum(JavaBinaryOperatorEnum p_enum) { m_enum = p_enum; }

	// public member operation to query the quoted value
	public boolean isPLUS() { return (m_enum == JavaBinaryOperatorEnum.EPLUS); }

	// public member operation to query the quoted value
	public boolean isMINUS() { return (m_enum == JavaBinaryOperatorEnum.EMINUS); }

	// public member operation to query the quoted value
	public boolean isMULTIPLY() { return (m_enum == JavaBinaryOperatorEnum.EMULTIPLY); }

	// public member operation to query the quoted value
	public boolean isDIVIDE() { return (m_enum == JavaBinaryOperatorEnum.EDIVIDE); }

	// public member operation to query the quoted value
	public boolean isDIV() { return (m_enum == JavaBinaryOperatorEnum.EDIV); }

	// public member operation to query the quoted value
	public boolean isREM() { return (m_enum == JavaBinaryOperatorEnum.EREM); }

	// public member operation to query the quoted value
	public boolean isMOD() { return (m_enum == JavaBinaryOperatorEnum.EMOD); }

	// public member operation to query the quoted value
	public boolean isLT() { return (m_enum == JavaBinaryOperatorEnum.ELT); }

	// public member operation to query the quoted value
	public boolean isLE() { return (m_enum == JavaBinaryOperatorEnum.ELE); }

	// public member operation to query the quoted value
	public boolean isGT() { return (m_enum == JavaBinaryOperatorEnum.EGT); }

	// public member operation to query the quoted value
	public boolean isGE() { return (m_enum == JavaBinaryOperatorEnum.EGE); }

	// public member operation to query the quoted value
	public boolean isEQ() { return (m_enum == JavaBinaryOperatorEnum.EEQ); }

	// public member operation to query the quoted value
	public boolean isEQEQ() { return (m_enum == JavaBinaryOperatorEnum.EEQEQ); }

	// public member operation to query the quoted value
	public boolean isNE() { return (m_enum == JavaBinaryOperatorEnum.ENE); }

	// public member operation to query the quoted value
	public boolean isOR() { return (m_enum == JavaBinaryOperatorEnum.EOR); }

	// public member operation to query the quoted value
	public boolean isAND() { return (m_enum == JavaBinaryOperatorEnum.EAND); }

	// default constructor
	public JavaBinaryOperator()
	{
		super();
		m_enum = null;
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitBinaryOperator(this); }

	// the identity function
	public String identify() { return m_enum.identify(); }
}
