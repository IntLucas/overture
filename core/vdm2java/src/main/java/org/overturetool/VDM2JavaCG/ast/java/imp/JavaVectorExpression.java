// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

// import java collection types
import java.util.*;

public class JavaVectorExpression extends JavaExpression implements IJavaVectorExpression
{
	// private member variable (genericType)
	private IJavaType m_genericType = null;

	// public operation to retrieve the embedded private field value
	public IJavaType getGenericType()
	{
		return m_genericType;
	}

	// public operation to set the embedded private field value
	public void setGenericType(IJavaType p_genericType)
	{
		// consistency check (field must be non null!)
		assert(p_genericType != null);

		// instantiate the member variable
		m_genericType = p_genericType;

		// set the parent of the parameter passed
		p_genericType.setParent(this);
	}

	// private member variable (elements)
	private List<IJavaExpression> m_elements = new Vector<IJavaExpression>();

	// public operation to retrieve the embedded private field value
	public List<IJavaExpression> getElements()
	{
		return m_elements;
	}

	// public operation to set the embedded private field value
	public void setElements(List<IJavaExpression> p_elements)
	{
		// consistency check (field must be non null!)
		assert(p_elements != null);

		// instantiate the member variable
		m_elements = p_elements;

		// set the parent of each element in the sequence parameter passed
		for (IJavaNode lnode: p_elements) lnode.setParent(this);
	}

	// default constructor
	public JavaVectorExpression()
	{
		super();
		m_genericType = null;
		m_elements = null;
	}

	// auxiliary constructor
	public JavaVectorExpression(
		IJavaType p_genericType,
		List<IJavaExpression> p_elements
	) {
		super();
		setGenericType(p_genericType);
		setElements(p_elements);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitVectorExpression(this); }

	// the identity function
	public String identify() { return "JavaVectorExpression"; }
}
