// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

// import java collection types
import java.util.*;

public class JavaMapCompExpression extends JavaMapExpression implements IJavaMapCompExpression
{
	// private member variable (maplet)
	private IJavaMapletExpression m_maplet = null;

	// public operation to retrieve the embedded private field value
	public IJavaMapletExpression getMaplet()
	{
		return m_maplet;
	}

	// public operation to set the embedded private field value
	public void setMaplet(IJavaMapletExpression p_maplet)
	{
		// consistency check (field must be non null!)
		assert(p_maplet != null);

		// instantiate the member variable
		m_maplet = p_maplet;

		// set the parent of the parameter passed
		p_maplet.setParent(this);
	}

	// private member variable (bindlist)
	private List<IJavaBind> m_bindlist = new Vector<IJavaBind>();

	// public operation to retrieve the embedded private field value
	public List<IJavaBind> getBindlist()
	{
		return m_bindlist;
	}

	// public operation to set the embedded private field value
	public void setBindlist(List<IJavaBind> p_bindlist)
	{
		// consistency check (field must be non null!)
		assert(p_bindlist != null);

		// instantiate the member variable
		m_bindlist = p_bindlist;

		// set the parent of each element in the sequence parameter passed
		for (IJavaNode lnode: p_bindlist) lnode.setParent(this);
	}

	// private member variable (expression)
	private IJavaExpression m_expression = null;

	// public operation to check optional type status
	public boolean hasExpression() { return (m_expression != null); };

	// public operation to retrieve the embedded private field value
	public IJavaExpression getExpression()
	{
		return m_expression;
	}

	// public operation to set the embedded private field value
	public void setExpression(IJavaExpression p_expression)
	{
		// instantiate the member variable
		m_expression = p_expression;

		// set the parent of the parameter passed
		p_expression.setParent(this);
	}

	// default constructor
	public JavaMapCompExpression()
	{
		super();
		m_maplet = null;
		m_bindlist = null;
		m_expression = null;
	}

	// auxiliary constructor
	public JavaMapCompExpression(
		IJavaMapletExpression p_maplet,
		List<IJavaBind> p_bindlist,
		IJavaExpression p_expression
	) {
		super();
		setMaplet(p_maplet);
		setBindlist(p_bindlist);
		setExpression(p_expression);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitMapCompExpression(this); }

	// the identity function
	public String identify() { return "JavaMapCompExpression"; }
}
