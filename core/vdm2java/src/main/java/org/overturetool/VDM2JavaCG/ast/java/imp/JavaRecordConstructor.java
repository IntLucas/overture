// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

// import java collection types
import java.util.*;

public class JavaRecordConstructor extends JavaRecordExpression implements IJavaRecordConstructor
{
	// private member variable (typename)
	private IJavaIdentifier m_typename = null;

	// public operation to retrieve the embedded private field value
	public IJavaIdentifier getTypename()
	{
		return m_typename;
	}

	// public operation to set the embedded private field value
	public void setTypename(IJavaIdentifier p_typename)
	{
		// consistency check (field must be non null!)
		assert(p_typename != null);

		// instantiate the member variable
		m_typename = p_typename;

		// set the parent of the parameter passed
		p_typename.setParent(this);
	}

	// private member variable (args)
	private List<IJavaExpression> m_args = new Vector<IJavaExpression>();

	// public operation to retrieve the embedded private field value
	public List<IJavaExpression> getArgs()
	{
		return m_args;
	}

	// public operation to set the embedded private field value
	public void setArgs(List<IJavaExpression> p_args)
	{
		// consistency check (field must be non null!)
		assert(p_args != null);

		// instantiate the member variable
		m_args = p_args;

		// set the parent of each element in the sequence parameter passed
		for (IJavaNode lnode: p_args) lnode.setParent(this);
	}

	// default constructor
	public JavaRecordConstructor()
	{
		super();
		m_typename = null;
		m_args = null;
	}

	// auxiliary constructor
	public JavaRecordConstructor(
		IJavaIdentifier p_typename,
		List<IJavaExpression> p_args
	) {
		super();
		setTypename(p_typename);
		setArgs(p_args);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitRecordConstructor(this); }

	// the identity function
	public String identify() { return "JavaRecordConstructor"; }
}
