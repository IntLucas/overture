// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

// import java collection types
import java.util.*;

public class JavaIfStatement extends JavaStatement implements IJavaIfStatement
{
	// private member variable (expression)
	private IJavaExpression m_expression = null;

	// public operation to retrieve the embedded private field value
	public IJavaExpression getExpression()
	{
		return m_expression;
	}

	// public operation to set the embedded private field value
	public void setExpression(IJavaExpression p_expression)
	{
		// consistency check (field must be non null!)
		assert(p_expression != null);

		// instantiate the member variable
		m_expression = p_expression;

		// set the parent of the parameter passed
		p_expression.setParent(this);
	}

	// private member variable (then_statement)
	private IJavaStatement m_then_statement = null;

	// public operation to retrieve the embedded private field value
	public IJavaStatement getThenStatement()
	{
		return m_then_statement;
	}

	// public operation to set the embedded private field value
	public void setThenStatement(IJavaStatement p_then_statement)
	{
		// consistency check (field must be non null!)
		assert(p_then_statement != null);

		// instantiate the member variable
		m_then_statement = p_then_statement;

		// set the parent of the parameter passed
		p_then_statement.setParent(this);
	}

	// private member variable (elselist)
	private List<IJavaElseIfStatement> m_elselist = new Vector<IJavaElseIfStatement>();

	// public operation to retrieve the embedded private field value
	public List<IJavaElseIfStatement> getElselist()
	{
		return m_elselist;
	}

	// public operation to set the embedded private field value
	public void setElselist(List<IJavaElseIfStatement> p_elselist)
	{
		// consistency check (field must be non null!)
		assert(p_elselist != null);

		// instantiate the member variable
		m_elselist = p_elselist;

		// set the parent of each element in the sequence parameter passed
		for (IJavaNode lnode: p_elselist) lnode.setParent(this);
	}

	// private member variable (else_statement)
	private IJavaStatement m_else_statement = null;

	// public operation to check optional type status
	public boolean hasElseStatement() { return (m_else_statement != null); };

	// public operation to retrieve the embedded private field value
	public IJavaStatement getElseStatement()
	{
		return m_else_statement;
	}

	// public operation to set the embedded private field value
	public void setElseStatement(IJavaStatement p_else_statement)
	{
		// instantiate the member variable
		m_else_statement = p_else_statement;

		// set the parent of the parameter passed
		p_else_statement.setParent(this);
	}

	// default constructor
	public JavaIfStatement()
	{
		super();
		m_expression = null;
		m_then_statement = null;
		m_elselist = null;
		m_else_statement = null;
	}

	// auxiliary constructor
	public JavaIfStatement(
		IJavaExpression p_expression,
		IJavaStatement p_then_statement,
		List<IJavaElseIfStatement> p_elselist,
		IJavaStatement p_else_statement
	) {
		super();
		setExpression(p_expression);
		setThenStatement(p_then_statement);
		setElselist(p_elselist);
		setElseStatement(p_else_statement);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitIfStatement(this); }

	// the identity function
	public String identify() { return "JavaIfStatement"; }
}
