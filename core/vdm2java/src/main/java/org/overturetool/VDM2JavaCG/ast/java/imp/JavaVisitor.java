// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

public class JavaVisitor implements IJavaVisitor {

	// empty visitor for type IJavaNode
	public void visitNode(IJavaNode pNode) {};

	// empty visitor operation for type IJavaTailExpression
	public void visitTailExpression(IJavaTailExpression pNode) {};

	// empty visitor operation for type IJavaRangeResToExpression
	public void visitRangeResToExpression(IJavaRangeResToExpression pNode) {};

	// visitor operation for type IJavaSpecification (cannot be overridden)
	public void visitSpecification(IJavaSpecification pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaClassDefinitions)
			{ visitClassDefinitions((IJavaClassDefinitions) pNode); return; }
		if (pNode instanceof IJavaInterfaceDefinitions)
			{ visitInterfaceDefinitions((IJavaInterfaceDefinitions) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaSpecification'");
	};

	// empty visitor operation for type IJavaNilLiteral
	public void visitNilLiteral(IJavaNilLiteral pNode) {};

	// empty visitor operation for type IJavaModifier
	public void visitModifier(IJavaModifier pNode) {};

	// visitor operation for type IJavaBind (cannot be overridden)
	public void visitBind(IJavaBind pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaSetBind)
			{ visitSetBind((IJavaSetBind) pNode); return; }
		if (pNode instanceof IJavaTypeBind)
			{ visitTypeBind((IJavaTypeBind) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaBind'");
	};

	// empty visitor operation for type IJavaMapDomainExpression
	public void visitMapDomainExpression(IJavaMapDomainExpression pNode) {};

	// empty visitor operation for type IJavaRecordConstructor
	public void visitRecordConstructor(IJavaRecordConstructor pNode) {};

	// empty visitor operation for type IJavaSeqForLoop
	public void visitSeqForLoop(IJavaSeqForLoop pNode) {};

	// empty visitor operation for type IJavaSetBind
	public void visitSetBind(IJavaSetBind pNode) {};

	// empty visitor operation for type IJavaIntType
	public void visitIntType(IJavaIntType pNode) {};

	// empty visitor operation for type IJavaNotYetSpecifiedStatement
	public void visitNotYetSpecifiedStatement(IJavaNotYetSpecifiedStatement pNode) {};

	// empty visitor operation for type IJavaIdentifier
	public void visitIdentifier(IJavaIdentifier pNode) {};

	// empty visitor operation for type IJavaCallStatement
	public void visitCallStatement(IJavaCallStatement pNode) {};

	// empty visitor operation for type IJavaVectorExpression
	public void visitVectorExpression(IJavaVectorExpression pNode) {};

	// empty visitor operation for type IJavaSetDifferenceExpression
	public void visitSetDifferenceExpression(IJavaSetDifferenceExpression pNode) {};

	// empty visitor operation for type IJavaPatternIdentifier
	public void visitPatternIdentifier(IJavaPatternIdentifier pNode) {};

	// empty visitor operation for type IJavaNameDesignator
	public void visitNameDesignator(IJavaNameDesignator pNode) {};

	// empty visitor operation for type IJavaIndexForLoop
	public void visitIndexForLoop(IJavaIndexForLoop pNode) {};

	// empty visitor operation for type IJavaTextLiteral
	public void visitTextLiteral(IJavaTextLiteral pNode) {};

	// empty visitor operation for type IJavaNewDesignator
	public void visitNewDesignator(IJavaNewDesignator pNode) {};

	// empty visitor operation for type IJavaSymbolicLiteralExpression
	public void visitSymbolicLiteralExpression(IJavaSymbolicLiteralExpression pNode) {};

	// empty visitor operation for type IJavaVectorType
	public void visitVectorType(IJavaVectorType pNode) {};

	// empty visitor operation for type IJavaVectorEnumExpression
	public void visitVectorEnumExpression(IJavaVectorEnumExpression pNode) {};

	// empty visitor operation for type IJavaAccessDefinition
	public void visitAccessDefinition(IJavaAccessDefinition pNode) {};

	// empty visitor operation for type IJavaStringType
	public void visitStringType(IJavaStringType pNode) {};

	// empty visitor operation for type IJavaSetType
	public void visitSetType(IJavaSetType pNode) {};

	// empty visitor operation for type IJavaMapApplication
	public void visitMapApplication(IJavaMapApplication pNode) {};

	// empty visitor operation for type IJavaNewExpression
	public void visitNewExpression(IJavaNewExpression pNode) {};

	// empty visitor operation for type IJavaAtomicStatement
	public void visitAtomicStatement(IJavaAtomicStatement pNode) {};

	// empty visitor operation for type IJavaFieldReference
	public void visitFieldReference(IJavaFieldReference pNode) {};

	// visitor operation for type IJavaMapType (cannot be overridden)
	public void visitMapType(IJavaMapType pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaGenMap)
			{ visitGenMap((IJavaGenMap) pNode); return; }
		if (pNode instanceof IJavaBiMap)
			{ visitBiMap((IJavaBiMap) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaMapType'");
	};

	// empty visitor operation for type IJavaReturnStatement
	public void visitReturnStatement(IJavaReturnStatement pNode) {};

	// empty visitor operation for type IJavaIntDivExpression
	public void visitIntDivExpression(IJavaIntDivExpression pNode) {};

	// empty visitor operation for type IJavaBlockStatement
	public void visitBlockStatement(IJavaBlockStatement pNode) {};

	// empty visitor operation for type IJavaMapRangeExpression
	public void visitMapRangeExpression(IJavaMapRangeExpression pNode) {};

	// empty visitor operation for type IJavaRemainderExpression
	public void visitRemainderExpression(IJavaRemainderExpression pNode) {};

	// empty visitor operation for type IJavaUnaryExpression
	public void visitUnaryExpression(IJavaUnaryExpression pNode) {};

	// empty visitor operation for type IJavaStringLiteralExpression
	public void visitStringLiteralExpression(IJavaStringLiteralExpression pNode) {};

	// empty visitor operation for type IJavaBooleanType
	public void visitBooleanType(IJavaBooleanType pNode) {};

	// empty visitor operation for type IJavaBiimplicationExpression
	public void visitBiimplicationExpression(IJavaBiimplicationExpression pNode) {};

	// empty visitor operation for type IJavaImplicationExpression
	public void visitImplicationExpression(IJavaImplicationExpression pNode) {};

	// empty visitor operation for type IJavaIndexesExpression
	public void visitIndexesExpression(IJavaIndexesExpression pNode) {};

	// visitor operation for type IJavaVariableType (cannot be overridden)
	public void visitVariableType(IJavaVariableType pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaType)
			{ visitType((IJavaType) pNode); return; }
		if (pNode instanceof IJavaReferenceType)
			{ visitReferenceType((IJavaReferenceType) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaVariableType'");
	};

	// empty visitor operation for type IJavaNumericLiteral
	public void visitNumericLiteral(IJavaNumericLiteral pNode) {};

	// empty visitor operation for type IJavaDistConcat
	public void visitDistConcat(IJavaDistConcat pNode) {};

	// empty visitor operation for type IJavaDomainResToExpression
	public void visitDomainResToExpression(IJavaDomainResToExpression pNode) {};

	// empty visitor operation for type IJavaSetPattern
	public void visitSetPattern(IJavaSetPattern pNode) {};

	// empty visitor operation for type IJavaUnresolvedType
	public void visitUnresolvedType(IJavaUnresolvedType pNode) {};

	// empty visitor operation for type IJavaTypeBind
	public void visitTypeBind(IJavaTypeBind pNode) {};

	// empty visitor operation for type IJavaApplyExpression
	public void visitApplyExpression(IJavaApplyExpression pNode) {};

	// empty visitor operation for type IJavaSetIntersectExpression
	public void visitSetIntersectExpression(IJavaSetIntersectExpression pNode) {};

	// empty visitor operation for type IJavaCallObjectStatement
	public void visitCallObjectStatement(IJavaCallObjectStatement pNode) {};

	// visitor operation for type IJavaRecordExpression (cannot be overridden)
	public void visitRecordExpression(IJavaRecordExpression pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaRecordModifier)
			{ visitRecordModifier((IJavaRecordModifier) pNode); return; }
		if (pNode instanceof IJavaRecordConstructor)
			{ visitRecordConstructor((IJavaRecordConstructor) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaRecordExpression'");
	};

	// empty visitor operation for type IJavaRecordModifier
	public void visitRecordModifier(IJavaRecordModifier pNode) {};

	// empty visitor operation for type IJavaObjectDesignatorExpression
	public void visitObjectDesignatorExpression(IJavaObjectDesignatorExpression pNode) {};

	// empty visitor operation for type IJavaBiMap
	public void visitBiMap(IJavaBiMap pNode) {};

	// empty visitor operation for type IJavaRealLiteral
	public void visitRealLiteral(IJavaRealLiteral pNode) {};

	// visitor operation for type IJavaExpression (cannot be overridden)
	public void visitExpression(IJavaExpression pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaName)
			{ visitName((IJavaName) pNode); return; }
		if (pNode instanceof IJavaApplyExpression)
			{ visitApplyExpression((IJavaApplyExpression) pNode); return; }
		if (pNode instanceof IJavaCardinalityExpression)
			{ visitCardinalityExpression((IJavaCardinalityExpression) pNode); return; }
		if (pNode instanceof IJavaSymbolicLiteralExpression)
			{ visitSymbolicLiteralExpression((IJavaSymbolicLiteralExpression) pNode); return; }
		if (pNode instanceof IJavaStringLiteralExpression)
			{ visitStringLiteralExpression((IJavaStringLiteralExpression) pNode); return; }
		if (pNode instanceof IJavaQuoteLiteralExpression)
			{ visitQuoteLiteralExpression((IJavaQuoteLiteralExpression) pNode); return; }
		if (pNode instanceof IJavaVectorEnumExpression)
			{ visitVectorEnumExpression((IJavaVectorEnumExpression) pNode); return; }
		if (pNode instanceof IJavaVectorExpression)
			{ visitVectorExpression((IJavaVectorExpression) pNode); return; }
		if (pNode instanceof IJavaSeqCompExpression)
			{ visitSeqCompExpression((IJavaSeqCompExpression) pNode); return; }
		if (pNode instanceof IJavaVectorConcatExpression)
			{ visitVectorConcatExpression((IJavaVectorConcatExpression) pNode); return; }
		if (pNode instanceof IJavaElementsExpression)
			{ visitElementsExpression((IJavaElementsExpression) pNode); return; }
		if (pNode instanceof IJavaSubVectorExpression)
			{ visitSubVectorExpression((IJavaSubVectorExpression) pNode); return; }
		if (pNode instanceof IJavaLengthExpression)
			{ visitLengthExpression((IJavaLengthExpression) pNode); return; }
		if (pNode instanceof IJavaIndexesExpression)
			{ visitIndexesExpression((IJavaIndexesExpression) pNode); return; }
		if (pNode instanceof IJavaDistConcat)
			{ visitDistConcat((IJavaDistConcat) pNode); return; }
		if (pNode instanceof IJavaIfExpression)
			{ visitIfExpression((IJavaIfExpression) pNode); return; }
		if (pNode instanceof IJavaElseIfExpression)
			{ visitElseIfExpression((IJavaElseIfExpression) pNode); return; }
		if (pNode instanceof IJavaUnaryExpression)
			{ visitUnaryExpression((IJavaUnaryExpression) pNode); return; }
		if (pNode instanceof IJavaImplicationExpression)
			{ visitImplicationExpression((IJavaImplicationExpression) pNode); return; }
		if (pNode instanceof IJavaBiimplicationExpression)
			{ visitBiimplicationExpression((IJavaBiimplicationExpression) pNode); return; }
		if (pNode instanceof IJavaIntDivExpression)
			{ visitIntDivExpression((IJavaIntDivExpression) pNode); return; }
		if (pNode instanceof IJavaRemainderExpression)
			{ visitRemainderExpression((IJavaRemainderExpression) pNode); return; }
		if (pNode instanceof IJavaModulusExpression)
			{ visitModulusExpression((IJavaModulusExpression) pNode); return; }
		if (pNode instanceof IJavaBinaryExpression)
			{ visitBinaryExpression((IJavaBinaryExpression) pNode); return; }
		if (pNode instanceof IJavaEqualsExpression)
			{ visitEqualsExpression((IJavaEqualsExpression) pNode); return; }
		if (pNode instanceof IJavaEmptyExpression)
			{ visitEmptyExpression((IJavaEmptyExpression) pNode); return; }
		if (pNode instanceof IJavaHeadExpression)
			{ visitHeadExpression((IJavaHeadExpression) pNode); return; }
		if (pNode instanceof IJavaCompositionExpression)
			{ visitCompositionExpression((IJavaCompositionExpression) pNode); return; }
		if (pNode instanceof IJavaTailExpression)
			{ visitTailExpression((IJavaTailExpression) pNode); return; }
		if (pNode instanceof IJavaPlusPlusExpression)
			{ visitPlusPlusExpression((IJavaPlusPlusExpression) pNode); return; }
		if (pNode instanceof IJavaSetExpression)
			{ visitSetExpression((IJavaSetExpression) pNode); return; }
		if (pNode instanceof IJavaMapExpression)
			{ visitMapExpression((IJavaMapExpression) pNode); return; }
		if (pNode instanceof IJavaStarStarExpression)
			{ visitStarStarExpression((IJavaStarStarExpression) pNode); return; }
		if (pNode instanceof IJavaVectorApplication)
			{ visitVectorApplication((IJavaVectorApplication) pNode); return; }
		if (pNode instanceof IJavaNewExpression)
			{ visitNewExpression((IJavaNewExpression) pNode); return; }
		if (pNode instanceof IJavaThisExpression)
			{ visitThisExpression((IJavaThisExpression) pNode); return; }
		if (pNode instanceof IJavaIsExpression)
			{ visitIsExpression((IJavaIsExpression) pNode); return; }
		if (pNode instanceof IJavaIsBasicTypeExpression)
			{ visitIsBasicTypeExpression((IJavaIsBasicTypeExpression) pNode); return; }
		if (pNode instanceof IJavaRecordExpression)
			{ visitRecordExpression((IJavaRecordExpression) pNode); return; }
		if (pNode instanceof IJavaIsSubClassResponsibilityExpression)
			{ visitIsSubClassResponsibilityExpression((IJavaIsSubClassResponsibilityExpression) pNode); return; }
		if (pNode instanceof IJavaNotYetSpecifiedExpression)
			{ visitNotYetSpecifiedExpression((IJavaNotYetSpecifiedExpression) pNode); return; }
		if (pNode instanceof IJavaSameClassMembership)
			{ visitSameClassMembership((IJavaSameClassMembership) pNode); return; }
		if (pNode instanceof IJavaTokenExpression)
			{ visitTokenExpression((IJavaTokenExpression) pNode); return; }
		if (pNode instanceof IJavaTupleConsExpression)
			{ visitTupleConsExpression((IJavaTupleConsExpression) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaExpression'");
	};

	// empty visitor operation for type IJavaQuoteLiteral
	public void visitQuoteLiteral(IJavaQuoteLiteral pNode) {};

	// empty visitor operation for type IJavaScope
	public void visitScope(IJavaScope pNode) {};

	// empty visitor operation for type IJavaElementsExpression
	public void visitElementsExpression(IJavaElementsExpression pNode) {};

	// empty visitor operation for type IJavaContinueStatement
	public void visitContinueStatement(IJavaContinueStatement pNode) {};

	// empty visitor operation for type IJavaWhileLoop
	public void visitWhileLoop(IJavaWhileLoop pNode) {};

	// empty visitor operation for type IJavaIsSubClassResponsibilityStatement
	public void visitIsSubClassResponsibilityStatement(IJavaIsSubClassResponsibilityStatement pNode) {};

	// empty visitor operation for type IJavaShortType
	public void visitShortType(IJavaShortType pNode) {};

	// empty visitor operation for type IJavaLongType
	public void visitLongType(IJavaLongType pNode) {};

	// empty visitor operation for type IJavaSetForLoop
	public void visitSetForLoop(IJavaSetForLoop pNode) {};

	// empty visitor operation for type IJavaMethodDefinition
	public void visitMethodDefinition(IJavaMethodDefinition pNode) {};

	// empty visitor operation for type IJavaSameClassMembership
	public void visitSameClassMembership(IJavaSameClassMembership pNode) {};

	// empty visitor operation for type IJavaCardinalityExpression
	public void visitCardinalityExpression(IJavaCardinalityExpression pNode) {};

	// empty visitor operation for type IJavaVoidType
	public void visitVoidType(IJavaVoidType pNode) {};

	// empty visitor operation for type IJavaLengthExpression
	public void visitLengthExpression(IJavaLengthExpression pNode) {};

	// empty visitor operation for type IJavaTupleConsExpression
	public void visitTupleConsExpression(IJavaTupleConsExpression pNode) {};

	// empty visitor operation for type IJavaBinaryOperator
	public void visitBinaryOperator(IJavaBinaryOperator pNode) {};

	// empty visitor operation for type IJavaIsExpression
	public void visitIsExpression(IJavaIsExpression pNode) {};

	// empty visitor operation for type IJavaMapInverseExpression
	public void visitMapInverseExpression(IJavaMapInverseExpression pNode) {};

	// empty visitor operation for type IJavaBooleanLiteral
	public void visitBooleanLiteral(IJavaBooleanLiteral pNode) {};

	// empty visitor operation for type IJavaThisExpression
	public void visitThisExpression(IJavaThisExpression pNode) {};

	// empty visitor operation for type IJavaMethodBody
	public void visitMethodBody(IJavaMethodBody pNode) {};

	// visitor operation for type IJavaDefinition (cannot be overridden)
	public void visitDefinition(IJavaDefinition pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaInstanceVariableDefinition)
			{ visitInstanceVariableDefinition((IJavaInstanceVariableDefinition) pNode); return; }
		if (pNode instanceof IJavaMethodDefinition)
			{ visitMethodDefinition((IJavaMethodDefinition) pNode); return; }
		if (pNode instanceof IJavaAssignmentDefinition)
			{ visitAssignmentDefinition((IJavaAssignmentDefinition) pNode); return; }
		if (pNode instanceof IJavaClassDefinition)
			{ visitClassDefinition((IJavaClassDefinition) pNode); return; }
		if (pNode instanceof IJavaEmptyDefinition)
			{ visitEmptyDefinition((IJavaEmptyDefinition) pNode); return; }
		if (pNode instanceof IJavaInterfaceDefinition)
			{ visitInterfaceDefinition((IJavaInterfaceDefinition) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaDefinition'");
	};

	// empty visitor operation for type IJavaSubSetExpression
	public void visitSubSetExpression(IJavaSubSetExpression pNode) {};

	// visitor operation for type IJavaSetExpression (cannot be overridden)
	public void visitSetExpression(IJavaSetExpression pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaSetCompExpression)
			{ visitSetCompExpression((IJavaSetCompExpression) pNode); return; }
		if (pNode instanceof IJavaSetDifferenceExpression)
			{ visitSetDifferenceExpression((IJavaSetDifferenceExpression) pNode); return; }
		if (pNode instanceof IJavaSetEnumExpression)
			{ visitSetEnumExpression((IJavaSetEnumExpression) pNode); return; }
		if (pNode instanceof IJavaSetIntersectExpression)
			{ visitSetIntersectExpression((IJavaSetIntersectExpression) pNode); return; }
		if (pNode instanceof IJavaDistUnionExpression)
			{ visitDistUnionExpression((IJavaDistUnionExpression) pNode); return; }
		if (pNode instanceof IJavaDistIntersectionExpression)
			{ visitDistIntersectionExpression((IJavaDistIntersectionExpression) pNode); return; }
		if (pNode instanceof IJavaSetRangeExpression)
			{ visitSetRangeExpression((IJavaSetRangeExpression) pNode); return; }
		if (pNode instanceof IJavaSubSetExpression)
			{ visitSubSetExpression((IJavaSubSetExpression) pNode); return; }
		if (pNode instanceof IJavaSetUnionExpression)
			{ visitSetUnionExpression((IJavaSetUnionExpression) pNode); return; }
		if (pNode instanceof IJavaProperSubsetExpression)
			{ visitProperSubsetExpression((IJavaProperSubsetExpression) pNode); return; }
		if (pNode instanceof IJavaInSetExpression)
			{ visitInSetExpression((IJavaInSetExpression) pNode); return; }
		if (pNode instanceof IJavaNotInSetExpression)
			{ visitNotInSetExpression((IJavaNotInSetExpression) pNode); return; }
		if (pNode instanceof IJavaPowerSetExpression)
			{ visitPowerSetExpression((IJavaPowerSetExpression) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaSetExpression'");
	};

	// empty visitor operation for type IJavaByteType
	public void visitByteType(IJavaByteType pNode) {};

	// empty visitor operation for type IJavaPowerSetExpression
	public void visitPowerSetExpression(IJavaPowerSetExpression pNode) {};

	// empty visitor operation for type IJavaThisDesignator
	public void visitThisDesignator(IJavaThisDesignator pNode) {};

	// empty visitor operation for type IJavaInterfaceDefinition
	public void visitInterfaceDefinition(IJavaInterfaceDefinition pNode) {};

	// empty visitor operation for type IJavaRecordModification
	public void visitRecordModification(IJavaRecordModification pNode) {};

	// empty visitor operation for type IJavaCharacterLiteral
	public void visitCharacterLiteral(IJavaCharacterLiteral pNode) {};

	// empty visitor operation for type IJavaSubVectorExpression
	public void visitSubVectorExpression(IJavaSubVectorExpression pNode) {};

	// empty visitor operation for type IJavaCompositionExpression
	public void visitCompositionExpression(IJavaCompositionExpression pNode) {};

	// empty visitor operation for type IJavaIfExpression
	public void visitIfExpression(IJavaIfExpression pNode) {};

	// empty visitor operation for type IJavaAssignStatement
	public void visitAssignStatement(IJavaAssignStatement pNode) {};

	// empty visitor operation for type IJavaIsBasicTypeExpression
	public void visitIsBasicTypeExpression(IJavaIsBasicTypeExpression pNode) {};

	// empty visitor operation for type IJavaProductType
	public void visitProductType(IJavaProductType pNode) {};

	// empty visitor operation for type IJavaErrorStatement
	public void visitErrorStatement(IJavaErrorStatement pNode) {};

	// empty visitor operation for type IJavaGenMap
	public void visitGenMap(IJavaGenMap pNode) {};

	// empty visitor operation for type IJavaIsSubClassResponsibilityExpression
	public void visitIsSubClassResponsibilityExpression(IJavaIsSubClassResponsibilityExpression pNode) {};

	// empty visitor operation for type IJavaEmptyExpression
	public void visitEmptyExpression(IJavaEmptyExpression pNode) {};

	// empty visitor operation for type IJavaHeadExpression
	public void visitHeadExpression(IJavaHeadExpression pNode) {};

	// visitor operation for type IJavaLiteral (cannot be overridden)
	public void visitLiteral(IJavaLiteral pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaNumericLiteral)
			{ visitNumericLiteral((IJavaNumericLiteral) pNode); return; }
		if (pNode instanceof IJavaRealLiteral)
			{ visitRealLiteral((IJavaRealLiteral) pNode); return; }
		if (pNode instanceof IJavaBooleanLiteral)
			{ visitBooleanLiteral((IJavaBooleanLiteral) pNode); return; }
		if (pNode instanceof IJavaNilLiteral)
			{ visitNilLiteral((IJavaNilLiteral) pNode); return; }
		if (pNode instanceof IJavaCharacterLiteral)
			{ visitCharacterLiteral((IJavaCharacterLiteral) pNode); return; }
		if (pNode instanceof IJavaTextLiteral)
			{ visitTextLiteral((IJavaTextLiteral) pNode); return; }
		if (pNode instanceof IJavaQuoteLiteral)
			{ visitQuoteLiteral((IJavaQuoteLiteral) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaLiteral'");
	};

	// empty visitor operation for type IJavaCharType
	public void visitCharType(IJavaCharType pNode) {};

	// empty visitor operation for type IJavaClassDefinition
	public void visitClassDefinition(IJavaClassDefinition pNode) {};

	// empty visitor operation for type IJavaSetEnumExpression
	public void visitSetEnumExpression(IJavaSetEnumExpression pNode) {};

	// empty visitor operation for type IJavaElseIfStatement
	public void visitElseIfStatement(IJavaElseIfStatement pNode) {};

	// empty visitor operation for type IJavaMapEnumExpression
	public void visitMapEnumExpression(IJavaMapEnumExpression pNode) {};

	// empty visitor operation for type IJavaInSetExpression
	public void visitInSetExpression(IJavaInSetExpression pNode) {};

	// empty visitor operation for type IJavaDistMergeExpression
	public void visitDistMergeExpression(IJavaDistMergeExpression pNode) {};

	// empty visitor operation for type IJavaPlusPlusExpression
	public void visitPlusPlusExpression(IJavaPlusPlusExpression pNode) {};

	// empty visitor operation for type IJavaMapCompExpression
	public void visitMapCompExpression(IJavaMapCompExpression pNode) {};

	// empty visitor operation for type IJavaObjectFieldReference
	public void visitObjectFieldReference(IJavaObjectFieldReference pNode) {};

	// empty visitor operation for type IJavaUnaryOperator
	public void visitUnaryOperator(IJavaUnaryOperator pNode) {};

	// visitor operation for type IJavaPattern (cannot be overridden)
	public void visitPattern(IJavaPattern pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaSetPattern)
			{ visitSetPattern((IJavaSetPattern) pNode); return; }
		if (pNode instanceof IJavaPatternIdentifier)
			{ visitPatternIdentifier((IJavaPatternIdentifier) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaPattern'");
	};

	// empty visitor operation for type IJavaInterfaceDefinitions
	public void visitInterfaceDefinitions(IJavaInterfaceDefinitions pNode) {};

	// empty visitor operation for type IJavaDomainResByExpression
	public void visitDomainResByExpression(IJavaDomainResByExpression pNode) {};

	// empty visitor operation for type IJavaSetRangeExpression
	public void visitSetRangeExpression(IJavaSetRangeExpression pNode) {};

	// empty visitor operation for type IJavaTokenExpression
	public void visitTokenExpression(IJavaTokenExpression pNode) {};

	// empty visitor operation for type IJavaEqualsExpression
	public void visitEqualsExpression(IJavaEqualsExpression pNode) {};

	// visitor operation for type IJavaType (cannot be overridden)
	public void visitType(IJavaType pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaByteType)
			{ visitByteType((IJavaByteType) pNode); return; }
		if (pNode instanceof IJavaShortType)
			{ visitShortType((IJavaShortType) pNode); return; }
		if (pNode instanceof IJavaIntType)
			{ visitIntType((IJavaIntType) pNode); return; }
		if (pNode instanceof IJavaLongType)
			{ visitLongType((IJavaLongType) pNode); return; }
		if (pNode instanceof IJavaFloatType)
			{ visitFloatType((IJavaFloatType) pNode); return; }
		if (pNode instanceof IJavaDoubleType)
			{ visitDoubleType((IJavaDoubleType) pNode); return; }
		if (pNode instanceof IJavaCharType)
			{ visitCharType((IJavaCharType) pNode); return; }
		if (pNode instanceof IJavaStringType)
			{ visitStringType((IJavaStringType) pNode); return; }
		if (pNode instanceof IJavaBooleanType)
			{ visitBooleanType((IJavaBooleanType) pNode); return; }
		if (pNode instanceof IJavaVectorType)
			{ visitVectorType((IJavaVectorType) pNode); return; }
		if (pNode instanceof IJavaClassType)
			{ visitClassType((IJavaClassType) pNode); return; }
		if (pNode instanceof IJavaVoidType)
			{ visitVoidType((IJavaVoidType) pNode); return; }
		if (pNode instanceof IJavaMapType)
			{ visitMapType((IJavaMapType) pNode); return; }
		if (pNode instanceof IJavaSetType)
			{ visitSetType((IJavaSetType) pNode); return; }
		if (pNode instanceof IJavaProductType)
			{ visitProductType((IJavaProductType) pNode); return; }
		if (pNode instanceof IJavaTokenType)
			{ visitTokenType((IJavaTokenType) pNode); return; }
		if (pNode instanceof IJavaQuoteType)
			{ visitQuoteType((IJavaQuoteType) pNode); return; }
		if (pNode instanceof IJavaUnresolvedType)
			{ visitUnresolvedType((IJavaUnresolvedType) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaType'");
	};

	// empty visitor operation for type IJavaReferenceType
	public void visitReferenceType(IJavaReferenceType pNode) {};

	// empty visitor operation for type IJavaEmptyDefinition
	public void visitEmptyDefinition(IJavaEmptyDefinition pNode) {};

	// empty visitor operation for type IJavaModulusExpression
	public void visitModulusExpression(IJavaModulusExpression pNode) {};

	// visitor operation for type IJavaStatement (cannot be overridden)
	public void visitStatement(IJavaStatement pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaReturnStatement)
			{ visitReturnStatement((IJavaReturnStatement) pNode); return; }
		if (pNode instanceof IJavaAssignStatement)
			{ visitAssignStatement((IJavaAssignStatement) pNode); return; }
		if (pNode instanceof IJavaIfStatement)
			{ visitIfStatement((IJavaIfStatement) pNode); return; }
		if (pNode instanceof IJavaElseIfStatement)
			{ visitElseIfStatement((IJavaElseIfStatement) pNode); return; }
		if (pNode instanceof IJavaBlockStatement)
			{ visitBlockStatement((IJavaBlockStatement) pNode); return; }
		if (pNode instanceof IJavaIsSubClassResponsibilityStatement)
			{ visitIsSubClassResponsibilityStatement((IJavaIsSubClassResponsibilityStatement) pNode); return; }
		if (pNode instanceof IJavaNotYetSpecifiedStatement)
			{ visitNotYetSpecifiedStatement((IJavaNotYetSpecifiedStatement) pNode); return; }
		if (pNode instanceof IJavaAtomicStatement)
			{ visitAtomicStatement((IJavaAtomicStatement) pNode); return; }
		if (pNode instanceof IJavaEmptyStatement)
			{ visitEmptyStatement((IJavaEmptyStatement) pNode); return; }
		if (pNode instanceof IJavaErrorStatement)
			{ visitErrorStatement((IJavaErrorStatement) pNode); return; }
		if (pNode instanceof IJavaForLoop)
			{ visitForLoop((IJavaForLoop) pNode); return; }
		if (pNode instanceof IJavaWhileLoop)
			{ visitWhileLoop((IJavaWhileLoop) pNode); return; }
		if (pNode instanceof IJavaContinueStatement)
			{ visitContinueStatement((IJavaContinueStatement) pNode); return; }
		if (pNode instanceof IJavaCallStatement)
			{ visitCallStatement((IJavaCallStatement) pNode); return; }
		if (pNode instanceof IJavaCallObjectStatement)
			{ visitCallObjectStatement((IJavaCallObjectStatement) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaStatement'");
	};

	// empty visitor operation for type IJavaSeqCompExpression
	public void visitSeqCompExpression(IJavaSeqCompExpression pNode) {};

	// empty visitor operation for type IJavaTokenType
	public void visitTokenType(IJavaTokenType pNode) {};

	// empty visitor operation for type IJavaNotYetSpecifiedExpression
	public void visitNotYetSpecifiedExpression(IJavaNotYetSpecifiedExpression pNode) {};

	// empty visitor operation for type IJavaInheritanceClause
	public void visitInheritanceClause(IJavaInheritanceClause pNode) {};

	// empty visitor operation for type IJavaDefinitionList
	public void visitDefinitionList(IJavaDefinitionList pNode) {};

	// empty visitor operation for type IJavaFloatType
	public void visitFloatType(IJavaFloatType pNode) {};

	// empty visitor operation for type IJavaAssignmentDefinition
	public void visitAssignmentDefinition(IJavaAssignmentDefinition pNode) {};

	// empty visitor operation for type IJavaNotInSetExpression
	public void visitNotInSetExpression(IJavaNotInSetExpression pNode) {};

	// empty visitor operation for type IJavaQuoteType
	public void visitQuoteType(IJavaQuoteType pNode) {};

	// empty visitor operation for type IJavaSetCompExpression
	public void visitSetCompExpression(IJavaSetCompExpression pNode) {};

	// empty visitor operation for type IJavaBinaryObjectOperator
	public void visitBinaryObjectOperator(IJavaBinaryObjectOperator pNode) {};

	// empty visitor operation for type IJavaDoubleType
	public void visitDoubleType(IJavaDoubleType pNode) {};

	// visitor operation for type IJavaObjectDesignator (cannot be overridden)
	public void visitObjectDesignator(IJavaObjectDesignator pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaNameDesignator)
			{ visitNameDesignator((IJavaNameDesignator) pNode); return; }
		if (pNode instanceof IJavaNewDesignator)
			{ visitNewDesignator((IJavaNewDesignator) pNode); return; }
		if (pNode instanceof IJavaThisDesignator)
			{ visitThisDesignator((IJavaThisDesignator) pNode); return; }
		if (pNode instanceof IJavaObjectDesignatorExpression)
			{ visitObjectDesignatorExpression((IJavaObjectDesignatorExpression) pNode); return; }
		if (pNode instanceof IJavaObjectFieldReference)
			{ visitObjectFieldReference((IJavaObjectFieldReference) pNode); return; }
		if (pNode instanceof IJavaObjectApply)
			{ visitObjectApply((IJavaObjectApply) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaObjectDesignator'");
	};

	// empty visitor operation for type IJavaInstanceVariableDefinition
	public void visitInstanceVariableDefinition(IJavaInstanceVariableDefinition pNode) {};

	// empty visitor operation for type IJavaObjectApply
	public void visitObjectApply(IJavaObjectApply pNode) {};

	// empty visitor operation for type IJavaDistUnionExpression
	public void visitDistUnionExpression(IJavaDistUnionExpression pNode) {};

	// empty visitor operation for type IJavaBinaryExpression
	public void visitBinaryExpression(IJavaBinaryExpression pNode) {};

	// empty visitor operation for type IJavaClassDefinitions
	public void visitClassDefinitions(IJavaClassDefinitions pNode) {};

	// empty visitor operation for type IJavaMapOrSequenceReference
	public void visitMapOrSequenceReference(IJavaMapOrSequenceReference pNode) {};

	// empty visitor operation for type IJavaStarStarExpression
	public void visitStarStarExpression(IJavaStarStarExpression pNode) {};

	// empty visitor operation for type IJavaRangeResByExpression
	public void visitRangeResByExpression(IJavaRangeResByExpression pNode) {};

	// empty visitor operation for type IJavaProperSubsetExpression
	public void visitProperSubsetExpression(IJavaProperSubsetExpression pNode) {};

	// empty visitor operation for type IJavaQuoteLiteralExpression
	public void visitQuoteLiteralExpression(IJavaQuoteLiteralExpression pNode) {};

	// empty visitor operation for type IJavaElseIfExpression
	public void visitElseIfExpression(IJavaElseIfExpression pNode) {};

	// visitor operation for type IJavaForLoop (cannot be overridden)
	public void visitForLoop(IJavaForLoop pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaSeqForLoop)
			{ visitSeqForLoop((IJavaSeqForLoop) pNode); return; }
		if (pNode instanceof IJavaSetForLoop)
			{ visitSetForLoop((IJavaSetForLoop) pNode); return; }
		if (pNode instanceof IJavaIndexForLoop)
			{ visitIndexForLoop((IJavaIndexForLoop) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaForLoop'");
	};

	// visitor operation for type IJavaMapExpression (cannot be overridden)
	public void visitMapExpression(IJavaMapExpression pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaMapCompExpression)
			{ visitMapCompExpression((IJavaMapCompExpression) pNode); return; }
		if (pNode instanceof IJavaMapDomainExpression)
			{ visitMapDomainExpression((IJavaMapDomainExpression) pNode); return; }
		if (pNode instanceof IJavaMapEnumExpression)
			{ visitMapEnumExpression((IJavaMapEnumExpression) pNode); return; }
		if (pNode instanceof IJavaMapInverseExpression)
			{ visitMapInverseExpression((IJavaMapInverseExpression) pNode); return; }
		if (pNode instanceof IJavaMapletExpression)
			{ visitMapletExpression((IJavaMapletExpression) pNode); return; }
		if (pNode instanceof IJavaMapRangeExpression)
			{ visitMapRangeExpression((IJavaMapRangeExpression) pNode); return; }
		if (pNode instanceof IJavaMapUnionExpression)
			{ visitMapUnionExpression((IJavaMapUnionExpression) pNode); return; }
		if (pNode instanceof IJavaDistMergeExpression)
			{ visitDistMergeExpression((IJavaDistMergeExpression) pNode); return; }
		if (pNode instanceof IJavaDomainResToExpression)
			{ visitDomainResToExpression((IJavaDomainResToExpression) pNode); return; }
		if (pNode instanceof IJavaDomainResByExpression)
			{ visitDomainResByExpression((IJavaDomainResByExpression) pNode); return; }
		if (pNode instanceof IJavaMapApplication)
			{ visitMapApplication((IJavaMapApplication) pNode); return; }
		if (pNode instanceof IJavaRangeResToExpression)
			{ visitRangeResToExpression((IJavaRangeResToExpression) pNode); return; }
		if (pNode instanceof IJavaRangeResByExpression)
			{ visitRangeResByExpression((IJavaRangeResByExpression) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaMapExpression'");
	};

	// empty visitor operation for type IJavaEmptyStatement
	public void visitEmptyStatement(IJavaEmptyStatement pNode) {};

	// empty visitor operation for type IJavaClassType
	public void visitClassType(IJavaClassType pNode) {};

	// empty visitor operation for type IJavaMapUnionExpression
	public void visitMapUnionExpression(IJavaMapUnionExpression pNode) {};

	// empty visitor operation for type IJavaName
	public void visitName(IJavaName pNode) {};

	// empty visitor operation for type IJavaSetUnionExpression
	public void visitSetUnionExpression(IJavaSetUnionExpression pNode) {};

	// empty visitor operation for type IJavaVectorConcatExpression
	public void visitVectorConcatExpression(IJavaVectorConcatExpression pNode) {};

	// empty visitor operation for type IJavaIfStatement
	public void visitIfStatement(IJavaIfStatement pNode) {};

	// visitor operation for type IJavaStateDesignator (cannot be overridden)
	public void visitStateDesignator(IJavaStateDesignator pNode)
	{
		// dispatch to handler of correct sub-type
		if (pNode instanceof IJavaStateDesignatorName)
			{ visitStateDesignatorName((IJavaStateDesignatorName) pNode); return; }
		if (pNode instanceof IJavaFieldReference)
			{ visitFieldReference((IJavaFieldReference) pNode); return; }
		if (pNode instanceof IJavaMapOrSequenceReference)
			{ visitMapOrSequenceReference((IJavaMapOrSequenceReference) pNode); return; }
		// default error handler (should never be called)
		throw new InternalError("Type '"+pNode.identify()+"' is not subtype of 'IJavaStateDesignator'");
	};

	// empty visitor operation for type IJavaDistIntersectionExpression
	public void visitDistIntersectionExpression(IJavaDistIntersectionExpression pNode) {};

	// empty visitor operation for type IJavaMapletExpression
	public void visitMapletExpression(IJavaMapletExpression pNode) {};

	// empty visitor operation for type IJavaVectorApplication
	public void visitVectorApplication(IJavaVectorApplication pNode) {};

	// empty visitor operation for type IJavaStateDesignatorName
	public void visitStateDesignatorName(IJavaStateDesignatorName pNode) {};

}
