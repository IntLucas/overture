// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

// import java collection types
import java.util.*;

public class JavaMethodDefinition extends JavaDefinition implements IJavaMethodDefinition
{
	// private member variable (IsConstructor)
	private Boolean m_IsConstructor = new Boolean(false);

	// public operation to retrieve the embedded private field value
	public Boolean getIsConstructor()
	{
		return m_IsConstructor;
	}

	// public operation to set the embedded private field value
	public void setIsConstructor(Boolean p_IsConstructor)
	{
		// consistency check (field must be non null!)
		assert(p_IsConstructor != null);

		// instantiate the member variable
		m_IsConstructor = p_IsConstructor;
	}

	// private member variable (access)
	private IJavaAccessDefinition m_access = null;

	// public operation to retrieve the embedded private field value
	public IJavaAccessDefinition getAccess()
	{
		return m_access;
	}

	// public operation to set the embedded private field value
	public void setAccess(IJavaAccessDefinition p_access)
	{
		// consistency check (field must be non null!)
		assert(p_access != null);

		// instantiate the member variable
		m_access = p_access;

		// set the parent of the parameter passed
		p_access.setParent(this);
	}

	// private member variable (modifiers)
	private IJavaModifier m_modifiers = null;

	// public operation to retrieve the embedded private field value
	public IJavaModifier getModifiers()
	{
		return m_modifiers;
	}

	// public operation to set the embedded private field value
	public void setModifiers(IJavaModifier p_modifiers)
	{
		// consistency check (field must be non null!)
		assert(p_modifiers != null);

		// instantiate the member variable
		m_modifiers = p_modifiers;

		// set the parent of the parameter passed
		p_modifiers.setParent(this);
	}

	// private member variable (identifier)
	private IJavaIdentifier m_identifier = null;

	// public operation to retrieve the embedded private field value
	public IJavaIdentifier getIdentifier()
	{
		return m_identifier;
	}

	// public operation to set the embedded private field value
	public void setIdentifier(IJavaIdentifier p_identifier)
	{
		// consistency check (field must be non null!)
		assert(p_identifier != null);

		// instantiate the member variable
		m_identifier = p_identifier;

		// set the parent of the parameter passed
		p_identifier.setParent(this);
	}

	// private member variable (returntype)
	private IJavaType m_returntype = null;

	// public operation to retrieve the embedded private field value
	public IJavaType getReturntype()
	{
		return m_returntype;
	}

	// public operation to set the embedded private field value
	public void setReturntype(IJavaType p_returntype)
	{
		// consistency check (field must be non null!)
		assert(p_returntype != null);

		// instantiate the member variable
		m_returntype = p_returntype;

		// set the parent of the parameter passed
		p_returntype.setParent(this);
	}

	// private member variable (parameter_list)
	private List<IJavaBind> m_parameter_list = new Vector<IJavaBind>();

	// public operation to retrieve the embedded private field value
	public List<IJavaBind> getParameterList()
	{
		return m_parameter_list;
	}

	// public operation to set the embedded private field value
	public void setParameterList(List<IJavaBind> p_parameter_list)
	{
		// consistency check (field must be non null!)
		assert(p_parameter_list != null);

		// instantiate the member variable
		m_parameter_list = p_parameter_list;

		// set the parent of each element in the sequence parameter passed
		for (IJavaNode lnode: p_parameter_list) lnode.setParent(this);
	}

	// private member variable (body)
	private IJavaMethodBody m_body = null;

	// public operation to retrieve the embedded private field value
	public IJavaMethodBody getBody()
	{
		return m_body;
	}

	// public operation to set the embedded private field value
	public void setBody(IJavaMethodBody p_body)
	{
		// consistency check (field must be non null!)
		assert(p_body != null);

		// instantiate the member variable
		m_body = p_body;

		// set the parent of the parameter passed
		p_body.setParent(this);
	}

	// default constructor
	public JavaMethodDefinition()
	{
		super();
		m_IsConstructor = null;
		m_access = null;
		m_modifiers = null;
		m_identifier = null;
		m_returntype = null;
		m_parameter_list = null;
		m_body = null;
	}

	// auxiliary constructor
	public JavaMethodDefinition(
		Boolean p_IsConstructor,
		IJavaAccessDefinition p_access,
		IJavaModifier p_modifiers,
		IJavaIdentifier p_identifier,
		IJavaType p_returntype,
		List<IJavaBind> p_parameter_list,
		IJavaMethodBody p_body
	) {
		super();
		setIsConstructor(p_IsConstructor);
		setAccess(p_access);
		setModifiers(p_modifiers);
		setIdentifier(p_identifier);
		setReturntype(p_returntype);
		setParameterList(p_parameter_list);
		setBody(p_body);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitMethodDefinition(this); }

	// the identity function
	public String identify() { return "JavaMethodDefinition"; }
}
