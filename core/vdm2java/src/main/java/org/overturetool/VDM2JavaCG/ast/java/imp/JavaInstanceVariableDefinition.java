// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

public class JavaInstanceVariableDefinition extends JavaDefinition implements IJavaInstanceVariableDefinition
{
	// private member variable (access)
	private IJavaAccessDefinition m_access = null;

	// public operation to retrieve the embedded private field value
	public IJavaAccessDefinition getAccess()
	{
		return m_access;
	}

	// public operation to set the embedded private field value
	public void setAccess(IJavaAccessDefinition p_access)
	{
		// consistency check (field must be non null!)
		assert(p_access != null);

		// instantiate the member variable
		m_access = p_access;

		// set the parent of the parameter passed
		p_access.setParent(this);
	}

	// private member variable (modifiers)
	private IJavaModifier m_modifiers = null;

	// public operation to retrieve the embedded private field value
	public IJavaModifier getModifiers()
	{
		return m_modifiers;
	}

	// public operation to set the embedded private field value
	public void setModifiers(IJavaModifier p_modifiers)
	{
		// consistency check (field must be non null!)
		assert(p_modifiers != null);

		// instantiate the member variable
		m_modifiers = p_modifiers;

		// set the parent of the parameter passed
		p_modifiers.setParent(this);
	}

	// private member variable (type)
	private IJavaVariableType m_type = null;

	// public operation to retrieve the embedded private field value
	public IJavaVariableType getType()
	{
		return m_type;
	}

	// public operation to set the embedded private field value
	public void setType(IJavaVariableType p_type)
	{
		// consistency check (field must be non null!)
		assert(p_type != null);

		// instantiate the member variable
		m_type = p_type;

		// set the parent of the parameter passed
		p_type.setParent(this);
	}

	// private member variable (name)
	private IJavaIdentifier m_name = null;

	// public operation to retrieve the embedded private field value
	public IJavaIdentifier getName()
	{
		return m_name;
	}

	// public operation to set the embedded private field value
	public void setName(IJavaIdentifier p_name)
	{
		// consistency check (field must be non null!)
		assert(p_name != null);

		// instantiate the member variable
		m_name = p_name;

		// set the parent of the parameter passed
		p_name.setParent(this);
	}

	// private member variable (expression)
	private IJavaExpression m_expression = null;

	// public operation to retrieve the embedded private field value
	public IJavaExpression getExpression()
	{
		return m_expression;
	}

	// public operation to set the embedded private field value
	public void setExpression(IJavaExpression p_expression)
	{
		// consistency check (field must be non null!)
		assert(p_expression != null);

		// instantiate the member variable
		m_expression = p_expression;

		// set the parent of the parameter passed
		p_expression.setParent(this);
	}

	// private member variable (initialized)
	private Boolean m_initialized = new Boolean(false);

	// public operation to retrieve the embedded private field value
	public Boolean getInitialized()
	{
		return m_initialized;
	}

	// public operation to set the embedded private field value
	public void setInitialized(Boolean p_initialized)
	{
		// consistency check (field must be non null!)
		assert(p_initialized != null);

		// instantiate the member variable
		m_initialized = p_initialized;
	}

	// default constructor
	public JavaInstanceVariableDefinition()
	{
		super();
		m_access = null;
		m_modifiers = null;
		m_type = null;
		m_name = null;
		m_expression = null;
		m_initialized = null;
	}

	// auxiliary constructor
	public JavaInstanceVariableDefinition(
		IJavaAccessDefinition p_access,
		IJavaModifier p_modifiers,
		IJavaVariableType p_type,
		IJavaIdentifier p_name,
		IJavaExpression p_expression,
		Boolean p_initialized
	) {
		super();
		setAccess(p_access);
		setModifiers(p_modifiers);
		setType(p_type);
		setName(p_name);
		setExpression(p_expression);
		setInitialized(p_initialized);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitInstanceVariableDefinition(this); }

	// the identity function
	public String identify() { return "JavaInstanceVariableDefinition"; }
}
