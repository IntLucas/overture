// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

public class JavaSymbolicLiteralExpression extends JavaExpression implements IJavaSymbolicLiteralExpression
{
	// private member variable (literal)
	private IJavaLiteral m_literal = null;

	// public operation to retrieve the embedded private field value
	public IJavaLiteral getLiteral()
	{
		return m_literal;
	}

	// public operation to set the embedded private field value
	public void setLiteral(IJavaLiteral p_literal)
	{
		// consistency check (field must be non null!)
		assert(p_literal != null);

		// instantiate the member variable
		m_literal = p_literal;

		// set the parent of the parameter passed
		p_literal.setParent(this);
	}

	// default constructor
	public JavaSymbolicLiteralExpression()
	{
		super();
		m_literal = null;
	}

	// auxiliary constructor
	public JavaSymbolicLiteralExpression(
		IJavaLiteral p_literal
	) {
		super();
		setLiteral(p_literal);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitSymbolicLiteralExpression(this); }

	// the identity function
	public String identify() { return "JavaSymbolicLiteralExpression"; }
}
