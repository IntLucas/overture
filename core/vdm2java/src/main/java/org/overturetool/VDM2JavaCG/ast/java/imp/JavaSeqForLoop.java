// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

public class JavaSeqForLoop extends JavaForLoop implements IJavaSeqForLoop
{
	// private member variable (Reverse)
	private Boolean m_Reverse = new Boolean(false);

	// public operation to retrieve the embedded private field value
	public Boolean getReverse()
	{
		return m_Reverse;
	}

	// public operation to set the embedded private field value
	public void setReverse(Boolean p_Reverse)
	{
		// consistency check (field must be non null!)
		assert(p_Reverse != null);

		// instantiate the member variable
		m_Reverse = p_Reverse;
	}

	// private member variable (VarName)
	private String m_VarName = new String();

	// public operation to retrieve the embedded private field value
	public String getVarName()
	{
		return m_VarName;
	}

	// public operation to set the embedded private field value
	public void setVarName(String p_VarName)
	{
		// consistency check (field must be non null!)
		assert(p_VarName != null);

		// instantiate the member variable
		m_VarName = p_VarName;
	}

	// private member variable (Seq)
	private IJavaExpression m_Seq = null;

	// public operation to retrieve the embedded private field value
	public IJavaExpression getSeq()
	{
		return m_Seq;
	}

	// public operation to set the embedded private field value
	public void setSeq(IJavaExpression p_Seq)
	{
		// consistency check (field must be non null!)
		assert(p_Seq != null);

		// instantiate the member variable
		m_Seq = p_Seq;

		// set the parent of the parameter passed
		p_Seq.setParent(this);
	}

	// private member variable (statement)
	private IJavaStatement m_statement = null;

	// public operation to retrieve the embedded private field value
	public IJavaStatement getStatement()
	{
		return m_statement;
	}

	// public operation to set the embedded private field value
	public void setStatement(IJavaStatement p_statement)
	{
		// consistency check (field must be non null!)
		assert(p_statement != null);

		// instantiate the member variable
		m_statement = p_statement;

		// set the parent of the parameter passed
		p_statement.setParent(this);
	}

	// default constructor
	public JavaSeqForLoop()
	{
		super();
		m_Reverse = null;
		m_VarName = null;
		m_Seq = null;
		m_statement = null;
	}

	// auxiliary constructor
	public JavaSeqForLoop(
		Boolean p_Reverse,
		String p_VarName,
		IJavaExpression p_Seq,
		IJavaStatement p_statement
	) {
		super();
		setReverse(p_Reverse);
		setVarName(p_VarName);
		setSeq(p_Seq);
		setStatement(p_statement);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitSeqForLoop(this); }

	// the identity function
	public String identify() { return "JavaSeqForLoop"; }
}
