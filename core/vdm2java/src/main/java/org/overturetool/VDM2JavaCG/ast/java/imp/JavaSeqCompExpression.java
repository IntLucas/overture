// this file is automatically generated by treegen. do not modify!

package org.overturetool.VDM2JavaCG.ast.java.imp;

// import the abstract tree interfaces
import org.overturetool.VDM2JavaCG.ast.java.itf.*;

// import java collection types
import java.util.*;

public class JavaSeqCompExpression extends JavaExpression implements IJavaSeqCompExpression
{
	// private member variable (bindlist)
	private List<IJavaBind> m_bindlist = new Vector<IJavaBind>();

	// public operation to retrieve the embedded private field value
	public List<IJavaBind> getBindlist()
	{
		return m_bindlist;
	}

	// public operation to set the embedded private field value
	public void setBindlist(List<IJavaBind> p_bindlist)
	{
		// consistency check (field must be non null!)
		assert(p_bindlist != null);

		// instantiate the member variable
		m_bindlist = p_bindlist;

		// set the parent of each element in the sequence parameter passed
		for (IJavaNode lnode: p_bindlist) lnode.setParent(this);
	}

	// private member variable (predicate)
	private IJavaExpression m_predicate = null;

	// public operation to check optional type status
	public boolean hasPredicate() { return (m_predicate != null); };

	// public operation to retrieve the embedded private field value
	public IJavaExpression getPredicate()
	{
		return m_predicate;
	}

	// public operation to set the embedded private field value
	public void setPredicate(IJavaExpression p_predicate)
	{
		// instantiate the member variable
		m_predicate = p_predicate;

		// set the parent of the parameter passed
		p_predicate.setParent(this);
	}

	// default constructor
	public JavaSeqCompExpression()
	{
		super();
		m_bindlist = null;
		m_predicate = null;
	}

	// auxiliary constructor
	public JavaSeqCompExpression(
		List<IJavaBind> p_bindlist,
		IJavaExpression p_predicate
	) {
		super();
		setBindlist(p_bindlist);
		setPredicate(p_predicate);
	}

	// visitor support
	public void accept(IJavaVisitor pVisitor) { pVisitor.visitSeqCompExpression(this); }

	// the identity function
	public String identify() { return "JavaSeqCompExpression"; }
}
