\begin{vdm_al}
class IOmlBUSdecl
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getName: () ==> seq of char
  getName() == is subclass responsibility;

operations
  public getTopo: () ==> set of nat
  getTopo() == is subclass responsibility;

end IOmlBUSdecl
\end{vdm_al}

\begin{vdm_al}
class IOmlCPUdecl
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getExpl: () ==> bool
  getExpl() == is subclass responsibility;

operations
  public getSys: () ==> seq of char
  getSys() == is subclass responsibility;

operations
  public getName: () ==> seq of char
  getName() == is subclass responsibility;

end IOmlCPUdecl
\end{vdm_al}

\begin{vdm_al}
class IOmlDelayedThreadSwapIn
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

  public hasClnm: () ==> bool
  hasClnm () == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getDelay: () ==> nat
  getDelay() == is subclass responsibility;

operations
  public getOverhead: () ==> nat
  getOverhead() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlDelayedThreadSwapIn
\end{vdm_al}

\begin{vdm_al}
class IOmlDeployObj
 is subclass of IOmlTraceEvent

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlDeployObj
\end{vdm_al}

\begin{vdm_al}
class IOmlDocument

operations
  public getFilename: () ==> seq of char
  getFilename () == is subclass responsibility;

  public hasTraceFile: () ==> bool
  hasTraceFile () == is subclass responsibility;

  public getTraceFile: () ==> IOmlTraceFile
  getTraceFile () == is subclass responsibility;

  public getLexems: () ==> seq of IOmlLexem
  getLexems () == is subclass responsibility;

  public toVdmSlValue: () ==> seq of char
  toVdmSlValue () == is subclass responsibility;

  public toVdmPpValue: () ==> seq of char
  toVdmPpValue () == is subclass responsibility;

  public accept: IOmlVisitor ==> ()
  accept (-) == is subclass responsibility

end IOmlDocument
\end{vdm_al}
\begin{vdm_al}
class IOmlInstVarChange
 is subclass of IOmlTraceEvent

operations
  public getInstnm: () ==> seq of char
  getInstnm() == is subclass responsibility;

operations
  public getVal: () ==> seq of char
  getVal() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlInstVarChange
\end{vdm_al}

\begin{vdm_al}
class IOmlLexem

operations
  public getLine: () ==> nat
  getLine () == is subclass responsibility;

  public getColumn: () ==> nat
  getColumn () == is subclass responsibility;

  public getLexval: () ==> nat
  getLexval () == is subclass responsibility;

  public getText: () ==> seq of char
  getText () == is subclass responsibility;

  public getIndex: () ==> nat
  getIndex () == is subclass responsibility;

  public getType: () ==> nat
  getType () == is subclass responsibility;

  public isReservedWord: () ==> bool
  isReservedWord () == is subclass responsibility;

  public isIdentifier: () ==> bool
  isIdentifier () == is subclass responsibility;

  public isLineComment: () ==> bool
  isLineComment () == is subclass responsibility;

  public isBlockComment: () ==> bool
  isBlockComment () == is subclass responsibility;

  public accept: IOmlVisitor ==> ()
  accept (-) == is subclass responsibility;

end IOmlLexem
\end{vdm_al}
\begin{vdm_al}
class IOmlMessageActivate
 is subclass of IOmlTraceEvent

operations
  public getMsgid: () ==> nat
  getMsgid() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlMessageActivate
\end{vdm_al}

\begin{vdm_al}
class IOmlMessageCompleted
 is subclass of IOmlTraceEvent

operations
  public getMsgid: () ==> nat
  getMsgid() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlMessageCompleted
\end{vdm_al}

\begin{vdm_al}
class IOmlMessageRequest
 is subclass of IOmlTraceEvent

operations
  public getBusid: () ==> nat
  getBusid() == is subclass responsibility;

operations
  public getFromcpu: () ==> nat
  getFromcpu() == is subclass responsibility;

operations
  public getTocpu: () ==> nat
  getTocpu() == is subclass responsibility;

operations
  public getMsgid: () ==> nat
  getMsgid() == is subclass responsibility;

operations
  public getCallthr: () ==> nat
  getCallthr() == is subclass responsibility;

operations
  public getOpname: () ==> seq of char
  getOpname() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getSize: () ==> nat
  getSize() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlMessageRequest
\end{vdm_al}

\begin{vdm_al}
class IOmlOpActivate
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getOpname: () ==> seq of char
  getOpname() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getAsynchronous: () ==> bool
  getAsynchronous() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlOpActivate
\end{vdm_al}

\begin{vdm_al}
class IOmlOpCompleted
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getOpname: () ==> seq of char
  getOpname() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getAsynchronous: () ==> bool
  getAsynchronous() == is subclass responsibility;

operations
  public getRes: () ==> seq of char
  getRes() == is subclass responsibility;

  public hasRes: () ==> bool
  hasRes () == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlOpCompleted
\end{vdm_al}

\begin{vdm_al}
class IOmlOpRequest
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getOpname: () ==> seq of char
  getOpname() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getAsynchronous: () ==> bool
  getAsynchronous() == is subclass responsibility;

operations
  public getArgs: () ==> seq of char
  getArgs() == is subclass responsibility;

  public hasArgs: () ==> bool
  hasArgs () == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlOpRequest
\end{vdm_al}

\begin{vdm_al}
class IOmlReplyRequest
 is subclass of IOmlTraceEvent

operations
  public getBusid: () ==> nat
  getBusid() == is subclass responsibility;

operations
  public getFromcpu: () ==> nat
  getFromcpu() == is subclass responsibility;

operations
  public getTocpu: () ==> nat
  getTocpu() == is subclass responsibility;

operations
  public getMsgid: () ==> nat
  getMsgid() == is subclass responsibility;

operations
  public getOrigmsgid: () ==> nat
  getOrigmsgid() == is subclass responsibility;

operations
  public getCallthr: () ==> nat
  getCallthr() == is subclass responsibility;

operations
  public getCalleethr: () ==> nat
  getCalleethr() == is subclass responsibility;

operations
  public getSize: () ==> nat
  getSize() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlReplyRequest
\end{vdm_al}

\begin{vdm_al}
class IOmlThreadCreate
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getPeriod: () ==> bool
  getPeriod() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

  public hasClnm: () ==> bool
  hasClnm () == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlThreadCreate
\end{vdm_al}

\begin{vdm_al}
class IOmlThreadKill
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlThreadKill
\end{vdm_al}

\begin{vdm_al}
class IOmlThreadSwapIn
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

  public hasClnm: () ==> bool
  hasClnm () == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getOverhead: () ==> nat
  getOverhead() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlThreadSwapIn
\end{vdm_al}

\begin{vdm_al}
class IOmlThreadSwapOut
 is subclass of IOmlTraceEvent

operations
  public getId: () ==> nat
  getId() == is subclass responsibility;

operations
  public getObjref: () ==> nat
  getObjref() == is subclass responsibility;

  public hasObjref: () ==> bool
  hasObjref () == is subclass responsibility;

operations
  public getClnm: () ==> seq of char
  getClnm() == is subclass responsibility;

  public hasClnm: () ==> bool
  hasClnm () == is subclass responsibility;

operations
  public getCpunm: () ==> nat
  getCpunm() == is subclass responsibility;

operations
  public getOverhead: () ==> nat
  getOverhead() == is subclass responsibility;

operations
  public getObstime: () ==> nat
  getObstime() == is subclass responsibility;

end IOmlThreadSwapOut
\end{vdm_al}

\begin{vdm_al}
class IOmlTraceEvent
 is subclass of IOmlNode

end IOmlTraceEvent
\end{vdm_al}

\begin{vdm_al}
class IOmlTraceFile
 is subclass of IOmlNode

operations
  public getTrace: () ==> seq of IOmlTraceEvent
  getTrace() == is subclass responsibility;

end IOmlTraceFile
\end{vdm_al}

\begin{vdm_al}
class IOmlVisitor
operations
  public visitDocument: IOmlDocument ==> ()
  visitDocument (-) == is subclass responsibility;

  public visitLexem: IOmlLexem ==> ()
  visitLexem (-) == is subclass responsibility;

  public visitDeployObj: IOmlDeployObj ==> ()
  visitDeployObj (-) == is subclass responsibility;

  public visitInstVarChange: IOmlInstVarChange ==> ()
  visitInstVarChange (-) == is subclass responsibility;

  public visitThreadSwapOut: IOmlThreadSwapOut ==> ()
  visitThreadSwapOut (-) == is subclass responsibility;

  public visitThreadSwapIn: IOmlThreadSwapIn ==> ()
  visitThreadSwapIn (-) == is subclass responsibility;

  public visitDelayedThreadSwapIn: IOmlDelayedThreadSwapIn ==> ()
  visitDelayedThreadSwapIn (-) == is subclass responsibility;

  public visitReplyRequest: IOmlReplyRequest ==> ()
  visitReplyRequest (-) == is subclass responsibility;

  public visitOpRequest: IOmlOpRequest ==> ()
  visitOpRequest (-) == is subclass responsibility;

  public visitMessageActivate: IOmlMessageActivate ==> ()
  visitMessageActivate (-) == is subclass responsibility;

  public visitCPUdecl: IOmlCPUdecl ==> ()
  visitCPUdecl (-) == is subclass responsibility;

  public visitOpCompleted: IOmlOpCompleted ==> ()
  visitOpCompleted (-) == is subclass responsibility;

  public visitTraceFile: IOmlTraceFile ==> ()
  visitTraceFile (-) == is subclass responsibility;

  public visitThreadCreate: IOmlThreadCreate ==> ()
  visitThreadCreate (-) == is subclass responsibility;

  public visitMessageCompleted: IOmlMessageCompleted ==> ()
  visitMessageCompleted (-) == is subclass responsibility;

  public visitMessageRequest: IOmlMessageRequest ==> ()
  visitMessageRequest (-) == is subclass responsibility;

  public visitBUSdecl: IOmlBUSdecl ==> ()
  visitBUSdecl (-) == is subclass responsibility;

  public visitThreadKill: IOmlThreadKill ==> ()
  visitThreadKill (-) == is subclass responsibility;

  public visitOpActivate: IOmlOpActivate ==> ()
  visitOpActivate (-) == is subclass responsibility;

  public visitContextInfo: IOmlContextInfo ==> ()
  visitContextInfo (-) == is subclass responsibility;

  public visitNode: IOmlNode ==> ()
  visitNode (-) == is subclass responsibility;

  public visitTraceEvent: IOmlTraceEvent ==> ()
  visitTraceEvent (-) == is subclass responsibility;

end IOmlVisitor
\end{vdm_al}

