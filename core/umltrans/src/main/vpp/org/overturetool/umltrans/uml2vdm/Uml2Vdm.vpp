



\begin{vdm_al}
-----------------------------------------------
-- File: Uml2Vdm
-- Created: 09 - 2008
-- Authour: Kenneth Lausdahl 
--          and 
--          Hans Kristian Lintrup
-- Description: Created as a part of MSc UMLtrans
--   Contains the abstract transformation from 
--   UML to VDM
------------------------------------------------
class Uml2Vdm
types 
 public String = seq of char;

instance variables
 classInstanceVars : map String to seq of IOmlInstanceVariable  :={|->};

operations
------------------------------------------------
------------------------------------------------
--                 Mapper
--
--              UML TO VDM++ 
------------------------------------------------
------------------------------------------------
-- Convert UML model to OmlDocument
public init : IUmlModel ==> IOmlDocument
init(model) ==
  let 
      associations = { a | a in set model.getDefinitions() 
                         & isofclass(IUmlAssociation,a)},
      constraints  = { a | a in set model.getDefinitions() 
                         & isofclass(IUmlConstraint,a)}
  in 
  (
    extractInstanceVarsFromAssociations(associations,constraints);
    return new OmlDocument(model.getName(),
      new OmlSpecifications(filterIlligalClassNames(build_classes(model))),[]);
  );
  
private filterIlligalClassNames : seq of IOmlClass ==> seq of IOmlClass
filterIlligalClassNames(classes) == 
  return [classes(i) 
         | i in set inds classes 
         & '$' not in set elems classes(i).getIdentifier() 
         and ':' not in set elems classes(i).getIdentifier()]; 

-- Build Oml Classes from the Uml model.
--  This needs the constraints and associations to be 
--   pre parsed before this is called
public build_classes : IUmlModel ==> seq of IOmlClass
build_classes(model) ==
  let traceDefMap : map String to IOmlTraceDefinitions = build_traces(model),
      classes: set of IUmlClass = {c | c in set model.getDefinitions() 
                                     & isofclass(IUmlClass,c)}
      
  in 
    return Util`SetToSeq[IOmlClass]( {let cName = c.getName(),traceDef = 
                                        if cName in set dom traceDefMap 
                                        then traceDefMap(cName) 
                                        else nil 
                                      in build_class(c,traceDef)| c in set classes}); 

-- Build Oml class from Uml class
public build_class : IUmlClass * [IOmlTraceDefinitions] ==> IOmlClass
build_class(c,traceDef) ==
  let name : seq of char = c.getName(),
      supers = c.getSuperClass(),
      inheritanceClause : [OmlInheritanceClause] = 
        if len supers > 0 
        then new OmlInheritanceClause( [ supers(i).getName() |i in set inds supers]) 
        else nil,
      body : set of IOmlDefinitionBlock = dunion { build_defs(d) | d in set c.getClassBody() },
      bodyWithTrace : set of IOmlDefinitionBlock = if traceDef <> nil then body union {traceDef} else body, 
      systemSpec : bool = false,
      instVars : seq of IOmlInstanceVariableShape =  getAssociationInstanceVars(name),
      bodyLst = if len instVars > 0 
                then bodyWithTrace union {new OmlInstanceVariableDefinitions(instVars)} 
                else bodyWithTrace
  in
  return new OmlClass(name,
                      [],
                      inheritanceClause,
                      Util`SetToSeq[IOmlDefinitionBlock](bodyLst),
                      systemSpec);
  
-- Build definitions from Uml definition block
--  Here both values and instance variables are extracted
public build_defs : IUmlDefinitionBlock ==> set of IOmlDefinitionBlock
build_defs(db) ==
  cases true:
   (isofclass(IUmlOwnedProperties,db)) -> 
     let tmp : IUmlOwnedProperties = db 
     in 
       return {build_defValues(tmp)} union 
              {build_defInstanceVariables(tmp)},
   (isofclass(IUmlOwnedOperations,db)) -> 
     let tmp : IUmlOwnedOperations = db 
     in 
       return build_defOperations(tmp), 
             
              
              
   others -> return {}
  end;
  
-----------------------------------------------------
-- Values 
-----------------------------------------------------
-- Build value definitions from Uml properties
public build_defValues : IUmlOwnedProperties ==> IOmlDefinitionBlock
build_defValues(block) ==
  let props = block.getPropetityList(),
      valueProps = {p | p in set props 
                      & p.hasIsReadOnly() and p.getIsReadOnly() = true},
      val = {build_value(v) | v in set valueProps}
  in
    return new OmlValueDefinitions(Util`SetToSeq[IOmlValueDefinition](val));
    
-- Build value definition from a Uml property
public build_value : IUmlProperty ==> IOmlValueDefinition
build_value(prop) ==
  let asyncAccess = false,
      statAccess  = prop.getIsStatic(),
      scope       = ConvertVisibility(prop.getVisibility()),
      access      = new OmlAccessDefinition(asyncAccess,statAccess, scope),
      pattern     = new OmlPatternIdentifier(prop.getName()),
      multiplicity= if prop.hasMultiplicity() then prop.getMultiplicity() else nil,
      type        = ConvertType(prop.getType(),multiplicity),
      expression : IOmlExpression =  
        getDefaultExpression(prop.getDefault(),type),
      valueShape  = new OmlValueShape(pattern, type, expression)
   in
     return new OmlValueDefinition(access, valueShape)
pre prop.hasDefault();

-----------------------------------------------------
-- Instance variables
-----------------------------------------------------
-- Build instance variable definition form Uml property
public build_defInstanceVariables : IUmlOwnedProperties ==> IOmlDefinitionBlock
build_defInstanceVariables(block) ==
  let props = block.getPropetityList(),
      valueProps = {p | p in set props 
                      & p.hasIsReadOnly() and 
                        p.getIsReadOnly() = false},
      val = {build_instanceVariable(v) | v in set valueProps},
      seqVal = Util`SetToSeq[IOmlInstanceVariable](val)
  in
    return new OmlInstanceVariableDefinitions(seqVal);
    
-- Create instance variable from Uml property
public build_instanceVariable : IUmlProperty ==> IOmlInstanceVariable
build_instanceVariable(prop) ==
  let asyncAccess = false,
      statAccess  = prop.getIsStatic(),
      scope       = ConvertVisibility(prop.getVisibility()),
      access      = new OmlAccessDefinition(asyncAccess,statAccess, scope),
      multiplicity= if prop.hasMultiplicity() then prop.getMultiplicity() else nil,
      type        = ConvertType(prop.getType(),multiplicity),
      expression : [IOmlExpression] =  
        if prop.hasDefault() 
        then getDefaultExpression(prop.getDefault(),type) 
        else nil,
      assignmentDef = 
        new OmlAssignmentDefinition(prop.getName(),type,expression)
   in
     return new OmlInstanceVariable(access, assignmentDef);
     
-----------------------------------------------------
-- Operation
-----------------------------------------------------
-- Build operation definition form Uml property
public build_defOperations : IUmlOwnedOperations ==> set of IOmlDefinitionBlock
build_defOperations(block) ==
  let props = block.getOperationList(),
      valOps = {p | p in set props },
      valOperations = {build_Operation(v) | v in set valOps & not v.getIsQuery()},
      valFunctions = {build_Function(v) | v in set valOps & v.getIsQuery()},
      seqValOperations = Util`SetToSeq[IOmlOperationDefinition](valOperations),
      seqValFunctions = Util`SetToSeq[IOmlFunctionDefinition](valFunctions),
      retOps = if len seqValOperations > 0 
               then {new OmlOperationDefinitions(seqValOperations)}
               else {},
      retFunc= if len seqValFunctions > 0
               then {new OmlFunctionDefinitions(seqValFunctions)}
               else {}
  in
    return 
      retOps union retFunc;
    
-- Create operation from Uml property
public build_Operation : IUmlOperation ==> IOmlOperationDefinition
build_Operation(prop) ==
  let asyncAccess = false,
      statAccess  = prop.getIsStatic(),
      scope       = ConvertVisibility(prop.getVisibility()),
      access      = new OmlAccessDefinition(asyncAccess,statAccess, scope),
      mk_(parms,
          type)   = buildParameters(if prop.hasOwnedParameters() then prop.getOwnedParameters().getParameterList() else [],
                                    prop.getIsQuery()), --new OmlOperationType(new OmlEmptyType(),new OmlEmptyType()),--if prop.hasType() then ConvertType(prop.getType()) else ,
      name : 
       seq of char= prop.getName(),
      body        = new OmlOperationBody(new OmlSkipStatement(),true,false),
      trailer     = new OmlOperationTrailer(nil,nil,nil,nil),
      explicitOp  = new OmlExplicitOperation(name,type,parms,body,trailer)
   in
     return new OmlOperationDefinition(access, explicitOp);       
  
-- Convert a sequence of IUmlParamter to a seq of IOmlPattern and the coresponding
-- IOmlType for a function or operation   
private buildParameters : seq of IUmlParameter * bool ==> seq of IOmlPattern * IOmlType
buildParameters(parms,buildFunction) ==
  if parms = [] 
  then if buildFunction
       then return mk_([],new OmlPartialFunctionType(new OmlEmptyType(),
                                                     new OmlEmptyType()))
       else return mk_([],new OmlOperationType(new OmlEmptyType(),
                                               new OmlEmptyType()))
  else
    let type     = buildParameterType(parms,buildFunction),
        patterns = [ new OmlPatternIdentifier(parms(i).getName()) 
                   | i in set inds parms
                   & parms(i).getDirection().getValue() <> UmlParameterDirectionKindQuotes`IQRETURN]
in 
  return mk_(flip(patterns),type);

-- Flip pattern order, could be changed to function poly
public flip : seq of IOmlPatternIdentifier ==> seq of IOmlPatternIdentifier
flip(list) == 
  if len list = 1
  then return [hd list]
  else if len list = 0
  then return []
  else return flip(tl list) ^ [hd list];

-- Convert IUmlParameters for a function ot operation to a IOmlType
-- First the return type is converted and then the rest of parameters
private buildParameterType : seq of IUmlParameter * bool ==> IOmlType
buildParameterType(tps,buildFunction) ==
let mult      = new UmlMultiplicityElement(false,false,1,1),
    retType   = let tmp in set { t 
                             | t in set elems tps 
                             & t.getDirection().getValue() = UmlParameterDirectionKindQuotes`IQRETURN }
                in tmp,
    parTypes  = [ tps(i).getType() 
                | i in set inds tps
                & tps(i).getDirection().getValue() <> UmlParameterDirectionKindQuotes`IQRETURN],
    type : IOmlType = if not buildFunction 
                       then new OmlOperationType(ConvertTypes(parTypes),
                                                 ConvertType(retType.getType(),mult))
                       else new OmlPartialFunctionType(ConvertTypes(parTypes),
                                                 ConvertType(retType.getType(),mult))
in return type;

-- Create a product type containing all types in the parameter list                                           
ConvertTypes : seq of IUmlType ==> IOmlType
ConvertTypes(tps) ==
  let mult    = new UmlMultiplicityElement(false,false,1,1)
  in
    if len tps > 1 
    then 
      return new OmlProductType(ConvertTypes(tl tps),
                                ConvertType(hd tps,mult))
    else if len tps = 1 
         then 
           return ConvertType(hd tps,mult)
         else 
           return new OmlEmptyType();
           
------------------------------------------------------
--  Functions
------------------------------------------------------
-- Create operation from Uml property
public build_Function : IUmlOperation ==> IOmlFunctionDefinition
build_Function(prop) ==
  let asyncAccess = false,
      statAccess  = prop.getIsStatic(),
      scope       = ConvertVisibility(prop.getVisibility()),
      access      = new OmlAccessDefinition(asyncAccess,statAccess, scope),
      mk_(parms,
          type)   = buildParameters(if prop.hasOwnedParameters() then prop.getOwnedParameters().getParameterList() else [],
                                    prop.getIsQuery()), --new OmlOperationType(new OmlEmptyType(),new OmlEmptyType()),--if prop.hasType() then ConvertType(prop.getType()) else ,
      name : 
       seq of char= prop.getName(),
      body        = new OmlFunctionBody(nil,true,false),
      trailer     = new OmlFunctionTrailer(nil,nil,0,0),
      explicitOp  = new OmlExplicitFunction(name,[],type,[new OmlParameter(parms)],body,trailer)
   in
     return new OmlFunctionDefinition(access, explicitOp); 
    

--  let
--    access       = op.getAccess(),
--    scope        = access.getScope(),
--    shape : IOmlExplicitFunction = op.getShape(),
--    isStatic     = access.getStaticAccess(),
--    name         = shape.getIdentifier(),
--    visibility   = convertScopeToVisibility(scope),
--    multiplicity = new UmlMultiplicityElement(false, false, 1, 1),
--    type         = Vdm2UmlType`convertType(shape.getType()),
--    pnames :  [IOmlParameter]       = if len shape.getParameterList() = 0 
--                                      then nil 
--                                      else let p in set elems shape.getParameterList() 
--                                           in p,
--    pars         = buildParameters(if pnames<>nil 
--                                   then pnames.getPatternList() 
--                                   else [],shape.getType())  
------------------------------------------------------
--  Associations
------------------------------------------------------
-- extract instance variables form associations
public extractInstanceVarsFromAssociations : set of IUmlAssociation * set of IUmlConstraint ==> ()
extractInstanceVarsFromAssociations(associations,constraints) ==
  let normalBiAss = --Binary associations (Normal instance, values)
        {a | a in set associations 
           & not hasXorConstraint(constraints,a.getId()) and 
           (card a.getOwnedEnds() + card a.getOwnedNavigableEnds()) = 2},
      product = -- N-ary association to single product type
        {a | a in set associations 
           & not hasXorConstraint(constraints,a.getId()) and 
           (card a.getOwnedEnds() + card a.getOwnedNavigableEnds()) > 2},
      xor =  -- Xor constraint association to union type
        {a | a in set associations 
           & hasXorConstraint(constraints,a.getId()) and 
           (card a.getOwnedEnds() + card a.getOwnedNavigableEnds()) >= 2}
  in
  (
     for all a in set normalBiAss do
       extractBinaryAssociation(a.getOwnedEnds() 
                                union 
                                a.getOwnedNavigableEnds());
     
      let xorEndss ={(dunion
            {a.getOwnedEnds() union 
             a.getOwnedNavigableEnds() | a in set xor 
                                       & exists id in set c.getConstraintElements() 
                                       & id= a.getId() } ) 
                                       | c in set constraints}  
      in 
        for all a in set xorEndss do
          extractUnionAssociation(a);
                                
     for all a in set product do
       extractProductAssociation(a.getOwnedEnds() 
                                 union 
                                 a.getOwnedNavigableEnds());
  );

-- Test of an association has a constraint
public hasXorConstraint : set of IUmlConstraint * String ==> bool
hasXorConstraint(constraints,associationId) ==
  return exists c in set constraints 
    & if isofclass(IUmlLiteralString,c.getSpecification()) 
      then let spec : IUmlLiteralString = c.getSpecification() in
           spec.getValue() = "xor" else false and 
      (exists ce in set c.getConstraintElements() 
         & ce = associationId);

-- extract property from binary association
public extractBinaryAssociation : set of IUmlProperty ==> ()
extractBinaryAssociation(props) ==
(
  let propSeq = Util`SetToSeq[IUmlProperty](props),
      pOwnerEnd = hd [propSeq(i) | i in set inds propSeq 
                                 & len propSeq(i).getName() =0],
      pTypeEnd  = hd [propSeq(i) | i in set inds propSeq 
                                & len propSeq(i).getName() > 0],
      clName    = let t : IUmlClassNameType = pOwnerEnd.getType() in
        t.getName(),
      multiplicity= if pTypeEnd.hasMultiplicity() then pTypeEnd.getMultiplicity() else nil,
      qualifiers = {p.getQualifier() | p in set props & p.hasQualifier()},
       
      tmpType        = ConvertType(pTypeEnd.getType(),multiplicity),
      type       = if card qualifiers = 0 
                   then tmpType
                   else let a in set qualifiers in new OmlGeneralMapType(ConvertType(a,nil),tmpType)
  in
    AddInstanceVarToClass(clName,
                          CreateInstanceVar(pTypeEnd,
                                            type)); 
       
)
pre card props > 0;

-- extract union type from association
public extractUnionAssociation :  set of IUmlProperty ==> ()
extractUnionAssociation(props) ==
(
  let ownerEndSet    = {p | p in set props & len p.getName() =0},
      propSeq        = Util`SetToSeq[IUmlProperty](props),
      pOwnerEnd      = hd Util`SetToSeq[IUmlProperty](ownerEndSet),
      pTypeEnd       =  [propSeq(i) | i in set inds propSeq 
                              & len propSeq(i).getName() > 0],
      clName         = let t : IUmlClassNameType =pOwnerEnd.getType() 
        in t.getName(), endTypes : seq of IOmlType = 
          Util`SetToSeq[IOmlType]({ConvertType(p.getType(), if p.hasMultiplicity() then p.getMultiplicity() else nil) 
                                   | p in set elems pTypeEnd}),
      lhs : IOmlType = hd endTypes,
      rhs : IOmlType = hd Util`SetToSeq[IOmlType]( (elems endTypes) \ {lhs}), 
      type = new OmlUnionType(lhs,rhs) --need to be recusive to make UnionType(lhs,UnionType(lhs1,...))
  in
    AddInstanceVarToClass(clName,CreateInstanceVar(hd pTypeEnd,type));
 
)
pre card props > 0;
-- extract product type from association
public extractProductAssociation : set of IUmlProperty ==> ()
extractProductAssociation(props) ==
(
  let ownerEndSet   = {p | p in set props & len p.getName() =0},
      propSeq       = Util`SetToSeq[IUmlProperty](props),
      pOwnerEnd     = hd Util`SetToSeq[IUmlProperty](ownerEndSet),
      pTypeEnd      =  [propSeq(i) | i in set inds propSeq 
                              & len propSeq(i).getName() > 0],
      clName        = let t : IUmlClassNameType = pOwnerEnd.getType() 
                      in t.getName(),
      endTypes : seq of IUmlType = Util`SetToSeq[IUmlType]({p.getType() 
                                           | p in set elems pTypeEnd}),
      type : IOmlType = CreateProductType(endTypes)
  in
    AddInstanceVarToClass(clName,CreateInstanceVar(hd pTypeEnd,type));
  
)
pre card props > 0;
functions
-- Create product type from Uml type
private CreateProductType : seq of IUmlType -> IOmlType
CreateProductType(tps) ==
  let first = hd tps,
      rest  = tl tps,
      front = ConvertType(first,nil)--FIXME support of set,seq etc
  in
    if len tps = 1 then 
       front
    else
       new OmlProductType(front, CreateProductType(rest));
operations
-- Create instance variable form Uml property and Oml type
public CreateInstanceVar : IUmlProperty * IOmlType ==> IOmlInstanceVariable
CreateInstanceVar(prop,type) ==
  let --type = ConvertType(prop.getType()),
      asyncAccess  = false,
      statAccess   = prop.getIsStatic(),
      scope        = ConvertVisibility(prop.getVisibility()),
      access       = new OmlAccessDefinition(asyncAccess,statAccess, scope), 
      multiplicity= if prop.hasMultiplicity() then prop.getMultiplicity() else nil,
      type1        = ConvertType(prop.getType(),multiplicity),
      expression : [IOmlExpression] =  
        if prop.hasDefault() 
        then getDefaultExpression(prop.getDefault(),type1) 
        else nil,
      assignmentDef = new OmlAssignmentDefinition(prop.getName(),type,expression)
  in
    return new OmlInstanceVariable(access, assignmentDef);

-- Add instance variable to the owning class
private AddInstanceVarToClass : String * IOmlInstanceVariable ==> ()
AddInstanceVarToClass(clName,instanceVar) ==
  let existingSet = getAssociationInstanceVars(clName),
      addedSet = if len existingSet > 0 then existingSet ^ [instanceVar] else [instanceVar]
  in
    classInstanceVars := classInstanceVars ++ { clName |-> addedSet};

-- Get instance variabled for a specific class extracted from associations
public getAssociationInstanceVars : String ==> seq of IOmlInstanceVariableShape 
getAssociationInstanceVars(clName) == 
  if clName in set dom classInstanceVars then 
    return classInstanceVars(clName)
  else
    return []; 
-- Get default expression from Uml default value and type 
public getDefaultExpression : [IUmlValueSpecification] * IOmlType ==> [IOmlExpression]
getDefaultExpression(defaultValue,t) ==
 if defaultValue = nil then 
   return nil
 else
   let val = if (isofclass(IUmlLiteralString,defaultValue)) 
             then let ls : IUmlLiteralString = defaultValue in ls.getValue()
             else let li : IUmlLiteralInteger = defaultValue in li.getValue()
             
     --(isofclass(IUmlLiteralInteger,defaultValue)) ->
     in
    cases true:
      (isofclass(IOmlTypeName,t)) -> 
      let tmp : String = val in
        return new OmlNewExpression(new OmlName(nil,tmp),[],[]),
      (isofclass(IOmlIntType,t))   -> 
      let tmp : nat = val in
        return new OmlSymbolicLiteralExpression(new OmlNumericLiteral(tmp)),
      (isofclass(IOmlCharType,t))    -> 
      let tmp : String = val in
        return new OmlSymbolicLiteralExpression(new OmlTextLiteral(tmp)),
      (isofclass(IOmlSeq0Type,t))    -> 
        return getDefaultExpression(defaultValue,let tmp : IOmlSeq0Type = t in tmp.getType()),
     -- (isofclass(IUmlSetValueType,t))    -> 
     --   return new OmlSymbolicLiteralExpression(new OmlTextLiteral(defaultValue)),
      others -> return nil
    end;
 
------------------------------------------------------
--  Convert operations
------------------------------------------------------   
-- Convert visibility to scope 
public ConvertVisibility : IUmlVisibilityKind ==> IOmlScope
  ConvertVisibility(visibility) ==
  let val : nat =visibility.getValue() in
  cases val: --sc.getValue():
    (UmlVisibilityKindQuotes`IQPUBLIC) 	    	-> 
      return new OmlScope(OmlScopeQuotes`IQPUBLIC),--<DEFAULT>
    --(OmlScopeQuotes`IQPRIVATE),
    (UmlVisibilityKindQuotes`IQPRIVATE)  		-> 
      return new OmlScope(OmlScopeQuotes`IQDEFAULT),--<PRIVATE>
    (UmlVisibilityKindQuotes`IQPROTECTED) 		-> 
      return new OmlScope(OmlScopeQuotes`IQPROTECTED),--<PROTECTED>
    others 	                            		-> error --return new UmlVisibilityKind(UmlVisibilityKindQuotes`IQPRIVATE)
  end;
  
-- Convert type and multiplicity to Omltype  
 public ConvertType : IUmlType * [IUmlMultiplicityElement] ==> IOmlType 
 ConvertType(t,mul) == 
   cases true:
     (isofclass(IUmlClassNameType,t)) 	-> 
       return ApplyMultiplicity( new OmlTypeName(let tmp : IUmlClassNameType = t 
                              in new OmlName(nil,tmp.getName()))
                              ,mul),
     (isofclass(IUmlCharType,t)) 		-> return ApplyMultiplicity(new OmlCharType(),mul),
     (isofclass(IUmlStringType,t)) 		-> return new OmlSeq0Type(new OmlCharType()),
     (isofclass(IUmlIntegerType,t)) 	-> return ApplyMultiplicity(new OmlIntType(),mul),
     (isofclass(IUmlBoolType,t)) 		-> return ApplyMultiplicity(new OmlBoolType(),mul),
     (isofclass(IUmlUnlimitedNatural,t))-> return ApplyMultiplicity(new OmlRealType(),mul),
     
--     (isofclass(IUmlSetValueType,t)) 	-> return new OmlSetType(new OmlCharType()),
--     (isofclass(IUmlSeqValueType,t)) 	-> return new OmlSeq0Type(new OmlCharType()),
     others								-> return ApplyMultiplicity(new OmlNatType(),mul)
  end;
 
-- add multiplici exstracted information to type. eg chat with upper* is a set of char
private ApplyMultiplicity : IOmlType * [IUmlMultiplicityElement] ==> IOmlType
ApplyMultiplicity(t, mul) == -- NOT COMPLETED
 if mul = nil then
  return t
 else
   if mul.getLower() = 0 and not mul.hasUpper() then
     return new OmlSeq0Type(t)
   else if mul.getLower() = 1 and not mul.hasUpper() then
     return new OmlSeq1Type(t)     
   else return t;  
------------------------------------------------------
--  Traces
------------------------------------------------------   
functions
-- Build traces from interaction
private build_traces : IUmlModel -> map String to IOmlTraceDefinitions
build_traces(model) ==
 let collOwnedBehavior = dunion{let tmp : IUmlCollaboration = 
   coll in tmp.getOwnedBehavior() | coll in set model.getDefinitions() 
                                  & isofclass(IUmlCollaboration,coll)}
 in
   merge{build_trace(interaction) | interaction in set collOwnedBehavior};
    
-- build a trace definition from a SD by using the name of the SD as the name of
--   the trace 
private build_trace : IUmlInteraction -> map String to IOmlTraceDefinitions
build_trace(interaction)==
  let name = interaction.getName(),
      messages : seq of IUmlMessage = interaction.getMessages()
  in
    let defs : IOmlTraceDefinition = 
      getTraceDefinition(messages, interaction.getFragments(),nil) 
    in
      let ownerClass in set {m.getSendEvent().getCovered().getRepresents() 
                            | m in set elems messages} 
      in 
         {let owr : IUmlClassNameType =ownerClass in owr.getName() 
                |-> new OmlTraceDefinitions([new OmlNamedTrace([name],defs)])};

-- Get definitions loops through the messages of the SD. It keeps looping until non of the messages
--  are back. It handles one message at the time and groups the according to the fragments they are
--  contained in by the interaction operand
getTraceDefinition : seq of IUmlMessage * 
                     set of IUmlInteractionFragment * 
                     [IUmlInteractionOperand] -> [IOmlTraceDefinition]
getTraceDefinition(msgs,fg,io) ==
  if len msgs > 0 then
  ( 
    let m    = hd msgs,
        rest = if len msgs > 1 then tl msgs else [],
        cfg  = { f | f in set fg & isofclass(IUmlCombinedFragment,f) },
        op   = getOperand(m,cfg)
    in
    (
      --No current CF is select by a IO
      if (io = nil and op = nil) or (io = op )  
      then
        -- no operand => no CF
        let mappDef : IOmlTraceDefinition = 
              new OmlTraceDefinitionItem([],getMethodApply(m),nil),
            restDef : IOmlTraceDefinition = getTraceDefinition(rest,cfg,op),
            defs : seq of IOmlTraceDefinition = [mappDef,restDef] 
        in
          let ret : IOmlTraceDefinition = new OmlTraceSequenceDefinition(defs) 
          in 
             ret
      else
        if op <> nil and getCfIoKind(fg,op).getValue() = 
            UmlInteractionOperatorKindQuotes`IQLOOP 
        then
          -- CF = Loop
          let loopDef : IOmlTraceDefinition    = getLoopDef(m,op),
              restDef : [IOmlTraceDefinition]  = getTraceDefinition(rest,cfg,op),
              defs : seq of IOmlTraceDefinition = if restDef <> nil 
                                                 then [loopDef,restDef]
                                                 else [loopDef],
              ret : IOmlTraceDefinition = new OmlTraceSequenceDefinition(defs) in ret
        else 
          -- CF = ALT
          if op <> nil and getCfIoKind(fg,op).getValue() = 
              UmlInteractionOperatorKindQuotes`IQALT 
          then
            let altDef : IOmlTraceDefinition   = getAltDef(rest,m,cfg,op),
                restDef: [IOmlTraceDefinition] = getTraceDefinition(rest,cfg,op),
                defs : seq of IOmlTraceDefinition = if restDef <> nil 
                                                   then [altDef,restDef]
                                                   else [altDef],
                ret : IOmlTraceDefinition = new OmlTraceSequenceDefinition(defs) in ret
          else 
            let ret : IOmlTraceDefinition = new OmlTraceSequenceDefinition() in ret
     )
  )
  else 
     nil;

-- Get loop definition converts a combined fragment into a Trace definition item
--  where the repeat pattern is set according to the contraint of the interaction 
--  operand inside the loop where the messages that is used as test is located
private getLoopDef : IUmlMessage * [IUmlInteractionOperand] -> IOmlTraceDefinition
getLoopDef(m,io) ==
    new OmlTraceDefinitionItem([],
                               getMethodApply(m),
                               getRpEx(io));
                               

-- Get repeat pattern from an interaction operand
--  the operand is associated with a message the there by the link to
--  the trace repeat pattern with a test of the message  
private getRpEx : [IUmlInteractionOperand] -> [IOmlTraceRepeatPattern]
getRpEx(iOperand) ==
 if iOperand = nil 
 then 
    nil
 else 
   if iOperand.hasGuard() then
     let guard = iOperand.getGuard(),
         min = if guard.hasMinint() 
               then let tmp : IUmlLiteralInteger = 
                 guard.getMinint() in tmp.getValue() 
               else nil,
         max = if guard.hasMaxint() 
               then let tmp : IUmlLiteralInteger = 
                 guard.getMaxint() in tmp.getValue() 
               else nil
     in -- problem with Java code gen. First check nil, java breaks the check if this is false
     if  min <> nil and min = 0 and max = nil then --min = 0 and max = nil then 
        new OmlTraceZeroOrMore()
     else 
       if min <> nil and min = 1 and max = nil then--min = 1 and max = nil then 
          new OmlTraceOneOrMore()
       else if min <> nil and max <> nil and min = 0 and max = 1 then --min = 0 and max = 1 then 
          new OmlTraceZeroOrOne()
       else if min <> nil then
         let minL = new OmlNumericLiteral(min),
             maxL = if max <> nil then new OmlNumericLiteral(max) else nil
         in
            new OmlTraceRange(minL,maxL )
       else
         nil
    else
      nil;
         
       
-- Get alt definition converts a CF kind of alt into a Choice Definition
--  Adding the message that is loceted inside it by the interaction operands
private getAltDef : seq of IUmlMessage * IUmlMessage * 
                    set of IUmlCombinedFragment * [IUmlInteractionOperand]
                     -> IOmlTraceDefinition
getAltDef(msgs,m,fg,io) ==
  let mapp = getMethodApply(m),
      rest = getTraceDefinition(msgs,fg,io),
      defs = if rest <> nil 
             then [new OmlTraceDefinitionItem([],mapp,nil),rest] 
             else [new OmlTraceDefinitionItem([],mapp,nil)]
  in
    new OmlTraceChoiceDefinition(defs);

   
-- Get Method Apply from a Message
private getMethodApply : IUmlMessage -> IOmlTraceMethodApply
getMethodApply(message) ==
  let methodName   : String = 
        message.getSendReceive().getEvent().getOperation().getName(),
      variableName : String = 
        message.getSendReceive().getCovered().getName(),
    args : seq of IOmlExpression = []
  in
     new OmlTraceMethodApply(variableName,methodName,args);

-- Get Interaction Operand where a message is placed if the message is places in a IO
--  else return nil
private getOperand : IUmlMessage * set of IUmlCombinedFragment -> [IUmlInteractionOperand] 
getOperand(m,fragments) ==
  let ops = { io | io in set elems conc 
                  Util`SetToSeq[seq of IUmlInteractionOperand]( 
                    {f.getOperand() | f in set  fragments 
                                    & isofclass(IUmlCombinedFragment,f)})
                 & exists mos in set io.getCovered() 
                 & mos = m.getSendEvent()} 
  in 
    if card ops > 0 then
      let p in set ops in  p
    else
       nil;
    

-- Get Combined fragment kind from a set of CF and a InteractionOperand
private getCfIoKind : set of IUmlCombinedFragment * IUmlInteractionOperand -> IUmlInteractionOperatorKind
getCfIoKind(fms,io) ==
  let cf 
    in set {f | f in set  fms  
              & isofclass(IUmlCombinedFragment,f) 
                and 
                exists iop in set elems f.getOperand() & iop = io} 
      in 
         cf.getInteractionOperator();




end Uml2Vdm
\end{vdm_al}


\begin{rtinfo}
[TotalxCoverage]{vdm.tc}[Uml2Vdm]

\end{rtinfo}