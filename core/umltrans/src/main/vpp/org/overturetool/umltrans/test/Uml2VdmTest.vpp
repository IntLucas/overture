


class Uml2VdmTest is subclass of TestCase

operations
public Uml2VdmTest: () ==> Uml2VdmTest
Uml2VdmTest() == TestCase("Uml2VdmTest");

protected SetUp: () ==> ()
 SetUp () == skip;

public testClassAbstractOperation: () ==> ()
testClassAbstractOperation () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassAbstractOperation.getSpecifications(), 
                           "ClassAbstractOperation.vpp") = {|->});
);

public testClassActive: () ==> ()
testClassActive () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassActive.getSpecifications(), 
                           "ClassActive.vpp") = {|->});
);

public testClassAssociation: () ==> ()
testClassAssociation () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassAssociation.getSpecifications(), 
                           "ClassAssociation.vpp") = {|->});
);

public testClassAssociationN: () ==> ()
testClassAssociationN () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassAssociationN.getSpecifications(), 
                           "ClassAssociationN.vpp") = {|->});
);

public testClassComplete: () ==> ()
testClassComplete () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassComplete.getSpecifications(), 
                           "ClassComplete.vpp") = {|->});
);

public testClassInheritance: () ==> ()
testClassInheritance () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassInheritance.getSpecifications(), 
                           "ClassInheritance.vpp") = {|->});
);

public testClassInstanceUnionType: () ==> ()
testClassInstanceUnionType () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassInstanceUnionType.getSpecifications(), 
                           "ClassInstanceUnionType.vpp") = {|->});
);

public testClassInstanceVar: () ==> ()
testClassInstanceVar () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassInstanceVar.getSpecifications(), 
                           "ClassInstanceVar.vpp") = {|->});
);

public testClassSimpleFunction: () ==> ()
testClassSimpleFunction () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassSimpleFunction.getSpecifications(), 
                           "ClassSimpleFunction.vpp") = {|->});
);

public testClassSimpleOperation: () ==> ()
testClassSimpleOperation () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassSimpleOperation.getSpecifications(), 
                           "ClassSimpleOperation.vpp") = {|->});
);

public testClassTemplates: () ==> ()
testClassTemplates () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassTemplates.getSpecifications(), 
                           "ClassTemplates.vpp") = {|->});
);

public testClassWithMap: () ==> ()
testClassWithMap () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassWithMap.getSpecifications(), 
                           "ClassWithMap.vpp") = {|->});
);

public testClassWithTypes: () ==> ()
testClassWithTypes () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassWithTypes.getSpecifications(), 
                           "ClassWithTypes.vpp") = {|->});
);

public testClassWithValues: () ==> ()
testClassWithValues () ==
(  let specTest : SpecTest = new SpecTest()
  in
   assertTrue(specTest.Run(TestData`ClassWithValues.getSpecifications(), 
                           "ClassWithValues.vpp") = {|->});
);

public runTest: ( TestResult ) ==> ()
runTest (ptr) ==( 
  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassAbstractOperation();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassActive();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassAssociation();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassAssociationN();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassComplete();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassInheritance();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassInstanceUnionType();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassInstanceVar();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassSimpleFunction();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassSimpleOperation();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassTemplates();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassWithMap();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassWithTypes();
       );



  -- execute the sub-tests
  trap exc : Throwable
  with
    if isofclass(AssertionFailedError,exc)
    then ptr.addFailure(self, exc)
    else if isofbaseclass(Throwable, exc)
         then ptr.addError(self, exc)
         else error
   in (
        testClassWithValues();
       );



);

protected TearDown: () ==> ()

TearDown () == skip;

end Uml2VdmTest