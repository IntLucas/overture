


%
% $Id: VdmXmlApi.tex,v 1.10 2005/11/08 17:54:24 mave Exp $
%

The purpose of this specification is to provide a very simple and rudimentary
facility to read and write XML files from VDM++. It is not intended as a full-blown
XML parser although most of the basic features are provided. The API is split into
an \textit{event-based} interface and an \textit{object-based} interface. The former
allows processing of the file already while reading, the latter reads the file
entirely and provides a simple object-oriented interface to the completely
parsed XML document. Both interfaces are described in this document.

\begin{figure}[!htb]
\begin{centering}
\includegraphics[width=.8\columnwidth]{cldiagram.eps}
\caption{UML class diagram of the VDM++ XML API}
\end{centering}
\end{figure}

\section{The event-based XML interface}

\subsection{class \texttt{XmlEvent}}

An XML document consist of a number of entities, which are possible nested.
Each entity might have a number of attributes and data associated with it. 
A stack of entities is maintained by the event-based parser automatically
in order to determine the nesting level of the current entity. Only
\texttt{peekEntity} and \texttt{stackDepth} should be called by the
user. The operations \texttt{pushEntity} and \texttt{popEntity} are
used by the event-based parser internals.

\begin{vdm_al}
class XmlEvent

instance variables
  estack: seq of XmlEntity := []
  
operations
  protected pushEntity: XmlEntity ==> ()
  pushEntity (ppe) == estack := [ppe] ^ estack;
  
  protected popEntity: () ==> XmlEntity
  popEntity () ==
    ( dcl res : XmlEntity := hd estack;
      estack := tl estack;
      return res )
  pre len estack > 0;
  
  protected peekEntity: () ==> XmlEntity
  peekEntity () ==  return hd estack
  pre len estack > 0;
  
  protected stackDepth: () ==> nat
  stackDepth () == return len estack;
\end{vdm_al}

The event-based XML interfaces scans a file and calls some basic operators
each time a new entity, attribute or data block is found (or completed).
The user can process the file already while parsing by inheriting from
the class \texttt{XmlEvent} and overloading the appropriate operations.
The operations shall return \texttt{true} to indicate that the event was
properly handled.

\begin{vdm_al}  
  protected StartDocument: () ==> bool
  StartDocument () == is subclass responsibility;
  
  protected StopDocument: () ==> bool
  StopDocument () == is subclass responsibility;
  
  protected StartEntity: seq of char ==> bool
  StartEntity (-) == is subclass responsibility;
  
  protected StopEntity: seq of char ==> bool
  StopEntity (-) == is subclass responsibility;
  
  protected StartAttribute: seq of char * seq of char ==> bool
  StartAttribute (-,-) == is subclass responsibility;
  
  protected StartData: seq of char ==> bool
  StartData(-) == is subclass responsibility;
\end{vdm_al}

The operation \texttt{parse} opens the file, initialises
the scanner, parses the file (while calling the appropriate
event handlers) and closes the file.

\begin{vdm_al}
  public parse: seq of char ==> ()
  parse(fname) ==  
    ( dcl parser : XmlParser := new XmlParser(fname, self);
      parser.parse() )
    
end XmlEvent
\end{vdm_al}

\section{The object-based XML interface}

\subsection{class \texttt{XmlDocument}}

\begin{vdm_al}
class XmlDocument
  is subclass of XmlEvent

instance variables
  public entities : XmlEntityList := new XmlEntityList();
  
operations
  public addEntity: XmlEntity ==> ()
  addEntity (pent) == entities.addTail(pent); 
  
  public accept: XmlVisitor ==> ()
  accept (pxv) == pxv.VisitXmlDocument(self) 
  pre entities.Length() > 0;
\end{vdm_al}

\begin{vdm_al}
  protected StartDocument: () ==> bool
  StartDocument () == return true;
  
  protected StopDocument: () ==> bool
  StopDocument () == return true;
  
  protected StartEntity: seq of char ==> bool
  StartEntity (pname) == 
    ( dcl nxe : XmlEntity := new XmlEntity(pname);
      if stackDepth() = 0
      -- top-level entity, add to document, remember name
      then ( addEntity(nxe); pushEntity(nxe) )
      -- lower level entity, add to current entity, remember name
      else ( peekEntity().addEntity(nxe); pushEntity(nxe) );
      return true );
  
  protected StopEntity: seq of char ==> bool
  StopEntity (pname) ==
    if stackDepth() > 0 then (
      -- check consistency, name should be identical
      if peekEntity().name = pname
      then def - = popEntity() in return true
      else return false
    ) else return false;
  
  protected StartAttribute: seq of char * seq of char ==> bool
  StartAttribute (pattr,pval) ==
    -- put attribute in current entity context
    if stackDepth() > 0 then (
      peekEntity().addAttribute(new XmlAttribute(pattr,pval));
      return true;
    ) else return false;
  
  protected StartData: seq of char ==> bool
  StartData(pdata) ==
    -- put the data block in the current entity context
    if stackDepth() > 0 then (
      peekEntity().addData(new XmlData(pdata));
      return true;
    ) else return false;
  
end XmlDocument
\end{vdm_al}

\subsection{class \texttt{XmlEntityList}}

\begin{vdm_al}
class XmlEntityList

instance variables
--comu
 public entities : seq of XmlEntity := [];
  index : nat := 0
  
operations
  public XmlEntityList: () ==> XmlEntityList
  XmlEntityList () == entities := [];

  public addHead: XmlEntity ==> ()
  addHead (pxe) == entities := [pxe] ^ entities;
  
  public addTail: XmlEntity ==> ()
  addTail (pxe) == entities := entities ^ [pxe];
  
  public Length: () ==> nat
  Length () == return len entities;
  
  public First: () ==> bool
  First () ==
    if len entities > 0
    then ( index := 1; return true )
    else ( index := 0; return false );
  
  public Next: () ==> bool
  Next () ==
    if len entities > 0 and index < len entities
    then ( index := index + 1; return true )
    else ( index := 0; return false );
  
  public Last: () ==> bool
  Last () == 
    if len entities > 0
    then ( index := len entities; return true )
    else ( index := 0; return false );
  
  public Previous: () ==> bool
  Previous () == 
    if len entities > 0 and index > 1
    then ( index := index - 1; return true )
    else ( index := 0; return false );
  
  public getEntity: () ==> XmlEntity
  getEntity () == return entities(index)
  pre index in set inds entities
  
end XmlEntityList
\end{vdm_al}

\subsection{class \texttt{XmlEntity}}

\begin{vdm_al}
class XmlEntity

instance variables
  public name : seq of char := "";
  public attributes : XmlAttributeList := new XmlAttributeList();
  public entities : XmlEntityList := new XmlEntityList();
  public data : [XmlData] := nil
  
operations
  public XmlEntity: seq of char ==> XmlEntity
  XmlEntity (pname) ==
    ( name := pname;
--      attributes := new XmlAttributeList();
--      entities := new XmlEntityList();
      data := nil );
  
  public addAttribute: XmlAttribute ==> ()
  addAttribute (pattr) == attributes.addTail(pattr);
  
  public addEntity: XmlEntity ==> ()
  addEntity (pent) == entities.addTail(pent)
  pre data = nil;
  
  public addData: XmlData ==> ()
  addData(pdata) == data := pdata
  pre data = nil and entities.Length() = 0;
  
  public accept: XmlVisitor ==> ()
  accept (pxv) == pxv.VisitXmlEntity(self)
  pre len name > 0
  
end XmlEntity
\end{vdm_al}

\subsection{class \texttt{XmlAttributeList}}

\begin{vdm_al}
class XmlAttributeList

instance variables
--changed bu kl
 public attributes : seq of XmlAttribute := [];
  index : nat := 0
  
operations
  public XmlAttributeList: () ==> XmlAttributeList
  XmlAttributeList () == attributes := [];

  public addHead: XmlAttribute ==> ()
  addHead (pxe) == attributes := [pxe] ^ attributes;
  
  public addTail: XmlAttribute ==> ()
  addTail (pxe) == attributes := attributes ^ [pxe];
  
  public Length: () ==> nat
  Length () == return len attributes;
  
  public First: () ==> bool
  First () ==
    if len attributes > 0
    then ( index := 1; return true )
    else ( index := 0; return false );
  
  public Next: () ==> bool
  Next () ==
    if len attributes > 0 and index < len attributes
    then ( index := index + 1; return true )
    else ( index := 0; return false );
  
  public Last: () ==> bool
  Last () == 
    if len attributes > 0
    then ( index := len attributes; return true )
    else ( index := 0; return false );
  
  public Previous: () ==> bool
  Previous () == 
    if len attributes > 0 and index > 1
    then ( index := index - 1; return true )
    else ( index := 0; return false );
  
  public getAttribute: () ==> XmlAttribute
  getAttribute () == return attributes(index)
  pre index in set inds attributes
  
end XmlAttributeList
\end{vdm_al}

\subsection{class \texttt{XmlAttribute}}

\begin{vdm_al}
class XmlAttribute

instance variables
  public name : seq of char := "";
  public val : seq of char := "";
  
operations
  public XmlAttribute: seq of char * seq of char ==> XmlAttribute
  XmlAttribute (pname, pval) == ( name := pname; val := pval );
  
  public accept: XmlVisitor ==> ()
  accept (pxv) == pxv.VisitXmlAttribute(self)
  pre len name > 0
  
end XmlAttribute
\end{vdm_al}

\subsection{class \texttt{XmlData}}

\begin{vdm_al}
class XmlData

instance variables
  public data : seq of char := ""

operations
  public XmlData: seq of char ==> XmlData
  XmlData (pdata) == data := pdata;
  
  public accept: XmlVisitor ==> ()
  accept (pxv) == pxv.VisitXmlData(self)
  
end XmlData
\end{vdm_al}


\section{Top-level library classes}

\subsection{class \texttt{XmlFactory}}

The static operation \texttt{readFromFile} reads and parses
an XML file and returns the XmlDocument instance that is
created by the parser. The static operation \texttt{writeToFile}
takes an XmlDocument instances and writes back an XML file
to disk.

\begin{vdm_al}
class XmlFactory

operations
  static public readFromFile: seq of char ==> XmlDocument
  readFromFile (pfn) ==
    ( dcl pnxd : XmlDocument :=
        new XmlDocument();
      pnxd.parse(pfn);
      return pnxd );
  
  static public writeToFile: seq of char * XmlDocument ==> ()
  writeToFile (pfn, pxd) == skip;
--    ( dcl pxfov : XmlFileOutputVisitor :=
--        new XmlFileOutputVisitor(pfn);
--      pxd.accept(pxfov) )
  
end XmlFactory
\end{vdm_al}

The simplest application using the VDM++ XML API described in this
document is represented by the following piece of Java code.

\begin{verbatimtab}[4]
import nl.marcelverhoef.vdm.xml.*;
import dk.ifad.toolbox.VDM.*;

public class VdmXmlTest {
	public static void main(String[] args) {
		System.out.println("Start VdmXmlTest");
		try {
			System.out.println("Parsing file");
			XmlDocument pDoc = XmlFactory.readFromFile("testin.xml");
			System.out.println("Generating output");
			XmlFactory.writeToFile("testout.xml",pDoc);
		}
		catch (CGException cge) {
			System.out.println(cge.getMessage());
		}
		System.out.println("VdmXmlTest completed");
	}
}
\end{verbatimtab}

\subsection{class \texttt{XmlVisitor}}

\begin{vdm_al}
class XmlVisitor

operations
  public setEncoding : seq of char ==>()
  setEncoding(encodingType) == is subclass responsibility;

  public VisitXmlDocument: XmlDocument ==> ()
  VisitXmlDocument (-) == is subclass responsibility;
  
  public VisitXmlEntity: XmlEntity ==> ()
  VisitXmlEntity (-) == is subclass responsibility;
  
  public VisitXmlAttribute: XmlAttribute ==> ()
  VisitXmlAttribute (-) == is subclass responsibility;
  
  public VisitXmlData: XmlData ==> ()
  VisitXmlData (-) == is subclass responsibility
  
end XmlVisitor
\end{vdm_al}

\subsection{class \texttt{XmlFileOutputVisitor}}

\begin{vdm_al}
class XmlFileOutputVisitor
  is subclass of XmlVisitor

values

INDENT : seq of char ="  ";

instance variables 
 encoding : seq of char := "";
 indentCount : nat := 0;
operations
  public setEncoding : seq of char ==>()
  setEncoding(encodingType) == encoding := encodingType;
  
  protected print: seq of char ==> ()
  print (text) == is subclass responsibility;

  private printData: seq of char ==> ()
  printData (pval) == print(pval);

  private printAttribute: seq of char ==> ()
  printAttribute (pval) == print("\"" ^ pval ^ "\"");

  public XmlFileOutputVisitor: seq of char ==> XmlFileOutputVisitor
  XmlFileOutputVisitor (-) == skip;
  
  public VisitXmlDocument: XmlDocument ==> ()
  VisitXmlDocument (pxmld) ==
    ( dcl cont : bool := pxmld.entities.First();
      -- print the XML intro line
      if len encoding = 0 then
        print ("<?xml version=\"1.0\"?>\n")
      else
        print ("<?xml version=\"1.0\" encoding=\"" ^ encoding ^"\"?>\n");
      -- iterate over all embedded entities
      while cont do
        ( dcl ent : XmlEntity := pxmld.entities.getEntity();
          ent.accept(self);
          cont := pxmld.entities.Next()));
  
  public VisitXmlEntity: XmlEntity ==> ()
  VisitXmlEntity (pxmle) ==
    ( dcl cont : bool := pxmle.attributes.First();
      indentCount := indentCount +1;
      -- print the start entity symbol
      print (GetIndent() ^"<" ^ pxmle.name);
      -- iterate over all embedded attributes
      while cont do
        ( dcl attr : XmlAttribute := pxmle.attributes.getAttribute();
	  attr.accept(self);
	  cont := pxmle.attributes.Next());
      if pxmle.entities.Length() > 0
      then ( -- first close the start entity symbol
             print (">\n");
             -- now iterate over all embedded entities
             cont := pxmle.entities.First();
             while cont do
               ( dcl ent : XmlEntity := pxmle.entities.getEntity();
                 ent.accept(self);
                 cont := pxmle.entities.Next());
             -- print the closing entity symbol
             print (GetIndent() ^"</" ^ pxmle.name ^ ">\n"))
      elseif pxmle.data = nil
      then print ("/>\n")
      else ( -- first close the start entity symbol
             print (">");
             -- now print the data block
             pxmle.data.accept(self);
             -- print the closing entity symbol
             print (GetIndent() ^ "</" ^ pxmle.name ^ ">\n")
           );
             indentCount := indentCount -1;
             );
  
  public VisitXmlAttribute: XmlAttribute ==> ()
  VisitXmlAttribute (pattr) ==
    ( print(" " ^ pattr.name ^ "=");
      printAttribute(pattr.val) );
  
  public VisitXmlData: XmlData ==> ()
  VisitXmlData (pdata) == printData(pdata.data);
  
  private GetIndent : () ==> seq of char
  GetIndent() ==
  (
    dcl ind : seq of char :="";
    dcl i : nat := 0;
    while i < indentCount do
    (
      i := i+1;
      ind := ind ^ INDENT;
    
    ) ;
    return ind;
  
  );
  
end XmlFileOutputVisitor
\end{vdm_al}

\section{Auxiliary library classes}

\subsection{class \texttt{XmlParser}}

The \texttt{XmlParser} class is actually implemented using \texttt{BYaccJ}.
Here we provide a simple interface to the most important operations that are
supported by the parser implementation. This interface definition is required
in order to type check the specification shown in this document.

\begin{vdm_al}
class XmlParser
instance variables
  fName : seq of char :="";
  xmlEvent : [XmlEvent] :=nil;

operations
  public XmlParser: seq of char * XmlEvent ==> XmlParser
  XmlParser (fn,xe) == (fName:= fn; xmlEvent:=xe;);
  
  public parse: () ==> ()
  parse() == skip
  pre xmlEvent <> nil;
end XmlParser
\end{vdm_al}