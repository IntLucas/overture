


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-11-26 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 11:13:11)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.uml;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.api.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class UmlLiteralInteger extends IUmlLiteralInteger {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivValue KEEP=NO
  private Long ivValue = null;
// ***** VDMTOOLS END Name=ivValue


// ***** VDMTOOLS START Name=vdm_init_UmlLiteralInteger KEEP=NO
  private void vdm_init_UmlLiteralInteger () throws CGException {
    try {
      ivValue = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_UmlLiteralInteger


// ***** VDMTOOLS START Name=UmlLiteralInteger KEEP=NO
  public UmlLiteralInteger () throws CGException {
    vdm_init_UmlLiteralInteger();
  }
// ***** VDMTOOLS END Name=UmlLiteralInteger


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("LiteralInteger");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IUmlVisitor KEEP=NO
  public void accept (final IUmlVisitor pVisitor) throws CGException {
    pVisitor.visitLiteralInteger((IUmlLiteralInteger) this);
  }
// ***** VDMTOOLS END Name=accept#1|IUmlVisitor


// ***** VDMTOOLS START Name=UmlLiteralInteger#1|Long KEEP=NO
  public UmlLiteralInteger (final Long p1) throws CGException {

    vdm_init_UmlLiteralInteger();
    setValue(p1);
  }
// ***** VDMTOOLS END Name=UmlLiteralInteger#1|Long


// ***** VDMTOOLS START Name=UmlLiteralInteger#3|Long|Long|Long KEEP=NO
  public UmlLiteralInteger (final Long p1, final Long line, final Long column) throws CGException {

    vdm_init_UmlLiteralInteger();
    {

      setValue(p1);
      setPosition(line, column);
    }
  }
// ***** VDMTOOLS END Name=UmlLiteralInteger#3|Long|Long|Long


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    String fname = new String("value");
    Boolean cond_4 = null;
    cond_4 = new Boolean(data.containsKey(fname));
    if (cond_4.booleanValue()) 
      setValue(UTIL.NumberToLong(data.get(fname)));
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getValue KEEP=NO
  public Long getValue () throws CGException {
    return ivValue;
  }
// ***** VDMTOOLS END Name=getValue


// ***** VDMTOOLS START Name=setValue#1|Long KEEP=NO
  public void setValue (final Long parg) throws CGException {
    ivValue = UTIL.NumberToLong(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setValue#1|Long

}
;