


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-11-26 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 11:13:11)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.vdm2uml;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.api.Util;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.umltrans.api.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class Uml2XmiEAxml extends Uml2Xmi {


// ***** VDMTOOLS START Name=QualifierInfo KEEP=NO
@SuppressWarnings({"all","unchecked","unused"})
  public static class QualifierInfo implements Record {

    public String AssociationId;

    public String ClassId;

    public String QualifierName;


    public QualifierInfo () {}


    public QualifierInfo (String p1, String p2, String p3) {

      AssociationId = p1;
      ClassId = p2;
      QualifierName = p3;
    }


    public Object clone () {
      return new QualifierInfo(AssociationId, ClassId, QualifierName);
    }


    public String toString () {
      return "mk_Uml2XmiEAxml`QualifierInfo(" + UTIL.toString(AssociationId) + "," + UTIL.toString(ClassId) + "," + UTIL.toString(QualifierName) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierInfo)) 
        return false;
      else {

        QualifierInfo temp = (QualifierInfo) obj;
        return UTIL.equals(AssociationId, temp.AssociationId) && UTIL.equals(ClassId, temp.ClassId) && UTIL.equals(QualifierName, temp.QualifierName);
      }
    }


    public int hashCode () {
      return (AssociationId == null ? 0 : AssociationId.hashCode()) + (ClassId == null ? 0 : ClassId.hashCode()) + (QualifierName == null ? 0 : QualifierName.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierInfo
;


// ***** VDMTOOLS START Name=QualifierEnd KEEP=NO
@SuppressWarnings({"all","unchecked","unused"})
  public static class QualifierEnd implements Record {

    public IUmlProperty Property;

    public Boolean IsNavigable;


    public QualifierEnd () {}


    public QualifierEnd (IUmlProperty p1, Boolean p2) {

      Property = p1;
      IsNavigable = p2;
    }


    public Object clone () {
      return new QualifierEnd((IUmlProperty) UTIL.clone(Property), IsNavigable);
    }


    public String toString () {
      return "mk_Uml2XmiEAxml`QualifierEnd(" + UTIL.toString(Property) + "," + UTIL.toString(IsNavigable) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierEnd)) 
        return false;
      else {

        QualifierEnd temp = (QualifierEnd) obj;
        return UTIL.equals(Property, temp.Property) && UTIL.equals(IsNavigable, temp.IsNavigable);
      }
    }


    public int hashCode () {
      return (Property == null ? 0 : Property.hashCode()) + (IsNavigable == null ? 0 : IsNavigable.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierEnd
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=id KEEP=NO
  protected Long id = null;
// ***** VDMTOOLS END Name=id

// ***** VDMTOOLS START Name=packageId KEEP=NO
  protected Long packageId = null;
// ***** VDMTOOLS END Name=packageId

// ***** VDMTOOLS START Name=classes KEEP=NO
  protected HashMap classes = new HashMap();
// ***** VDMTOOLS END Name=classes

// ***** VDMTOOLS START Name=primitiveTypes KEEP=NO
  protected HashMap primitiveTypes = new HashMap();
// ***** VDMTOOLS END Name=primitiveTypes

// ***** VDMTOOLS START Name=associationIdMap KEEP=NO
  protected HashMap associationIdMap = new HashMap();
// ***** VDMTOOLS END Name=associationIdMap

// ***** VDMTOOLS START Name=oe KEEP=NO
  protected String oe = null;
// ***** VDMTOOLS END Name=oe

// ***** VDMTOOLS START Name=extensionTemplateClasses KEEP=NO
  protected HashSet extensionTemplateClasses = new HashSet();
// ***** VDMTOOLS END Name=extensionTemplateClasses

// ***** VDMTOOLS START Name=extensionConstrainElem KEEP=NO
  protected HashSet extensionConstrainElem = new HashSet();
// ***** VDMTOOLS END Name=extensionConstrainElem

// ***** VDMTOOLS START Name=extensionConectorNonNavigable KEEP=NO
  protected HashSet extensionConectorNonNavigable = new HashSet();
// ***** VDMTOOLS END Name=extensionConectorNonNavigable

// ***** VDMTOOLS START Name=extensionConectorQualifier KEEP=NO
  protected HashSet extensionConectorQualifier = new HashSet();
// ***** VDMTOOLS END Name=extensionConectorQualifier

// ***** VDMTOOLS START Name=classIdToNestedClassifier KEEP=NO
  protected HashMap classIdToNestedClassifier = new HashMap();
// ***** VDMTOOLS END Name=classIdToNestedClassifier

// ***** VDMTOOLS START Name=dependencies KEEP=NO
  protected HashMap dependencies = new HashMap();
// ***** VDMTOOLS END Name=dependencies

// ***** VDMTOOLS START Name=log KEEP=NO
  protected StatusLog log = null;
// ***** VDMTOOLS END Name=log

// ***** VDMTOOLS START Name=ID_uTAG KEEP=NO
  private static final String ID_uTAG = new String("xmi:id");
// ***** VDMTOOLS END Name=ID_uTAG

// ***** VDMTOOLS START Name=ownedMemberElementName KEEP=NO
  private static final String ownedMemberElementName = new String("ownedMember");
// ***** VDMTOOLS END Name=ownedMemberElementName


// ***** VDMTOOLS START Name=vdm_init_Uml2XmiEAxml KEEP=NO
  private void vdm_init_Uml2XmiEAxml () throws CGException {
    try {

      id = new Long(1);
      packageId = new Long(0);
      classes = new HashMap();
      primitiveTypes = new HashMap();
      associationIdMap = new HashMap();
      oe = new String("");
      extensionTemplateClasses = new HashSet();
      extensionConstrainElem = new HashSet();
      extensionConectorNonNavigable = new HashSet();
      extensionConectorQualifier = new HashSet();
      classIdToNestedClassifier = new HashMap();
      dependencies = new HashMap();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Uml2XmiEAxml


// ***** VDMTOOLS START Name=Uml2XmiEAxml KEEP=NO
  public Uml2XmiEAxml () throws CGException {
    vdm_init_Uml2XmiEAxml();
  }
// ***** VDMTOOLS END Name=Uml2XmiEAxml


// ***** VDMTOOLS START Name=Save#3|String|IUmlModel|StatusLog KEEP=NO
  public void Save (final String fileName, final IUmlModel model, final StatusLog inLog) throws CGException {

    XmlVisitor xmlVisitor = (XmlVisitor) new XmiFileOutputVisitor();
    log = (StatusLog) UTIL.clone(inLog);
    Util.CreateFile(fileName);
    CreateXmlFile((IUmlModel) model);
    xmlVisitor.SetEncoding(new String("UTF-8"));
    xmlVisitor.VisitXmlDocument((XmlDocument) doc);
    Util.CloseFile();
  }
// ***** VDMTOOLS END Name=Save#3|String|IUmlModel|StatusLog


// ***** VDMTOOLS START Name=CreateXmlFile#1|IUmlModel KEEP=NO
  protected void CreateXmlFile (final IUmlModel m) throws CGException {

    oe = UTIL.ConvertToString(UTIL.clone(ownedMemberElementName));
    doc.StartE(new String("xmi:XMI"));
    doc.StartA(new String("xmi:version"), new String("2.1"));
    doc.StartA(new String("xmlns:uml"), new String("http://schema.omg.org/spec/UML/2.0"));
    doc.StartA(new String("xmlns:xmi"), new String("http://schema.omg.org/spec/XMI/2.1"));
    doc.StartE(new String("xmi:Documentation"));
    doc.StartA(new String("xmi:Exporter"), new String("Enterprise Architect"));
    doc.StartA(new String("xmi:ExporterVersion"), new String("6.5"));
    doc.StopE(new String("xmi:Documentation"));
    doc.StartE(new String("uml:Model"));
    String par_28 = null;
    par_28 = m.getName();
    doc.StartA(new String("name"), par_28);
    doc.StartA(ID_uTAG, GetNextId());
    doc.StartE(oe);
    doc.StartA(new String("xmi:type"), new String("uml:Package"));
    doc.StartA(ID_uTAG, GetId(packageId));
    doc.StartA(new String("name"), new String("VDM Generated model"));
    AddStdTypes();
    HashSet tmpArg_v_46 = new HashSet();
    tmpArg_v_46 = m.getDefinitions();
    GenerateClassIds(tmpArg_v_46);
    HashSet tmpArg_v_48 = new HashSet();
    HashSet res_s_49 = new HashSet();
    {

      HashSet e_set_54 = new HashSet();
      e_set_54 = m.getDefinitions();
      IUmlModelElement d = null;
      {
        for (Iterator enm_56 = e_set_54.iterator(); enm_56.hasNext(); ) {

          IUmlModelElement elem_55 = (IUmlModelElement) enm_56.next();
          d = (IUmlModelElement) elem_55;
          if (new Boolean(d instanceof IUmlClass).booleanValue()) {
            res_s_49.add(d);
          }
        }
      }
    }
    tmpArg_v_48 = res_s_49;
    AddDefinitions(tmpArg_v_48);
    HashSet tmpArg_v_58 = new HashSet();
    HashSet res_s_59 = new HashSet();
    {

      HashSet e_set_64 = new HashSet();
      e_set_64 = m.getDefinitions();
      IUmlModelElement d = null;
      {
        for (Iterator enm_66 = e_set_64.iterator(); enm_66.hasNext(); ) {

          IUmlModelElement elem_65 = (IUmlModelElement) enm_66.next();
          d = (IUmlModelElement) elem_65;
          if (new Boolean(d instanceof IUmlAssociation).booleanValue()) {
            res_s_59.add(d);
          }
        }
      }
    }
    tmpArg_v_58 = res_s_59;
    AddDefinitions(tmpArg_v_58);
    HashSet tmpArg_v_68 = new HashSet();
    HashSet res_s_69 = new HashSet();
    {

      HashSet e_set_74 = new HashSet();
      e_set_74 = m.getDefinitions();
      IUmlModelElement d = null;
      {
        for (Iterator enm_76 = e_set_74.iterator(); enm_76.hasNext(); ) {

          IUmlModelElement elem_75 = (IUmlModelElement) enm_76.next();
          d = (IUmlModelElement) elem_75;
          if (new Boolean(d instanceof IUmlConstraint).booleanValue()) {
            res_s_69.add(d);
          }
        }
      }
    }
    tmpArg_v_68 = res_s_69;
    AddDefinitions(tmpArg_v_68);
    AddNestedClassifiers();
    doc.StopE(oe);
    doc.StopE(new String("uml:Model"));
    AddExstention();
    doc.StopE(new String("xmi:XMI"));
  }
// ***** VDMTOOLS END Name=CreateXmlFile#1|IUmlModel


// ***** VDMTOOLS START Name=AddDefinitions#1|HashSet KEEP=NO
  private void AddDefinitions (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_33 = iset_2.iterator(); enm_33.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_33.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlConstraint))) 
            succ_18 = false;
          if (succ_18) 
            AddConstraint((IUmlConstraint) c);
          else {

            succ_18 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlAssociation))) 
              succ_18 = false;
            if (succ_18) 
              AddAssociation((IUmlAssociation) c);
            else {

              succ_18 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlClass))) 
                succ_18 = false;
              if (succ_18) 
                AddClass((IUmlClass) c);
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=AddDefinitions#1|HashSet


// ***** VDMTOOLS START Name=AddConstraint#1|IUmlConstraint KEEP=NO
  private void AddConstraint (final IUmlConstraint c) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("xmi:type"), new String("uml:Constraint"));
    {

      String constrainId = GetNextId();
      {

        extensionConstrainElem.add(constrainId);
        doc.StartA(ID_uTAG, constrainId);
      }
    }
    {

      HashSet iset_14 = new HashSet();
      iset_14 = c.getConstraintElements();
      String a = null;
      for (Iterator enm_27 = iset_14.iterator(); enm_27.hasNext(); ) {

        String elem_15 = UTIL.ConvertToString(enm_27.next());
        a = elem_15;
        {

          doc.StartE(new String("constrainedElement"));
          doc.StartA(new String("xmi:idref"), UTIL.ConvertToString(associationIdMap.get(a)));
          doc.StopE(new String("constrainedElement"));
        }
      }
    }
    doc.StartE(new String("specification"));
    doc.StartA(new String("xmi:type"), new String("uml:OpaqueExpression"));
    doc.StartA(ID_uTAG, GetNextId());
    doc.StopE(new String("specification"));
    doc.StartE(new String("body"));
    String par_41 = null;
    Boolean cond_43 = null;
    IUmlValueSpecification obj_44 = null;
    obj_44 = (IUmlValueSpecification) c.getSpecification();
    cond_43 = new Boolean(obj_44 instanceof IUmlLiteralString);
    if (cond_43.booleanValue()) {

      IUmlLiteralString spec = null;
      spec = (IUmlLiteralString) c.getSpecification();
      par_41 = spec.getValue();
    }
    else 
      par_41 = new String("");
    doc.StartD(par_41);
    doc.StopE(new String("body"));
    doc.StopE(new String("specification"));
    doc.StopE(oe);
  }
// ***** VDMTOOLS END Name=AddConstraint#1|IUmlConstraint


// ***** VDMTOOLS START Name=AddExstention KEEP=NO
  private void AddExstention () throws CGException {

    doc.StartE(new String("xmi:Extension"));
    doc.StartA(new String("extender"), new String("Enterprise Architect"));
    doc.StartA(new String("extenderID"), new String("6.5"));
    doc.StartE(new String("elements"));
    {

      String c = null;
      for (Iterator enm_43 = extensionTemplateClasses.iterator(); enm_43.hasNext(); ) {

        String elem_12 = UTIL.ConvertToString(enm_43.next());
        c = elem_12;
        {

          doc.StartE(new String("element"));
          doc.StartA(new String("xmi:idref"), UTIL.ConvertToString(classes.get(c)));
          doc.StartA(new String("xmi:type"), new String("uml:Class"));
          doc.StartA(new String("name"), c);
          doc.StartA(new String("scope"), new String("public"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("sType"), new String("Class"));
          doc.StartA(new String("nType"), new String("1"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("element"));
        }
      }
    }
    {

      String constrainId = null;
      for (Iterator enm_80 = extensionConstrainElem.iterator(); enm_80.hasNext(); ) {

        String elem_45 = UTIL.ConvertToString(enm_80.next());
        constrainId = elem_45;
        {

          doc.StartE(new String("element"));
          doc.StartA(new String("xmi:idref"), constrainId);
          doc.StartA(new String("xmi:type"), new String("uml:Constraint"));
          doc.StartA(new String("scope"), new String("public"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("documentation"), new String("xor"));
          doc.StartA(new String("isSpecification"), new String("false"));
          doc.StartA(new String("sType"), new String("Constraint"));
          doc.StartA(new String("nType"), new String("2"));
          doc.StartA(new String("scope"), new String("public"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("element"));
        }
      }
    }
    doc.StopE(new String("elements"));
    doc.StartE(new String("diagrams"));
    {

      String constrainId = null;
      for (Iterator enm_143 = extensionConstrainElem.iterator(); enm_143.hasNext(); ) {

        String elem_86 = UTIL.ConvertToString(enm_143.next());
        constrainId = elem_86;
        {

          doc.StartE(new String("diagram"));
          doc.StartA(ID_uTAG, GetNextId());
          doc.StartE(new String("model"));
          doc.StartA(new String("package"), GetId(packageId));
          doc.StartA(new String("localID"), new String("24"));
          doc.StartA(new String("owner"), GetId(packageId));
          doc.StopE(new String("model"));
          doc.StartE(new String("properties"));
          String par_113 = null;
          par_113 = new String("Constrain diagram ").concat(constrainId);
          doc.StartA(new String("name"), par_113);
          doc.StartA(new String("type"), new String("Logical"));
          doc.StopE(new String("properties"));
          doc.StartE(new String("elements"));
          doc.StartE(new String("element"));
          doc.StartA(new String("geometry"), new String("Left=100;Top=100;Right=100;Bottom=100;"));
          doc.StartA(new String("subject"), constrainId);
          doc.StartA(new String("seqno"), new String("1"));
          doc.StartA(new String("style"), new String("DUID=AE8AC20D;"));
          doc.StopE(new String("element"));
          doc.StopE(new String("elements"));
          doc.StopE(new String("diagram"));
        }
      }
    }
    doc.StopE(new String("diagrams"));
    doc.StartE(new String("connectors"));
    {

      String associationEndId = null;
      for (Iterator enm_169 = extensionConectorNonNavigable.iterator(); enm_169.hasNext(); ) {

        String elem_149 = UTIL.ConvertToString(enm_169.next());
        associationEndId = elem_149;
        {

          doc.StartE(new String("connector"));
          doc.StartA(new String("xmi:idref"), associationEndId);
          doc.StartE(new String("properties"));
          doc.StartA(new String("ea_type"), new String("Association"));
          doc.StartA(new String("direction"), new String("Unspecified"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("connector"));
        }
      }
    }
    {

      QualifierInfo qualifier = null;
      for (Iterator enm_198 = extensionConectorQualifier.iterator(); enm_198.hasNext(); ) {

        QualifierInfo elem_171 = (QualifierInfo) enm_198.next();
        qualifier = elem_171;
        {

          doc.StartE(new String("connector"));
          String par_178 = null;
          par_178 = (qualifier).AssociationId;
          doc.StartA(new String("xmi:idref"), par_178);
          doc.StartE(new String("target"));
          String par_184 = null;
          par_184 = (qualifier).ClassId;
          doc.StartA(new String("xmi:idref"), par_184);
          doc.StartE(new String("constraints"));
          String par_190 = null;
          par_190 = (qualifier).QualifierName;
          doc.StartA(new String("qualifier"), par_190);
          doc.StopE(new String("constraints"));
          doc.StopE(new String("target"));
          doc.StopE(new String("connector"));
        }
      }
    }
    {

      HashSet iset_199 = new HashSet();
      iset_199.clear();
      iset_199.addAll(dependencies.keySet());
      String dependencyId = null;
      for (Iterator enm_244 = iset_199.iterator(); enm_244.hasNext(); ) {

        String elem_200 = UTIL.ConvertToString(enm_244.next());
        dependencyId = elem_200;
        {

          doc.StartE(new String("connector"));
          doc.StartA(new String("xmi:idref"), dependencyId);
          doc.StartE(new String("source"));
          String par_214 = null;
          par_214 = (String) ((Tuple) dependencies.get(dependencyId)).GetField(new Long(2).intValue());
          doc.StartA(new String("xmi:idref"), par_214);
          doc.StopE(new String("source"));
          doc.StartE(new String("target"));
          String par_225 = null;
          par_225 = (String) ((Tuple) dependencies.get(dependencyId)).GetField(new Long(1).intValue());
          doc.StartA(new String("xmi:idref"), par_225);
          doc.StopE(new String("target"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("ea_type"), new String("Nesting"));
          doc.StartA(new String("direction"), new String("Source -&gt; Destination"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("connector"));
        }
      }
    }
    doc.StopE(new String("connectors"));
    doc.StopE(new String("xmi:Extension"));
  }
// ***** VDMTOOLS END Name=AddExstention


// ***** VDMTOOLS START Name=GenerateClassIds#1|HashSet KEEP=NO
  protected void GenerateClassIds (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_28 = iset_2.iterator(); enm_28.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_28.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlClass))) 
            succ_18 = false;
          if (succ_18) {

            IUmlModelElement tmpVal_24 = null;
            tmpVal_24 = (IUmlModelElement) c;
            IUmlClass cl = null;
            cl = (IUmlClass) tmpVal_24;
            String md_26 = null;
            md_26 = cl.getName();
            classes.put(md_26, GetNextId());
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=GenerateClassIds#1|HashSet


// ***** VDMTOOLS START Name=AddClass#1|IUmlClass KEEP=NO
  protected void AddClass (final IUmlClass cl) throws CGException {

    doc.StartE(oe);
    String par_6 = null;
    Boolean par_7 = null;
    par_7 = cl.getIsAbstract();
    par_6 = UTIL.ConvertToString(Util.ToStringBool(par_7));
    doc.StartA(new String("isAbstract"), par_6);
    String par_10 = null;
    Boolean par_11 = null;
    par_11 = cl.getIsActive();
    par_10 = UTIL.ConvertToString(Util.ToStringBool(par_11));
    doc.StartA(new String("isActive"), par_10);
    doc.StartA(new String("isLeaf"), new String("false"));
    String par_17 = null;
    par_17 = cl.getName();
    doc.StartA(new String("name"), par_17);
    doc.StartA(new String("visibility"), new String("public"));
    String par_23 = null;
    String tmppar_25 = null;
    tmppar_25 = cl.getName();
    par_23 = UTIL.ConvertToString(classes.get(tmppar_25));
    doc.StartA(ID_uTAG, par_23);
    doc.StartA(new String("xmi:type"), new String("uml:Class"));
    HashSet tmpArg_v_30 = new HashSet();
    HashSet unArg_31 = new HashSet();
    HashSet res_s_32 = new HashSet();
    {

      HashSet e_set_39 = new HashSet();
      e_set_39 = cl.getClassBody();
      IUmlDefinitionBlock df = null;
      {
        for (Iterator enm_41 = e_set_39.iterator(); enm_41.hasNext(); ) {

          IUmlDefinitionBlock elem_40 = (IUmlDefinitionBlock) enm_41.next();
          df = (IUmlDefinitionBlock) elem_40;
          if (new Boolean(df instanceof IUmlOwnedProperties).booleanValue()) {

            HashSet res_s_33 = new HashSet();
            {

              IUmlOwnedProperties d = (IUmlOwnedProperties) df;
              res_s_33 = d.getPropetityList();
            }
            res_s_32.add(res_s_33);
          }
        }
      }
    }
    unArg_31 = res_s_32;
    HashSet rduset_42 = new HashSet();
    for (Iterator enm_44 = unArg_31.iterator(); enm_44.hasNext(); ) {

      HashSet e_43 = (HashSet) enm_44.next();
      rduset_42.addAll(e_43);
    }
    tmpArg_v_30 = rduset_42;
    AddPropeties(tmpArg_v_30);
    HashSet tmpArg_v_46 = new HashSet();
    HashSet unArg_47 = new HashSet();
    HashSet res_s_48 = new HashSet();
    {

      HashSet e_set_55 = new HashSet();
      e_set_55 = cl.getClassBody();
      IUmlDefinitionBlock df = null;
      {
        for (Iterator enm_57 = e_set_55.iterator(); enm_57.hasNext(); ) {

          IUmlDefinitionBlock elem_56 = (IUmlDefinitionBlock) enm_57.next();
          df = (IUmlDefinitionBlock) elem_56;
          if (new Boolean(df instanceof IUmlOwnedOperations).booleanValue()) {

            HashSet res_s_49 = new HashSet();
            {

              IUmlOwnedOperations d = (IUmlOwnedOperations) df;
              res_s_49 = d.getOperationList();
            }
            res_s_48.add(res_s_49);
          }
        }
      }
    }
    unArg_47 = res_s_48;
    HashSet rduset_58 = new HashSet();
    for (Iterator enm_60 = unArg_47.iterator(); enm_60.hasNext(); ) {

      HashSet e_59 = (HashSet) enm_60.next();
      rduset_58.addAll(e_59);
    }
    tmpArg_v_46 = rduset_58;
    AddOperstions(tmpArg_v_46);
    Boolean cond_61 = null;
    Long var1_62 = null;
    Vector unArg_63 = null;
    unArg_63 = cl.getSuperClass();
    var1_62 = new Long(unArg_63.size());
    cond_61 = new Boolean((var1_62.intValue()) > (new Long(0).intValue()));
    if (cond_61.booleanValue()) {

      Vector tmpArg_v_66 = null;
      tmpArg_v_66 = cl.getSuperClass();
      AddGeneralization(tmpArg_v_66);
    }
    Boolean cond_67 = null;
    cond_67 = cl.hasTemplatesignature();
    if (cond_67.booleanValue()) {

      IUmlTemplateSignature tmpArg_v_69 = null;
      tmpArg_v_69 = (IUmlTemplateSignature) cl.getTemplatesignature();
      AddTemplates((IUmlTemplateSignature) tmpArg_v_69);
      String elem_71 = null;
      elem_71 = cl.getName();
      extensionTemplateClasses.add(elem_71);
    }
    doc.StopE(oe);
    String par_75 = null;
    par_75 = cl.getName();
    String par_76 = null;
    String tmppar_78 = null;
    tmppar_78 = cl.getName();
    par_76 = UTIL.ConvertToString(classes.get(tmppar_78));
    log.endClass(par_75, par_76);
    {

      HashSet ncs = new HashSet();
      HashSet res_s_81 = new HashSet();
      {

        HashSet e_set_86 = new HashSet();
        e_set_86 = cl.getClassBody();
        IUmlDefinitionBlock nc = null;
        {
          for (Iterator enm_88 = e_set_86.iterator(); enm_88.hasNext(); ) {

            IUmlDefinitionBlock elem_87 = (IUmlDefinitionBlock) enm_88.next();
            nc = (IUmlDefinitionBlock) elem_87;
            if (new Boolean(nc instanceof IUmlNestedClassifiers).booleanValue()) {
              res_s_81.add(nc);
            }
          }
        }
      }
      ncs = res_s_81;
      if (new Boolean((new Long(ncs.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

        IUmlNestedClassifiers tps = null;
        {

          HashSet tmpSet_95 = new HashSet();
          tmpSet_95 = ncs;
          IUmlNestedClassifiers n = null;
          boolean succ_97 = false;
          for (Iterator enm_99 = tmpSet_95.iterator(); enm_99.hasNext() && !succ_97; ) {

            IUmlNestedClassifiers tmpElem_98 = (IUmlNestedClassifiers) enm_99.next();
            succ_97 = true;
            n = (IUmlNestedClassifiers) tmpElem_98;
          }
          if (!succ_97) 
            UTIL.RunTime("Run-Time Error:The binding environment was empty");
          tps = (IUmlNestedClassifiers) n;
        }
        String md_101 = null;
        String tmppar_103 = null;
        tmppar_103 = cl.getName();
        md_101 = UTIL.ConvertToString(classes.get(tmppar_103));
        classIdToNestedClassifier.put(md_101, tps);
      }
    }
  }
// ***** VDMTOOLS END Name=AddClass#1|IUmlClass


// ***** VDMTOOLS START Name=AddPropeties#1|HashSet KEEP=NO
  protected void AddPropeties (final HashSet propeties) throws CGException {

    IUmlProperty prop = null;
    for (Iterator enm_84 = propeties.iterator(); enm_84.hasNext(); ) {

      IUmlProperty elem_3 = (IUmlProperty) enm_84.next();
      prop = (IUmlProperty) elem_3;
      {

        doc.StartE(new String("ownedAttribute"));
        String par_10 = null;
        par_10 = prop.getName();
        doc.StartA(new String("name"), par_10);
        doc.StartA(new String("ownerScope"), new String("instance"));
        Boolean cond_14 = null;
        cond_14 = prop.hasIsReadOnly();
        if (cond_14.booleanValue()) {

          String par_17 = null;
          Boolean par_18 = null;
          par_18 = prop.getIsReadOnly();
          par_17 = UTIL.ConvertToString(StdLib.ToStringBool(par_18));
          doc.StartA(new String("isReadOnly"), par_17);
        }
        Boolean cond_19 = null;
        cond_19 = prop.hasIsStatic();
        if (cond_19.booleanValue()) {

          String par_22 = null;
          Boolean par_23 = null;
          par_23 = prop.getIsStatic();
          par_22 = UTIL.ConvertToString(Util.ToStringBool(par_23));
          doc.StartA(new String("isStatic"), par_22);
        }
        String par_26 = null;
        IUmlVisibilityKind par_27 = null;
        par_27 = (IUmlVisibilityKind) prop.getVisibility();
        par_26 = GetVisibilityKind((IUmlVisibilityKind) par_27);
        doc.StartA(new String("visibility"), par_26);
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("xmi:type"), new String("uml:Property"));
        Boolean cond_34 = null;
        cond_34 = prop.hasMultiplicity();
        if (cond_34.booleanValue()) {

          String par_37 = null;
          Boolean par_38 = null;
          IUmlMultiplicityElement obj_39 = null;
          obj_39 = (IUmlMultiplicityElement) prop.getMultiplicity();
          par_38 = obj_39.getIsOrdered();
          par_37 = UTIL.ConvertToString(Util.ToStringBool(par_38));
          doc.StartA(new String("isOrdered"), par_37);
          IUmlMultiplicityElement tmpArg_v_41 = null;
          tmpArg_v_41 = (IUmlMultiplicityElement) prop.getMultiplicity();
          AddAssociationMp((IUmlMultiplicityElement) tmpArg_v_41);
        }
        Boolean cond_42 = null;
        cond_42 = prop.hasDefault();
        if (cond_42.booleanValue()) {

          doc.StartE(new String("defaultValue"));
          boolean succ_45 = true;
          {

            succ_45 = true;
            Boolean tmpVal_v_59 = null;
            IUmlValueSpecification obj_60 = null;
            obj_60 = (IUmlValueSpecification) prop.getDefault();
            tmpVal_v_59 = new Boolean(obj_60 instanceof IUmlLiteralString);
            if (!UTIL.equals(new Boolean(true), tmpVal_v_59)) 
              succ_45 = false;
            if (succ_45) {

              IUmlLiteralString ls = null;
              ls = (IUmlLiteralString) prop.getDefault();
              {

                doc.StartA(new String("xmi:type"), new String("uml:LiteralString"));
                String par_68 = null;
                par_68 = ls.getValue();
                doc.StartA(new String("value"), par_68);
              }
            }
            else {

              succ_45 = true;
              Boolean tmpVal_v_48 = null;
              IUmlValueSpecification obj_49 = null;
              obj_49 = (IUmlValueSpecification) prop.getDefault();
              tmpVal_v_48 = new Boolean(obj_49 instanceof IUmlLiteralInteger);
              if (!UTIL.equals(new Boolean(true), tmpVal_v_48)) 
                succ_45 = false;
              if (succ_45) {

                IUmlLiteralInteger li = null;
                li = (IUmlLiteralInteger) prop.getDefault();
                {

                  doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
                  String par_57 = null;
                  Long par_58 = null;
                  par_58 = li.getValue();
                  par_57 = UTIL.ConvertToString(StdLib.ToStringInt(par_58));
                  doc.StartA(new String("value"), par_57);
                }
              }
            }
          }
          doc.StartA(ID_uTAG, GetNextId());
          doc.StopE(new String("defaultValue"));
        }
        doc.StartE(new String("type"));
        String par_78 = null;
        IUmlType par_79 = null;
        par_79 = (IUmlType) prop.getType();
        par_78 = GetUmlPrimitiveTypeId((IUmlType) par_79);
        doc.StartA(new String("xmi:idref"), par_78);
        doc.StopE(new String("type"));
        doc.StopE(new String("ownedAttribute"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddPropeties#1|HashSet


// ***** VDMTOOLS START Name=AddOperstions#1|HashSet KEEP=NO
  protected void AddOperstions (final HashSet ops) throws CGException {

    IUmlOperation op = null;
    for (Iterator enm_43 = ops.iterator(); enm_43.hasNext(); ) {

      IUmlOperation elem_3 = (IUmlOperation) enm_43.next();
      op = (IUmlOperation) elem_3;
      {

        doc.StartE(new String("ownedOperation"));
        doc.StartA(new String("isAbstract"), new String("false"));
        doc.StartA(new String("isLeaf"), new String("false"));
        Boolean cond_14 = null;
        cond_14 = op.getIsQuery();
        if (cond_14.booleanValue()) 
          doc.StartA(new String("isQuery"), new String("true"));
        else 
          doc.StartA(new String("isQuery"), new String("false"));
        String par_23 = null;
        par_23 = op.getName();
        doc.StartA(new String("name"), par_23);
        doc.StartA(new String("ownerScope"), new String("instance"));
        String par_29 = null;
        IUmlVisibilityKind par_30 = null;
        par_30 = (IUmlVisibilityKind) op.getVisibility();
        par_29 = GetVisibilityKind((IUmlVisibilityKind) par_30);
        doc.StartA(new String("visibility"), par_29);
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("xmi:type"), new String("uml:Operation"));
        Boolean cond_37 = null;
        cond_37 = op.hasOwnedParameters();
        if (cond_37.booleanValue()) {

          Vector tmpArg_v_39 = null;
          IUmlParameters obj_40 = null;
          obj_40 = (IUmlParameters) op.getOwnedParameters();
          tmpArg_v_39 = obj_40.getParameterList();
          AddOperstionParameters(tmpArg_v_39);
        }
        doc.StopE(new String("ownedOperation"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddOperstions#1|HashSet


// ***** VDMTOOLS START Name=AddOperstionParameters#1|Vector KEEP=NO
  protected void AddOperstionParameters (final Vector pars) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet riseq_11 = new HashSet();
    int max_12 = pars.size();
    for (int i_13 = 1; i_13 <= max_12; i_13++) 
      riseq_11.add(new Long(i_13));
    iset_2 = riseq_11;
    Long i = null;
    for (Iterator enm_41 = iset_2.iterator(); enm_41.hasNext(); ) {

      Long elem_3 = UTIL.NumberToLong(enm_41.next());
      i = elem_3;
      {

        doc.StartE(new String("ownedParameter"));
        String par_18 = null;
        IUmlParameter obj_19 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= pars.size())) 
          obj_19 = (IUmlParameter) pars.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        par_18 = obj_19.getName();
        doc.StartA(new String("name"), par_18);
        String par_24 = null;
        IUmlParameterDirectionKind par_25 = null;
        IUmlParameter obj_26 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= pars.size())) 
          obj_26 = (IUmlParameter) pars.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        par_25 = (IUmlParameterDirectionKind) obj_26.getDirection();
        par_24 = ConvertParameterDirectionKind((IUmlParameterDirectionKind) par_25);
        doc.StartA(new String("direction"), par_24);
        doc.StartA(ID_uTAG, GetNextId());
        String par_34 = null;
        IUmlType par_35 = null;
        IUmlParameter obj_36 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= pars.size())) 
          obj_36 = (IUmlParameter) pars.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        par_35 = (IUmlType) obj_36.getType();
        par_34 = GetTypeId((IUmlType) par_35);
        doc.StartA(new String("type"), par_34);
        doc.StopE(new String("ownedParameter"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddOperstionParameters#1|Vector


// ***** VDMTOOLS START Name=ConvertParameterDirectionKind#1|IUmlParameterDirectionKind KEEP=NO
  protected String ConvertParameterDirectionKind (final IUmlParameterDirectionKind dir) throws CGException {

    String rexpr_2 = null;
    Long selRes_4 = null;
    selRes_4 = dir.getValue();
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlParameterDirectionKindQuotes.IQRETURN)) 
        succ_3 = false;
      if (succ_3) 
        rexpr_2 = new String("return");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlParameterDirectionKindQuotes.IQIN)) 
        succ_3 = false;
      if (succ_3) 
        rexpr_2 = new String("in");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlParameterDirectionKindQuotes.IQOUT)) 
        succ_3 = false;
      if (succ_3) 
        rexpr_2 = new String("out");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlParameterDirectionKindQuotes.IQINOUT)) 
        succ_3 = false;
      if (succ_3) 
        rexpr_2 = new String("inout");
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=ConvertParameterDirectionKind#1|IUmlParameterDirectionKind


// ***** VDMTOOLS START Name=AddAssociation#1|IUmlAssociation KEEP=NO
  protected void AddAssociation (final IUmlAssociation association) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("isAbstract"), new String("false"));
    doc.StartA(new String("isDerived"), new String("false"));
    doc.StartA(new String("isLeaf"), new String("false"));
    doc.StartA(new String("name"), new String(""));
    {

      String associationId = GetNextId();
      {

        doc.StartA(ID_uTAG, associationId);
        String md_22 = null;
        md_22 = association.getId();
        associationIdMap.put(md_22, associationId);
        doc.StartA(new String("xmi:type"), new String("uml:Association"));
        {

          Vector unNamedProps = null;
          HashSet par_29 = new HashSet();
          HashSet var1_30 = new HashSet();
          HashSet res_s_31 = new HashSet();
          {

            HashSet e_set_40 = new HashSet();
            e_set_40 = association.getOwnedEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_42 = e_set_40.iterator(); enm_42.hasNext(); ) {

                IUmlProperty elem_41 = (IUmlProperty) enm_42.next();
                p = (IUmlProperty) elem_41;
                Boolean pred_35 = null;
                Long var1_36 = null;
                String unArg_37 = null;
                unArg_37 = p.getName();
                var1_36 = new Long(unArg_37.length());
                pred_35 = new Boolean(var1_36.intValue() == new Long(0).intValue());
                if (pred_35.booleanValue()) {

                  QualifierEnd res_s_32 = null;
                  res_s_32 = new QualifierEnd((IUmlProperty) p, new Boolean(false));
                  res_s_31.add(res_s_32);
                }
              }
            }
          }
          var1_30 = res_s_31;
          HashSet var2_43 = new HashSet();
          HashSet res_s_44 = new HashSet();
          {

            HashSet e_set_53 = new HashSet();
            e_set_53 = association.getOwnedNavigableEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_55 = e_set_53.iterator(); enm_55.hasNext(); ) {

                IUmlProperty elem_54 = (IUmlProperty) enm_55.next();
                p = (IUmlProperty) elem_54;
                Boolean pred_48 = null;
                Long var1_49 = null;
                String unArg_50 = null;
                unArg_50 = p.getName();
                var1_49 = new Long(unArg_50.length());
                pred_48 = new Boolean(var1_49.intValue() == new Long(0).intValue());
                if (pred_48.booleanValue()) {

                  QualifierEnd res_s_45 = null;
                  res_s_45 = new QualifierEnd((IUmlProperty) p, new Boolean(true));
                  res_s_44.add(res_s_45);
                }
              }
            }
          }
          var2_43 = res_s_44;
          par_29 = (HashSet) var1_30.clone();
          par_29.addAll(var2_43);
          unNamedProps = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_29));
          Vector namedProps = null;
          HashSet par_57 = new HashSet();
          HashSet var1_58 = new HashSet();
          HashSet res_s_59 = new HashSet();
          {

            HashSet e_set_68 = new HashSet();
            e_set_68 = association.getOwnedEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_70 = e_set_68.iterator(); enm_70.hasNext(); ) {

                IUmlProperty elem_69 = (IUmlProperty) enm_70.next();
                p = (IUmlProperty) elem_69;
                Boolean pred_63 = null;
                Long var1_64 = null;
                String unArg_65 = null;
                unArg_65 = p.getName();
                var1_64 = new Long(unArg_65.length());
                pred_63 = new Boolean((var1_64.intValue()) > (new Long(0).intValue()));
                if (pred_63.booleanValue()) {

                  QualifierEnd res_s_60 = null;
                  res_s_60 = new QualifierEnd((IUmlProperty) p, new Boolean(false));
                  res_s_59.add(res_s_60);
                }
              }
            }
          }
          var1_58 = res_s_59;
          HashSet var2_71 = new HashSet();
          HashSet res_s_72 = new HashSet();
          {

            HashSet e_set_81 = new HashSet();
            e_set_81 = association.getOwnedNavigableEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_83 = e_set_81.iterator(); enm_83.hasNext(); ) {

                IUmlProperty elem_82 = (IUmlProperty) enm_83.next();
                p = (IUmlProperty) elem_82;
                Boolean pred_76 = null;
                Long var1_77 = null;
                String unArg_78 = null;
                unArg_78 = p.getName();
                var1_77 = new Long(unArg_78.length());
                pred_76 = new Boolean((var1_77.intValue()) > (new Long(0).intValue()));
                if (pred_76.booleanValue()) {

                  QualifierEnd res_s_73 = null;
                  res_s_73 = new QualifierEnd((IUmlProperty) p, new Boolean(true));
                  res_s_72.add(res_s_73);
                }
              }
            }
          }
          var2_71 = res_s_72;
          par_57 = (HashSet) var1_58.clone();
          par_57.addAll(var2_71);
          namedProps = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_57));
          Vector props = null;
          props = (Vector) unNamedProps.clone();
          props.addAll(namedProps);
          {

            HashSet iset_87 = new HashSet();
            HashSet riseq_96 = new HashSet();
            int max_97 = props.size();
            for (int i_98 = 1; i_98 <= max_97; i_98++) 
              riseq_96.add(new Long(i_98));
            iset_87 = riseq_96;
            Long i = null;
            for (Iterator enm_215 = iset_87.iterator(); enm_215.hasNext(); ) {

              Long elem_88 = UTIL.NumberToLong(enm_215.next());
              i = elem_88;
              {

                QualifierEnd prop = null;
                if ((1 <= i.intValue()) && (i.intValue() <= props.size())) 
                  prop = (QualifierEnd) props.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                {

                  Boolean cond_103 = null;
                  IUmlProperty obj_104 = null;
                  obj_104 = (IUmlProperty) (prop).Property;
                  cond_103 = obj_104.hasQualifier();
                  if (cond_103.booleanValue()) {

                    QualifierInfo elem_107 = null;
                    String tmpVar_109 = null;
                    UmlClassNameType par_110 = null;
                    String arg_111 = null;
                    IUmlProperty obj_112 = null;
                    obj_112 = (IUmlProperty) (prop).Property;
                    arg_111 = obj_112.getOwnerClass();
                    par_110 = new UmlClassNameType(arg_111);
                    tmpVar_109 = GetTypeId((IUmlType) par_110);
                    String tmpVar_114 = null;
                    HashMap tmp_m_115 = new HashMap();
                    tmp_m_115 = new HashMap();
                    HashMap mapType_117 = primitiveTypes;
                    for (Iterator enm_121 = mapType_117.keySet().iterator(); enm_121.hasNext(); ) {

                      Object dom_122 = enm_121.next();
                      String id_d_119 = UTIL.ConvertToString(dom_122);
                      String id_r_118 = UTIL.ConvertToString(mapType_117.get(dom_122));
                      if (tmp_m_115.containsKey(id_r_118)) 
                        UTIL.RunTime("Run-Time Error:Map is not injective - \'inverse\' fails");
                      else 
                        tmp_m_115.put(id_r_118, id_d_119);
                    }
                    String tmppar_123 = null;
                    IUmlType par_124 = null;
                    IUmlProperty obj_125 = null;
                    obj_125 = (IUmlProperty) (prop).Property;
                    par_124 = (IUmlType) obj_125.getQualifier();
                    tmppar_123 = GetUmlPrimitiveTypeId((IUmlType) par_124);
                    tmpVar_114 = UTIL.ConvertToString(tmp_m_115.get(tmppar_123));
                    elem_107 = new QualifierInfo(associationId, tmpVar_109, tmpVar_114);
                    extensionConectorQualifier.add(elem_107);
                  }
                  doc.StartE(new String("ownedEnd"));
                  doc.StartA(new String("aggregation"), new String("none"));
                  doc.StartA(new String("association"), associationId);
                  String par_137 = null;
                  Boolean par_138 = null;
                  par_138 = (prop).IsNavigable;
                  par_137 = UTIL.ConvertToString(Util.ToStringBool(par_138));
                  doc.StartA(new String("isNavigable"), par_137);
                  Boolean cond_140 = null;
                  Long var1_141 = null;
                  String unArg_142 = null;
                  IUmlProperty obj_143 = null;
                  obj_143 = (IUmlProperty) (prop).Property;
                  unArg_142 = obj_143.getName();
                  var1_141 = new Long(unArg_142.length());
                  cond_140 = new Boolean((var1_141.intValue()) > (new Long(0).intValue()));
                  if (cond_140.booleanValue()) {

                    String par_151 = null;
                    IUmlProperty obj_152 = null;
                    obj_152 = (IUmlProperty) (prop).Property;
                    par_151 = obj_152.getName();
                    doc.StartA(new String("name"), par_151);
                  }
                  else 
                    doc.StartA(new String("name"), new String(""));
                  String par_156 = null;
                  IUmlVisibilityKind par_157 = null;
                  IUmlProperty obj_158 = null;
                  obj_158 = (IUmlProperty) (prop).Property;
                  par_157 = (IUmlVisibilityKind) obj_158.getVisibility();
                  par_156 = GetVisibilityKind((IUmlVisibilityKind) par_157);
                  doc.StartA(new String("visibility"), par_156);
                  {

                    String associationEndId = GetNextId();
                    {

                      doc.StartA(ID_uTAG, associationEndId);
                      doc.StartA(new String("xmi:type"), new String("uml:Property"));
                      Boolean cond_168 = null;
                      IUmlProperty obj_169 = null;
                      obj_169 = (IUmlProperty) (prop).Property;
                      cond_168 = obj_169.hasMultiplicity();
                      if (cond_168.booleanValue()) {

                        String par_173 = null;
                        Boolean par_174 = null;
                        IUmlMultiplicityElement obj_175 = null;
                        IUmlProperty obj_176 = null;
                        obj_176 = (IUmlProperty) (prop).Property;
                        obj_175 = (IUmlMultiplicityElement) obj_176.getMultiplicity();
                        par_174 = obj_175.getIsOrdered();
                        par_173 = UTIL.ConvertToString(Util.ToStringBool(par_174));
                        doc.StartA(new String("isOrdered"), par_173);
                        IUmlMultiplicityElement tmpArg_v_179 = null;
                        IUmlProperty obj_180 = null;
                        obj_180 = (IUmlProperty) (prop).Property;
                        tmpArg_v_179 = (IUmlMultiplicityElement) obj_180.getMultiplicity();
                        AddAssociationMp((IUmlMultiplicityElement) tmpArg_v_179);
                      }
                      Boolean cond_182 = null;
                      Boolean unArg_183 = null;
                      unArg_183 = (prop).IsNavigable;
                      cond_182 = new Boolean(!unArg_183.booleanValue());
                      if (cond_182.booleanValue()) 
                        extensionConectorNonNavigable.add(associationEndId);
                      Boolean cond_187 = null;
                      IUmlProperty obj_188 = null;
                      obj_188 = (IUmlProperty) (prop).Property;
                      cond_187 = obj_188.hasIsStatic();
                      if (cond_187.booleanValue()) {

                        String par_192 = null;
                        Boolean par_193 = null;
                        IUmlProperty obj_194 = null;
                        obj_194 = (IUmlProperty) (prop).Property;
                        par_193 = obj_194.getIsStatic();
                        par_192 = UTIL.ConvertToString(Util.ToStringBool(par_193));
                        doc.StartA(new String("isStatic"), par_192);
                      }
                      doc.StartE(new String("type"));
                      String par_200 = null;
                      IUmlType par_201 = null;
                      IUmlProperty obj_202 = null;
                      obj_202 = (IUmlProperty) (prop).Property;
                      par_201 = (IUmlType) obj_202.getType();
                      par_200 = GetTypeId((IUmlType) par_201);
                      doc.StartA(new String("xmi:idref"), par_200);
                      doc.StopE(new String("type"));
                      doc.StopE(new String("ownedEnd"));
                      doc.StartE(new String("memberEnd"));
                      doc.StartA(new String("xmi:idref"), associationEndId);
                      doc.StopE(new String("memberEnd"));
                    }
                  }
                }
              }
            }
          }
        }
        doc.StopE(oe);
      }
    }
  }
// ***** VDMTOOLS END Name=AddAssociation#1|IUmlAssociation


// ***** VDMTOOLS START Name=AddAssociationMp#1|IUmlMultiplicityElement KEEP=NO
  protected void AddAssociationMp (final IUmlMultiplicityElement me) throws CGException {

    doc.StartE(new String("lowerValue"));
    String par_6 = null;
    Long par_7 = null;
    par_7 = me.getLower();
    par_6 = UTIL.ConvertToString(Util.ToString(par_7));
    doc.StartA(new String("value"), par_6);
    doc.StartA(ID_uTAG, GetNextId());
    doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
    doc.StopE(new String("lowerValue"));
    Boolean cond_16 = null;
    cond_16 = me.hasUpper();
    if (cond_16.booleanValue()) {

      doc.StartE(new String("upperValue"));
      String par_34 = null;
      Long par_35 = null;
      par_35 = me.getUpper();
      par_34 = UTIL.ConvertToString(Util.ToString(par_35));
      doc.StartA(new String("value"), par_34);
      doc.StartA(ID_uTAG, GetNextId());
      doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
      doc.StopE(new String("upperValue"));
    }
    else {

      doc.StartE(new String("upperValue"));
      doc.StartA(new String("value"), new String("*"));
      doc.StartA(ID_uTAG, GetNextId());
      doc.StartA(new String("xmi:type"), new String("uml:LiteralString"));
      doc.StopE(new String("upperValue"));
    }
  }
// ***** VDMTOOLS END Name=AddAssociationMp#1|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=AddGeneralization#1|Vector KEEP=NO
  protected void AddGeneralization (final Vector supers) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet set_10 = new HashSet();
    Enumeration enm_11 = supers.elements();
    while ( enm_11.hasMoreElements())
      set_10.add(enm_11.nextElement());
    iset_2 = set_10;
    IUmlClassNameType a = null;
    for (Iterator enm_27 = iset_2.iterator(); enm_27.hasNext(); ) {

      IUmlClassNameType elem_3 = (IUmlClassNameType) enm_27.next();
      a = (IUmlClassNameType) elem_3;
      {

        doc.StartE(new String("generalization"));
        doc.StartA(new String("xmi:type"), new String("uml:Generalization"));
        doc.StartA(ID_uTAG, GetNextId());
        String par_22 = null;
        String tmppar_24 = null;
        tmppar_24 = a.getName();
        par_22 = UTIL.ConvertToString(classes.get(tmppar_24));
        doc.StartA(new String("general"), par_22);
        doc.StopE(new String("generalization"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddGeneralization#1|Vector


// ***** VDMTOOLS START Name=AddTemplates#1|IUmlTemplateSignature KEEP=NO
  protected void AddTemplates (final IUmlTemplateSignature tps) throws CGException {

    doc.StartE(new String("ownedTemplateSignature"));
    doc.StartA(new String("xmi:type"), new String("uml:TemplateSignature"));
    doc.StartA(ID_uTAG, GetNextId());
    {

      HashSet iset_10 = new HashSet();
      iset_10 = tps.getTemplateParameters();
      IUmlTemplateParameter a = null;
      for (Iterator enm_47 = iset_10.iterator(); enm_47.hasNext(); ) {

        IUmlTemplateParameter elem_11 = (IUmlTemplateParameter) enm_47.next();
        a = (IUmlTemplateParameter) elem_11;
        {

          String parameterId = GetNextId();
          doc.StartE(new String("ownedParameter"));
          doc.StartA(new String("xmi:type"), new String("uml:ClassifierTemplateParameter"));
          doc.StartA(ID_uTAG, parameterId);
          doc.StartE(new String("ownedElement"));
          doc.StartA(new String("xmi:type"), new String("uml:Class"));
          doc.StartA(ID_uTAG, GetNextId());
          String par_32 = null;
          par_32 = a.getName();
          doc.StartA(new String("name"), par_32);
          doc.StartA(new String("templateParameter"), parameterId);
          doc.StopE(new String("ownedElement"));
          doc.StopE(new String("ownedParameter"));
          doc.StartE(new String("parameter"));
          doc.StartA(new String("xmi:idref"), parameterId);
          doc.StopE(new String("parameter"));
        }
      }
    }
    doc.StopE(new String("ownedTemplateSignature"));
  }
// ***** VDMTOOLS END Name=AddTemplates#1|IUmlTemplateSignature


// ***** VDMTOOLS START Name=AddNestedClassifiers KEEP=NO
  private void AddNestedClassifiers () throws CGException {

    HashSet iset_1 = new HashSet();
    iset_1.clear();
    iset_1.addAll(classIdToNestedClassifier.keySet());
    String a = null;
    for (Iterator enm_12 = iset_1.iterator(); enm_12.hasNext(); ) {

      String elem_2 = UTIL.ConvertToString(enm_12.next());
      a = elem_2;
      AddNestedClassifiers(a, (IUmlNestedClassifiers) (IUmlNestedClassifiers) classIdToNestedClassifier.get(a));
    }
  }
// ***** VDMTOOLS END Name=AddNestedClassifiers


// ***** VDMTOOLS START Name=AddNestedClassifiers#2|String|IUmlNestedClassifiers KEEP=NO
  protected void AddNestedClassifiers (final String ownerId, final IUmlNestedClassifiers nc) throws CGException {

    HashSet iset_3 = new HashSet();
    iset_3 = nc.getTypeList();
    IUmlType a = null;
    for (Iterator enm_41 = iset_3.iterator(); enm_41.hasNext(); ) {

      IUmlType elem_4 = (IUmlType) enm_41.next();
      a = (IUmlType) elem_4;
      if (new Boolean(a instanceof IUmlClassNameType).booleanValue()) {

        IUmlClassNameType ct = (IUmlClassNameType) a;
        {

          String ncId = GetNextId();
          doc.StartE(new String("packagedElement"));
          doc.StartA(new String("xmi:type"), new String("uml:Dependency"));
          doc.StartA(new String("visibility"), new String("public"));
          doc.StartA(ID_uTAG, ncId);
          doc.StartA(new String("supplier"), ownerId);
          String par_29 = null;
          String tmppar_31 = null;
          tmppar_31 = ct.getName();
          par_29 = UTIL.ConvertToString(classes.get(tmppar_31));
          if(par_29==null)
          doc.StartA(new String("client"), par_29);
          else
        	  System.out.println("Client attribute skipped: "+ ct.getName());
          doc.StopE(new String("packagedElement"));
          Tuple mr_36 = new Tuple(2);
          mr_36 = new Tuple(2);
          mr_36.SetField(1, ownerId);
          String tmpVar_38 = null;
          String tmppar_40 = null;
          tmppar_40 = ct.getName();
          tmpVar_38 = UTIL.ConvertToString(classes.get(tmppar_40));
          mr_36.SetField(2, tmpVar_38);
          dependencies.put(ncId, mr_36);
        }
      }
      else 
        log.info(new String("Cannot handle nested type"));
    }
  }
// ***** VDMTOOLS END Name=AddNestedClassifiers#2|String|IUmlNestedClassifiers


// ***** VDMTOOLS START Name=GetUmlPrimitiveTypeId#1|IUmlType KEEP=NO
  protected String GetUmlPrimitiveTypeId (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
        succ_2 = false;
      if (succ_2) 
        return UTIL.ConvertToString(primitiveTypes.get(new String("bool")));
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
          succ_2 = false;
        if (succ_2) 
          return UTIL.ConvertToString(primitiveTypes.get(new String("int")));
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
            succ_2 = false;
          if (succ_2) 
            return UTIL.ConvertToString(primitiveTypes.get(new String("unlimitedNatural")));
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
              succ_2 = false;
            if (succ_2) 
              return UTIL.ConvertToString(primitiveTypes.get(new String("char")));
            else 
              return UTIL.ConvertToString(primitiveTypes.get(new String("String")));
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=GetUmlPrimitiveTypeId#1|IUmlType


// ***** VDMTOOLS START Name=AddStdTypes KEEP=NO
  protected void AddStdTypes () throws CGException {

    primitiveTypes.put(new String("bool"), AddPrimitiveType(new String("bool")));
    primitiveTypes.put(new String("int"), AddPrimitiveType(new String("int")));
    primitiveTypes.put(new String("char"), AddPrimitiveType(new String("char")));
    primitiveTypes.put(new String("unlimitedNatural"), AddPrimitiveType(new String("unlimitedNatural")));
    primitiveTypes.put(new String("String"), AddPrimitiveType(new String("String")));
    primitiveTypes.put(new String("NotSupportedType"), AddPrimitiveType(new String("NotSupportedType")));
  }
// ***** VDMTOOLS END Name=AddStdTypes


// ***** VDMTOOLS START Name=AddPrimitiveType#1|String KEEP=NO
  protected String AddPrimitiveType (final String typeName) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("name"), typeName);
    doc.StartA(new String("visibility"), new String("public"));
    doc.StartA(new String("isAbstract"), new String("false"));
    doc.StartA(new String("isActive"), new String("false"));
    doc.StartA(new String("isLeaf"), new String("false"));
    {

      String tid = GetNextId();
      {

        doc.StartA(ID_uTAG, tid);
        doc.StartA(new String("xmi:type"), new String("uml:Class"));
        doc.StopE(oe);
        return tid;
      }
    }
  }
// ***** VDMTOOLS END Name=AddPrimitiveType#1|String


// ***** VDMTOOLS START Name=GetTypeId#1|IUmlType KEEP=NO
  protected String GetTypeId (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlClassNameType))) 
        succ_2 = false;
      if (succ_2) {

        IUmlClassNameType qc = (IUmlClassNameType) t;
        {

          Boolean cond_22 = null;
          boolean tmpQuant_23 = false;
          {

            HashSet e_set_28 = new HashSet();
            e_set_28.clear();
            e_set_28.addAll(classes.keySet());
            String x = null;
            {
              for (Iterator enm_31 = e_set_28.iterator(); enm_31.hasNext() && !tmpQuant_23; ) {

                String elem_30 = UTIL.ConvertToString(enm_31.next());
                x = elem_30;
                Boolean pred_24 = null;
                String var2_26 = null;
                var2_26 = qc.getName();
                pred_24 = new Boolean(UTIL.equals(x, var2_26));
                if (pred_24.booleanValue()) 
                  tmpQuant_23 = true;
              }
            }
          }
          cond_22 = new Boolean(tmpQuant_23);
          if (cond_22.booleanValue()) {

            String rexpr_35 = null;
            String tmppar_37 = null;
            tmppar_37 = qc.getName();
            rexpr_35 = UTIL.ConvertToString(classes.get(tmppar_37));
            return rexpr_35;
          }
          else 
            return UTIL.ConvertToString(primitiveTypes.get(new String("NotSupportedType")));
        }
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
          succ_2 = false;
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
            succ_2 = false;
        }
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
            succ_2 = false;
        }
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
            succ_2 = false;
        }
        if (succ_2) 
          return GetUmlPrimitiveTypeId((IUmlType) t);
        else 
          return UTIL.ConvertToString(primitiveTypes.get(new String("NotSupportedType")));
      }
    }
  }
// ***** VDMTOOLS END Name=GetTypeId#1|IUmlType


// ***** VDMTOOLS START Name=GetNextId KEEP=NO
  protected String GetNextId () throws CGException {

    id = UTIL.NumberToLong(UTIL.clone(new Long(id.intValue() + new Long(1).intValue())));
    return GetId(id);
  }
// ***** VDMTOOLS END Name=GetNextId


// ***** VDMTOOLS START Name=GetId#1|Long KEEP=NO
  protected String GetId (final Long idNum) throws CGException {

    String varRes_2 = null;
    String var2_4 = null;
    var2_4 = UTIL.ConvertToString(Util.ToString(idNum));
    varRes_2 = new String("VDM.").concat(var2_4);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetId#1|Long


// ***** VDMTOOLS START Name=GetVisibilityKind#1|IUmlVisibilityKind KEEP=NO
  protected String GetVisibilityKind (final IUmlVisibilityKind visibility) throws CGException {

    String varRes_2 = null;
    Long selRes_4 = null;
    selRes_4 = visibility.getValue();
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlVisibilityKindQuotes.IQPUBLIC)) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("public");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlVisibilityKindQuotes.IQPRIVATE)) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("private");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlVisibilityKindQuotes.IQPROTECTED)) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("protected");
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetVisibilityKind#1|IUmlVisibilityKind

}
;