


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-10-16 by the VDM++ to JAVA Code Generator
// (v8.2.1b - Wed 15-Jul-2009 14:09:22)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.uml;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.api.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class UmlProperty extends IUmlProperty {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivName KEEP=NO
  private String ivName = null;
// ***** VDMTOOLS END Name=ivName

// ***** VDMTOOLS START Name=ivVisibility KEEP=NO
  private IUmlVisibilityKind ivVisibility = null;
// ***** VDMTOOLS END Name=ivVisibility

// ***** VDMTOOLS START Name=ivMultiplicity KEEP=NO
  private IUmlMultiplicityElement ivMultiplicity = null;
// ***** VDMTOOLS END Name=ivMultiplicity

// ***** VDMTOOLS START Name=ivType KEEP=NO
  private IUmlType ivType = null;
// ***** VDMTOOLS END Name=ivType

// ***** VDMTOOLS START Name=ivIsReadOnly KEEP=NO
  private Boolean ivIsReadOnly = null;
// ***** VDMTOOLS END Name=ivIsReadOnly

// ***** VDMTOOLS START Name=ivDefault KEEP=NO
  private IUmlValueSpecification ivDefault = null;
// ***** VDMTOOLS END Name=ivDefault

// ***** VDMTOOLS START Name=ivIsComposite KEEP=NO
  private Boolean ivIsComposite = null;
// ***** VDMTOOLS END Name=ivIsComposite

// ***** VDMTOOLS START Name=ivIsDerived KEEP=NO
  private Boolean ivIsDerived = null;
// ***** VDMTOOLS END Name=ivIsDerived

// ***** VDMTOOLS START Name=ivIsStatic KEEP=NO
  private Boolean ivIsStatic = null;
// ***** VDMTOOLS END Name=ivIsStatic

// ***** VDMTOOLS START Name=ivOwnerClass KEEP=NO
  private String ivOwnerClass = null;
// ***** VDMTOOLS END Name=ivOwnerClass

// ***** VDMTOOLS START Name=ivQualifier KEEP=NO
  private IUmlType ivQualifier = null;
// ***** VDMTOOLS END Name=ivQualifier


// ***** VDMTOOLS START Name=vdm_init_UmlProperty KEEP=NO
  private void vdm_init_UmlProperty () throws CGException {
    try {

      ivName = UTIL.ConvertToString(new String());
      ivVisibility = null;
      ivMultiplicity = null;
      ivType = null;
      ivIsReadOnly = null;
      ivDefault = null;
      ivIsComposite = null;
      ivIsDerived = null;
      ivIsStatic = null;
      ivOwnerClass = UTIL.ConvertToString(new String());
      ivQualifier = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_UmlProperty


// ***** VDMTOOLS START Name=UmlProperty KEEP=NO
  public UmlProperty () throws CGException {
    vdm_init_UmlProperty();
  }
// ***** VDMTOOLS END Name=UmlProperty


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("Property");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IUmlVisitor KEEP=NO
  public void accept (final IUmlVisitor pVisitor) throws CGException {
    pVisitor.visitProperty((IUmlProperty) this);
  }
// ***** VDMTOOLS END Name=accept#1|IUmlVisitor


// ***** VDMTOOLS START Name=UmlProperty#11|String|IUmlVisibilityKind|IUmlMultiplicityElement|IUmlType|Boolean|IUmlValueSpecification|Boolean|Boolean|Boolean|String|IUmlType KEEP=NO
  public UmlProperty (final String p1, final IUmlVisibilityKind p2, final IUmlMultiplicityElement p3, final IUmlType p4, final Boolean p5, final IUmlValueSpecification p6, final Boolean p7, final Boolean p8, final Boolean p9, final String p10, final IUmlType p11) throws CGException {

    vdm_init_UmlProperty();
    {

      setName(p1);
      setVisibility((IUmlVisibilityKind) p2);
      setMultiplicity((IUmlMultiplicityElement) p3);
      setType((IUmlType) p4);
      setIsReadOnly(p5);
      setDefault((IUmlValueSpecification) p6);
      setIsComposite(p7);
      setIsDerived(p8);
      setIsStatic(p9);
      setOwnerClass(p10);
      setQualifier((IUmlType) p11);
    }
  }
// ***** VDMTOOLS END Name=UmlProperty#11|String|IUmlVisibilityKind|IUmlMultiplicityElement|IUmlType|Boolean|IUmlValueSpecification|Boolean|Boolean|Boolean|String|IUmlType


// ***** VDMTOOLS START Name=UmlProperty#13|String|IUmlVisibilityKind|IUmlMultiplicityElement|IUmlType|Boolean|IUmlValueSpecification|Boolean|Boolean|Boolean|String|IUmlType|Long|Long KEEP=NO
  public UmlProperty (final String p1, final IUmlVisibilityKind p2, final IUmlMultiplicityElement p3, final IUmlType p4, final Boolean p5, final IUmlValueSpecification p6, final Boolean p7, final Boolean p8, final Boolean p9, final String p10, final IUmlType p11, final Long line, final Long column) throws CGException {

    vdm_init_UmlProperty();
    {

      setName(p1);
      setVisibility((IUmlVisibilityKind) p2);
      setMultiplicity((IUmlMultiplicityElement) p3);
      setType((IUmlType) p4);
      setIsReadOnly(p5);
      setDefault((IUmlValueSpecification) p6);
      setIsComposite(p7);
      setIsDerived(p8);
      setIsStatic(p9);
      setOwnerClass(p10);
      setQualifier((IUmlType) p11);
      setPosition(line, column);
    }
  }
// ***** VDMTOOLS END Name=UmlProperty#13|String|IUmlVisibilityKind|IUmlMultiplicityElement|IUmlType|Boolean|IUmlValueSpecification|Boolean|Boolean|Boolean|String|IUmlType|Long|Long


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("name");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setName(UTIL.ConvertToString(data.get(fname)));
    }
    {

      String fname = new String("visibility");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setVisibility((IUmlVisibilityKind) data.get(fname));
    }
    {

      String fname = new String("multiplicity");
      Boolean cond_22 = null;
      cond_22 = new Boolean(data.containsKey(fname));
      if (cond_22.booleanValue()) 
        setMultiplicity((IUmlMultiplicityElement) data.get(fname));
    }
    {

      String fname = new String("type");
      Boolean cond_31 = null;
      cond_31 = new Boolean(data.containsKey(fname));
      if (cond_31.booleanValue()) 
        setType((IUmlType) data.get(fname));
    }
    {

      String fname = new String("isReadOnly");
      Boolean cond_40 = null;
      cond_40 = new Boolean(data.containsKey(fname));
      if (cond_40.booleanValue()) 
        setIsReadOnly((Boolean) data.get(fname));
    }
    {

      String fname = new String("default");
      Boolean cond_49 = null;
      cond_49 = new Boolean(data.containsKey(fname));
      if (cond_49.booleanValue()) 
        setDefault((IUmlValueSpecification) data.get(fname));
    }
    {

      String fname = new String("isComposite");
      Boolean cond_58 = null;
      cond_58 = new Boolean(data.containsKey(fname));
      if (cond_58.booleanValue()) 
        setIsComposite((Boolean) data.get(fname));
    }
    {

      String fname = new String("isDerived");
      Boolean cond_67 = null;
      cond_67 = new Boolean(data.containsKey(fname));
      if (cond_67.booleanValue()) 
        setIsDerived((Boolean) data.get(fname));
    }
    {

      String fname = new String("isStatic");
      Boolean cond_76 = null;
      cond_76 = new Boolean(data.containsKey(fname));
      if (cond_76.booleanValue()) 
        setIsStatic((Boolean) data.get(fname));
    }
    {

      String fname = new String("ownerClass");
      Boolean cond_85 = null;
      cond_85 = new Boolean(data.containsKey(fname));
      if (cond_85.booleanValue()) 
        setOwnerClass(UTIL.ConvertToString(data.get(fname)));
    }
    {

      String fname = new String("qualifier");
      Boolean cond_94 = null;
      cond_94 = new Boolean(data.containsKey(fname));
      if (cond_94.booleanValue()) 
        setQualifier((IUmlType) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getName KEEP=NO
  public String getName () throws CGException {
    return ivName;
  }
// ***** VDMTOOLS END Name=getName


// ***** VDMTOOLS START Name=setName#1|String KEEP=NO
  public void setName (final String parg) throws CGException {
    ivName = UTIL.ConvertToString(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setName#1|String


// ***** VDMTOOLS START Name=getVisibility KEEP=NO
  public IUmlVisibilityKind getVisibility () throws CGException {
    return (IUmlVisibilityKind) ivVisibility;
  }
// ***** VDMTOOLS END Name=getVisibility


// ***** VDMTOOLS START Name=setVisibility#1|IUmlVisibilityKind KEEP=NO
  public void setVisibility (final IUmlVisibilityKind parg) throws CGException {
    ivVisibility = (IUmlVisibilityKind) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setVisibility#1|IUmlVisibilityKind


// ***** VDMTOOLS START Name=getMultiplicity KEEP=NO
  public IUmlMultiplicityElement getMultiplicity () throws CGException {
    return (IUmlMultiplicityElement) ivMultiplicity;
  }
// ***** VDMTOOLS END Name=getMultiplicity


// ***** VDMTOOLS START Name=hasMultiplicity KEEP=NO
  public Boolean hasMultiplicity () throws CGException {
    return new Boolean(!UTIL.equals(ivMultiplicity, null));
  }
// ***** VDMTOOLS END Name=hasMultiplicity


// ***** VDMTOOLS START Name=setMultiplicity#1|IUmlMultiplicityElement KEEP=NO
  public void setMultiplicity (final IUmlMultiplicityElement parg) throws CGException {
    ivMultiplicity = (IUmlMultiplicityElement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setMultiplicity#1|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=getType KEEP=NO
  public IUmlType getType () throws CGException {
    return (IUmlType) ivType;
  }
// ***** VDMTOOLS END Name=getType


// ***** VDMTOOLS START Name=setType#1|IUmlType KEEP=NO
  public void setType (final IUmlType parg) throws CGException {
    ivType = (IUmlType) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setType#1|IUmlType


// ***** VDMTOOLS START Name=getIsReadOnly KEEP=NO
  public Boolean getIsReadOnly () throws CGException {
    return ivIsReadOnly;
  }
// ***** VDMTOOLS END Name=getIsReadOnly


// ***** VDMTOOLS START Name=hasIsReadOnly KEEP=NO
  public Boolean hasIsReadOnly () throws CGException {
    return new Boolean(!UTIL.equals(ivIsReadOnly, null));
  }
// ***** VDMTOOLS END Name=hasIsReadOnly


// ***** VDMTOOLS START Name=setIsReadOnly#1|Boolean KEEP=NO
  public void setIsReadOnly (final Boolean parg) throws CGException {
    ivIsReadOnly = (Boolean) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setIsReadOnly#1|Boolean


// ***** VDMTOOLS START Name=getDefault KEEP=NO
  public IUmlValueSpecification getDefault () throws CGException {
    return (IUmlValueSpecification) ivDefault;
  }
// ***** VDMTOOLS END Name=getDefault


// ***** VDMTOOLS START Name=hasDefault KEEP=NO
  public Boolean hasDefault () throws CGException {
    return new Boolean(!UTIL.equals(ivDefault, null));
  }
// ***** VDMTOOLS END Name=hasDefault


// ***** VDMTOOLS START Name=setDefault#1|IUmlValueSpecification KEEP=NO
  public void setDefault (final IUmlValueSpecification parg) throws CGException {
    ivDefault = (IUmlValueSpecification) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setDefault#1|IUmlValueSpecification


// ***** VDMTOOLS START Name=getIsComposite KEEP=NO
  public Boolean getIsComposite () throws CGException {
    return ivIsComposite;
  }
// ***** VDMTOOLS END Name=getIsComposite


// ***** VDMTOOLS START Name=setIsComposite#1|Boolean KEEP=NO
  public void setIsComposite (final Boolean parg) throws CGException {
    ivIsComposite = (Boolean) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setIsComposite#1|Boolean


// ***** VDMTOOLS START Name=getIsDerived KEEP=NO
  public Boolean getIsDerived () throws CGException {
    return ivIsDerived;
  }
// ***** VDMTOOLS END Name=getIsDerived


// ***** VDMTOOLS START Name=hasIsDerived KEEP=NO
  public Boolean hasIsDerived () throws CGException {
    return new Boolean(!UTIL.equals(ivIsDerived, null));
  }
// ***** VDMTOOLS END Name=hasIsDerived


// ***** VDMTOOLS START Name=setIsDerived#1|Boolean KEEP=NO
  public void setIsDerived (final Boolean parg) throws CGException {
    ivIsDerived = (Boolean) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setIsDerived#1|Boolean


// ***** VDMTOOLS START Name=getIsStatic KEEP=NO
  public Boolean getIsStatic () throws CGException {
    return ivIsStatic;
  }
// ***** VDMTOOLS END Name=getIsStatic


// ***** VDMTOOLS START Name=hasIsStatic KEEP=NO
  public Boolean hasIsStatic () throws CGException {
    return new Boolean(!UTIL.equals(ivIsStatic, null));
  }
// ***** VDMTOOLS END Name=hasIsStatic


// ***** VDMTOOLS START Name=setIsStatic#1|Boolean KEEP=NO
  public void setIsStatic (final Boolean parg) throws CGException {
    ivIsStatic = (Boolean) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setIsStatic#1|Boolean


// ***** VDMTOOLS START Name=getOwnerClass KEEP=NO
  public String getOwnerClass () throws CGException {
    return ivOwnerClass;
  }
// ***** VDMTOOLS END Name=getOwnerClass


// ***** VDMTOOLS START Name=setOwnerClass#1|String KEEP=NO
  public void setOwnerClass (final String parg) throws CGException {
    ivOwnerClass = UTIL.ConvertToString(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setOwnerClass#1|String


// ***** VDMTOOLS START Name=getQualifier KEEP=NO
  public IUmlType getQualifier () throws CGException {
    return (IUmlType) ivQualifier;
  }
// ***** VDMTOOLS END Name=getQualifier


// ***** VDMTOOLS START Name=hasQualifier KEEP=NO
  public Boolean hasQualifier () throws CGException {
    return new Boolean(!UTIL.equals(ivQualifier, null));
  }
// ***** VDMTOOLS END Name=hasQualifier


// ***** VDMTOOLS START Name=setQualifier#1|IUmlType KEEP=NO
  public void setQualifier (final IUmlType parg) throws CGException {
    ivQualifier = (IUmlType) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setQualifier#1|IUmlType

}
;