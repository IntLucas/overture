

















//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-07-28 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 09:54:50)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.vdm2uml;

// ***** VDMTOOLS END Name=package// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.api.Util;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
// ***** VDMTOOLS END Name=imports



public class Uml2XmiEclipseUml extends Uml2Xmi {


// ***** VDMTOOLS START Name=QualifierInfo KEEP=NO
  public static class QualifierInfo implements Record {

    public String AssociationId;

    public String ClassId;

    public String QualifierName;


    public QualifierInfo () {}


    public QualifierInfo (String p1, String p2, String p3) {

      AssociationId = p1;
      ClassId = p2;
      QualifierName = p3;
    }


    public Object clone () {
      return new QualifierInfo(AssociationId, ClassId, QualifierName);
    }


    public String toString () {
      return "mk_Uml2XmiEclipseUml`QualifierInfo(" + UTIL.toString(AssociationId) + "," + UTIL.toString(ClassId) + "," + UTIL.toString(QualifierName) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierInfo)) 
        return false;
      else {

        QualifierInfo temp = (QualifierInfo) obj;
        return UTIL.equals(AssociationId, temp.AssociationId) && UTIL.equals(ClassId, temp.ClassId) && UTIL.equals(QualifierName, temp.QualifierName);
      }
    }


    public int hashCode () {
      return (AssociationId == null ? 0 : AssociationId.hashCode()) + (ClassId == null ? 0 : ClassId.hashCode()) + (QualifierName == null ? 0 : QualifierName.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierInfo
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=id KEEP=NO
  protected Long id = null;
// ***** VDMTOOLS END Name=id

// ***** VDMTOOLS START Name=packageId KEEP=NO
  protected Long packageId = null;
// ***** VDMTOOLS END Name=packageId

// ***** VDMTOOLS START Name=classes KEEP=NO
  protected HashMap classes = new HashMap();
// ***** VDMTOOLS END Name=classes

// ***** VDMTOOLS START Name=primitiveTypes KEEP=NO
  protected HashMap primitiveTypes = new HashMap();
// ***** VDMTOOLS END Name=primitiveTypes

// ***** VDMTOOLS START Name=associationIdMap KEEP=NO
  protected HashMap associationIdMap = new HashMap();
// ***** VDMTOOLS END Name=associationIdMap

// ***** VDMTOOLS START Name=oe KEEP=NO
  protected String oe = null;
// ***** VDMTOOLS END Name=oe

// ***** VDMTOOLS START Name=extensionTemplateClasses KEEP=NO
  protected HashSet extensionTemplateClasses = new HashSet();
// ***** VDMTOOLS END Name=extensionTemplateClasses

// ***** VDMTOOLS START Name=extensionConstrainElem KEEP=NO
  protected HashSet extensionConstrainElem = new HashSet();
// ***** VDMTOOLS END Name=extensionConstrainElem

// ***** VDMTOOLS START Name=extensionConectorNonNavigable KEEP=NO
  protected HashSet extensionConectorNonNavigable = new HashSet();
// ***** VDMTOOLS END Name=extensionConectorNonNavigable

// ***** VDMTOOLS START Name=extensionConectorQualifier KEEP=NO
  protected HashSet extensionConectorQualifier = new HashSet();
// ***** VDMTOOLS END Name=extensionConectorQualifier

// ***** VDMTOOLS START Name=ID_uTAG KEEP=NO
  private static final String ID_uTAG = new String("xmi:id");
// ***** VDMTOOLS END Name=ID_uTAG

// ***** VDMTOOLS START Name=ownedMemberElementName KEEP=NO
  private static final String ownedMemberElementName = new String("packagedElement");
// ***** VDMTOOLS END Name=ownedMemberElementName


// ***** VDMTOOLS START Name=vdm_init_Uml2XmiEclipseUml KEEP=NO
  private void vdm_init_Uml2XmiEclipseUml () throws CGException {
    try {

      id = new Long(1);
      packageId = new Long(0);
      classes = new HashMap();
      primitiveTypes = new HashMap();
      associationIdMap = new HashMap();
      oe = new String("");
      extensionTemplateClasses = new HashSet();
      extensionConstrainElem = new HashSet();
      extensionConectorNonNavigable = new HashSet();
      extensionConectorQualifier = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Uml2XmiEclipseUml


// ***** VDMTOOLS START Name=Uml2XmiEclipseUml KEEP=NO
  public Uml2XmiEclipseUml () throws CGException {
    vdm_init_Uml2XmiEclipseUml();
  }
// ***** VDMTOOLS END Name=Uml2XmiEclipseUml


// ***** VDMTOOLS START Name=Save#3|String|IUmlModel|StatusLog KEEP=NO
  public void Save (final String fileName, final IUmlModel model, final StatusLog inLog) throws CGException {

    XmlVisitor xmlVisitor = (XmlVisitor) new XmiFileOutputVisitor();
    Util.CreateFile(fileName);
    CreateXmlFile((IUmlModel) model);
    xmlVisitor.VisitXmlDocument((XmlDocument) doc);
    Util.CloseFile();
  }
// ***** VDMTOOLS END Name=Save#3|String|IUmlModel|StatusLog


// ***** VDMTOOLS START Name=CreateXmlFile#1|IUmlModel KEEP=NO
  protected void CreateXmlFile (final IUmlModel m) throws CGException {

    oe = UTIL.ConvertToString(UTIL.clone(ownedMemberElementName));
    doc.StartE(new String("uml:Model"));
    doc.StartA(new String("xmi:version"), new String("2.1"));
    doc.StartA(new String("xmlns:uml"), new String("http://www.eclipse.org/uml2/2.1.0/UML"));
    doc.StartA(new String("xmlns:xmi"), new String("http://schema.omg.org/spec/XMI/2.1"));
    doc.StartA(ID_uTAG, GetId(packageId));
    doc.StartE(oe);
    doc.StartA(new String("xmi:type"), new String("uml:Package"));
    doc.StartA(ID_uTAG, GetId(packageId));
    doc.StartA(new String("name"), new String("VDM Generated model"));
    PrintStdTypes();
    HashSet tmpArg_v_32 = new HashSet();
    tmpArg_v_32 = m.getDefinitions();
    GenerateClassIds(tmpArg_v_32);
    HashSet tmpArg_v_34 = new HashSet();
    tmpArg_v_34 = m.getDefinitions();
    PrintClassDef(tmpArg_v_34);
    HashSet tmpArg_v_36 = new HashSet();
    tmpArg_v_36 = m.getDefinitions();
    PrintAssociationDef(tmpArg_v_36);
    doc.StopE(oe);
    doc.StopE(new String("uml:Model"));
  }
// ***** VDMTOOLS END Name=CreateXmlFile#1|IUmlModel


// ***** VDMTOOLS START Name=PrintConstraintDef#1|HashSet KEEP=NO
  private void PrintConstraintDef (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_25 = iset_2.iterator(); enm_25.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_25.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlConstraint))) 
            succ_18 = false;
          if (succ_18) 
            PrintConstraint((IUmlConstraint) c);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=PrintConstraintDef#1|HashSet


// ***** VDMTOOLS START Name=PrintConstraint#1|IUmlConstraint KEEP=NO
  private void PrintConstraint (final IUmlConstraint c) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("xmi:type"), new String("uml:Constraint"));
    {

      String constrainId = GetNextId();
      {

        extensionConstrainElem.add(constrainId);
        doc.StartA(ID_uTAG, constrainId);
      }
    }
    {

      HashSet iset_14 = new HashSet();
      iset_14 = c.getConstraintElements();
      String a = null;
      for (Iterator enm_27 = iset_14.iterator(); enm_27.hasNext(); ) {

        String elem_15 = UTIL.ConvertToString(enm_27.next());
        a = elem_15;
        {

          doc.StartE(new String("constrainedElement"));
          doc.StartA(new String("xmi:idref"), UTIL.ConvertToString(associationIdMap.get(a)));
          doc.StopE(new String("constrainedElement"));
        }
      }
    }
    doc.StartE(new String("specification"));
    doc.StartA(new String("xmi:type"), new String("uml:OpaqueExpression"));
    doc.StartA(ID_uTAG, GetNextId());
    doc.StopE(new String("specification"));
    doc.StartE(new String("body"));
    String par_41 = null;
    Boolean cond_43 = null;
    IUmlValueSpecification obj_44 = null;
    obj_44 = (IUmlValueSpecification) c.getSpecification();
    cond_43 = new Boolean(obj_44 instanceof IUmlLiteralString);
    if (cond_43.booleanValue()) {

      IUmlLiteralString spec = null;
      spec = (IUmlLiteralString) c.getSpecification();
      par_41 = spec.getValue();
    }
    else 
      par_41 = new String("");
    doc.StartD(par_41);
    doc.StopE(new String("body"));
    doc.StopE(new String("specification"));
    doc.StopE(oe);
  }
// ***** VDMTOOLS END Name=PrintConstraint#1|IUmlConstraint


// ***** VDMTOOLS START Name=PrintExstention KEEP=NO
  private void PrintExstention () throws CGException {

    doc.StartE(new String("xmi:Extension"));
    doc.StartA(new String("extender"), new String("Enterprise Architect"));
    doc.StartA(new String("extenderID"), new String("6.5"));
    doc.StartE(new String("elements"));
    {

      String c = null;
      for (Iterator enm_41 = extensionTemplateClasses.iterator(); enm_41.hasNext(); ) {

        String elem_12 = UTIL.ConvertToString(enm_41.next());
        c = elem_12;
        {

          doc.StartE(new String("element"));
          doc.StartA(new String("xmi:idref"), UTIL.ConvertToString(classes.get(c)));
          doc.StartA(new String("xmi:type"), new String("uml:Class"));
          doc.StartA(new String("name"), c);
          doc.StartA(new String("scope"), new String("public"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("sType"), new String("Class"));
          doc.StartA(new String("nType"), new String("1"));
          doc.StopE(new String("element"));
        }
      }
    }
    {

      String constrainId = null;
      for (Iterator enm_78 = extensionConstrainElem.iterator(); enm_78.hasNext(); ) {

        String elem_43 = UTIL.ConvertToString(enm_78.next());
        constrainId = elem_43;
        {

          doc.StartE(new String("element"));
          doc.StartA(new String("xmi:idref"), constrainId);
          doc.StartA(new String("xmi:type"), new String("uml:Constraint"));
          doc.StartA(new String("scope"), new String("public"));
          doc.StartE(new String("properties"));
          doc.StartA(new String("documentation"), new String("xor"));
          doc.StartA(new String("isSpecification"), new String("false"));
          doc.StartA(new String("sType"), new String("Constraint"));
          doc.StartA(new String("nType"), new String("2"));
          doc.StartA(new String("scope"), new String("public"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("element"));
        }
      }
    }
    doc.StopE(new String("elements"));
    doc.StartE(new String("diagrams"));
    {

      String constrainId = null;
      for (Iterator enm_141 = extensionConstrainElem.iterator(); enm_141.hasNext(); ) {

        String elem_84 = UTIL.ConvertToString(enm_141.next());
        constrainId = elem_84;
        {

          doc.StartE(new String("diagram"));
          doc.StartA(ID_uTAG, GetNextId());
          doc.StartE(new String("model"));
          doc.StartA(new String("package"), GetId(packageId));
          doc.StartA(new String("localID"), new String("24"));
          doc.StartA(new String("owner"), GetId(packageId));
          doc.StopE(new String("model"));
          doc.StartE(new String("properties"));
          String par_111 = null;
          par_111 = new String("Constrain diagram ").concat(constrainId);
          doc.StartA(new String("name"), par_111);
          doc.StartA(new String("type"), new String("Logical"));
          doc.StopE(new String("properties"));
          doc.StartE(new String("elements"));
          doc.StartE(new String("element"));
          doc.StartA(new String("geometry"), new String("Left=100;Top=100;Right=100;Bottom=100;"));
          doc.StartA(new String("subject"), constrainId);
          doc.StartA(new String("seqno"), new String("1"));
          doc.StartA(new String("style"), new String("DUID=AE8AC20D;"));
          doc.StopE(new String("element"));
          doc.StopE(new String("elements"));
          doc.StopE(new String("diagram"));
        }
      }
    }
    doc.StopE(new String("diagrams"));
    doc.StartE(new String("connectors"));
    {

      String associationEndId = null;
      for (Iterator enm_167 = extensionConectorNonNavigable.iterator(); enm_167.hasNext(); ) {

        String elem_147 = UTIL.ConvertToString(enm_167.next());
        associationEndId = elem_147;
        {

          doc.StartE(new String("connector"));
          doc.StartA(new String("xmi:idref"), associationEndId);
          doc.StartE(new String("properties"));
          doc.StartA(new String("ea_type"), new String("Association"));
          doc.StartA(new String("direction"), new String("Unspecified"));
          doc.StopE(new String("properties"));
          doc.StopE(new String("connector"));
        }
      }
    }
    {

      QualifierInfo qualifier = null;
      for (Iterator enm_196 = extensionConectorQualifier.iterator(); enm_196.hasNext(); ) {

        QualifierInfo elem_169 = (QualifierInfo) enm_196.next();
        qualifier = elem_169;
        {

          doc.StartE(new String("connector"));
          String par_176 = null;
          par_176 = (qualifier).AssociationId;
          doc.StartA(new String("xmi:idref"), par_176);
          doc.StartE(new String("target"));
          String par_182 = null;
          par_182 = (qualifier).ClassId;
          doc.StartA(new String("xmi:idref"), par_182);
          doc.StartE(new String("constraints"));
          String par_188 = null;
          par_188 = (qualifier).QualifierName;
          doc.StartA(new String("qualifier"), par_188);
          doc.StopE(new String("constraints"));
          doc.StopE(new String("target"));
          doc.StopE(new String("connector"));
        }
      }
    }
    doc.StopE(new String("connectors"));
    doc.StopE(new String("xmi:Extension"));
  }
// ***** VDMTOOLS END Name=PrintExstention


// ***** VDMTOOLS START Name=PrintAssociationDef#1|HashSet KEEP=NO
  protected void PrintAssociationDef (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_25 = iset_2.iterator(); enm_25.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_25.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlAssociation))) 
            succ_18 = false;
          if (succ_18) 
            PrintAssociation((IUmlAssociation) c);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=PrintAssociationDef#1|HashSet


// ***** VDMTOOLS START Name=PrintClassDef#1|HashSet KEEP=NO
  protected void PrintClassDef (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_25 = iset_2.iterator(); enm_25.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_25.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlClass))) 
            succ_18 = false;
          if (succ_18) 
            PrintClass((IUmlClass) c);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=PrintClassDef#1|HashSet


// ***** VDMTOOLS START Name=GenerateClassIds#1|HashSet KEEP=NO
  protected void GenerateClassIds (final HashSet defs) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      IUmlModelElement d = null;
      {
        for (Iterator enm_17 = defs.iterator(); enm_17.hasNext(); ) {

          IUmlModelElement elem_16 = (IUmlModelElement) enm_17.next();
          d = (IUmlModelElement) elem_16;
          res_s_12.add(d);
        }
      }
    }
    iset_2 = res_s_12;
    IUmlModelElement c = null;
    for (Iterator enm_28 = iset_2.iterator(); enm_28.hasNext(); ) {

      IUmlModelElement elem_3 = (IUmlModelElement) enm_28.next();
      c = (IUmlModelElement) elem_3;
      {

        boolean succ_18 = true;
        {

          succ_18 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(c instanceof IUmlClass))) 
            succ_18 = false;
          if (succ_18) {

            IUmlModelElement tmpVal_24 = null;
            tmpVal_24 = (IUmlModelElement) c;
            IUmlClass cl = null;
            cl = (IUmlClass) tmpVal_24;
            String md_26 = null;
            md_26 = cl.getName();
            classes.put(md_26, GetNextId());
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=GenerateClassIds#1|HashSet


// ***** VDMTOOLS START Name=PrintClass#1|IUmlClass KEEP=NO
  protected void PrintClass (final IUmlClass cl) throws CGException {

    doc.StartE(oe);
    String par_6 = null;
    Boolean par_7 = null;
    par_7 = cl.getIsAbstract();
    par_6 = UTIL.ConvertToString(Util.ToStringBool(par_7));
    doc.StartA(new String("isAbstract"), par_6);
    String par_10 = null;
    Boolean par_11 = null;
    par_11 = cl.getIsActive();
    par_10 = UTIL.ConvertToString(Util.ToStringBool(par_11));
    doc.StartA(new String("isActive"), par_10);
    doc.StartA(new String("isLeaf"), new String("false"));
    String par_17 = null;
    par_17 = cl.getName();
    doc.StartA(new String("name"), par_17);
    doc.StartA(new String("visibility"), new String("public"));
    String par_23 = null;
    String tmppar_25 = null;
    tmppar_25 = cl.getName();
    par_23 = UTIL.ConvertToString(classes.get(tmppar_25));
    doc.StartA(ID_uTAG, par_23);
    doc.StartA(new String("xmi:type"), new String("uml:Class"));
    HashSet tmpArg_v_30 = new HashSet();
    HashSet unArg_31 = new HashSet();
    HashSet res_s_32 = new HashSet();
    {

      HashSet e_set_39 = new HashSet();
      e_set_39 = cl.getClassBody();
      IUmlDefinitionBlock df = null;
      {
        for (Iterator enm_41 = e_set_39.iterator(); enm_41.hasNext(); ) {

          IUmlDefinitionBlock elem_40 = (IUmlDefinitionBlock) enm_41.next();
          df = (IUmlDefinitionBlock) elem_40;
          if (new Boolean(df instanceof IUmlOwnedProperties).booleanValue()) {

            HashSet res_s_33 = new HashSet();
            {

              IUmlOwnedProperties d = (IUmlOwnedProperties) df;
              res_s_33 = d.getPropetityList();
            }
            res_s_32.add(res_s_33);
          }
        }
      }
    }
    unArg_31 = res_s_32;
    HashSet rduset_42 = new HashSet();
    for (Iterator enm_44 = unArg_31.iterator(); enm_44.hasNext(); ) {

      HashSet e_43 = (HashSet) enm_44.next();
      rduset_42.addAll(e_43);
    }
    tmpArg_v_30 = rduset_42;
    PrintPropeties(tmpArg_v_30);
    HashSet tmpArg_v_46 = new HashSet();
    HashSet unArg_47 = new HashSet();
    HashSet res_s_48 = new HashSet();
    {

      HashSet e_set_55 = new HashSet();
      e_set_55 = cl.getClassBody();
      IUmlDefinitionBlock df = null;
      {
        for (Iterator enm_57 = e_set_55.iterator(); enm_57.hasNext(); ) {

          IUmlDefinitionBlock elem_56 = (IUmlDefinitionBlock) enm_57.next();
          df = (IUmlDefinitionBlock) elem_56;
          if (new Boolean(df instanceof IUmlOwnedOperations).booleanValue()) {

            HashSet res_s_49 = new HashSet();
            {

              IUmlOwnedOperations d = (IUmlOwnedOperations) df;
              res_s_49 = d.getOperationList();
            }
            res_s_48.add(res_s_49);
          }
        }
      }
    }
    unArg_47 = res_s_48;
    HashSet rduset_58 = new HashSet();
    for (Iterator enm_60 = unArg_47.iterator(); enm_60.hasNext(); ) {

      HashSet e_59 = (HashSet) enm_60.next();
      rduset_58.addAll(e_59);
    }
    tmpArg_v_46 = rduset_58;
    PrintOperstions(tmpArg_v_46);
    Boolean cond_61 = null;
    Long var1_62 = null;
    Vector unArg_63 = null;
    unArg_63 = cl.getSuperClass();
    var1_62 = new Long(unArg_63.size());
    cond_61 = new Boolean((var1_62.intValue()) > (new Long(0).intValue()));
    if (cond_61.booleanValue()) {

      Vector tmpArg_v_66 = null;
      tmpArg_v_66 = cl.getSuperClass();
      AddGeneralization(tmpArg_v_66);
    }
    doc.StopE(oe);
  }
// ***** VDMTOOLS END Name=PrintClass#1|IUmlClass


// ***** VDMTOOLS START Name=PrintPropeties#1|HashSet KEEP=NO
  protected void PrintPropeties (final HashSet propeties) throws CGException {

    IUmlProperty prop = null;
    for (Iterator enm_78 = propeties.iterator(); enm_78.hasNext(); ) {

      IUmlProperty elem_3 = (IUmlProperty) enm_78.next();
      prop = (IUmlProperty) elem_3;
      {

        doc.StartE(new String("ownedAttribute"));
        String par_10 = null;
        par_10 = prop.getName();
        doc.StartA(new String("name"), par_10);
        doc.StartA(new String("ownerScope"), new String("instance"));
        Boolean cond_14 = null;
        cond_14 = prop.hasIsStatic();
        if (cond_14.booleanValue()) {

          String par_17 = null;
          Boolean par_18 = null;
          par_18 = prop.getIsStatic();
          par_17 = UTIL.ConvertToString(Util.ToStringBool(par_18));
          doc.StartA(new String("isStatic"), par_17);
        }
        String par_21 = null;
        IUmlVisibilityKind par_22 = null;
        par_22 = (IUmlVisibilityKind) prop.getVisibility();
        par_21 = GetVisibilityKind((IUmlVisibilityKind) par_22);
        doc.StartA(new String("visibility"), par_21);
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("xmi:type"), new String("uml:Property"));
        Boolean cond_29 = null;
        cond_29 = prop.hasMultiplicity();
        if (cond_29.booleanValue()) {

          String par_32 = null;
          Boolean par_33 = null;
          IUmlMultiplicityElement obj_34 = null;
          obj_34 = (IUmlMultiplicityElement) prop.getMultiplicity();
          par_33 = obj_34.getIsOrdered();
          par_32 = UTIL.ConvertToString(Util.ToStringBool(par_33));
          doc.StartA(new String("isOrdered"), par_32);
          IUmlMultiplicityElement tmpArg_v_36 = null;
          tmpArg_v_36 = (IUmlMultiplicityElement) prop.getMultiplicity();
          PrintAssociationMp((IUmlMultiplicityElement) tmpArg_v_36);
        }
        doc.StartE(new String("defaultValue"));
        boolean succ_39 = true;
        {

          succ_39 = true;
          Boolean tmpVal_v_53 = null;
          IUmlValueSpecification obj_54 = null;
          obj_54 = (IUmlValueSpecification) prop.getDefault();
          tmpVal_v_53 = new Boolean(obj_54 instanceof IUmlLiteralString);
          if (!UTIL.equals(new Boolean(true), tmpVal_v_53)) 
            succ_39 = false;
          if (succ_39) {

            IUmlLiteralString ls = null;
            ls = (IUmlLiteralString) prop.getDefault();
            {

              doc.StartA(new String("xmi:type"), new String("uml:LiteralString"));
              String par_62 = null;
              par_62 = ls.getValue();
              doc.StartA(new String("value"), par_62);
            }
          }
          else {

            succ_39 = true;
            Boolean tmpVal_v_42 = null;
            IUmlValueSpecification obj_43 = null;
            obj_43 = (IUmlValueSpecification) prop.getDefault();
            tmpVal_v_42 = new Boolean(obj_43 instanceof IUmlLiteralInteger);
            if (!UTIL.equals(new Boolean(true), tmpVal_v_42)) 
              succ_39 = false;
            if (succ_39) {

              IUmlLiteralInteger li = null;
              li = (IUmlLiteralInteger) prop.getDefault();
              {

                doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
                String par_51 = null;
                Long par_52 = null;
                par_52 = li.getValue();
                par_51 = UTIL.ConvertToString(StdLib.ToStringInt(par_52));
                doc.StartA(new String("value"), par_51);
              }
            }
          }
        }
        doc.StartA(ID_uTAG, GetNextId());
        doc.StopE(new String("defaultValue"));
        doc.StartE(new String("type"));
        String par_72 = null;
        IUmlType par_73 = null;
        par_73 = (IUmlType) prop.getType();
        par_72 = GetUmlPrimitiveTypeId((IUmlType) par_73);
        doc.StartA(new String("xmi:idref"), par_72);
        doc.StopE(new String("type"));
        doc.StopE(new String("ownedAttribute"));
      }
    }
  }
// ***** VDMTOOLS END Name=PrintPropeties#1|HashSet


// ***** VDMTOOLS START Name=PrintOperstions#1|HashSet KEEP=NO
  protected void PrintOperstions (final HashSet ops) throws CGException {

    IUmlOperation op = null;
    for (Iterator enm_35 = ops.iterator(); enm_35.hasNext(); ) {

      IUmlOperation elem_3 = (IUmlOperation) enm_35.next();
      op = (IUmlOperation) elem_3;
      {

        doc.StartE(new String("ownedOperation"));
        doc.StartA(new String("isAbstract"), new String("false"));
        doc.StartA(new String("isLeaf"), new String("false"));
        doc.StartA(new String("isQuery"), new String("false"));
        String par_19 = null;
        par_19 = op.getName();
        doc.StartA(new String("name"), par_19);
        doc.StartA(new String("ownerScope"), new String("instance"));
        String par_25 = null;
        IUmlVisibilityKind par_26 = null;
        par_26 = (IUmlVisibilityKind) op.getVisibility();
        par_25 = GetVisibilityKind((IUmlVisibilityKind) par_26);
        doc.StartA(new String("visibility"), par_25);
        doc.StartA(ID_uTAG, GetNextId());
        doc.StartA(new String("xmi:type"), new String("uml:Operation"));
        doc.StopE(new String("ownedOperation"));
      }
    }
  }
// ***** VDMTOOLS END Name=PrintOperstions#1|HashSet


// ***** VDMTOOLS START Name=PrintAssociation#1|IUmlAssociation KEEP=NO
  protected void PrintAssociation (final IUmlAssociation association) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("isAbstract"), new String("false"));
    doc.StartA(new String("isDerived"), new String("false"));
    doc.StartA(new String("isLeaf"), new String("false"));
    doc.StartA(new String("name"), new String(""));
    {

      String associationId = GetNextId();
      {

        doc.StartA(ID_uTAG, associationId);
        String md_22 = null;
        md_22 = association.getId();
        associationIdMap.put(md_22, associationId);
        doc.StartA(new String("xmi:type"), new String("uml:Association"));
        {

          HashSet iset_27 = new HashSet();
          HashSet var1_49 = new HashSet();
          HashSet res_s_50 = new HashSet();
          {

            HashSet e_set_55 = new HashSet();
            e_set_55 = association.getOwnedEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_57 = e_set_55.iterator(); enm_57.hasNext(); ) {

                IUmlProperty elem_56 = (IUmlProperty) enm_57.next();
                p = (IUmlProperty) elem_56;
                Tuple res_s_51 = new Tuple(2);
                res_s_51 = new Tuple(2);
                res_s_51.SetField(1, p);
                res_s_51.SetField(2, new Boolean(false));
                res_s_50.add(res_s_51);
              }
            }
          }
          var1_49 = res_s_50;
          HashSet var2_58 = new HashSet();
          HashSet res_s_59 = new HashSet();
          {

            HashSet e_set_64 = new HashSet();
            e_set_64 = association.getOwnedNavigableEnds();
            IUmlProperty p = null;
            {
              for (Iterator enm_66 = e_set_64.iterator(); enm_66.hasNext(); ) {

                IUmlProperty elem_65 = (IUmlProperty) enm_66.next();
                p = (IUmlProperty) elem_65;
                Tuple res_s_60 = new Tuple(2);
                res_s_60 = new Tuple(2);
                res_s_60.SetField(1, p);
                res_s_60.SetField(2, new Boolean(true));
                res_s_59.add(res_s_60);
              }
            }
          }
          var2_58 = res_s_59;
          iset_27 = (HashSet) var1_49.clone();
          iset_27.addAll(var2_58);
          Tuple prop = new Tuple(2);
          for (Iterator enm_192 = iset_27.iterator(); enm_192.hasNext(); ) {

            Tuple elem_28 = (Tuple) enm_192.next();
            prop = elem_28;
            {

              Boolean cond_67 = null;
              IUmlProperty obj_68 = null;
              obj_68 = (IUmlProperty) prop.GetField(new Long(1).intValue());
              cond_67 = obj_68.hasQualifier();
              if (cond_67.booleanValue()) {

                QualifierInfo elem_72 = null;
                String tmpVar_74 = null;
                IUmlType par_75 = null;
                IUmlProperty obj_76 = null;
                obj_76 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                par_75 = (IUmlType) obj_76.getType();
                tmpVar_74 = GetTypeId((IUmlType) par_75);
                String tmpVar_79 = null;
                HashMap tmp_m_80 = new HashMap();
                tmp_m_80 = new HashMap();
                HashMap mapType_82 = primitiveTypes;
                for (Iterator enm_86 = mapType_82.keySet().iterator(); enm_86.hasNext(); ) {

                  Object dom_87 = enm_86.next();
                  String id_d_84 = UTIL.ConvertToString(dom_87);
                  String id_r_83 = UTIL.ConvertToString(mapType_82.get(dom_87));
                  if (tmp_m_80.containsKey(id_r_83)) 
                    UTIL.RunTime("Run-Time Error:Map is not injective - \'inverse\' fails");
                  else 
                    tmp_m_80.put(id_r_83, id_d_84);
                }
                String tmppar_88 = null;
                IUmlType par_89 = null;
                IUmlProperty obj_90 = null;
                obj_90 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                par_89 = (IUmlType) obj_90.getQualifier();
                tmppar_88 = GetUmlPrimitiveTypeId((IUmlType) par_89);
                tmpVar_79 = UTIL.ConvertToString(tmp_m_80.get(tmppar_88));
                elem_72 = new QualifierInfo(associationId, tmpVar_74, tmpVar_79);
                extensionConectorQualifier.add(elem_72);
              }
              doc.StartE(new String("ownedEnd"));
              doc.StartA(new String("aggregation"), new String("none"));
              doc.StartA(new String("association"), associationId);
              String par_103 = null;
              Boolean par_104 = null;
              par_104 = (Boolean) prop.GetField(new Long(2).intValue());
              par_103 = UTIL.ConvertToString(Util.ToStringBool(par_104));
              doc.StartA(new String("isNavigable"), par_103);
              Boolean cond_107 = null;
              Long var1_108 = null;
              String unArg_109 = null;
              IUmlProperty obj_110 = null;
              obj_110 = (IUmlProperty) prop.GetField(new Long(1).intValue());
              unArg_109 = obj_110.getName();
              var1_108 = new Long(unArg_109.length());
              cond_107 = new Boolean((var1_108.intValue()) > (new Long(0).intValue()));
              if (cond_107.booleanValue()) {

                String par_119 = null;
                IUmlProperty obj_120 = null;
                obj_120 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                par_119 = obj_120.getName();
                doc.StartA(new String("name"), par_119);
              }
              else 
                doc.StartA(new String("name"), new String(""));
              String par_125 = null;
              IUmlVisibilityKind par_126 = null;
              IUmlProperty obj_127 = null;
              obj_127 = (IUmlProperty) prop.GetField(new Long(1).intValue());
              par_126 = (IUmlVisibilityKind) obj_127.getVisibility();
              par_125 = GetVisibilityKind((IUmlVisibilityKind) par_126);
              doc.StartA(new String("visibility"), par_125);
              {

                String associationEndId = GetNextId();
                {

                  doc.StartA(ID_uTAG, associationEndId);
                  doc.StartA(new String("xmi:type"), new String("uml:Property"));
                  Boolean cond_138 = null;
                  IUmlProperty obj_139 = null;
                  obj_139 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                  cond_138 = obj_139.hasMultiplicity();
                  if (cond_138.booleanValue()) {

                    String par_144 = null;
                    Boolean par_145 = null;
                    IUmlMultiplicityElement obj_146 = null;
                    IUmlProperty obj_147 = null;
                    obj_147 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                    obj_146 = (IUmlMultiplicityElement) obj_147.getMultiplicity();
                    par_145 = obj_146.getIsOrdered();
                    par_144 = UTIL.ConvertToString(Util.ToStringBool(par_145));
                    doc.StartA(new String("isOrdered"), par_144);
                    IUmlMultiplicityElement tmpArg_v_151 = null;
                    IUmlProperty obj_152 = null;
                    obj_152 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                    tmpArg_v_151 = (IUmlMultiplicityElement) obj_152.getMultiplicity();
                    PrintAssociationMp((IUmlMultiplicityElement) tmpArg_v_151);
                  }
                  Boolean cond_155 = null;
                  Boolean unArg_156 = null;
                  unArg_156 = (Boolean) prop.GetField(new Long(2).intValue());
                  cond_155 = new Boolean(!unArg_156.booleanValue());
                  if (cond_155.booleanValue()) 
                    extensionConectorNonNavigable.add(associationEndId);
                  Boolean cond_161 = null;
                  IUmlProperty obj_162 = null;
                  obj_162 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                  cond_161 = obj_162.hasIsStatic();
                  if (cond_161.booleanValue()) {

                    String par_167 = null;
                    Boolean par_168 = null;
                    IUmlProperty obj_169 = null;
                    obj_169 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                    par_168 = obj_169.getIsStatic();
                    par_167 = UTIL.ConvertToString(Util.ToStringBool(par_168));
                    doc.StartA(new String("isStatic"), par_167);
                  }
                  doc.StartE(new String("type"));
                  String par_176 = null;
                  IUmlType par_177 = null;
                  IUmlProperty obj_178 = null;
                  obj_178 = (IUmlProperty) prop.GetField(new Long(1).intValue());
                  par_177 = (IUmlType) obj_178.getType();
                  par_176 = GetTypeId((IUmlType) par_177);
                  doc.StartA(new String("xmi:idref"), par_176);
                  doc.StopE(new String("type"));
                  doc.StopE(new String("ownedEnd"));
                  doc.StartE(new String("memberEnd"));
                  doc.StartA(new String("xmi:idref"), associationEndId);
                  doc.StopE(new String("memberEnd"));
                }
              }
            }
          }
        }
        doc.StopE(oe);
      }
    }
  }
// ***** VDMTOOLS END Name=PrintAssociation#1|IUmlAssociation


// ***** VDMTOOLS START Name=PrintAssociationMp#1|IUmlMultiplicityElement KEEP=NO
  protected void PrintAssociationMp (final IUmlMultiplicityElement me) throws CGException {

    doc.StartE(new String("lowerValue"));
    String par_6 = null;
    Long par_7 = null;
    par_7 = me.getLower();
    par_6 = UTIL.ConvertToString(Util.ToString(par_7));
    doc.StartA(new String("value"), par_6);
    doc.StartA(ID_uTAG, GetNextId());
    doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
    doc.StopE(new String("lowerValue"));
    Boolean cond_16 = null;
    cond_16 = me.hasUpper();
    if (cond_16.booleanValue()) {

      doc.StartE(new String("upperValue"));
      String par_34 = null;
      Long par_35 = null;
      par_35 = me.getUpper();
      par_34 = UTIL.ConvertToString(Util.ToString(par_35));
      doc.StartA(new String("value"), par_34);
      doc.StartA(ID_uTAG, GetNextId());
      doc.StartA(new String("xmi:type"), new String("uml:LiteralInteger"));
      doc.StopE(new String("upperValue"));
    }
    else {

      doc.StartE(new String("upperValue"));
      doc.StartA(new String("value"), new String("*"));
      doc.StartA(ID_uTAG, GetNextId());
      doc.StartA(new String("xmi:type"), new String("uml:LiteralString"));
      doc.StopE(new String("upperValue"));
    }
  }
// ***** VDMTOOLS END Name=PrintAssociationMp#1|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=AddGeneralization#1|Vector KEEP=NO
  protected void AddGeneralization (final Vector supers) throws CGException {

    HashSet iset_2 = new HashSet();
    HashSet set_10 = new HashSet();
    Enumeration enm_11 = supers.elements();
    while ( enm_11.hasMoreElements())
      set_10.add(enm_11.nextElement());
    iset_2 = set_10;
    IUmlClassNameType a = null;
    for (Iterator enm_27 = iset_2.iterator(); enm_27.hasNext(); ) {

      IUmlClassNameType elem_3 = (IUmlClassNameType) enm_27.next();
      a = (IUmlClassNameType) elem_3;
      {

        doc.StartE(new String("generalization"));
        doc.StartA(new String("xmi:type"), new String("uml:Generalization"));
        doc.StartA(ID_uTAG, GetNextId());
        String par_22 = null;
        String tmppar_24 = null;
        tmppar_24 = a.getName();
        par_22 = UTIL.ConvertToString(classes.get(tmppar_24));
        doc.StartA(new String("general"), par_22);
        doc.StopE(new String("generalization"));
      }
    }
  }
// ***** VDMTOOLS END Name=AddGeneralization#1|Vector


// ***** VDMTOOLS START Name=PrintTemplates#1|IUmlTemplateSignature KEEP=NO
  protected void PrintTemplates (final IUmlTemplateSignature tps) throws CGException {

    doc.StartE(new String("ownedTemplateSignature"));
    doc.StartA(new String("xmi:type"), new String("uml:TemplateSignature"));
    doc.StartA(ID_uTAG, GetNextId());
    {

      HashSet iset_10 = new HashSet();
      iset_10 = tps.getTemplateParameters();
      IUmlTemplateParameter a = null;
      for (Iterator enm_47 = iset_10.iterator(); enm_47.hasNext(); ) {

        IUmlTemplateParameter elem_11 = (IUmlTemplateParameter) enm_47.next();
        a = (IUmlTemplateParameter) elem_11;
        {

          String parameterId = GetNextId();
          doc.StartE(new String("ownedParameter"));
          doc.StartA(new String("xmi:type"), new String("uml:ClassifierTemplateParameter"));
          doc.StartA(ID_uTAG, parameterId);
          doc.StartE(new String("ownedElement"));
          doc.StartA(new String("xmi:type"), new String("uml:Class"));
          doc.StartA(ID_uTAG, GetNextId());
          String par_32 = null;
          par_32 = a.getName();
          doc.StartA(new String("name"), par_32);
          doc.StartA(new String("templateParameter"), parameterId);
          doc.StopE(new String("ownedElement"));
          doc.StopE(new String("ownedParameter"));
          doc.StartE(new String("parameter"));
          doc.StartA(new String("xmi:idref"), parameterId);
          doc.StopE(new String("parameter"));
        }
      }
    }
    doc.StopE(new String("ownedTemplateSignature"));
  }
// ***** VDMTOOLS END Name=PrintTemplates#1|IUmlTemplateSignature


// ***** VDMTOOLS START Name=GetUmlPrimitiveTypeId#1|IUmlType KEEP=NO
  protected String GetUmlPrimitiveTypeId (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
        succ_2 = false;
      if (succ_2) 
        return UTIL.ConvertToString(primitiveTypes.get(new String("bool")));
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
          succ_2 = false;
        if (succ_2) 
          return UTIL.ConvertToString(primitiveTypes.get(new String("int")));
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
            succ_2 = false;
          if (succ_2) 
            return UTIL.ConvertToString(primitiveTypes.get(new String("char")));
          else 
            return UTIL.ConvertToString(primitiveTypes.get(new String("String")));
        }
      }
    }
  }
// ***** VDMTOOLS END Name=GetUmlPrimitiveTypeId#1|IUmlType


// ***** VDMTOOLS START Name=PrintStdTypes KEEP=NO
  protected void PrintStdTypes () throws CGException {

    primitiveTypes.put(new String("bool"), PrintPrimitiveType(new String("bool")));
    primitiveTypes.put(new String("int"), PrintPrimitiveType(new String("int")));
    primitiveTypes.put(new String("char"), PrintPrimitiveType(new String("char")));
    primitiveTypes.put(new String("String"), PrintPrimitiveType(new String("String")));
    primitiveTypes.put(new String("unlimitedNatural"), PrintPrimitiveType(new String("unlimitedNatural")));
    primitiveTypes.put(new String("NotSupportedType"), PrintPrimitiveType(new String("NotSupportedType")));
  }
// ***** VDMTOOLS END Name=PrintStdTypes


// ***** VDMTOOLS START Name=PrintPrimitiveType#1|String KEEP=NO
  protected String PrintPrimitiveType (final String typeName) throws CGException {

    doc.StartE(oe);
    doc.StartA(new String("name"), typeName);
    doc.StartA(new String("visibility"), new String("public"));
    {

      String tid = GetNextId();
      {

        doc.StartA(ID_uTAG, tid);
        doc.StartA(new String("xmi:type"), new String("uml:Class"));
        doc.StopE(oe);
        return tid;
      }
    }
  }
// ***** VDMTOOLS END Name=PrintPrimitiveType#1|String


// ***** VDMTOOLS START Name=GetTypeId#1|IUmlType KEEP=NO
  protected String GetTypeId (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlClassNameType))) 
        succ_2 = false;
      if (succ_2) {

        IUmlClassNameType qc = (IUmlClassNameType) t;
        {

          Boolean cond_22 = null;
          boolean tmpQuant_23 = false;
          {

            HashSet e_set_28 = new HashSet();
            e_set_28.clear();
            e_set_28.addAll(classes.keySet());
            String x = null;
            {
              for (Iterator enm_31 = e_set_28.iterator(); enm_31.hasNext() && !tmpQuant_23; ) {

                String elem_30 = UTIL.ConvertToString(enm_31.next());
                x = elem_30;
                Boolean pred_24 = null;
                String var2_26 = null;
                var2_26 = qc.getName();
                pred_24 = new Boolean(UTIL.equals(x, var2_26));
                if (pred_24.booleanValue()) 
                  tmpQuant_23 = true;
              }
            }
          }
          cond_22 = new Boolean(tmpQuant_23);
          if (cond_22.booleanValue()) {

            String rexpr_35 = null;
            String tmppar_37 = null;
            tmppar_37 = qc.getName();
            rexpr_35 = UTIL.ConvertToString(classes.get(tmppar_37));
            return rexpr_35;
          }
          else 
            return UTIL.ConvertToString(primitiveTypes.get(new String("NotSupportedType")));
        }
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
          succ_2 = false;
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
            succ_2 = false;
        }
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
            succ_2 = false;
        }
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
            succ_2 = false;
        }
        if (succ_2) 
          return GetUmlPrimitiveTypeId((IUmlType) t);
        else 
          return UTIL.ConvertToString(primitiveTypes.get(new String("NotSupportedType")));
      }
    }
  }
// ***** VDMTOOLS END Name=GetTypeId#1|IUmlType


// ***** VDMTOOLS START Name=GetNextId KEEP=NO
  protected String GetNextId () throws CGException {

    id = UTIL.NumberToLong(UTIL.clone(new Long(id.intValue() + new Long(1).intValue())));
    return GetId(id);
  }
// ***** VDMTOOLS END Name=GetNextId


// ***** VDMTOOLS START Name=GetId#1|Long KEEP=NO
  protected String GetId (final Long idNum) throws CGException {

    String varRes_2 = null;
    String var2_4 = null;
    var2_4 = UTIL.ConvertToString(Util.ToString(idNum));
    varRes_2 = new String("VDM.").concat(var2_4);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetId#1|Long


// ***** VDMTOOLS START Name=GetVisibilityKind#1|IUmlVisibilityKind KEEP=NO
  protected String GetVisibilityKind (final IUmlVisibilityKind visibility) throws CGException {

    String varRes_2 = null;
    Long selRes_4 = null;
    selRes_4 = visibility.getValue();
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlVisibilityKindQuotes.IQPUBLIC)) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("public");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlVisibilityKindQuotes.IQPRIVATE)) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("private");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, UmlVisibilityKindQuotes.IQPROTECTED)) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("protected");
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetVisibilityKind#1|IUmlVisibilityKind

}
;