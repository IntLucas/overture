


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-10-16 by the VDM++ to JAVA Code Generator
// (v8.2.1b - Wed 15-Jul-2009 14:09:22)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.uml;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.api.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class UmlVisitor extends IUmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_UmlVisitor KEEP=NO
  private void vdm_init_UmlVisitor () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_UmlVisitor


// ***** VDMTOOLS START Name=UmlVisitor KEEP=NO
  public UmlVisitor () throws CGException {
    vdm_init_UmlVisitor();
  }
// ***** VDMTOOLS END Name=UmlVisitor


// ***** VDMTOOLS START Name=visitDocument#1|IUmlDocument KEEP=NO
  public void visitDocument (final IUmlDocument var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDocument#1|IUmlDocument


// ***** VDMTOOLS START Name=visitLexem#1|IUmlLexem KEEP=NO
  public void visitLexem (final IUmlLexem var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLexem#1|IUmlLexem


// ***** VDMTOOLS START Name=visitParameters#1|IUmlParameters KEEP=NO
  public void visitParameters (final IUmlParameters var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitParameters#1|IUmlParameters


// ***** VDMTOOLS START Name=visitOperation#1|IUmlOperation KEEP=NO
  public void visitOperation (final IUmlOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperation#1|IUmlOperation


// ***** VDMTOOLS START Name=visitModel#1|IUmlModel KEEP=NO
  public void visitModel (final IUmlModel var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitModel#1|IUmlModel


// ***** VDMTOOLS START Name=visitAssociation#1|IUmlAssociation KEEP=NO
  public void visitAssociation (final IUmlAssociation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAssociation#1|IUmlAssociation


// ***** VDMTOOLS START Name=visitLifeLine#1|IUmlLifeLine KEEP=NO
  public void visitLifeLine (final IUmlLifeLine var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLifeLine#1|IUmlLifeLine


// ***** VDMTOOLS START Name=visitNestedClassifiers#1|IUmlNestedClassifiers KEEP=NO
  public void visitNestedClassifiers (final IUmlNestedClassifiers var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNestedClassifiers#1|IUmlNestedClassifiers


// ***** VDMTOOLS START Name=visitIntegerType#1|IUmlIntegerType KEEP=NO
  public void visitIntegerType (final IUmlIntegerType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIntegerType#1|IUmlIntegerType


// ***** VDMTOOLS START Name=visitConstraint#1|IUmlConstraint KEEP=NO
  public void visitConstraint (final IUmlConstraint var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitConstraint#1|IUmlConstraint


// ***** VDMTOOLS START Name=visitCallEvent#1|IUmlCallEvent KEEP=NO
  public void visitCallEvent (final IUmlCallEvent var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCallEvent#1|IUmlCallEvent


// ***** VDMTOOLS START Name=visitProperty#1|IUmlProperty KEEP=NO
  public void visitProperty (final IUmlProperty var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitProperty#1|IUmlProperty


// ***** VDMTOOLS START Name=visitOwnedOperations#1|IUmlOwnedOperations KEEP=NO
  public void visitOwnedOperations (final IUmlOwnedOperations var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOwnedOperations#1|IUmlOwnedOperations


// ***** VDMTOOLS START Name=visitCombinedFragment#1|IUmlCombinedFragment KEEP=NO
  public void visitCombinedFragment (final IUmlCombinedFragment var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCombinedFragment#1|IUmlCombinedFragment


// ***** VDMTOOLS START Name=visitClassNameType#1|IUmlClassNameType KEEP=NO
  public void visitClassNameType (final IUmlClassNameType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassNameType#1|IUmlClassNameType


// ***** VDMTOOLS START Name=visitMos#1|IUmlMos KEEP=NO
  public void visitMos (final IUmlMos var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMos#1|IUmlMos


// ***** VDMTOOLS START Name=visitInteractionConstraint#1|IUmlInteractionConstraint KEEP=NO
  public void visitInteractionConstraint (final IUmlInteractionConstraint var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInteractionConstraint#1|IUmlInteractionConstraint


// ***** VDMTOOLS START Name=visitBoolType#1|IUmlBoolType KEEP=NO
  public void visitBoolType (final IUmlBoolType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBoolType#1|IUmlBoolType


// ***** VDMTOOLS START Name=visitTemplateSignature#1|IUmlTemplateSignature KEEP=NO
  public void visitTemplateSignature (final IUmlTemplateSignature var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTemplateSignature#1|IUmlTemplateSignature


// ***** VDMTOOLS START Name=visitParameter#1|IUmlParameter KEEP=NO
  public void visitParameter (final IUmlParameter var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitParameter#1|IUmlParameter


// ***** VDMTOOLS START Name=visitInteraction#1|IUmlInteraction KEEP=NO
  public void visitInteraction (final IUmlInteraction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInteraction#1|IUmlInteraction


// ***** VDMTOOLS START Name=visitTemplateParameter#1|IUmlTemplateParameter KEEP=NO
  public void visitTemplateParameter (final IUmlTemplateParameter var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTemplateParameter#1|IUmlTemplateParameter


// ***** VDMTOOLS START Name=visitLiteralInteger#1|IUmlLiteralInteger KEEP=NO
  public void visitLiteralInteger (final IUmlLiteralInteger var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLiteralInteger#1|IUmlLiteralInteger


// ***** VDMTOOLS START Name=visitCharType#1|IUmlCharType KEEP=NO
  public void visitCharType (final IUmlCharType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharType#1|IUmlCharType


// ***** VDMTOOLS START Name=visitMessage#1|IUmlMessage KEEP=NO
  public void visitMessage (final IUmlMessage var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMessage#1|IUmlMessage


// ***** VDMTOOLS START Name=visitMultiplicityElement#1|IUmlMultiplicityElement KEEP=NO
  public void visitMultiplicityElement (final IUmlMultiplicityElement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMultiplicityElement#1|IUmlMultiplicityElement


// ***** VDMTOOLS START Name=visitStringType#1|IUmlStringType KEEP=NO
  public void visitStringType (final IUmlStringType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStringType#1|IUmlStringType


// ***** VDMTOOLS START Name=visitBes#1|IUmlBes KEEP=NO
  public void visitBes (final IUmlBes var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBes#1|IUmlBes


// ***** VDMTOOLS START Name=visitVoidType#1|IUmlVoidType KEEP=NO
  public void visitVoidType (final IUmlVoidType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitVoidType#1|IUmlVoidType


// ***** VDMTOOLS START Name=visitInteractionOperand#1|IUmlInteractionOperand KEEP=NO
  public void visitInteractionOperand (final IUmlInteractionOperand var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInteractionOperand#1|IUmlInteractionOperand


// ***** VDMTOOLS START Name=visitClass#1|IUmlClass KEEP=NO
  public void visitClass (final IUmlClass var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClass#1|IUmlClass


// ***** VDMTOOLS START Name=visitCollaboration#1|IUmlCollaboration KEEP=NO
  public void visitCollaboration (final IUmlCollaboration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCollaboration#1|IUmlCollaboration


// ***** VDMTOOLS START Name=visitLiteralString#1|IUmlLiteralString KEEP=NO
  public void visitLiteralString (final IUmlLiteralString var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLiteralString#1|IUmlLiteralString


// ***** VDMTOOLS START Name=visitOwnedProperties#1|IUmlOwnedProperties KEEP=NO
  public void visitOwnedProperties (final IUmlOwnedProperties var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOwnedProperties#1|IUmlOwnedProperties


// ***** VDMTOOLS START Name=visitUnlimitedNatural#1|IUmlUnlimitedNatural KEEP=NO
  public void visitUnlimitedNatural (final IUmlUnlimitedNatural var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnlimitedNatural#1|IUmlUnlimitedNatural


// ***** VDMTOOLS START Name=visitContextInfo#1|IUmlContextInfo KEEP=NO
  public void visitContextInfo (final IUmlContextInfo var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitContextInfo#1|IUmlContextInfo


// ***** VDMTOOLS START Name=visitNode#1|IUmlNode KEEP=NO
  public void visitNode (final IUmlNode pNode) throws CGException {
    if ((pNode instanceof IUmlParameters)) 
      visitParameters((IUmlParameters) pNode);
    else 
      if ((pNode instanceof IUmlOperation)) 
        visitOperation((IUmlOperation) pNode);
      else {
        if ((pNode instanceof IUmlModel)) 
          visitModel((IUmlModel) pNode);
        else {
          if ((pNode instanceof IUmlAssociation)) 
            visitAssociation((IUmlAssociation) pNode);
          else {
            if ((pNode instanceof IUmlType)) 
              visitType((IUmlType) pNode);
            else {
              if ((pNode instanceof IUmlLifeLine)) 
                visitLifeLine((IUmlLifeLine) pNode);
              else {
                if ((pNode instanceof IUmlNestedClassifiers)) 
                  visitNestedClassifiers((IUmlNestedClassifiers) pNode);
                else {
                  if ((pNode instanceof IUmlConstraint)) 
                    visitConstraint((IUmlConstraint) pNode);
                  else {
                    if ((pNode instanceof IUmlIntegerType)) 
                      visitIntegerType((IUmlIntegerType) pNode);
                    else {
                      if ((pNode instanceof IUmlCallEvent)) 
                        visitCallEvent((IUmlCallEvent) pNode);
                      else {
                        if ((pNode instanceof IUmlOwnedOperations)) 
                          visitOwnedOperations((IUmlOwnedOperations) pNode);
                        else {
                          if ((pNode instanceof IUmlProperty)) 
                            visitProperty((IUmlProperty) pNode);
                          else {
                            if ((pNode instanceof IUmlCombinedFragment)) 
                              visitCombinedFragment((IUmlCombinedFragment) pNode);
                            else {
                              if ((pNode instanceof IUmlClassNameType)) 
                                visitClassNameType((IUmlClassNameType) pNode);
                              else {
                                if ((pNode instanceof IUmlInteractionConstraint)) 
                                  visitInteractionConstraint((IUmlInteractionConstraint) pNode);
                                else {
                                  if ((pNode instanceof IUmlMos)) 
                                    visitMos((IUmlMos) pNode);
                                  else {
                                    if ((pNode instanceof IUmlBoolType)) 
                                      visitBoolType((IUmlBoolType) pNode);
                                    else {
                                      if ((pNode instanceof IUmlInteractionFragment)) 
                                        visitInteractionFragment((IUmlInteractionFragment) pNode);
                                      else {
                                        if ((pNode instanceof IUmlTemplateSignature)) 
                                          visitTemplateSignature((IUmlTemplateSignature) pNode);
                                        else {
                                          if ((pNode instanceof IUmlParameter)) 
                                            visitParameter((IUmlParameter) pNode);
                                          else {
                                            if ((pNode instanceof IUmlVisibilityKind)) 
                                              visitVisibilityKind((IUmlVisibilityKind) pNode);
                                            else {
                                              if ((pNode instanceof IUmlModelElement)) 
                                                visitModelElement((IUmlModelElement) pNode);
                                              else {
                                                if ((pNode instanceof IUmlParameterDirectionKind)) 
                                                  visitParameterDirectionKind((IUmlParameterDirectionKind) pNode);
                                                else {
                                                  if ((pNode instanceof IUmlInteraction)) 
                                                    visitInteraction((IUmlInteraction) pNode);
                                                  else {
                                                    if ((pNode instanceof IUmlTemplateParameter)) 
                                                      visitTemplateParameter((IUmlTemplateParameter) pNode);
                                                    else {
                                                      if ((pNode instanceof IUmlMessageKind)) 
                                                        visitMessageKind((IUmlMessageKind) pNode);
                                                      else {
                                                        if ((pNode instanceof IUmlLiteralInteger)) 
                                                          visitLiteralInteger((IUmlLiteralInteger) pNode);
                                                        else {
                                                          if ((pNode instanceof IUmlMessage)) 
                                                            visitMessage((IUmlMessage) pNode);
                                                          else {
                                                            if ((pNode instanceof IUmlCharType)) 
                                                              visitCharType((IUmlCharType) pNode);
                                                            else {
                                                              if ((pNode instanceof IUmlMultiplicityElement)) 
                                                                visitMultiplicityElement((IUmlMultiplicityElement) pNode);
                                                              else {
                                                                if ((pNode instanceof IUmlValueSpecification)) 
                                                                  visitValueSpecification((IUmlValueSpecification) pNode);
                                                                else {
                                                                  if ((pNode instanceof IUmlMessageSort)) 
                                                                    visitMessageSort((IUmlMessageSort) pNode);
                                                                  else {
                                                                    if ((pNode instanceof IUmlDefinitionBlock)) 
                                                                      visitDefinitionBlock((IUmlDefinitionBlock) pNode);
                                                                    else {
                                                                      if ((pNode instanceof IUmlStringType)) 
                                                                        visitStringType((IUmlStringType) pNode);
                                                                      else {
                                                                        if ((pNode instanceof IUmlInteractionOperatorKind)) 
                                                                          visitInteractionOperatorKind((IUmlInteractionOperatorKind) pNode);
                                                                        else {
                                                                          if ((pNode instanceof IUmlBes)) 
                                                                            visitBes((IUmlBes) pNode);
                                                                          else {
                                                                            if ((pNode instanceof IUmlVoidType)) 
                                                                              visitVoidType((IUmlVoidType) pNode);
                                                                            else {
                                                                              if ((pNode instanceof IUmlInteractionOperand)) 
                                                                                visitInteractionOperand((IUmlInteractionOperand) pNode);
                                                                              else {
                                                                                if ((pNode instanceof IUmlCollaboration)) 
                                                                                  visitCollaboration((IUmlCollaboration) pNode);
                                                                                else {
                                                                                  if ((pNode instanceof IUmlClass)) 
                                                                                    visitClass((IUmlClass) pNode);
                                                                                  else {
                                                                                    if ((pNode instanceof IUmlLiteralString)) 
                                                                                      visitLiteralString((IUmlLiteralString) pNode);
                                                                                    else {
                                                                                      if ((pNode instanceof IUmlOwnedProperties)) 
                                                                                        visitOwnedProperties((IUmlOwnedProperties) pNode);
                                                                                      else {
                                                                                        if ((pNode instanceof IUmlUnlimitedNatural)) 
                                                                                          visitUnlimitedNatural((IUmlUnlimitedNatural) pNode);
                                                                                        else {

                                                                                          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //                                                                                           return;
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitNode#1|IUmlNode


// ***** VDMTOOLS START Name=visitParameterDirectionKind#1|IUmlParameterDirectionKind KEEP=NO
  public void visitParameterDirectionKind (final IUmlParameterDirectionKind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitParameterDirectionKind#1|IUmlParameterDirectionKind


// ***** VDMTOOLS START Name=visitMessageKind#1|IUmlMessageKind KEEP=NO
  public void visitMessageKind (final IUmlMessageKind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMessageKind#1|IUmlMessageKind


// ***** VDMTOOLS START Name=visitType#1|IUmlType KEEP=NO
  public void visitType (final IUmlType pNode) throws CGException {
    if ((pNode instanceof IUmlVoidType)) 
      visitVoidType((IUmlVoidType) pNode);
    else 
      if ((pNode instanceof IUmlBoolType)) 
        visitBoolType((IUmlBoolType) pNode);
      else {
        if ((pNode instanceof IUmlCharType)) 
          visitCharType((IUmlCharType) pNode);
        else {
          if ((pNode instanceof IUmlIntegerType)) 
            visitIntegerType((IUmlIntegerType) pNode);
          else {
            if ((pNode instanceof IUmlStringType)) 
              visitStringType((IUmlStringType) pNode);
            else {
              if ((pNode instanceof IUmlUnlimitedNatural)) 
                visitUnlimitedNatural((IUmlUnlimitedNatural) pNode);
              else {
                if ((pNode instanceof IUmlClassNameType)) 
                  visitClassNameType((IUmlClassNameType) pNode);
                else {

                  UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //                   return;
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitType#1|IUmlType


// ***** VDMTOOLS START Name=visitValueSpecification#1|IUmlValueSpecification KEEP=NO
  public void visitValueSpecification (final IUmlValueSpecification pNode) throws CGException {
    if ((pNode instanceof IUmlLiteralInteger)) 
      visitLiteralInteger((IUmlLiteralInteger) pNode);
    else 
      if ((pNode instanceof IUmlLiteralString)) 
        visitLiteralString((IUmlLiteralString) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //         return;
      }
  }
// ***** VDMTOOLS END Name=visitValueSpecification#1|IUmlValueSpecification


// ***** VDMTOOLS START Name=visitMessageSort#1|IUmlMessageSort KEEP=NO
  public void visitMessageSort (final IUmlMessageSort var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMessageSort#1|IUmlMessageSort


// ***** VDMTOOLS START Name=visitDefinitionBlock#1|IUmlDefinitionBlock KEEP=NO
  public void visitDefinitionBlock (final IUmlDefinitionBlock pNode) throws CGException {
    if ((pNode instanceof IUmlNestedClassifiers)) 
      visitNestedClassifiers((IUmlNestedClassifiers) pNode);
    else 
      if ((pNode instanceof IUmlOwnedOperations)) 
        visitOwnedOperations((IUmlOwnedOperations) pNode);
      else {
        if ((pNode instanceof IUmlOwnedProperties)) 
          visitOwnedProperties((IUmlOwnedProperties) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //           return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitDefinitionBlock#1|IUmlDefinitionBlock


// ***** VDMTOOLS START Name=visitInteractionOperatorKind#1|IUmlInteractionOperatorKind KEEP=NO
  public void visitInteractionOperatorKind (final IUmlInteractionOperatorKind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInteractionOperatorKind#1|IUmlInteractionOperatorKind


// ***** VDMTOOLS START Name=visitInteractionFragment#1|IUmlInteractionFragment KEEP=NO
  public void visitInteractionFragment (final IUmlInteractionFragment pNode) throws CGException {
    if ((pNode instanceof IUmlMos)) 
      visitMos((IUmlMos) pNode);
    else 
      if ((pNode instanceof IUmlInteractionOperand)) 
        visitInteractionOperand((IUmlInteractionOperand) pNode);
      else {
        if ((pNode instanceof IUmlCombinedFragment)) 
          visitCombinedFragment((IUmlCombinedFragment) pNode);
        else {
          if ((pNode instanceof IUmlBes)) 
            visitBes((IUmlBes) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //             return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitInteractionFragment#1|IUmlInteractionFragment


// ***** VDMTOOLS START Name=visitVisibilityKind#1|IUmlVisibilityKind KEEP=NO
  public void visitVisibilityKind (final IUmlVisibilityKind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitVisibilityKind#1|IUmlVisibilityKind


// ***** VDMTOOLS START Name=visitModelElement#1|IUmlModelElement KEEP=NO
  public void visitModelElement (final IUmlModelElement pNode) throws CGException {
    if ((pNode instanceof IUmlAssociation)) 
      visitAssociation((IUmlAssociation) pNode);
    else 
      if ((pNode instanceof IUmlClass)) 
        visitClass((IUmlClass) pNode);
      else {
        if ((pNode instanceof IUmlCollaboration)) 
          visitCollaboration((IUmlCollaboration) pNode);
        else {
          if ((pNode instanceof IUmlConstraint)) 
            visitConstraint((IUmlConstraint) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //             return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitModelElement#1|IUmlModelElement

}
;