


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-11-27 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 11:13:11)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.vdm2uml;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.StdLib;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.api.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class Vdm2Uml {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=associations KEEP=NO
  private HashSet associations = new HashSet();
// ***** VDMTOOLS END Name=associations

// ***** VDMTOOLS START Name=constraints KEEP=NO
  private HashSet constraints = new HashSet();
// ***** VDMTOOLS END Name=constraints

// ***** VDMTOOLS START Name=runningId KEEP=NO
  private Long runningId = null;
// ***** VDMTOOLS END Name=runningId

// ***** VDMTOOLS START Name=log KEEP=NO
  private StatusLog log = null;
// ***** VDMTOOLS END Name=log

// ***** VDMTOOLS START Name=classFilter KEEP=NO
  private Vector classFilter = null;
// ***** VDMTOOLS END Name=classFilter

// ***** VDMTOOLS START Name=nestedClasses KEEP=NO
  private HashSet nestedClasses = new HashSet();
// ***** VDMTOOLS END Name=nestedClasses


// ***** VDMTOOLS START Name=vdm_init_Vdm2Uml KEEP=NO
  private void vdm_init_Vdm2Uml () throws CGException {
    try {

      associations = new HashSet();
      constraints = new HashSet();
      runningId = new Long(0);
      log = (StatusLog) new StatusLog();
      classFilter = new Vector();
      nestedClasses = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Vdm2Uml


// ***** VDMTOOLS START Name=Vdm2Uml KEEP=NO
  public Vdm2Uml () throws CGException {
    vdm_init_Vdm2Uml();
  }
// ***** VDMTOOLS END Name=Vdm2Uml


// ***** VDMTOOLS START Name=GetLog KEEP=NO
  public StatusLog GetLog () throws CGException {
    return (StatusLog) log;
  }
// ***** VDMTOOLS END Name=GetLog


// ***** VDMTOOLS START Name=Init#1|IOmlSpecifications KEEP=NO
  public IUmlModel Init (final IOmlSpecifications specs) throws CGException {

    UmlModel model = (UmlModel) (UmlModel) BuildUml((IOmlSpecifications) specs);
    {

      HashSet par_6 = new HashSet();
      HashSet var1_7 = new HashSet();
      HashSet var1_8 = new HashSet();
      var1_8 = model.getDefinitions();
      var1_7 = (HashSet) var1_8.clone();
      var1_7.addAll(associations);
      par_6 = (HashSet) var1_7.clone();
      par_6.addAll(constraints);
      model.setDefinitions(par_6);
      return (IUmlModel) model;
    }
  }
// ***** VDMTOOLS END Name=Init#1|IOmlSpecifications


// ***** VDMTOOLS START Name=AddFilterClass#1|String KEEP=NO
@SuppressWarnings({"all","unchecked","unused"})
  public void AddFilterClass (final String className) throws CGException {
    classFilter.add(className);
  }
// ***** VDMTOOLS END Name=AddFilterClass#1|String


// ***** VDMTOOLS START Name=BuildUml#1|IOmlSpecifications KEEP=NO
  public UmlModel BuildUml (final IOmlSpecifications specs) throws CGException {

    Vector classes = null;
    classes = specs.getClassList();
    Vector uml_uclasses = null;
    Vector var1_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = classes.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_29 = bind_l_7.iterator(); enm_29.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_29.next());
        i = e_10;
        Boolean pred_19 = null;
        String var1_20 = null;
        IOmlClass obj_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= classes.size())) 
          obj_21 = (IOmlClass) classes.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_20 = obj_21.getIdentifier();
        HashSet var2_24 = new HashSet();
        HashSet set_26 = new HashSet();
        Enumeration enm_27 = classFilter.elements();
        while ( enm_27.hasMoreElements())
          set_26.add(enm_27.nextElement());
        var2_24 = set_26;
        pred_19 = new Boolean(!var2_24.contains(var1_20));
        if (pred_19.booleanValue()) {

          IUmlClass reselem_15 = null;
          IOmlClass par_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= classes.size())) 
            par_16 = (IOmlClass) classes.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_15 = (IUmlClass) BuildClass((IOmlClass) par_16);
          res_l_6.add(reselem_15);
        }
      }
      var1_5 = res_l_6;
    }
    Vector var2_30 = null;
    var2_30 = (Vector) UTIL.ConvertToList(StdLib.SetToSeq(nestedClasses));
    uml_uclasses = (Vector) var1_5.clone();
    uml_uclasses.addAll(var2_30);
    UmlModel rexpr_32 = null;
    HashSet arg_34 = new HashSet();
    HashSet set_36 = new HashSet();
    Enumeration enm_37 = uml_uclasses.elements();
    while ( enm_37.hasMoreElements())
      set_36.add(enm_37.nextElement());
    arg_34 = set_36;
    rexpr_32 = new UmlModel(new String("Root"), arg_34);
    return (UmlModel) rexpr_32;
  }
// ***** VDMTOOLS END Name=BuildUml#1|IOmlSpecifications


// ***** VDMTOOLS START Name=BuildClass#1|IOmlClass KEEP=NO
  public IUmlClass BuildClass (final IOmlClass c) throws CGException {

    String par_3 = null;
    par_3 = c.getIdentifier();
    log.addNewClassInfo(par_3);
    {

      String name = null;
      name = c.getIdentifier();
      IOmlInheritanceClause inh = null;
      Boolean cond_8 = null;
      cond_8 = c.hasInheritanceClause();
      if (cond_8.booleanValue()) 
        inh = (IOmlInheritanceClause) c.getInheritanceClause();
      else 
        inh = null;
      Vector body = null;
      body = c.getClassBody();
      Boolean isStatic = new Boolean(false);
      Boolean isActive = null;
      Long var1_12 = null;
      HashSet unArg_13 = new HashSet();
      HashSet res_s_14 = new HashSet();
      {

        HashSet e_set_23 = new HashSet();
        HashSet riseq_25 = new HashSet();
        int max_26 = body.size();
        for (int i_27 = 1; i_27 <= max_26; i_27++) 
          riseq_25.add(new Long(i_27));
        e_set_23 = riseq_25;
        Long i = null;
        {
          for (Iterator enm_29 = e_set_23.iterator(); enm_29.hasNext(); ) {

            Long elem_28 = UTIL.NumberToLong(enm_29.next());
            i = elem_28;
            Boolean pred_18 = null;
            IOmlDefinitionBlock obj_19 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
              obj_19 = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            pred_18 = new Boolean(obj_19 instanceof IOmlThreadDefinition);
            if (pred_18.booleanValue()) {

              IOmlDefinitionBlock res_s_15 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
                res_s_15 = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              res_s_14.add(res_s_15);
            }
          }
        }
      }
      unArg_13 = res_s_14;
      var1_12 = new Long(unArg_13.size());
      isActive = new Boolean((var1_12.intValue()) > (new Long(0).intValue()));
      Vector dBlock = null;
      {

        Vector res_l_32 = new Vector();
        HashSet resBind_s_34 = new HashSet();
        HashSet riseq_38 = new HashSet();
        int max_39 = body.size();
        for (int i_40 = 1; i_40 <= max_39; i_40++) 
          riseq_38.add(new Long(i_40));
        resBind_s_34 = riseq_38;
        Vector bind_l_33 = null;
        bind_l_33 = UTIL.Sort(resBind_s_34);
        Long i = null;
        for (Iterator enm_54 = bind_l_33.iterator(); enm_54.hasNext(); ) {

          Long e_36 = UTIL.NumberToLong(enm_54.next());
          i = e_36;
          Boolean pred_48 = null;
          Boolean unArg_49 = null;
          IOmlDefinitionBlock obj_50 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
            obj_50 = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          unArg_49 = new Boolean(obj_50 instanceof IOmlTraceDefinitions);
          pred_48 = new Boolean(!unArg_49.booleanValue());
          if (pred_48.booleanValue()) {

            IUmlDefinitionBlock reselem_41 = null;
            {

              IOmlDefinitionBlock dbs = null;
              if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
                dbs = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              reselem_41 = (IUmlDefinitionBlock) (IUmlDefinitionBlock) BuildDefB((IOmlDefinitionBlock) dbs, name);
            }
            res_l_32.add(reselem_41);
          }
        }
        dBlock = res_l_32;
      }
      HashSet dBlockSet = new HashSet();
      HashSet res_s_56 = new HashSet();
      {

        HashSet e1_set_63 = new HashSet(dBlock);
        IUmlDefinitionBlock d = null;
        {
          for (Iterator enm_65 = e1_set_63.iterator(); enm_65.hasNext(); ) {

            IUmlDefinitionBlock elem_64 = (IUmlDefinitionBlock) enm_65.next();
            d = (IUmlDefinitionBlock) elem_64;
            if (new Boolean(!UTIL.equals(d, null)).booleanValue()) {
              res_s_56.add(d);
            }
          }
        }
      }
      dBlockSet = res_s_56;
      Boolean isAbstract = HasSubclassResponsibilityDefinition(body);
      Vector supers = GetSuperClasses((IOmlInheritanceClause) inh);
      UmlVisibilityKind visibility = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
      return (IUmlClass) new UmlClass(name, dBlockSet, isAbstract, supers, visibility, isStatic, isActive, null);
    }
  }
// ***** VDMTOOLS END Name=BuildClass#1|IOmlClass


// ***** VDMTOOLS START Name=GetSuperClasses#1|IOmlInheritanceClause KEEP=NO
  public Vector GetSuperClasses (final IOmlInheritanceClause inh) throws CGException {
    if (new Boolean(UTIL.equals(inh, null)).booleanValue()) 
      return new Vector();
    else {

      Vector list = null;
      list = inh.getIdentifierList();
      Vector rexpr_7 = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = list.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_22 = bind_l_9.iterator(); enm_22.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_22.next());
          i = e_12;
          UmlClassNameType reselem_17 = null;
          String arg_18 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            arg_18 = UTIL.ConvertToString(list.get(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_17 = new UmlClassNameType(arg_18);
          res_l_8.add(reselem_17);
        }
        rexpr_7 = res_l_8;
      }
      return rexpr_7;
    }
  }
// ***** VDMTOOLS END Name=GetSuperClasses#1|IOmlInheritanceClause


// ***** VDMTOOLS START Name=HasSubclassResponsibilityDefinition#1|Vector KEEP=NO
@SuppressWarnings({"all","unchecked","unused"})
  public Boolean HasSubclassResponsibilityDefinition (final Vector dBlock) throws CGException {

    Vector opList = null;
    Vector unArg_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = dBlock.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_24 = bind_l_6.iterator(); enm_24.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_24.next());
        i = e_9;
        Boolean pred_19 = null;
        IOmlDefinitionBlock obj_20 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= dBlock.size())) 
          obj_20 = (IOmlDefinitionBlock) dBlock.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_19 = new Boolean(obj_20 instanceof IOmlOperationDefinitions);
        if (pred_19.booleanValue()) {

          Vector reselem_14 = null;
          {

            IOmlDefinitionBlock tmpVal_16 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= dBlock.size())) 
              tmpVal_16 = (IOmlDefinitionBlock) dBlock.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            IOmlOperationDefinitions op = null;
            op = (IOmlOperationDefinitions) tmpVal_16;
            reselem_14 = op.getOperationList();
          }
          res_l_5.add(reselem_14);
        }
      }
      unArg_4 = res_l_5;
    }
    Vector rdcseq_25 = new Vector();
    for (Iterator enm_28 = unArg_4.iterator(); enm_28.hasNext(); ) {

      Vector e_26 = (Vector) UTIL.ConvertToList(enm_28.next());
      rdcseq_25.addAll(e_26);
    }
    opList = rdcseq_25;
    HashSet hasIsSubClassResp = new HashSet();
    HashSet res_s_30 = new HashSet();
    {

      HashSet e_set_44 = new HashSet();
      HashSet riseq_46 = new HashSet();
      int max_47 = opList.size();
      for (int i_48 = 1; i_48 <= max_47; i_48++) 
        riseq_46.add(new Long(i_48));
      e_set_44 = riseq_46;
      Long i = null;
      {
        for (Iterator enm_50 = e_set_44.iterator(); enm_50.hasNext(); ) {

          Long elem_49 = UTIL.NumberToLong(enm_50.next());
          i = elem_49;
          Boolean pred_38 = null;
          IOmlOperationShape obj_39 = null;
          IOmlOperationDefinition obj_40 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= opList.size())) 
            obj_40 = (IOmlOperationDefinition) opList.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_39 = (IOmlOperationShape) obj_40.getShape();
          pred_38 = new Boolean(obj_39 instanceof IOmlExplicitOperation);
          if (pred_38.booleanValue()) {

            Boolean res_s_31 = null;
            {

              IOmlExplicitOperation explicitOp = null;
              IOmlOperationDefinition obj_34 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= opList.size())) 
                obj_34 = (IOmlOperationDefinition) opList.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              explicitOp = (IOmlExplicitOperation) obj_34.getShape();
              IOmlOperationBody obj_37 = null;
              obj_37 = (IOmlOperationBody) explicitOp.getBody();
              res_s_31 = obj_37.getSubclassResponsibility();
            }
            res_s_30.add(res_s_31);
          }
        }
      }
    }
    hasIsSubClassResp = res_s_30;
    Boolean rexpr_51 = null;
    rexpr_51 = new Boolean(hasIsSubClassResp.contains(new Boolean(true)));
    return rexpr_51;
  }
// ***** VDMTOOLS END Name=HasSubclassResponsibilityDefinition#1|Vector


// ***** VDMTOOLS START Name=BuildDefB#2|IOmlDefinitionBlock|String KEEP=NO
  private IUmlDefinitionBlock BuildDefB (final IOmlDefinitionBlock block, final String owner) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlInstanceVariableDefinitions))) 
        succ_3 = false;
      if (succ_3) {

        IOmlInstanceVariableDefinitions tmp = (IOmlInstanceVariableDefinitions) block;
        return (IUmlDefinitionBlock) BuildDefBlock((IOmlInstanceVariableDefinitions) tmp, owner);
      }
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlValueDefinitions))) 
          succ_3 = false;
        if (succ_3) {

          IOmlValueDefinitions tmp = (IOmlValueDefinitions) block;
          return (IUmlDefinitionBlock) BuildDefBlock((IOmlValueDefinitions) tmp, owner);
        }
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlTypeDefinitions))) 
            succ_3 = false;
          if (succ_3) {

            IOmlTypeDefinitions tmp = (IOmlTypeDefinitions) block;
            return (IUmlDefinitionBlock) BuildDefBlock((IOmlTypeDefinitions) tmp, owner);
          }
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlOperationDefinitions))) 
              succ_3 = false;
            if (succ_3) {

              IOmlOperationDefinitions tmp = (IOmlOperationDefinitions) block;
              return (IUmlDefinitionBlock) BuildDefBlock((IOmlOperationDefinitions) tmp, owner);
            }
            else {

              succ_3 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlFunctionDefinitions))) 
                succ_3 = false;
              if (succ_3) {

                IOmlFunctionDefinitions tmp = (IOmlFunctionDefinitions) block;
                return (IUmlDefinitionBlock) BuildDefBlock((IOmlFunctionDefinitions) tmp, owner);
              }
              else 
                return null;
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=BuildDefB#2|IOmlDefinitionBlock|String


// ***** VDMTOOLS START Name=BuildDefBlock#2|IOmlInstanceVariableDefinitions|String KEEP=NO
  public IUmlOwnedProperties BuildDefBlock (final IOmlInstanceVariableDefinitions v, final String owner) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = v.getVariablesList();
    Vector q = null;
    q = tmpVal_4;
    Vector props = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = q.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_25 = bind_l_7.iterator(); enm_25.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_25.next());
        i = e_10;
        Boolean pred_20 = null;
        IOmlInstanceVariableShape obj_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
          obj_21 = (IOmlInstanceVariableShape) q.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_20 = new Boolean(obj_21 instanceof IOmlInstanceVariable);
        if (pred_20.booleanValue()) {

          IUmlProperty reselem_15 = null;
          IOmlInstanceVariableShape par_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
            par_16 = (IOmlInstanceVariableShape) q.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_15 = (IUmlProperty) BuildVariable((IOmlInstanceVariable) par_16, owner);
          res_l_6.add(reselem_15);
        }
      }
      props = res_l_6;
    }
    UmlOwnedProperties rexpr_26 = null;
    HashSet arg_27 = new HashSet();
    HashSet res_s_28 = new HashSet();
    {

      HashSet e1_set_35 = new HashSet(props);
      IUmlProperty p = null;
      {
        for (Iterator enm_37 = e1_set_35.iterator(); enm_37.hasNext(); ) {

          IUmlProperty elem_36 = (IUmlProperty) enm_37.next();
          p = (IUmlProperty) elem_36;
          if (new Boolean(!UTIL.equals(p, null)).booleanValue()) {
            res_s_28.add(p);
          }
        }
      }
    }
    arg_27 = res_s_28;
    rexpr_26 = new UmlOwnedProperties(arg_27);
    return (IUmlOwnedProperties) rexpr_26;
  }
// ***** VDMTOOLS END Name=BuildDefBlock#2|IOmlInstanceVariableDefinitions|String


// ***** VDMTOOLS START Name=BuildVariable#2|IOmlInstanceVariable|String KEEP=NO
  public IUmlProperty BuildVariable (final IOmlInstanceVariable vdm_var, final String owner) throws CGException {

    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) vdm_var.getAccess();
    IOmlScope scope = null;
    scope = (IOmlScope) access.getScope();
    IOmlAssignmentDefinition assign = null;
    assign = (IOmlAssignmentDefinition) vdm_var.getAssignmentDefinition();
    Boolean isStatic = null;
    isStatic = access.getStaticAccess();
    String name = null;
    name = assign.getIdentifier();
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) ConvertScopeToVisibility((IOmlScope) scope);
    IOmlType omlType = null;
    omlType = (IOmlType) assign.getType();
    IUmlMultiplicityElement multiplicity = null;
    multiplicity = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) omlType);
    IUmlType type = null;
    type = (IUmlType) Vdm2UmlType.ConvertPropertyType(omlType, owner);
    Boolean isReadOnly = new Boolean(false);
    IUmlValueSpecification vdm_default = null;
    Boolean cond_20 = null;
    cond_20 = assign.hasExpression();
    if (cond_20.booleanValue()) {

      IOmlExpression par_21 = null;
      par_21 = (IOmlExpression) assign.getExpression();
      vdm_default = (IUmlValueSpecification) GetDefaultValue((IOmlExpression) par_21);
    }
    else 
      vdm_default = null;
    Boolean isComposite = IsSimpleType((IOmlType) omlType);
    Boolean isDerived = new Boolean(false);
    IUmlType qualifier = null;
    qualifier = (IUmlType) Vdm2UmlType.GetQualifier(omlType);
    {

      IUmlProperty property = (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, owner, qualifier);
      if (new Boolean(!IsSimpleType((IOmlType) omlType).booleanValue()).booleanValue()) {

        CreateAssociationFromProperty((IUmlProperty) property, (IOmlType) omlType);
        return null;
      }
      else 
        return (IUmlProperty) property;
    }
  }
// ***** VDMTOOLS END Name=BuildVariable#2|IOmlInstanceVariable|String


// ***** VDMTOOLS START Name=GetDefaultValue#1|IOmlExpression KEEP=NO
  public IUmlValueSpecification GetDefaultValue (final IOmlExpression expression) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(expression instanceof IOmlSymbolicLiteralExpression))) 
        succ_2 = false;
      if (succ_2) {

        IOmlSymbolicLiteralExpression se = (IOmlSymbolicLiteralExpression) expression;
        boolean succ_10 = true;
        {

          succ_10 = true;
          Boolean tmpVal_v_20 = null;
          IOmlLiteral obj_21 = null;
          obj_21 = (IOmlLiteral) se.getLiteral();
          tmpVal_v_20 = new Boolean(obj_21 instanceof IOmlTextLiteral);
          if (!UTIL.equals(new Boolean(true), tmpVal_v_20)) 
            succ_10 = false;
          if (succ_10) {

            IOmlTextLiteral tx = null;
            tx = (IOmlTextLiteral) se.getLiteral();
            UmlLiteralString rexpr_24 = null;
            String arg_25 = null;
            arg_25 = tx.getVal();
            rexpr_24 = new UmlLiteralString(arg_25);
            return (IUmlValueSpecification) rexpr_24;
          }
          else {

            succ_10 = true;
            Boolean tmpVal_v_14 = null;
            IOmlLiteral obj_15 = null;
            obj_15 = (IOmlLiteral) se.getLiteral();
            tmpVal_v_14 = new Boolean(obj_15 instanceof IOmlNumericLiteral);
            if (!UTIL.equals(new Boolean(true), tmpVal_v_14)) 
              succ_10 = false;
            if (succ_10) {

              IOmlNumericLiteral tx = null;
              tx = (IOmlNumericLiteral) se.getLiteral();
              UmlLiteralInteger rexpr_18 = null;
              Long arg_19 = null;
              arg_19 = tx.getVal();
              rexpr_18 = new UmlLiteralInteger(arg_19);
              return (IUmlValueSpecification) rexpr_18;
            }
            else 
              return null;
          }
        }
      }
      else 
        return null;
    }
  }
// ***** VDMTOOLS END Name=GetDefaultValue#1|IOmlExpression


// ***** VDMTOOLS START Name=ConvertScopeToVisibility#1|IOmlScope KEEP=NO
  public IUmlVisibilityKind ConvertScopeToVisibility (final IOmlScope sc) throws CGException {

    Object varRes_2 = null;
    {

      Long val = null;
      val = sc.getValue();
      boolean succ_5 = true;
      {

        succ_5 = true;
        if (!UTIL.equals(val, OmlScopeQuotes.IQPUBLIC)) 
          succ_5 = false;
        if (succ_5) 
          varRes_2 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
      }
      if (!succ_5) {

        succ_5 = true;
        if (!UTIL.equals(val, OmlScopeQuotes.IQPRIVATE)) 
          succ_5 = false;
        if (!succ_5) {

          succ_5 = true;
          if (!UTIL.equals(val, OmlScopeQuotes.IQDEFAULT)) 
            succ_5 = false;
        }
        if (succ_5) 
          varRes_2 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
      }
      if (!succ_5) {

        succ_5 = true;
        if (!UTIL.equals(val, OmlScopeQuotes.IQPROTECTED)) 
          succ_5 = false;
        if (succ_5) 
          varRes_2 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPROTECTED);
      }
      if (!succ_5) 
        UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
    }
    return (IUmlVisibilityKind) varRes_2;
  }
// ***** VDMTOOLS END Name=ConvertScopeToVisibility#1|IOmlScope


// ***** VDMTOOLS START Name=BuildDefBlock#2|IOmlValueDefinitions|String KEEP=NO
  public IUmlOwnedProperties BuildDefBlock (final IOmlValueDefinitions v, final String owner) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = v.getValueList();
    Vector q = null;
    q = tmpVal_4;
    Vector props = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = q.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_21 = bind_l_7.iterator(); enm_21.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_21.next());
        i = e_10;
        IUmlProperty reselem_15 = null;
        IOmlValueDefinition par_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
          par_16 = (IOmlValueDefinition) q.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = (IUmlProperty) BuildValue((IOmlValueDefinition) par_16, owner);
        res_l_6.add(reselem_15);
      }
      props = res_l_6;
    }
    HashSet propsNoNil = new HashSet();
    HashSet res_s_23 = new HashSet();
    {

      HashSet e1_set_30 = new HashSet(props);
      IUmlProperty p = null;
      {
        for (Iterator enm_32 = e1_set_30.iterator(); enm_32.hasNext(); ) {

          IUmlProperty elem_31 = (IUmlProperty) enm_32.next();
          p = (IUmlProperty) elem_31;
          if (new Boolean(!UTIL.equals(p, null)).booleanValue()) {
            res_s_23.add(p);
          }
        }
      }
    }
    propsNoNil = res_s_23;
    return (IUmlOwnedProperties) new UmlOwnedProperties(propsNoNil);
  }
// ***** VDMTOOLS END Name=BuildDefBlock#2|IOmlValueDefinitions|String


// ***** VDMTOOLS START Name=BuildValue#2|IOmlValueDefinition|String KEEP=NO
  public IUmlProperty BuildValue (final IOmlValueDefinition vdm_var, final String owner) throws CGException {

    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) vdm_var.getAccess();
    IOmlScope scope = null;
    scope = (IOmlScope) access.getScope();
    IOmlValueShape shape = null;
    shape = (IOmlValueShape) vdm_var.getShape();
    {

      Boolean cond_7 = null;
      Boolean unArg_8 = null;
      unArg_8 = shape.hasType();
      cond_7 = new Boolean(!unArg_8.booleanValue());
      if (cond_7.booleanValue()) {

        log.mappingNotSupported((IOmlValueDefinition) vdm_var);
        return null;
      }
      else {

        IOmlPattern pat = null;
        pat = (IOmlPattern) shape.getPattern();
        if (new Boolean(pat instanceof IOmlPatternIdentifier).booleanValue()) {

          Boolean isStatic = null;
          isStatic = access.getStaticAccess();
          IOmlPatternIdentifier patternIdent = (IOmlPatternIdentifier) pat;
          String name = null;
          name = patternIdent.getIdentifier();
          IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) ConvertScopeToVisibility((IOmlScope) scope);
          IUmlMultiplicityElement multiplicity = null;
          IOmlType par_21 = null;
          par_21 = (IOmlType) shape.getType();
          multiplicity = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) par_21);
          IUmlType type = null;
          IOmlType par_23 = null;
          par_23 = (IOmlType) shape.getType();
          type = (IUmlType) Vdm2UmlType.ConvertType(par_23);
          Boolean isReadOnly = new Boolean(true);
          IUmlValueSpecification vdm_default = null;
          IOmlExpression par_26 = null;
          par_26 = (IOmlExpression) shape.getExpression();
          vdm_default = (IUmlValueSpecification) GetDefaultValue((IOmlExpression) par_26);
          Boolean isComposite = null;
          IOmlType par_28 = null;
          par_28 = (IOmlType) shape.getType();
          isComposite = IsSimpleType((IOmlType) par_28);
          Boolean isDerived = new Boolean(false);
          IUmlType qualifier = null;
          IOmlType par_31 = null;
          par_31 = (IOmlType) shape.getType();
          qualifier = (IUmlType) Vdm2UmlType.GetQualifier(par_31);
          IOmlType omlType = null;
          omlType = (IOmlType) shape.getType();
          {

            IUmlProperty property = (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, owner, qualifier);
            if (new Boolean(!IsSimpleType((IOmlType) omlType).booleanValue()).booleanValue()) {

              CreateAssociationFromProperty((IUmlProperty) property, (IOmlType) omlType);
              return null;
            }
            else 
              return (IUmlProperty) property;
          }
        }
        else 
          return null;
      }
    }
  }
// ***** VDMTOOLS END Name=BuildValue#2|IOmlValueDefinition|String


// ***** VDMTOOLS START Name=BuildDefBlock#2|IOmlTypeDefinitions|String KEEP=NO
  public IUmlNestedClassifiers BuildDefBlock (final IOmlTypeDefinitions var_1_1, final String var_2_2) throws CGException {

    IOmlTypeDefinitions td = null;
    boolean succ_3 = true;
    td = (IOmlTypeDefinitions) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation BuildDefBlock");
    {

      Vector tmpVal_5 = null;
      tmpVal_5 = td.getTypeList();
      Vector q = null;
      q = tmpVal_5;
      Vector tps = null;
      {

        Vector res_l_7 = new Vector();
        HashSet resBind_s_9 = new HashSet();
        HashSet riseq_13 = new HashSet();
        int max_14 = q.size();
        for (int i_15 = 1; i_15 <= max_14; i_15++) 
          riseq_13.add(new Long(i_15));
        resBind_s_9 = riseq_13;
        Vector bind_l_8 = null;
        bind_l_8 = UTIL.Sort(resBind_s_9);
        Long i = null;
        for (Iterator enm_31 = bind_l_8.iterator(); enm_31.hasNext(); ) {

          Long e_11 = UTIL.NumberToLong(enm_31.next());
          i = e_11;
          Boolean pred_25 = null;
          IOmlTypeShape obj_26 = null;
          IOmlTypeDefinition obj_27 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
            obj_27 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_26 = (IOmlTypeShape) obj_27.getShape();
          pred_25 = new Boolean(obj_26 instanceof IOmlSimpleType);
          if (pred_25.booleanValue()) {

            IUmlType reselem_16 = null;
            IOmlTypeShape par_17 = null;
            IOmlTypeDefinition obj_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
              obj_18 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_17 = (IOmlTypeShape) obj_18.getShape();
            IOmlAccessDefinition par_21 = null;
            IOmlTypeDefinition obj_22 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
              obj_22 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_21 = (IOmlAccessDefinition) obj_22.getAccess();
            reselem_16 = (IUmlType) BuildSimpleType((IOmlSimpleType) par_17, (IOmlAccessDefinition) par_21);
            res_l_7.add(reselem_16);
          }
        }
        tps = res_l_7;
      }
      Vector tps2 = null;
      {

        Vector res_l_33 = new Vector();
        HashSet resBind_s_35 = new HashSet();
        HashSet riseq_39 = new HashSet();
        int max_40 = q.size();
        for (int i_41 = 1; i_41 <= max_40; i_41++) 
          riseq_39.add(new Long(i_41));
        resBind_s_35 = riseq_39;
        Vector bind_l_34 = null;
        bind_l_34 = UTIL.Sort(resBind_s_35);
        Long i = null;
        for (Iterator enm_57 = bind_l_34.iterator(); enm_57.hasNext(); ) {

          Long e_37 = UTIL.NumberToLong(enm_57.next());
          i = e_37;
          Boolean pred_51 = null;
          IOmlTypeShape obj_52 = null;
          IOmlTypeDefinition obj_53 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
            obj_53 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_52 = (IOmlTypeShape) obj_53.getShape();
          pred_51 = new Boolean(obj_52 instanceof IOmlComplexType);
          if (pred_51.booleanValue()) {

            IUmlType reselem_42 = null;
            IOmlTypeShape par_43 = null;
            IOmlTypeDefinition obj_44 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
              obj_44 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_43 = (IOmlTypeShape) obj_44.getShape();
            IOmlAccessDefinition par_47 = null;
            IOmlTypeDefinition obj_48 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
              obj_48 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_47 = (IOmlAccessDefinition) obj_48.getAccess();
            reselem_42 = (IUmlType) BuildComplexType((IOmlComplexType) par_43, (IOmlAccessDefinition) par_47);
            res_l_33.add(reselem_42);
          }
        }
        tps2 = res_l_33;
      }
      UmlNestedClassifiers rexpr_58 = null;
      HashSet arg_59 = new HashSet();
      HashSet var1_60 = new HashSet();
      HashSet set_62 = new HashSet();
      Enumeration enm_63 = tps.elements();
      while ( enm_63.hasMoreElements())
        set_62.add(enm_63.nextElement());
      var1_60 = set_62;
      HashSet var2_64 = new HashSet();
      HashSet set_66 = new HashSet();
      Enumeration enm_67 = tps2.elements();
      while ( enm_67.hasMoreElements())
        set_66.add(enm_67.nextElement());
      var2_64 = set_66;
      arg_59 = (HashSet) var1_60.clone();
      arg_59.addAll(var2_64);
      rexpr_58 = new UmlNestedClassifiers(arg_59);
      return (IUmlNestedClassifiers) rexpr_58;
    }
  }
// ***** VDMTOOLS END Name=BuildDefBlock#2|IOmlTypeDefinitions|String


// ***** VDMTOOLS START Name=BuildSimpleType#2|IOmlSimpleType|IOmlAccessDefinition KEEP=NO
  public IUmlType BuildSimpleType (final IOmlSimpleType vdm_var, final IOmlAccessDefinition access) throws CGException {

    IUmlClass elem_4 = null;
    {

      IOmlScope par_9 = null;
      par_9 = (IOmlScope) access.getScope();
      elem_4 = (IUmlClass) BuildClassFromType(vdm_var, par_9);
    }
    nestedClasses.add(elem_4);
    UmlClassNameType rexpr_10 = null;
    String arg_11 = null;
    arg_11 = vdm_var.getIdentifier();
    rexpr_10 = new UmlClassNameType(arg_11);
    return (IUmlType) rexpr_10;
  }
// ***** VDMTOOLS END Name=BuildSimpleType#2|IOmlSimpleType|IOmlAccessDefinition


// ***** VDMTOOLS START Name=BuildComplexType#2|IOmlComplexType|IOmlAccessDefinition KEEP=NO
  public IUmlType BuildComplexType (final IOmlComplexType vdm_var, final IOmlAccessDefinition access) throws CGException {

    IUmlClass elem_4 = null;
    {

      IOmlScope par_9 = null;
      par_9 = (IOmlScope) access.getScope();
      elem_4 = (IUmlClass) BuildClassFromType(vdm_var, par_9);
    }
    nestedClasses.add(elem_4);
    UmlClassNameType rexpr_10 = null;
    String arg_11 = null;
    arg_11 = vdm_var.getIdentifier();
    rexpr_10 = new UmlClassNameType(arg_11);
    return (IUmlType) rexpr_10;
  }
// ***** VDMTOOLS END Name=BuildComplexType#2|IOmlComplexType|IOmlAccessDefinition


// ***** VDMTOOLS START Name=BuildClassFromType#2|IOmlSimpleType|IOmlScope KEEP=NO
  private IUmlClass BuildClassFromType (final IOmlSimpleType t, final IOmlScope scope) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = t.getIdentifier();
    String name = null;
    name = tmpVal_4;
    HashSet classBody = new HashSet();
    IUmlDefinitionBlock enum_set_6 = null;
    IOmlType par_8 = null;
    par_8 = (IOmlType) t.getType();
    enum_set_6 = (IUmlDefinitionBlock) BuildTypeDefinitionBlocks(name, (IOmlType) par_8);
    classBody = new HashSet();
    classBody.add(enum_set_6);
    Boolean isAbstract = new Boolean(false);
    Vector superClass = new Vector();
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) ConvertScopeToVisibility((IOmlScope) scope);
    Boolean isStatic = new Boolean(false);
    Boolean isActive = new Boolean(false);
    IUmlTemplateSignature templatesignature = null;
    return (IUmlClass) new UmlClass(name, classBody, isAbstract, superClass, visibility, isStatic, isActive, templatesignature);
  }
// ***** VDMTOOLS END Name=BuildClassFromType#2|IOmlSimpleType|IOmlScope


// ***** VDMTOOLS START Name=BuildClassFromType#2|IOmlComplexType|IOmlScope KEEP=NO
  private IUmlClass BuildClassFromType (final IOmlComplexType t, final IOmlScope scope) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = t.getIdentifier();
    String name = null;
    name = tmpVal_4;
    HashSet classBody = new HashSet();
    Boolean isAbstract = new Boolean(false);
    Vector superClass = new Vector();
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) ConvertScopeToVisibility((IOmlScope) scope);
    Boolean isStatic = new Boolean(false);
    Boolean isActive = new Boolean(false);
    IUmlTemplateSignature templatesignature = null;
    return (IUmlClass) new UmlClass(name, classBody, isAbstract, superClass, visibility, isStatic, isActive, templatesignature);
  }
// ***** VDMTOOLS END Name=BuildClassFromType#2|IOmlComplexType|IOmlScope


// ***** VDMTOOLS START Name=BuildTypeDefinitionBlocks#2|String|IOmlType KEEP=NO
  private IUmlDefinitionBlock BuildTypeDefinitionBlocks (final String ownerName, final IOmlType t) throws CGException {

    if (new Boolean(t instanceof IOmlUnionType).booleanValue()) {

      IOmlUnionType ut = (IOmlUnionType) t;
      {

        IUmlOwnedProperties lhs = null;
        IOmlType par_10 = null;
        par_10 = (IOmlType) ut.getLhsType();
        lhs = (IUmlOwnedProperties) BuildTypeDefinitionBlocks(ownerName, (IOmlType) par_10);
        IUmlOwnedProperties rhs = null;
        IOmlType par_13 = null;
        par_13 = (IOmlType) ut.getRhsType();
        rhs = (IUmlOwnedProperties) BuildTypeDefinitionBlocks(ownerName, (IOmlType) par_13);
        UmlOwnedProperties rexpr_14 = null;
        HashSet arg_15 = new HashSet();
        HashSet var1_16 = new HashSet();
        var1_16 = lhs.getPropetityList();
        HashSet var2_17 = new HashSet();
        var2_17 = rhs.getPropetityList();
        arg_15 = (HashSet) var1_16.clone();
        arg_15.addAll(var2_17);
        rexpr_14 = new UmlOwnedProperties(arg_15);
        return (IUmlDefinitionBlock) rexpr_14;
      }
    }
    if (new Boolean(t instanceof IOmlQuoteType).booleanValue()) {

      IOmlQuoteType qt = (IOmlQuoteType) t;
      {

        HashSet props = new HashSet();
        props = new HashSet();
        props.add((IUmlProperty) BuildValueFromQuoteType(ownerName, (IOmlQuoteType) qt));
        return (IUmlDefinitionBlock) new UmlOwnedProperties(props);
      }
    }
    return (IUmlDefinitionBlock) new UmlOwnedProperties(new HashSet());
  }
// ***** VDMTOOLS END Name=BuildTypeDefinitionBlocks#2|String|IOmlType


// ***** VDMTOOLS START Name=BuildValueFromQuoteType#2|String|IOmlQuoteType KEEP=NO
  private IUmlProperty BuildValueFromQuoteType (final String ownerName, final IOmlQuoteType q) throws CGException {

    Boolean isStatic = new Boolean(true);
    String tmpVal_5 = null;
    IOmlQuoteLiteral obj_6 = null;
    obj_6 = (IOmlQuoteLiteral) q.getQuoteLiteral();
    tmpVal_5 = obj_6.getVal();
    String name = null;
    name = tmpVal_5;
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
    IUmlMultiplicityElement multiplicity = (IUmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(true), new Boolean(false), new Long(0), null);
    IUmlType type = (IUmlType) new UmlIntegerType();
    Boolean isReadOnly = new Boolean(true);
    IUmlValueSpecification vdm_default = null;
    Boolean isComposite = IsSimpleType((IOmlType) q);
    Boolean isDerived = new Boolean(false);
    IUmlType qualifier = null;
    return (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, ownerName, qualifier);
  }
// ***** VDMTOOLS END Name=BuildValueFromQuoteType#2|String|IOmlQuoteType


// ***** VDMTOOLS START Name=BuildDefBlock#2|IOmlOperationDefinitions|String KEEP=NO
  public IUmlOwnedOperations BuildDefBlock (final IOmlOperationDefinitions opDef, final String owner) throws CGException {

    Vector ops = null;
    ops = opDef.getOperationList();
    UmlOwnedOperations rexpr_5 = null;
    HashSet arg_6 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e_set_14 = new HashSet();
      HashSet riseq_16 = new HashSet();
      int max_17 = ops.size();
      for (int i_18 = 1; i_18 <= max_17; i_18++) 
        riseq_16.add(new Long(i_18));
      e_set_14 = riseq_16;
      Long i = null;
      {
        for (Iterator enm_20 = e_set_14.iterator(); enm_20.hasNext(); ) {

          Long elem_19 = UTIL.NumberToLong(enm_20.next());
          i = elem_19;
          IUmlOperation res_s_8 = null;
          IOmlOperationDefinition par_9 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= ops.size())) 
            par_9 = (IOmlOperationDefinition) ops.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_s_8 = (IUmlOperation) BuildOperation((IOmlOperationDefinition) par_9, owner);
          res_s_7.add(res_s_8);
        }
      }
    }
    arg_6 = res_s_7;
    rexpr_5 = new UmlOwnedOperations(arg_6);
    return (IUmlOwnedOperations) rexpr_5;
  }
// ***** VDMTOOLS END Name=BuildDefBlock#2|IOmlOperationDefinitions|String


// ***** VDMTOOLS START Name=BuildOperation#2|IOmlOperationDefinition|String KEEP=NO
  public IUmlOperation BuildOperation (final IOmlOperationDefinition var_1_1, final String var_2_2) throws CGException {

    IOmlOperationDefinition op = null;
    boolean succ_3 = true;
    op = (IOmlOperationDefinition) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation BuildOperation");
    {

      IOmlAccessDefinition access = null;
      access = (IOmlAccessDefinition) op.getAccess();
      IOmlScope scope = null;
      scope = (IOmlScope) access.getScope();
      IOmlExplicitOperation shape = null;
      shape = (IOmlExplicitOperation) op.getShape();
      Boolean isStatic = null;
      isStatic = access.getStaticAccess();
      String name = null;
      name = shape.getIdentifier();
      IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) ConvertScopeToVisibility((IOmlScope) scope);
      UmlMultiplicityElement multiplicity = (UmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1));
      IUmlType type = null;
      Vector pars = null;
      Vector par_21 = null;
      par_21 = shape.getParameterList();
      {

        Vector par_22 = null;
        par_22 = shape.getParameterList();
        IOmlType par_23 = null;
        par_23 = (IOmlType) shape.getType();
        pars = (Vector) UTIL.ConvertToList(buildParameters(par_22, par_23));
      }
      return (IUmlOperation) new UmlOperation(name, visibility, multiplicity, new Boolean(false), type, isStatic, new UmlParameters(pars));
    }
  }
// ***** VDMTOOLS END Name=BuildOperation#2|IOmlOperationDefinition|String


// ***** VDMTOOLS START Name=buildParameters#1|Vector KEEP=NO
  private Vector buildParameters (final Vector parms) throws CGException {

    Vector rexpr_2 = null;
    Vector unArg_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = parms.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_50 = bind_l_5.iterator(); enm_50.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_50.next());
        i = e_8;
        Vector reselem_13 = null;
        {

          OmlPatternTypePair ptpair = null;
          if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
            ptpair = (OmlPatternTypePair) parms.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          Vector pl = null;
          pl = ptpair.getPatternList();
          IOmlType tp = null;
          tp = (IOmlType) ptpair.getType();
          {

            Vector res_l_20 = new Vector();
            HashSet resBind_s_22 = new HashSet();
            HashSet riseq_26 = new HashSet();
            int max_27 = pl.size();
            for (int i_28 = 1; i_28 <= max_27; i_28++) 
              riseq_26.add(new Long(i_28));
            resBind_s_22 = riseq_26;
            Vector bind_l_21 = null;
            bind_l_21 = UTIL.Sort(resBind_s_22);
            Long j = null;
            for (Iterator enm_48 = bind_l_21.iterator(); enm_48.hasNext(); ) {

              Long e_24 = UTIL.NumberToLong(enm_48.next());
              j = e_24;
              UmlParameter reselem_29 = null;
              String arg_30 = null;
              Boolean cond_36 = null;
              IOmlPattern obj_37 = null;
              if ((1 <= j.intValue()) && (j.intValue() <= pl.size())) 
                obj_37 = (IOmlPattern) pl.get(j.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              cond_36 = new Boolean(obj_37 instanceof IOmlPatternIdentifier);
              if (cond_36.booleanValue()) {

                IOmlPatternIdentifier p = null;
                if ((1 <= j.intValue()) && (j.intValue() <= pl.size())) 
                  p = (IOmlPatternIdentifier) pl.get(j.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                arg_30 = p.getIdentifier();
              }
              else 
                arg_30 = new String("-");
              IUmlType arg_31 = null;
              arg_31 = (IUmlType) Vdm2UmlType.ConvertType(tp);
              IUmlMultiplicityElement arg_32 = null;
              arg_32 = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) tp);
              reselem_29 = new UmlParameter(arg_30, arg_31, arg_32, new String(""), new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQIN));
              res_l_20.add(reselem_29);
            }
            reselem_13 = res_l_20;
          }
        }
        res_l_4.add(reselem_13);
      }
      unArg_3 = res_l_4;
    }
    Vector rdcseq_51 = new Vector();
    for (Iterator enm_54 = unArg_3.iterator(); enm_54.hasNext(); ) {

      Vector e_52 = (Vector) UTIL.ConvertToList(enm_54.next());
      rdcseq_51.addAll(e_52);
    }
    rexpr_2 = rdcseq_51;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildParameters#1|Vector


// ***** VDMTOOLS START Name=buildFnResult#1|Vector KEEP=NO
  private Vector buildFnResult (final Vector restp) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = restp.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_28 = bind_l_4.iterator(); enm_28.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_28.next());
        i = e_7;
        UmlParameter reselem_12 = null;
        {

          OmlIdentifierTypePair ptpair = null;
          if ((1 <= i.intValue()) && (i.intValue() <= restp.size())) 
            ptpair = (OmlIdentifierTypePair) restp.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          String id = null;
          id = ptpair.getIdentifier();
          IOmlType tp = null;
          tp = (IOmlType) ptpair.getType();
          IUmlType arg_20 = null;
          arg_20 = (IUmlType) Vdm2UmlType.ConvertType(tp);
          IUmlMultiplicityElement arg_21 = null;
          arg_21 = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) tp);
          reselem_12 = new UmlParameter(id, arg_20, arg_21, new String(""), new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQIN));
        }
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildFnResult#1|Vector


// ***** VDMTOOLS START Name=buildParameters#2|Vector|IOmlType KEEP=NO
  private Vector buildParameters (final Vector parms, final IOmlType type) throws CGException {

    Vector names = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = parms.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_29 = bind_l_6.iterator(); enm_29.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_29.next());
        i = e_9;
        Boolean pred_24 = null;
        IOmlPattern obj_25 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
          obj_25 = (IOmlPattern) parms.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_24 = new Boolean(obj_25 instanceof IOmlPatternIdentifier);
        if (pred_24.booleanValue()) {

          String reselem_14 = null;
          Boolean cond_16 = null;
          IOmlPattern obj_17 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
            obj_17 = (IOmlPattern) parms.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          cond_16 = new Boolean(obj_17 instanceof IOmlPatternIdentifier);
          if (cond_16.booleanValue()) {

            IOmlPatternIdentifier p = null;
            if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
              p = (IOmlPatternIdentifier) parms.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_14 = p.getIdentifier();
          }
          else 
            reselem_14 = new String("-");
          res_l_5.add(reselem_14);
        }
      }
      names = res_l_5;
    }
    Vector tps = buildParameterTypes((IOmlType) type);
    IUmlParameter ret = null;
    {

      Object tmpVal_34 = null;
      if (new Boolean(type instanceof IOmlOperationType).booleanValue()) {

        IOmlOperationType tmp = (IOmlOperationType) type;
        tmpVal_34 = tmp;
      }
      else 
        if (new Boolean(type instanceof IOmlPartialFunctionType).booleanValue()) {

          IOmlPartialFunctionType tmp = (IOmlPartialFunctionType) type;
          tmpVal_34 = tmp;
        }
        else 
          if (new Boolean(type instanceof IOmlTotalFunctionType).booleanValue()) {

            IOmlTotalFunctionType tmp = (IOmlTotalFunctionType) type;
            tmpVal_34 = tmp;
          }
          else 
            tmpVal_34 = null;
      Object t = null;
      t = tmpVal_34;
      IUmlType arg_49 = null;
      {

        IUmlType tmpType = null;
        IOmlType par_55 = null;
        if ((t instanceof IOmlPartialFunctionType)) 
          par_55 = (IOmlType) ((IOmlPartialFunctionType) t).getRngType();
        else 
          if ((t instanceof IOmlTotalFunctionType)) 
            par_55 = (IOmlType) ((IOmlTotalFunctionType) t).getRngType();
          else 
            if ((t instanceof IOmlOperationType)) 
              par_55 = (IOmlType) ((IOmlOperationType) t).getRngType();
        tmpType = (IUmlType) Vdm2UmlType.ConvertType(par_55);
        arg_49 = (IUmlType) tmpType;
      }
      IUmlMultiplicityElement arg_50 = null;
      IOmlType par_56 = null;
      if ((t instanceof IOmlPartialFunctionType)) 
        par_56 = (IOmlType) ((IOmlPartialFunctionType) t).getRngType();
      else 
        if ((t instanceof IOmlTotalFunctionType)) 
          par_56 = (IOmlType) ((IOmlTotalFunctionType) t).getRngType();
        else 
          if ((t instanceof IOmlOperationType)) 
            par_56 = (IOmlType) ((IOmlOperationType) t).getRngType();
      arg_50 = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) par_56);
      ret = new UmlParameter(new String("return"), arg_49, arg_50, new String(""), new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQRETURN));
    }
    Vector ps = null;
    {

      Vector res_l_59 = new Vector();
      HashSet resBind_s_61 = new HashSet();
      HashSet riseq_65 = new HashSet();
      int max_66 = names.size();
      for (int i_67 = 1; i_67 <= max_66; i_67++) 
        riseq_65.add(new Long(i_67));
      resBind_s_61 = riseq_65;
      Vector bind_l_60 = null;
      bind_l_60 = UTIL.Sort(resBind_s_61);
      Long i = null;
      for (Iterator enm_84 = bind_l_60.iterator(); enm_84.hasNext(); ) {

        Long e_63 = UTIL.NumberToLong(enm_84.next());
        i = e_63;
        UmlParameter reselem_68 = null;
        String arg_69 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= names.size())) 
          arg_69 = UTIL.ConvertToString(names.get(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        IUmlType arg_70 = null;
        IOmlType par_76 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= tps.size())) 
          par_76 = (IOmlType) tps.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        arg_70 = (IUmlType) Vdm2UmlType.ConvertType(par_76);
        IUmlMultiplicityElement arg_71 = null;
        IOmlType par_79 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= tps.size())) 
          par_79 = (IOmlType) tps.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        arg_71 = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) par_79);
        reselem_68 = new UmlParameter(arg_69, arg_70, arg_71, new String(""), new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQIN));
        res_l_59.add(reselem_68);
      }
      ps = res_l_59;
    }
    if (new Boolean(!UTIL.equals(ret, null)).booleanValue()) {

      Vector rexpr_92 = null;
      Vector var2_94 = null;
      var2_94 = new Vector();
      var2_94.add(ret);
      rexpr_92 = (Vector) ps.clone();
      rexpr_92.addAll(var2_94);
      return rexpr_92;
    }
    else {

      log.mappingNotSupported(parms, (IOmlType) type);
      return ps;
    }
  }
// ***** VDMTOOLS END Name=buildParameters#2|Vector|IOmlType


// ***** VDMTOOLS START Name=buildParameterTypes#1|IOmlType KEEP=NO
  private Vector buildParameterTypes (final IOmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlProductType))) 
        succ_2 = false;
      if (succ_2) {

        IOmlProductType type = (IOmlProductType) t;
        Vector rexpr_29 = null;
        Vector var1_30 = null;
        IOmlType par_31 = null;
        par_31 = (IOmlType) type.getLhsType();
        var1_30 = buildParameterTypes((IOmlType) par_31);
        Vector var2_32 = null;
        IOmlType par_33 = null;
        par_33 = (IOmlType) type.getRhsType();
        var2_32 = buildParameterTypes((IOmlType) par_33);
        rexpr_29 = (Vector) var1_30.clone();
        rexpr_29.addAll(var2_32);
        return rexpr_29;
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlOperationType))) 
          succ_2 = false;
        if (succ_2) {

          IOmlOperationType type = (IOmlOperationType) t;
          Vector rexpr_23 = null;
          IOmlType par_24 = null;
          par_24 = (IOmlType) type.getDomType();
          rexpr_23 = buildParameterTypes((IOmlType) par_24);
          return rexpr_23;
        }
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlPartialFunctionType))) 
            succ_2 = false;
          if (succ_2) {

            IOmlPartialFunctionType type = (IOmlPartialFunctionType) t;
            Vector rexpr_17 = null;
            IOmlType par_18 = null;
            par_18 = (IOmlType) type.getDomType();
            rexpr_17 = buildParameterTypes((IOmlType) par_18);
            return rexpr_17;
          }
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlTotalFunctionType))) 
              succ_2 = false;
            if (succ_2) {

              IOmlTotalFunctionType type = (IOmlTotalFunctionType) t;
              Vector rexpr_11 = null;
              IOmlType par_12 = null;
              par_12 = (IOmlType) type.getDomType();
              rexpr_11 = buildParameterTypes((IOmlType) par_12);
              return rexpr_11;
            }
            else {

              Vector rexpr_5 = null;
              rexpr_5 = new Vector();
              rexpr_5.add(t);
              return rexpr_5;
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=buildParameterTypes#1|IOmlType


// ***** VDMTOOLS START Name=BuildDefBlock#2|IOmlFunctionDefinitions|String KEEP=NO
  public IUmlOwnedOperations BuildDefBlock (final IOmlFunctionDefinitions opDef, final String owner) throws CGException {

    Vector ops = null;
    ops = opDef.getFunctionList();
    UmlOwnedOperations rexpr_5 = null;
    HashSet arg_6 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e_set_14 = new HashSet();
      HashSet riseq_16 = new HashSet();
      int max_17 = ops.size();
      for (int i_18 = 1; i_18 <= max_17; i_18++) 
        riseq_16.add(new Long(i_18));
      e_set_14 = riseq_16;
      Long i = null;
      {
        for (Iterator enm_20 = e_set_14.iterator(); enm_20.hasNext(); ) {

          Long elem_19 = UTIL.NumberToLong(enm_20.next());
          i = elem_19;
          IUmlOperation res_s_8 = null;
          IOmlFunctionDefinition par_9 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= ops.size())) 
            par_9 = (IOmlFunctionDefinition) ops.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_s_8 = (IUmlOperation) BuildFunction((IOmlFunctionDefinition) par_9, owner);
          res_s_7.add(res_s_8);
        }
      }
    }
    arg_6 = res_s_7;
    rexpr_5 = new UmlOwnedOperations(arg_6);
    return (IUmlOwnedOperations) rexpr_5;
  }
// ***** VDMTOOLS END Name=BuildDefBlock#2|IOmlFunctionDefinitions|String


// ***** VDMTOOLS START Name=BuildFunction#2|IOmlFunctionDefinition|String KEEP=NO
  public IUmlOperation BuildFunction (final IOmlFunctionDefinition var_1_1, final String var_2_2) throws CGException {

    IOmlFunctionDefinition op = null;
    boolean succ_3 = true;
    op = (IOmlFunctionDefinition) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation BuildFunction");
    {

      IOmlAccessDefinition access = null;
      access = (IOmlAccessDefinition) op.getAccess();
      IOmlScope scope = null;
      scope = (IOmlScope) access.getScope();
      IOmlFunctionShape shapegeneric = null;
      shapegeneric = (IOmlFunctionShape) op.getShape();
      Boolean isStatic = null;
      isStatic = access.getStaticAccess();
      IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) ConvertScopeToVisibility((IOmlScope) scope);
      UmlMultiplicityElement multiplicity = (UmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1));
      if (new Boolean(shapegeneric instanceof IOmlExplicitFunction).booleanValue()) {

        IOmlExplicitFunction shape = (IOmlExplicitFunction) shapegeneric;
        String name = null;
        name = shape.getIdentifier();
        IUmlType type = null;
        IOmlType par_51 = null;
        par_51 = (IOmlType) shape.getType();
        type = (IUmlType) Vdm2UmlType.ConvertType(par_51);
        IOmlParameter pnames = null;
        Boolean cond_54 = null;
        Long var1_55 = null;
        Vector unArg_56 = null;
        unArg_56 = shape.getParameterList();
        var1_55 = new Long(unArg_56.size());
        cond_54 = new Boolean(var1_55.intValue() == new Long(0).intValue());
        if (cond_54.booleanValue()) 
          pnames = null;
        else {

          Vector unArg_58 = null;
          unArg_58 = shape.getParameterList();
          pnames = (IOmlParameter) unArg_58.get(0);
        }
        Vector pars = null;
        Vector par_62 = null;
        if (new Boolean(!UTIL.equals(pnames, null)).booleanValue()) 
          par_62 = pnames.getPatternList();
        else 
          par_62 = new Vector();
        {

          Vector par_67 = null;
          if (new Boolean(!UTIL.equals(pnames, null)).booleanValue()) 
            par_67 = pnames.getPatternList();
          else 
            par_67 = new Vector();
          IOmlType par_72 = null;
          par_72 = (IOmlType) shape.getType();
          pars = (Vector) UTIL.ConvertToList(buildParameters(par_67, par_72));
        }
        return (IUmlOperation) new UmlOperation(name, visibility, multiplicity, new Boolean(true), type, isStatic, new UmlParameters(pars));
      }
      else 
        if (new Boolean(shapegeneric instanceof IOmlImplicitFunction).booleanValue()) {

          IOmlImplicitFunction shape = (IOmlImplicitFunction) shapegeneric;
          String name = null;
          name = shape.getIdentifier();
          Vector pattype_ul = null;
          pattype_ul = shape.getPatternTypePairList();
          Vector restype_ul = null;
          restype_ul = shape.getIdentifierTypePairList();
          Object fntype = null;
          IUmlType type = null;
          IOmlParameter pnames = null;
          Vector pars = null;
          pars = (Vector) UTIL.ConvertToList(buildParameters(pattype_ul));
          Vector res = buildFnResult(restype_ul);
          UmlOperation rexpr_36 = null;
          UmlParameters arg_43 = null;
          Vector arg_44 = null;
          arg_44 = (Vector) pars.clone();
          arg_44.addAll(res);
          arg_43 = new UmlParameters(arg_44);
          rexpr_36 = new UmlOperation(name, visibility, multiplicity, new Boolean(true), type, isStatic, arg_43);
          return (IUmlOperation) rexpr_36;
        }
        else {
          return (IUmlOperation) new UmlOperation();
        }
    }
  }
// ***** VDMTOOLS END Name=BuildFunction#2|IOmlFunctionDefinition|String


// ***** VDMTOOLS START Name=IsSimpleType#1|IOmlType KEEP=NO
  public Boolean IsSimpleType (final IOmlType t) throws CGException {

    Boolean varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlInjectiveMapType))) 
        succ_3 = false;
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlGeneralMapType))) 
          succ_3 = false;
      }
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlTypeName))) 
          succ_3 = false;
      }
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlProductType))) 
          succ_3 = false;
      }
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlUnionType))) 
          succ_3 = false;
      }
      if (succ_3) 
        varRes_2 = new Boolean(false);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSetType))) 
        succ_3 = false;
      if (succ_3) {

        IOmlSetType t1 = (IOmlSetType) t;
        IOmlType par_20 = null;
        par_20 = (IOmlType) t1.getType();
        varRes_2 = IsSimpleType((IOmlType) par_20);
      }
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq0Type))) 
        succ_3 = false;
      if (succ_3) {

        IOmlSeq0Type t1 = (IOmlSeq0Type) t;
        IOmlType par_25 = null;
        par_25 = (IOmlType) t1.getType();
        varRes_2 = IsSimpleType((IOmlType) par_25);
      }
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq1Type))) 
        succ_3 = false;
      if (succ_3) {

        IOmlSeq1Type t1 = (IOmlSeq1Type) t;
        IOmlType par_30 = null;
        par_30 = (IOmlType) t1.getType();
        varRes_2 = IsSimpleType((IOmlType) par_30);
      }
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlOptionalType))) 
        succ_3 = false;
      if (succ_3) {

        IOmlOptionalType t1 = (IOmlOptionalType) t;
        IOmlType par_35 = null;
        par_35 = (IOmlType) t1.getType();
        varRes_2 = IsSimpleType((IOmlType) par_35);
      }
    }
    if (!succ_3) 
      varRes_2 = new Boolean(true);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=IsSimpleType#1|IOmlType


// ***** VDMTOOLS START Name=GetSimpleTypeName#1|IUmlType KEEP=NO
  private String GetSimpleTypeName (final IUmlType t) throws CGException {

    String varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("bool");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("int");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("char");
    }
    if (!succ_3) 
      varRes_2 = new String("String");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetSimpleTypeName#1|IUmlType


// ***** VDMTOOLS START Name=CreateAssociationFromProperty#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromProperty (final IUmlProperty property, final IOmlType omlType) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(omlType instanceof IOmlProductType))) 
        succ_3 = false;
      if (succ_3) 
        CreateAssociationFromPropertyProductType((IUmlProperty) property, (IOmlType) omlType);
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(omlType instanceof IOmlUnionType))) 
          succ_3 = false;
        if (succ_3) 
          CreateAssociationFromPropertyUnionType((IUmlProperty) property, (IOmlType) omlType);
        else 
          CreateAssociationFromPropertyGeneral((IUmlProperty) property, (IOmlType) omlType);
      }
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromProperty#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateAssociationFromPropertyGeneral#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromPropertyGeneral (final IUmlProperty var_1_1, final IOmlType var_2_2) throws CGException {

    IUmlProperty property = null;
    boolean succ_3 = true;
    property = (IUmlProperty) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation CreateAssociationFromPropertyGeneral");
    {

      String ownerClassName = null;
      Boolean cond_7 = null;
      IUmlType obj_8 = null;
      obj_8 = (IUmlType) property.getType();
      cond_7 = new Boolean(obj_8 instanceof IUmlClassNameType);
      if (cond_7.booleanValue()) {

        IUmlClassNameType pcn = null;
        pcn = (IUmlClassNameType) property.getType();
        ownerClassName = pcn.getName();
      }
      else {

        IUmlType par_9 = null;
        par_9 = (IUmlType) property.getType();
        ownerClassName = GetSimpleTypeName((IUmlType) par_9);
      }
      HashSet propOtherEnd = new HashSet();
      UmlProperty enum_set_13 = null;
      UmlClassNameType arg_17 = null;
      String arg_26 = null;
      arg_26 = property.getOwnerClass();
      arg_17 = new UmlClassNameType(arg_26);
      enum_set_13 = new UmlProperty(new String(""), new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE), null, arg_17, null, null, new Boolean(false), null, null, ownerClassName, null);
      propOtherEnd = new HashSet();
      propOtherEnd.add(enum_set_13);
      UmlAssociation elem_28 = null;
      HashSet arg_30 = new HashSet();
      arg_30 = new HashSet();
      arg_30.add(property);
      elem_28 = new UmlAssociation(propOtherEnd, arg_30, null, GetNextId());
      associations.add(elem_28);
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromPropertyGeneral#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateAssociationFromPropertyProductType#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromPropertyProductType (final IUmlProperty property, final IOmlType omlType) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = property.getName();
    String name = null;
    name = tmpVal_4;
    UmlProperty prop = (UmlProperty) property;
    HashSet props = new HashSet();
    HashSet unArg_7 = new HashSet();
    HashSet res_s_8 = new HashSet();
    {

      HashSet e_set_15 = new HashSet();
      e_set_15 = new HashSet();
      e_set_15.add(omlType);
      IOmlType p = null;
      {
        for (Iterator enm_18 = e_set_15.iterator(); enm_18.hasNext(); ) {

          IOmlType elem_17 = (IOmlType) enm_18.next();
          p = (IOmlType) elem_17;
          if (new Boolean(p instanceof IOmlProductType).booleanValue()) {
            res_s_8.add(CreateEndProperty((IOmlType) p, name));
          }
        }
      }
    }
    unArg_7 = res_s_8;
    HashSet rduset_19 = new HashSet();
    for (Iterator enm_21 = unArg_7.iterator(); enm_21.hasNext(); ) {

      HashSet e_20 = (HashSet) enm_21.next();
      rduset_19.addAll(e_20);
    }
    props = rduset_19;
    {

      prop.setName(new String(""));
      if (new Boolean((new Long(props.size()).intValue()) > (new Long(1).intValue())).booleanValue()) {

        UmlAssociation elem_29 = null;
        HashSet arg_31 = new HashSet();
        arg_31 = new HashSet();
        arg_31.add(prop);
        elem_29 = new UmlAssociation(props, arg_31, null, GetNextId());
        associations.add(elem_29);
      }
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromPropertyProductType#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateAssociationFromPropertyUnionType#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromPropertyUnionType (final IUmlProperty property, final IOmlType omlType) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = property.getName();
    String name = null;
    name = tmpVal_4;
    UmlProperty prop = (UmlProperty) (UmlProperty) cloneProp((IUmlProperty) property);
    HashSet props = new HashSet();
    HashSet unArg_8 = new HashSet();
    HashSet res_s_9 = new HashSet();
    {

      HashSet e_set_16 = new HashSet();
      e_set_16 = new HashSet();
      e_set_16.add(omlType);
      IOmlType p = null;
      {
        for (Iterator enm_19 = e_set_16.iterator(); enm_19.hasNext(); ) {

          IOmlType elem_18 = (IOmlType) enm_19.next();
          p = (IOmlType) elem_18;
          if (new Boolean(p instanceof IOmlUnionType).booleanValue()) {
            res_s_9.add(CreateEndProperty((IOmlType) p, name));
          }
        }
      }
    }
    unArg_8 = res_s_9;
    HashSet rduset_20 = new HashSet();
    for (Iterator enm_22 = unArg_8.iterator(); enm_22.hasNext(); ) {

      HashSet e_21 = (HashSet) enm_22.next();
      rduset_20.addAll(e_21);
    }
    props = rduset_20;
    {

      prop.setName(new String(""));
      if (new Boolean((new Long(props.size()).intValue()) > (new Long(1).intValue())).booleanValue()) {

        HashSet assoc = new HashSet();
        HashSet res_s_29 = new HashSet();
        {

          IUmlProperty p = null;
          {
            for (Iterator enm_40 = props.iterator(); enm_40.hasNext(); ) {

              IUmlProperty elem_39 = (IUmlProperty) enm_40.next();
              p = (IUmlProperty) elem_39;
              UmlAssociation res_s_30 = null;
              HashSet arg_31 = new HashSet();
              arg_31 = new HashSet();
              arg_31.add(p);
              HashSet arg_32 = new HashSet();
              arg_32 = new HashSet();
              arg_32.add(prop);
              res_s_30 = new UmlAssociation(arg_31, arg_32, null, GetNextId());
              res_s_29.add(res_s_30);
            }
          }
        }
        assoc = res_s_29;
        HashSet rhs_41 = new HashSet();
        rhs_41 = (HashSet) associations.clone();
        rhs_41.addAll(assoc);
        associations = (HashSet) UTIL.clone(rhs_41);
        UmlConstraint elem_45 = null;
        HashSet arg_46 = new HashSet();
        HashSet res_s_48 = new HashSet();
        {

          IUmlAssociation a = null;
          {
            for (Iterator enm_53 = assoc.iterator(); enm_53.hasNext(); ) {

              IUmlAssociation elem_52 = (IUmlAssociation) enm_53.next();
              a = (IUmlAssociation) elem_52;
              String res_s_49 = null;
              res_s_49 = a.getId();
              res_s_48.add(res_s_49);
            }
          }
        }
        arg_46 = res_s_48;
        elem_45 = new UmlConstraint(arg_46, new UmlLiteralString(new String("xor")));
        constraints.add(elem_45);
      }
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromPropertyUnionType#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=cloneProp#1|IUmlProperty KEEP=NO
  private UmlProperty cloneProp (final IUmlProperty property) throws CGException {

    String p1 = null;
    p1 = property.getName();
    IUmlVisibilityKind p2 = null;
    p2 = (IUmlVisibilityKind) property.getVisibility();
    IUmlMultiplicityElement p3 = null;
    p3 = (IUmlMultiplicityElement) property.getMultiplicity();
    IUmlType p4 = null;
    p4 = (IUmlType) property.getType();
    Boolean p5 = null;
    p5 = property.getIsReadOnly();
    IUmlValueSpecification p6 = null;
    p6 = (IUmlValueSpecification) property.getDefault();
    Boolean p7 = null;
    p7 = property.getIsComposite();
    Boolean p8 = null;
    p8 = property.getIsDerived();
    Boolean p9 = null;
    p9 = property.getIsStatic();
    String p10 = null;
    p10 = property.getOwnerClass();
    IUmlType p11 = null;
    p11 = (IUmlType) property.getQualifier();
    return (UmlProperty) new UmlProperty(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
  }
// ***** VDMTOOLS END Name=cloneProp#1|IUmlProperty


// ***** VDMTOOLS START Name=CreateEndProperty#2|IOmlType|String KEEP=NO
  public HashSet CreateEndProperty (final IOmlType t, final String name) throws CGException {
    if (new Boolean(t instanceof IOmlProductType).booleanValue()) {

      IOmlProductType typedType = (IOmlProductType) t;
      HashSet rexpr_35 = new HashSet();
      HashSet var1_36 = new HashSet();
      IOmlType par_37 = null;
      par_37 = (IOmlType) typedType.getLhsType();
      var1_36 = CreateEndProperty((IOmlType) par_37, name);
      HashSet var2_39 = new HashSet();
      IOmlType par_40 = null;
      par_40 = (IOmlType) typedType.getRhsType();
      var2_39 = CreateEndProperty((IOmlType) par_40, name);
      rexpr_35 = (HashSet) var1_36.clone();
      rexpr_35.addAll(var2_39);
      return rexpr_35;
    }
    else 
      if (new Boolean(t instanceof IOmlUnionType).booleanValue()) {

        IOmlUnionType typedType = (IOmlUnionType) t;
        HashSet rexpr_26 = new HashSet();
        HashSet var1_27 = new HashSet();
        IOmlType par_28 = null;
        par_28 = (IOmlType) typedType.getLhsType();
        var1_27 = CreateEndProperty((IOmlType) par_28, name);
        HashSet var2_30 = new HashSet();
        IOmlType par_31 = null;
        par_31 = (IOmlType) typedType.getRhsType();
        var2_30 = CreateEndProperty((IOmlType) par_31, name);
        rexpr_26 = (HashSet) var1_27.clone();
        rexpr_26.addAll(var2_30);
        return rexpr_26;
      }
      else {

        HashSet rexpr_7 = new HashSet();
        UmlProperty enum_set_8 = null;
        IUmlMultiplicityElement arg_11 = null;
        arg_11 = (IUmlMultiplicityElement) Vdm2UmlType.ExtractMultiplicity((IOmlType) t);
        IUmlType arg_12 = null;
        arg_12 = (IUmlType) Vdm2UmlType.ConvertType(t);
        IUmlType arg_19 = null;
        arg_19 = (IUmlType) Vdm2UmlType.GetQualifier(t);
        enum_set_8 = new UmlProperty(name, new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE), arg_11, arg_12, null, null, new Boolean(false), null, null, new String("Implementation prosponed"), arg_19);
        rexpr_7 = new HashSet();
        rexpr_7.add(enum_set_8);
        return rexpr_7;
      }
  }
// ***** VDMTOOLS END Name=CreateEndProperty#2|IOmlType|String


// ***** VDMTOOLS START Name=GetNextId KEEP=NO
  private String GetNextId () throws CGException {

    runningId = UTIL.NumberToLong(UTIL.clone(new Long(runningId.intValue() + new Long(1).intValue())));
    String rexpr_4 = null;
    rexpr_4 = UTIL.ConvertToString(Util.ToString(runningId));
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=GetNextId

}
;