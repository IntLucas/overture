

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-08-09 by the VDM++ to JAVA Code Generator
// (v8.2.1b - Wed 15-Jul-2009 14:09:22)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.vdm2uml;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.api.Util;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
// ***** VDMTOOLS END Name=imports



public class Vdm2Uml {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=associations KEEP=NO
  private HashSet associations = new HashSet();
// ***** VDMTOOLS END Name=associations

// ***** VDMTOOLS START Name=constraints KEEP=NO
  private HashSet constraints = new HashSet();
// ***** VDMTOOLS END Name=constraints

// ***** VDMTOOLS START Name=runningId KEEP=NO
  private Long runningId = null;
// ***** VDMTOOLS END Name=runningId

// ***** VDMTOOLS START Name=log KEEP=NO
  private StatusLog log = null;
// ***** VDMTOOLS END Name=log

// ***** VDMTOOLS START Name=classFilter KEEP=NO
  private Vector classFilter = null;
// ***** VDMTOOLS END Name=classFilter

// ***** VDMTOOLS START Name=nestedClasses KEEP=NO
  private HashSet nestedClasses = new HashSet();
// ***** VDMTOOLS END Name=nestedClasses


// ***** VDMTOOLS START Name=vdm_init_Vdm2Uml KEEP=NO
  private void vdm_init_Vdm2Uml () throws CGException {
    try {

      associations = new HashSet();
      constraints = new HashSet();
      runningId = new Long(0);
      log = (StatusLog) new StatusLog();
      classFilter = new Vector();
      nestedClasses = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Vdm2Uml


// ***** VDMTOOLS START Name=Vdm2Uml KEEP=NO
  public Vdm2Uml () throws CGException {
    vdm_init_Vdm2Uml();
  }
// ***** VDMTOOLS END Name=Vdm2Uml


// ***** VDMTOOLS START Name=getLog KEEP=NO
  public StatusLog getLog () throws CGException {
    return (StatusLog) log;
  }
// ***** VDMTOOLS END Name=getLog


// ***** VDMTOOLS START Name=init#1|IOmlSpecifications KEEP=NO
  public IUmlModel init (final IOmlSpecifications specs) throws CGException {

    UmlModel model = (UmlModel) (UmlModel) build_uuml((IOmlSpecifications) specs);
    {

      HashSet par_6 = new HashSet();
      HashSet var1_7 = new HashSet();
      HashSet var1_8 = new HashSet();
      var1_8 = model.getDefinitions();
      var1_7 = (HashSet) var1_8.clone();
      var1_7.addAll(associations);
      par_6 = (HashSet) var1_7.clone();
      par_6.addAll(constraints);
      model.setDefinitions(par_6);
      return (IUmlModel) model;
    }
  }
// ***** VDMTOOLS END Name=init#1|IOmlSpecifications


// ***** VDMTOOLS START Name=addFilterClass#1|String KEEP=NO
  public void addFilterClass (final String className) throws CGException {

    Vector rhs_2 = null;
    rhs_2 = (Vector) classFilter.clone();
    rhs_2.addAll((Vector) UTIL.ConvertToList(className));
    classFilter = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=addFilterClass#1|String


// ***** VDMTOOLS START Name=build_uuml#1|IOmlSpecifications KEEP=NO
  public UmlModel build_uuml (final IOmlSpecifications specs) throws CGException {

    Vector classes = null;
    classes = specs.getClassList();
    Vector uml_uclasses = null;
    Vector var1_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = classes.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_29 = bind_l_7.iterator(); enm_29.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_29.next());
        i = e_10;
        Boolean pred_19 = null;
        String var1_20 = null;
        IOmlClass obj_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= classes.size())) 
          obj_21 = (IOmlClass) classes.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_20 = obj_21.getIdentifier();
        HashSet var2_24 = new HashSet();
        HashSet set_26 = new HashSet();
        Enumeration enm_27 = classFilter.elements();
        while ( enm_27.hasMoreElements())
          set_26.add(enm_27.nextElement());
        var2_24 = set_26;
        pred_19 = new Boolean(!var2_24.contains(var1_20));
        if (pred_19.booleanValue()) {

          IUmlClass reselem_15 = null;
          IOmlClass par_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= classes.size())) 
            par_16 = (IOmlClass) classes.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_15 = (IUmlClass) build_uClass((IOmlClass) par_16);
          res_l_6.add(reselem_15);
        }
      }
      var1_5 = res_l_6;
    }
    Vector var2_30 = null;
    var2_30 = (Vector) UTIL.ConvertToList(StdLib.SetToSeq(nestedClasses));
    uml_uclasses = (Vector) var1_5.clone();
    uml_uclasses.addAll(var2_30);
    UmlModel rexpr_32 = null;
    HashSet arg_34 = new HashSet();
    HashSet set_36 = new HashSet();
    Enumeration enm_37 = uml_uclasses.elements();
    while ( enm_37.hasMoreElements())
      set_36.add(enm_37.nextElement());
    arg_34 = set_36;
    rexpr_32 = new UmlModel(new String("Root"), arg_34);
    return (UmlModel) rexpr_32;
  }
// ***** VDMTOOLS END Name=build_uuml#1|IOmlSpecifications


// ***** VDMTOOLS START Name=build_uClass#1|IOmlClass KEEP=NO
  public IUmlClass build_uClass (final IOmlClass c) throws CGException {

    String par_3 = null;
    par_3 = c.getIdentifier();
    log.addNewClassInfo(par_3);
    {

      String name = null;
      name = c.getIdentifier();
      IOmlInheritanceClause inh = null;
      Boolean cond_8 = null;
      cond_8 = c.hasInheritanceClause();
      if (cond_8.booleanValue()) 
        inh = (IOmlInheritanceClause) c.getInheritanceClause();
      else 
        inh = null;
      Vector body = null;
      body = c.getClassBody();
      Boolean isStatic = new Boolean(false);
      Boolean isActive = null;
      Long var1_12 = null;
      HashSet unArg_13 = new HashSet();
      HashSet res_s_14 = new HashSet();
      {

        HashSet e_set_23 = new HashSet();
        HashSet riseq_25 = new HashSet();
        int max_26 = body.size();
        for (int i_27 = 1; i_27 <= max_26; i_27++) 
          riseq_25.add(new Long(i_27));
        e_set_23 = riseq_25;
        Long i = null;
        {
          for (Iterator enm_29 = e_set_23.iterator(); enm_29.hasNext(); ) {

            Long elem_28 = UTIL.NumberToLong(enm_29.next());
            i = elem_28;
            Boolean pred_18 = null;
            IOmlDefinitionBlock obj_19 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
              obj_19 = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            pred_18 = new Boolean(obj_19 instanceof IOmlThreadDefinition);
            if (pred_18.booleanValue()) {

              IOmlDefinitionBlock res_s_15 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
                res_s_15 = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              res_s_14.add(res_s_15);
            }
          }
        }
      }
      unArg_13 = res_s_14;
      var1_12 = new Long(unArg_13.size());
      isActive = new Boolean((var1_12.intValue()) > (new Long(0).intValue()));
      Vector dBlock = null;
      {

        Vector res_l_32 = new Vector();
        HashSet resBind_s_34 = new HashSet();
        HashSet riseq_38 = new HashSet();
        int max_39 = body.size();
        for (int i_40 = 1; i_40 <= max_39; i_40++) 
          riseq_38.add(new Long(i_40));
        resBind_s_34 = riseq_38;
        Vector bind_l_33 = null;
        bind_l_33 = UTIL.Sort(resBind_s_34);
        Long i = null;
        for (Iterator enm_49 = bind_l_33.iterator(); enm_49.hasNext(); ) {

          Long e_36 = UTIL.NumberToLong(enm_49.next());
          i = e_36;
          IUmlDefinitionBlock reselem_41 = null;
          {

            IOmlDefinitionBlock dbs = null;
            if ((1 <= i.intValue()) && (i.intValue() <= body.size())) 
              dbs = (IOmlDefinitionBlock) body.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_41 = (IUmlDefinitionBlock) (IUmlDefinitionBlock) build_udef_ub((IOmlDefinitionBlock) dbs, name);
          }
          res_l_32.add(reselem_41);
        }
        dBlock = res_l_32;
      }
      HashSet dBlockSet = new HashSet();
      HashSet res_s_51 = new HashSet();
      {

        HashSet e1_set_58 = new HashSet(dBlock);
        IUmlDefinitionBlock d = null;
        {
          for (Iterator enm_60 = e1_set_58.iterator(); enm_60.hasNext(); ) {

            IUmlDefinitionBlock elem_59 = (IUmlDefinitionBlock) enm_60.next();
            d = (IUmlDefinitionBlock) elem_59;
            if ((!UTIL.equals(d, null))) {
              res_s_51.add(d);
            }
          }
        }
      }
      dBlockSet = res_s_51;
      Boolean isAbstract = hasSubclassResponsibilityDefinition(body);
      Vector supers = getSuperClasses((IOmlInheritanceClause) inh);
      UmlVisibilityKind visibility = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
      IUmlTemplateSignature templateParameters = null;
      Vector par_68 = null;
      par_68 = c.getGenericTypes();
      templateParameters = (IUmlTemplateSignature) getGenericTypes(par_68);
      return (IUmlClass) new UmlClass(name, dBlockSet, isAbstract, supers, visibility, isStatic, isActive, templateParameters);
    }
  }
// ***** VDMTOOLS END Name=build_uClass#1|IOmlClass


// ***** VDMTOOLS START Name=getGenericTypes#1|Vector KEEP=NO
  public IUmlTemplateSignature getGenericTypes (final Vector genericTypes) throws CGException {
    if (((new Long(genericTypes.size()).intValue()) > (new Long(0).intValue()))) {

      UmlTemplateSignature rexpr_7 = null;
      HashSet arg_8 = new HashSet();
      HashSet res_s_9 = new HashSet();
      {

        HashSet e1_set_17 = new HashSet(genericTypes);
        IOmlType t = null;
        {
          for (Iterator enm_19 = e1_set_17.iterator(); enm_19.hasNext(); ) {

            IOmlType elem_18 = (IOmlType) enm_19.next();
            t = (IOmlType) elem_18;
            UmlTemplateParameter res_s_10 = null;
            {

              IOmlTypeName tn = (IOmlTypeName) t;
              String arg_13 = null;
              IOmlName obj_14 = null;
              obj_14 = (IOmlName) tn.getName();
              arg_13 = obj_14.getIdentifier();
              res_s_10 = new UmlTemplateParameter(arg_13);
            }
            res_s_9.add(res_s_10);
          }
        }
      }
      arg_8 = res_s_9;
      rexpr_7 = new UmlTemplateSignature(arg_8);
      return (IUmlTemplateSignature) rexpr_7;
    }
    else 
      return null;
  }
// ***** VDMTOOLS END Name=getGenericTypes#1|Vector


// ***** VDMTOOLS START Name=getSuperClasses#1|IOmlInheritanceClause KEEP=NO
  public Vector getSuperClasses (final IOmlInheritanceClause inh) throws CGException {
    if ((UTIL.equals(inh, null))) 
      return new Vector();
    else {

      Vector list = null;
      list = inh.getIdentifierList();
      Vector rexpr_7 = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = list.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_22 = bind_l_9.iterator(); enm_22.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_22.next());
          i = e_12;
          UmlClassNameType reselem_17 = null;
          String arg_18 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            arg_18 = UTIL.ConvertToString(list.get(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_17 = new UmlClassNameType(arg_18);
          res_l_8.add(reselem_17);
        }
        rexpr_7 = res_l_8;
      }
      return rexpr_7;
    }
  }
// ***** VDMTOOLS END Name=getSuperClasses#1|IOmlInheritanceClause


// ***** VDMTOOLS START Name=hasSubclassResponsibilityDefinition#1|Vector KEEP=NO
  public Boolean hasSubclassResponsibilityDefinition (final Vector dBlock) throws CGException {

    Vector opList = null;
    Vector unArg_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = dBlock.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_24 = bind_l_6.iterator(); enm_24.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_24.next());
        i = e_9;
        Boolean pred_19 = null;
        IOmlDefinitionBlock obj_20 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= dBlock.size())) 
          obj_20 = (IOmlDefinitionBlock) dBlock.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_19 = new Boolean(obj_20 instanceof IOmlOperationDefinitions);
        if (pred_19.booleanValue()) {

          Vector reselem_14 = null;
          {

            IOmlDefinitionBlock tmpVal_16 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= dBlock.size())) 
              tmpVal_16 = (IOmlDefinitionBlock) dBlock.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            IOmlOperationDefinitions op = null;
            op = (IOmlOperationDefinitions) tmpVal_16;
            reselem_14 = op.getOperationList();
          }
          res_l_5.add(reselem_14);
        }
      }
      unArg_4 = res_l_5;
    }
    Vector rdcseq_25 = new Vector();
    for (Iterator enm_28 = unArg_4.iterator(); enm_28.hasNext(); ) {

      Vector e_26 = (Vector) UTIL.ConvertToList(enm_28.next());
      rdcseq_25.addAll(e_26);
    }
    opList = rdcseq_25;
    HashSet hasIsSubClassResp = new HashSet();
    HashSet res_s_30 = new HashSet();
    {

      HashSet e_set_44 = new HashSet();
      HashSet riseq_46 = new HashSet();
      int max_47 = opList.size();
      for (int i_48 = 1; i_48 <= max_47; i_48++) 
        riseq_46.add(new Long(i_48));
      e_set_44 = riseq_46;
      Long i = null;
      {
        for (Iterator enm_50 = e_set_44.iterator(); enm_50.hasNext(); ) {

          Long elem_49 = UTIL.NumberToLong(enm_50.next());
          i = elem_49;
          Boolean pred_38 = null;
          IOmlOperationShape obj_39 = null;
          IOmlOperationDefinition obj_40 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= opList.size())) 
            obj_40 = (IOmlOperationDefinition) opList.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_39 = (IOmlOperationShape) obj_40.getShape();
          pred_38 = new Boolean(obj_39 instanceof IOmlExplicitOperation);
          if (pred_38.booleanValue()) {

            Boolean res_s_31 = null;
            {

              IOmlExplicitOperation explicitOp = null;
              IOmlOperationDefinition obj_34 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= opList.size())) 
                obj_34 = (IOmlOperationDefinition) opList.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              explicitOp = (IOmlExplicitOperation) obj_34.getShape();
              IOmlOperationBody obj_37 = null;
              obj_37 = (IOmlOperationBody) explicitOp.getBody();
              res_s_31 = obj_37.getSubclassResponsibility();
            }
            res_s_30.add(res_s_31);
          }
        }
      }
    }
    hasIsSubClassResp = res_s_30;
    Boolean rexpr_51 = null;
    boolean tmpQuant_52 = false;
    {

      Boolean e = null;
      {
        for (Iterator enm_59 = hasIsSubClassResp.iterator(); enm_59.hasNext() && !tmpQuant_52; ) {

          Boolean elem_58 = (Boolean) enm_59.next();
          e = elem_58;
          if ((UTIL.equals(e, new Boolean(true)))) 
            tmpQuant_52 = true;
        }
      }
    }
    rexpr_51 = new Boolean(tmpQuant_52);
    return rexpr_51;
  }
// ***** VDMTOOLS END Name=hasSubclassResponsibilityDefinition#1|Vector


// ***** VDMTOOLS START Name=build_udef_ub#2|IOmlDefinitionBlock|String KEEP=NO
  private IUmlDefinitionBlock build_udef_ub (final IOmlDefinitionBlock block, final String owner) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlInstanceVariableDefinitions))) 
        succ_3 = false;
      if (succ_3) {

        IOmlInstanceVariableDefinitions tmp = (IOmlInstanceVariableDefinitions) block;
        return (IUmlDefinitionBlock) build_udef_ublock((IOmlInstanceVariableDefinitions) tmp, owner);
      }
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlValueDefinitions))) 
          succ_3 = false;
        if (succ_3) {

          IOmlValueDefinitions tmp = (IOmlValueDefinitions) block;
          return (IUmlDefinitionBlock) build_udef_ublock((IOmlValueDefinitions) tmp, owner);
        }
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlTypeDefinitions))) 
            succ_3 = false;
          if (succ_3) {

            IOmlTypeDefinitions tmp = (IOmlTypeDefinitions) block;
            return (IUmlDefinitionBlock) build_udef_ublock((IOmlTypeDefinitions) tmp, owner);
          }
          else {

            succ_3 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlOperationDefinitions))) 
              succ_3 = false;
            if (succ_3) {

              IOmlOperationDefinitions tmp = (IOmlOperationDefinitions) block;
              return (IUmlDefinitionBlock) build_udef_ublock((IOmlOperationDefinitions) tmp, owner);
            }
            else {

              succ_3 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(block instanceof IOmlFunctionDefinitions))) 
                succ_3 = false;
              if (succ_3) {

                IOmlFunctionDefinitions tmp = (IOmlFunctionDefinitions) block;
                return (IUmlDefinitionBlock) build_udef_ublock((IOmlFunctionDefinitions) tmp, owner);
              }
              else 
                return null;
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=build_udef_ub#2|IOmlDefinitionBlock|String


// ***** VDMTOOLS START Name=build_udef_ublock#2|IOmlInstanceVariableDefinitions|String KEEP=NO
  public IUmlOwnedProperties build_udef_ublock (final IOmlInstanceVariableDefinitions v, final String owner) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = v.getVariablesList();
    Vector q = null;
    q = tmpVal_4;
    Vector props = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = q.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_25 = bind_l_7.iterator(); enm_25.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_25.next());
        i = e_10;
        Boolean pred_20 = null;
        IOmlInstanceVariableShape obj_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
          obj_21 = (IOmlInstanceVariableShape) q.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_20 = new Boolean(obj_21 instanceof IOmlInstanceVariable);
        if (pred_20.booleanValue()) {

          IUmlProperty reselem_15 = null;
          IOmlInstanceVariableShape par_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
            par_16 = (IOmlInstanceVariableShape) q.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_15 = (IUmlProperty) buildVariable((IOmlInstanceVariable) par_16, owner);
          res_l_6.add(reselem_15);
        }
      }
      props = res_l_6;
    }
    UmlOwnedProperties rexpr_26 = null;
    HashSet arg_27 = new HashSet();
    HashSet res_s_28 = new HashSet();
    {

      HashSet e1_set_35 = new HashSet(props);
      IUmlProperty p = null;
      {
        for (Iterator enm_37 = e1_set_35.iterator(); enm_37.hasNext(); ) {

          IUmlProperty elem_36 = (IUmlProperty) enm_37.next();
          p = (IUmlProperty) elem_36;
          if ((!UTIL.equals(p, null))) {
            res_s_28.add(p);
          }
        }
      }
    }
    arg_27 = res_s_28;
    rexpr_26 = new UmlOwnedProperties(arg_27);
    return (IUmlOwnedProperties) rexpr_26;
  }
// ***** VDMTOOLS END Name=build_udef_ublock#2|IOmlInstanceVariableDefinitions|String


// ***** VDMTOOLS START Name=buildVariable#2|IOmlInstanceVariable|String KEEP=NO
  public IUmlProperty buildVariable (final IOmlInstanceVariable vdm_var, final String owner) throws CGException {

    IOmlAccessDefinition tmpVal_4 = null;
    tmpVal_4 = (IOmlAccessDefinition) vdm_var.getAccess();
    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) tmpVal_4;
    IOmlScope scope = null;
    scope = (IOmlScope) access.getScope();
    IOmlAssignmentDefinition assign = null;
    assign = (IOmlAssignmentDefinition) vdm_var.getAssignmentDefinition();
    Boolean isStatic = null;
    isStatic = access.getStaticAccess();
    String name = null;
    name = assign.getIdentifier();
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) convertScopeToVisibility((IOmlScope) scope);
    IOmlType omlType = null;
    omlType = (IOmlType) assign.getType();
    IUmlMultiplicityElement multiplicity = null;
    multiplicity = (IUmlMultiplicityElement) Vdm2UmlType.extractMultiplicity((IOmlType) omlType);
    IUmlType type = null;
    type = (IUmlType) Vdm2UmlType.convertPropertyType(omlType, owner);
    Boolean isReadOnly = new Boolean(false);
    IUmlValueSpecification vdm_default = null;
    Boolean cond_20 = null;
    cond_20 = assign.hasExpression();
    if (cond_20.booleanValue()) {

      IOmlExpression par_21 = null;
      par_21 = (IOmlExpression) assign.getExpression();
      vdm_default = (IUmlValueSpecification) getDefaultValue((IOmlExpression) par_21);
    }
    else 
      vdm_default = null;
    Boolean isComposite = isSimpleType((IOmlType) omlType);
    Boolean isDerived = new Boolean(false);
    IUmlType qualifier = null;
    qualifier = (IUmlType) Vdm2UmlType.getQualifier(omlType);
    {

      IUmlProperty property = (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, owner, qualifier);
      if ((!isSimpleType((IOmlType) omlType).booleanValue())) {

        CreateAssociationFromProperty((IUmlProperty) property, (IOmlType) omlType);
        return null;
      }
      else 
        return (IUmlProperty) property;
    }
  }
// ***** VDMTOOLS END Name=buildVariable#2|IOmlInstanceVariable|String


// ***** VDMTOOLS START Name=getDefaultValue#1|IOmlExpression KEEP=NO
  public IUmlValueSpecification getDefaultValue (final IOmlExpression expression) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(expression instanceof IOmlSymbolicLiteralExpression))) 
        succ_2 = false;
      if (succ_2) {

        IOmlSymbolicLiteralExpression se = (IOmlSymbolicLiteralExpression) expression;
        boolean succ_10 = true;
        {

          succ_10 = true;
          Boolean tmpVal_v_20 = null;
          IOmlLiteral obj_21 = null;
          obj_21 = (IOmlLiteral) se.getLiteral();
          tmpVal_v_20 = new Boolean(obj_21 instanceof IOmlTextLiteral);
          if (!UTIL.equals(new Boolean(true), tmpVal_v_20)) 
            succ_10 = false;
          if (succ_10) {

            IOmlTextLiteral tx = null;
            tx = (IOmlTextLiteral) se.getLiteral();
            UmlLiteralString rexpr_24 = null;
            String arg_25 = null;
            arg_25 = tx.getVal();
            rexpr_24 = new UmlLiteralString(arg_25);
            return (IUmlValueSpecification) rexpr_24;
          }
          else {

            succ_10 = true;
            Boolean tmpVal_v_14 = null;
            IOmlLiteral obj_15 = null;
            obj_15 = (IOmlLiteral) se.getLiteral();
            tmpVal_v_14 = new Boolean(obj_15 instanceof IOmlNumericLiteral);
            if (!UTIL.equals(new Boolean(true), tmpVal_v_14)) 
              succ_10 = false;
            if (succ_10) {

              IOmlNumericLiteral tx = null;
              tx = (IOmlNumericLiteral) se.getLiteral();
              UmlLiteralInteger rexpr_18 = null;
              Long arg_19 = null;
              arg_19 = tx.getVal();
              rexpr_18 = new UmlLiteralInteger(arg_19);
              return (IUmlValueSpecification) rexpr_18;
            }
            else 
              return null;
          }
        }
      }
      else 
        return null;
    }
  }
// ***** VDMTOOLS END Name=getDefaultValue#1|IOmlExpression


// ***** VDMTOOLS START Name=convertScopeToVisibility#1|IOmlScope KEEP=NO
  public IUmlVisibilityKind convertScopeToVisibility (final IOmlScope sc) throws CGException {

    Object varRes_2 = null;
    {

      Long val = null;
      val = sc.getValue();
      boolean succ_5 = true;
      {

        succ_5 = true;
        if (!UTIL.equals(val, OmlScopeQuotes.IQPUBLIC)) 
          succ_5 = false;
        if (succ_5) 
          varRes_2 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
      }
      if (!succ_5) {

        succ_5 = true;
        if (!UTIL.equals(val, OmlScopeQuotes.IQPRIVATE)) 
          succ_5 = false;
        if (!succ_5) {

          succ_5 = true;
          if (!UTIL.equals(val, OmlScopeQuotes.IQDEFAULT)) 
            succ_5 = false;
        }
        if (succ_5) 
          varRes_2 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
      }
      if (!succ_5) {

        succ_5 = true;
        if (!UTIL.equals(val, OmlScopeQuotes.IQPROTECTED)) 
          succ_5 = false;
        if (succ_5) 
          varRes_2 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPROTECTED);
      }
      if (!succ_5) 
        UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
    }
    return (IUmlVisibilityKind) varRes_2;
  }
// ***** VDMTOOLS END Name=convertScopeToVisibility#1|IOmlScope


// ***** VDMTOOLS START Name=build_udef_ublock#2|IOmlValueDefinitions|String KEEP=NO
  public IUmlOwnedProperties build_udef_ublock (final IOmlValueDefinitions v, final String owner) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = v.getValueList();
    Vector q = null;
    q = tmpVal_4;
    Vector props = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = q.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_21 = bind_l_7.iterator(); enm_21.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_21.next());
        i = e_10;
        IUmlProperty reselem_15 = null;
        IOmlValueDefinition par_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
          par_16 = (IOmlValueDefinition) q.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = (IUmlProperty) buildValue((IOmlValueDefinition) par_16, owner);
        res_l_6.add(reselem_15);
      }
      props = res_l_6;
    }
    HashSet propsNoNil = new HashSet();
    HashSet res_s_23 = new HashSet();
    {

      HashSet e1_set_30 = new HashSet(props);
      IUmlProperty p = null;
      {
        for (Iterator enm_32 = e1_set_30.iterator(); enm_32.hasNext(); ) {

          IUmlProperty elem_31 = (IUmlProperty) enm_32.next();
          p = (IUmlProperty) elem_31;
          if ((!UTIL.equals(p, null))) {
            res_s_23.add(p);
          }
        }
      }
    }
    propsNoNil = res_s_23;
    return (IUmlOwnedProperties) new UmlOwnedProperties(propsNoNil);
  }
// ***** VDMTOOLS END Name=build_udef_ublock#2|IOmlValueDefinitions|String


// ***** VDMTOOLS START Name=buildValue#2|IOmlValueDefinition|String KEEP=NO
  public IUmlProperty buildValue (final IOmlValueDefinition vdm_var, final String owner) throws CGException {

    IOmlAccessDefinition tmpVal_4 = null;
    tmpVal_4 = (IOmlAccessDefinition) vdm_var.getAccess();
    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) tmpVal_4;
    IOmlScope scope = null;
    scope = (IOmlScope) access.getScope();
    IOmlValueShape shape = null;
    shape = (IOmlValueShape) vdm_var.getShape();
    {

      Boolean cond_7 = null;
      Boolean unArg_8 = null;
      unArg_8 = shape.hasType();
      cond_7 = new Boolean(!unArg_8.booleanValue());
      if (cond_7.booleanValue()) {

        log.mappingNotSupported((IOmlValueDefinition) vdm_var);
        return null;
      }
      else {

        Boolean isStatic = null;
        isStatic = access.getStaticAccess();
        IOmlPatternIdentifier patternIdent = null;
        patternIdent = (IOmlPatternIdentifier) shape.getPattern();
        String name = null;
        name = patternIdent.getIdentifier();
        IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) convertScopeToVisibility((IOmlScope) scope);
        IUmlMultiplicityElement multiplicity = null;
        IOmlType par_16 = null;
        par_16 = (IOmlType) shape.getType();
        multiplicity = (IUmlMultiplicityElement) Vdm2UmlType.extractMultiplicity((IOmlType) par_16);
        IUmlType type = null;
        IOmlType par_18 = null;
        par_18 = (IOmlType) shape.getType();
        type = (IUmlType) Vdm2UmlType.convertType(par_18);
        Boolean isReadOnly = new Boolean(true);
        IUmlValueSpecification vdm_default = null;
        IOmlExpression par_21 = null;
        par_21 = (IOmlExpression) shape.getExpression();
        vdm_default = (IUmlValueSpecification) getDefaultValue((IOmlExpression) par_21);
        Boolean isComposite = null;
        IOmlType par_23 = null;
        par_23 = (IOmlType) shape.getType();
        isComposite = isSimpleType((IOmlType) par_23);
        Boolean isDerived = new Boolean(false);
        IUmlType qualifier = null;
        IOmlType par_26 = null;
        par_26 = (IOmlType) shape.getType();
        qualifier = (IUmlType) Vdm2UmlType.getQualifier(par_26);
        IOmlType omlType = null;
        omlType = (IOmlType) shape.getType();
        {

          IUmlProperty property = (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, owner, qualifier);
          if ((!isSimpleType((IOmlType) omlType).booleanValue())) {

            CreateAssociationFromProperty((IUmlProperty) property, (IOmlType) omlType);
            return null;
          }
          else 
            return (IUmlProperty) property;
        }
      }
    }
  }
// ***** VDMTOOLS END Name=buildValue#2|IOmlValueDefinition|String


// ***** VDMTOOLS START Name=build_udef_ublock#2|IOmlTypeDefinitions|String KEEP=NO
  public IUmlNestedClassifiers build_udef_ublock (final IOmlTypeDefinitions var_1_1, final String var_2_2) throws CGException {

    IOmlTypeDefinitions td = null;
    boolean succ_3 = true;
    td = (IOmlTypeDefinitions) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation build_udef_ublock");
    {

      Vector tmpVal_5 = null;
      tmpVal_5 = td.getTypeList();
      Vector q = null;
      q = tmpVal_5;
      Vector tps = null;
      {

        Vector res_l_7 = new Vector();
        HashSet resBind_s_9 = new HashSet();
        HashSet riseq_13 = new HashSet();
        int max_14 = q.size();
        for (int i_15 = 1; i_15 <= max_14; i_15++) 
          riseq_13.add(new Long(i_15));
        resBind_s_9 = riseq_13;
        Vector bind_l_8 = null;
        bind_l_8 = UTIL.Sort(resBind_s_9);
        Long i = null;
        for (Iterator enm_31 = bind_l_8.iterator(); enm_31.hasNext(); ) {

          Long e_11 = UTIL.NumberToLong(enm_31.next());
          i = e_11;
          Boolean pred_25 = null;
          IOmlTypeShape obj_26 = null;
          IOmlTypeDefinition obj_27 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
            obj_27 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          obj_26 = (IOmlTypeShape) obj_27.getShape();
          pred_25 = new Boolean(obj_26 instanceof IOmlSimpleType);
          if (pred_25.booleanValue()) {

            IUmlType reselem_16 = null;
            IOmlTypeShape par_17 = null;
            IOmlTypeDefinition obj_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
              obj_18 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_17 = (IOmlTypeShape) obj_18.getShape();
            IOmlAccessDefinition par_21 = null;
            IOmlTypeDefinition obj_22 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
              obj_22 = (IOmlTypeDefinition) q.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            par_21 = (IOmlAccessDefinition) obj_22.getAccess();
            reselem_16 = (IUmlType) buildType((IOmlSimpleType) par_17, (IOmlAccessDefinition) par_21);
            res_l_7.add(reselem_16);
          }
        }
        tps = res_l_7;
      }
      UmlNestedClassifiers rexpr_32 = null;
      HashSet arg_33 = new HashSet();
      HashSet set_35 = new HashSet();
      Enumeration enm_36 = tps.elements();
      while ( enm_36.hasMoreElements())
        set_35.add(enm_36.nextElement());
      arg_33 = set_35;
      rexpr_32 = new UmlNestedClassifiers(arg_33);
      return (IUmlNestedClassifiers) rexpr_32;
    }
  }
// ***** VDMTOOLS END Name=build_udef_ublock#2|IOmlTypeDefinitions|String


// ***** VDMTOOLS START Name=buildType#2|IOmlSimpleType|IOmlAccessDefinition KEEP=NO
  public IUmlType buildType (final IOmlSimpleType vdm_var, final IOmlAccessDefinition access) throws CGException {

    Boolean cond_3 = null;
    IOmlType obj_4 = null;
    obj_4 = (IOmlType) vdm_var.getType();
    cond_3 = new Boolean(obj_4 instanceof IOmlUnionType);
    if (cond_3.booleanValue()) {

      IUmlClass elem_6 = null;
      IOmlScope par_8 = null;
      par_8 = (IOmlScope) access.getScope();
      elem_6 = (IUmlClass) buildClassFromType((IOmlSimpleType) vdm_var, (IOmlScope) par_8);
      nestedClasses.add(elem_6);
      UmlClassNameType rexpr_9 = null;
      String arg_10 = null;
      arg_10 = vdm_var.getIdentifier();
      rexpr_9 = new UmlClassNameType(arg_10);
      return (IUmlType) rexpr_9;
    }
    Boolean cond_11 = null;
    IOmlType obj_12 = null;
    obj_12 = (IOmlType) vdm_var.getType();
    cond_11 = new Boolean(obj_12 instanceof IOmlSeq0Type);
    if (cond_11.booleanValue()) {

      IOmlSeq0Type seqT = null;
      seqT = (IOmlSeq0Type) vdm_var.getType();
      Boolean cond_15 = null;
      IOmlType obj_16 = null;
      obj_16 = (IOmlType) seqT.getType();
      cond_15 = new Boolean(obj_16 instanceof IOmlCharType);
      if (cond_15.booleanValue()) {

        IUmlClass elem_18 = null;
        IOmlScope par_20 = null;
        par_20 = (IOmlScope) access.getScope();
        elem_18 = (IUmlClass) buildClassFromType((IOmlSimpleType) vdm_var, (IOmlScope) par_20);
        nestedClasses.add(elem_18);
        UmlClassNameType rexpr_21 = null;
        String arg_22 = null;
        arg_22 = vdm_var.getIdentifier();
        rexpr_21 = new UmlClassNameType(arg_22);
        return (IUmlType) rexpr_21;
      }
    }
    IUmlType rexpr_23 = null;
    IOmlType par_24 = null;
    par_24 = (IOmlType) vdm_var.getType();
    rexpr_23 = (IUmlType) Vdm2UmlType.convertType(par_24);
    return (IUmlType) rexpr_23;
  }
// ***** VDMTOOLS END Name=buildType#2|IOmlSimpleType|IOmlAccessDefinition


// ***** VDMTOOLS START Name=buildClassFromType#2|IOmlSimpleType|IOmlScope KEEP=NO
  private IUmlClass buildClassFromType (final IOmlSimpleType t, final IOmlScope scope) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = t.getIdentifier();
    String name = null;
    name = tmpVal_4;
    HashSet classBody = new HashSet();
    IUmlDefinitionBlock enum_set_6 = null;
    IOmlType par_8 = null;
    par_8 = (IOmlType) t.getType();
    enum_set_6 = (IUmlDefinitionBlock) buildTypeDefinitionBlocks(name, (IOmlType) par_8);
    classBody = new HashSet();
    classBody.add(enum_set_6);
    Boolean isAbstract = new Boolean(false);
    Vector superClass = new Vector();
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) convertScopeToVisibility((IOmlScope) scope);
    Boolean isStatic = new Boolean(false);
    Boolean isActive = new Boolean(false);
    IUmlTemplateSignature templatesignature = null;
    return (IUmlClass) new UmlClass(name, classBody, isAbstract, superClass, visibility, isStatic, isActive, templatesignature);
  }
// ***** VDMTOOLS END Name=buildClassFromType#2|IOmlSimpleType|IOmlScope


// ***** VDMTOOLS START Name=buildTypeDefinitionBlocks#2|String|IOmlType KEEP=NO
  private IUmlDefinitionBlock buildTypeDefinitionBlocks (final String ownerName, final IOmlType t) throws CGException {

    if ((t instanceof IOmlUnionType)) {

      IOmlUnionType ut = (IOmlUnionType) t;
      {

        IUmlOwnedProperties lhs = null;
        IOmlType par_10 = null;
        par_10 = (IOmlType) ut.getLhsType();
        lhs = (IUmlOwnedProperties) buildTypeDefinitionBlocks(ownerName, (IOmlType) par_10);
        IUmlOwnedProperties rhs = null;
        IOmlType par_13 = null;
        par_13 = (IOmlType) ut.getRhsType();
        rhs = (IUmlOwnedProperties) buildTypeDefinitionBlocks(ownerName, (IOmlType) par_13);
        UmlOwnedProperties rexpr_14 = null;
        HashSet arg_15 = new HashSet();
        HashSet var1_16 = new HashSet();
        var1_16 = lhs.getPropetityList();
        HashSet var2_17 = new HashSet();
        var2_17 = rhs.getPropetityList();
        arg_15 = (HashSet) var1_16.clone();
        arg_15.addAll(var2_17);
        rexpr_14 = new UmlOwnedProperties(arg_15);
        return (IUmlDefinitionBlock) rexpr_14;
      }
    }
    if ((t instanceof IOmlQuoteType)) {

      IOmlQuoteType qt = (IOmlQuoteType) t;
      {

        HashSet props = new HashSet();
        props = new HashSet();
        props.add((IUmlProperty) buildValueFromQuoteType(ownerName, (IOmlQuoteType) qt));
        return (IUmlDefinitionBlock) new UmlOwnedProperties(props);
      }
    }
    return (IUmlDefinitionBlock) new UmlOwnedProperties(new HashSet());
  }
// ***** VDMTOOLS END Name=buildTypeDefinitionBlocks#2|String|IOmlType


// ***** VDMTOOLS START Name=buildValueFromQuoteType#2|String|IOmlQuoteType KEEP=NO
  private IUmlProperty buildValueFromQuoteType (final String ownerName, final IOmlQuoteType q) throws CGException {

    Boolean isStatic = new Boolean(true);
    String tmpVal_5 = null;
    IOmlQuoteLiteral obj_6 = null;
    obj_6 = (IOmlQuoteLiteral) q.getQuoteLiteral();
    tmpVal_5 = obj_6.getVal();
    String name = null;
    name = tmpVal_5;
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
    IUmlMultiplicityElement multiplicity = (IUmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(true), new Boolean(false), new Long(0), null);
    UmlIntegerType tmpVal_14 = null;
    tmpVal_14 = (UmlIntegerType) new UmlIntegerType();
    IUmlType type = null;
    type = (IUmlType) tmpVal_14;
    Boolean isReadOnly = new Boolean(true);
    IUmlValueSpecification vdm_default = null;
    Boolean isComposite = isSimpleType((IOmlType) q);
    Boolean isDerived = new Boolean(false);
    IUmlType qualifier = null;
    return (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, ownerName, qualifier);
  }
// ***** VDMTOOLS END Name=buildValueFromQuoteType#2|String|IOmlQuoteType


// ***** VDMTOOLS START Name=build_udef_ublock#2|IOmlOperationDefinitions|String KEEP=NO
  public IUmlOwnedOperations build_udef_ublock (final IOmlOperationDefinitions opDef, final String owner) throws CGException {

    Vector ops = null;
    ops = opDef.getOperationList();
    UmlOwnedOperations rexpr_5 = null;
    HashSet arg_6 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e_set_14 = new HashSet();
      HashSet riseq_16 = new HashSet();
      int max_17 = ops.size();
      for (int i_18 = 1; i_18 <= max_17; i_18++) 
        riseq_16.add(new Long(i_18));
      e_set_14 = riseq_16;
      Long i = null;
      {
        for (Iterator enm_20 = e_set_14.iterator(); enm_20.hasNext(); ) {

          Long elem_19 = UTIL.NumberToLong(enm_20.next());
          i = elem_19;
          IUmlOperation res_s_8 = null;
          IOmlOperationDefinition par_9 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= ops.size())) 
            par_9 = (IOmlOperationDefinition) ops.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_s_8 = (IUmlOperation) buildOperation((IOmlOperationDefinition) par_9, owner);
          res_s_7.add(res_s_8);
        }
      }
    }
    arg_6 = res_s_7;
    rexpr_5 = new UmlOwnedOperations(arg_6);
    return (IUmlOwnedOperations) rexpr_5;
  }
// ***** VDMTOOLS END Name=build_udef_ublock#2|IOmlOperationDefinitions|String


// ***** VDMTOOLS START Name=buildOperation#2|IOmlOperationDefinition|String KEEP=NO
  public IUmlOperation buildOperation (final IOmlOperationDefinition var_1_1, final String var_2_2) throws CGException {

    IOmlOperationDefinition op = null;
    boolean succ_3 = true;
    op = (IOmlOperationDefinition) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation buildOperation");
    {

      IOmlAccessDefinition tmpVal_5 = null;
      tmpVal_5 = (IOmlAccessDefinition) op.getAccess();
      IOmlAccessDefinition access = null;
      access = (IOmlAccessDefinition) tmpVal_5;
      IOmlScope scope = null;
      scope = (IOmlScope) access.getScope();
      IOmlExplicitOperation shape = null;
      shape = (IOmlExplicitOperation) op.getShape();
      Boolean isStatic = null;
      isStatic = access.getStaticAccess();
      String name = null;
      name = shape.getIdentifier();
      IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) convertScopeToVisibility((IOmlScope) scope);
      UmlMultiplicityElement multiplicity = (UmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1));
      IUmlType type = null;
      IOmlType par_18 = null;
      par_18 = (IOmlType) shape.getType();
      type = (IUmlType) Vdm2UmlType.convertType(par_18);
      Vector pars = null;
      Vector par_20 = null;
      par_20 = shape.getParameterList();
      IOmlType par_21 = null;
      par_21 = (IOmlType) shape.getType();
      pars = buildParameters(par_20, (IOmlType) par_21);
      return (IUmlOperation) new UmlOperation(name, visibility, multiplicity, new Boolean(false), type, isStatic, new UmlParameters(pars));
    }
  }
// ***** VDMTOOLS END Name=buildOperation#2|IOmlOperationDefinition|String


// ***** VDMTOOLS START Name=buildParameters#2|Vector|IOmlType KEEP=NO
  private Vector buildParameters (final Vector parms, final IOmlType type) throws CGException {

    Vector names = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = parms.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_24 = bind_l_6.iterator(); enm_24.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_24.next());
        i = e_9;
        Boolean pred_19 = null;
        IOmlPattern obj_20 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
          obj_20 = (IOmlPattern) parms.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_19 = new Boolean(obj_20 instanceof IOmlPatternIdentifier);
        if (pred_19.booleanValue()) {

          String reselem_14 = null;
          {

            IOmlPatternIdentifier p = null;
            if ((1 <= i.intValue()) && (i.intValue() <= parms.size())) 
              p = (IOmlPatternIdentifier) parms.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_14 = p.getIdentifier();
          }
          res_l_5.add(reselem_14);
        }
      }
      names = res_l_5;
    }
    Vector tps = buildParameterTypes((IOmlType) type);
    IUmlParameter ret = null;
    {

      Object t = null;
      if ((type instanceof IOmlOperationType)) {

        IOmlOperationType tmp = (IOmlOperationType) type;
        t = tmp;
      }
      else 
        if ((type instanceof IOmlPartialFunctionType)) {

          IOmlPartialFunctionType tmp = (IOmlPartialFunctionType) type;
          t = tmp;
        }
        else 
          t = null;
      IUmlType arg_41 = null;
      {

        IUmlType tmpType = null;
        IOmlType par_47 = null;
        if ((t instanceof IOmlPartialFunctionType)) 
          par_47 = (IOmlType) ((IOmlPartialFunctionType) t).getRngType();
        else 
          if ((t instanceof IOmlOperationType)) 
            par_47 = (IOmlType) ((IOmlOperationType) t).getRngType();
        tmpType = (IUmlType) Vdm2UmlType.convertType(par_47);
        arg_41 = (IUmlType) tmpType;
      }
      IUmlMultiplicityElement arg_42 = null;
      IOmlType par_48 = null;
      if ((t instanceof IOmlPartialFunctionType)) 
        par_48 = (IOmlType) ((IOmlPartialFunctionType) t).getRngType();
      else 
        if ((t instanceof IOmlOperationType)) 
          par_48 = (IOmlType) ((IOmlOperationType) t).getRngType();
      arg_42 = (IUmlMultiplicityElement) Vdm2UmlType.extractMultiplicity((IOmlType) par_48);
      ret = new UmlParameter(new String("return"), arg_41, arg_42, new String(""), new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQRETURN));
    }
    Vector ps = null;
    {

      Vector res_l_51 = new Vector();
      HashSet resBind_s_53 = new HashSet();
      HashSet riseq_57 = new HashSet();
      int max_58 = names.size();
      for (int i_59 = 1; i_59 <= max_58; i_59++) 
        riseq_57.add(new Long(i_59));
      resBind_s_53 = riseq_57;
      Vector bind_l_52 = null;
      bind_l_52 = UTIL.Sort(resBind_s_53);
      Long i = null;
      for (Iterator enm_76 = bind_l_52.iterator(); enm_76.hasNext(); ) {

        Long e_55 = UTIL.NumberToLong(enm_76.next());
        i = e_55;
        UmlParameter reselem_60 = null;
        String arg_61 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= names.size())) 
          arg_61 = UTIL.ConvertToString(names.get(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        IUmlType arg_62 = null;
        IOmlType par_68 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= tps.size())) 
          par_68 = (IOmlType) tps.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        arg_62 = (IUmlType) Vdm2UmlType.convertType(par_68);
        IUmlMultiplicityElement arg_63 = null;
        IOmlType par_71 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= tps.size())) 
          par_71 = (IOmlType) tps.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        arg_63 = (IUmlMultiplicityElement) Vdm2UmlType.extractMultiplicity((IOmlType) par_71);
        reselem_60 = new UmlParameter(arg_61, arg_62, arg_63, new String(""), new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQIN));
        res_l_51.add(reselem_60);
      }
      ps = res_l_51;
    }
    if ((!UTIL.equals(ret, null))) {

      Vector rexpr_84 = null;
      Vector var2_86 = null;
      var2_86 = new Vector();
      var2_86.add(ret);
      rexpr_84 = (Vector) ps.clone();
      rexpr_84.addAll(var2_86);
      return rexpr_84;
    }
    else {

      log.mappingNotSupported(parms, (IOmlType) type);
      return ps;
    }
  }
// ***** VDMTOOLS END Name=buildParameters#2|Vector|IOmlType


// ***** VDMTOOLS START Name=buildParameterTypes#1|IOmlType KEEP=NO
  private Vector buildParameterTypes (final IOmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlProductType))) 
        succ_2 = false;
      if (succ_2) {

        IOmlType tmpVal_22 = null;
        tmpVal_22 = (IOmlType) t;
        IOmlProductType type = null;
        type = (IOmlProductType) tmpVal_22;
        Vector rexpr_23 = null;
        Vector var1_24 = null;
        IOmlType par_25 = null;
        par_25 = (IOmlType) type.getLhsType();
        var1_24 = buildParameterTypes((IOmlType) par_25);
        Vector var2_26 = null;
        IOmlType par_27 = null;
        par_27 = (IOmlType) type.getRhsType();
        var2_26 = buildParameterTypes((IOmlType) par_27);
        rexpr_23 = (Vector) var1_24.clone();
        rexpr_23.addAll(var2_26);
        return rexpr_23;
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlOperationType))) 
          succ_2 = false;
        if (succ_2) {

          IOmlType tmpVal_16 = null;
          tmpVal_16 = (IOmlType) t;
          IOmlOperationType type = null;
          type = (IOmlOperationType) tmpVal_16;
          Vector rexpr_17 = null;
          IOmlType par_18 = null;
          par_18 = (IOmlType) type.getDomType();
          rexpr_17 = buildParameterTypes((IOmlType) par_18);
          return rexpr_17;
        }
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlPartialFunctionType))) 
            succ_2 = false;
          if (succ_2) {

            IOmlType tmpVal_10 = null;
            tmpVal_10 = (IOmlType) t;
            IOmlPartialFunctionType type = null;
            type = (IOmlPartialFunctionType) tmpVal_10;
            Vector rexpr_11 = null;
            IOmlType par_12 = null;
            par_12 = (IOmlType) type.getDomType();
            rexpr_11 = buildParameterTypes((IOmlType) par_12);
            return rexpr_11;
          }
          else {

            Vector rexpr_5 = null;
            rexpr_5 = new Vector();
            rexpr_5.add(t);
            return rexpr_5;
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=buildParameterTypes#1|IOmlType


// ***** VDMTOOLS START Name=build_udef_ublock#2|IOmlFunctionDefinitions|String KEEP=NO
  public IUmlOwnedOperations build_udef_ublock (final IOmlFunctionDefinitions opDef, final String owner) throws CGException {

    Vector ops = null;
    ops = opDef.getFunctionList();
    UmlOwnedOperations rexpr_5 = null;
    HashSet arg_6 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e_set_14 = new HashSet();
      HashSet riseq_16 = new HashSet();
      int max_17 = ops.size();
      for (int i_18 = 1; i_18 <= max_17; i_18++) 
        riseq_16.add(new Long(i_18));
      e_set_14 = riseq_16;
      Long i = null;
      {
        for (Iterator enm_20 = e_set_14.iterator(); enm_20.hasNext(); ) {

          Long elem_19 = UTIL.NumberToLong(enm_20.next());
          i = elem_19;
          IUmlOperation res_s_8 = null;
          IOmlFunctionDefinition par_9 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= ops.size())) 
            par_9 = (IOmlFunctionDefinition) ops.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_s_8 = (IUmlOperation) buildFunction((IOmlFunctionDefinition) par_9, owner);
          res_s_7.add(res_s_8);
        }
      }
    }
    arg_6 = res_s_7;
    rexpr_5 = new UmlOwnedOperations(arg_6);
    return (IUmlOwnedOperations) rexpr_5;
  }
// ***** VDMTOOLS END Name=build_udef_ublock#2|IOmlFunctionDefinitions|String


// ***** VDMTOOLS START Name=buildFunction#2|IOmlFunctionDefinition|String KEEP=NO
  public IUmlOperation buildFunction (final IOmlFunctionDefinition var_1_1, final String var_2_2) throws CGException {

    IOmlFunctionDefinition op = null;
    boolean succ_3 = true;
    op = (IOmlFunctionDefinition) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation buildFunction");
    {

      IOmlAccessDefinition tmpVal_5 = null;
      tmpVal_5 = (IOmlAccessDefinition) op.getAccess();
      IOmlAccessDefinition access = null;
      access = (IOmlAccessDefinition) tmpVal_5;
      IOmlScope scope = null;
      scope = (IOmlScope) access.getScope();
      IOmlExplicitFunction shape = null;
      shape = (IOmlExplicitFunction) op.getShape();
      Boolean isStatic = null;
      isStatic = access.getStaticAccess();
      String name = null;
      name = shape.getIdentifier();
      IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) convertScopeToVisibility((IOmlScope) scope);
      UmlMultiplicityElement multiplicity = (UmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1));
      IUmlType type = null;
      IOmlType par_18 = null;
      par_18 = (IOmlType) shape.getType();
      type = (IUmlType) Vdm2UmlType.convertType(par_18);
      IOmlParameter pnames = null;
      Boolean cond_21 = null;
      Long var1_22 = null;
      Vector unArg_23 = null;
      unArg_23 = shape.getParameterList();
      var1_22 = new Long(unArg_23.size());
      cond_21 = new Boolean(var1_22.intValue() == new Long(0).intValue());
      if (cond_21.booleanValue()) 
        pnames = null;
      else {

        HashSet tmpSet_25 = new HashSet();
        Vector unArg_29 = null;
        unArg_29 = shape.getParameterList();
        HashSet set_30 = new HashSet();
        Enumeration enm_31 = unArg_29.elements();
        while ( enm_31.hasMoreElements())
          set_30.add(enm_31.nextElement());
        tmpSet_25 = set_30;
        IOmlParameter p = null;
        boolean succ_27 = false;
        for (Iterator enm_32 = tmpSet_25.iterator(); enm_32.hasNext() && !succ_27; ) {

          IOmlParameter tmpElem_28 = (IOmlParameter) enm_32.next();
          succ_27 = true;
          p = (IOmlParameter) tmpElem_28;
        }
        if (!succ_27) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        pnames = (IOmlParameter) p;
      }
      Vector pars = null;
      Vector par_34 = null;
      if ((!UTIL.equals(pnames, null))) 
        par_34 = pnames.getPatternList();
      else 
        par_34 = new Vector();
      IOmlType par_39 = null;
      par_39 = (IOmlType) shape.getType();
      pars = buildParameters(par_34, (IOmlType) par_39);
      return (IUmlOperation) new UmlOperation(name, visibility, multiplicity, new Boolean(true), type, isStatic, new UmlParameters(pars));
    }
  }
// ***** VDMTOOLS END Name=buildFunction#2|IOmlFunctionDefinition|String


// ***** VDMTOOLS START Name=isSimpleType#1|IOmlType KEEP=NO
  public Boolean isSimpleType (final IOmlType t) throws CGException {

    Boolean varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlInjectiveMapType))) 
        succ_3 = false;
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlGeneralMapType))) 
          succ_3 = false;
      }
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlTypeName))) 
          succ_3 = false;
      }
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlProductType))) 
          succ_3 = false;
      }
      if (!succ_3) {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlUnionType))) 
          succ_3 = false;
      }
      if (succ_3) 
        varRes_2 = new Boolean(false);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSetType))) 
        succ_3 = false;
      if (succ_3) {

        IOmlSetType t1 = (IOmlSetType) t;
        IOmlType par_20 = null;
        par_20 = (IOmlType) t1.getType();
        varRes_2 = isSimpleType((IOmlType) par_20);
      }
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq0Type))) 
        succ_3 = false;
      if (succ_3) {

        IOmlSeq0Type t1 = (IOmlSeq0Type) t;
        IOmlType par_25 = null;
        par_25 = (IOmlType) t1.getType();
        varRes_2 = isSimpleType((IOmlType) par_25);
      }
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlSeq1Type))) 
        succ_3 = false;
      if (succ_3) {

        IOmlSeq1Type t1 = (IOmlSeq1Type) t;
        IOmlType par_30 = null;
        par_30 = (IOmlType) t1.getType();
        varRes_2 = isSimpleType((IOmlType) par_30);
      }
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IOmlOptionalType))) 
        succ_3 = false;
      if (succ_3) {

        IOmlOptionalType t1 = (IOmlOptionalType) t;
        IOmlType par_35 = null;
        par_35 = (IOmlType) t1.getType();
        varRes_2 = isSimpleType((IOmlType) par_35);
      }
    }
    if (!succ_3) 
      varRes_2 = new Boolean(true);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=isSimpleType#1|IOmlType


// ***** VDMTOOLS START Name=GetSimpleTypeName#1|IUmlType KEEP=NO
  private String GetSimpleTypeName (final IUmlType t) throws CGException {

    String varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("bool");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("int");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = new String("char");
    }
    if (!succ_3) 
      varRes_2 = new String("String");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetSimpleTypeName#1|IUmlType


// ***** VDMTOOLS START Name=CreateAssociationFromProperty#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromProperty (final IUmlProperty property, final IOmlType omlType) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(omlType instanceof IOmlProductType))) 
        succ_3 = false;
      if (succ_3) 
        CreateAssociationFromPropertyProductType((IUmlProperty) property, (IOmlType) omlType);
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(omlType instanceof IOmlUnionType))) 
          succ_3 = false;
        if (succ_3) 
          CreateAssociationFromPropertyUnionType((IUmlProperty) property, (IOmlType) omlType);
        else 
          CreateAssociationFromPropertyGeneral((IUmlProperty) property, (IOmlType) omlType);
      }
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromProperty#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateAssociationFromPropertyGeneral#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromPropertyGeneral (final IUmlProperty var_1_1, final IOmlType var_2_2) throws CGException {

    IUmlProperty property = null;
    boolean succ_3 = true;
    property = (IUmlProperty) var_1_1;
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Pattern match failed in operation call in operation CreateAssociationFromPropertyGeneral");
    {

      String ownerClassName = null;
      Boolean cond_7 = null;
      IUmlType obj_8 = null;
      obj_8 = (IUmlType) property.getType();
      cond_7 = new Boolean(obj_8 instanceof IUmlClassNameType);
      if (cond_7.booleanValue()) {

        IUmlClassNameType pcn = null;
        pcn = (IUmlClassNameType) property.getType();
        ownerClassName = pcn.getName();
      }
      else {

        IUmlType par_9 = null;
        par_9 = (IUmlType) property.getType();
        ownerClassName = GetSimpleTypeName((IUmlType) par_9);
      }
      HashSet propOtherEnd = new HashSet();
      UmlProperty enum_set_13 = null;
      UmlClassNameType arg_17 = null;
      String arg_26 = null;
      arg_26 = property.getOwnerClass();
      arg_17 = new UmlClassNameType(arg_26);
      enum_set_13 = new UmlProperty(new String(""), new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE), null, arg_17, null, null, new Boolean(false), null, null, ownerClassName, null);
      propOtherEnd = new HashSet();
      propOtherEnd.add(enum_set_13);
      UmlAssociation elem_28 = null;
      HashSet arg_30 = new HashSet();
      arg_30 = new HashSet();
      arg_30.add(property);
      elem_28 = new UmlAssociation(propOtherEnd, arg_30, null, GetNextId());
      associations.add(elem_28);
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromPropertyGeneral#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateAssociationFromPropertyProductType#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromPropertyProductType (final IUmlProperty property, final IOmlType omlType) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = property.getName();
    String name = null;
    name = tmpVal_4;
    UmlProperty prop = (UmlProperty) property;
    HashSet props = new HashSet();
    HashSet unArg_7 = new HashSet();
    HashSet res_s_8 = new HashSet();
    {

      HashSet e_set_15 = new HashSet();
      e_set_15 = new HashSet();
      e_set_15.add(omlType);
      IOmlType p = null;
      {
        for (Iterator enm_18 = e_set_15.iterator(); enm_18.hasNext(); ) {

          IOmlType elem_17 = (IOmlType) enm_18.next();
          p = (IOmlType) elem_17;
          if ((p instanceof IOmlProductType)) {
            res_s_8.add(CreateEndProperty((IOmlType) p, name));
          }
        }
      }
    }
    unArg_7 = res_s_8;
    HashSet rduset_19 = new HashSet();
    for (Iterator enm_21 = unArg_7.iterator(); enm_21.hasNext(); ) {

      HashSet e_20 = (HashSet) enm_21.next();
      rduset_19.addAll(e_20);
    }
    props = rduset_19;
    {

      prop.setName(new String(""));
      if (((new Long(props.size()).intValue()) > (new Long(1).intValue()))) {

        UmlAssociation elem_29 = null;
        HashSet arg_31 = new HashSet();
        arg_31 = new HashSet();
        arg_31.add(prop);
        elem_29 = new UmlAssociation(props, arg_31, null, GetNextId());
        associations.add(elem_29);
      }
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromPropertyProductType#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateAssociationFromPropertyUnionType#2|IUmlProperty|IOmlType KEEP=NO
  public void CreateAssociationFromPropertyUnionType (final IUmlProperty property, final IOmlType omlType) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = property.getName();
    String name = null;
    name = tmpVal_4;
    UmlProperty prop = (UmlProperty) property;
    HashSet props = new HashSet();
    HashSet unArg_7 = new HashSet();
    HashSet res_s_8 = new HashSet();
    {

      HashSet e_set_15 = new HashSet();
      e_set_15 = new HashSet();
      e_set_15.add(omlType);
      IOmlType p = null;
      {
        for (Iterator enm_18 = e_set_15.iterator(); enm_18.hasNext(); ) {

          IOmlType elem_17 = (IOmlType) enm_18.next();
          p = (IOmlType) elem_17;
          if ((p instanceof IOmlUnionType)) {
            res_s_8.add(CreateEndProperty((IOmlType) p, name));
          }
        }
      }
    }
    unArg_7 = res_s_8;
    HashSet rduset_19 = new HashSet();
    for (Iterator enm_21 = unArg_7.iterator(); enm_21.hasNext(); ) {

      HashSet e_20 = (HashSet) enm_21.next();
      rduset_19.addAll(e_20);
    }
    props = rduset_19;
    {

      prop.setName(new String(""));
      if (((new Long(props.size()).intValue()) > (new Long(1).intValue()))) {

        HashSet assoc = new HashSet();
        HashSet res_s_28 = new HashSet();
        {

          IUmlProperty p = null;
          {
            for (Iterator enm_39 = props.iterator(); enm_39.hasNext(); ) {

              IUmlProperty elem_38 = (IUmlProperty) enm_39.next();
              p = (IUmlProperty) elem_38;
              UmlAssociation res_s_29 = null;
              HashSet arg_30 = new HashSet();
              arg_30 = new HashSet();
              arg_30.add(p);
              HashSet arg_31 = new HashSet();
              arg_31 = new HashSet();
              arg_31.add(prop);
              res_s_29 = new UmlAssociation(arg_30, arg_31, null, GetNextId());
              res_s_28.add(res_s_29);
            }
          }
        }
        assoc = res_s_28;
        HashSet rhs_40 = new HashSet();
        rhs_40 = (HashSet) associations.clone();
        rhs_40.addAll(assoc);
        associations = (HashSet) UTIL.clone(rhs_40);
        UmlConstraint elem_44 = null;
        HashSet arg_45 = new HashSet();
        HashSet res_s_47 = new HashSet();
        {

          IUmlAssociation a = null;
          {
            for (Iterator enm_52 = assoc.iterator(); enm_52.hasNext(); ) {

              IUmlAssociation elem_51 = (IUmlAssociation) enm_52.next();
              a = (IUmlAssociation) elem_51;
              String res_s_48 = null;
              res_s_48 = a.getId();
              res_s_47.add(res_s_48);
            }
          }
        }
        arg_45 = res_s_47;
        elem_44 = new UmlConstraint(arg_45, new UmlLiteralString(new String("xor")));
        constraints.add(elem_44);
      }
    }
  }
// ***** VDMTOOLS END Name=CreateAssociationFromPropertyUnionType#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=CreateEndProperty#2|IOmlType|String KEEP=NO
  public HashSet CreateEndProperty (final IOmlType t, final String name) throws CGException {
    if ((t instanceof IOmlProductType)) {

      IOmlProductType typedType = (IOmlProductType) t;
      HashSet rexpr_35 = new HashSet();
      HashSet var1_36 = new HashSet();
      IOmlType par_37 = null;
      par_37 = (IOmlType) typedType.getLhsType();
      var1_36 = CreateEndProperty((IOmlType) par_37, name);
      HashSet var2_39 = new HashSet();
      IOmlType par_40 = null;
      par_40 = (IOmlType) typedType.getRhsType();
      var2_39 = CreateEndProperty((IOmlType) par_40, name);
      rexpr_35 = (HashSet) var1_36.clone();
      rexpr_35.addAll(var2_39);
      return rexpr_35;
    }
    else 
      if ((t instanceof IOmlUnionType)) {

        IOmlUnionType typedType = (IOmlUnionType) t;
        HashSet rexpr_26 = new HashSet();
        HashSet var1_27 = new HashSet();
        IOmlType par_28 = null;
        par_28 = (IOmlType) typedType.getLhsType();
        var1_27 = CreateEndProperty((IOmlType) par_28, name);
        HashSet var2_30 = new HashSet();
        IOmlType par_31 = null;
        par_31 = (IOmlType) typedType.getRhsType();
        var2_30 = CreateEndProperty((IOmlType) par_31, name);
        rexpr_26 = (HashSet) var1_27.clone();
        rexpr_26.addAll(var2_30);
        return rexpr_26;
      }
      else {

        HashSet rexpr_7 = new HashSet();
        UmlProperty enum_set_8 = null;
        IUmlMultiplicityElement arg_11 = null;
        arg_11 = (IUmlMultiplicityElement) Vdm2UmlType.extractMultiplicity((IOmlType) t);
        IUmlType arg_12 = null;
        arg_12 = (IUmlType) Vdm2UmlType.convertType(t);
        IUmlType arg_19 = null;
        arg_19 = (IUmlType) Vdm2UmlType.getQualifier(t);
        enum_set_8 = new UmlProperty(name, new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE), arg_11, arg_12, null, null, new Boolean(false), null, null, new String("Implementation prosponed"), arg_19);
        rexpr_7 = new HashSet();
        rexpr_7.add(enum_set_8);
        return rexpr_7;
      }
  }
// ***** VDMTOOLS END Name=CreateEndProperty#2|IOmlType|String


// ***** VDMTOOLS START Name=GetNextId KEEP=NO
  private String GetNextId () throws CGException {

    runningId = UTIL.NumberToLong(UTIL.clone(new Long(runningId.intValue() + new Long(1).intValue())));
    String rexpr_4 = null;
    rexpr_4 = UTIL.ConvertToString(Util.ToString(runningId));
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=GetNextId

}
;