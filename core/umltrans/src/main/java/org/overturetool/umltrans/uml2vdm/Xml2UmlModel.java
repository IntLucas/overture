


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-10-19 by the VDM++ to JAVA Code Generator
// (v8.2.1b - Wed 15-Jul-2009 14:09:22)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.uml2vdm;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.api.Util;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.umltrans.api.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class Xml2UmlModel extends XmlVisitor {


// ***** VDMTOOLS START Name=QualifierInfo KEEP=NO
@SuppressWarnings({"all","unchecked","unused"})
  public static class QualifierInfo implements Record {

@SuppressWarnings({"all","unchecked","unused"})
    public String classId;

    public String qualifier;


    public QualifierInfo () {}


    public QualifierInfo (String p1, String p2) {

      classId = p1;
      qualifier = p2;
    }


    public Object clone () {
      return new QualifierInfo(classId, qualifier);
    }


    public String toString () {
      return "mk_Xml2UmlModel`QualifierInfo(" + UTIL.toString(classId) + "," + UTIL.toString(qualifier) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierInfo)) 
        return false;
      else {

        QualifierInfo temp = (QualifierInfo) obj;
        return UTIL.equals(classId, temp.classId) && UTIL.equals(qualifier, temp.qualifier);
      }
    }


    public int hashCode () {
      return (classId == null ? 0 : classId.hashCode()) + (qualifier == null ? 0 : qualifier.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierInfo
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=result KEEP=NO
  public IUmlModel result = null;
// ***** VDMTOOLS END Name=result

// ***** VDMTOOLS START Name=primiticeTypes KEEP=NO
  private HashSet primiticeTypes = new HashSet();
// ***** VDMTOOLS END Name=primiticeTypes

// ***** VDMTOOLS START Name=classes KEEP=NO
  private HashSet classes = new HashSet();
// ***** VDMTOOLS END Name=classes

// ***** VDMTOOLS START Name=associations KEEP=NO
  private HashSet associations = new HashSet();
// ***** VDMTOOLS END Name=associations

// ***** VDMTOOLS START Name=constraints KEEP=NO
  private HashSet constraints = new HashSet();
// ***** VDMTOOLS END Name=constraints

// ***** VDMTOOLS START Name=classesTypeMap KEEP=NO
  private HashMap classesTypeMap = new HashMap();
// ***** VDMTOOLS END Name=classesTypeMap

// ***** VDMTOOLS START Name=collaborations KEEP=NO
  private HashSet collaborations = new HashSet();
// ***** VDMTOOLS END Name=collaborations

// ***** VDMTOOLS START Name=idToclassesMap KEEP=NO
  private HashMap idToclassesMap = new HashMap();
// ***** VDMTOOLS END Name=idToclassesMap

// ***** VDMTOOLS START Name=idToOperationMap KEEP=NO
  private HashMap idToOperationMap = new HashMap();
// ***** VDMTOOLS END Name=idToOperationMap

// ***** VDMTOOLS START Name=idToClallEventMap KEEP=NO
  private HashMap idToClallEventMap = new HashMap();
// ***** VDMTOOLS END Name=idToClallEventMap

// ***** VDMTOOLS START Name=lifeLineMap KEEP=NO
  private HashMap lifeLineMap = new HashMap();
// ***** VDMTOOLS END Name=lifeLineMap

// ***** VDMTOOLS START Name=mosMap KEEP=NO
  private HashMap mosMap = new HashMap();
// ***** VDMTOOLS END Name=mosMap

// ***** VDMTOOLS START Name=besMap KEEP=NO
  private HashMap besMap = new HashMap();
// ***** VDMTOOLS END Name=besMap

// ***** VDMTOOLS START Name=combiMap KEEP=NO
  private HashMap combiMap = new HashMap();
// ***** VDMTOOLS END Name=combiMap

// ***** VDMTOOLS START Name=associationToQualifier KEEP=NO
  private HashMap associationToQualifier = new HashMap();
// ***** VDMTOOLS END Name=associationToQualifier

// ***** VDMTOOLS START Name=log KEEP=NO
  private StatusLog log = null;
// ***** VDMTOOLS END Name=log


// ***** VDMTOOLS START Name=vdm_init_Xml2UmlModel KEEP=NO
  private void vdm_init_Xml2UmlModel () throws CGException {
    try {

      result = null;
      primiticeTypes = new HashSet();
      primiticeTypes.add(new String("char"));
      primiticeTypes.add(new String("int"));
      primiticeTypes.add(new String("bool"));
      primiticeTypes.add(new String("String"));
      primiticeTypes.add(new String("unlimitedNatural"));
      classes = new HashSet();
      associations = new HashSet();
      constraints = new HashSet();
      classesTypeMap = new HashMap();
      collaborations = new HashSet();
      idToclassesMap = new HashMap();
      idToOperationMap = new HashMap();
      idToClallEventMap = new HashMap();
      lifeLineMap = new HashMap();
      mosMap = new HashMap();
      besMap = new HashMap();
      combiMap = new HashMap();
      associationToQualifier = new HashMap();
      log = (StatusLog) new StatusLog();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Xml2UmlModel


// ***** VDMTOOLS START Name=Xml2UmlModel KEEP=NO
  public Xml2UmlModel () throws CGException {
    vdm_init_Xml2UmlModel();
  }
// ***** VDMTOOLS END Name=Xml2UmlModel


// ***** VDMTOOLS START Name=Xml2UmlModel#1|StatusLog KEEP=NO
  public Xml2UmlModel (final StatusLog l) throws CGException {

    vdm_init_Xml2UmlModel();
    log = (StatusLog) UTIL.clone(l);
  }
// ***** VDMTOOLS END Name=Xml2UmlModel#1|StatusLog


// ***** VDMTOOLS START Name=VisitXmlDocument#1|XmlDocument KEEP=NO
  public void VisitXmlDocument (final XmlDocument doc) throws CGException {

    XmlEntity root = null;
    Vector unArg_2 = null;
    XmlEntityList tmpRec_3 = null;
    tmpRec_3 = doc.entities;
    unArg_2 = tmpRec_3.entities;
    root = (XmlEntity) unArg_2.get(0);
    Vector firstPackageAndRoot = null;
    Vector var1_5 = null;
    XmlEntityList tmpRec_6 = null;
    tmpRec_6 = root.entities;
    var1_5 = tmpRec_6.entities;
    Vector var2_8 = null;
    var2_8 = new Vector();
    var2_8.add(root);
    firstPackageAndRoot = (Vector) var1_5.clone();
    firstPackageAndRoot.addAll(var2_8);
    XmlEntity model = null;
    Vector unArg_10 = null;
    {

      Vector res_l_11 = new Vector();
      HashSet resBind_s_13 = new HashSet();
      HashSet riseq_17 = new HashSet();
      int max_18 = firstPackageAndRoot.size();
      for (int i_19 = 1; i_19 <= max_18; i_19++) 
        riseq_17.add(new Long(i_19));
      resBind_s_13 = riseq_17;
      Vector bind_l_12 = null;
      bind_l_12 = UTIL.Sort(resBind_s_13);
      Long i = null;
      for (Iterator enm_30 = bind_l_12.iterator(); enm_30.hasNext(); ) {

        Long e_15 = UTIL.NumberToLong(enm_30.next());
        i = e_15;
        Boolean pred_23 = null;
        String var1_24 = null;
        XmlEntity tmpRec_25 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
          tmpRec_25 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_24 = tmpRec_25.name;
        pred_23 = new Boolean(UTIL.equals(var1_24, new String("uml:Model")));
        if (pred_23.booleanValue()) {

          XmlEntity reselem_20 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
            reselem_20 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_11.add(reselem_20);
        }
      }
      unArg_10 = res_l_11;
    }
    model = (XmlEntity) unArg_10.get(0);
    XmlEntity extention = null;
    Vector unArg_31 = null;
    {

      Vector res_l_32 = new Vector();
      HashSet resBind_s_34 = new HashSet();
      HashSet riseq_38 = new HashSet();
      int max_39 = firstPackageAndRoot.size();
      for (int i_40 = 1; i_40 <= max_39; i_40++) 
        riseq_38.add(new Long(i_40));
      resBind_s_34 = riseq_38;
      Vector bind_l_33 = null;
      bind_l_33 = UTIL.Sort(resBind_s_34);
      Long i = null;
      for (Iterator enm_58 = bind_l_33.iterator(); enm_58.hasNext(); ) {

        Long e_36 = UTIL.NumberToLong(enm_58.next());
        i = e_36;
        Boolean pred_44 = null;
        Boolean var1_45 = null;
        XmlEntity par_46 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
          par_46 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_45 = hasAttributeValue((XmlEntity) par_46, new String("extender"), new String("Enterprise Architect"));
        {
          if ((pred_44 = var1_45).booleanValue()) {

            Boolean var2_51 = null;
            XmlEntity par_52 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
              par_52 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_51 = hasAttributeValue((XmlEntity) par_52, new String("extenderID"), new String("6.5"));
            pred_44 = var2_51;
          }
        }
        if (pred_44.booleanValue()) {

          XmlEntity reselem_41 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
            reselem_41 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_32.add(reselem_41);
        }
      }
      unArg_31 = res_l_32;
    }
    extention = (XmlEntity) unArg_31.get(0);
    XmlEntity vdm_package = null;
    Vector unArg_59 = null;
    {

      Vector res_l_60 = new Vector();
      HashSet resBind_s_62 = new HashSet();
      Vector unArg_65 = null;
      XmlEntityList tmpRec_66 = null;
      tmpRec_66 = model.entities;
      unArg_65 = tmpRec_66.entities;
      HashSet riseq_68 = new HashSet();
      int max_69 = unArg_65.size();
      for (int i_70 = 1; i_70 <= max_69; i_70++) 
        riseq_68.add(new Long(i_70));
      resBind_s_62 = riseq_68;
      Vector bind_l_61 = null;
      bind_l_61 = UTIL.Sort(resBind_s_62);
      Long i = null;
      for (Iterator enm_84 = bind_l_61.iterator(); enm_84.hasNext(); ) {

        Long e_64 = UTIL.NumberToLong(enm_84.next());
        i = e_64;
        Boolean pred_76 = null;
        XmlEntity par_77 = null;
        Vector tmp_l_78 = null;
        XmlEntityList tmpRec_79 = null;
        tmpRec_79 = model.entities;
        tmp_l_78 = tmpRec_79.entities;
        if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_78.size())) 
          par_77 = (XmlEntity) tmp_l_78.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_76 = isAttributeType((XmlEntity) par_77, new String("uml:Package"));
        if (pred_76.booleanValue()) {

          XmlEntity reselem_71 = null;
          Vector tmp_l_72 = null;
          XmlEntityList tmpRec_73 = null;
          tmpRec_73 = model.entities;
          tmp_l_72 = tmpRec_73.entities;
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_72.size())) 
            reselem_71 = (XmlEntity) tmp_l_72.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_60.add(reselem_71);
        }
      }
      unArg_59 = res_l_60;
    }
    vdm_package = (XmlEntity) unArg_59.get(0);
    {

      Vector pes = null;
      XmlEntityList tmpRec_87 = null;
      tmpRec_87 = vdm_package.entities;
      pes = tmpRec_87.entities;
      {

        HashMap rhs_89 = new HashMap();
        HashMap modmap_90 = new HashMap();
        HashMap res_m_93 = new HashMap();
        {

          HashSet e_set_112 = new HashSet();
          HashSet riseq_114 = new HashSet();
          int max_115 = pes.size();
          for (int i_116 = 1; i_116 <= max_115; i_116++) 
            riseq_114.add(new Long(i_116));
          e_set_112 = riseq_114;
          Long i = null;
          {
            for (Iterator enm_118 = e_set_112.iterator(); enm_118.hasNext(); ) {

              Long elem_117 = UTIL.NumberToLong(enm_118.next());
              i = elem_117;
              Boolean pred_106 = null;
              XmlEntity par_107 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_107 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_106 = isAttributeType((XmlEntity) par_107, new String("uml:Class"));
              if (pred_106.booleanValue()) {

                String md_94 = null;
                XmlAttribute tmpRec_95 = null;
                XmlEntity par_96 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_96 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                tmpRec_95 = (XmlAttribute) getAttribute((XmlEntity) par_96, new String("xmi:id"));
                md_94 = tmpRec_95.val;
                String mr_100 = null;
                XmlAttribute tmpRec_101 = null;
                XmlEntity par_102 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_102 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                tmpRec_101 = (XmlAttribute) getAttribute((XmlEntity) par_102, new String("name"));
                mr_100 = tmpRec_101.val;
                res_m_93.put(md_94, mr_100);
              }
            }
          }
        }
        modmap_90 = res_m_93;
        rhs_89 = new HashMap(classesTypeMap);
        rhs_89.putAll(modmap_90);
        classesTypeMap = (HashMap) UTIL.clone(rhs_89);
        HashSet rhs_119 = new HashSet();
        HashSet var2_121 = new HashSet();
        HashSet res_s_122 = new HashSet();
        {

          HashSet e_set_142 = new HashSet();
          HashSet riseq_144 = new HashSet();
          int max_145 = pes.size();
          for (int i_146 = 1; i_146 <= max_145; i_146++) 
            riseq_144.add(new Long(i_146));
          e_set_142 = riseq_144;
          Long i = null;
          {
            for (Iterator enm_148 = e_set_142.iterator(); enm_148.hasNext(); ) {

              Long elem_147 = UTIL.NumberToLong(enm_148.next());
              i = elem_147;
              Boolean pred_127 = null;
              Boolean var1_128 = null;
              XmlEntity par_129 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_129 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var1_128 = isAttributeType((XmlEntity) par_129, new String("uml:Class"));
              {
                if ((pred_127 = var1_128).booleanValue()) {

                  Boolean var2_133 = null;
                  String var1_134 = null;
                  XmlAttribute tmpRec_135 = null;
                  XmlEntity par_136 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                    par_136 = (XmlEntity) pes.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  tmpRec_135 = (XmlAttribute) getAttribute((XmlEntity) par_136, new String("name"));
                  var1_134 = tmpRec_135.val;
                  var2_133 = new Boolean(!primiticeTypes.contains(var1_134));
                  pred_127 = var2_133;
                }
              }
              if (pred_127.booleanValue()) {

                IUmlClass res_s_123 = null;
                XmlEntity par_124 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_124 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_123 = (IUmlClass) exstractClass((XmlEntity) par_124);
                res_s_122.add(res_s_123);
              }
            }
          }
        }
        var2_121 = res_s_122;
        rhs_119 = (HashSet) classes.clone();
        rhs_119.addAll(var2_121);
        classes = (HashSet) UTIL.clone(rhs_119);
        {

          HashSet connectors = new HashSet();
          HashSet unArg_151 = new HashSet();
          HashSet res_s_152 = new HashSet();
          {

            Vector e_set_164 = null;
            XmlEntityList tmpRec_165 = null;
            tmpRec_165 = extention.entities;
            e_set_164 = tmpRec_165.entities;
            XmlEntity e = null;
            {
              for (Iterator enm_168 = e_set_164.iterator(); enm_168.hasNext(); ) {

                XmlEntity elem_167 = (XmlEntity) enm_168.next();
                e = (XmlEntity) elem_167;
                Boolean pred_159 = null;
                String var1_160 = null;
                var1_160 = e.name;
                pred_159 = new Boolean(UTIL.equals(var1_160, new String("connectors")));
                if (pred_159.booleanValue()) {

                  HashSet res_s_153 = new HashSet();
                  Vector unArg_154 = null;
                  XmlEntityList tmpRec_155 = null;
                  tmpRec_155 = e.entities;
                  unArg_154 = tmpRec_155.entities;
                  HashSet set_157 = new HashSet();
                  Enumeration enm_158 = unArg_154.elements();
                  while ( enm_158.hasMoreElements())
                    set_157.add(enm_158.nextElement());
                  res_s_153 = set_157;
                  res_s_152.add(res_s_153);
                }
              }
            }
          }
          unArg_151 = res_s_152;
          HashSet rduset_169 = new HashSet();
          for (Iterator enm_171 = unArg_151.iterator(); enm_171.hasNext(); ) {

            HashSet e_170 = (HashSet) enm_171.next();
            rduset_169.addAll(e_170);
          }
          connectors = rduset_169;
          {

            XmlEntity v = null;
            for (Iterator enm_178 = connectors.iterator(); enm_178.hasNext(); ) {

              XmlEntity elem_173 = (XmlEntity) enm_178.next();
              v = (XmlEntity) elem_173;
              build_uAssociationQualifier((XmlEntity) v);
            }
          }
        }
        HashSet rhs_179 = new HashSet();
        HashSet var2_181 = new HashSet();
        HashSet res_s_182 = new HashSet();
        {

          HashSet e_set_199 = new HashSet();
          HashSet riseq_201 = new HashSet();
          int max_202 = pes.size();
          for (int i_203 = 1; i_203 <= max_202; i_203++) 
            riseq_201.add(new Long(i_203));
          e_set_199 = riseq_201;
          Long i = null;
          {
            for (Iterator enm_205 = e_set_199.iterator(); enm_205.hasNext(); ) {

              Long elem_204 = UTIL.NumberToLong(enm_205.next());
              i = elem_204;
              Boolean pred_187 = null;
              Boolean var1_188 = null;
              XmlEntity par_189 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_189 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var1_188 = isAttributeType((XmlEntity) par_189, new String("uml:Association"));
              {
                if (!(pred_187 = var1_188).booleanValue()) {

                  Boolean var2_193 = null;
                  XmlEntity par_194 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                    par_194 = (XmlEntity) pes.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  var2_193 = isAttributeType((XmlEntity) par_194, new String("uml:Connector"));
                  pred_187 = var2_193;
                }
              }
              if (pred_187.booleanValue()) {

                IUmlAssociation res_s_183 = null;
                XmlEntity par_184 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_184 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_183 = (IUmlAssociation) build_uAssociation((XmlEntity) par_184);
                res_s_182.add(res_s_183);
              }
            }
          }
        }
        var2_181 = res_s_182;
        rhs_179 = (HashSet) associations.clone();
        rhs_179.addAll(var2_181);
        associations = (HashSet) UTIL.clone(rhs_179);
        HashSet rhs_206 = new HashSet();
        HashSet var2_208 = new HashSet();
        HashSet res_s_209 = new HashSet();
        {

          HashSet e_set_220 = new HashSet();
          HashSet riseq_222 = new HashSet();
          int max_223 = pes.size();
          for (int i_224 = 1; i_224 <= max_223; i_224++) 
            riseq_222.add(new Long(i_224));
          e_set_220 = riseq_222;
          Long i = null;
          {
            for (Iterator enm_226 = e_set_220.iterator(); enm_226.hasNext(); ) {

              Long elem_225 = UTIL.NumberToLong(enm_226.next());
              i = elem_225;
              Boolean pred_214 = null;
              XmlEntity par_215 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_215 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_214 = isAttributeType((XmlEntity) par_215, new String("uml:Constraint"));
              if (pred_214.booleanValue()) {

                IUmlConstraint res_s_210 = null;
                XmlEntity par_211 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_211 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_210 = (IUmlConstraint) build_uConstraint((XmlEntity) par_211);
                res_s_209.add(res_s_210);
              }
            }
          }
        }
        var2_208 = res_s_209;
        rhs_206 = (HashSet) constraints.clone();
        rhs_206.addAll(var2_208);
        constraints = (HashSet) UTIL.clone(rhs_206);
        HashMap rhs_227 = new HashMap();
        HashSet par_228 = new HashSet();
        HashSet res_s_229 = new HashSet();
        {

          HashSet e_set_239 = new HashSet();
          HashSet riseq_241 = new HashSet();
          int max_242 = pes.size();
          for (int i_243 = 1; i_243 <= max_242; i_243++) 
            riseq_241.add(new Long(i_243));
          e_set_239 = riseq_241;
          Long i = null;
          {
            for (Iterator enm_245 = e_set_239.iterator(); enm_245.hasNext(); ) {

              Long elem_244 = UTIL.NumberToLong(enm_245.next());
              i = elem_244;
              Boolean pred_233 = null;
              XmlEntity par_234 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_234 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_233 = isAttributeType((XmlEntity) par_234, new String("uml:CallEvent"));
              if (pred_233.booleanValue()) {

                XmlEntity res_s_230 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  res_s_230 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_229.add(res_s_230);
              }
            }
          }
        }
        par_228 = res_s_229;
        rhs_227 = buildCallEventMap(par_228);
        idToClallEventMap = (HashMap) UTIL.clone(rhs_227);
        HashSet rhs_246 = new HashSet();
        HashSet var2_248 = new HashSet();
        HashSet res_s_249 = new HashSet();
        {

          HashSet e_set_260 = new HashSet();
          HashSet riseq_262 = new HashSet();
          int max_263 = pes.size();
          for (int i_264 = 1; i_264 <= max_263; i_264++) 
            riseq_262.add(new Long(i_264));
          e_set_260 = riseq_262;
          Long i = null;
          {
            for (Iterator enm_266 = e_set_260.iterator(); enm_266.hasNext(); ) {

              Long elem_265 = UTIL.NumberToLong(enm_266.next());
              i = elem_265;
              Boolean pred_254 = null;
              XmlEntity par_255 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_255 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_254 = isAttributeType((XmlEntity) par_255, new String("uml:Collaboration"));
              if (pred_254.booleanValue()) {

                IUmlCollaboration res_s_250 = null;
                XmlEntity par_251 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_251 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_250 = (IUmlCollaboration) build_uCollobration((XmlEntity) par_251);
                res_s_249.add(res_s_250);
              }
            }
          }
        }
        var2_248 = res_s_249;
        rhs_246 = (HashSet) collaborations.clone();
        rhs_246.addAll(var2_248);
        collaborations = (HashSet) UTIL.clone(rhs_246);
      }
    }
    UmlModel rhs_267 = null;
    String arg_268 = null;
    arg_268 = ((XmlAttribute) getAttribute((XmlEntity) vdm_package, new String("name"))).val;
    HashSet arg_269 = new HashSet();
    HashSet var1_273 = new HashSet();
    HashSet var1_274 = new HashSet();
    var1_274 = (HashSet) classes.clone();
    var1_274.addAll(associations);
    var1_273 = (HashSet) var1_274.clone();
    var1_273.addAll(constraints);
    arg_269 = (HashSet) var1_273.clone();
    arg_269.addAll(collaborations);
    rhs_267 = new UmlModel(arg_268, arg_269);
    result = (IUmlModel) UTIL.clone(rhs_267);
  }
// ***** VDMTOOLS END Name=VisitXmlDocument#1|XmlDocument


// ***** VDMTOOLS START Name=exstractClass#1|XmlEntity KEEP=NO
  private IUmlClass exstractClass (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_3;
    HashSet dBlocks = build_udefBlock((XmlEntity) e, name);
    Boolean vdm_abstract = null;
    if (hasAttribute((XmlEntity) e, new String("isAbstract")).booleanValue()) {

      String par_15 = null;
      par_15 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("isAbstract"))).val;
      vdm_abstract = (Boolean) StdLib.StringToBool(par_15);
    }
    else 
      vdm_abstract = new Boolean(false);
    Vector supers = null;
    {

      Vector eg = null;
      XmlEntityList tmpRec_22 = null;
      tmpRec_22 = e.entities;
      eg = tmpRec_22.entities;
      {

        Vector res_l_24 = new Vector();
        HashSet resBind_s_26 = new HashSet();
        HashSet riseq_30 = new HashSet();
        int max_31 = eg.size();
        for (int i_32 = 1; i_32 <= max_31; i_32++) 
          riseq_30.add(new Long(i_32));
        resBind_s_26 = riseq_30;
        Vector bind_l_25 = null;
        bind_l_25 = UTIL.Sort(resBind_s_26);
        Long i = null;
        for (Iterator enm_43 = bind_l_25.iterator(); enm_43.hasNext(); ) {

          Long e_28 = UTIL.NumberToLong(enm_43.next());
          i = e_28;
          Boolean pred_37 = null;
          XmlEntity par_38 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= eg.size())) 
            par_38 = (XmlEntity) eg.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_37 = isAttributeType((XmlEntity) par_38, new String("uml:Generalization"));
          if (pred_37.booleanValue()) {

            IUmlClassNameType reselem_33 = null;
            XmlEntity par_34 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= eg.size())) 
              par_34 = (XmlEntity) eg.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_33 = (IUmlClassNameType) exstractGeneralization((XmlEntity) par_34);
            res_l_24.add(reselem_33);
          }
        }
        supers = res_l_24;
      }
    }
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
    Boolean isStatic = new Boolean(false);
    Boolean active = null;
    if (hasAttribute((XmlEntity) e, new String("isActive")).booleanValue()) {

      XmlAttribute a = (XmlAttribute) (XmlAttribute) getAttribute((XmlEntity) e, new String("isActive"));
      if ((!UTIL.equals(a, null))) {

        String par_60 = null;
        par_60 = a.val;
        active = (Boolean) StdLib.StringToBool(par_60);
      }
      else 
        active = new Boolean(false);
    }
    else 
      active = new Boolean(false);
    IUmlTemplateSignature template = null;
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    IUmlClass cls = (IUmlClass) new UmlClass(name, dBlocks, vdm_abstract, supers, visibility, isStatic, active, template);
    {

      idToclassesMap.put(id, cls);
      log.addNewClassInfo(name, id);
      return (IUmlClass) cls;
    }
  }
// ***** VDMTOOLS END Name=exstractClass#1|XmlEntity


// ***** VDMTOOLS START Name=exstractGeneralization#1|XmlEntity KEEP=NO
  private IUmlClassNameType exstractGeneralization (final XmlEntity e) throws CGException {

    String vdm_super = null;
    vdm_super = ((XmlAttribute) getAttribute((XmlEntity) e, new String("general"))).val;
    return (IUmlClassNameType) new UmlClassNameType(UTIL.ConvertToString(classesTypeMap.get(vdm_super)));
  }
// ***** VDMTOOLS END Name=exstractGeneralization#1|XmlEntity


// ***** VDMTOOLS START Name=build_udefBlock#2|XmlEntity|String KEEP=NO
  private HashSet build_udefBlock (final XmlEntity e, final String name) throws CGException {

    Vector eList = null;
    XmlEntityList tmpRec_5 = null;
    tmpRec_5 = e.entities;
    eList = tmpRec_5.entities;
    HashSet props = new HashSet();
    HashSet res_s_8 = new HashSet();
    {

      HashSet e_set_21 = new HashSet();
      HashSet riseq_23 = new HashSet();
      int max_24 = eList.size();
      for (int i_25 = 1; i_25 <= max_24; i_25++) 
        riseq_23.add(new Long(i_25));
      e_set_21 = riseq_23;
      Long i = null;
      {
        for (Iterator enm_27 = e_set_21.iterator(); enm_27.hasNext(); ) {

          Long elem_26 = UTIL.NumberToLong(enm_27.next());
          i = elem_26;
          Boolean pred_15 = null;
          XmlEntity par_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= eList.size())) 
            par_16 = (XmlEntity) eList.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_15 = isAttributeType((XmlEntity) par_16, new String("uml:Property"));
          if (pred_15.booleanValue()) {

            IUmlProperty res_s_9 = null;
            XmlEntity par_10 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= eList.size())) 
              par_10 = (XmlEntity) eList.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_s_9 = (IUmlProperty) build_uProperty((XmlEntity) par_10, name, null);
            res_s_8.add(res_s_9);
          }
        }
      }
    }
    props = res_s_8;
    HashSet ops = new HashSet();
    HashSet res_s_29 = new HashSet();
    {

      HashSet e1_set_42 = new HashSet(eList);
      XmlEntity p = null;
      {
        for (Iterator enm_44 = e1_set_42.iterator(); enm_44.hasNext(); ) {

          XmlEntity elem_43 = (XmlEntity) enm_44.next();
          p = (XmlEntity) elem_43;
          Boolean pred_32 = null;
          {
            if (!(pred_32 = isAttributeType((XmlEntity) p, new String("uml:Operation"))).booleanValue()) {

              Boolean var2_36 = null;
              String var1_37 = null;
              var1_37 = p.name;
              var2_36 = new Boolean(UTIL.equals(var1_37, new String("ownedOperation")));
              pred_32 = var2_36;
            }
          }
          if (pred_32.booleanValue()) {
            res_s_29.add((IUmlOperation) build_uOperation((XmlEntity) p));
          }
        }
      }
    }
    ops = res_s_29;
    HashSet rexpr_45 = new HashSet();
    HashSet var1_46 = new HashSet();
    var1_46 = new HashSet();
    var1_46.add(new UmlOwnedProperties(props));
    HashSet var2_49 = new HashSet();
    var2_49 = new HashSet();
    var2_49.add(new UmlOwnedOperations(ops));
    rexpr_45 = (HashSet) var1_46.clone();
    rexpr_45.addAll(var2_49);
    return rexpr_45;
  }
// ***** VDMTOOLS END Name=build_udefBlock#2|XmlEntity|String


// ***** VDMTOOLS START Name=build_uProperty#3|XmlEntity|String|String KEEP=NO
  private IUmlProperty build_uProperty (final XmlEntity e, final String ownerClass, final String associationId) throws CGException {

    String tmpVal_5 = null;
    if (hasAttribute((XmlEntity) e, new String("name")).booleanValue()) 
      tmpVal_5 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    else 
      tmpVal_5 = new String("");
    String name = null;
    name = tmpVal_5;
    IUmlVisibilityKind visibility = null;
    if (hasAttribute((XmlEntity) e, new String("visibility")).booleanValue()) 
      visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) GetVisibility((XmlAttribute) (XmlAttribute) getAttribute((XmlEntity) e, new String("visibility")));
    else 
      visibility = (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
    IUmlMultiplicityElement multiplicity = (IUmlMultiplicityElement) (IUmlMultiplicityElement) getMultiplicity((XmlEntity) e);
    String typeId = getTypeId((XmlEntity) e);
    IUmlType type = (IUmlType) (IUmlType) findType(typeId);
    Boolean isReadOnly = null;
    if (hasAttribute((XmlEntity) e, new String("isReadOnly")).booleanValue()) {

      String par_33 = null;
      par_33 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("isReadOnly"))).val;
      isReadOnly = (Boolean) StdLib.StringToBool(par_33);
    }
    else 
      isReadOnly = new Boolean(false);
    IUmlValueSpecification vdm_default = null;
    {

      HashSet dValue = new HashSet();
      HashSet res_s_40 = new HashSet();
      {

        Vector e_set_47 = null;
        XmlEntityList tmpRec_48 = null;
        tmpRec_48 = e.entities;
        e_set_47 = tmpRec_48.entities;
        XmlEntity el = null;
        {
          for (Iterator enm_51 = e_set_47.iterator(); enm_51.hasNext(); ) {

            XmlEntity elem_50 = (XmlEntity) enm_51.next();
            el = (XmlEntity) elem_50;
            Boolean pred_42 = null;
            String var1_43 = null;
            var1_43 = el.name;
            pred_42 = new Boolean(UTIL.equals(var1_43, new String("defaultValue")));
            if (pred_42.booleanValue()) {
              res_s_40.add(el);
            }
          }
        }
      }
      dValue = res_s_40;
      if (((new Long(dValue.size()).intValue()) > (new Long(0).intValue()))) {

        XmlEntity par_57 = null;
        {

          HashSet tmpSet_58 = new HashSet();
          tmpSet_58 = dValue;
          XmlEntity d = null;
          boolean succ_60 = false;
          for (Iterator enm_62 = tmpSet_58.iterator(); enm_62.hasNext() && !succ_60; ) {

            XmlEntity tmpElem_61 = (XmlEntity) enm_62.next();
            succ_60 = true;
            d = (XmlEntity) tmpElem_61;
          }
          if (!succ_60) 
            UTIL.RunTime("Run-Time Error:The binding environment was empty");
          par_57 = (XmlEntity) d;
        }
        vdm_default = (IUmlValueSpecification) getDefaultValue((XmlEntity) par_57);
      }
      else 
        vdm_default = null;
    }
    Boolean isComposite = new Boolean(false);
    Boolean isDerived = new Boolean(false);
    Boolean isStatic = new Boolean(false);
    IUmlType qualifier = null;
    Boolean cond_68 = null;
    Boolean var1_69 = null;
    {
      if ((var1_69 = new Boolean(!UTIL.equals(associationId, null))).booleanValue()) {

        Boolean var2_73 = null;
        var2_73 = new Boolean(associationToQualifier.containsKey(associationId));
        var1_69 = var2_73;
      }
    }
    {
      if ((cond_68 = var1_69).booleanValue()) {

        Boolean var2_76 = null;
        String var1_77 = null;
        var1_77 = ((QualifierInfo) associationToQualifier.get(associationId)).classId;
        var2_76 = new Boolean(UTIL.equals(var1_77, typeId));
        cond_68 = var2_76;
      }
    }
    if (cond_68.booleanValue()) {

      QualifierInfo qInfo = (QualifierInfo) associationToQualifier.get(associationId);
      String par_86 = null;
      par_86 = (qInfo).qualifier;
      qualifier = (IUmlType) findType(par_86);
    }
    else 
      qualifier = null;
    return (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, ownerClass, qualifier);
  }
// ***** VDMTOOLS END Name=build_uProperty#3|XmlEntity|String|String


// ***** VDMTOOLS START Name=getDefaultValue#1|XmlEntity KEEP=NO
  private IUmlValueSpecification getDefaultValue (final XmlEntity e) throws CGException {

    String val = null;
    val = ((XmlAttribute) getAttribute((XmlEntity) e, new String("value"))).val;
    String typ = null;
    typ = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:type"))).val;
    Object rexpr_11 = null;
    boolean succ_12 = true;
    {

      succ_12 = true;
      if (!UTIL.equals(typ, new String("uml:LiteralString"))) 
        succ_12 = false;
      if (succ_12) 
        rexpr_11 = new UmlLiteralString(val);
    }
    if (!succ_12) {

      succ_12 = true;
      if (!UTIL.equals(typ, new String("uml:LiteralInteger"))) 
        succ_12 = false;
      if (succ_12) {

        Long arg_18 = null;
        arg_18 = UTIL.NumberToLong(StdLib.StringToInt(val));
        rexpr_11 = new UmlLiteralInteger(arg_18);
      }
    }
    if (!succ_12) 
      rexpr_11 = null;
    return (IUmlValueSpecification) rexpr_11;
  }
// ***** VDMTOOLS END Name=getDefaultValue#1|XmlEntity


// ***** VDMTOOLS START Name=getMultiplicity#1|XmlEntity KEEP=NO
  private IUmlMultiplicityElement getMultiplicity (final XmlEntity e) throws CGException {

    Vector eList = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    eList = tmpRec_4.entities;
    HashSet lowerSet = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e1_set_22 = new HashSet(eList);
      XmlEntity el = null;
      {
        for (Iterator enm_24 = e1_set_22.iterator(); enm_24.hasNext(); ) {

          XmlEntity elem_23 = (XmlEntity) enm_24.next();
          el = (XmlEntity) elem_23;
          Boolean pred_12 = null;
          Boolean var1_13 = null;
          String var1_14 = null;
          var1_14 = el.name;
          var1_13 = new Boolean(UTIL.equals(var1_14, new String("lowerValue")));
          {
            if ((pred_12 = var1_13).booleanValue()) 
              pred_12 = hasAttribute((XmlEntity) el, new String("value"));
          }
          if (pred_12.booleanValue()) {

            String res_s_8 = null;
            res_s_8 = ((XmlAttribute) getAttribute((XmlEntity) el, new String("value"))).val;
            res_s_7.add(res_s_8);
          }
        }
      }
    }
    lowerSet = res_s_7;
    HashSet upperSet = new HashSet();
    HashSet res_s_26 = new HashSet();
    {

      HashSet e1_set_41 = new HashSet(eList);
      XmlEntity el = null;
      {
        for (Iterator enm_43 = e1_set_41.iterator(); enm_43.hasNext(); ) {

          XmlEntity elem_42 = (XmlEntity) enm_43.next();
          el = (XmlEntity) elem_42;
          Boolean pred_31 = null;
          Boolean var1_32 = null;
          String var1_33 = null;
          var1_33 = el.name;
          var1_32 = new Boolean(UTIL.equals(var1_33, new String("upperValue")));
          {
            if ((pred_31 = var1_32).booleanValue()) 
              pred_31 = hasAttribute((XmlEntity) el, new String("value"));
          }
          if (pred_31.booleanValue()) {

            String res_s_27 = null;
            res_s_27 = ((XmlAttribute) getAttribute((XmlEntity) el, new String("value"))).val;
            res_s_26.add(res_s_27);
          }
        }
      }
    }
    upperSet = res_s_26;
    Boolean cond_44 = null;
    {
      if ((cond_44 = new Boolean(new Long(upperSet.size()).intValue() == new Long(0).intValue())).booleanValue()) 
        cond_44 = new Boolean(new Long(lowerSet.size()).intValue() == new Long(0).intValue());
    }
    if (cond_44.booleanValue()) 
      return null;
    else {

      Long lower = null;
      if ((new Long(lowerSet.size()).intValue() == new Long(0).intValue())) 
        lower = new Long(0);
      else {

        HashSet tmpSet_60 = new HashSet();
        tmpSet_60 = lowerSet;
        String p = null;
        boolean succ_62 = false;
        for (Iterator enm_64 = tmpSet_60.iterator(); enm_64.hasNext() && !succ_62; ) {

          String tmpElem_63 = UTIL.ConvertToString(enm_64.next());
          succ_62 = true;
          p = tmpElem_63;
        }
        if (!succ_62) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        lower = UTIL.NumberToLong(StdLib.StringToInt(p));
      }
      Long upVal = null;
      {

        HashSet tmpSet_67 = new HashSet();
        tmpSet_67 = upperSet;
        String p = null;
        boolean succ_69 = false;
        for (Iterator enm_71 = tmpSet_67.iterator(); enm_71.hasNext() && !succ_69; ) {

          String tmpElem_70 = UTIL.ConvertToString(enm_71.next());
          succ_69 = true;
          p = tmpElem_70;
        }
        if (!succ_69) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        upVal = UTIL.NumberToLong(StdLib.StringToInt(p));
      }
      Long upper = null;
      Boolean cond_75 = null;
      {
        if (!(cond_75 = new Boolean(new Long(upperSet.size()).intValue() == new Long(0).intValue())).booleanValue()) 
          cond_75 = new Boolean((upVal.intValue()) < (new Long(0).intValue()));
      }
      if (cond_75.booleanValue()) 
        upper = null;
      else 
        upper = upVal;
      return (IUmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), lower, upper);
    }
  }
// ***** VDMTOOLS END Name=getMultiplicity#1|XmlEntity


// ***** VDMTOOLS START Name=build_uOperation#1|XmlEntity KEEP=NO
  private IUmlOperation build_uOperation (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_3;
    IUmlVisibilityKind visibility = (IUmlVisibilityKind) (IUmlVisibilityKind) GetVisibility((XmlAttribute) (XmlAttribute) getAttribute((XmlEntity) e, new String("visibility")));
    IUmlMultiplicityElement multiplicity = (IUmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(0), new Long(0));
    Boolean isQuery = null;
    if (hasAttribute((XmlEntity) e, new String("isQuery")).booleanValue()) {

      String par_21 = null;
      par_21 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("isQuery"))).val;
      isQuery = (Boolean) StdLib.StringToBool(par_21);
    }
    else 
      isQuery = new Boolean(false);
    IUmlType type = null;
    Boolean isStatic = null;
    if (hasAttribute((XmlEntity) e, new String("isStatic")).booleanValue()) {

      String par_31 = null;
      par_31 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("isStatic"))).val;
      isStatic = (Boolean) StdLib.StringToBool(par_31);
    }
    else 
      isStatic = new Boolean(false);
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    Vector params = CreateOperstionParameters((XmlEntity) e);
    UmlParameters parameters = null;
    if ((UTIL.equals(params, null))) 
      parameters = null;
    else 
      parameters = (UmlParameters) new UmlParameters(params);
    IUmlOperation operation = (IUmlOperation) new UmlOperation(name, visibility, multiplicity, isQuery, type, isStatic, parameters);
    {

      idToOperationMap.put(id, operation);
      return (IUmlOperation) operation;
    }
  }
// ***** VDMTOOLS END Name=build_uOperation#1|XmlEntity


// ***** VDMTOOLS START Name=CreateOperstionParameters#1|XmlEntity KEEP=NO
  protected Vector CreateOperstionParameters (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    tmpVal_3 = tmpRec_4.entities;
    Vector elist = null;
    elist = tmpVal_3;
    Vector parms = null;
    {

      Vector res_l_7 = new Vector();
      HashSet resBind_s_9 = new HashSet();
      HashSet riseq_13 = new HashSet();
      int max_14 = elist.size();
      for (int i_15 = 1; i_15 <= max_14; i_15++) 
        riseq_13.add(new Long(i_15));
      resBind_s_9 = riseq_13;
      Vector bind_l_8 = null;
      bind_l_8 = UTIL.Sort(resBind_s_9);
      Long i = null;
      for (Iterator enm_47 = bind_l_8.iterator(); enm_47.hasNext(); ) {

        Long e_11 = UTIL.NumberToLong(enm_47.next());
        i = e_11;
        Boolean pred_40 = null;
        String var1_41 = null;
        XmlEntity tmpRec_42 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
          tmpRec_42 = (XmlEntity) elist.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_41 = tmpRec_42.name;
        pred_40 = new Boolean(UTIL.equals(var1_41, new String("ownedParameter")));
        if (pred_40.booleanValue()) {

          UmlParameter reselem_16 = null;
          String arg_17 = null;
          XmlAttribute tmpRec_22 = null;
          XmlEntity par_23 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_23 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          tmpRec_22 = (XmlAttribute) getAttribute((XmlEntity) par_23, new String("name"));
          arg_17 = tmpRec_22.val;
          IUmlType arg_18 = null;
          XmlEntity par_27 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_27 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          arg_18 = (IUmlType) lookUpType((XmlEntity) par_27);
          IUmlParameterDirectionKind arg_21 = null;
          String par_34 = null;
          XmlAttribute tmpRec_35 = null;
          XmlEntity par_36 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_36 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          tmpRec_35 = (XmlAttribute) getAttribute((XmlEntity) par_36, new String("direction"));
          par_34 = tmpRec_35.val;
          arg_21 = (IUmlParameterDirectionKind) ConvertParameterDirectionKind(par_34);
          reselem_16 = new UmlParameter(arg_17, arg_18, new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1)), new String(""), arg_21);
          res_l_7.add(reselem_16);
        }
      }
      parms = res_l_7;
    }
    Vector rexpr_48 = null;
    if ((new Long(parms.size()).intValue() == new Long(0).intValue())) 
      rexpr_48 = null;
    else 
      rexpr_48 = parms;
    return rexpr_48;
  }
// ***** VDMTOOLS END Name=CreateOperstionParameters#1|XmlEntity


// ***** VDMTOOLS START Name=ConvertParameterDirectionKind#1|String KEEP=NO
  private IUmlParameterDirectionKind ConvertParameterDirectionKind (final String val) throws CGException {

    UmlParameterDirectionKind varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(val, new String("in"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQIN);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(val, new String("out"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQOUT);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(val, new String("return"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQRETURN);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(val, new String("inout"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQINOUT);
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return (IUmlParameterDirectionKind) varRes_2;
  }
// ***** VDMTOOLS END Name=ConvertParameterDirectionKind#1|String


// ***** VDMTOOLS START Name=build_uConstraint#1|XmlEntity KEEP=NO
  private IUmlConstraint build_uConstraint (final XmlEntity e) throws CGException {

    UmlConstraint varRes_2 = null;
    {

      Vector elist = null;
      XmlEntityList tmpRec_5 = null;
      tmpRec_5 = e.entities;
      elist = tmpRec_5.entities;
      HashSet ids = new HashSet();
      HashSet res_s_8 = new HashSet();
      {

        HashSet e1_set_18 = new HashSet(elist);
        XmlEntity p = null;
        {
          for (Iterator enm_20 = e1_set_18.iterator(); enm_20.hasNext(); ) {

            XmlEntity elem_19 = (XmlEntity) enm_20.next();
            p = (XmlEntity) elem_19;
            if (hasAttribute((XmlEntity) p, new String("xmi:idref")).booleanValue()) {

              String res_s_9 = null;
              res_s_9 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("xmi:idref"))).val;
              res_s_8.add(res_s_9);
            }
          }
        }
      }
      ids = res_s_8;
      String specification = null;
      Vector unArg_22 = null;
      HashSet par_23 = new HashSet();
      HashSet res_s_24 = new HashSet();
      {

        HashSet e1_set_34 = new HashSet(elist);
        XmlEntity p = null;
        {
          for (Iterator enm_36 = e1_set_34.iterator(); enm_36.hasNext(); ) {

            XmlEntity elem_35 = (XmlEntity) enm_36.next();
            p = (XmlEntity) elem_35;
            Boolean pred_28 = null;
            String var1_29 = null;
            var1_29 = p.name;
            pred_28 = new Boolean(UTIL.equals(var1_29, new String("body")));
            if (pred_28.booleanValue()) {

              String res_s_25 = null;
              XmlData tmpRec_26 = null;
              tmpRec_26 = p.data;
              res_s_25 = tmpRec_26.data;
              res_s_24.add(res_s_25);
            }
          }
        }
      }
      par_23 = res_s_24;
      unArg_22 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_23));
      specification = UTIL.ConvertToString(unArg_22.get(0));
      varRes_2 = (UmlConstraint) new UmlConstraint(ids, new UmlLiteralString(specification));
    }
    return (IUmlConstraint) varRes_2;
  }
// ***** VDMTOOLS END Name=build_uConstraint#1|XmlEntity


// ***** VDMTOOLS START Name=build_uAssociation#1|XmlEntity KEEP=NO
  private IUmlAssociation build_uAssociation (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    tmpVal_3 = tmpRec_4.entities;
    Vector elist = null;
    elist = tmpVal_3;
    String tmpVal_6 = null;
    if (hasAttribute((XmlEntity) e, new String("xmi:id")).booleanValue()) 
      tmpVal_6 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    else 
      tmpVal_6 = null;
    String associationId = null;
    associationId = tmpVal_6;
    HashSet props = new HashSet();
    HashSet res_s_15 = new HashSet();
    {

      HashSet e_set_25 = new HashSet();
      HashSet riseq_27 = new HashSet();
      int max_28 = elist.size();
      for (int i_29 = 1; i_29 <= max_28; i_29++) 
        riseq_27.add(new Long(i_29));
      e_set_25 = riseq_27;
      Long i = null;
      {
        for (Iterator enm_31 = e_set_25.iterator(); enm_31.hasNext(); ) {

          Long elem_30 = UTIL.NumberToLong(enm_31.next());
          i = elem_30;
          Boolean pred_19 = null;
          XmlEntity par_20 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_20 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_19 = isAttributeType((XmlEntity) par_20, new String("uml:Property"));
          if (pred_19.booleanValue()) {

            XmlEntity res_s_16 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              res_s_16 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_s_15.add(res_s_16);
          }
        }
      }
    }
    props = res_s_15;
    HashSet ownedNavivableEnds = new HashSet();
    HashSet res_s_33 = new HashSet();
    {

      XmlEntity p = null;
      {
        for (Iterator enm_50 = props.iterator(); enm_50.hasNext(); ) {

          XmlEntity elem_49 = (XmlEntity) enm_50.next();
          p = (XmlEntity) elem_49;
          Boolean pred_38 = null;
          {
            if (!(pred_38 = new Boolean(!hasAttribute((XmlEntity) p, new String("name")).booleanValue())).booleanValue()) 
              pred_38 = hasAttributeValue((XmlEntity) p, new String("name"), new String(""));
          }
          if (pred_38.booleanValue()) {
            res_s_33.add((IUmlProperty) build_uProperty((XmlEntity) p, new String(""), associationId));
          }
        }
      }
    }
    ownedNavivableEnds = res_s_33;
    Vector one = null;
    one = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownedNavivableEnds));
    IUmlType ownerClassType = null;
    Vector unArg_54 = null;
    {

      Vector res_l_55 = new Vector();
      HashSet resBind_s_57 = new HashSet();
      HashSet riseq_61 = new HashSet();
      int max_62 = one.size();
      for (int i_63 = 1; i_63 <= max_62; i_63++) 
        riseq_61.add(new Long(i_63));
      resBind_s_57 = riseq_61;
      Vector bind_l_56 = null;
      bind_l_56 = UTIL.Sort(resBind_s_57);
      Long i = null;
      for (Iterator enm_69 = bind_l_56.iterator(); enm_69.hasNext(); ) {

        Long e_59 = UTIL.NumberToLong(enm_69.next());
        i = e_59;
        IUmlType reselem_64 = null;
        IUmlProperty obj_65 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= one.size())) 
          obj_65 = (IUmlProperty) one.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_64 = (IUmlType) obj_65.getType();
        res_l_55.add(reselem_64);
      }
      unArg_54 = res_l_55;
    }
    ownerClassType = (IUmlType) unArg_54.get(0);
    String tmpVal_70 = null;
    {

      IUmlClassNameType ct = (IUmlClassNameType) ownerClassType;
      tmpVal_70 = ct.getName();
    }
    String ownerClass = null;
    ownerClass = tmpVal_70;
    HashSet ownedEnds = new HashSet();
    HashSet res_s_74 = new HashSet();
    {

      XmlEntity p = null;
      {
        for (Iterator enm_93 = props.iterator(); enm_93.hasNext(); ) {

          XmlEntity elem_92 = (XmlEntity) enm_93.next();
          p = (XmlEntity) elem_92;
          Boolean pred_79 = null;
          {
            if ((pred_79 = hasAttribute((XmlEntity) p, new String("name"))).booleanValue()) {

              Boolean var2_83 = null;
              Long var1_84 = null;
              String unArg_85 = null;
              unArg_85 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("name"))).val;
              var1_84 = new Long(unArg_85.length());
              var2_83 = new Boolean((var1_84.intValue()) > (new Long(0).intValue()));
              pred_79 = var2_83;
            }
          }
          if (pred_79.booleanValue()) {
            res_s_74.add((IUmlProperty) build_uProperty((XmlEntity) p, ownerClass, associationId));
          }
        }
      }
    }
    ownedEnds = res_s_74;
    String tmpVal_94 = null;
    if (hasAttribute((XmlEntity) e, new String("name")).booleanValue()) 
      tmpVal_94 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    else 
      tmpVal_94 = new String("");
    String name = null;
    name = tmpVal_94;
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    return (IUmlAssociation) new UmlAssociation(ownedEnds, ownedNavivableEnds, name, id);
  }
// ***** VDMTOOLS END Name=build_uAssociation#1|XmlEntity


// ***** VDMTOOLS START Name=build_uAssociationQualifier#1|XmlEntity KEEP=NO
  private void build_uAssociationQualifier (final XmlEntity e) throws CGException {

    Vector list = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      Vector unArg_9 = null;
      XmlEntityList tmpRec_10 = null;
      tmpRec_10 = e.entities;
      unArg_9 = tmpRec_10.entities;
      HashSet riseq_12 = new HashSet();
      int max_13 = unArg_9.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_6 = riseq_12;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_38 = bind_l_5.iterator(); enm_38.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_38.next());
        i = e_8;
        Boolean pred_20 = null;
        Boolean var1_21 = null;
        String var1_22 = null;
        XmlEntity tmpRec_23 = null;
        Vector tmp_l_24 = null;
        XmlEntityList tmpRec_25 = null;
        tmpRec_25 = e.entities;
        tmp_l_24 = tmpRec_25.entities;
        if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_24.size())) 
          tmpRec_23 = (XmlEntity) tmp_l_24.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_22 = tmpRec_23.name;
        var1_21 = new Boolean(UTIL.equals(var1_22, new String("source")));
        {
          if (!(pred_20 = var1_21).booleanValue()) {

            Boolean var2_29 = null;
            String var1_30 = null;
            XmlEntity tmpRec_31 = null;
            Vector tmp_l_32 = null;
            XmlEntityList tmpRec_33 = null;
            tmpRec_33 = e.entities;
            tmp_l_32 = tmpRec_33.entities;
            if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_32.size())) 
              tmpRec_31 = (XmlEntity) tmp_l_32.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_30 = tmpRec_31.name;
            var2_29 = new Boolean(UTIL.equals(var1_30, new String("target")));
            pred_20 = var2_29;
          }
        }
        if (pred_20.booleanValue()) {

          XmlEntity reselem_15 = null;
          Vector tmp_l_16 = null;
          XmlEntityList tmpRec_17 = null;
          tmpRec_17 = e.entities;
          tmp_l_16 = tmpRec_17.entities;
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_16.size())) 
            reselem_15 = (XmlEntity) tmp_l_16.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_4.add(reselem_15);
        }
      }
      list = res_l_4;
    }
    HashSet qualifiers = new HashSet();
    HashSet res_s_40 = new HashSet();
    {

      HashSet e1_set_45 = new HashSet(list);
      XmlEntity sOrT = null;
      {
        for (Iterator enm_47 = e1_set_45.iterator(); enm_47.hasNext(); ) {

          XmlEntity elem_46 = (XmlEntity) enm_47.next();
          sOrT = (XmlEntity) elem_46;
          res_s_40.add(getQualifierInfo((XmlEntity) sOrT));
        }
      }
    }
    qualifiers = res_s_40;
    {

      HashMap rhs_48 = new HashMap();
      HashMap var2_50 = new HashMap();
      HashMap res_m_51 = new HashMap();
      {

        QualifierInfo q = null;
        {
          for (Iterator enm_65 = qualifiers.iterator(); enm_65.hasNext(); ) {

            QualifierInfo elem_64 = (QualifierInfo) enm_65.next();
            q = elem_64;
            if ((!UTIL.equals(q, null))) {

              String md_52 = null;
              {

                String id = null;
                id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:idref"))).val;
                md_52 = id;
              }
              res_m_51.put(md_52, q);
            }
          }
        }
      }
      var2_50 = res_m_51;
      {

        HashMap m1_70 = (HashMap) associationToQualifier.clone();
        HashMap m2_71 = var2_50;
        HashSet com_66 = new HashSet();
        com_66.addAll(m1_70.keySet());
        com_66.retainAll(m2_71.keySet());
        boolean all_applies_67 = true;
        Object d_68;
        for (Iterator bb_69 = com_66.iterator(); bb_69.hasNext() && all_applies_67; ) {

          d_68 = bb_69.next();
          all_applies_67 = m1_70.get(d_68).equals(m2_71.get(d_68));
        }
        if (!all_applies_67) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_70.putAll(m2_71);
        rhs_48 = m1_70;
      }
      associationToQualifier = (HashMap) UTIL.clone(rhs_48);
    }
  }
// ***** VDMTOOLS END Name=build_uAssociationQualifier#1|XmlEntity


// ***** VDMTOOLS START Name=getQualifierInfo#1|XmlEntity KEEP=NO
  private QualifierInfo getQualifierInfo (final XmlEntity e) throws CGException {

    XmlEntity ec = (XmlEntity) (XmlEntity) getElement((XmlEntity) e, new String("constraints"));
    if ((!UTIL.equals(ec, null))) {

      String a = null;
      if (hasAttribute((XmlEntity) ec, new String("qualifier")).booleanValue()) 
        a = ((XmlAttribute) getAttribute((XmlEntity) ec, new String("qualifier"))).val;
      else 
        a = null;
      String id = null;
      if (hasAttribute((XmlEntity) e, new String("xmi:idref")).booleanValue()) 
        id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:idref"))).val;
      else 
        id = null;
      if ((!UTIL.equals(a, null))) {

        QualifierInfo rexpr_31 = null;
        rexpr_31 = new QualifierInfo(id, a);
        return rexpr_31;
      }
      else 
        return null;
    }
    else 
      return null;
  }
// ***** VDMTOOLS END Name=getQualifierInfo#1|XmlEntity


// ***** VDMTOOLS START Name=lookUpType#1|XmlEntity KEEP=NO
  private IUmlType lookUpType (final XmlEntity e) throws CGException {
    return (IUmlType) (IUmlType) findType(getTypeId((XmlEntity) e));
  }
// ***** VDMTOOLS END Name=lookUpType#1|XmlEntity


// ***** VDMTOOLS START Name=getTypeId#1|XmlEntity KEEP=NO
  private String getTypeId (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    HashSet typeOption1 = new HashSet();
    if (hasAttribute((XmlEntity) e, new String("type")).booleanValue()) {

      String enum_set_32 = null;
      enum_set_32 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("type"))).val;
      typeOption1 = new HashSet();
      typeOption1.add(enum_set_32);
    }
    else {

      HashSet res_s_11 = new HashSet();
      {

        HashSet e_set_25 = new HashSet();
        HashSet riseq_27 = new HashSet();
        int max_28 = elist.size();
        for (int i_29 = 1; i_29 <= max_28; i_29++) 
          riseq_27.add(new Long(i_29));
        e_set_25 = riseq_27;
        Long i = null;
        {
          for (Iterator enm_31 = e_set_25.iterator(); enm_31.hasNext(); ) {

            Long elem_30 = UTIL.NumberToLong(enm_31.next());
            i = elem_30;
            Boolean pred_18 = null;
            String var1_19 = null;
            XmlEntity tmpRec_20 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              tmpRec_20 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_19 = tmpRec_20.name;
            pred_18 = new Boolean(UTIL.equals(var1_19, new String("type")));
            if (pred_18.booleanValue()) {

              String res_s_12 = null;
              XmlAttribute tmpRec_13 = null;
              XmlEntity par_14 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
                par_14 = (XmlEntity) elist.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              tmpRec_13 = (XmlAttribute) getAttribute((XmlEntity) par_14, new String("xmi:idref"));
              res_s_12 = tmpRec_13.val;
              res_s_11.add(res_s_12);
            }
          }
        }
      }
      typeOption1 = res_s_11;
    }
    {

      HashSet tmpSet_36 = new HashSet();
      tmpSet_36 = typeOption1;
      String id = null;
      boolean succ_38 = false;
      for (Iterator enm_40 = tmpSet_36.iterator(); enm_40.hasNext() && !succ_38; ) {

        String tmpElem_39 = UTIL.ConvertToString(enm_40.next());
        succ_38 = true;
        id = tmpElem_39;
      }
      if (!succ_38) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      return id;
    }
  }
// ***** VDMTOOLS END Name=getTypeId#1|XmlEntity


// ***** VDMTOOLS START Name=findType#1|String KEEP=NO
  private IUmlType findType (final String name) throws CGException {

    String typeName = null;
    Boolean cond_5 = null;
    cond_5 = new Boolean(classesTypeMap.containsKey(name));
    if (cond_5.booleanValue()) 
      typeName = UTIL.ConvertToString(classesTypeMap.get(name));
    else 
      typeName = null;
    boolean succ_10 = true;
    {

      succ_10 = true;
      if (!UTIL.equals(typeName, null)) 
        succ_10 = false;
      if (succ_10) {

        String par_27 = null;
        par_27 = new String("Issuing unknown type: ").concat(name);
        log.warn(par_27);
        return (IUmlType) new UmlClassNameType(name);
      }
      else {

        succ_10 = true;
        if (!UTIL.equals(typeName, new String("String"))) 
          succ_10 = false;
        if (succ_10) 
          return (IUmlType) new UmlStringType();
        else {

          succ_10 = true;
          if (!UTIL.equals(typeName, new String("int"))) 
            succ_10 = false;
          if (succ_10) 
            return (IUmlType) new UmlIntegerType();
          else {

            succ_10 = true;
            if (!UTIL.equals(typeName, new String("bool"))) 
              succ_10 = false;
            if (succ_10) 
              return (IUmlType) new UmlBoolType();
            else {

              succ_10 = true;
              if (!UTIL.equals(typeName, new String("char"))) 
                succ_10 = false;
              if (succ_10) 
                return (IUmlType) new UmlCharType();
              else {

                succ_10 = true;
                if (!UTIL.equals(typeName, new String("unlimitedNatural"))) 
                  succ_10 = false;
                if (succ_10) 
                  return (IUmlType) new UmlUnlimitedNatural();
                else 
                  return (IUmlType) new UmlClassNameType(typeName);
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=findType#1|String


// ***** VDMTOOLS START Name=VisitXmlEntity#1|XmlEntity KEEP=NO
  public void VisitXmlEntity (final XmlEntity e) throws CGException {

    HashSet rhs_2 = new HashSet();
    HashSet var2_4 = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      HashSet e_set_19 = new HashSet();
      e_set_19 = new HashSet();
      e_set_19.add(e);
      XmlEntity entity = null;
      {
        for (Iterator enm_22 = e_set_19.iterator(); enm_22.hasNext(); ) {

          XmlEntity elem_21 = (XmlEntity) enm_22.next();
          entity = (XmlEntity) elem_21;
          Boolean pred_8 = null;
          {
            if ((pred_8 = isAttributeType((XmlEntity) entity, new String("uml:Class"))).booleanValue()) {

              Boolean var2_12 = null;
              String var1_13 = null;
              var1_13 = ((XmlAttribute) getAttribute((XmlEntity) entity, new String("name"))).val;
              var2_12 = new Boolean(!primiticeTypes.contains(var1_13));
              pred_8 = var2_12;
            }
          }
          if (pred_8.booleanValue()) {
            res_s_5.add((IUmlClass) exstractClass((XmlEntity) entity));
          }
        }
      }
    }
    var2_4 = res_s_5;
    rhs_2 = (HashSet) classes.clone();
    rhs_2.addAll(var2_4);
    classes = (HashSet) UTIL.clone(rhs_2);
    HashSet rhs_23 = new HashSet();
    HashSet var2_25 = new HashSet();
    HashSet res_s_26 = new HashSet();
    {

      HashSet e_set_33 = new HashSet();
      e_set_33 = new HashSet();
      e_set_33.add(e);
      XmlEntity entity = null;
      {
        for (Iterator enm_36 = e_set_33.iterator(); enm_36.hasNext(); ) {

          XmlEntity elem_35 = (XmlEntity) enm_36.next();
          entity = (XmlEntity) elem_35;
          if (isAttributeType((XmlEntity) entity, new String("uml:Association")).booleanValue()) {
            res_s_26.add((IUmlAssociation) build_uAssociation((XmlEntity) entity));
          }
        }
      }
    }
    var2_25 = res_s_26;
    rhs_23 = (HashSet) associations.clone();
    rhs_23.addAll(var2_25);
    associations = (HashSet) UTIL.clone(rhs_23);
  }
// ***** VDMTOOLS END Name=VisitXmlEntity#1|XmlEntity


// ***** VDMTOOLS START Name=hasAttribute#2|XmlEntity|String KEEP=NO
  private Boolean hasAttribute (final XmlEntity e, final String name) throws CGException {

    Boolean varRes_3 = null;
    {

      Vector list = null;
      XmlAttributeList tmpRec_6 = null;
      tmpRec_6 = e.attributes;
      list = tmpRec_6.attributes;
      boolean tmpQuant_8 = false;
      {

        HashSet e_set_16 = new HashSet();
        HashSet riseq_18 = new HashSet();
        int max_19 = list.size();
        for (int i_20 = 1; i_20 <= max_19; i_20++) 
          riseq_18.add(new Long(i_20));
        e_set_16 = riseq_18;
        Long i = null;
        {
          for (Iterator enm_22 = e_set_16.iterator(); enm_22.hasNext() && !tmpQuant_8; ) {

            Long elem_21 = UTIL.NumberToLong(enm_22.next());
            i = elem_21;
            Boolean pred_9 = null;
            String var1_10 = null;
            XmlAttribute tmpRec_11 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              tmpRec_11 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_10 = tmpRec_11.name;
            pred_9 = new Boolean(UTIL.equals(var1_10, name));
            if (pred_9.booleanValue()) 
              tmpQuant_8 = true;
          }
        }
      }
      varRes_3 = new Boolean(tmpQuant_8);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=hasAttribute#2|XmlEntity|String


// ***** VDMTOOLS START Name=hasAttributeValue#3|XmlEntity|String|String KEEP=NO
  private Boolean hasAttributeValue (final XmlEntity e, final String name, final String val) throws CGException {

    Boolean varRes_4 = null;
    {

      Vector list = null;
      XmlAttributeList tmpRec_7 = null;
      tmpRec_7 = e.attributes;
      list = tmpRec_7.attributes;
      boolean tmpQuant_9 = false;
      {

        HashSet e_set_24 = new HashSet();
        HashSet riseq_26 = new HashSet();
        int max_27 = list.size();
        for (int i_28 = 1; i_28 <= max_27; i_28++) 
          riseq_26.add(new Long(i_28));
        e_set_24 = riseq_26;
        Long i = null;
        {
          for (Iterator enm_30 = e_set_24.iterator(); enm_30.hasNext() && !tmpQuant_9; ) {

            Long elem_29 = UTIL.NumberToLong(enm_30.next());
            i = elem_29;
            Boolean pred_10 = null;
            Boolean var1_11 = null;
            String var1_12 = null;
            XmlAttribute tmpRec_13 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              tmpRec_13 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_12 = tmpRec_13.name;
            var1_11 = new Boolean(UTIL.equals(var1_12, name));
            {
              if ((pred_10 = var1_11).booleanValue()) {

                Boolean var2_17 = null;
                String var1_18 = null;
                XmlAttribute tmpRec_19 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
                  tmpRec_19 = (XmlAttribute) list.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var1_18 = tmpRec_19.val;
                var2_17 = new Boolean(UTIL.equals(var1_18, val));
                pred_10 = var2_17;
              }
            }
            if (pred_10.booleanValue()) 
              tmpQuant_9 = true;
          }
        }
      }
      varRes_4 = new Boolean(tmpQuant_9);
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=hasAttributeValue#3|XmlEntity|String|String


// ***** VDMTOOLS START Name=isAttributeType#2|XmlEntity|String KEEP=NO
  private Boolean isAttributeType (final XmlEntity e, final String val) throws CGException {
    return hasAttributeValue((XmlEntity) e, new String("xmi:type"), val);
  }
// ***** VDMTOOLS END Name=isAttributeType#2|XmlEntity|String


// ***** VDMTOOLS START Name=getElementType#1|XmlEntity KEEP=NO
  private String getElementType (final XmlEntity e) throws CGException {

    String varRes_2 = null;
    if ((!UTIL.equals((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:type")), null))) 
      varRes_2 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:type"))).val;
    else 
      varRes_2 = e.name;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getElementType#1|XmlEntity


// ***** VDMTOOLS START Name=getElement#2|XmlEntity|String KEEP=NO
  private XmlEntity getElement (final XmlEntity e, final String name) throws CGException {

    XmlEntity varRes_3 = null;
    {

      Vector list = null;
      XmlEntityList tmpRec_6 = null;
      tmpRec_6 = e.entities;
      list = tmpRec_6.entities;
      Vector allList = null;
      {

        Vector res_l_9 = new Vector();
        HashSet resBind_s_11 = new HashSet();
        HashSet riseq_15 = new HashSet();
        int max_16 = list.size();
        for (int i_17 = 1; i_17 <= max_16; i_17++) 
          riseq_15.add(new Long(i_17));
        resBind_s_11 = riseq_15;
        Vector bind_l_10 = null;
        bind_l_10 = UTIL.Sort(resBind_s_11);
        Long i = null;
        for (Iterator enm_28 = bind_l_10.iterator(); enm_28.hasNext(); ) {

          Long e_13 = UTIL.NumberToLong(enm_28.next());
          i = e_13;
          Boolean pred_21 = null;
          String var1_22 = null;
          XmlEntity tmpRec_23 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            tmpRec_23 = (XmlEntity) list.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_22 = tmpRec_23.name;
          pred_21 = new Boolean(UTIL.equals(var1_22, name));
          if (pred_21.booleanValue()) {

            XmlEntity reselem_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              reselem_18 = (XmlEntity) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_9.add(reselem_18);
          }
        }
        allList = res_l_9;
      }
      if (((new Long(allList.size()).intValue()) > (new Long(0).intValue()))) 
        varRes_3 = (XmlEntity) (XmlEntity) allList.get(0);
      else 
        varRes_3 = null;
    }
    return (XmlEntity) varRes_3;
  }
// ***** VDMTOOLS END Name=getElement#2|XmlEntity|String


// ***** VDMTOOLS START Name=getAttribute#2|XmlEntity|String KEEP=NO
  private XmlAttribute getAttribute (final XmlEntity e, final String name) throws CGException {

    XmlAttribute varRes_3 = null;
    {

      Vector list = null;
      XmlAttributeList tmpRec_6 = null;
      tmpRec_6 = e.attributes;
      list = tmpRec_6.attributes;
      Vector attList = null;
      {

        Vector res_l_9 = new Vector();
        HashSet resBind_s_11 = new HashSet();
        HashSet riseq_15 = new HashSet();
        int max_16 = list.size();
        for (int i_17 = 1; i_17 <= max_16; i_17++) 
          riseq_15.add(new Long(i_17));
        resBind_s_11 = riseq_15;
        Vector bind_l_10 = null;
        bind_l_10 = UTIL.Sort(resBind_s_11);
        Long i = null;
        for (Iterator enm_28 = bind_l_10.iterator(); enm_28.hasNext(); ) {

          Long e_13 = UTIL.NumberToLong(enm_28.next());
          i = e_13;
          Boolean pred_21 = null;
          String var1_22 = null;
          XmlAttribute tmpRec_23 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            tmpRec_23 = (XmlAttribute) list.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_22 = tmpRec_23.name;
          pred_21 = new Boolean(UTIL.equals(var1_22, name));
          if (pred_21.booleanValue()) {

            XmlAttribute reselem_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              reselem_18 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_9.add(reselem_18);
          }
        }
        attList = res_l_9;
      }
      if (((new Long(attList.size()).intValue()) > (new Long(0).intValue()))) 
        varRes_3 = (XmlAttribute) (XmlAttribute) attList.get(0);
      else 
        varRes_3 = null;
    }
    return (XmlAttribute) varRes_3;
  }
// ***** VDMTOOLS END Name=getAttribute#2|XmlEntity|String


// ***** VDMTOOLS START Name=GetVisibility#1|XmlAttribute KEEP=NO
  static private IUmlVisibilityKind GetVisibility (final XmlAttribute v) throws CGException {

    UmlVisibilityKind varRes_2 = null;
    if ((!UTIL.equals(v, null))) {

      String selRes_9 = null;
      selRes_9 = v.val;
      boolean succ_8 = true;
      {

        succ_8 = true;
        if (!UTIL.equals(selRes_9, new String("private"))) 
          succ_8 = false;
        if (succ_8) 
          varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
      }
      if (!succ_8) {

        succ_8 = true;
        if (!UTIL.equals(selRes_9, new String("public"))) 
          succ_8 = false;
        if (succ_8) 
          varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
      }
      if (!succ_8) {

        succ_8 = true;
        if (!UTIL.equals(selRes_9, new String("protected"))) 
          succ_8 = false;
        if (succ_8) 
          varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPROTECTED);
      }
      if (!succ_8) 
        UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    }
    else 
      varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
    return (IUmlVisibilityKind) varRes_2;
  }
// ***** VDMTOOLS END Name=GetVisibility#1|XmlAttribute


// ***** VDMTOOLS START Name=build_uCollobration#1|XmlEntity KEEP=NO
  private IUmlCollaboration build_uCollobration (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    tmpVal_3 = tmpRec_4.entities;
    Vector elist = null;
    elist = tmpVal_3;
    HashSet interactions = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e1_set_15 = new HashSet(elist);
      XmlEntity p = null;
      {
        for (Iterator enm_17 = e1_set_15.iterator(); enm_17.hasNext(); ) {

          XmlEntity elem_16 = (XmlEntity) enm_17.next();
          p = (XmlEntity) elem_16;
          if (isAttributeType((XmlEntity) p, new String("uml:Interaction")).booleanValue()) {
            res_s_7.add((IUmlInteraction) build_uInteraction((XmlEntity) p));
          }
        }
      }
    }
    interactions = res_s_7;
    return (IUmlCollaboration) new UmlCollaboration(interactions);
  }
// ***** VDMTOOLS END Name=build_uCollobration#1|XmlEntity


// ***** VDMTOOLS START Name=build_uInteraction#1|XmlEntity KEEP=NO
  private IUmlInteraction build_uInteraction (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    tmpVal_3 = tmpRec_4.entities;
    Vector elist = null;
    elist = tmpVal_3;
    HashMap props = new HashMap();
    HashMap res_m_7 = new HashMap();
    {

      HashSet e1_set_21 = new HashSet(elist);
      XmlEntity p = null;
      {
        for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

          XmlEntity elem_22 = (XmlEntity) enm_23.next();
          p = (XmlEntity) elem_22;
          if (isAttributeType((XmlEntity) p, new String("uml:Property")).booleanValue()) {

            String md_8 = null;
            md_8 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("xmi:id"))).val;
            res_m_7.put(md_8, (IUmlProperty) build_uProperty((XmlEntity) p, new String(""), null));
          }
        }
      }
    }
    props = res_m_7;
    {

      HashMap rhs_24 = new HashMap();
      HashMap modmap_25 = new HashMap();
      HashMap res_m_28 = new HashMap();
      {

        HashSet e1_set_51 = new HashSet(elist);
        XmlEntity p = null;
        {
          for (Iterator enm_53 = e1_set_51.iterator(); enm_53.hasNext(); ) {

            XmlEntity elem_52 = (XmlEntity) enm_53.next();
            p = (XmlEntity) elem_52;
            Boolean pred_45 = null;
            String var1_46 = null;
            var1_46 = p.name;
            pred_45 = new Boolean(UTIL.equals(var1_46, new String("lifeline")));
            if (pred_45.booleanValue()) {

              String md_29 = null;
              md_29 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("xmi:id"))).val;
              UmlLifeLine mr_33 = null;
              String arg_34 = null;
              arg_34 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("name"))).val;
              IUmlType arg_35 = null;
              IUmlProperty obj_39 = null;
              String tmppar_41 = null;
              tmppar_41 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("represents"))).val;
              obj_39 = (IUmlProperty) props.get(tmppar_41);
              arg_35 = (IUmlType) obj_39.getType();
              mr_33 = new UmlLifeLine(arg_34, arg_35);
              res_m_28.put(md_29, mr_33);
            }
          }
        }
      }
      modmap_25 = res_m_28;
      rhs_24 = new HashMap(lifeLineMap);
      rhs_24.putAll(modmap_25);
      lifeLineMap = (HashMap) UTIL.clone(rhs_24);
      {

        String tmpVal_55 = null;
        tmpVal_55 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
        String name = null;
        name = tmpVal_55;
        HashSet lifeLines = new HashSet();
        lifeLines.clear();
        lifeLines.addAll(lifeLineMap.values());
        HashSet mosfragments = new HashSet();
        HashSet res_s_62 = new HashSet();
        {

          HashSet e1_set_70 = new HashSet(elist);
          XmlEntity f = null;
          {
            for (Iterator enm_72 = e1_set_70.iterator(); enm_72.hasNext(); ) {

              XmlEntity elem_71 = (XmlEntity) enm_72.next();
              f = (XmlEntity) elem_71;
              if (isAttributeType((XmlEntity) f, new String("uml:MessageOccurrenceSpecification")).booleanValue()) {
                res_s_62.add((IUmlInteractionFragment) build_uFragment((XmlEntity) f));
              }
            }
          }
        }
        mosfragments = res_s_62;
        HashSet besfragments = new HashSet();
        HashSet res_s_74 = new HashSet();
        {

          HashSet e1_set_82 = new HashSet(elist);
          XmlEntity f = null;
          {
            for (Iterator enm_84 = e1_set_82.iterator(); enm_84.hasNext(); ) {

              XmlEntity elem_83 = (XmlEntity) enm_84.next();
              f = (XmlEntity) elem_83;
              if (isAttributeType((XmlEntity) f, new String("uml:BehaviorExecutionSpecification")).booleanValue()) {
                res_s_74.add((IUmlInteractionFragment) build_uFragment((XmlEntity) f));
              }
            }
          }
        }
        besfragments = res_s_74;
        HashSet combifragments = new HashSet();
        HashSet res_s_86 = new HashSet();
        {

          HashSet e1_set_94 = new HashSet(elist);
          XmlEntity f = null;
          {
            for (Iterator enm_96 = e1_set_94.iterator(); enm_96.hasNext(); ) {

              XmlEntity elem_95 = (XmlEntity) enm_96.next();
              f = (XmlEntity) elem_95;
              if (isAttributeType((XmlEntity) f, new String("uml:CombinedFragment")).booleanValue()) {
                res_s_86.add((IUmlInteractionFragment) build_uFragment((XmlEntity) f));
              }
            }
          }
        }
        combifragments = res_s_86;
        Vector messages = null;
        {

          Vector res_l_98 = new Vector();
          HashSet resBind_s_100 = new HashSet();
          HashSet riseq_104 = new HashSet();
          int max_105 = elist.size();
          for (int i_106 = 1; i_106 <= max_105; i_106++) 
            riseq_104.add(new Long(i_106));
          resBind_s_100 = riseq_104;
          Vector bind_l_99 = null;
          bind_l_99 = UTIL.Sort(resBind_s_100);
          Long i = null;
          for (Iterator enm_118 = bind_l_99.iterator(); enm_118.hasNext(); ) {

            Long e_102 = UTIL.NumberToLong(enm_118.next());
            i = e_102;
            Boolean pred_111 = null;
            String var1_112 = null;
            XmlEntity tmpRec_113 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              tmpRec_113 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_112 = tmpRec_113.name;
            pred_111 = new Boolean(UTIL.equals(var1_112, new String("message")));
            if (pred_111.booleanValue()) {

              IUmlMessage reselem_107 = null;
              XmlEntity par_108 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
                par_108 = (XmlEntity) elist.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              reselem_107 = (IUmlMessage) build_uMessage((XmlEntity) par_108);
              res_l_98.add(reselem_107);
            }
          }
          messages = res_l_98;
        }
        UmlInteraction rexpr_119 = null;
        HashSet arg_122 = new HashSet();
        HashSet var1_124 = new HashSet();
        var1_124 = (HashSet) mosfragments.clone();
        var1_124.addAll(besfragments);
        arg_122 = (HashSet) var1_124.clone();
        arg_122.addAll(combifragments);
        rexpr_119 = new UmlInteraction(name, lifeLines, arg_122, messages);
        return (IUmlInteraction) rexpr_119;
      }
    }
  }
// ***** VDMTOOLS END Name=build_uInteraction#1|XmlEntity


// ***** VDMTOOLS START Name=build_uMessage#1|XmlEntity KEEP=NO
  private IUmlMessage build_uMessage (final XmlEntity e) throws CGException {

    IUmlMessageKind messageKind = (IUmlMessageKind) new UmlMessageKind(UmlMessageKindQuotes.IQCOMPLETE);
    IUmlMessageSort messageSort = (IUmlMessageSort) new UmlMessageSort(UmlMessageSortQuotes.IQSYNCHCALL);
    IUmlMos mosSend = null;
    String tmppar_9 = null;
    tmppar_9 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("sendEvent"))).val;
    mosSend = (IUmlMos) mosMap.get(tmppar_9);
    IUmlMos mosRecive = null;
    String tmppar_15 = null;
    tmppar_15 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("receiveEvent"))).val;
    mosRecive = (IUmlMos) mosMap.get(tmppar_15);
    Vector args = new Vector();
    String tmpVal_20 = null;
    IUmlOperation obj_21 = null;
    IUmlCallEvent obj_22 = null;
    obj_22 = (IUmlCallEvent) mosRecive.getEvent();
    obj_21 = (IUmlOperation) obj_22.getOperation();
    tmpVal_20 = obj_21.getName();
    String name = null;
    name = tmpVal_20;
    return (IUmlMessage) new UmlMessage(name, messageKind, messageSort, mosSend, mosRecive, args);
  }
// ***** VDMTOOLS END Name=build_uMessage#1|XmlEntity


// ***** VDMTOOLS START Name=build_uFragment#1|XmlEntity KEEP=NO
  private IUmlInteractionFragment build_uFragment (final XmlEntity e) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(getElementType((XmlEntity) e), new String("uml:MessageOccurrenceSpecification"))) 
        succ_2 = false;
      if (succ_2) 
        return (IUmlInteractionFragment) (IUmlMos) build_uMos((XmlEntity) e);
      else {

        succ_2 = true;
        if (!UTIL.equals(getElementType((XmlEntity) e), new String("uml:BehaviorExecutionSpecification"))) 
          succ_2 = false;
        if (succ_2) 
          return (IUmlInteractionFragment) (IUmlBes) build_uBes((XmlEntity) e);
        else {

          succ_2 = true;
          if (!UTIL.equals(getElementType((XmlEntity) e), new String("uml:CombinedFragment"))) 
            succ_2 = false;
          if (succ_2) 
            return (IUmlInteractionFragment) (IUmlCombinedFragment) build_uCombi((XmlEntity) e);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); //             return new IUmlInteractionFragment();
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=build_uFragment#1|XmlEntity


// ***** VDMTOOLS START Name=build_uMos#1|XmlEntity KEEP=NO
  private IUmlMos build_uMos (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_3;
    IUmlMessage message = null;
    IUmlLifeLine lifeLines = null;
    {

      HashSet tmpSet_9 = new HashSet();
      HashSet res_s_13 = new HashSet();
      {

        HashSet e1_set_20 = new HashSet(GetCovered((XmlEntity) e));
        String c = null;
        {
          for (Iterator enm_22 = e1_set_20.iterator(); enm_22.hasNext(); ) {

            String elem_21 = UTIL.ConvertToString(enm_22.next());
            c = elem_21;
            res_s_13.add((IUmlLifeLine) lifeLineMap.get(c));
          }
        }
      }
      tmpSet_9 = res_s_13;
      IUmlLifeLine l = null;
      boolean succ_11 = false;
      for (Iterator enm_23 = tmpSet_9.iterator(); enm_23.hasNext() && !succ_11; ) {

        IUmlLifeLine tmpElem_12 = (IUmlLifeLine) enm_23.next();
        succ_11 = true;
        l = (IUmlLifeLine) tmpElem_12;
      }
      if (!succ_11) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      lifeLines = (IUmlLifeLine) l;
    }
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    IUmlCallEvent event = null;
    String tmppar_30 = null;
    tmppar_30 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("event"))).val;
    event = (IUmlCallEvent) idToClallEventMap.get(tmppar_30);
    UmlMos mos = (UmlMos) new UmlMos(name, message, lifeLines, event);
    {

      mosMap.put(id, mos);
      return (IUmlMos) mos;
    }
  }
// ***** VDMTOOLS END Name=build_uMos#1|XmlEntity


// ***** VDMTOOLS START Name=build_uBes#1|XmlEntity KEEP=NO
  private IUmlBes build_uBes (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_3;
    IUmlMos startOc = null;
    String tmppar_9 = null;
    tmppar_9 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("start"))).val;
    startOc = (IUmlMos) mosMap.get(tmppar_9);
    IUmlMos finishOc = null;
    String tmppar_15 = null;
    tmppar_15 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("finish"))).val;
    finishOc = (IUmlMos) mosMap.get(tmppar_15);
    HashSet covered = new HashSet();
    HashSet res_s_20 = new HashSet();
    {

      HashSet e1_set_27 = new HashSet(GetCovered((XmlEntity) e));
      String c = null;
      {
        for (Iterator enm_29 = e1_set_27.iterator(); enm_29.hasNext(); ) {

          String elem_28 = UTIL.ConvertToString(enm_29.next());
          c = elem_28;
          res_s_20.add((IUmlLifeLine) lifeLineMap.get(c));
        }
      }
    }
    covered = res_s_20;
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    UmlBes bes = (UmlBes) new UmlBes(name, startOc, finishOc, covered);
    {

      besMap.put(id, bes);
      return (IUmlBes) bes;
    }
  }
// ***** VDMTOOLS END Name=build_uBes#1|XmlEntity


// ***** VDMTOOLS START Name=build_uCombi#1|XmlEntity KEEP=NO
  private IUmlCombinedFragment build_uCombi (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    String tmpVal_6 = null;
    tmpVal_6 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_6;
    IUmlInteractionOperatorKind interactionOperatorKind = null;
    String par_11 = null;
    par_11 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("interactionOperator"))).val;
    interactionOperatorKind = (IUmlInteractionOperatorKind) GetIntOperationKind(par_11);
    Vector operands = null;
    {

      Vector res_l_16 = new Vector();
      HashSet resBind_s_18 = new HashSet();
      HashSet riseq_22 = new HashSet();
      int max_23 = elist.size();
      for (int i_24 = 1; i_24 <= max_23; i_24++) 
        riseq_22.add(new Long(i_24));
      resBind_s_18 = riseq_22;
      Vector bind_l_17 = null;
      bind_l_17 = UTIL.Sort(resBind_s_18);
      Long i = null;
      for (Iterator enm_36 = bind_l_17.iterator(); enm_36.hasNext(); ) {

        Long e_20 = UTIL.NumberToLong(enm_36.next());
        i = e_20;
        Boolean pred_29 = null;
        String var1_30 = null;
        XmlEntity tmpRec_31 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
          tmpRec_31 = (XmlEntity) elist.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_30 = tmpRec_31.name;
        pred_29 = new Boolean(UTIL.equals(var1_30, new String("operand")));
        if (pred_29.booleanValue()) {

          IUmlInteractionOperand reselem_25 = null;
          XmlEntity par_26 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_26 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_25 = (IUmlInteractionOperand) build_uOperand((XmlEntity) par_26);
          res_l_16.add(reselem_25);
        }
      }
      operands = res_l_16;
    }
    HashSet covered = new HashSet();
    HashSet res_s_38 = new HashSet();
    {

      HashSet e1_set_45 = new HashSet(GetCovered((XmlEntity) e));
      String c = null;
      {
        for (Iterator enm_47 = e1_set_45.iterator(); enm_47.hasNext(); ) {

          String elem_46 = UTIL.ConvertToString(enm_47.next());
          c = elem_46;
          res_s_38.add((IUmlLifeLine) lifeLineMap.get(c));
        }
      }
    }
    covered = res_s_38;
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    UmlCombinedFragment combi = (UmlCombinedFragment) new UmlCombinedFragment(name, interactionOperatorKind, operands, covered);
    {

      combiMap.put(id, combi);
      return (IUmlCombinedFragment) combi;
    }
  }
// ***** VDMTOOLS END Name=build_uCombi#1|XmlEntity


// ***** VDMTOOLS START Name=GetIntOperationKind#1|String KEEP=NO
  private IUmlInteractionOperatorKind GetIntOperationKind (final String text) throws CGException {

    UmlInteractionOperatorKind varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(text, new String("alt"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlInteractionOperatorKind) new UmlInteractionOperatorKind(UmlInteractionOperatorKindQuotes.IQALT);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(text, new String("loop"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlInteractionOperatorKind) new UmlInteractionOperatorKind(UmlInteractionOperatorKindQuotes.IQLOOP);
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return (IUmlInteractionOperatorKind) varRes_2;
  }
// ***** VDMTOOLS END Name=GetIntOperationKind#1|String


// ***** VDMTOOLS START Name=build_uOperand#1|XmlEntity KEEP=NO
  private IUmlInteractionOperand build_uOperand (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    String tmpVal_6 = null;
    tmpVal_6 = new String("");
    String name = null;
    name = tmpVal_6;
    Vector fragments = new Vector();
    HashSet covered = new HashSet();
    HashSet res_s_9 = new HashSet();
    {

      Vector e_set_14 = null;
      String par_15 = null;
      Vector unArg_16 = null;
      {

        Vector res_l_17 = new Vector();
        HashSet resBind_s_19 = new HashSet();
        HashSet riseq_23 = new HashSet();
        int max_24 = elist.size();
        for (int i_25 = 1; i_25 <= max_24; i_25++) 
          riseq_23.add(new Long(i_25));
        resBind_s_19 = riseq_23;
        Vector bind_l_18 = null;
        bind_l_18 = UTIL.Sort(resBind_s_19);
        Long i = null;
        for (Iterator enm_37 = bind_l_18.iterator(); enm_37.hasNext(); ) {

          Long e_21 = UTIL.NumberToLong(enm_37.next());
          i = e_21;
          Boolean pred_30 = null;
          XmlEntity par_31 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_31 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_30 = hasAttributeValue((XmlEntity) par_31, new String("extender"), new String("umltrans"));
          if (pred_30.booleanValue()) {

            String reselem_26 = null;
            XmlEntity par_27 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              par_27 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_26 = GetCoveredExtension((XmlEntity) par_27);
            res_l_17.add(reselem_26);
          }
        }
        unArg_16 = res_l_17;
      }
      String rdcseq_38 = new String();
      for (Iterator enm_41 = unArg_16.iterator(); enm_41.hasNext(); ) {

        String e_39 = UTIL.ConvertToString(enm_41.next());
        rdcseq_38 = rdcseq_38.concat(e_39);
      }
      par_15 = rdcseq_38;
      e_set_14 = (Vector) StdLib.Split(par_15, new Character(' '));
      String c = null;
      {
        for (Iterator enm_44 = e_set_14.iterator(); enm_44.hasNext(); ) {

          String elem_43 = UTIL.ConvertToString(enm_44.next());
          c = elem_43;
          res_s_9.add((IUmlMos) mosMap.get(c));
        }
      }
    }
    covered = res_s_9;
    IUmlInteractionConstraint guard = null;
    Boolean cond_47 = null;
    boolean tmpQuant_48 = false;
    {

      HashSet e1_set_55 = new HashSet(elist);
      XmlEntity gu = null;
      {
        for (Iterator enm_57 = e1_set_55.iterator(); enm_57.hasNext() && !tmpQuant_48; ) {

          XmlEntity elem_56 = (XmlEntity) enm_57.next();
          gu = (XmlEntity) elem_56;
          Boolean pred_49 = null;
          String var1_50 = null;
          var1_50 = gu.name;
          pred_49 = new Boolean(UTIL.equals(var1_50, new String("guard")));
          if (pred_49.booleanValue()) 
            tmpQuant_48 = true;
        }
      }
    }
    cond_47 = new Boolean(tmpQuant_48);
    if (cond_47.booleanValue()) {

      XmlEntity par_58 = null;
      {

        HashSet tmpSet_59 = new HashSet();
        HashSet res_s_63 = new HashSet();
        {

          HashSet e1_set_71 = new HashSet(elist);
          XmlEntity p = null;
          {
            for (Iterator enm_73 = e1_set_71.iterator(); enm_73.hasNext(); ) {

              XmlEntity elem_72 = (XmlEntity) enm_73.next();
              p = (XmlEntity) elem_72;
              Boolean pred_65 = null;
              String var1_66 = null;
              var1_66 = p.name;
              pred_65 = new Boolean(UTIL.equals(var1_66, new String("guard")));
              if (pred_65.booleanValue()) {
                res_s_63.add(p);
              }
            }
          }
        }
        tmpSet_59 = res_s_63;
        XmlEntity g = null;
        boolean succ_61 = false;
        for (Iterator enm_74 = tmpSet_59.iterator(); enm_74.hasNext() && !succ_61; ) {

          XmlEntity tmpElem_62 = (XmlEntity) enm_74.next();
          succ_61 = true;
          g = (XmlEntity) tmpElem_62;
        }
        if (!succ_61) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        par_58 = (XmlEntity) g;
      }
      guard = (IUmlInteractionConstraint) GetGuard((XmlEntity) par_58);
    }
    else 
      guard = null;
    return (IUmlInteractionOperand) new UmlInteractionOperand(name, fragments, covered, guard);
  }
// ***** VDMTOOLS END Name=build_uOperand#1|XmlEntity


// ***** VDMTOOLS START Name=GetCoveredExtension#1|XmlEntity KEEP=NO
  private String GetCoveredExtension (final XmlEntity e) throws CGException {

    String varRes_2 = null;
    {

      Vector elist = null;
      XmlEntityList tmpRec_5 = null;
      tmpRec_5 = e.entities;
      elist = tmpRec_5.entities;
      {

        HashSet tmpSet_7 = new HashSet();
        HashSet res_s_11 = new HashSet();
        {

          HashSet e1_set_21 = new HashSet(elist);
          XmlEntity co = null;
          {
            for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

              XmlEntity elem_22 = (XmlEntity) enm_23.next();
              co = (XmlEntity) elem_22;
              Boolean pred_15 = null;
              String var1_16 = null;
              var1_16 = co.name;
              pred_15 = new Boolean(UTIL.equals(var1_16, new String("covered")));
              if (pred_15.booleanValue()) {

                String res_s_12 = null;
                XmlData tmpRec_13 = null;
                tmpRec_13 = co.data;
                res_s_12 = tmpRec_13.data;
                res_s_11.add(res_s_12);
              }
            }
          }
        }
        tmpSet_7 = res_s_11;
        String p = null;
        boolean succ_9 = false;
        for (Iterator enm_24 = tmpSet_7.iterator(); enm_24.hasNext() && !succ_9; ) {

          String tmpElem_10 = UTIL.ConvertToString(enm_24.next());
          succ_9 = true;
          p = tmpElem_10;
        }
        if (!succ_9) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        varRes_2 = p;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetCoveredExtension#1|XmlEntity


// ***** VDMTOOLS START Name=GetCovered#1|XmlEntity KEEP=NO
  private Vector GetCovered (final XmlEntity e) throws CGException {

    Vector varRes_2 = null;
    {

      String text = null;
      text = ((XmlAttribute) getAttribute((XmlEntity) e, new String("covered"))).val;
      varRes_2 = (Vector) StdLib.Split(text, new Character(' '));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetCovered#1|XmlEntity


// ***** VDMTOOLS START Name=GetGuard#1|XmlEntity KEEP=NO
  private IUmlInteractionConstraint GetGuard (final XmlEntity e) throws CGException {

    UmlInteractionConstraint varRes_2 = null;
    {

      Vector elist = null;
      XmlEntityList tmpRec_5 = null;
      tmpRec_5 = e.entities;
      elist = tmpRec_5.entities;
      IUmlValueSpecification minint = null;
      {

        HashSet tmpSet_8 = new HashSet();
        HashSet res_s_12 = new HashSet();
        {

          HashSet e1_set_21 = new HashSet(elist);
          XmlEntity p = null;
          {
            for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

              XmlEntity elem_22 = (XmlEntity) enm_23.next();
              p = (XmlEntity) elem_22;
              Boolean pred_15 = null;
              String var1_16 = null;
              var1_16 = p.name;
              pred_15 = new Boolean(UTIL.equals(var1_16, new String("minint")));
              if (pred_15.booleanValue()) {
                res_s_12.add((IUmlValueSpecification) getGuardConstraintValue((XmlEntity) p));
              }
            }
          }
        }
        tmpSet_8 = res_s_12;
        IUmlValueSpecification tmp = null;
        boolean succ_10 = false;
        for (Iterator enm_24 = tmpSet_8.iterator(); enm_24.hasNext() && !succ_10; ) {

          IUmlValueSpecification tmpElem_11 = (IUmlValueSpecification) enm_24.next();
          succ_10 = true;
          tmp = (IUmlValueSpecification) tmpElem_11;
        }
        if (!succ_10) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        minint = (IUmlValueSpecification) tmp;
      }
      IUmlValueSpecification maxint = null;
      {

        HashSet tmpSet_26 = new HashSet();
        HashSet res_s_30 = new HashSet();
        {

          HashSet e1_set_39 = new HashSet(elist);
          XmlEntity p = null;
          {
            for (Iterator enm_41 = e1_set_39.iterator(); enm_41.hasNext(); ) {

              XmlEntity elem_40 = (XmlEntity) enm_41.next();
              p = (XmlEntity) elem_40;
              Boolean pred_33 = null;
              String var1_34 = null;
              var1_34 = p.name;
              pred_33 = new Boolean(UTIL.equals(var1_34, new String("maxint")));
              if (pred_33.booleanValue()) {
                res_s_30.add((IUmlValueSpecification) getGuardConstraintValue((XmlEntity) p));
              }
            }
          }
        }
        tmpSet_26 = res_s_30;
        IUmlValueSpecification tmp = null;
        boolean succ_28 = false;
        for (Iterator enm_42 = tmpSet_26.iterator(); enm_42.hasNext() && !succ_28; ) {

          IUmlValueSpecification tmpElem_29 = (IUmlValueSpecification) enm_42.next();
          succ_28 = true;
          tmp = (IUmlValueSpecification) tmpElem_29;
        }
        if (!succ_28) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        maxint = (IUmlValueSpecification) tmp;
      }
      varRes_2 = (UmlInteractionConstraint) new UmlInteractionConstraint(minint, maxint);
    }
    return (IUmlInteractionConstraint) varRes_2;
  }
// ***** VDMTOOLS END Name=GetGuard#1|XmlEntity


// ***** VDMTOOLS START Name=getGuardConstraintValue#1|XmlEntity KEEP=NO
  private IUmlValueSpecification getGuardConstraintValue (final XmlEntity e) throws CGException {

    UmlLiteralInteger varRes_2 = null;
    Boolean cond_4 = null;
    {
      if ((cond_4 = hasAttribute((XmlEntity) e, new String("value"))).booleanValue()) 
        cond_4 = isAttributeType((XmlEntity) e, new String("uml:LiteralInteger"));
    }
    if (cond_4.booleanValue()) {

      Long arg_11 = null;
      String par_12 = null;
      par_12 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("value"))).val;
      arg_11 = UTIL.NumberToLong(StdLib.StringToInt(par_12));
      varRes_2 = new UmlLiteralInteger(arg_11);
    }
    else 
      varRes_2 = null;
    return (IUmlValueSpecification) varRes_2;
  }
// ***** VDMTOOLS END Name=getGuardConstraintValue#1|XmlEntity


// ***** VDMTOOLS START Name=buildCallEventMap#1|HashSet KEEP=NO
  private HashMap buildCallEventMap (final HashSet elist) throws CGException {

    HashMap m = new HashMap();
    HashMap res_m_4 = new HashMap();
    {

      XmlEntity e = null;
      {
        for (Iterator enm_19 = elist.iterator(); enm_19.hasNext(); ) {

          XmlEntity elem_18 = (XmlEntity) enm_19.next();
          e = (XmlEntity) elem_18;
          String md_5 = null;
          md_5 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
          UmlCallEvent mr_9 = null;
          IUmlOperation arg_10 = null;
          String tmppar_12 = null;
          tmppar_12 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("operation"))).val;
          arg_10 = (IUmlOperation) idToOperationMap.get(tmppar_12);
          mr_9 = new UmlCallEvent(arg_10);
          res_m_4.put(md_5, mr_9);
        }
      }
    }
    m = res_m_4;
    return m;
  }
// ***** VDMTOOLS END Name=buildCallEventMap#1|HashSet


// ***** VDMTOOLS START Name=VisitXmlAttribute#1|XmlAttribute KEEP=NO
  public void VisitXmlAttribute (final XmlAttribute var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=VisitXmlAttribute#1|XmlAttribute


// ***** VDMTOOLS START Name=VisitXmlData#1|XmlData KEEP=NO
  public void VisitXmlData (final XmlData var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=VisitXmlData#1|XmlData


// ***** VDMTOOLS START Name=setEncoding#1|String KEEP=NO
  public void setEncoding (final String encodingType) throws CGException {}
// ***** VDMTOOLS END Name=setEncoding#1|String

}
;