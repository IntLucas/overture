


//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-11-27 by the VDM++ to JAVA Code Generator
// (v8.2 - Fri 29-May-2009 11:13:11)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans.uml2vdm;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.api.io.*;
import org.overturetool.api.io.*;
import org.overturetool.api.*;
import org.overturetool.api.xml.*;
import org.overturetool.umltrans.*;
import org.overturetool.umltrans.api.Util;
import org.overturetool.umltrans.uml.*;
import org.overturetool.umltrans.uml2vdm.*;
import org.overturetool.umltrans.vdm2uml.*;
import org.overturetool.umltrans.api.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings({"all","unchecked","unused"})
public class Xml2UmlModel extends XmlVisitor {
// ***** VDMTOOLS START Name=removeEaPrefix#1|String KEEP=YES
  public String removeEaPrefix (final String name) throws CGException {
	  
	  if(name !=null && name.startsWith("EA") && name.contains("_") && name.indexOf('_')+1 < name.length())
	  {
		  log.warn("Removing: " + name.substring(0,name.indexOf('_')+1)+" from: "+ name + " => "+name.substring(name.indexOf('_')+1));
		  return name.substring(name.indexOf('_')+1);
	  }
    return name;
  }
// ***** VDMTOOLS END Name=removeEaPrefix#1|String



// ***** VDMTOOLS START Name=QualifierInfo KEEP=NO
@SuppressWarnings({"all","unchecked","unused"})
  public static class QualifierInfo implements Record {

@SuppressWarnings({"all","unchecked","unused"})
    public String classId;

    public String qualifier;


    public QualifierInfo () {}


    public QualifierInfo (String p1, String p2) {

      classId = p1;
      qualifier = p2;
    }


    public Object clone () {
      return new QualifierInfo(classId, qualifier);
    }


    public String toString () {
      return "mk_Xml2UmlModel`QualifierInfo(" + UTIL.toString(classId) + "," + UTIL.toString(qualifier) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof QualifierInfo)) 
        return false;
      else {

        QualifierInfo temp = (QualifierInfo) obj;
        return UTIL.equals(classId, temp.classId) && UTIL.equals(qualifier, temp.qualifier);
      }
    }


    public int hashCode () {
      return (classId == null ? 0 : classId.hashCode()) + (qualifier == null ? 0 : qualifier.hashCode());
    }

  }
// ***** VDMTOOLS END Name=QualifierInfo
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=result KEEP=NO
  public IUmlModel result = null;
// ***** VDMTOOLS END Name=result

// ***** VDMTOOLS START Name=primiticeTypes KEEP=NO
  private HashSet primiticeTypes = new HashSet();
// ***** VDMTOOLS END Name=primiticeTypes

// ***** VDMTOOLS START Name=classes KEEP=NO
  private HashSet classes = new HashSet();
// ***** VDMTOOLS END Name=classes

// ***** VDMTOOLS START Name=associations KEEP=NO
  private HashSet associations = new HashSet();
// ***** VDMTOOLS END Name=associations

// ***** VDMTOOLS START Name=constraints KEEP=NO
  private HashSet constraints = new HashSet();
// ***** VDMTOOLS END Name=constraints

// ***** VDMTOOLS START Name=classesTypeMap KEEP=NO
  private HashMap classesTypeMap = new HashMap();
// ***** VDMTOOLS END Name=classesTypeMap

// ***** VDMTOOLS START Name=collaborations KEEP=NO
  private HashSet collaborations = new HashSet();
// ***** VDMTOOLS END Name=collaborations

// ***** VDMTOOLS START Name=idToclassesMap KEEP=NO
  private HashMap idToclassesMap = new HashMap();
// ***** VDMTOOLS END Name=idToclassesMap

// ***** VDMTOOLS START Name=idToOperationMap KEEP=NO
  private HashMap idToOperationMap = new HashMap();
// ***** VDMTOOLS END Name=idToOperationMap

// ***** VDMTOOLS START Name=idToClallEventMap KEEP=NO
  private HashMap idToClallEventMap = new HashMap();
// ***** VDMTOOLS END Name=idToClallEventMap

// ***** VDMTOOLS START Name=lifeLineMap KEEP=NO
  private HashMap lifeLineMap = new HashMap();
// ***** VDMTOOLS END Name=lifeLineMap

// ***** VDMTOOLS START Name=mosMap KEEP=NO
  private HashMap mosMap = new HashMap();
// ***** VDMTOOLS END Name=mosMap

// ***** VDMTOOLS START Name=besMap KEEP=NO
  private HashMap besMap = new HashMap();
// ***** VDMTOOLS END Name=besMap

// ***** VDMTOOLS START Name=combiMap KEEP=NO
  private HashMap combiMap = new HashMap();
// ***** VDMTOOLS END Name=combiMap

// ***** VDMTOOLS START Name=associationToQualifier KEEP=NO
  private HashMap associationToQualifier = new HashMap();
// ***** VDMTOOLS END Name=associationToQualifier

// ***** VDMTOOLS START Name=log KEEP=NO
  private StatusLog log = null;
// ***** VDMTOOLS END Name=log

// ***** VDMTOOLS START Name=eaTypePrefixes KEEP=NO
  private static final HashSet eaTypePrefixes;
// ***** VDMTOOLS END Name=eaTypePrefixes


// ***** VDMTOOLS START Name=static KEEP=NO
  static {

    HashSet eaTypePrefixestemp = new HashSet();
    {
      try {

        HashSet tmpVal_1 = new HashSet();
        tmpVal_1 = new HashSet();
        tmpVal_1.add(new String("EAJava_"));
        tmpVal_1.add(new String("EAVisual Basic_"));
        tmpVal_1.add(new String("EAActionScript_"));
        tmpVal_1.add(new String("EAnone_"));
        tmpVal_1.add(new String("EAC_"));
        tmpVal_1.add(new String("EAVBNet_"));
        tmpVal_1.add(new String("EAC++_"));
        tmpVal_1.add(new String("EAPHP_"));
        tmpVal_1.add(new String("EAPython_"));
        tmpVal_1.add(new String("EAC#_"));
        eaTypePrefixestemp = tmpVal_1;
      }
      catch (Throwable e) {
        System.out.println(e.getMessage());
      }
    }
    eaTypePrefixes = eaTypePrefixestemp;
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=vdm_init_Xml2UmlModel KEEP=NO
  private void vdm_init_Xml2UmlModel () throws CGException {
    try {

      result = null;
      primiticeTypes = new HashSet();
      primiticeTypes.add(new String("char"));
      primiticeTypes.add(new String("int"));
      primiticeTypes.add(new String("bool"));
      primiticeTypes.add(new String("String"));
      primiticeTypes.add(new String("unlimitedNatural"));
      classes = new HashSet();
      associations = new HashSet();
      constraints = new HashSet();
      classesTypeMap = new HashMap();
      collaborations = new HashSet();
      idToclassesMap = new HashMap();
      idToOperationMap = new HashMap();
      idToClallEventMap = new HashMap();
      lifeLineMap = new HashMap();
      mosMap = new HashMap();
      besMap = new HashMap();
      combiMap = new HashMap();
      associationToQualifier = new HashMap();
      log = (StatusLog) new StatusLog();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Xml2UmlModel


// ***** VDMTOOLS START Name=Xml2UmlModel KEEP=NO
  public Xml2UmlModel () throws CGException {
    vdm_init_Xml2UmlModel();
  }
// ***** VDMTOOLS END Name=Xml2UmlModel


// ***** VDMTOOLS START Name=Xml2UmlModel#1|StatusLog KEEP=NO
  public Xml2UmlModel (final StatusLog l) throws CGException {

    vdm_init_Xml2UmlModel();
    log = (StatusLog) UTIL.clone(l);
  }
// ***** VDMTOOLS END Name=Xml2UmlModel#1|StatusLog


// ***** VDMTOOLS START Name=VisitXmlDocument#1|XmlDocument KEEP=NO
  public void VisitXmlDocument (final XmlDocument doc) throws CGException {

    XmlEntity root = null;
    Vector unArg_2 = null;
    XmlEntityList tmpRec_3 = null;
    tmpRec_3 = doc.entities;
    unArg_2 = tmpRec_3.entities;
    root = (XmlEntity) unArg_2.get(0);
    Vector firstPackageAndRoot = null;
    Vector var1_5 = null;
    XmlEntityList tmpRec_6 = null;
    tmpRec_6 = root.entities;
    var1_5 = tmpRec_6.entities;
    Vector var2_8 = null;
    var2_8 = new Vector();
    var2_8.add(root);
    firstPackageAndRoot = (Vector) var1_5.clone();
    firstPackageAndRoot.addAll(var2_8);
    XmlEntity model = null;
    Vector unArg_10 = null;
    {

      Vector res_l_11 = new Vector();
      HashSet resBind_s_13 = new HashSet();
      HashSet riseq_17 = new HashSet();
      int max_18 = firstPackageAndRoot.size();
      for (int i_19 = 1; i_19 <= max_18; i_19++) 
        riseq_17.add(new Long(i_19));
      resBind_s_13 = riseq_17;
      Vector bind_l_12 = null;
      bind_l_12 = UTIL.Sort(resBind_s_13);
      Long i = null;
      for (Iterator enm_30 = bind_l_12.iterator(); enm_30.hasNext(); ) {

        Long e_15 = UTIL.NumberToLong(enm_30.next());
        i = e_15;
        Boolean pred_23 = null;
        String var1_24 = null;
        XmlEntity tmpRec_25 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
          tmpRec_25 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_24 = tmpRec_25.name;
        pred_23 = new Boolean(UTIL.equals(var1_24, new String("uml:Model")));
        if (pred_23.booleanValue()) {

          XmlEntity reselem_20 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
            reselem_20 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_11.add(reselem_20);
        }
      }
      unArg_10 = res_l_11;
    }
    model = (XmlEntity) unArg_10.get(0);
    XmlEntity extention = null;
    Vector unArg_31 = null;
    {

      Vector res_l_32 = new Vector();
      HashSet resBind_s_34 = new HashSet();
      HashSet riseq_38 = new HashSet();
      int max_39 = firstPackageAndRoot.size();
      for (int i_40 = 1; i_40 <= max_39; i_40++) 
        riseq_38.add(new Long(i_40));
      resBind_s_34 = riseq_38;
      Vector bind_l_33 = null;
      bind_l_33 = UTIL.Sort(resBind_s_34);
      Long i = null;
      for (Iterator enm_58 = bind_l_33.iterator(); enm_58.hasNext(); ) {

        Long e_36 = UTIL.NumberToLong(enm_58.next());
        i = e_36;
        Boolean pred_44 = null;
        Boolean var1_45 = null;
        XmlEntity par_46 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
          par_46 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_45 = HasAttributeValue((XmlEntity) par_46, new String("extender"), new String("Enterprise Architect"));
        {
          if ((pred_44 = var1_45).booleanValue()) {

            Boolean var2_51 = null;
            XmlEntity par_52 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
              par_52 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_51 = HasAttributeValue((XmlEntity) par_52, new String("extenderID"), new String("6.5"));
            pred_44 = var2_51;
          }
        }
        if (pred_44.booleanValue()) {

          XmlEntity reselem_41 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= firstPackageAndRoot.size())) 
            reselem_41 = (XmlEntity) firstPackageAndRoot.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_32.add(reselem_41);
        }
      }
      unArg_31 = res_l_32;
    }
    extention = (XmlEntity) unArg_31.get(0);
    XmlEntity vdm_package = null;
    Vector unArg_59 = null;
    {

      Vector res_l_60 = new Vector();
      HashSet resBind_s_62 = new HashSet();
      Vector unArg_65 = null;
      XmlEntityList tmpRec_66 = null;
      tmpRec_66 = model.entities;
      unArg_65 = tmpRec_66.entities;
      HashSet riseq_68 = new HashSet();
      int max_69 = unArg_65.size();
      for (int i_70 = 1; i_70 <= max_69; i_70++) 
        riseq_68.add(new Long(i_70));
      resBind_s_62 = riseq_68;
      Vector bind_l_61 = null;
      bind_l_61 = UTIL.Sort(resBind_s_62);
      Long i = null;
      for (Iterator enm_84 = bind_l_61.iterator(); enm_84.hasNext(); ) {

        Long e_64 = UTIL.NumberToLong(enm_84.next());
        i = e_64;
        Boolean pred_76 = null;
        XmlEntity par_77 = null;
        Vector tmp_l_78 = null;
        XmlEntityList tmpRec_79 = null;
        tmpRec_79 = model.entities;
        tmp_l_78 = tmpRec_79.entities;
        if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_78.size())) 
          par_77 = (XmlEntity) tmp_l_78.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_76 = IsAttributeType((XmlEntity) par_77, new String("uml:Package"));
        if (pred_76.booleanValue()) {

          XmlEntity reselem_71 = null;
          Vector tmp_l_72 = null;
          XmlEntityList tmpRec_73 = null;
          tmpRec_73 = model.entities;
          tmp_l_72 = tmpRec_73.entities;
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_72.size())) 
            reselem_71 = (XmlEntity) tmp_l_72.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_60.add(reselem_71);
        }
      }
      unArg_59 = res_l_60;
    }
    vdm_package = (XmlEntity) unArg_59.get(0);
    {

      Vector pes = null;
      XmlEntityList tmpRec_87 = null;
      tmpRec_87 = vdm_package.entities;
      pes = tmpRec_87.entities;
      {

        HashMap rhs_89 = new HashMap();
        HashMap modmap_90 = new HashMap();
        HashMap res_m_93 = new HashMap();
        {

          HashSet e_set_110 = new HashSet();
          HashSet riseq_112 = new HashSet();
          int max_113 = pes.size();
          for (int i_114 = 1; i_114 <= max_113; i_114++) 
            riseq_112.add(new Long(i_114));
          e_set_110 = riseq_112;
          Long i = null;
          {
            for (Iterator enm_116 = e_set_110.iterator(); enm_116.hasNext(); ) {

              Long elem_115 = UTIL.NumberToLong(enm_116.next());
              i = elem_115;
              Boolean pred_104 = null;
              XmlEntity par_105 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_105 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_104 = IsAttributeType((XmlEntity) par_105, new String("uml:Class"));
              if (pred_104.booleanValue()) {

                String md_94 = null;
                XmlAttribute tmpRec_95 = null;
                XmlEntity par_96 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_96 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                tmpRec_95 = (XmlAttribute) GetAttribute((XmlEntity) par_96, new String("xmi:id"));
                md_94 = tmpRec_95.val;
                String mr_100 = null;
                XmlEntity par_101 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_101 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                mr_100 = GetNameAttribute((XmlEntity) par_101);
                res_m_93.put(md_94, mr_100);
              }
            }
          }
        }
        modmap_90 = res_m_93;
        rhs_89 = new HashMap(classesTypeMap);
        rhs_89.putAll(modmap_90);
        classesTypeMap = (HashMap) UTIL.clone(rhs_89);
        HashSet rhs_117 = new HashSet();
        HashSet var2_119 = new HashSet();
        HashSet res_s_120 = new HashSet();
        {

          HashSet e_set_138 = new HashSet();
          HashSet riseq_140 = new HashSet();
          int max_141 = pes.size();
          for (int i_142 = 1; i_142 <= max_141; i_142++) 
            riseq_140.add(new Long(i_142));
          e_set_138 = riseq_140;
          Long i = null;
          {
            for (Iterator enm_144 = e_set_138.iterator(); enm_144.hasNext(); ) {

              Long elem_143 = UTIL.NumberToLong(enm_144.next());
              i = elem_143;
              Boolean pred_125 = null;
              Boolean var1_126 = null;
              XmlEntity par_127 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_127 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var1_126 = IsAttributeType((XmlEntity) par_127, new String("uml:Class"));
              {
                if ((pred_125 = var1_126).booleanValue()) {

                  Boolean var2_131 = null;
                  String var1_132 = null;
                  XmlEntity par_133 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                    par_133 = (XmlEntity) pes.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  var1_132 = GetNameAttribute((XmlEntity) par_133);
                  var2_131 = new Boolean(!primiticeTypes.contains(var1_132));
                  pred_125 = var2_131;
                }
              }
              if (pred_125.booleanValue()) {

                IUmlClass res_s_121 = null;
                XmlEntity par_122 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_122 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_121 = (IUmlClass) ExstractClass((XmlEntity) par_122);
                res_s_120.add(res_s_121);
              }
            }
          }
        }
        var2_119 = res_s_120;
        rhs_117 = (HashSet) classes.clone();
        rhs_117.addAll(var2_119);
        classes = (HashSet) UTIL.clone(rhs_117);
        {

          HashSet connectors = new HashSet();
          HashSet unArg_147 = new HashSet();
          HashSet res_s_148 = new HashSet();
          {

            Vector e_set_160 = null;
            XmlEntityList tmpRec_161 = null;
            tmpRec_161 = extention.entities;
            e_set_160 = tmpRec_161.entities;
            XmlEntity e = null;
            {
              for (Iterator enm_164 = e_set_160.iterator(); enm_164.hasNext(); ) {

                XmlEntity elem_163 = (XmlEntity) enm_164.next();
                e = (XmlEntity) elem_163;
                Boolean pred_155 = null;
                String var1_156 = null;
                var1_156 = e.name;
                pred_155 = new Boolean(UTIL.equals(var1_156, new String("connectors")));
                if (pred_155.booleanValue()) {

                  HashSet res_s_149 = new HashSet();
                  Vector unArg_150 = null;
                  XmlEntityList tmpRec_151 = null;
                  tmpRec_151 = e.entities;
                  unArg_150 = tmpRec_151.entities;
                  HashSet set_153 = new HashSet();
                  Enumeration enm_154 = unArg_150.elements();
                  while ( enm_154.hasMoreElements())
                    set_153.add(enm_154.nextElement());
                  res_s_149 = set_153;
                  res_s_148.add(res_s_149);
                }
              }
            }
          }
          unArg_147 = res_s_148;
          HashSet rduset_165 = new HashSet();
          for (Iterator enm_167 = unArg_147.iterator(); enm_167.hasNext(); ) {

            HashSet e_166 = (HashSet) enm_167.next();
            rduset_165.addAll(e_166);
          }
          connectors = rduset_165;
          {

            XmlEntity v = null;
            for (Iterator enm_174 = connectors.iterator(); enm_174.hasNext(); ) {

              XmlEntity elem_169 = (XmlEntity) enm_174.next();
              v = (XmlEntity) elem_169;
              BuildAssociationQualifier((XmlEntity) v);
            }
          }
        }
        HashSet rhs_175 = new HashSet();
        HashSet var2_177 = new HashSet();
        HashSet res_s_178 = new HashSet();
        {

          HashSet e_set_195 = new HashSet();
          HashSet riseq_197 = new HashSet();
          int max_198 = pes.size();
          for (int i_199 = 1; i_199 <= max_198; i_199++) 
            riseq_197.add(new Long(i_199));
          e_set_195 = riseq_197;
          Long i = null;
          {
            for (Iterator enm_201 = e_set_195.iterator(); enm_201.hasNext(); ) {

              Long elem_200 = UTIL.NumberToLong(enm_201.next());
              i = elem_200;
              Boolean pred_183 = null;
              Boolean var1_184 = null;
              XmlEntity par_185 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_185 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var1_184 = IsAttributeType((XmlEntity) par_185, new String("uml:Association"));
              {
                if (!(pred_183 = var1_184).booleanValue()) {

                  Boolean var2_189 = null;
                  XmlEntity par_190 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                    par_190 = (XmlEntity) pes.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  var2_189 = IsAttributeType((XmlEntity) par_190, new String("uml:Connector"));
                  pred_183 = var2_189;
                }
              }
              if (pred_183.booleanValue()) {

                IUmlAssociation res_s_179 = null;
                XmlEntity par_180 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_180 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_179 = (IUmlAssociation) BuildAssociation((XmlEntity) par_180);
                res_s_178.add(res_s_179);
              }
            }
          }
        }
        var2_177 = res_s_178;
        rhs_175 = (HashSet) associations.clone();
        rhs_175.addAll(var2_177);
        associations = (HashSet) UTIL.clone(rhs_175);
        HashSet rhs_202 = new HashSet();
        HashSet var2_204 = new HashSet();
        HashSet res_s_205 = new HashSet();
        {

          HashSet e_set_216 = new HashSet();
          HashSet riseq_218 = new HashSet();
          int max_219 = pes.size();
          for (int i_220 = 1; i_220 <= max_219; i_220++) 
            riseq_218.add(new Long(i_220));
          e_set_216 = riseq_218;
          Long i = null;
          {
            for (Iterator enm_222 = e_set_216.iterator(); enm_222.hasNext(); ) {

              Long elem_221 = UTIL.NumberToLong(enm_222.next());
              i = elem_221;
              Boolean pred_210 = null;
              XmlEntity par_211 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_211 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_210 = IsAttributeType((XmlEntity) par_211, new String("uml:Constraint"));
              if (pred_210.booleanValue()) {

                IUmlConstraint res_s_206 = null;
                XmlEntity par_207 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_207 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_206 = (IUmlConstraint) BuildConstraint((XmlEntity) par_207);
                res_s_205.add(res_s_206);
              }
            }
          }
        }
        var2_204 = res_s_205;
        rhs_202 = (HashSet) constraints.clone();
        rhs_202.addAll(var2_204);
        constraints = (HashSet) UTIL.clone(rhs_202);
        HashMap rhs_223 = new HashMap();
        HashSet par_224 = new HashSet();
        HashSet res_s_225 = new HashSet();
        {

          HashSet e_set_235 = new HashSet();
          HashSet riseq_237 = new HashSet();
          int max_238 = pes.size();
          for (int i_239 = 1; i_239 <= max_238; i_239++) 
            riseq_237.add(new Long(i_239));
          e_set_235 = riseq_237;
          Long i = null;
          {
            for (Iterator enm_241 = e_set_235.iterator(); enm_241.hasNext(); ) {

              Long elem_240 = UTIL.NumberToLong(enm_241.next());
              i = elem_240;
              Boolean pred_229 = null;
              XmlEntity par_230 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_230 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_229 = IsAttributeType((XmlEntity) par_230, new String("uml:CallEvent"));
              if (pred_229.booleanValue()) {

                XmlEntity res_s_226 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  res_s_226 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_225.add(res_s_226);
              }
            }
          }
        }
        par_224 = res_s_225;
        rhs_223 = BuildCallEventMap(par_224);
        idToClallEventMap = (HashMap) UTIL.clone(rhs_223);
        HashSet rhs_242 = new HashSet();
        HashSet var2_244 = new HashSet();
        HashSet res_s_245 = new HashSet();
        {

          HashSet e_set_256 = new HashSet();
          HashSet riseq_258 = new HashSet();
          int max_259 = pes.size();
          for (int i_260 = 1; i_260 <= max_259; i_260++) 
            riseq_258.add(new Long(i_260));
          e_set_256 = riseq_258;
          Long i = null;
          {
            for (Iterator enm_262 = e_set_256.iterator(); enm_262.hasNext(); ) {

              Long elem_261 = UTIL.NumberToLong(enm_262.next());
              i = elem_261;
              Boolean pred_250 = null;
              XmlEntity par_251 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_251 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_250 = IsAttributeType((XmlEntity) par_251, new String("uml:Collaboration"));
              if (pred_250.booleanValue()) {

                IUmlCollaboration res_s_246 = null;
                XmlEntity par_247 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_247 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_246 = (IUmlCollaboration) BuildCollobration((XmlEntity) par_247);
                res_s_245.add(res_s_246);
              }
            }
          }
        }
        var2_244 = res_s_245;
        rhs_242 = (HashSet) collaborations.clone();
        rhs_242.addAll(var2_244);
        collaborations = (HashSet) UTIL.clone(rhs_242);
      }
    }
    UmlModel rhs_263 = null;
    HashSet arg_265 = new HashSet();
    HashSet var1_267 = new HashSet();
    HashSet var1_268 = new HashSet();
    var1_268 = (HashSet) classes.clone();
    var1_268.addAll(associations);
    var1_267 = (HashSet) var1_268.clone();
    var1_267.addAll(constraints);
    arg_265 = (HashSet) var1_267.clone();
    arg_265.addAll(collaborations);
    rhs_263 = new UmlModel(GetNameAttribute((XmlEntity) vdm_package), arg_265);
    result = (IUmlModel) UTIL.clone(rhs_263);
  }
// ***** VDMTOOLS END Name=VisitXmlDocument#1|XmlDocument


// ***** VDMTOOLS START Name=ExstractClass#1|XmlEntity KEEP=NO
  private IUmlClass ExstractClass (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = GetNameAttribute((XmlEntity) e);
    String name = null;
    name = tmpVal_3;
    HashSet dBlocks = BuildDefBlock((XmlEntity) e, name);
    Boolean vdm_abstract = null;
    if (HasAttribute((XmlEntity) e, new String("isAbstract")).booleanValue()) {

      String par_13 = null;
      par_13 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("isAbstract"))).val;
      vdm_abstract = (Boolean) StdLib.StringToBool(par_13);
    }
    else 
      vdm_abstract = new Boolean(false);
    Vector supers = null;
    {

      Vector eg = null;
      XmlEntityList tmpRec_20 = null;
      tmpRec_20 = e.entities;
      eg = tmpRec_20.entities;
      {

        Vector res_l_22 = new Vector();
        HashSet resBind_s_24 = new HashSet();
        HashSet riseq_28 = new HashSet();
        int max_29 = eg.size();
        for (int i_30 = 1; i_30 <= max_29; i_30++) 
          riseq_28.add(new Long(i_30));
        resBind_s_24 = riseq_28;
        Vector bind_l_23 = null;
        bind_l_23 = UTIL.Sort(resBind_s_24);
        Long i = null;
        for (Iterator enm_41 = bind_l_23.iterator(); enm_41.hasNext(); ) {

          Long e_26 = UTIL.NumberToLong(enm_41.next());
          i = e_26;
          Boolean pred_35 = null;
          XmlEntity par_36 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= eg.size())) 
            par_36 = (XmlEntity) eg.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_35 = IsAttributeType((XmlEntity) par_36, new String("uml:Generalization"));
          if (pred_35.booleanValue()) {

            IUmlClassNameType reselem_31 = null;
            XmlEntity par_32 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= eg.size())) 
              par_32 = (XmlEntity) eg.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_31 = (IUmlClassNameType) ExstractGeneralization((XmlEntity) par_32);
            res_l_22.add(reselem_31);
          }
        }
        supers = res_l_22;
      }
    }
    UmlVisibilityKind tmpVal_42 = null;
    tmpVal_42 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
    IUmlVisibilityKind visibility = null;
    visibility = (IUmlVisibilityKind) tmpVal_42;
    Boolean isStatic = new Boolean(false);
    Boolean active = null;
    if (HasAttribute((XmlEntity) e, new String("isActive")).booleanValue()) {

      XmlAttribute a = (XmlAttribute) (XmlAttribute) GetAttribute((XmlEntity) e, new String("isActive"));
      if (new Boolean(!UTIL.equals(a, null)).booleanValue()) {

        String par_58 = null;
        par_58 = a.val;
        active = (Boolean) StdLib.StringToBool(par_58);
      }
      else 
        active = new Boolean(false);
    }
    else 
      active = new Boolean(false);
    IUmlTemplateSignature template = null;
    String id = null;
    id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    IUmlClass cls = (IUmlClass) new UmlClass(name, dBlocks, vdm_abstract, supers, visibility, isStatic, active, template);
    {

      idToclassesMap.put(id, cls);
      log.addNewClassInfo(name, id);
      return (IUmlClass) cls;
    }
  }
// ***** VDMTOOLS END Name=ExstractClass#1|XmlEntity


// ***** VDMTOOLS START Name=ExstractGeneralization#1|XmlEntity KEEP=NO
  private IUmlClassNameType ExstractGeneralization (final XmlEntity e) throws CGException {

    String vdm_super = null;
    vdm_super = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("general"))).val;
    return (IUmlClassNameType) new UmlClassNameType(UTIL.ConvertToString(classesTypeMap.get(vdm_super)));
  }
// ***** VDMTOOLS END Name=ExstractGeneralization#1|XmlEntity


// ***** VDMTOOLS START Name=BuildDefBlock#2|XmlEntity|String KEEP=NO
  private HashSet BuildDefBlock (final XmlEntity e, final String name) throws CGException {

    Vector eList = null;
    XmlEntityList tmpRec_5 = null;
    tmpRec_5 = e.entities;
    eList = tmpRec_5.entities;
    HashSet tmpVal_7 = new HashSet();
    HashSet res_s_8 = new HashSet();
    {

      HashSet e_set_21 = new HashSet();
      HashSet riseq_23 = new HashSet();
      int max_24 = eList.size();
      for (int i_25 = 1; i_25 <= max_24; i_25++) 
        riseq_23.add(new Long(i_25));
      e_set_21 = riseq_23;
      Long i = null;
      {
        for (Iterator enm_27 = e_set_21.iterator(); enm_27.hasNext(); ) {

          Long elem_26 = UTIL.NumberToLong(enm_27.next());
          i = elem_26;
          Boolean pred_15 = null;
          XmlEntity par_16 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= eList.size())) 
            par_16 = (XmlEntity) eList.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_15 = IsAttributeType((XmlEntity) par_16, new String("uml:Property"));
          if (pred_15.booleanValue()) {

            IUmlProperty res_s_9 = null;
            XmlEntity par_10 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= eList.size())) 
              par_10 = (XmlEntity) eList.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_s_9 = (IUmlProperty) BuildProperty((XmlEntity) par_10, name, null);
            res_s_8.add(res_s_9);
          }
        }
      }
    }
    tmpVal_7 = res_s_8;
    HashSet props = new HashSet();
    props = tmpVal_7;
    HashSet ops = new HashSet();
    HashSet res_s_29 = new HashSet();
    {

      HashSet e1_set_42 = new HashSet(eList);
      XmlEntity p = null;
      {
        for (Iterator enm_44 = e1_set_42.iterator(); enm_44.hasNext(); ) {

          XmlEntity elem_43 = (XmlEntity) enm_44.next();
          p = (XmlEntity) elem_43;
          Boolean pred_32 = null;
          {
            if (!(pred_32 = IsAttributeType((XmlEntity) p, new String("uml:Operation"))).booleanValue()) {

              Boolean var2_36 = null;
              String var1_37 = null;
              var1_37 = p.name;
              var2_36 = new Boolean(UTIL.equals(var1_37, new String("ownedOperation")));
              pred_32 = var2_36;
            }
          }
          if (pred_32.booleanValue()) {
            res_s_29.add((IUmlOperation) BuildOperation((XmlEntity) p));
          }
        }
      }
    }
    ops = res_s_29;
    HashSet rexpr_45 = new HashSet();
    HashSet var1_46 = new HashSet();
    var1_46 = new HashSet();
    var1_46.add(new UmlOwnedProperties(props));
    HashSet var2_49 = new HashSet();
    var2_49 = new HashSet();
    var2_49.add(new UmlOwnedOperations(ops));
    rexpr_45 = (HashSet) var1_46.clone();
    rexpr_45.addAll(var2_49);
    return rexpr_45;
  }
// ***** VDMTOOLS END Name=BuildDefBlock#2|XmlEntity|String


// ***** VDMTOOLS START Name=BuildProperty#3|XmlEntity|String|String KEEP=NO
  private IUmlProperty BuildProperty (final XmlEntity e, final String ownerClass, final String associationId) throws CGException {

    String tmpVal_5 = null;
    if (HasAttribute((XmlEntity) e, new String("name")).booleanValue()) 
      tmpVal_5 = GetNameAttribute((XmlEntity) e);
    else 
      tmpVal_5 = new String("");
    String name = null;
    name = tmpVal_5;
    Object tmpVal_11 = null;
    if (HasAttribute((XmlEntity) e, new String("visibility")).booleanValue()) 
      tmpVal_11 = GetVisibility((XmlAttribute) (XmlAttribute) GetAttribute((XmlEntity) e, new String("visibility")));
    else 
      tmpVal_11 = new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
    IUmlVisibilityKind visibility = null;
    visibility = (IUmlVisibilityKind) tmpVal_11;
    IUmlMultiplicityElement multiplicity = (IUmlMultiplicityElement) (IUmlMultiplicityElement) GetMultiplicity((XmlEntity) e);
    String typeId = GetTypeId((XmlEntity) e);
    IUmlType tmpVal_24 = null;
    tmpVal_24 = (IUmlType) (IUmlType) FindType(typeId);
    IUmlType type = null;
    type = (IUmlType) tmpVal_24;
    Boolean isReadOnly = null;
    if (HasAttribute((XmlEntity) e, new String("isReadOnly")).booleanValue()) {

      String par_31 = null;
      par_31 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("isReadOnly"))).val;
      isReadOnly = (Boolean) StdLib.StringToBool(par_31);
    }
    else 
      isReadOnly = new Boolean(false);
    IUmlValueSpecification vdm_default = null;
    {

      HashSet dValue = new HashSet();
      HashSet res_s_38 = new HashSet();
      {

        Vector e_set_45 = null;
        XmlEntityList tmpRec_46 = null;
        tmpRec_46 = e.entities;
        e_set_45 = tmpRec_46.entities;
        XmlEntity el = null;
        {
          for (Iterator enm_49 = e_set_45.iterator(); enm_49.hasNext(); ) {

            XmlEntity elem_48 = (XmlEntity) enm_49.next();
            el = (XmlEntity) elem_48;
            Boolean pred_40 = null;
            String var1_41 = null;
            var1_41 = el.name;
            pred_40 = new Boolean(UTIL.equals(var1_41, new String("defaultValue")));
            if (pred_40.booleanValue()) {
              res_s_38.add(el);
            }
          }
        }
      }
      dValue = res_s_38;
      if (new Boolean((new Long(dValue.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

        XmlEntity par_55 = null;
        {

          HashSet tmpSet_56 = new HashSet();
          tmpSet_56 = dValue;
          XmlEntity d = null;
          boolean succ_58 = false;
          for (Iterator enm_60 = tmpSet_56.iterator(); enm_60.hasNext() && !succ_58; ) {

            XmlEntity tmpElem_59 = (XmlEntity) enm_60.next();
            succ_58 = true;
            d = (XmlEntity) tmpElem_59;
          }
          if (!succ_58) 
            UTIL.RunTime("Run-Time Error:The binding environment was empty");
          par_55 = (XmlEntity) d;
        }
        vdm_default = (IUmlValueSpecification) GetDefaultValue((XmlEntity) par_55);
      }
      else 
        vdm_default = null;
    }
    Boolean isComposite = new Boolean(false);
    Boolean isDerived = new Boolean(false);
    Boolean isStatic = new Boolean(false);
    IUmlType qualifier = null;
    Boolean cond_66 = null;
    Boolean var1_67 = null;
    {
      if ((var1_67 = new Boolean(!UTIL.equals(associationId, null))).booleanValue()) {

        Boolean var2_71 = null;
        var2_71 = new Boolean(associationToQualifier.containsKey(associationId));
        var1_67 = var2_71;
      }
    }
    {
      if ((cond_66 = var1_67).booleanValue()) {

        Boolean var2_74 = null;
        String var1_75 = null;
        var1_75 = ((QualifierInfo) associationToQualifier.get(associationId)).classId;
        var2_74 = new Boolean(UTIL.equals(var1_75, typeId));
        cond_66 = var2_74;
      }
    }
    if (cond_66.booleanValue()) {

      QualifierInfo qInfo = (QualifierInfo) associationToQualifier.get(associationId);
      String par_84 = null;
      par_84 = (qInfo).qualifier;
      qualifier = (IUmlType) FindType(par_84);
    }
    else 
      qualifier = null;
    return (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, ownerClass, qualifier);
  }
// ***** VDMTOOLS END Name=BuildProperty#3|XmlEntity|String|String


// ***** VDMTOOLS START Name=GetDefaultValue#1|XmlEntity KEEP=NO
  private IUmlValueSpecification GetDefaultValue (final XmlEntity e) throws CGException {

    String val = null;
    val = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("value"))).val;
    String typ = null;
    typ = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:type"))).val;
    Object rexpr_11 = null;
    boolean succ_12 = true;
    {

      succ_12 = true;
      if (!UTIL.equals(typ, new String("uml:LiteralString"))) 
        succ_12 = false;
      if (succ_12) 
        rexpr_11 = new UmlLiteralString(val);
    }
    if (!succ_12) {

      succ_12 = true;
      if (!UTIL.equals(typ, new String("uml:LiteralInteger"))) 
        succ_12 = false;
      if (succ_12) {

        Long arg_18 = null;
        arg_18 = UTIL.NumberToLong(StdLib.StringToInt(val));
        rexpr_11 = new UmlLiteralInteger(arg_18);
      }
    }
    if (!succ_12) 
      rexpr_11 = null;
    return (IUmlValueSpecification) rexpr_11;
  }
// ***** VDMTOOLS END Name=GetDefaultValue#1|XmlEntity


// ***** VDMTOOLS START Name=GetMultiplicity#1|XmlEntity KEEP=NO
  private IUmlMultiplicityElement GetMultiplicity (final XmlEntity e) throws CGException {

    Vector eList = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    eList = tmpRec_4.entities;
    HashSet lowerSet = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e1_set_22 = new HashSet(eList);
      XmlEntity el = null;
      {
        for (Iterator enm_24 = e1_set_22.iterator(); enm_24.hasNext(); ) {

          XmlEntity elem_23 = (XmlEntity) enm_24.next();
          el = (XmlEntity) elem_23;
          Boolean pred_12 = null;
          Boolean var1_13 = null;
          String var1_14 = null;
          var1_14 = el.name;
          var1_13 = new Boolean(UTIL.equals(var1_14, new String("lowerValue")));
          {
            if ((pred_12 = var1_13).booleanValue()) 
              pred_12 = HasAttribute((XmlEntity) el, new String("value"));
          }
          if (pred_12.booleanValue()) {

            String res_s_8 = null;
            res_s_8 = ((XmlAttribute) GetAttribute((XmlEntity) el, new String("value"))).val;
            res_s_7.add(res_s_8);
          }
        }
      }
    }
    lowerSet = res_s_7;
    HashSet upperSet = new HashSet();
    HashSet res_s_26 = new HashSet();
    {

      HashSet e1_set_41 = new HashSet(eList);
      XmlEntity el = null;
      {
        for (Iterator enm_43 = e1_set_41.iterator(); enm_43.hasNext(); ) {

          XmlEntity elem_42 = (XmlEntity) enm_43.next();
          el = (XmlEntity) elem_42;
          Boolean pred_31 = null;
          Boolean var1_32 = null;
          String var1_33 = null;
          var1_33 = el.name;
          var1_32 = new Boolean(UTIL.equals(var1_33, new String("upperValue")));
          {
            if ((pred_31 = var1_32).booleanValue()) 
              pred_31 = HasAttribute((XmlEntity) el, new String("value"));
          }
          if (pred_31.booleanValue()) {

            String res_s_27 = null;
            res_s_27 = ((XmlAttribute) GetAttribute((XmlEntity) el, new String("value"))).val;
            res_s_26.add(res_s_27);
          }
        }
      }
    }
    upperSet = res_s_26;
    Boolean cond_44 = null;
    {
      if ((cond_44 = new Boolean(new Long(upperSet.size()).intValue() == new Long(0).intValue())).booleanValue()) 
        cond_44 = new Boolean(new Long(lowerSet.size()).intValue() == new Long(0).intValue());
    }
    if (cond_44.booleanValue()) 
      return null;
    else {

      Long lower = null;
      if (new Boolean(new Long(lowerSet.size()).intValue() == new Long(0).intValue()).booleanValue()) 
        lower = new Long(0);
      else {

        HashSet tmpSet_60 = new HashSet();
        tmpSet_60 = lowerSet;
        String p = null;
        boolean succ_62 = false;
        for (Iterator enm_64 = tmpSet_60.iterator(); enm_64.hasNext() && !succ_62; ) {

          String tmpElem_63 = UTIL.ConvertToString(enm_64.next());
          succ_62 = true;
          p = tmpElem_63;
        }
        if (!succ_62) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        lower = UTIL.NumberToLong(StdLib.StringToInt(p));
      }
      Long upVal = null;
      {

        HashSet tmpSet_67 = new HashSet();
        tmpSet_67 = upperSet;
        String p = null;
        boolean succ_69 = false;
        for (Iterator enm_71 = tmpSet_67.iterator(); enm_71.hasNext() && !succ_69; ) {

          String tmpElem_70 = UTIL.ConvertToString(enm_71.next());
          succ_69 = true;
          p = tmpElem_70;
        }
        if (!succ_69) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        upVal = UTIL.NumberToLong(StdLib.StringToInt(p));
      }
      Long upper = null;
      Boolean cond_75 = null;
      {
        if (!(cond_75 = new Boolean(new Long(upperSet.size()).intValue() == new Long(0).intValue())).booleanValue()) 
          cond_75 = new Boolean((upVal.intValue()) < (new Long(0).intValue()));
      }
      if (cond_75.booleanValue()) 
        upper = null;
      else 
        upper = upVal;
      return (IUmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), lower, upper);
    }
  }
// ***** VDMTOOLS END Name=GetMultiplicity#1|XmlEntity


// ***** VDMTOOLS START Name=BuildOperation#1|XmlEntity KEEP=NO
  private IUmlOperation BuildOperation (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = GetNameAttribute((XmlEntity) e);
    String name = null;
    name = tmpVal_3;
    IUmlVisibilityKind tmpVal_5 = null;
    tmpVal_5 = (IUmlVisibilityKind) (IUmlVisibilityKind) GetVisibility((XmlAttribute) (XmlAttribute) GetAttribute((XmlEntity) e, new String("visibility")));
    IUmlVisibilityKind visibility = null;
    visibility = (IUmlVisibilityKind) tmpVal_5;
    IUmlMultiplicityElement multiplicity = (IUmlMultiplicityElement) new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(0), new Long(0));
    Boolean isQuery = null;
    if (HasAttribute((XmlEntity) e, new String("isQuery")).booleanValue()) {

      String par_19 = null;
      par_19 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("isQuery"))).val;
      isQuery = (Boolean) StdLib.StringToBool(par_19);
    }
    else 
      isQuery = new Boolean(false);
    Object tmpVal_23 = null;
    tmpVal_23 = null;
    IUmlType type = null;
    type = (IUmlType) tmpVal_23;
    Boolean isStatic = null;
    if (HasAttribute((XmlEntity) e, new String("isStatic")).booleanValue()) {

      String par_29 = null;
      par_29 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("isStatic"))).val;
      isStatic = (Boolean) StdLib.StringToBool(par_29);
    }
    else 
      isStatic = new Boolean(false);
    String id = null;
    id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    Vector params = CreateOperstionParameters((XmlEntity) e);
    UmlParameters parameters = null;
    if (new Boolean(UTIL.equals(params, null)).booleanValue()) 
      parameters = null;
    else 
      parameters = (UmlParameters) new UmlParameters(params);
    IUmlOperation operation = (IUmlOperation) new UmlOperation(name, visibility, multiplicity, isQuery, type, isStatic, parameters);
    {

      idToOperationMap.put(id, operation);
      return (IUmlOperation) operation;
    }
  }
// ***** VDMTOOLS END Name=BuildOperation#1|XmlEntity


// ***** VDMTOOLS START Name=CreateOperstionParameters#1|XmlEntity KEEP=NO
  protected Vector CreateOperstionParameters (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    tmpVal_3 = tmpRec_4.entities;
    Vector elist = null;
    elist = tmpVal_3;
    Vector tmpVal_6 = null;
    {

      Vector res_l_7 = new Vector();
      HashSet resBind_s_9 = new HashSet();
      HashSet riseq_13 = new HashSet();
      int max_14 = elist.size();
      for (int i_15 = 1; i_15 <= max_14; i_15++) 
        riseq_13.add(new Long(i_15));
      resBind_s_9 = riseq_13;
      Vector bind_l_8 = null;
      bind_l_8 = UTIL.Sort(resBind_s_9);
      Long i = null;
      for (Iterator enm_45 = bind_l_8.iterator(); enm_45.hasNext(); ) {

        Long e_11 = UTIL.NumberToLong(enm_45.next());
        i = e_11;
        Boolean pred_38 = null;
        String var1_39 = null;
        XmlEntity tmpRec_40 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
          tmpRec_40 = (XmlEntity) elist.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_39 = tmpRec_40.name;
        pred_38 = new Boolean(UTIL.equals(var1_39, new String("ownedParameter")));
        if (pred_38.booleanValue()) {

          UmlParameter reselem_16 = null;
          String arg_17 = null;
          XmlEntity par_22 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_22 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          arg_17 = GetNameAttribute((XmlEntity) par_22);
          IUmlType arg_18 = null;
          XmlEntity par_25 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_25 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          arg_18 = (IUmlType) LookUpType((XmlEntity) par_25);
          IUmlParameterDirectionKind arg_21 = null;
          String par_32 = null;
          XmlAttribute tmpRec_33 = null;
          XmlEntity par_34 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_34 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          tmpRec_33 = (XmlAttribute) GetAttribute((XmlEntity) par_34, new String("direction"));
          par_32 = tmpRec_33.val;
          arg_21 = (IUmlParameterDirectionKind) ConvertParameterDirectionKind(par_32);
          reselem_16 = new UmlParameter(arg_17, arg_18, new UmlMultiplicityElement(new Boolean(false), new Boolean(false), new Long(1), new Long(1)), new String(""), arg_21);
          res_l_7.add(reselem_16);
        }
      }
      tmpVal_6 = res_l_7;
    }
    Vector parms = null;
    parms = tmpVal_6;
    Vector rexpr_46 = null;
    if (new Boolean(new Long(parms.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      rexpr_46 = null;
    else 
      rexpr_46 = parms;
    return rexpr_46;
  }
// ***** VDMTOOLS END Name=CreateOperstionParameters#1|XmlEntity


// ***** VDMTOOLS START Name=ConvertParameterDirectionKind#1|String KEEP=NO
  private IUmlParameterDirectionKind ConvertParameterDirectionKind (final String val) throws CGException {

    UmlParameterDirectionKind varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(val, new String("in"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQIN);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(val, new String("out"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQOUT);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(val, new String("return"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQRETURN);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(val, new String("inout"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlParameterDirectionKind) new UmlParameterDirectionKind(UmlParameterDirectionKindQuotes.IQINOUT);
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return (IUmlParameterDirectionKind) varRes_2;
  }
// ***** VDMTOOLS END Name=ConvertParameterDirectionKind#1|String


// ***** VDMTOOLS START Name=BuildConstraint#1|XmlEntity KEEP=NO
  private IUmlConstraint BuildConstraint (final XmlEntity e) throws CGException {

    UmlConstraint varRes_2 = null;
    {

      Vector elist = null;
      XmlEntityList tmpRec_5 = null;
      tmpRec_5 = e.entities;
      elist = tmpRec_5.entities;
      HashSet ids = new HashSet();
      HashSet res_s_8 = new HashSet();
      {

        HashSet e1_set_18 = new HashSet(elist);
        XmlEntity p = null;
        {
          for (Iterator enm_20 = e1_set_18.iterator(); enm_20.hasNext(); ) {

            XmlEntity elem_19 = (XmlEntity) enm_20.next();
            p = (XmlEntity) elem_19;
            if (HasAttribute((XmlEntity) p, new String("xmi:idref")).booleanValue()) {

              String res_s_9 = null;
              res_s_9 = ((XmlAttribute) GetAttribute((XmlEntity) p, new String("xmi:idref"))).val;
              res_s_8.add(res_s_9);
            }
          }
        }
      }
      ids = res_s_8;
      String specification = null;
      Vector unArg_22 = null;
      HashSet par_23 = new HashSet();
      HashSet res_s_24 = new HashSet();
      {

        HashSet e1_set_34 = new HashSet(elist);
        XmlEntity p = null;
        {
          for (Iterator enm_36 = e1_set_34.iterator(); enm_36.hasNext(); ) {

            XmlEntity elem_35 = (XmlEntity) enm_36.next();
            p = (XmlEntity) elem_35;
            Boolean pred_28 = null;
            String var1_29 = null;
            var1_29 = p.name;
            pred_28 = new Boolean(UTIL.equals(var1_29, new String("body")));
            if (pred_28.booleanValue()) {

              String res_s_25 = null;
              XmlData tmpRec_26 = null;
              tmpRec_26 = p.data;
              res_s_25 = tmpRec_26.data;
              res_s_24.add(res_s_25);
            }
          }
        }
      }
      par_23 = res_s_24;
      unArg_22 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_23));
      specification = UTIL.ConvertToString(unArg_22.get(0));
      varRes_2 = (UmlConstraint) new UmlConstraint(ids, new UmlLiteralString(specification));
    }
    return (IUmlConstraint) varRes_2;
  }
// ***** VDMTOOLS END Name=BuildConstraint#1|XmlEntity


// ***** VDMTOOLS START Name=BuildAssociation#1|XmlEntity KEEP=NO
  private IUmlAssociation BuildAssociation (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    String tmpVal_6 = null;
    if (HasAttribute((XmlEntity) e, new String("xmi:id")).booleanValue()) 
      tmpVal_6 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    else 
      tmpVal_6 = null;
    String associationId = null;
    associationId = tmpVal_6;
    HashSet tmpVal_14 = new HashSet();
    HashSet res_s_15 = new HashSet();
    {

      HashSet e_set_25 = new HashSet();
      HashSet riseq_27 = new HashSet();
      int max_28 = elist.size();
      for (int i_29 = 1; i_29 <= max_28; i_29++) 
        riseq_27.add(new Long(i_29));
      e_set_25 = riseq_27;
      Long i = null;
      {
        for (Iterator enm_31 = e_set_25.iterator(); enm_31.hasNext(); ) {

          Long elem_30 = UTIL.NumberToLong(enm_31.next());
          i = elem_30;
          Boolean pred_19 = null;
          XmlEntity par_20 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_20 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_19 = IsAttributeType((XmlEntity) par_20, new String("uml:Property"));
          if (pred_19.booleanValue()) {

            XmlEntity res_s_16 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              res_s_16 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_s_15.add(res_s_16);
          }
        }
      }
    }
    tmpVal_14 = res_s_15;
    HashSet props = new HashSet();
    props = tmpVal_14;
    HashSet ownedNavivableEnds = new HashSet();
    HashSet res_s_33 = new HashSet();
    {

      XmlEntity p = null;
      {
        for (Iterator enm_50 = props.iterator(); enm_50.hasNext(); ) {

          XmlEntity elem_49 = (XmlEntity) enm_50.next();
          p = (XmlEntity) elem_49;
          Boolean pred_38 = null;
          {
            if (!(pred_38 = new Boolean(!HasAttribute((XmlEntity) p, new String("name")).booleanValue())).booleanValue()) 
              pred_38 = HasAttributeValue((XmlEntity) p, new String("name"), new String(""));
          }
          if (pred_38.booleanValue()) {
            res_s_33.add((IUmlProperty) BuildProperty((XmlEntity) p, new String(""), associationId));
          }
        }
      }
    }
    ownedNavivableEnds = res_s_33;
    Vector one = null;
    one = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownedNavivableEnds));
    IUmlType ownerClassType = null;
    Vector unArg_54 = null;
    {

      Vector res_l_55 = new Vector();
      HashSet resBind_s_57 = new HashSet();
      HashSet riseq_61 = new HashSet();
      int max_62 = one.size();
      for (int i_63 = 1; i_63 <= max_62; i_63++) 
        riseq_61.add(new Long(i_63));
      resBind_s_57 = riseq_61;
      Vector bind_l_56 = null;
      bind_l_56 = UTIL.Sort(resBind_s_57);
      Long i = null;
      for (Iterator enm_69 = bind_l_56.iterator(); enm_69.hasNext(); ) {

        Long e_59 = UTIL.NumberToLong(enm_69.next());
        i = e_59;
        IUmlType reselem_64 = null;
        IUmlProperty obj_65 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= one.size())) 
          obj_65 = (IUmlProperty) one.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_64 = (IUmlType) obj_65.getType();
        res_l_55.add(reselem_64);
      }
      unArg_54 = res_l_55;
    }
    ownerClassType = (IUmlType) unArg_54.get(0);
    String tmpVal_70 = null;
    {

      IUmlClassNameType ct = (IUmlClassNameType) ownerClassType;
      tmpVal_70 = ct.getName();
    }
    String ownerClass = null;
    ownerClass = tmpVal_70;
    HashSet ownedEnds = new HashSet();
    HashSet res_s_74 = new HashSet();
    {

      XmlEntity p = null;
      {
        for (Iterator enm_93 = props.iterator(); enm_93.hasNext(); ) {

          XmlEntity elem_92 = (XmlEntity) enm_93.next();
          p = (XmlEntity) elem_92;
          Boolean pred_79 = null;
          {
            if ((pred_79 = HasAttribute((XmlEntity) p, new String("name"))).booleanValue()) {

              Boolean var2_83 = null;
              Long var1_84 = null;
              String unArg_85 = null;
              unArg_85 = ((XmlAttribute) GetAttribute((XmlEntity) p, new String("name"))).val;
              var1_84 = new Long(unArg_85.length());
              var2_83 = new Boolean((var1_84.intValue()) > (new Long(0).intValue()));
              pred_79 = var2_83;
            }
          }
          if (pred_79.booleanValue()) {
            res_s_74.add((IUmlProperty) BuildProperty((XmlEntity) p, ownerClass, associationId));
          }
        }
      }
    }
    ownedEnds = res_s_74;
    String tmpVal_94 = null;
    if (HasAttribute((XmlEntity) e, new String("name")).booleanValue()) 
      tmpVal_94 = GetNameAttribute((XmlEntity) e);
    else 
      tmpVal_94 = new String("");
    String name = null;
    name = tmpVal_94;
    String id = null;
    id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    return (IUmlAssociation) new UmlAssociation(ownedEnds, ownedNavivableEnds, name, id);
  }
// ***** VDMTOOLS END Name=BuildAssociation#1|XmlEntity


// ***** VDMTOOLS START Name=BuildAssociationQualifier#1|XmlEntity KEEP=NO
  private void BuildAssociationQualifier (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      Vector unArg_9 = null;
      XmlEntityList tmpRec_10 = null;
      tmpRec_10 = e.entities;
      unArg_9 = tmpRec_10.entities;
      HashSet riseq_12 = new HashSet();
      int max_13 = unArg_9.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_6 = riseq_12;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_38 = bind_l_5.iterator(); enm_38.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_38.next());
        i = e_8;
        Boolean pred_20 = null;
        Boolean var1_21 = null;
        String var1_22 = null;
        XmlEntity tmpRec_23 = null;
        Vector tmp_l_24 = null;
        XmlEntityList tmpRec_25 = null;
        tmpRec_25 = e.entities;
        tmp_l_24 = tmpRec_25.entities;
        if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_24.size())) 
          tmpRec_23 = (XmlEntity) tmp_l_24.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_22 = tmpRec_23.name;
        var1_21 = new Boolean(UTIL.equals(var1_22, new String("source")));
        {
          if (!(pred_20 = var1_21).booleanValue()) {

            Boolean var2_29 = null;
            String var1_30 = null;
            XmlEntity tmpRec_31 = null;
            Vector tmp_l_32 = null;
            XmlEntityList tmpRec_33 = null;
            tmpRec_33 = e.entities;
            tmp_l_32 = tmpRec_33.entities;
            if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_32.size())) 
              tmpRec_31 = (XmlEntity) tmp_l_32.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_30 = tmpRec_31.name;
            var2_29 = new Boolean(UTIL.equals(var1_30, new String("target")));
            pred_20 = var2_29;
          }
        }
        if (pred_20.booleanValue()) {

          XmlEntity reselem_15 = null;
          Vector tmp_l_16 = null;
          XmlEntityList tmpRec_17 = null;
          tmpRec_17 = e.entities;
          tmp_l_16 = tmpRec_17.entities;
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_16.size())) 
            reselem_15 = (XmlEntity) tmp_l_16.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_4.add(reselem_15);
        }
      }
      tmpVal_3 = res_l_4;
    }
    Vector list = null;
    list = tmpVal_3;
    HashSet qualifiers = new HashSet();
    HashSet res_s_40 = new HashSet();
    {

      HashSet e1_set_45 = new HashSet(list);
      XmlEntity sOrT = null;
      {
        for (Iterator enm_47 = e1_set_45.iterator(); enm_47.hasNext(); ) {

          XmlEntity elem_46 = (XmlEntity) enm_47.next();
          sOrT = (XmlEntity) elem_46;
          res_s_40.add(GetQualifierInfo((XmlEntity) sOrT));
        }
      }
    }
    qualifiers = res_s_40;
    {

      HashMap rhs_48 = new HashMap();
      HashMap var2_50 = new HashMap();
      HashMap res_m_51 = new HashMap();
      {

        QualifierInfo q = null;
        {
          for (Iterator enm_65 = qualifiers.iterator(); enm_65.hasNext(); ) {

            QualifierInfo elem_64 = (QualifierInfo) enm_65.next();
            q = elem_64;
            if (new Boolean(!UTIL.equals(q, null)).booleanValue()) {

              String md_52 = null;
              {

                String id = null;
                id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:idref"))).val;
                md_52 = id;
              }
              res_m_51.put(md_52, q);
            }
          }
        }
      }
      var2_50 = res_m_51;
      {

        HashMap m1_70 = (HashMap) associationToQualifier.clone();
        HashMap m2_71 = var2_50;
        HashSet com_66 = new HashSet();
        com_66.addAll(m1_70.keySet());
        com_66.retainAll(m2_71.keySet());
        boolean all_applies_67 = true;
        Object d_68;
        for (Iterator bb_69 = com_66.iterator(); bb_69.hasNext() && all_applies_67; ) {

          d_68 = bb_69.next();
          all_applies_67 = m1_70.get(d_68).equals(m2_71.get(d_68));
        }
        if (!all_applies_67) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_70.putAll(m2_71);
        rhs_48 = m1_70;
      }
      associationToQualifier = (HashMap) UTIL.clone(rhs_48);
    }
  }
// ***** VDMTOOLS END Name=BuildAssociationQualifier#1|XmlEntity


// ***** VDMTOOLS START Name=GetQualifierInfo#1|XmlEntity KEEP=NO
  private QualifierInfo GetQualifierInfo (final XmlEntity e) throws CGException {

    XmlEntity ec = (XmlEntity) (XmlEntity) GetElement((XmlEntity) e, new String("constraints"));
    if (new Boolean(!UTIL.equals(ec, null)).booleanValue()) {

      String a = null;
      if (HasAttribute((XmlEntity) ec, new String("qualifier")).booleanValue()) 
        a = ((XmlAttribute) GetAttribute((XmlEntity) ec, new String("qualifier"))).val;
      else 
        a = null;
      String id = null;
      if (HasAttribute((XmlEntity) e, new String("xmi:idref")).booleanValue()) 
        id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:idref"))).val;
      else 
        id = null;
      if (new Boolean(!UTIL.equals(a, null)).booleanValue()) {

        QualifierInfo rexpr_31 = null;
        rexpr_31 = new QualifierInfo(id, a);
        return rexpr_31;
      }
      else 
        return null;
    }
    else 
      return null;
  }
// ***** VDMTOOLS END Name=GetQualifierInfo#1|XmlEntity


// ***** VDMTOOLS START Name=LookUpType#1|XmlEntity KEEP=NO
  private IUmlType LookUpType (final XmlEntity e) throws CGException {
    return (IUmlType) (IUmlType) FindType(GetTypeId((XmlEntity) e));
  }
// ***** VDMTOOLS END Name=LookUpType#1|XmlEntity


// ***** VDMTOOLS START Name=GetTypeId#1|XmlEntity KEEP=NO
  private String GetTypeId (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    HashSet typeOption1 = new HashSet();
    if (HasAttribute((XmlEntity) e, new String("type")).booleanValue()) {

      String enum_set_32 = null;
      enum_set_32 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("type"))).val;
      typeOption1 = new HashSet();
      typeOption1.add(enum_set_32);
    }
    else {

      HashSet res_s_11 = new HashSet();
      {

        HashSet e_set_25 = new HashSet();
        HashSet riseq_27 = new HashSet();
        int max_28 = elist.size();
        for (int i_29 = 1; i_29 <= max_28; i_29++) 
          riseq_27.add(new Long(i_29));
        e_set_25 = riseq_27;
        Long i = null;
        {
          for (Iterator enm_31 = e_set_25.iterator(); enm_31.hasNext(); ) {

            Long elem_30 = UTIL.NumberToLong(enm_31.next());
            i = elem_30;
            Boolean pred_18 = null;
            String var1_19 = null;
            XmlEntity tmpRec_20 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              tmpRec_20 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_19 = tmpRec_20.name;
            pred_18 = new Boolean(UTIL.equals(var1_19, new String("type")));
            if (pred_18.booleanValue()) {

              String res_s_12 = null;
              XmlAttribute tmpRec_13 = null;
              XmlEntity par_14 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
                par_14 = (XmlEntity) elist.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              tmpRec_13 = (XmlAttribute) GetAttribute((XmlEntity) par_14, new String("xmi:idref"));
              res_s_12 = tmpRec_13.val;
              res_s_11.add(res_s_12);
            }
          }
        }
      }
      typeOption1 = res_s_11;
    }
    {

      HashSet tmpSet_36 = new HashSet();
      tmpSet_36 = typeOption1;
      String id = null;
      boolean succ_38 = false;
      for (Iterator enm_40 = tmpSet_36.iterator(); enm_40.hasNext() && !succ_38; ) {

        String tmpElem_39 = UTIL.ConvertToString(enm_40.next());
        succ_38 = true;
        id = tmpElem_39;
      }
      if (!succ_38) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      return id;
    }
  }
// ***** VDMTOOLS END Name=GetTypeId#1|XmlEntity


// ***** VDMTOOLS START Name=FindType#1|String KEEP=NO
  private IUmlType FindType (final String name) throws CGException {

    String typeName = null;
    Boolean cond_5 = null;
    cond_5 = new Boolean(classesTypeMap.containsKey(name));
    if (cond_5.booleanValue()) 
      typeName = UTIL.ConvertToString(classesTypeMap.get(name));
    else 
      typeName = null;
    boolean succ_10 = true;
    {

      succ_10 = true;
      if (!UTIL.equals(typeName, null)) 
        succ_10 = false;
      if (succ_10) {

        String par_27 = null;
        par_27 = new String("Issuing unknown type: ").concat(name);
        log.warn(par_27);
        return (IUmlType) new UmlClassNameType(RemoveEaPrefix(name));
      }
      else {

        succ_10 = true;
        if (!UTIL.equals(typeName, new String("String"))) 
          succ_10 = false;
        if (succ_10) 
          return (IUmlType) new UmlStringType();
        else {

          succ_10 = true;
          if (!UTIL.equals(typeName, new String("int"))) 
            succ_10 = false;
          if (succ_10) 
            return (IUmlType) new UmlIntegerType();
          else {

            succ_10 = true;
            if (!UTIL.equals(typeName, new String("bool"))) 
              succ_10 = false;
            if (succ_10) 
              return (IUmlType) new UmlBoolType();
            else {

              succ_10 = true;
              if (!UTIL.equals(typeName, new String("char"))) 
                succ_10 = false;
              if (succ_10) 
                return (IUmlType) new UmlCharType();
              else {

                succ_10 = true;
                if (!UTIL.equals(typeName, new String("unlimitedNatural"))) 
                  succ_10 = false;
                if (succ_10) 
                  return (IUmlType) new UmlUnlimitedNatural();
                else 
                  return (IUmlType) new UmlClassNameType(typeName);
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=FindType#1|String


// ***** VDMTOOLS START Name=VisitXmlEntity#1|XmlEntity KEEP=NO
  public void VisitXmlEntity (final XmlEntity e) throws CGException {

    HashSet rhs_2 = new HashSet();
    HashSet var2_4 = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      HashSet e_set_17 = new HashSet();
      e_set_17 = new HashSet();
      e_set_17.add(e);
      XmlEntity entity = null;
      {
        for (Iterator enm_20 = e_set_17.iterator(); enm_20.hasNext(); ) {

          XmlEntity elem_19 = (XmlEntity) enm_20.next();
          entity = (XmlEntity) elem_19;
          Boolean pred_8 = null;
          {
            if ((pred_8 = IsAttributeType((XmlEntity) entity, new String("uml:Class"))).booleanValue()) {

              Boolean var2_12 = null;
              var2_12 = new Boolean(!primiticeTypes.contains(GetNameAttribute((XmlEntity) entity)));
              pred_8 = var2_12;
            }
          }
          if (pred_8.booleanValue()) {
            res_s_5.add((IUmlClass) ExstractClass((XmlEntity) entity));
          }
        }
      }
    }
    var2_4 = res_s_5;
    rhs_2 = (HashSet) classes.clone();
    rhs_2.addAll(var2_4);
    classes = (HashSet) UTIL.clone(rhs_2);
    HashSet rhs_21 = new HashSet();
    HashSet var2_23 = new HashSet();
    HashSet res_s_24 = new HashSet();
    {

      HashSet e_set_31 = new HashSet();
      e_set_31 = new HashSet();
      e_set_31.add(e);
      XmlEntity entity = null;
      {
        for (Iterator enm_34 = e_set_31.iterator(); enm_34.hasNext(); ) {

          XmlEntity elem_33 = (XmlEntity) enm_34.next();
          entity = (XmlEntity) elem_33;
          if (IsAttributeType((XmlEntity) entity, new String("uml:Association")).booleanValue()) {
            res_s_24.add((IUmlAssociation) BuildAssociation((XmlEntity) entity));
          }
        }
      }
    }
    var2_23 = res_s_24;
    rhs_21 = (HashSet) associations.clone();
    rhs_21.addAll(var2_23);
    associations = (HashSet) UTIL.clone(rhs_21);
  }
// ***** VDMTOOLS END Name=VisitXmlEntity#1|XmlEntity


// ***** VDMTOOLS START Name=HasAttribute#2|XmlEntity|String KEEP=NO
  private Boolean HasAttribute (final XmlEntity e, final String name) throws CGException {

    Boolean varRes_3 = null;
    {

      Vector tmpVal_5 = null;
      XmlAttributeList tmpRec_6 = null;
      tmpRec_6 = e.attributes;
      tmpVal_5 = tmpRec_6.attributes;
      Vector list = null;
      list = tmpVal_5;
      boolean tmpQuant_8 = false;
      {

        HashSet e_set_16 = new HashSet();
        HashSet riseq_18 = new HashSet();
        int max_19 = list.size();
        for (int i_20 = 1; i_20 <= max_19; i_20++) 
          riseq_18.add(new Long(i_20));
        e_set_16 = riseq_18;
        Long i = null;
        {
          for (Iterator enm_22 = e_set_16.iterator(); enm_22.hasNext() && !tmpQuant_8; ) {

            Long elem_21 = UTIL.NumberToLong(enm_22.next());
            i = elem_21;
            Boolean pred_9 = null;
            String var1_10 = null;
            XmlAttribute tmpRec_11 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              tmpRec_11 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_10 = tmpRec_11.name;
            pred_9 = new Boolean(UTIL.equals(var1_10, name));
            if (pred_9.booleanValue()) 
              tmpQuant_8 = true;
          }
        }
      }
      varRes_3 = new Boolean(tmpQuant_8);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=HasAttribute#2|XmlEntity|String


// ***** VDMTOOLS START Name=HasAttributeValue#3|XmlEntity|String|String KEEP=NO
  private Boolean HasAttributeValue (final XmlEntity e, final String name, final String val) throws CGException {

    Boolean varRes_4 = null;
    {

      Vector tmpVal_6 = null;
      XmlAttributeList tmpRec_7 = null;
      tmpRec_7 = e.attributes;
      tmpVal_6 = tmpRec_7.attributes;
      Vector list = null;
      list = tmpVal_6;
      boolean tmpQuant_9 = false;
      {

        HashSet e_set_24 = new HashSet();
        HashSet riseq_26 = new HashSet();
        int max_27 = list.size();
        for (int i_28 = 1; i_28 <= max_27; i_28++) 
          riseq_26.add(new Long(i_28));
        e_set_24 = riseq_26;
        Long i = null;
        {
          for (Iterator enm_30 = e_set_24.iterator(); enm_30.hasNext() && !tmpQuant_9; ) {

            Long elem_29 = UTIL.NumberToLong(enm_30.next());
            i = elem_29;
            Boolean pred_10 = null;
            Boolean var1_11 = null;
            String var1_12 = null;
            XmlAttribute tmpRec_13 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              tmpRec_13 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_12 = tmpRec_13.name;
            var1_11 = new Boolean(UTIL.equals(var1_12, name));
            {
              if ((pred_10 = var1_11).booleanValue()) {

                Boolean var2_17 = null;
                String var1_18 = null;
                XmlAttribute tmpRec_19 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
                  tmpRec_19 = (XmlAttribute) list.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var1_18 = tmpRec_19.val;
                var2_17 = new Boolean(UTIL.equals(var1_18, val));
                pred_10 = var2_17;
              }
            }
            if (pred_10.booleanValue()) 
              tmpQuant_9 = true;
          }
        }
      }
      varRes_4 = new Boolean(tmpQuant_9);
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=HasAttributeValue#3|XmlEntity|String|String


// ***** VDMTOOLS START Name=IsAttributeType#2|XmlEntity|String KEEP=NO
  private Boolean IsAttributeType (final XmlEntity e, final String val) throws CGException {
    return HasAttributeValue((XmlEntity) e, new String("xmi:type"), val);
  }
// ***** VDMTOOLS END Name=IsAttributeType#2|XmlEntity|String


// ***** VDMTOOLS START Name=GetElementType#1|XmlEntity KEEP=NO
  private String GetElementType (final XmlEntity e) throws CGException {

    String varRes_2 = null;
    if (new Boolean(!UTIL.equals((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:type")), null)).booleanValue()) 
      varRes_2 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:type"))).val;
    else 
      varRes_2 = e.name;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetElementType#1|XmlEntity


// ***** VDMTOOLS START Name=GetElement#2|XmlEntity|String KEEP=NO
  private XmlEntity GetElement (final XmlEntity e, final String name) throws CGException {

    XmlEntity varRes_3 = null;
    {

      Vector tmpVal_5 = null;
      XmlEntityList tmpRec_6 = null;
      tmpRec_6 = e.entities;
      tmpVal_5 = tmpRec_6.entities;
      Vector list = null;
      list = tmpVal_5;
      Vector allList = null;
      {

        Vector res_l_9 = new Vector();
        HashSet resBind_s_11 = new HashSet();
        HashSet riseq_15 = new HashSet();
        int max_16 = list.size();
        for (int i_17 = 1; i_17 <= max_16; i_17++) 
          riseq_15.add(new Long(i_17));
        resBind_s_11 = riseq_15;
        Vector bind_l_10 = null;
        bind_l_10 = UTIL.Sort(resBind_s_11);
        Long i = null;
        for (Iterator enm_28 = bind_l_10.iterator(); enm_28.hasNext(); ) {

          Long e_13 = UTIL.NumberToLong(enm_28.next());
          i = e_13;
          Boolean pred_21 = null;
          String var1_22 = null;
          XmlEntity tmpRec_23 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            tmpRec_23 = (XmlEntity) list.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_22 = tmpRec_23.name;
          pred_21 = new Boolean(UTIL.equals(var1_22, name));
          if (pred_21.booleanValue()) {

            XmlEntity reselem_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              reselem_18 = (XmlEntity) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_9.add(reselem_18);
          }
        }
        allList = res_l_9;
      }
      if (new Boolean((new Long(allList.size()).intValue()) > (new Long(0).intValue())).booleanValue()) 
        varRes_3 = (XmlEntity) (XmlEntity) allList.get(0);
      else 
        varRes_3 = null;
    }
    return (XmlEntity) varRes_3;
  }
// ***** VDMTOOLS END Name=GetElement#2|XmlEntity|String


// ***** VDMTOOLS START Name=GetAttribute#2|XmlEntity|String KEEP=NO
  private XmlAttribute GetAttribute (final XmlEntity e, final String name) throws CGException {

    XmlAttribute varRes_3 = null;
    {

      Vector tmpVal_5 = null;
      XmlAttributeList tmpRec_6 = null;
      tmpRec_6 = e.attributes;
      tmpVal_5 = tmpRec_6.attributes;
      Vector list = null;
      list = tmpVal_5;
      Vector attList = null;
      {

        Vector res_l_9 = new Vector();
        HashSet resBind_s_11 = new HashSet();
        HashSet riseq_15 = new HashSet();
        int max_16 = list.size();
        for (int i_17 = 1; i_17 <= max_16; i_17++) 
          riseq_15.add(new Long(i_17));
        resBind_s_11 = riseq_15;
        Vector bind_l_10 = null;
        bind_l_10 = UTIL.Sort(resBind_s_11);
        Long i = null;
        for (Iterator enm_28 = bind_l_10.iterator(); enm_28.hasNext(); ) {

          Long e_13 = UTIL.NumberToLong(enm_28.next());
          i = e_13;
          Boolean pred_21 = null;
          String var1_22 = null;
          XmlAttribute tmpRec_23 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            tmpRec_23 = (XmlAttribute) list.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_22 = tmpRec_23.name;
          pred_21 = new Boolean(UTIL.equals(var1_22, name));
          if (pred_21.booleanValue()) {

            XmlAttribute reselem_18 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              reselem_18 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_9.add(reselem_18);
          }
        }
        attList = res_l_9;
      }
      if (new Boolean((new Long(attList.size()).intValue()) > (new Long(0).intValue())).booleanValue()) 
        varRes_3 = (XmlAttribute) (XmlAttribute) attList.get(0);
      else 
        varRes_3 = null;
    }
    return (XmlAttribute) varRes_3;
  }
// ***** VDMTOOLS END Name=GetAttribute#2|XmlEntity|String


// ***** VDMTOOLS START Name=GetVisibility#1|XmlAttribute KEEP=NO
  static private IUmlVisibilityKind GetVisibility (final XmlAttribute v) throws CGException {

    UmlVisibilityKind varRes_2 = null;
    if (new Boolean(!UTIL.equals(v, null)).booleanValue()) {

      String selRes_9 = null;
      selRes_9 = v.val;
      boolean succ_8 = true;
      {

        succ_8 = true;
        if (!UTIL.equals(selRes_9, new String("private"))) 
          succ_8 = false;
        if (succ_8) 
          varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
      }
      if (!succ_8) {

        succ_8 = true;
        if (!UTIL.equals(selRes_9, new String("public"))) 
          succ_8 = false;
        if (succ_8) 
          varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
      }
      if (!succ_8) {

        succ_8 = true;
        if (!UTIL.equals(selRes_9, new String("protected"))) 
          succ_8 = false;
        if (succ_8) 
          varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPROTECTED);
      }
      if (!succ_8) 
        UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    }
    else 
      varRes_2 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
    return (IUmlVisibilityKind) varRes_2;
  }
// ***** VDMTOOLS END Name=GetVisibility#1|XmlAttribute


// ***** VDMTOOLS START Name=BuildCollobration#1|XmlEntity KEEP=NO
  private IUmlCollaboration BuildCollobration (final XmlEntity e) throws CGException {

    Vector tmpVal_3 = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    tmpVal_3 = tmpRec_4.entities;
    Vector elist = null;
    elist = tmpVal_3;
    HashSet interactions = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e1_set_15 = new HashSet(elist);
      XmlEntity p = null;
      {
        for (Iterator enm_17 = e1_set_15.iterator(); enm_17.hasNext(); ) {

          XmlEntity elem_16 = (XmlEntity) enm_17.next();
          p = (XmlEntity) elem_16;
          if (IsAttributeType((XmlEntity) p, new String("uml:Interaction")).booleanValue()) {
            res_s_7.add((IUmlInteraction) BuildInteraction((XmlEntity) p));
          }
        }
      }
    }
    interactions = res_s_7;
    return (IUmlCollaboration) new UmlCollaboration(interactions);
  }
// ***** VDMTOOLS END Name=BuildCollobration#1|XmlEntity


// ***** VDMTOOLS START Name=BuildInteraction#1|XmlEntity KEEP=NO
  private IUmlInteraction BuildInteraction (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    HashMap tmpVal_6 = new HashMap();
    HashMap res_m_7 = new HashMap();
    {

      HashSet e1_set_21 = new HashSet(elist);
      XmlEntity p = null;
      {
        for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

          XmlEntity elem_22 = (XmlEntity) enm_23.next();
          p = (XmlEntity) elem_22;
          if (IsAttributeType((XmlEntity) p, new String("uml:Property")).booleanValue()) {

            String md_8 = null;
            md_8 = ((XmlAttribute) GetAttribute((XmlEntity) p, new String("xmi:id"))).val;
            res_m_7.put(md_8, (IUmlProperty) BuildProperty((XmlEntity) p, new String(""), null));
          }
        }
      }
    }
    tmpVal_6 = res_m_7;
    HashMap props = new HashMap();
    props = tmpVal_6;
    {

      HashMap rhs_24 = new HashMap();
      HashMap modmap_25 = new HashMap();
      HashMap res_m_28 = new HashMap();
      {

        HashSet e1_set_49 = new HashSet(elist);
        XmlEntity p = null;
        {
          for (Iterator enm_51 = e1_set_49.iterator(); enm_51.hasNext(); ) {

            XmlEntity elem_50 = (XmlEntity) enm_51.next();
            p = (XmlEntity) elem_50;
            Boolean pred_43 = null;
            String var1_44 = null;
            var1_44 = p.name;
            pred_43 = new Boolean(UTIL.equals(var1_44, new String("lifeline")));
            if (pred_43.booleanValue()) {

              String md_29 = null;
              md_29 = ((XmlAttribute) GetAttribute((XmlEntity) p, new String("xmi:id"))).val;
              UmlLifeLine mr_33 = null;
              IUmlType arg_35 = null;
              IUmlProperty obj_37 = null;
              String tmppar_39 = null;
              tmppar_39 = ((XmlAttribute) GetAttribute((XmlEntity) p, new String("represents"))).val;
              obj_37 = (IUmlProperty) props.get(tmppar_39);
              arg_35 = (IUmlType) obj_37.getType();
              mr_33 = new UmlLifeLine(GetNameAttribute((XmlEntity) p), arg_35);
              res_m_28.put(md_29, mr_33);
            }
          }
        }
      }
      modmap_25 = res_m_28;
      rhs_24 = new HashMap(lifeLineMap);
      rhs_24.putAll(modmap_25);
      lifeLineMap = (HashMap) UTIL.clone(rhs_24);
      {

        String tmpVal_53 = null;
        tmpVal_53 = GetNameAttribute((XmlEntity) e);
        String name = null;
        name = tmpVal_53;
        HashSet lifeLines = new HashSet();
        lifeLines.clear();
        lifeLines.addAll(lifeLineMap.values());
        HashSet mosfragments = new HashSet();
        HashSet res_s_58 = new HashSet();
        {

          HashSet e1_set_66 = new HashSet(elist);
          XmlEntity f = null;
          {
            for (Iterator enm_68 = e1_set_66.iterator(); enm_68.hasNext(); ) {

              XmlEntity elem_67 = (XmlEntity) enm_68.next();
              f = (XmlEntity) elem_67;
              if (IsAttributeType((XmlEntity) f, new String("uml:MessageOccurrenceSpecification")).booleanValue()) {
                res_s_58.add((IUmlInteractionFragment) BuildFragment((XmlEntity) f));
              }
            }
          }
        }
        mosfragments = res_s_58;
        HashSet besfragments = new HashSet();
        HashSet res_s_70 = new HashSet();
        {

          HashSet e1_set_78 = new HashSet(elist);
          XmlEntity f = null;
          {
            for (Iterator enm_80 = e1_set_78.iterator(); enm_80.hasNext(); ) {

              XmlEntity elem_79 = (XmlEntity) enm_80.next();
              f = (XmlEntity) elem_79;
              if (IsAttributeType((XmlEntity) f, new String("uml:BehaviorExecutionSpecification")).booleanValue()) {
                res_s_70.add((IUmlInteractionFragment) BuildFragment((XmlEntity) f));
              }
            }
          }
        }
        besfragments = res_s_70;
        HashSet combifragments = new HashSet();
        HashSet res_s_82 = new HashSet();
        {

          HashSet e1_set_90 = new HashSet(elist);
          XmlEntity f = null;
          {
            for (Iterator enm_92 = e1_set_90.iterator(); enm_92.hasNext(); ) {

              XmlEntity elem_91 = (XmlEntity) enm_92.next();
              f = (XmlEntity) elem_91;
              if (IsAttributeType((XmlEntity) f, new String("uml:CombinedFragment")).booleanValue()) {
                res_s_82.add((IUmlInteractionFragment) BuildFragment((XmlEntity) f));
              }
            }
          }
        }
        combifragments = res_s_82;
        Vector messages = null;
        {

          Vector res_l_94 = new Vector();
          HashSet resBind_s_96 = new HashSet();
          HashSet riseq_100 = new HashSet();
          int max_101 = elist.size();
          for (int i_102 = 1; i_102 <= max_101; i_102++) 
            riseq_100.add(new Long(i_102));
          resBind_s_96 = riseq_100;
          Vector bind_l_95 = null;
          bind_l_95 = UTIL.Sort(resBind_s_96);
          Long i = null;
          for (Iterator enm_114 = bind_l_95.iterator(); enm_114.hasNext(); ) {

            Long e_98 = UTIL.NumberToLong(enm_114.next());
            i = e_98;
            Boolean pred_107 = null;
            String var1_108 = null;
            XmlEntity tmpRec_109 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              tmpRec_109 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_108 = tmpRec_109.name;
            pred_107 = new Boolean(UTIL.equals(var1_108, new String("message")));
            if (pred_107.booleanValue()) {

              IUmlMessage reselem_103 = null;
              XmlEntity par_104 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
                par_104 = (XmlEntity) elist.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              reselem_103 = (IUmlMessage) BuildMessage((XmlEntity) par_104);
              res_l_94.add(reselem_103);
            }
          }
          messages = res_l_94;
        }
        UmlInteraction rexpr_115 = null;
        HashSet arg_118 = new HashSet();
        HashSet var1_120 = new HashSet();
        var1_120 = (HashSet) mosfragments.clone();
        var1_120.addAll(besfragments);
        arg_118 = (HashSet) var1_120.clone();
        arg_118.addAll(combifragments);
        rexpr_115 = new UmlInteraction(name, lifeLines, arg_118, messages);
        return (IUmlInteraction) rexpr_115;
      }
    }
  }
// ***** VDMTOOLS END Name=BuildInteraction#1|XmlEntity


// ***** VDMTOOLS START Name=BuildMessage#1|XmlEntity KEEP=NO
  private IUmlMessage BuildMessage (final XmlEntity e) throws CGException {

    IUmlMessageKind messageKind = (IUmlMessageKind) new UmlMessageKind(UmlMessageKindQuotes.IQCOMPLETE);
    IUmlMessageSort messageSort = (IUmlMessageSort) new UmlMessageSort(UmlMessageSortQuotes.IQSYNCHCALL);
    IUmlMos mosSend = null;
    String tmppar_9 = null;
    tmppar_9 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("sendEvent"))).val;
    mosSend = (IUmlMos) mosMap.get(tmppar_9);
    IUmlMos mosRecive = null;
    String tmppar_15 = null;
    tmppar_15 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("receiveEvent"))).val;
    mosRecive = (IUmlMos) mosMap.get(tmppar_15);
    Vector args = new Vector();
    String tmpVal_20 = null;
    IUmlOperation obj_21 = null;
    IUmlCallEvent obj_22 = null;
    obj_22 = (IUmlCallEvent) mosRecive.getEvent();
    obj_21 = (IUmlOperation) obj_22.getOperation();
    tmpVal_20 = obj_21.getName();
    String name = null;
    name = tmpVal_20;
    return (IUmlMessage) new UmlMessage(name, messageKind, messageSort, mosSend, mosRecive, args);
  }
// ***** VDMTOOLS END Name=BuildMessage#1|XmlEntity


// ***** VDMTOOLS START Name=BuildFragment#1|XmlEntity KEEP=NO
  private IUmlInteractionFragment BuildFragment (final XmlEntity e) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(GetElementType((XmlEntity) e), new String("uml:MessageOccurrenceSpecification"))) 
        succ_2 = false;
      if (succ_2) 
        return (IUmlInteractionFragment) (IUmlMos) BuildMos((XmlEntity) e);
      else {

        succ_2 = true;
        if (!UTIL.equals(GetElementType((XmlEntity) e), new String("uml:BehaviorExecutionSpecification"))) 
          succ_2 = false;
        if (succ_2) 
          return (IUmlInteractionFragment) (IUmlBes) BuildBes((XmlEntity) e);
        else {

          succ_2 = true;
          if (!UTIL.equals(GetElementType((XmlEntity) e), new String("uml:CombinedFragment"))) 
            succ_2 = false;
          if (succ_2) 
            return (IUmlInteractionFragment) (IUmlCombinedFragment) BuildCombi((XmlEntity) e);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); // throw new CGException(); //             return new IUmlInteractionFragment();
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=BuildFragment#1|XmlEntity


// ***** VDMTOOLS START Name=BuildMos#1|XmlEntity KEEP=NO
  private IUmlMos BuildMos (final XmlEntity e) throws CGException {

    String name = GetNameAttribute((XmlEntity) e);
    IUmlMessage message = null;
    IUmlLifeLine lifeLines = null;
    {

      HashSet tmpSet_7 = new HashSet();
      HashSet res_s_11 = new HashSet();
      {

        HashSet e1_set_18 = new HashSet(GetCovered((XmlEntity) e));
        String c = null;
        {
          for (Iterator enm_20 = e1_set_18.iterator(); enm_20.hasNext(); ) {

            String elem_19 = UTIL.ConvertToString(enm_20.next());
            c = elem_19;
            res_s_11.add((IUmlLifeLine) lifeLineMap.get(c));
          }
        }
      }
      tmpSet_7 = res_s_11;
      IUmlLifeLine l = null;
      boolean succ_9 = false;
      for (Iterator enm_21 = tmpSet_7.iterator(); enm_21.hasNext() && !succ_9; ) {

        IUmlLifeLine tmpElem_10 = (IUmlLifeLine) enm_21.next();
        succ_9 = true;
        l = (IUmlLifeLine) tmpElem_10;
      }
      if (!succ_9) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      lifeLines = (IUmlLifeLine) l;
    }
    String id = null;
    id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    IUmlCallEvent event = null;
    String tmppar_28 = null;
    tmppar_28 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("event"))).val;
    event = (IUmlCallEvent) idToClallEventMap.get(tmppar_28);
    UmlMos mos = (UmlMos) new UmlMos(name, message, lifeLines, event);
    {

      mosMap.put(id, mos);
      return (IUmlMos) mos;
    }
  }
// ***** VDMTOOLS END Name=BuildMos#1|XmlEntity


// ***** VDMTOOLS START Name=BuildBes#1|XmlEntity KEEP=NO
  private IUmlBes BuildBes (final XmlEntity e) throws CGException {

    String name = GetNameAttribute((XmlEntity) e);
    IUmlMos startOc = null;
    String tmppar_7 = null;
    tmppar_7 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("start"))).val;
    startOc = (IUmlMos) mosMap.get(tmppar_7);
    IUmlMos finishOc = null;
    String tmppar_13 = null;
    tmppar_13 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("finish"))).val;
    finishOc = (IUmlMos) mosMap.get(tmppar_13);
    HashSet covered = new HashSet();
    HashSet res_s_18 = new HashSet();
    {

      HashSet e1_set_25 = new HashSet(GetCovered((XmlEntity) e));
      String c = null;
      {
        for (Iterator enm_27 = e1_set_25.iterator(); enm_27.hasNext(); ) {

          String elem_26 = UTIL.ConvertToString(enm_27.next());
          c = elem_26;
          res_s_18.add((IUmlLifeLine) lifeLineMap.get(c));
        }
      }
    }
    covered = res_s_18;
    String id = null;
    id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    UmlBes bes = (UmlBes) new UmlBes(name, startOc, finishOc, covered);
    {

      besMap.put(id, bes);
      return (IUmlBes) bes;
    }
  }
// ***** VDMTOOLS END Name=BuildBes#1|XmlEntity


// ***** VDMTOOLS START Name=BuildCombi#1|XmlEntity KEEP=NO
  private IUmlCombinedFragment BuildCombi (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    String tmpVal_6 = null;
    tmpVal_6 = GetNameAttribute((XmlEntity) e);
    String name = null;
    name = tmpVal_6;
    IUmlInteractionOperatorKind interactionOperatorKind = null;
    String par_9 = null;
    par_9 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("interactionOperator"))).val;
    interactionOperatorKind = (IUmlInteractionOperatorKind) GetIntOperationKind(par_9);
    Vector operands = null;
    {

      Vector res_l_14 = new Vector();
      HashSet resBind_s_16 = new HashSet();
      HashSet riseq_20 = new HashSet();
      int max_21 = elist.size();
      for (int i_22 = 1; i_22 <= max_21; i_22++) 
        riseq_20.add(new Long(i_22));
      resBind_s_16 = riseq_20;
      Vector bind_l_15 = null;
      bind_l_15 = UTIL.Sort(resBind_s_16);
      Long i = null;
      for (Iterator enm_34 = bind_l_15.iterator(); enm_34.hasNext(); ) {

        Long e_18 = UTIL.NumberToLong(enm_34.next());
        i = e_18;
        Boolean pred_27 = null;
        String var1_28 = null;
        XmlEntity tmpRec_29 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
          tmpRec_29 = (XmlEntity) elist.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_28 = tmpRec_29.name;
        pred_27 = new Boolean(UTIL.equals(var1_28, new String("operand")));
        if (pred_27.booleanValue()) {

          IUmlInteractionOperand reselem_23 = null;
          XmlEntity par_24 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_24 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_23 = (IUmlInteractionOperand) BuildOperand((XmlEntity) par_24);
          res_l_14.add(reselem_23);
        }
      }
      operands = res_l_14;
    }
    HashSet covered = new HashSet();
    HashSet res_s_36 = new HashSet();
    {

      HashSet e1_set_43 = new HashSet(GetCovered((XmlEntity) e));
      String c = null;
      {
        for (Iterator enm_45 = e1_set_43.iterator(); enm_45.hasNext(); ) {

          String elem_44 = UTIL.ConvertToString(enm_45.next());
          c = elem_44;
          res_s_36.add((IUmlLifeLine) lifeLineMap.get(c));
        }
      }
    }
    covered = res_s_36;
    String id = null;
    id = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
    UmlCombinedFragment combi = (UmlCombinedFragment) new UmlCombinedFragment(name, interactionOperatorKind, operands, covered);
    {

      combiMap.put(id, combi);
      return (IUmlCombinedFragment) combi;
    }
  }
// ***** VDMTOOLS END Name=BuildCombi#1|XmlEntity


// ***** VDMTOOLS START Name=GetIntOperationKind#1|String KEEP=NO
  private IUmlInteractionOperatorKind GetIntOperationKind (final String text) throws CGException {

    UmlInteractionOperatorKind varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(text, new String("alt"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlInteractionOperatorKind) new UmlInteractionOperatorKind(UmlInteractionOperatorKindQuotes.IQALT);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(text, new String("loop"))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = (UmlInteractionOperatorKind) new UmlInteractionOperatorKind(UmlInteractionOperatorKindQuotes.IQLOOP);
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    return (IUmlInteractionOperatorKind) varRes_2;
  }
// ***** VDMTOOLS END Name=GetIntOperationKind#1|String


// ***** VDMTOOLS START Name=BuildOperand#1|XmlEntity KEEP=NO
  private IUmlInteractionOperand BuildOperand (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    String tmpVal_6 = null;
    tmpVal_6 = new String("");
    String name = null;
    name = tmpVal_6;
    Vector fragments = new Vector();
    HashSet covered = new HashSet();
    HashSet res_s_9 = new HashSet();
    {

      Vector e_set_14 = null;
      String par_15 = null;
      Vector unArg_16 = null;
      {

        Vector res_l_17 = new Vector();
        HashSet resBind_s_19 = new HashSet();
        HashSet riseq_23 = new HashSet();
        int max_24 = elist.size();
        for (int i_25 = 1; i_25 <= max_24; i_25++) 
          riseq_23.add(new Long(i_25));
        resBind_s_19 = riseq_23;
        Vector bind_l_18 = null;
        bind_l_18 = UTIL.Sort(resBind_s_19);
        Long i = null;
        for (Iterator enm_37 = bind_l_18.iterator(); enm_37.hasNext(); ) {

          Long e_21 = UTIL.NumberToLong(enm_37.next());
          i = e_21;
          Boolean pred_30 = null;
          XmlEntity par_31 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_31 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_30 = HasAttributeValue((XmlEntity) par_31, new String("extender"), new String("umltrans"));
          if (pred_30.booleanValue()) {

            String reselem_26 = null;
            XmlEntity par_27 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              par_27 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            reselem_26 = GetCoveredExtension((XmlEntity) par_27);
            res_l_17.add(reselem_26);
          }
        }
        unArg_16 = res_l_17;
      }
      String rdcseq_38 = new String();
      for (Iterator enm_41 = unArg_16.iterator(); enm_41.hasNext(); ) {

        String e_39 = UTIL.ConvertToString(enm_41.next());
        rdcseq_38 = rdcseq_38.concat(e_39);
      }
      par_15 = rdcseq_38;
      e_set_14 = (Vector) StdLib.Split(par_15, new Character(' '));
      String c = null;
      {
        for (Iterator enm_44 = e_set_14.iterator(); enm_44.hasNext(); ) {

          String elem_43 = UTIL.ConvertToString(enm_44.next());
          c = elem_43;
          res_s_9.add((IUmlMos) mosMap.get(c));
        }
      }
    }
    covered = res_s_9;
    IUmlInteractionConstraint guard = null;
    Boolean cond_47 = null;
    boolean tmpQuant_48 = false;
    {

      HashSet e1_set_55 = new HashSet(elist);
      XmlEntity gu = null;
      {
        for (Iterator enm_57 = e1_set_55.iterator(); enm_57.hasNext() && !tmpQuant_48; ) {

          XmlEntity elem_56 = (XmlEntity) enm_57.next();
          gu = (XmlEntity) elem_56;
          Boolean pred_49 = null;
          String var1_50 = null;
          var1_50 = gu.name;
          pred_49 = new Boolean(UTIL.equals(var1_50, new String("guard")));
          if (pred_49.booleanValue()) 
            tmpQuant_48 = true;
        }
      }
    }
    cond_47 = new Boolean(tmpQuant_48);
    if (cond_47.booleanValue()) {

      XmlEntity par_58 = null;
      {

        HashSet tmpSet_59 = new HashSet();
        HashSet res_s_63 = new HashSet();
        {

          HashSet e1_set_71 = new HashSet(elist);
          XmlEntity p = null;
          {
            for (Iterator enm_73 = e1_set_71.iterator(); enm_73.hasNext(); ) {

              XmlEntity elem_72 = (XmlEntity) enm_73.next();
              p = (XmlEntity) elem_72;
              Boolean pred_65 = null;
              String var1_66 = null;
              var1_66 = p.name;
              pred_65 = new Boolean(UTIL.equals(var1_66, new String("guard")));
              if (pred_65.booleanValue()) {
                res_s_63.add(p);
              }
            }
          }
        }
        tmpSet_59 = res_s_63;
        XmlEntity g = null;
        boolean succ_61 = false;
        for (Iterator enm_74 = tmpSet_59.iterator(); enm_74.hasNext() && !succ_61; ) {

          XmlEntity tmpElem_62 = (XmlEntity) enm_74.next();
          succ_61 = true;
          g = (XmlEntity) tmpElem_62;
        }
        if (!succ_61) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        par_58 = (XmlEntity) g;
      }
      guard = (IUmlInteractionConstraint) GetGuard((XmlEntity) par_58);
    }
    else 
      guard = null;
    return (IUmlInteractionOperand) new UmlInteractionOperand(name, fragments, covered, guard);
  }
// ***** VDMTOOLS END Name=BuildOperand#1|XmlEntity


// ***** VDMTOOLS START Name=RemoveEaPrefix#1|String KEEP=NO
  public String RemoveEaPrefix (final String name) throws CGException {

    String rexpr_2 = null;
    boolean succ_3 = true;
    {

      String nm = null;
      succ_3 = true;
      UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (!succ_3) {

        succ_3 = true;
        UTIL.NotSupported("The construct is not supported: Sequence concatenation pattern");
      }
      if (succ_3) 
        rexpr_2 = nm;
    }
    if (!succ_3) 
      rexpr_2 = name;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=RemoveEaPrefix#1|String


// ***** VDMTOOLS START Name=GetNameAttribute#1|XmlEntity KEEP=NO
  public String GetNameAttribute (final XmlEntity e) throws CGException {

    String rexpr_2 = null;
    String par_3 = null;
    par_3 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("name"))).val;
    rexpr_2 = RemoveEaPrefix(par_3);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=GetNameAttribute#1|XmlEntity


// ***** VDMTOOLS START Name=GetCoveredExtension#1|XmlEntity KEEP=NO
  private String GetCoveredExtension (final XmlEntity e) throws CGException {

    String varRes_2 = null;
    {

      Vector elist = null;
      XmlEntityList tmpRec_5 = null;
      tmpRec_5 = e.entities;
      elist = tmpRec_5.entities;
      {

        HashSet tmpSet_7 = new HashSet();
        HashSet res_s_11 = new HashSet();
        {

          HashSet e1_set_21 = new HashSet(elist);
          XmlEntity co = null;
          {
            for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

              XmlEntity elem_22 = (XmlEntity) enm_23.next();
              co = (XmlEntity) elem_22;
              Boolean pred_15 = null;
              String var1_16 = null;
              var1_16 = co.name;
              pred_15 = new Boolean(UTIL.equals(var1_16, new String("covered")));
              if (pred_15.booleanValue()) {

                String res_s_12 = null;
                XmlData tmpRec_13 = null;
                tmpRec_13 = co.data;
                res_s_12 = tmpRec_13.data;
                res_s_11.add(res_s_12);
              }
            }
          }
        }
        tmpSet_7 = res_s_11;
        String p = null;
        boolean succ_9 = false;
        for (Iterator enm_24 = tmpSet_7.iterator(); enm_24.hasNext() && !succ_9; ) {

          String tmpElem_10 = UTIL.ConvertToString(enm_24.next());
          succ_9 = true;
          p = tmpElem_10;
        }
        if (!succ_9) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        varRes_2 = p;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetCoveredExtension#1|XmlEntity


// ***** VDMTOOLS START Name=GetCovered#1|XmlEntity KEEP=NO
  private Vector GetCovered (final XmlEntity e) throws CGException {

    Vector varRes_2 = null;
    {

      String text = null;
      text = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("covered"))).val;
      varRes_2 = (Vector) StdLib.Split(text, new Character(' '));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetCovered#1|XmlEntity


// ***** VDMTOOLS START Name=GetGuard#1|XmlEntity KEEP=NO
  private IUmlInteractionConstraint GetGuard (final XmlEntity e) throws CGException {

    UmlInteractionConstraint varRes_2 = null;
    {

      Vector elist = null;
      XmlEntityList tmpRec_5 = null;
      tmpRec_5 = e.entities;
      elist = tmpRec_5.entities;
      IUmlValueSpecification minint = null;
      {

        HashSet tmpSet_8 = new HashSet();
        HashSet res_s_12 = new HashSet();
        {

          HashSet e1_set_21 = new HashSet(elist);
          XmlEntity p = null;
          {
            for (Iterator enm_23 = e1_set_21.iterator(); enm_23.hasNext(); ) {

              XmlEntity elem_22 = (XmlEntity) enm_23.next();
              p = (XmlEntity) elem_22;
              Boolean pred_15 = null;
              String var1_16 = null;
              var1_16 = p.name;
              pred_15 = new Boolean(UTIL.equals(var1_16, new String("minint")));
              if (pred_15.booleanValue()) {
                res_s_12.add((IUmlValueSpecification) GetGuardConstraintValue((XmlEntity) p));
              }
            }
          }
        }
        tmpSet_8 = res_s_12;
        IUmlValueSpecification tmp = null;
        boolean succ_10 = false;
        for (Iterator enm_24 = tmpSet_8.iterator(); enm_24.hasNext() && !succ_10; ) {

          IUmlValueSpecification tmpElem_11 = (IUmlValueSpecification) enm_24.next();
          succ_10 = true;
          tmp = (IUmlValueSpecification) tmpElem_11;
        }
        if (!succ_10) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        minint = (IUmlValueSpecification) tmp;
      }
      IUmlValueSpecification maxint = null;
      {

        HashSet tmpSet_26 = new HashSet();
        HashSet res_s_30 = new HashSet();
        {

          HashSet e1_set_39 = new HashSet(elist);
          XmlEntity p = null;
          {
            for (Iterator enm_41 = e1_set_39.iterator(); enm_41.hasNext(); ) {

              XmlEntity elem_40 = (XmlEntity) enm_41.next();
              p = (XmlEntity) elem_40;
              Boolean pred_33 = null;
              String var1_34 = null;
              var1_34 = p.name;
              pred_33 = new Boolean(UTIL.equals(var1_34, new String("maxint")));
              if (pred_33.booleanValue()) {
                res_s_30.add((IUmlValueSpecification) GetGuardConstraintValue((XmlEntity) p));
              }
            }
          }
        }
        tmpSet_26 = res_s_30;
        IUmlValueSpecification tmp = null;
        boolean succ_28 = false;
        for (Iterator enm_42 = tmpSet_26.iterator(); enm_42.hasNext() && !succ_28; ) {

          IUmlValueSpecification tmpElem_29 = (IUmlValueSpecification) enm_42.next();
          succ_28 = true;
          tmp = (IUmlValueSpecification) tmpElem_29;
        }
        if (!succ_28) 
          UTIL.RunTime("Run-Time Error:The binding environment was empty");
        maxint = (IUmlValueSpecification) tmp;
      }
      varRes_2 = (UmlInteractionConstraint) new UmlInteractionConstraint(minint, maxint);
    }
    return (IUmlInteractionConstraint) varRes_2;
  }
// ***** VDMTOOLS END Name=GetGuard#1|XmlEntity


// ***** VDMTOOLS START Name=GetGuardConstraintValue#1|XmlEntity KEEP=NO
  private IUmlValueSpecification GetGuardConstraintValue (final XmlEntity e) throws CGException {

    UmlLiteralInteger varRes_2 = null;
    Boolean cond_4 = null;
    {
      if ((cond_4 = HasAttribute((XmlEntity) e, new String("value"))).booleanValue()) 
        cond_4 = IsAttributeType((XmlEntity) e, new String("uml:LiteralInteger"));
    }
    if (cond_4.booleanValue()) {

      Long arg_11 = null;
      String par_12 = null;
      par_12 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("value"))).val;
      arg_11 = UTIL.NumberToLong(StdLib.StringToInt(par_12));
      varRes_2 = new UmlLiteralInteger(arg_11);
    }
    else 
      varRes_2 = null;
    return (IUmlValueSpecification) varRes_2;
  }
// ***** VDMTOOLS END Name=GetGuardConstraintValue#1|XmlEntity


// ***** VDMTOOLS START Name=BuildCallEventMap#1|HashSet KEEP=NO
  private HashMap BuildCallEventMap (final HashSet elist) throws CGException {

    HashMap m = new HashMap();
    HashMap res_m_4 = new HashMap();
    {

      XmlEntity e = null;
      {
        for (Iterator enm_19 = elist.iterator(); enm_19.hasNext(); ) {

          XmlEntity elem_18 = (XmlEntity) enm_19.next();
          e = (XmlEntity) elem_18;
          String md_5 = null;
          md_5 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("xmi:id"))).val;
          UmlCallEvent mr_9 = null;
          IUmlOperation arg_10 = null;
          String tmppar_12 = null;
          tmppar_12 = ((XmlAttribute) GetAttribute((XmlEntity) e, new String("operation"))).val;
          arg_10 = (IUmlOperation) idToOperationMap.get(tmppar_12);
          mr_9 = new UmlCallEvent(arg_10);
          res_m_4.put(md_5, mr_9);
        }
      }
    }
    m = res_m_4;
    return m;
  }
// ***** VDMTOOLS END Name=BuildCallEventMap#1|HashSet


// ***** VDMTOOLS START Name=VisitXmlAttribute#1|XmlAttribute KEEP=NO
  public void VisitXmlAttribute (final XmlAttribute var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=VisitXmlAttribute#1|XmlAttribute


// ***** VDMTOOLS START Name=VisitXmlData#1|XmlData KEEP=NO
  public void VisitXmlData (final XmlData var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=VisitXmlData#1|XmlData


// ***** VDMTOOLS START Name=SetEncoding#1|String KEEP=NO
  public void SetEncoding (final String var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=SetEncoding#1|String

}
;