["AccNum \u003d AccNum","Date \u003d Date","Details \u003d Details","TransactionType \u003d TransactionType","Transaction \u003d Transaction\n\tinv mk_Transaction(-, a, -) \u003d\u003d (a \u003e 0)","Account \u003d Account\n\tinv mk_Account(-, -, b, l, t) \u003d\u003d ((l \u003e\u003d 0) and ((b \u003e\u003d l) and (balanceOf(t) \u003d b)))","state AccountSysof\n[accounts : map (AccNum) to (Account)]\n\tinv mk_AccountSys(a) \u003d\u003d (forall num in set (dom a) \u0026 (num \u003d (a(num).number)))\n\tinit ac \u003d\u003d (ac \u003d mk_AccountSys({|-\u003e}))","private balanceOf: (seq of (Transaction) -\u003e real)\n\tbalanceOf(transln) \u003d\u003d\nlet dep:seq of (real) \u003d [(transln(i).amount) | i in set (inds transln) \u0026 ((transln(i).transaction_type) \u003d \u003cDeposit\u003e)], withd:seq of (real) \u003d [(transln(i).amount) | i in set (inds transln) \u0026 ((transln(i).transaction_type) \u003d \u003cWithdrawal\u003e)] in (sum(dep) - sum(withd))","private sum: (seq of (real) -\u003e real)\n\tsum(seqln) \u003d\u003d\n(if (seqln \u003d [])\nthen 0\nelse ((hd seqln) + sum((tl seqln))))","private Len: (seq of (real) -\u003e nat)\n\tLen(l) \u003d\u003d\n(len l)","addAccount([numberIn]AccNum, [detailsIn]Details, [limitIn]real)\n\text [wr[accounts]map (AccNum) to (Account)]\n\tpre ((numberIn not in set (dom accounts)) and (limitIn \u003e\u003d 0))\n\tpost (accounts \u003d (accounts~ munion {numberIn |-\u003e mk_Account(numberIn, detailsIn, 0, limitIn, [])}))","removeAccount([numberIn]AccNum)\n\text [wr[accounts]map (AccNum) to (Account)]\n\tpre (numberIn in set (dom accounts))\n\tpost (accounts \u003d ({numberIn} \u003c-: accounts~))","deposit([numberIn]AccNum, [dateIn]Date, [amountIn]real)\n\text [wr[accounts]map (AccNum) to (Account)]\n\tpre ((numberIn in set (dom accounts)) and (amountIn \u003e\u003d 0))\n\tpost let bal:real \u003d (accounts~(numberIn).balance), trans:seq of (Transaction) \u003d (accounts~(numberIn).transactions) in let newTrans:Transaction \u003d mk_Transaction(dateIn, amountIn, \u003cDeposit\u003e) in (accounts \u003d (accounts~ ++ {numberIn |-\u003e mu(accounts~(numberIn), balance |-\u003e (bal + amountIn), transactions |-\u003e (trans ^ [newTrans]))}))","withdraw([numberIn]AccNum, [dateIn]Date, [amountIn]real)\n\text [wr[accounts]map (AccNum) to (Account)]\n\tpre ((numberIn in set (dom accounts)) and ((amountIn \u003e\u003d 0) and (((accounts(numberIn).balance) - amountIn) \u003e\u003d (accounts(numberIn).limit))))\n\tpost let bal:real \u003d (accounts~(numberIn).balance), trans:seq of (Transaction) \u003d (accounts~(numberIn).transactions) in let newTrans:Transaction \u003d mk_Transaction(dateIn, amountIn, \u003cWithdrawal\u003e) in (accounts \u003d (accounts~ ++ {numberIn |-\u003e mu(accounts~(numberIn), balance |-\u003e (bal - amountIn), transactions |-\u003e (trans ^ [newTrans]))}))","changeDetails([numberIn]AccNum, [detailsIn]Details)\n\text [wr[accounts]map (AccNum) to (Account)]\n\tpre (numberIn in set (dom accounts))\n\tpost (accounts \u003d (accounts~ ++ {numberIn |-\u003e mu(accounts~(numberIn), details |-\u003e detailsIn)}))","changeLimits([numberIn]AccNum, [limitIn]real)\n\text [wr[accounts]map (AccNum) to (Account)]\n\tpre ((numberIn in set (dom accounts)) and ((limitIn \u003e\u003d 0) and ((accounts(numberIn).balance) \u003e\u003d limitIn)))\n\tpost (accounts \u003d (accounts~ ++ {numberIn |-\u003e mu(accounts~(numberIn), limit |-\u003e limitIn)}))","getDetails([numberIn]AccNum) detailsOut:Details\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpre (numberIn in set (dom accounts))\n\tpost (detailsOut \u003d (accounts(numberIn).details))","getBalance([numberIn]AccNum) balanceOut:real\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpre (numberIn in set (dom accounts))\n\tpost (balanceOut \u003d (accounts(numberIn).balance))","getLimit([numberIn]AccNum) limitOut:real\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpre (numberIn in set (dom accounts))\n\tpost (limitOut \u003d (accounts(numberIn).limit))","getAllTransactions([numberIn]AccNum) transactionsOut:seq of (Transaction)\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpre (numberIn in set (dom accounts))\n\tpost (transactionsOut \u003d (accounts(numberIn).transactions))","contains([numberIn]AccNum) query:bool\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpost (query \u003c\u003d\u003e (numberIn in set (dom accounts)))","isEmpty() query:bool\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpost (query \u003c\u003d\u003e (accounts \u003d {|-\u003e}))","getTotal() totalOut:nat\n\text [rd[accounts]map (AccNum) to (Account)]\n\tpost (totalOut \u003d (card (dom accounts)))"]