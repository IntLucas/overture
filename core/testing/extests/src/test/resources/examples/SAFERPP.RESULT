["class Buffer\nprivate  data:[nat] :\u003d nil\npublic  Buffer() (() \u003d\u003d\u003e Buffer)\n\tBuffer()() \u003d\u003d\ndata :\u003d nil\npublic  Write(nat) (nat \u003d\u003d\u003e ())\n\tWrite(nat)(newData) \u003d\u003d\n(\n\nIO`print(\"Writer wrote: \");\nIO`print(newData);\nIO`print(\"\n\");\ndata :\u003d newData\n)\npublic  Read() (() \u003d\u003d\u003e nat)\n\tRead()() \u003d\u003d\nlet oldData:nat \u003d data in (\n\nIO`print(\"Reader read: \");\nIO`print(oldData);\nIO`print(\"\n\");\ndata :\u003d nil;\nreturn (oldData)\n)\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  per Write \u003d\u003e (#fin[Read] \u003d #fin[Write])\nprivate  per Read \u003d\u003e ((#fin[Read] + 1) \u003d #fin[Write])\nprivate  per IsFinished \u003d\u003e (#fin[Read] \u003d 3)\nend Buffer\n","class Reader\nprivate  b:Buffer :\u003d (undefined)\npublic  Reader(Buffer) (Buffer \u003d\u003d\u003e Reader)\n\tReader(Buffer)(buf) \u003d\u003d\nb :\u003d buf\nprotected  thread while true do (\n\nlet x:nat \u003d (b.Read)() in (\n\nskip\n)\n)\nend Reader\n","class TestClass\nprivate  B:Buffer :\u003d (undefined)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nB :\u003d new Buffer();\nlet - \u003d (new IO().echo)((\"Going to fire writer\" ^ \"\n\")) in skip;\nstart (new Writer(B));\nlet - \u003d (new IO().echo)((\"Going to fire reader\" ^ \"\n\")) in skip;\nstart (new Reader(B));\nlet - \u003d (new IO().echo)((\"TestClass is now going to wait\" ^ \"\n\")) in skip;\nB.IsFinished()\n)\nend TestClass\n","class Writer\nprivate  b:Buffer :\u003d (undefined)\nprivate  index:nat :\u003d 0\npublic  Writer(Buffer) (Buffer \u003d\u003d\u003e Writer)\n\tWriter(Buffer)(buf) \u003d\u003d\nb :\u003d buf\npublic  Write() (() \u003d\u003d\u003e nat)\n\tWrite()() \u003d\u003d\n(\n\nindex :\u003d (index + 1);\nreturn (index)\n)\nprotected  thread (\n\nwhile true do (\n\nlet x:nat \u003d Write() in (\n\nb.Write(x)\n)\n)\n)\nend Writer\n","class IO\npublic static  filedirective \u003d filedirective\npublic  public writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic  public fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic  public freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(f) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]