["class Heart\npublic static  Trace \u003d Trace\npublic static  Event \u003d Event\nprivate  aperiod:nat :\u003d 15\nprivate  vdelay:nat :\u003d 10\npublic  Heart(nat, nat) (nat * nat \u003d\u003d\u003e Heart)\n\tHeart(nat, nat)(aperi, vdel) \u003d\u003d\n(\n\naperiod :\u003d aperi;\nvdelay :\u003d vdel\n)\npublic  IdealHeart() (() \u003d\u003d\u003e Trace)\n\tIdealHeart()() \u003d\u003d\nreturn ([(if ((i mod aperiod) \u003d 1)\nthen \u003cA\u003e\nelseif ((i mod aperiod) \u003d (vdelay + 1))\nthen \u003cV\u003e\nelse nil) | i in set {1, ... ,100}])\npublic  FaultyHeart()() tr:Trace\n\text [rd[aperiod]nat]\n\tpost (((len tr) \u003d 100) and (Periodic(tr, \u003cA\u003e, aperiod) and (not Periodic(tr, \u003cV\u003e, aperiod))))\npublic  public Periodic: (Trace * Event * nat1 -\u003e bool)\n\tPeriodic(tr, e, p) \u003d\u003d\n(forall t in set (inds tr) \u0026 ((tr(t) \u003d e) \u003d\u003e (((t + p) \u003c\u003d (len tr)) \u003d\u003e (((tr((t + p)) \u003d e) and (forall i in set {(t + 1), ... ,((t + p) - 1)} \u0026 (tr(i) \u003c\u003e e))) and (((t + p) \u003e (len tr)) \u003d\u003e (forall i in set {(t + 1), ... ,(len tr)} \u0026 (tr(i) \u003c\u003e e)))))))\nend Heart\n","class Pacemaker\npublic static  wrongTR:Trace \u003d [\u003cA\u003e, nil, \u003cV\u003e, nil, nil, \u003cA\u003e, nil, nil, nil, nil]\npublic  Pace(Trace, nat1, nat1) (Trace * nat1 * nat1 \u003d\u003d\u003e Trace)\n\tPace(Trace, nat1, nat1)(tr, aperi, vdel) \u003d\u003d\nreturn (([nil] ^ [(if (((i mod aperi) \u003d (vdel + 1)) and (tr(i) \u003c\u003e \u003cV\u003e))\nthen \u003cV\u003e\nelse nil) | i in set (inds (tl tr))]))\nend Pacemaker\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]