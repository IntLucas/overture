["class HighAtmosphericAirPressure is subclass of [AtmosphericAirPressure]\nprivate  inv(atm \u003e 1)\nend HighAtmosphericAirPressure\n","class LowAtmosphericAirPressure is subclass of [AtmosphericAirPressure]\nprivate  inv(atm \u003c 1)\nend LowAtmosphericAirPressure\n","class NormalAtmosphericAirPressure is subclass of [AtmosphericAirPressure]\nprivate  inv(atm \u003d 1)\nend NormalAtmosphericAirPressure\n","class AtmosphericAirPressure\nprivate static  Atmosphere \u003d Atmosphere\nprotected  atm:real :\u003d (undefined)\npublic  GetAtm() (() \u003d\u003d\u003e real)\n\tGetAtm()() \u003d\u003d\nreturn (atm)\npublic  SetAtm(real) (real \u003d\u003d\u003e ())\n\tSetAtm(real)(a) \u003d\u003d\natm :\u003d a\nend AtmosphericAirPressure\n","class Water is subclass of [Liquid]\npublic  SetBoilingPoint() (() \u003d\u003d\u003e ())\n\tSetBoilingPoint()() \u003d\u003d\nboiling_point :\u003d {1.0 |-\u003e 100.0, 0.53 |-\u003e 85.0}\nend Water\n","class Liquid\nprotected  aap:AtmosphericAirPressure :\u003d (undefined)\nprotected  boiling_point:map (real) to (real) :\u003d (undefined)\nprotected  temperature:real :\u003d (undefined)\nprotected  amount:real :\u003d (undefined)\npublic  GetAap() (() \u003d\u003d\u003e AtmosphericAirPressure)\n\tGetAap()() \u003d\u003d\nreturn (aap)\npublic  SetAap(AtmosphericAirPressure) (AtmosphericAirPressure \u003d\u003d\u003e ())\n\tSetAap(AtmosphericAirPressure)(a) \u003d\u003d\naap :\u003d a\npublic  GetBoilingPoint(real) (real \u003d\u003d\u003e real)\n\tGetBoilingPoint(real)(atm) \u003d\u003d\nreturn (boiling_point(atm))\n\tpre (atm in set (dom boiling_point))\npublic  GetTemperature() (() \u003d\u003d\u003e real)\n\tGetTemperature()() \u003d\u003d\nreturn (temperature)\npublic  SetTemperature(real) (real \u003d\u003d\u003e ())\n\tSetTemperature(real)(t) \u003d\u003d\ntemperature :\u003d t\npublic  AddTemperature() (() \u003d\u003d\u003e ())\n\tAddTemperature()() \u003d\u003d\nif (temperature \u003c boiling_point((aap.GetAtm)()))\nthen\ntemperature :\u003d (temperature + 1.0)else\n(\n\ntemperature :\u003d boiling_point((aap.GetAtm)());\namount :\u003d (amount - 1.0)\n)\n\tpre (((aap.GetAtm)() in set (dom boiling_point)) and (temperature \u003c\u003d boiling_point((aap.GetAtm)())))\n\tpost (temperature \u003c\u003d boiling_point((aap.GetAtm)()))\npublic  GetAmount() (() \u003d\u003d\u003e real)\n\tGetAmount()() \u003d\u003d\nreturn (amount)\npublic  SetAmount(real) (real \u003d\u003d\u003e ())\n\tSetAmount(real)(a) \u003d\u003d\namount :\u003d a\nend Liquid\n","class RealWorld1\npublic  aap:LowAtmosphericAirPressure :\u003d (undefined)\npublic  liquid:Water :\u003d (undefined)\npublic  Setup() (() \u003d\u003d\u003e ())\n\tSetup()() \u003d\u003d\n(\n\naap :\u003d new LowAtmosphericAirPressure();\naap.SetAtm(0.53);\nliquid :\u003d new Water();\nliquid.SetAap(aap);\nliquid.SetBoilingPoint();\nliquid.SetTemperature(35.0);\nliquid.SetAmount(1000.0)\n)\nend RealWorld1\n","class RealWorld2\npublic  aap:NormalAtmosphericAirPressure :\u003d (undefined)\npublic  liquid:Water :\u003d (undefined)\npublic  Setup() (() \u003d\u003d\u003e ())\n\tSetup()() \u003d\u003d\n(\n\naap :\u003d new NormalAtmosphericAirPressure();\naap.SetAtm(1.0);\nliquid :\u003d new Water();\nliquid.SetAap(aap);\nliquid.SetBoilingPoint();\nliquid.SetTemperature(35.0);\nliquid.SetAmount(1000.0)\n)\nend RealWorld2\n","class Heater\nprivate static  Switch \u003d Switch\nprivate  sw:Switch :\u003d (undefined)\nprivate  realworld_liquid:Liquid :\u003d (undefined)\npublic  Setup((RealWorld1 | RealWorld2)) ((RealWorld1 | RealWorld2) \u003d\u003d\u003e ())\n\tSetup((RealWorld1 | RealWorld2))(realworld) \u003d\u003d\nrealworld_liquid :\u003d (realworld.liquid)\npublic  On() (() \u003d\u003d\u003e ())\n\tOn()() \u003d\u003d\n(\n\nsw :\u003d \u003cOn\u003e;\nrealworld_liquid.AddTemperature()\n)\npublic  Off() (() \u003d\u003d\u003e ())\n\tOff()() \u003d\u003d\nsw :\u003d \u003cOff\u003e\nend Heater\n","class LiquidLevelSensor\nprivate  realworld_liquid:Liquid :\u003d (undefined)\npublic  Setup((RealWorld1 | RealWorld2)) ((RealWorld1 | RealWorld2) \u003d\u003d\u003e ())\n\tSetup((RealWorld1 | RealWorld2))(realworld) \u003d\u003d\nrealworld_liquid :\u003d (realworld.liquid)\npublic  IsOn() (() \u003d\u003d\u003e bool)\n\tIsOn()() \u003d\u003d\nreturn (((realworld_liquid.GetAmount)() \u003e 0))\nend LiquidLevelSensor\n","class Thermistor\nprivate  realworld_liquid:Liquid :\u003d (undefined)\npublic  Setup((RealWorld1 | RealWorld2)) ((RealWorld1 | RealWorld2) \u003d\u003d\u003e ())\n\tSetup((RealWorld1 | RealWorld2))(realworld) \u003d\u003d\nrealworld_liquid :\u003d (realworld.liquid)\npublic  GetTemperature() (() \u003d\u003d\u003e real)\n\tGetTemperature()() \u003d\u003d\nreturn ((realworld_liquid.GetTemperature)())\nend Thermistor\n","class Software\nprivate  heater:Heater :\u003d (undefined)\nprivate  thermistor:Thermistor :\u003d (undefined)\nprivate  liquid_level_sensor:LiquidLevelSensor :\u003d (undefined)\npublic  Setup((RealWorld1 | RealWorld2)) ((RealWorld1 | RealWorld2) \u003d\u003d\u003e ())\n\tSetup((RealWorld1 | RealWorld2))(realworld) \u003d\u003d\n(\n\nheater :\u003d new Heater();\nheater.Setup(realworld);\nthermistor :\u003d new Thermistor();\nthermistor.Setup(realworld);\nliquid_level_sensor :\u003d new LiquidLevelSensor();\nliquid_level_sensor.Setup(realworld)\n)\npublic  Boil() (() \u003d\u003d\u003e ())\n\tBoil()() \u003d\u003d\nwhile (((thermistor.GetTemperature)() \u003c 100.0) and (liquid_level_sensor.IsOn)()) do heater.On()\n\tpre (liquid_level_sensor.IsOn)()\n\tpost (liquid_level_sensor.IsOn)()\nend Software\n","class UserTest\nprivate  realworld:RealWorld1 :\u003d (undefined)\nprivate  sw:Software :\u003d (undefined)\npublic  test() (() \u003d\u003d\u003e bool)\n\ttest()() \u003d\u003d\n(\n\nrealworld :\u003d new RealWorld1();\nrealworld.Setup();\nsw :\u003d new Software();\nsw.Setup(realworld);\nsw.Boil();\nreturn (true)\n)\nend UserTest\n"]