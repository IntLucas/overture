["class Example3\nprivate static  ADDR \u003d ADDR\nprivate static  CON \u003d CON\nprivate static  State \u003d State\n\tinv mk_State(mem, access, used) \u003d\u003d (used \u003d (dom mem))\nprivate  private Safe: (State -\u003e bool)\n\tSafe(mk_State(-, access, used)) \u003d\u003d\n(used subset access)\nprivate  private Alloc: (ADDR * State -\u003e State)\n\tAlloc(addr, mk_State(mem, access, used)) \u003d\u003d\nlet used\u0027:set of (ADDR) \u003d (used union {addr}), mem\u0027:map (ADDR) to (CON) \u003d (mem ++ {addr |-\u003e let c:CON in c}) in mk_State(mem\u0027, access, used\u0027)\n\tpre (addr not in set used)\nprivate  private Alloc2: (ADDR * State -\u003e State)\n\tAlloc2(addr, mk_State(mem, access, used)) \u003d\u003d\nlet used\u0027:set of (ADDR) \u003d (used union {addr}), mem\u0027:map (ADDR) to (CON) \u003d (mem munion {addr |-\u003e let c:CON in c}) in mk_State(mem\u0027, access, used\u0027)\n\tpre ((addr not in set used) and (addr in set access))\nprivate  private Alloc20: (ADDR * State -\u003e State)\n\tAlloc20(addr, mk_State(mem, access, used)) \u003d\u003d\nlet used\u0027:set of (ADDR) \u003d (used union {addr}), mem\u0027:map (ADDR) to ((\u003cc0\u003e | CON)) \u003d (mem ++ {addr |-\u003e \u003cc0\u003e}) in mk_State(mem\u0027, access, used\u0027)\n\tpre ((addr not in set used) and (addr in set access))\nprivate  private Alloc21: (ADDR * State -\u003e State)\n\tAlloc21(addr, mk_State(-, access, used)) \u003d\u003d\nlet used\u0027:set of (ADDR) \u003d (used union {addr}), mem\u0027:map (ADDR) to (CON) \u003d {addr |-\u003e let c:CON in c} in mk_State(mem\u0027, access, used\u0027)\n\tpre ((addr not in set used) and (addr in set access))\nprivate  private Alloc3: (ADDR * State * map (ADDR) to (CON) -\u003e State)\n\tAlloc3(addr, mk_State(mem, access, used), mem2) \u003d\u003d\nlet used\u0027:set of (ADDR) \u003d (used union {addr}), mem\u0027:map (ADDR) to (CON) \u003d (mem munion {addr |-\u003e let c:CON in c}) in mk_State(mem\u0027, access, used\u0027)\n\tpre ((addr not in set used) and (addr in set access))\n\tpost (mem2 \u003d (mem munion {addr |-\u003e let c:CON in c}))\nprivate  private AllocSafe: (ADDR * State -\u003e bool)\n\tAllocSafe(addr, sta) \u003d\u003d\n(Safe(sta) \u003d\u003e Safe(Alloc(addr, sta)))\n\tpost (RESULT \u003d true)\nprivate  private AllocSafe0: (ADDR * State -\u003e bool)\n\tAllocSafe0(addr, sta) \u003d\u003d\n(Safe(sta) \u003d\u003e Safe(Alloc(addr, sta)))\n\tpre (addr not in set (sta.used))\n\tpost (RESULT \u003d true)\nprivate  private AllocSafe2: (ADDR * State -\u003e bool)\n\tAllocSafe2(addr, sta) \u003d\u003d\n(Safe(sta) \u003d\u003e Safe(Alloc(addr, sta)))\n\tpre ((addr not in set (sta.used)) and (addr in set (sta.access)))\n\tpost (RESULT \u003d true)\npublic  RunTest() (() \u003d\u003d\u003e bool)\n\tRunTest()() \u003d\u003d\n(\n\nlet s:State \u003d mk_State({\u003ca0\u003e |-\u003e \u003cc0\u003e}, {\u003ca0\u003e, \u003ca1\u003e}, {\u003ca0\u003e}) in AllocSafe2(\u003ca1\u003e, s)\n)\nend Example3\n"]