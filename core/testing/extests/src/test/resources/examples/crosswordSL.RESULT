["state Systemof\n[accounts : map (AccountId) to (Account), illegalCards : set of (CardId), curCard : [Card], cardOk : bool, retainedCards : set of (Card)]\n\tinv mk_System(accs, -, curCard, cardOk, -) \u003d\u003d (((curCard \u003d nil) \u003d\u003e (not cardOk)) and (forall id1, id2 in set (dom accs) \u0026 ((id1 \u003c\u003e id2) \u003d\u003e (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) \u003d {}))))\n\tinit s \u003d\u003d (s \u003d mk_System({|-\u003e}, {}, nil, false, {}))","Account \u003d Account\n\tinv account \u003d\u003d TransactionsInvariant((account.transactions))","Transaction \u003d Transaction","Card \u003d Card","Cardholder \u003d Cardholder","AccountId \u003d AccountId","Name \u003d Name","CardId \u003d CardId","Code \u003d Code","PinCode \u003d PinCode","Date \u003d Date","private static TransactionsInvariant: (seq of (Transaction) +\u003e bool)\n\tTransactionsInvariant(ts) \u003d\u003d\n(forall date in set {(ts(i).date) | i in set (inds ts)} \u0026 (DateTotal(date, ts) \u003c\u003d dailyLimit))","private static DateTotal: (Date * seq of (Transaction) +\u003e nat)\n\tDateTotal(date, ts) \u003d\u003d\nSum([(ts(i).amount) | i in set (inds ts) \u0026 ((ts(i).date) \u003d date)])","dailyLimit:nat \u003d 2000","InsertCard (Card \u003d\u003d\u003e ())\n\tInsertCard(c) \u003d\u003d\ncurCard :\u003d c\n\tpre (curCard \u003d nil)","Validate (PinCode \u003d\u003d\u003e (\u003cPinNotOk\u003e | \u003cPinOk\u003e | \u003cRetained\u003e))\n\tValidate(pin) \u003d\u003d\nlet codeOk:bool \u003d ((curCard.code) \u003d Encode(pin)), cardLegal:bool \u003d IsLegalCard(curCard, illegalCards, accounts) in (\n\nif (not cardLegal)\nthen\n(\n\nretainedCards :\u003d (retainedCards union {curCard});\ncardOk :\u003d false;\ncurCard :\u003d nil;\nreturn (\u003cRetained\u003e)\n)else\ncardOk :\u003d codeOk;\nreturn ((if cardOk\nthen \u003cPinOk\u003e\nelse \u003cPinNotOk\u003e))\n)\n\tpre ((curCard \u003c\u003e nil) and (not cardOk))","ReturnCard (() \u003d\u003d\u003e ())\n\tReturnCard() \u003d\u003d\n(\n\ncardOk :\u003d false;\ncurCard :\u003d nil\n)\n\tpre (curCard \u003c\u003e nil)","GetBalance (() \u003d\u003d\u003e nat)\n\tGetBalance() \u003d\u003d\nreturn ((accounts((curCard.accountId)).balance))\n\tpre ((curCard \u003c\u003e nil) and (cardOk and IsLegalCard(curCard, illegalCards, accounts)))","MakeWithdrawal (nat * Date \u003d\u003d\u003e bool)\n\tMakeWithdrawal(amount, date) \u003d\u003d\nlet mk_Card(-, cardId, accountId):[Card] \u003d curCard, transaction:Transaction \u003d mk_Transaction(date, cardId, amount) in if ((((accounts(accountId).balance) - amount) \u003e\u003d 0) and (DateTotal(date, ((accounts(accountId).transactions) ^ [transaction])) \u003c\u003d dailyLimit))\nthen\n(\n\naccounts(accountId).balance :\u003d ((accounts(accountId).balance) - amount);\naccounts(accountId).transactions :\u003d ((accounts(accountId).transactions) ^ [transaction]);\nreturn (true)\n)else\nreturn (false)\n\tpre ((curCard \u003c\u003e nil) and (cardOk and IsLegalCard(curCard, illegalCards, accounts)))","RequestStatement (() \u003d\u003d\u003e (Name * seq of (Transaction) * nat))\n\tRequestStatement() \u003d\u003d\nlet mk_Card(-, cardId, accountId):[Card] \u003d curCard, mk_Account(cards, balance, transactions):Account \u003d accounts(accountId) in return (mk_((cards(cardId).name), transactions, balance))\n\tpre ((curCard \u003c\u003e nil) and (cardOk and IsLegalCard(curCard, illegalCards, accounts)))","private static IsLegalCard: (Card * set of (CardId) * map (AccountId) to (Account) -\u003e bool)\n\tIsLegalCard(mk_Card(-, cardId, accountId), pillegalcards, paccounts) \u003d\u003d\n((cardId not in set pillegalcards) and ((accountId in set (dom paccounts)) and (cardId in set (dom (paccounts(accountId).cards)))))","ReportIllegalCard (CardId \u003d\u003d\u003e ())\n\tReportIllegalCard(cardId) \u003d\u003d\nillegalCards :\u003d (illegalCards union {cardId})","AddAccount (AccountId * Account \u003d\u003d\u003e ())\n\tAddAccount(accountId, account) \u003d\u003d\naccounts :\u003d (accounts munion {accountId |-\u003e account})\n\tpre (accountId not in set (dom accounts))","private static Encode: (PinCode +\u003e Code)\n\tEncode(pin) \u003d\u003d\npin","private static Sum: (seq of (real) +\u003e real)\n\tSum(rs) \u003d\u003d\n(if (rs \u003d [])\nthen 0\nelse ((hd rs) + Sum((tl rs))))","private static Len: (seq of (real) +\u003e nat)\n\tLen(list) \u003d\u003d\n(len list)","[TestCash][[c in set {mk_Card(1, 1, 1), mk_Card(2, 2, 2)}ALetBeStBindingTraceDefinition([[InsertCard(c){1,1}], [Validate(1111){1,1}], [ReportIllegalCard((c.cardId)){1,1}]]){1,5}def c in set {mk_Card(1, 1, 1), mk_Card(2, 2, 2)}]]"]