["class Brake\nprivate  mLowLimit:RPMType :\u003d (undefined)\nprivate  mHighLimit:RPMType :\u003d (undefined)\npublic  Brake(RPMType, RPMType) (RPMType * RPMType \u003d\u003d\u003e Brake)\n\tBrake(RPMType, RPMType)(low, high) \u003d\u003d\n(\n\nmLowLimit :\u003d low;\nmHighLimit :\u003d high\n)\n\tpre (low \u003c high)\npublic  GetLow() (() \u003d\u003d\u003e RPMType)\n\tGetLow()() \u003d\u003d\nreturn (mLowLimit)\npublic  GetHigh() (() \u003d\u003d\u003e RPMType)\n\tGetHigh()() \u003d\u003d\nreturn (mHighLimit)\npublic  IsEqual(Brake) (Brake \u003d\u003d\u003e bool)\n\tIsEqual(Brake)(brake) \u003d\u003d\nreturn (((GetLow() \u003d (brake.GetLow)()) and (GetHigh() \u003d (brake.GetHigh)())))\npublic  ApplyBrake(RPMType) (RPMType \u003d\u003d\u003e RPMType)\n\tApplyBrake(RPMType)(rpm) \u003d\u003d\nreturn ((if InRange(rpm)\nthen mLowLimit\nelse rpm))\npublic  InterSect(Brake) (Brake \u003d\u003d\u003e bool)\n\tInterSect(Brake)(brake) \u003d\u003d\nreturn (((brake.InRange)(mLowLimit) or (brake.InRange)(mHighLimit)))\npublic  InRange(RPMType) (RPMType \u003d\u003d\u003e bool)\n\tInRange(RPMType)(rpm) \u003d\u003d\nreturn (((rpm \u003e\u003d mLowLimit) and (rpm \u003c\u003d mHighLimit)))\nend Brake\n","class Enviroment\npublic static  TestData \u003d TestData\nprivate static  private static CreateTestSeq: (WindSpeedType * bool -\u003e seq of (TestData))\n\tCreateTestSeq(wind, eStop) \u003d\u003d\n[(if ((x mod 10) \u003d 1)\nthen mk_TestData(wind, \u003cE\u003e, false)\nelseif ((x mod 10) \u003d 5)\nthen mk_TestData(wind, \u003cL\u003e, false)\nelse mk_TestData(wind, \u003cN\u003e, (((x mod 10) \u003d 6) and eStop))) | x in set {1, ... ,10}]\npublic static  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nlet TestSeq:seq of (TestData) \u003d (((CreateTestSeq(14, false) ^ CreateTestSeq(15, true)) ^ CreateTestSeq(15, false)) ^ CreateTestSeq(16, false)), WindTurbine:WindTurbine \u003d new WindTurbine(TestSeq) in WindTurbine.Run()\nend Enviroment\n","class Hub\nprivate  mSpeaker:Speaker :\u003d (undefined)\nprivate  mIsLocked:bool :\u003d true\nprivate  mIsEStopPressed:bool :\u003d false\npublic  Hub() (() \u003d\u003d\u003e Hub)\n\tHub()() \u003d\u003d\nmSpeaker :\u003d new Speaker()\npublic  Open() (() \u003d\u003d\u003e ())\n\tOpen()() \u003d\u003d\n(\n\nmIsLocked :\u003d false;\nmSpeaker.StopAlarm()\n)\n\tpre (not IsOpen())\npublic  Close() (() \u003d\u003d\u003e ())\n\tClose()() \u003d\u003d\n(\n\nmIsLocked :\u003d true;\nmSpeaker.StartAlarm()\n)\n\tpre IsOpen()\npublic  IsOpen() (() \u003d\u003d\u003e bool)\n\tIsOpen()() \u003d\u003d\nreturn ((not mIsLocked))\npublic  IsAlarmActive() (() \u003d\u003d\u003e bool)\n\tIsAlarmActive()() \u003d\u003d\nreturn ((mSpeaker.IsActive)())\npublic  PressEStop() (() \u003d\u003d\u003e ())\n\tPressEStop()() \u003d\u003d\nmIsEStopPressed :\u003d true\npublic  ReleaseEStop() (() \u003d\u003d\u003e ())\n\tReleaseEStop()() \u003d\u003d\nmIsEStopPressed :\u003d false\npublic  IsEStopPressed() (() \u003d\u003d\u003e bool)\n\tIsEStopPressed()() \u003d\u003d\nreturn (mIsEStopPressed)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nmSpeaker.Run()\nend Hub\n","class HubController\nprivate  mHub:Hub :\u003d (undefined)\nprivate  mMainShaftController:MainShaftController :\u003d (undefined)\nprivate  mMode:Mode :\u003d (undefined)\nprivate  invMode`HubInSafeModeInv(mMode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)())\nprivate  mEStopSeq:seq of (bool) :\u003d []\npublic  HubController(seq of (bool), MainShaftController) (seq of (bool) * MainShaftController \u003d\u003d\u003e HubController)\n\tHubController(seq of (bool), MainShaftController)(eStopSeq, mainShaftController) \u003d\u003d\n(\n\nmHub :\u003d new Hub();\nmEStopSeq :\u003d eStopSeq;\nmMainShaftController :\u003d mainShaftController;\nmMode :\u003d new ModeOperational();\nMode`SetHubController(self)\n)\npublic  GetHub() (() \u003d\u003d\u003e Hub)\n\tGetHub()() \u003d\u003d\nreturn (mHub)\npublic  GetMainShaftController() (() \u003d\u003d\u003e MainShaftController)\n\tGetMainShaftController()() \u003d\u003d\nreturn (mMainShaftController)\npublic  SetMode(Mode) (Mode \u003d\u003d\u003e ())\n\tSetMode(Mode)(mode) \u003d\u003d\nmMode :\u003d mode\n\tpre (Mode`StateChangeInv(mMode, mode) and Mode`HubInSafeModeInv(mode, (mMainShaftController.GetRPM)(), (mMainShaftController.IsLocked)(), (mHub.IsOpen)()))\npublic  GetMode() (() \u003d\u003d\u003e Mode)\n\tGetMode()() \u003d\u003d\nreturn (mMode)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nif ((len mEStopSeq) \u003e\u003d 1)\nthen\nlet eStop:bool \u003d (hd mEStopSeq) in (\n\nmEStopSeq :\u003d (tl mEStopSeq);\nif eStop\nthen\nmHub.PressEStop()else\nmHub.ReleaseEStop()\n);\nmHub.Run();\nmMode.Run()\n)\nend HubController\n","class MainShaftController\npublic static  LOCK_LIMIT:RPMType \u003d 1\npublic static  MAX_RPM:RPMType \u003d (WindMeasurementController`MAX_WIND * 10)\npublic static  RPMType \u003d RPMType\n\tinv rpm \u003d\u003d (rpm \u003c\u003d (WindMeasurementController`MAX_WIND * 10))\nprivate  mIsLocked:bool :\u003d false\nprivate  mBrakeSeq:seq of (Brake) :\u003d []\nprivate  invBrakeSeqInv(mBrakeSeq)\nprivate  mRPM:RPMType :\u003d 0\nprivate  mIsBrakeApplied:bool :\u003d false\nprivate static  private static BrakeSeqInv: (seq of (Brake) -\u003e bool)\n\tBrakeSeqInv(brakeSeq) \u003d\u003d\n(forall i in set (inds brakeSeq) \u0026 ((i \u003e 1) \u003d\u003e ((brakeSeq((i - 1)).GetLow)() \u003d (brakeSeq(i).GetHigh)())))\npublic  MainShaftController() (() \u003d\u003d\u003e MainShaftController)\n\tMainShaftController()() \u003d\u003d\n(\n\nAddBrake(new Brake(100, MAX_RPM));\nAddBrake(new Brake(50, 100));\nAddBrake(new Brake(LOCK_LIMIT, 50));\nAddBrake(new Brake(0, LOCK_LIMIT))\n)\npublic  CloseLock() (() \u003d\u003d\u003e ())\n\tCloseLock()() \u003d\u003d\nmIsLocked :\u003d true\n\tpre ((not IsLocked()) and ((GetRPM() \u003d 0) and IsBrakeApplied()))\npublic  OpenLock() (() \u003d\u003d\u003e ())\n\tOpenLock()() \u003d\u003d\nmIsLocked :\u003d false\n\tpre (IsLocked() and ((GetRPM() \u003d 0) and IsBrakeApplied()))\npublic  IsLocked() (() \u003d\u003d\u003e bool)\n\tIsLocked()() \u003d\u003d\nreturn (mIsLocked)\nprivate  AddBrake(Brake) (Brake \u003d\u003d\u003e ())\n\tAddBrake(Brake)(brake) \u003d\u003d\nmBrakeSeq :\u003d (mBrakeSeq ^ [brake])\n\tpre BrakeSeqInv((mBrakeSeq ^ [brake]))\nprivate  RemoveBrake(Brake) (Brake \u003d\u003d\u003e ())\n\tRemoveBrake(Brake)(brake) \u003d\u003d\nmBrakeSeq :\u003d [mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))]\n\tpre ((exists i in set (inds mBrakeSeq) \u0026 (mBrakeSeq(i).IsEqual)(brake)) and BrakeSeqInv([mBrakeSeq(i) | i in set (inds mBrakeSeq) \u0026 (not (mBrakeSeq(i).IsEqual)(brake))]))\npublic  ApplyBrake() (() \u003d\u003d\u003e ())\n\tApplyBrake()() \u003d\u003d\nmIsBrakeApplied :\u003d true\n\tpre ((len mBrakeSeq) \u003c\u003e 0)\npublic  ReleaseBrake() (() \u003d\u003d\u003e ())\n\tReleaseBrake()() \u003d\u003d\nmIsBrakeApplied :\u003d false\n\tpre ((len mBrakeSeq) \u003c\u003e 0)\npublic  IsBrakeApplied() (() \u003d\u003d\u003e bool)\n\tIsBrakeApplied()() \u003d\u003d\nreturn (mIsBrakeApplied)\n\tpre ((len mBrakeSeq) \u003c\u003e 0)\npublic  GetRPM() (() \u003d\u003d\u003e RPMType)\n\tGetRPM()() \u003d\u003d\nreturn (mRPM)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nif mIsBrakeApplied\nthen\nfor all i in set (inds mBrakeSeq) do\nmRPM :\u003d (mBrakeSeq(i).ApplyBrake)(mRPM)else\nmRPM :\u003d ((WindMeasurementController`GetInstance().GetWindSpeed)() * 10)\n)\n\tpre ((len mBrakeSeq) \u003c\u003e 0)\n\tpost (mRPM \u003c\u003d MAX_RPM)\nend MainShaftController\n","class Mode\nprotected static  mHubController:[HubController] :\u003d nil\nprotected static  mEnterHubInSafeMode:bool :\u003d false\npublic static  SetHubController(HubController) (HubController \u003d\u003d\u003e ())\n\tSetHubController(HubController)(hubController) \u003d\u003d\nmHubController :\u003d hubController\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nOnRun()\npublic  EnterHubInSafeMode() (() \u003d\u003d\u003e ())\n\tEnterHubInSafeMode()() \u003d\u003d\nmEnterHubInSafeMode :\u003d true\npublic  LeaveHubInSafeMode() (() \u003d\u003d\u003e ())\n\tLeaveHubInSafeMode()() \u003d\u003d\nmEnterHubInSafeMode :\u003d false\nprotected  ChangeMode(Mode) (Mode \u003d\u003d\u003e ())\n\tChangeMode(Mode)(newMode) \u003d\u003d\n(\n\nOnExit();\nnewMode.OnEntry();\nmHubController.SetMode(newMode)\n)\n\tpre (Mode`StateChangeInv((mHubController.GetMode)(), newMode) and let mainShaftController:MainShaftController \u003d (mHubController.GetMainShaftController)(), hub:Hub \u003d (mHubController.GetHub)() in Mode`HubInSafeModeInv((mHubController.GetMode)(), (mainShaftController.GetRPM)(), (mainShaftController.IsLocked)(), (hub.IsOpen)()))\nprotected  OnEntry() (() \u003d\u003d\u003e ())\n\tOnEntry()() \u003d\u003d\nskip\nprotected  OnRun() (() \u003d\u003d\u003e ())\n\tOnRun()() \u003d\u003d\nis subclass responsibility\nprotected  OnExit() (() \u003d\u003d\u003e ())\n\tOnExit()() \u003d\u003d\nskip\npublic static  public static StateChangeInv: (Mode * Mode -\u003e bool)\n\tStateChangeInv(oldMode, newMode) \u003d\u003d\n((isofclass(ModeOperational,oldMode) and isofclass(ModeEnterHubInSafeMode,newMode)) or ((isofclass(ModeEnterHubInSafeMode,oldMode) and isofclass(ModeHubInSafeMode,newMode)) or ((isofclass(ModeHubInSafeMode,oldMode) and isofclass(ModeLeaveHubInSafeMode,newMode)) or ((isofclass(ModeLeaveHubInSafeMode,oldMode) and isofclass(ModeOperational,newMode)) or (isofclass(ModeLeaveHubInSafeMode,oldMode) and isofclass(ModeHubInSafeMode,newMode))))))\npublic static  public static HubInSafeModeInv: (Mode * RPMType * bool * bool -\u003e bool)\n\tHubInSafeModeInv(mode, rpm, isLocked, isOpen) \u003d\u003d\n((isofclass(ModeHubInSafeMode,mode) and ((rpm \u003d 0) and (isLocked and isOpen))) or ((not isofclass(ModeHubInSafeMode,mode)) and (not isOpen)))\nend Mode\n","class ModeEnterHubInSafeMode is subclass of [Mode]\npublic static  MAX_WINDSPEED:WindSpeedType \u003d 15\nprotected  OnRun() (() \u003d\u003d\u003e ())\n\tOnRun()() \u003d\u003d\nlet mainShaftController:MainShaftController \u003d (mHubController.GetMainShaftController)() in (\n\nif (not (mainShaftController.IsBrakeApplied)())\nthen\n(\n\nmainShaftController.ApplyBrake();\nmainShaftController.Run()\n);\nif ((not (mainShaftController.IsLocked)()) and ((mainShaftController.GetRPM)() \u003c\u003d MainShaftController`LOCK_LIMIT))\nthen\n(\n\nmainShaftController.CloseLock();\nChangeMode(new ModeHubInSafeMode())\n)\n)\nend ModeEnterHubInSafeMode\n","class ModeHubInSafeMode is subclass of [Mode]\nprotected  OnEntry() (() \u003d\u003d\u003e ())\n\tOnEntry()() \u003d\u003d\nmHubController.GetHub().Open()\nprotected  OnRun() (() \u003d\u003d\u003e ())\n\tOnRun()() \u003d\u003d\nif (not mEnterHubInSafeMode)\nthen\nChangeMode(new ModeLeaveHubInSafeMode())\nprotected  OnExit() (() \u003d\u003d\u003e ())\n\tOnExit()() \u003d\u003d\nmHubController.GetHub().Close()\nend ModeHubInSafeMode\n","class ModeLeaveHubInSafeMode is subclass of [Mode]\nprotected  OnRun() (() \u003d\u003d\u003e ())\n\tOnRun()() \u003d\u003d\nlet hub:Hub \u003d (mHubController.GetHub)() in if (hub.IsEStopPressed)()\nthen\n(\n\nIO`print(\"EStop\n\");\nEnterHubInSafeMode();\nChangeMode(new ModeHubInSafeMode())\n)else\nif (not (hub.IsAlarmActive)())\nthen\nChangeMode(new ModeOperational())\nend ModeLeaveHubInSafeMode\n","class ModeOperational is subclass of [Mode]\nprotected  OnEntry() (() \u003d\u003d\u003e ())\n\tOnEntry()() \u003d\u003d\nlet mainShaftController:MainShaftController \u003d (mHubController.GetMainShaftController)() in (\n\nmainShaftController.OpenLock();\nmainShaftController.ReleaseBrake();\nmainShaftController.Run()\n)\nprotected  OnRun() (() \u003d\u003d\u003e ())\n\tOnRun()() \u003d\u003d\nif (mEnterHubInSafeMode and ((WindMeasurementController`GetInstance().GetWindSpeed)() \u003c\u003d ModeEnterHubInSafeMode`MAX_WINDSPEED))\nthen\nChangeMode(new ModeEnterHubInSafeMode())\nend ModeOperational\n","class OperatingPanel\npublic static  CmdType \u003d CmdType\nprivate  mCmdSeq:seq of (CmdType) :\u003d (undefined)\nprivate  mHubController:HubController :\u003d (undefined)\nprivate  mTime:nat :\u003d 0\npublic  OperatingPanel(seq of (CmdType), HubController) (seq of (CmdType) * HubController \u003d\u003d\u003e OperatingPanel)\n\tOperatingPanel(seq of (CmdType), HubController)(cmdSeq, hubController) \u003d\u003d\n(\n\nmCmdSeq :\u003d cmdSeq;\nmHubController :\u003d hubController\n)\nprivate  EnterHubInSafeMode() (() \u003d\u003d\u003e ())\n\tEnterHubInSafeMode()() \u003d\u003d\nmHubController.GetMode().EnterHubInSafeMode()\nprivate  LeaveHubInSafeMode() (() \u003d\u003d\u003e ())\n\tLeaveHubInSafeMode()() \u003d\u003d\nmHubController.GetMode().LeaveHubInSafeMode()\nprivate  Print(nat1, seq of (char)) (nat1 * seq of (char) \u003d\u003d\u003e ())\n\tPrint(nat1, seq of (char))(time, string) \u003d\u003d\n(\n\nIO`print(\"T\");\nIO`print(time);\nIO`print(((\" \" ^ string) ^ \"\n\"))\n)\npublic  RunCmdInterface() (() \u003d\u003d\u003e ())\n\tRunCmdInterface()() \u003d\u003d\n(\n\nif ((len mCmdSeq) \u003e\u003d 1)\nthen\nlet cmd:CmdType \u003d (hd mCmdSeq) in (\n\nmCmdSeq :\u003d (tl mCmdSeq);\nmTime :\u003d ((len mCmdSeq) + 1);\nif (cmd \u003d \u003cE\u003e)\nthen\n(\n\nPrint(mTime, \"Command \u003cE\u003e\");\nEnterHubInSafeMode()\n)else\nif (cmd \u003d \u003cL\u003e)\nthen\n(\n\nPrint(mTime, \"Command \u003cL\u003e\");\nLeaveHubInSafeMode()\n)\n)\n)\npublic  RunDisplayInterface() (() \u003d\u003d\u003e ())\n\tRunDisplayInterface()() \u003d\u003d\n(\n\nif isofclass(ModeEnterHubInSafeMode,(mHubController.GetMode)())\nthen\nPrint(mTime, \"Entering Hub In Safe Mode\")else\nif isofclass(ModeHubInSafeMode,(mHubController.GetMode)())\nthen\nPrint(mTime, \"Hub In Safe Mode\")else\nif isofclass(ModeLeaveHubInSafeMode,(mHubController.GetMode)())\nthen\nPrint(mTime, \"Leaving Hub In Safe Mode\")else\nPrint(mTime, \"Operational\")\n)\nend OperatingPanel\n","class Speaker\nprivate  mAlarm:nat :\u003d 0\npublic  StartAlarm() (() \u003d\u003d\u003e ())\n\tStartAlarm()() \u003d\u003d\nmAlarm :\u003d 3\npublic  StopAlarm() (() \u003d\u003d\u003e ())\n\tStopAlarm()() \u003d\u003d\nmAlarm :\u003d 0\npublic  IsActive() (() \u003d\u003d\u003e bool)\n\tIsActive()() \u003d\u003d\nreturn ((mAlarm \u003c\u003e 0))\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nif (mAlarm \u003e 0)\nthen\nmAlarm :\u003d (mAlarm - 1)\nend Speaker\n","class WindMeasurementController\npublic static  WindSpeedType \u003d WindSpeedType\n\tinv w \u003d\u003d (w \u003c\u003d 50)\npublic static  MAX_WIND:WindSpeedType \u003d 50\nprivate  mWindSpeedSeq:seq of (WindSpeedType) :\u003d (undefined)\nprivate static  mInstance:[WindMeasurementController] :\u003d nil\nprivate  WindMeasurementController(seq of (WindSpeedType)) (seq of (WindSpeedType) \u003d\u003d\u003e WindMeasurementController)\n\tWindMeasurementController(seq of (WindSpeedType))(windSpeedSeq) \u003d\u003d\nmWindSpeedSeq :\u003d windSpeedSeq\npublic static  CreateInstance(seq of (WindSpeedType)) (seq of (WindSpeedType) \u003d\u003d\u003e ())\n\tCreateInstance(seq of (WindSpeedType))(windSpeedSeq) \u003d\u003d\nif (mInstance \u003d nil)\nthen\nmInstance :\u003d new WindMeasurementController(windSpeedSeq)\npublic static  GetInstance() (() \u003d\u003d\u003e WindMeasurementController)\n\tGetInstance()() \u003d\u003d\nreturn (mInstance)\n\tpre (mInstance \u003c\u003e nil)\npublic  GetWindSpeed() (() \u003d\u003d\u003e WindSpeedType)\n\tGetWindSpeed()() \u003d\u003d\nreturn ((hd mWindSpeedSeq))\n\tpre (mWindSpeedSeq \u003c\u003e [])\npublic  IsFinished() (() \u003d\u003d\u003e bool)\n\tIsFinished()() \u003d\u003d\nreturn ((mWindSpeedSeq \u003d []))\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nif (mWindSpeedSeq \u003c\u003e [])\nthen\nmWindSpeedSeq :\u003d (tl mWindSpeedSeq)\nend WindMeasurementController\n","class WindTurbine\nprivate  mHubController:HubController :\u003d (undefined)\nprivate  mMainShaftController:MainShaftController :\u003d (undefined)\nprivate  mOperatingPanel:OperatingPanel :\u003d (undefined)\npublic  WindTurbine(seq of (TestData)) (seq of (TestData) \u003d\u003d\u003e WindTurbine)\n\tWindTurbine(seq of (TestData))(testData) \u003d\u003d\n(\n\nWindMeasurementController`CreateInstance([(testData(i).Wind) | i in set (inds testData)]);\nmMainShaftController :\u003d new MainShaftController();\nmHubController :\u003d new HubController([(testData(i).EStop) | i in set (inds testData)], mMainShaftController);\nmOperatingPanel :\u003d new OperatingPanel([(testData(i).Cmds) | i in set (inds testData)], mHubController)\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nwhile (not (WindMeasurementController`GetInstance().IsFinished)()) do (\n\nmOperatingPanel.RunCmdInterface();\nmMainShaftController.Run();\nmHubController.Run();\nmOperatingPanel.RunDisplayInterface();\nWindMeasurementController`GetInstance().Run()\n)\nend WindTurbine\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]