["class Account\nprivate  cards:map (CardId) to (Cardholder) :\u003d (undefined)\nprivate  balance:nat :\u003d (undefined)\nprivate  transactions:seq of (Transaction) :\u003d []\nprivate  invTransactionsInvariant(transactions)\nprivate static  dailyLimit:nat \u003d 2000\npublic static  AccountId \u003d AccountId\npublic static  Transaction \u003d Transaction\nprivate  ValidTransaction(Transaction) (Transaction \u003d\u003d\u003e bool)\n\tValidTransaction(Transaction)(transaction) \u003d\u003d\nis not yet specified\npublic  Create(map (CardId) to (Cardholder), nat) (map (CardId) to (Cardholder) * nat \u003d\u003d\u003e Account)\n\tCreate(map (CardId) to (Cardholder), nat)(cs, b) \u003d\u003d\n(\n\ncards :\u003d cs;\nbalance :\u003d b;\nreturn (self)\n)\npublic  GetBalance() (() \u003d\u003d\u003e nat)\n\tGetBalance()() \u003d\u003d\nreturn (balance)\npublic  Withdrawal(CardId, nat, Date) (CardId * nat * Date \u003d\u003d\u003e bool)\n\tWithdrawal(CardId, nat, Date)(cardId, amount, date) \u003d\u003d\nlet transaction:Transaction \u003d mk_Transaction(date, cardId, amount) in if (((balance - amount) \u003e\u003d 0) and (DateTotal(date, (transactions ^ [transaction])) \u003c\u003d dailyLimit))\nthen\n(\n\nbalance :\u003d (balance - amount);\ntransactions :\u003d (transactions ^ [transaction]);\nreturn (true)\n)else\nreturn (false)\n\tpre (cardId in set (dom cards))\npublic  MakeStatement(CardId, Date) (CardId * Date \u003d\u003d\u003e Letter)\n\tMakeStatement(CardId, Date)(cardId, date) \u003d\u003d\nlet nm:Name \u003d (cards(cardId).GetName)(), addr:Address \u003d (cards(cardId).GetAddress)() in (\nletter:Letter :\u003d new Letter()\n\nletter.Create(nm, addr, date, transactions, balance)\n)\n\tpre (cardId in set (dom cards))\npublic  GetCardIds() (() \u003d\u003d\u003e set of (CardId))\n\tGetCardIds()() \u003d\u003d\nreturn ((dom cards))\npublic  AddCard(CardId, Cardholder) (CardId * Cardholder \u003d\u003d\u003e ())\n\tAddCard(CardId, Cardholder)(cId, ch) \u003d\u003d\ncards :\u003d (cards munion {cId |-\u003e ch})\n\tpre (cId not in set (dom cards))\npublic  RemoveCard(CardId) (CardId \u003d\u003d\u003e ())\n\tRemoveCard(CardId)(cId) \u003d\u003d\ncards :\u003d ({cId} \u003c-: cards)\n\tpre (cId in set (dom cards))\nprivate  private TransactionsInvariant: (seq of (Transaction) +\u003e bool)\n\tTransactionsInvariant(ts) \u003d\u003d\n(forall date in set {(ts(i).date) | i in set (inds ts)} \u0026 (DateTotal(date, ts) \u003c\u003d dailyLimit))\nprivate  private DateTotal: (Date * seq of (Transaction) +\u003e nat)\n\tDateTotal(date, ts) \u003d\u003d\nSum([(ts(i).amount) | i in set (inds ts) \u0026 ((ts(i).date) \u003d date)])\nprivate  private Sum: (seq of (real) +\u003e real)\n\tSum(rs) \u003d\u003d\n(if (rs \u003d [])\nthen 0\nelse ((hd rs) + Sum((tl rs))))\nend Account\n","class Card\npublic static  CardId \u003d CardId\npublic static  Code \u003d Code\npublic static  PinCode \u003d PinCode\nprivate  code:Code :\u003d (undefined)\nprivate  cardId:CardId :\u003d (undefined)\nprivate  accountId:AccountId :\u003d (undefined)\npublic  Card(Code, CardId, AccountId) (Code * CardId * AccountId \u003d\u003d\u003e Card)\n\tCard(Code, CardId, AccountId)(c, cid, a) \u003d\u003d\n(\n\ncode :\u003d c;\ncardId :\u003d cid;\naccountId :\u003d a\n)\npublic  GetCode() (() \u003d\u003d\u003e Code)\n\tGetCode()() \u003d\u003d\nreturn (code)\npublic  GetAccountId() (() \u003d\u003d\u003e AccountId)\n\tGetAccountId()() \u003d\u003d\nreturn (accountId)\npublic  GetCardId() (() \u003d\u003d\u003e CardId)\n\tGetCardId()() \u003d\u003d\nreturn (cardId)\nend Card\n","class Cardholder\npublic static  Address \u003d Address\npublic static  Name \u003d Name\nprivate  name:Name :\u003d (undefined)\nprivate  address:Address :\u003d (undefined)\npublic  Create(Name, Address) (Name * Address \u003d\u003d\u003e Cardholder)\n\tCreate(Name, Address)(nm, addr) \u003d\u003d\n(\n\nname :\u003d nm;\naddress :\u003d addr;\nreturn (self)\n)\npublic  GetName() (() \u003d\u003d\u003e Name)\n\tGetName()() \u003d\u003d\nreturn (name)\npublic  GetAddress() (() \u003d\u003d\u003e Address)\n\tGetAddress()() \u003d\u003d\nreturn (address)\nend Cardholder\n","class CentralResource\nprivate  accounts:map (AccountId) to (Account) :\u003d {|-\u003e}\nprivate  numberOfTries:map (CardId) to (nat) :\u003d {|-\u003e}\nprivate  illegalCards:set of (CardId) :\u003d {}\nprivate  inv(((dom numberOfTries) union illegalCards) subset (dunion {(acc.GetCardIds)() | acc in set (rng accounts)}))\nprivate  letterbox:Letterbox :\u003d (undefined)\nprivate  clock:Clock :\u003d (undefined)\nprivate  inv(forall acc1, acc2 in set (rng accounts) \u0026 ((acc1 \u003c\u003e acc2) \u003d\u003e (((acc1.GetCardIds)() inter (acc2.GetCardIds)()) \u003d {})))\nprivate static  maxNumberOfTries:nat \u003d 3\npublic  AddLetterbox(Clock, Letterbox) (Clock * Letterbox \u003d\u003d\u003e ())\n\tAddLetterbox(Clock, Letterbox)(c, l) \u003d\u003d\n(\n\nclock :\u003d c;\nletterbox :\u003d l\n)\npublic  GetBalance(AccountId) (AccountId \u003d\u003d\u003e [nat])\n\tGetBalance(AccountId)(accountId) \u003d\u003d\nif (accountId in set (dom accounts))\nthen\naccounts(accountId).GetBalance()else\nreturn (nil)\npublic  Withdrawal(AccountId, CardId, nat) (AccountId * CardId * nat \u003d\u003d\u003e bool)\n\tWithdrawal(AccountId, CardId, nat)(accountId, cardId, amount) \u003d\u003d\nif IsLegalCard(accountId, cardId)\nthen\naccounts(accountId).Withdrawal(cardId, amount, (clock.GetDate)())else\nreturn (false)\npublic  PostStatement(AccountId, CardId) (AccountId * CardId \u003d\u003d\u003e bool)\n\tPostStatement(AccountId, CardId)(accountId, cardId) \u003d\u003d\nif IsLegalCard(accountId, cardId)\nthen\n(\n\nletterbox.PostStatement((accounts(accountId).MakeStatement)(cardId, (clock.GetDate)()));\nreturn (true)\n)else\nreturn (false)\npublic  IsLegalCard(AccountId, CardId) (AccountId * CardId \u003d\u003d\u003e bool)\n\tIsLegalCard(AccountId, CardId)(accountId, cardId) \u003d\u003d\nreturn (((cardId not in set illegalCards) and ((accountId in set (dom accounts)) and (cardId in set (accounts(accountId).GetCardIds)()))))\npublic  NumberOfTriesExceeded(CardId) (CardId \u003d\u003d\u003e bool)\n\tNumberOfTriesExceeded(CardId)(cardId) \u003d\u003d\nreturn ((numberOfTries(cardId) \u003e\u003d maxNumberOfTries))\npublic  ResetNumberOfTries(CardId) (CardId \u003d\u003d\u003e ())\n\tResetNumberOfTries(CardId)(cardId) \u003d\u003d\nnumberOfTries(cardId) :\u003d 0\npublic  IncrNumberOfTries(CardId) (CardId \u003d\u003d\u003e ())\n\tIncrNumberOfTries(CardId)(cardId) \u003d\u003d\nnumberOfTries(cardId) :\u003d (numberOfTries(cardId) + 1)\npublic  AddAccount(AccountId, Account) (AccountId * Account \u003d\u003d\u003e ())\n\tAddAccount(AccountId, Account)(accId, acc) \u003d\u003d\natomic (accounts :\u003d (accounts ++ {accId |-\u003e acc}), numberOfTries :\u003d (numberOfTries ++ {cId |-\u003e 0 | cId in set (acc.GetCardIds)()}))\n\tpre (accId not in set (dom accounts))\npublic  AddIllegalCard(CardId) (CardId \u003d\u003d\u003e ())\n\tAddIllegalCard(CardId)(cId) \u003d\u003d\nillegalCards :\u003d (illegalCards union {cId})\nend CentralResource\n","class Clock\npublic static  Date \u003d Date\nprivate  date:Date :\u003d \"\"\npublic  SetDate(Date) (Date \u003d\u003d\u003e ())\n\tSetDate(Date)(d) \u003d\u003d\ndate :\u003d d\npublic  GetDate() (() \u003d\u003d\u003e Date)\n\tGetDate()() \u003d\u003d\nreturn (date)\nend Clock\n","class Letter\npublic  name:Name :\u003d (undefined)\npublic  address:Address :\u003d (undefined)\npublic  date:Date :\u003d (undefined)\npublic  transactions:seq of (Transaction) :\u003d (undefined)\npublic  balance:nat :\u003d (undefined)\npublic  Create(Name, Address, Date, seq of (Transaction), nat) (Name * Address * Date * seq of (Transaction) * nat \u003d\u003d\u003e Letter)\n\tCreate(Name, Address, Date, seq of (Transaction), nat)(nm, addr, d, ts, b) \u003d\u003d\n(\n\nname :\u003d nm;\naddress :\u003d addr;\ndate :\u003d d;\ntransactions :\u003d ts;\nbalance :\u003d b;\nreturn (self)\n)\nend Letter\n","class Letterbox\nprivate  statements:seq of (Letter) :\u003d []\npublic  PostStatement(Letter) (Letter \u003d\u003d\u003e ())\n\tPostStatement(Letter)(letter) \u003d\u003d\nstatements :\u003d (statements ^ [letter])\npublic  GetLastStatement() (() \u003d\u003d\u003e Letter)\n\tGetLastStatement()() \u003d\u003d\nreturn (statements((len statements)))\n\tpre (statements \u003c\u003e [])\nend Letterbox\n","class SimpleTest\nprivate static  c1:Card \u003d new Card(123456, 1, 1)\nprivate static  cards:set of (Card) \u003d {c1}\nprivate static  resource:CentralResource \u003d new CentralResource()\nprivate static  tills:map (TillId) to (Till) \u003d {1 |-\u003e new Till(resource)}\nprivate  clock:Clock :\u003d new Clock()\nprivate  letterbox:Letterbox :\u003d new Letterbox()\npublic static  TillId \u003d TillId\npublic  Run() (() \u003d\u003d\u003e bool)\n\tRun()() \u003d\u003d\n(\n\nclock.SetDate(\"150999\");\nlet peter:Cardholder \u003d (new Cardholder().Create)(\"Peter Gorm Larsen\", \"Granvej 24\") in let pglacc1:Account \u003d (new Account().Create)({1 |-\u003e peter}, 5000), pglid1:nat1 \u003d 1 in (\n\nresource.AddAccount(pglid1, pglacc1);\nresource.AddLetterbox(clock, new Letterbox());\ntills(1).InsertCard(c1);\nif ((tills(1).Validate)(123456) \u003d \u003cPinOk\u003e)\nthen\nreturn ((tills(1).MakeWithdrawal)(800))else\nreturn (false)\n)\n)\nend SimpleTest\n","class Till\nprivate  curCard:[Card] :\u003d nil\nprivate  cardOk:bool :\u003d false\nprivate  retainedCards:set of (Card) :\u003d {}\nprivate  resource:CentralResource :\u003d (undefined)\nprivate  inv((curCard \u003d nil) \u003d\u003e (not cardOk))\npublic  Till(CentralResource) (CentralResource \u003d\u003d\u003e Till)\n\tTill(CentralResource)(res) \u003d\u003d\nresource :\u003d res\npublic  InsertCard(Card) (Card \u003d\u003d\u003e ())\n\tInsertCard(Card)(c) \u003d\u003d\ncurCard :\u003d c\n\tpre (not CardInside())\npublic  Validate(PinCode) (PinCode \u003d\u003d\u003e (\u003cPinNotOk\u003e | \u003cPinOk\u003e | \u003cRetained\u003e))\n\tValidate(PinCode)(pin) \u003d\u003d\nlet cardId:CardId \u003d (curCard.GetCardId)(), codeOk:bool \u003d ((curCard.GetCode)() \u003d Encode(pin)), cardLegal:bool \u003d IsLegalCard() in (\n\ncardOk :\u003d (codeOk and cardLegal);\nif (not cardLegal)\nthen\n(\n\nretainedCards :\u003d (retainedCards union {curCard});\ncurCard :\u003d nil;\nreturn (\u003cRetained\u003e)\n)elseif codeOk\nthen\nresource.ResetNumberOfTries(cardId)else\n(\n\nresource.IncrNumberOfTries(cardId);\nif (resource.NumberOfTriesExceeded)(cardId)\nthen\n(\n\nretainedCards :\u003d (retainedCards union {curCard});\ncardOk :\u003d false;\ncurCard :\u003d nil;\nreturn (\u003cRetained\u003e)\n)\n);\nreturn ((if cardOk\nthen \u003cPinOk\u003e\nelse \u003cPinNotOk\u003e))\n)\n\tpre (CardInside() and (not cardOk))\npublic  ReturnCard() (() \u003d\u003d\u003e ())\n\tReturnCard()() \u003d\u003d\n(\n\ncardOk :\u003d false;\ncurCard :\u003d nil\n)\n\tpre CardInside()\npublic  GetBalance() (() \u003d\u003d\u003e [nat])\n\tGetBalance()() \u003d\u003d\nresource.GetBalance((curCard.GetAccountId)())\n\tpre CardValidated()\npublic  MakeWithdrawal(nat) (nat \u003d\u003d\u003e bool)\n\tMakeWithdrawal(nat)(amount) \u003d\u003d\nresource.Withdrawal((curCard.GetAccountId)(), (curCard.GetCardId)(), amount)\n\tpre CardValidated()\npublic  RequestStatement() (() \u003d\u003d\u003e bool)\n\tRequestStatement()() \u003d\u003d\nresource.PostStatement((curCard.GetAccountId)(), (curCard.GetCardId)())\n\tpre CardValidated()\npublic  IsLegalCard() (() \u003d\u003d\u003e bool)\n\tIsLegalCard()() \u003d\u003d\nreturn ((resource.IsLegalCard)((curCard.GetAccountId)(), (curCard.GetCardId)()))\n\tpre CardInside()\npublic  CardValidated() (() \u003d\u003d\u003e bool)\n\tCardValidated()() \u003d\u003d\nreturn (((curCard \u003c\u003e nil) and cardOk))\npublic  CardInside() (() \u003d\u003d\u003e bool)\n\tCardInside()() \u003d\u003d\nreturn ((curCard \u003c\u003e nil))\nprivate  private Encode: (PinCode +\u003e Code)\n\tEncode(pin) \u003d\u003d\npin\nend Till\n","class Event\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(system) \u003d\u003d\nis subclass responsibility\nend Event\n","class GetBalance is subclass of [Event]\nprivate  tillid:TillId :\u003d (undefined)\npublic  Init(TillId) (TillId \u003d\u003d\u003e GetBalance)\n\tInit(TillId)(tid) \u003d\u003d\n(\n\ntillid :\u003d tid;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\nlet till:Till \u003d (sys.GetTill)(tillid) in if (till.CardValidated)()\nthen\ntill.GetBalance()else\nreturn (false)\nend GetBalance\n","class IllegalCard is subclass of [Event]\nprivate  mycard:CardId :\u003d (undefined)\npublic  Init(CardId) (CardId \u003d\u003d\u003e IllegalCard)\n\tInit(CardId)(c) \u003d\u003d\n(\n\nmycard :\u003d c;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\n(\n\nsys.GetResource().AddIllegalCard(mycard);\nreturn (true)\n)\nend IllegalCard\n","class InsertCard is subclass of [Event]\nprivate  tillid:TillId :\u003d (undefined)\nprivate  mycard:Card :\u003d (undefined)\npublic  Init(TillId, Card) (TillId * Card \u003d\u003d\u003e InsertCard)\n\tInit(TillId, Card)(tid, c) \u003d\u003d\n(\n\ntillid :\u003d tid;\nmycard :\u003d c;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\n(\n\nsys.GetTill(tillid).InsertCard(mycard);\nreturn (true)\n)\nend InsertCard\n","class ReturnCard is subclass of [Event]\nprivate  tillid:TillId :\u003d (undefined)\npublic  Init(TillId) (TillId \u003d\u003d\u003e ReturnCard)\n\tInit(TillId)(tid) \u003d\u003d\n(\n\ntillid :\u003d tid;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\n(\n\nlet till:Till \u003d (sys.GetTill)(tillid) in if (till.CardInside)()\nthen\ntill.ReturnCard()else\nreturn (false);\nreturn (true)\n)\nend ReturnCard\n","class SendStatement is subclass of [Event]\nprivate  tillid:TillId :\u003d (undefined)\npublic  Init(TillId) (TillId \u003d\u003d\u003e SendStatement)\n\tInit(TillId)(tid) \u003d\u003d\n(\n\ntillid :\u003d tid;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\nlet till:Till \u003d (sys.GetTill)(tillid) in if (till.CardValidated)()\nthen\ntill.RequestStatement()else\nreturn (false)\nend SendStatement\n","class System\nprivate static  c1:Card \u003d new Card(123456, 1, 1)\nprivate static  c2:Card \u003d new Card(123457, 2, 2)\nprivate static  c3:Card \u003d new Card(123458, 3, 3)\nprivate static  c4:Card \u003d new Card(123459, 4, 4)\nprivate static  c5:Card \u003d new Card(123460, 5, 5)\nprivate static  c6:Card \u003d new Card(123461, 6, 5)\nprivate static  c7:Card \u003d new Card(123462, 7, 5)\nprivate static  cards:set of (Card) \u003d {c1, c2, c3, c4, c5, c6, c7}\nprivate static  resource:CentralResource \u003d new CentralResource()\nprivate static  tills:map (TillId) to (Till) \u003d {1 |-\u003e new Till(resource), 2 |-\u003e new Till(resource), 3 |-\u003e new Till(resource)}\nprivate  clock:Clock :\u003d new Clock()\nprivate  letterbox:Letterbox :\u003d new Letterbox()\npublic static  TillId \u003d TillId\npublic  GetTill(TillId) (TillId \u003d\u003d\u003e Till)\n\tGetTill(TillId)(tid) \u003d\u003d\nreturn (tills(tid))\npublic  GetResource() (() \u003d\u003d\u003e CentralResource)\n\tGetResource()() \u003d\u003d\nreturn (resource)\npublic  System() (() \u003d\u003d\u003e System)\n\tSystem()() \u003d\u003d\n(\n\nclock.SetDate(\"150999\");\nlet peter:Cardholder \u003d (new Cardholder().Create)(\"Peter Gorm Larsen\", \"Granvej 24\"), paul:Cardholder \u003d (new Cardholder().Create)(\"Paul Mukherjee\", \"Rugaardsvej 47\"), sten:Cardholder \u003d (new Cardholder().Create)(\"Sten Agerholm\", \"Teisensvej ??\"), kim:Cardholder \u003d (new Cardholder().Create)(\"Kim Sunesen\", \"??\"), CSK:Cardholder \u003d (new Cardholder().Create)(\"CSK\", \"Forskerparken 10A\") in let pglacc1:Account \u003d (new Account().Create)({1 |-\u003e peter}, 5000), saacc1:Account \u003d (new Account().Create)({2 |-\u003e sten}, 0), ksacc1:Account \u003d (new Account().Create)({3 |-\u003e kim}, 9000), pmacc1:Account \u003d (new Account().Create)({4 |-\u003e paul}, 6000), ifacc1:Account \u003d (new Account().Create)({5 |-\u003e peter, 6 |-\u003e sten, 7 |-\u003e CSK}, 70000), pglid1:nat1 \u003d 1, said1:nat1 \u003d 2, ksid1:nat1 \u003d 3, pmid1:nat1 \u003d 4, ifid1:nat1 \u003d 5 in (\n\nresource.AddAccount(pglid1, pglacc1);\nresource.AddAccount(said1, saacc1);\nresource.AddAccount(ksid1, ksacc1);\nresource.AddAccount(pmid1, pmacc1);\nresource.AddAccount(ifid1, ifacc1);\nresource.AddLetterbox(clock, new Letterbox())\n)\n)\npublic  [T1][[c in set cardsALetBeStBindingTraceDefinitiont in set (rng tills)ALetBeStBindingTraceDefinitionp in set {123456, 123457, 123458, 123459, 123460, 123461, 123462}ALetBeStBindingTraceDefinition([[t.InsertCard(c){1,1}], [t.Validate(p){1,1}], [t.MakeWithdrawal(1000){1,1}]]){1,1}def p in set {123456, 123457, 123458, 123459, 123460, 123461, 123462}def t in set (rng tills)def c in set cards]]\npublic  [T2][[c in set cardsALetBeStBindingTraceDefinitiont1, t2 in set (rng tills)ALetBeStBindingTraceDefinitionp in set {123456, 123457, 123458, 123459, 123460, 123461, 123462}ALetBeStBindingTraceDefinition([[([[t1.InsertCard(c){1,1}], [t2.InsertCard(c){1,1}], [t1.Validate(p){1,1}], [t1.MakeWithdrawal(1000){1,1}], [t2.MakeWithdrawal(1000){1,1}]]){1,1}, ([[t1.Validate(p){1,1}], [t1.MakeWithdrawal(3000){1,1}]]){1,1}]]){1,1}def p in set {123456, 123457, 123458, 123459, 123460, 123461, 123462}def t1, t2 in set (rng tills)def c in set cards]]\nend System\n","class Test\npublic static  TestResult \u003d TestResult\nprivate  system:System :\u003d new System()\npublic  runTests(seq of (Event)) (seq of (Event) \u003d\u003d\u003e seq of (TestResult))\n\trunTests(seq of (Event))(events) \u003d\u003d\n(\n\nreturn ([(events(i).execute)(system) | i in set (inds events)])\n)\npublic  runOneTest(Event) (Event \u003d\u003d\u003e TestResult)\n\trunOneTest(Event)(event) \u003d\u003d\nreturn ((event.execute)(system))\nend Test\n","class Validate is subclass of [Event]\nprivate  tillid:TillId :\u003d (undefined)\nprivate  code:PinCode :\u003d (undefined)\npublic  Init(TillId, PinCode) (TillId * PinCode \u003d\u003d\u003e Validate)\n\tInit(TillId, PinCode)(tid, pin) \u003d\u003d\n(\n\ntillid :\u003d tid;\ncode :\u003d pin;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\nsys.GetTill(tillid).Validate(code)\nend Validate\n","class Withdrawal is subclass of [Event]\nprivate  tillid:TillId :\u003d (undefined)\nprivate  amount:nat :\u003d (undefined)\npublic  Init(TillId, nat) (TillId * nat \u003d\u003d\u003e Withdrawal)\n\tInit(TillId, nat)(t, a) \u003d\u003d\n(\n\ntillid :\u003d t;\namount :\u003d a;\nreturn (self)\n)\npublic  execute(System) (System \u003d\u003d\u003e TestResult)\n\texecute(System)(sys) \u003d\u003d\nlet till:Till \u003d (sys.GetTill)(tillid) in if (till.CardValidated)()\nthen\ntill.MakeWithdrawal(amount)else\nreturn (false)\nend Withdrawal\n"]