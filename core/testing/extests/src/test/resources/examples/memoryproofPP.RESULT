["class Diet\npublic static  e:real \u003d 1.0E-10\npublic static  h:real \u003d 1.0E-5\npublic static  public static BMI: (real * real -\u003e real)\n\tBMI(weight, height) \u003d\u003d\nlet h100:real \u003d (height / 100) in (weight / (h100 ** 2))\n\tpre ((weight \u003e 0) and (height \u003e 0))\n\tpost (RESULT \u003e 0)\npublic static  public static getWeightFromBMI: (real * real -\u003e real)\n\tgetWeightFromBMI(height, aBMI) \u003d\u003d\nlet f:(real -\u003e real) \u003d (lambda [weight:real] \u0026 (aBMI - BMI(weight, height))) in newton(f)(60)\n\tpre ((height \u003e 0) and (aBMI \u003e 0))\n\tpost ((abs (aBMI - BMI(RESULT, height))) \u003c\u003d e)\npublic static  public static newton: ((real -\u003e real) -\u003e (real -\u003e real))\n\tnewton(f)(x) \u003d\u003d\nlet isFinish:(real -\u003e bool) \u003d (lambda [y:real] \u0026 ((abs f(y)) \u003c e)), nextApproximate:(real -\u003e real) \u003d (lambda [y:real] \u0026 (y - (f(y) / derivative(f)(y)))) in (Funtil)[real](isFinish)(nextApproximate)(x)\npublic static  public static derivative: ((real -\u003e real) -\u003e (real -\u003e real))\n\tderivative(f)(x) \u003d\u003d\n((f((x + h)) - f(x)) / h)\npublic static  public static Funtil[(T)]: ((@T -\u003e bool) -\u003e ((@T -\u003e @T) -\u003e (@T -\u003e @T)))\n\tFuntil(p)(f)(x) \u003d\u003d\n(if p(x)\nthen x\nelse (Funtil)[@T](p)(f)(f(x)))\nend Diet\n"]