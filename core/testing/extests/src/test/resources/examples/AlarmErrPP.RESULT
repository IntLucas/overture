["class Alarm\npublic static  String \u003d String\nprivate  descr:String :\u003d (undefined)\nprivate  reqQuali:Qualification :\u003d (undefined)\npublic  Alarm(Qualification, String) (Qualification * String \u003d\u003d\u003e Alarm)\n\tAlarm(Qualification, String)(quali, str) \u003d\u003d\n(\n\ndescr :\u003d str;\nreqQuali :\u003d quali\n)\npublic  GetReqQuali() (() \u003d\u003d\u003e Qualification)\n\tGetReqQuali()() \u003d\u003d\nreturn (reqQuali)\nend Alarm\n","class Expert\nprivate  quali:set of (Qualification) :\u003d (undefined)\npublic static  Qualification \u003d Qualification\npublic  Expert(set of (Qualification)) (set of (Qualification) \u003d\u003d\u003e Expert)\n\tExpert(set of (Qualification))(qs) \u003d\u003d\nquali :\u003d qs\npublic  GetQuali() (() \u003d\u003d\u003e set of (Qualification))\n\tGetQuali()() \u003d\u003d\nreturn (quali)\nend Expert\n","class Plant\nprivate  alarms:set of (Alarm) :\u003d (undefined)\nprivate  st1:nat :\u003d 1\nprivate  schedule:map (Period) to (set of (Expert)) :\u003d (undefined)\nprivate  invPlantInv(alarms, schedule)\nprivate  PlantInv(set of (Alarm), map (Period) to (set of (Expert))) (set of (Alarm) * map (Period) to (set of (Expert)) \u003d\u003d\u003e bool)\n\tPlantInv(set of (Alarm), map (Period) to (set of (Expert)))(as, sch) \u003d\u003d\nreturn (((forall p in set (dom sch) \u0026 (sch(p) \u003c\u003e {})) and (forall a in set as \u0026 (forall p in set (dom sch) \u0026 (exists expert in set sch(p) \u0026 ((a.GetReqQuali)() in set (expert.GetQuali)()))))))\npublic static  Period \u003d Period\npublic  ExpertToPage(Alarm, Period) (Alarm * Period \u003d\u003d\u003e Expert)\n\tExpertToPage(Alarm, Period)(a, p) \u003d\u003d\nlet expert in set schedule(p) be st ((a.GetReqQuali)() in set (expert.GetQuali)()) in return (expert)\n\tpre ((a in set alarms) and (p in set (dom schedule)))\n\tpost let expert:Expert \u003d RESULT in ((expert in set schedule(p)) and ((a.GetReqQuali)() in set (expert.GetQuali)()))\npublic  NumberOfExperts(Period) (Period \u003d\u003d\u003e nat)\n\tNumberOfExperts(Period)(p) \u003d\u003d\nreturn ((card schedule(p)))\n\tpre (p in set (dom schedule))\npublic  ExpertIsOnDuty(Expert) (Expert \u003d\u003d\u003e set of (Period))\n\tExpertIsOnDuty(Expert)(ex) \u003d\u003d\nreturn ({p | p in set (dom schedule) \u0026 (ex in set schedule(p))})\npublic  Plant(set of (Alarm), map (Period) to (set of (Expert))) (set of (Alarm) * map (Period) to (set of (Expert)) \u003d\u003d\u003e Plant)\n\tPlant(set of (Alarm), map (Period) to (set of (Expert)))(als, sch) \u003d\u003d\n(\n\nalarms :\u003d als;\nschedule :\u003d sch\n)\n\tpre PlantInv(als, sch)\nend Plant\n","class Test1\nprivate  a1:Alarm :\u003d new Alarm(\u003cMech\u003e, \"Mechanical fault\")\nprivate  a2:Alarm :\u003d new Alarm(\u003cChem\u003e, \"Tank overflow\")\nprivate  ex1:Expert :\u003d new Expert({\u003cMech\u003e, \u003cBio\u003e})\nprivate  ex2:Expert :\u003d new Expert({\u003cElec\u003e})\nprivate  ex3:Expert :\u003d new Expert({\u003cChem\u003e, \u003cBio\u003e, \u003cMech\u003e})\nprivate  ex4:Expert :\u003d new Expert({\u003cElec\u003e, \u003cChem\u003e})\nprivate  plant:Plant :\u003d new Plant({a1}, {p1 |-\u003e {ex1, ex4}, p2 |-\u003e {ex2, ex3}})\nprivate static  p1:Period \u003d mk_token(\"Monday day\")\nprivate static  p2:Period \u003d mk_token(\"Monday night\")\nprivate static  p3:Period \u003d mk_token(\"Tuesday day\")\nprivate static  p4:Period \u003d mk_token(\"Tuesday night\")\npublic  Run() (() \u003d\u003d\u003e (set of (Period) * Expert))\n\tRun()() \u003d\u003d\nlet periods:set of (Period) \u003d (plant.ExpertIsOnDuty)(ex1), expert:Expert \u003d (plant.ExpertToPage)(a1, p1) in return (mk_(periods, expert))\nend Test1\n"]