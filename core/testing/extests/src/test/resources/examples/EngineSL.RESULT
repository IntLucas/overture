["Node \u003d Node","BinRel \u003d BinRel","A0:BinRel \u003d {}","A1:BinRel \u003d {mk_(1, 2)}","A2:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(3, 4)}","A3:BinRel \u003d (A1 union {mk_(4, 5), mk_(4, 1), mk_(5, 6), mk_(6, 7), mk_(7, 8), mk_(8, 9), mk_(9, 10), mk_(2, 3)})","A4:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(2, 4), mk_(3, 5), mk_(4, 5), mk_(5, 6)}","A5:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(2, 4), mk_(3, 5), mk_(4, 6), mk_(6, 5), mk_(5, 7)}","A6:BinRel \u003d {mk_(1, 1), mk_(2, 2), mk_(3, 3), mk_(4, 4), mk_(5, 5)}","A7:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(2, 4), mk_(3, 5), mk_(4, 6), mk_(6, 5), mk_(5, 7), mk_(5, 2)}","A8:BinRel \u003d (A7 union {mk_(6, 1)})","private IsReflexive: (BinRel -\u003e bool)\n\tIsReflexive(R) \u003d\u003d\n(forall x in set field(R) \u0026 (mk_(x, x) in set R))","private IsSymmetrical: (BinRel -\u003e bool)\n\tIsSymmetrical(R) \u003d\u003d\n(forall x, y in set field(R) \u0026 ((mk_(x, y) in set R) \u003d\u003e (mk_(y, x) in set R)))","private IsTransitive: (BinRel -\u003e bool)\n\tIsTransitive(R) \u003d\u003d\n(forall x, y, z in set field(R) \u0026 (((mk_(x, y) in set R) and (mk_(y, z) in set R)) \u003d\u003e (mk_(x, z) in set R)))","private IsEquivalence: (BinRel -\u003e bool)\n\tIsEquivalence(R) \u003d\u003d\n(IsReflexive(R) and (IsSymmetrical(R) and IsTransitive(R)))","private domain: (BinRel -\u003e set of (nat1))\n\tdomain(R) \u003d\u003d\n{x | mk_(x, -) in set R}","private domain1: (BinRel -\u003e set of (nat1))\n\tdomain1(R) \u003d\u003d\n{x | x:nat1 \u0026 (exists y:nat1 \u0026 (mk_(x, y) in set R))}","private range: (BinRel -\u003e set of (nat1))\n\trange(R) \u003d\u003d\n{y | mk_(-, y) in set R}","private field: (BinRel -\u003e set of (nat1))\n\tfield(R) \u003d\u003d\n(domain(R) union range(R))","private inverse_rel: (BinRel -\u003e BinRel)\n\tinverse_rel(R) \u003d\u003d\n{mk_(y, x) | mk_(x, y) in set R}","private id_rel: (BinRel -\u003e BinRel)\n\tid_rel(R) \u003d\u003d\n{mk_(x, x) | x in set field(R)}","private Composition: (BinRel * BinRel -\u003e BinRel)\n\tComposition(R, Q) \u003d\u003d\n{mk_(a, c) | mk_(a, b1) in set R, mk_(b2, c) in set Q \u0026 (b1 \u003d b2)}","private power_of: (BinRel * nat1 -\u003e BinRel)\n\tpower_of(R, x) \u003d\u003d\n(if (x \u003d 1)\nthen R\nelse Composition(R, power_of(R, (x - 1))))\n\tpre (x \u003e 0)","private Power_rel: (BinRel * nat -\u003e BinRel)\n\tPower_rel(R, k) \u003d\u003d\n(if (k \u003d 0)\nthen id_rel(R)\nelseif (k \u003d 1)\nthen R\nelse Composition(R, Power_rel(R, (k - 1))))","private Reflexive_cl: (BinRel -\u003e BinRel)\n\tReflexive_cl(R) \u003d\u003d\n(R union id_rel(R))","private Symmetric_cl: (BinRel -\u003e BinRel)\n\tSymmetric_cl(R) \u003d\u003d\n(R union inverse_rel(R))","private Transitive_cl: (BinRel -\u003e BinRel)\n\tTransitive_cl(R) \u003d\u003d\n(dunion {Power_rel(R, k) | k in set {1, ... ,(card field(R))}})","private TransitiveRefl_cl: (BinRel -\u003e BinRel)\n\tTransitiveRefl_cl(R) \u003d\u003d\n(dunion {Power_rel(R, k) | k in set {0, ... ,(card field(R))}})","private PowerList: (BinRel -\u003e seq of (BinRel))\n\tPowerList(R) \u003d\u003d\nBuildList(R, (card field(R)))\n\tpre (R \u003c\u003e {})","private BuildList: (BinRel * nat1 -\u003e seq of (BinRel))\n\tBuildList(R, n) \u003d\u003d\n(if (n \u003d 1)\nthen [R]\nelse let M:seq of (BinRel) \u003d BuildList(R, (n - 1)), C:BinRel \u003d Composition(M((len M)), R) in (if (C \u003d {})\nthen M\nelse (M ^ [C])))\n\tpre (n \u003e 0)","private max_set: (set of (int) -\u003e int)\n\tmax_set(S) \u003d\u003d\nlet x in set S in (if ((card S) \u003d 1)\nthen x\nelse max2(x, max_set((S \\ {x}))))\n\tpre (S \u003c\u003e {})","private max2: (int * int -\u003e int)\n\tmax2(a, b) \u003d\u003d\n(if (a \u003e\u003d b)\nthen a\nelse b)","Warshall (BinRel \u003d\u003d\u003e BinRel)\n\tWarshall(Q) \u003d\u003d\n(\ni:nat1 :\u003d (undefined)\nj:nat1 :\u003d (undefined)\nk:nat1 :\u003d (undefined)\nR:BinRel :\u003d (undefined)\n\nR :\u003d Q;\nlet n:int \u003d max_set(field(R)) in for k \u003d 1 to n\nfor i \u003d 1 to n\nfor j \u003d 1 to n\nif (mk_(i, j) not in set R)\nthen\nif ((mk_(i, k) in set R) and (mk_(k, j) in set R))\nthen\nR :\u003d (R union {mk_(i, j)});\nreturn (R)\n)","private test_PowerList: (BinRel -\u003e bool)\n\ttest_PowerList(R) \u003d\u003d\nlet L:seq of (BinRel) \u003d PowerList(R), n:nat \u003d (card field(R)) in (((forall i in set (inds L) \u0026 (L(i) \u003d Power_rel(R, i))) and ((len L) \u003c n)) \u003d\u003e (Power_rel(R, ((len L) + 1)) \u003d {}))","Node \u003d Node","Flowgraph \u003d Flowgraph","private succ: (Flowgraph * Node -\u003e set of (Node))\n\tsucc(G, n) \u003d\u003d\n{k | k in set (G.N) \u0026 (mk_(n, k) in set (G.A))}","private pred: (Flowgraph * Node -\u003e set of (Node))\n\tpred(G, n) \u003d\u003d\n{k | k in set (G.N) \u0026 (mk_(k, n) in set (G.A))}","private existspath: (Flowgraph * Node * Node -\u003e bool)\n\texistspath(MFG, n1, n2) \u003d\u003d\n(mk_(n1, n2) in set relations`Warshall((MFG.A)))","Node \u003d Node","Nodes \u003d Nodes","GraphNodes \u003d GraphNodes\n\tinv N \u003d\u003d (((card N) \u003e 0) and (N \u003d {1, ... ,(card N)}))","Arc \u003d Arc","BinRel \u003d BinRel","Variable \u003d Variable","Vars \u003d Vars","Varmap \u003d Varmap","Path \u003d Path","Paths \u003d Paths","FlowGraph \u003d FlowGraph\n\tinv G \u003d\u003d ((relations`field((G.A)) subset (G.N)) and (((G.S) in set (G.N)) and ((G.E) in set (G.N))))","ExtendedFlowGraph \u003d ExtendedFlowGraph\n\tinv mk_ExtendedFlowGraph(G, U, D) \u003d\u003d (((len U) \u003d (card (G.N))) and ((len D) \u003d (card (G.N))))","N1:Nodes \u003d {1, ... ,4}","N2:Nodes \u003d {1, ... ,10}","N3:Nodes \u003d {1}","A0:BinRel \u003d {}","A1:BinRel \u003d {mk_(1, 2)}","A2:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(3, 4)}","A3:BinRel \u003d (A1 union {mk_(4, 5), mk_(4, 1), mk_(5, 6), mk_(6, 7), mk_(7, 8), mk_(8, 9), mk_(9, 10)})","A4:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(2, 4), mk_(3, 5), mk_(4, 5), mk_(5, 6)}","A5:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(2, 4), mk_(3, 5), mk_(4, 6), mk_(6, 5), mk_(5, 7)}","A6:BinRel \u003d {mk_(1, 1), mk_(2, 2), mk_(3, 3), mk_(4, 4), mk_(5, 5)}","A7:BinRel \u003d {mk_(1, 2), mk_(2, 3), mk_(2, 4), mk_(3, 5), mk_(4, 6), mk_(6, 5), mk_(5, 7), mk_(5, 2)}","A8:BinRel \u003d (A7 union {mk_(6, 1)})","G1:FlowGraph \u003d mk_FlowGraph(N1, A1, 1, 4)","G2:FlowGraph \u003d mk_FlowGraph(N1, A2, 1, 4)","G3:FlowGraph \u003d mk_FlowGraph(N2, A3, 1, 6)","G5:FlowGraph \u003d mk_FlowGraph(N2, A5, 1, 7)","G6:FlowGraph \u003d mk_FlowGraph(N2, A6, 1, 5)","state STof\n[G : FlowGraph]\n\tinit x \u003d\u003d (x \u003d mk_ST(mk_FlowGraph({1, 2}, {}, 1, 2)))"]