["class Factorial\nprivate  result:nat :\u003d 5\npublic  factorial(nat) (nat \u003d\u003d\u003e nat)\n\tfactorial(nat)(n) \u003d\u003d\nif (n \u003d 0)\nthen\nreturn (1)else\n(\nm:Multiplier :\u003d (undefined)\n\nm :\u003d new Multiplier();\nm.calculate(1, n);\nstart (m);\nresult :\u003d (m.giveResult)();\nreturn (result)\n)\nend Factorial\n","class Multiplier\nprivate  i:nat1 :\u003d (undefined)\nprivate  j:nat1 :\u003d (undefined)\nprivate  k:nat1 :\u003d (undefined)\nprivate  result:nat1 :\u003d (undefined)\npublic  calculate(nat1, nat1) (nat1 * nat1 \u003d\u003d\u003e ())\n\tcalculate(nat1, nat1)(first, last) \u003d\u003d\n(\n\ni :\u003d first;\nj :\u003d last\n)\nprivate  doit() (() \u003d\u003d\u003e ())\n\tdoit()() \u003d\u003d\n(\n\nif (i \u003d j)\nthen\nresult :\u003d ielse\n(\np:Multiplier :\u003d (undefined)\nq:Multiplier :\u003d (undefined)\n\np :\u003d new Multiplier();\nq :\u003d new Multiplier();\nstart (p);\nstart (q);\nk :\u003d ((i + j) div 2);\np.calculate(i, k);\nq.calculate((k + 1), j);\nresult :\u003d ((p.giveResult)() * (q.giveResult)())\n)\n)\npublic  giveResult() (() \u003d\u003d\u003e nat1)\n\tgiveResult()() \u003d\u003d\nreturn (result)\nprivate  per doit \u003d\u003e (#fin[calculate] \u003e #act[doit])\nprivate  per giveResult \u003d\u003e (#fin[doit] \u003e #act[giveResult])\nprivate  per calculate \u003d\u003e (#fin[giveResult] \u003d #act[calculate])\nprotected  thread doit()\nend Multiplier\n"]