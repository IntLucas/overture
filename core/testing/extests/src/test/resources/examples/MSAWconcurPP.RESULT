["class Beacon\nend Beacon\n","class CabDisplay\nprivate  alarm:bool :\u003d false\nprivate  emergencybreak:bool :\u003d false\nprivate  groundfault:bool :\u003d false\npublic  setAlarm() (() \u003d\u003d\u003e ())\n\tsetAlarm()() \u003d\u003d\nalarm :\u003d true\n\tpre ((not emergencybreak) and (not groundfault))\npublic  unsetAlarm() (() \u003d\u003d\u003e ())\n\tunsetAlarm()() \u003d\u003d\nalarm :\u003d false\npublic  setEmergencyBreak() (() \u003d\u003d\u003e ())\n\tsetEmergencyBreak()() \u003d\u003d\n(\n\nalarm :\u003d false;\nemergencybreak :\u003d true\n)\npublic  unsetEmergencyBreak() (() \u003d\u003d\u003e ())\n\tunsetEmergencyBreak()() \u003d\u003d\nemergencybreak :\u003d false\npublic  setGroundFault() (() \u003d\u003d\u003e ())\n\tsetGroundFault()() \u003d\u003d\ngroundfault :\u003d true\npublic  unsetGroundFault() (() \u003d\u003d\u003e ())\n\tunsetGroundFault()() \u003d\u003d\ngroundfault :\u003d false\npublic  getDisplay() (() \u003d\u003d\u003e (bool * bool * bool))\n\tgetDisplay()() \u003d\u003d\nreturn (mk_(alarm, emergencybreak, groundfault))\nend CabDisplay\n","class CheckSpeedEvent is subclass of [Event]\nprivate  speed:real :\u003d (undefined)\npublic  CheckSpeedEvent(real) (real \u003d\u003d\u003e CheckSpeedEvent)\n\tCheckSpeedEvent(real)(s) \u003d\u003d\nspeed :\u003d s\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(klv) \u003d\u003d\n(\n\nklv.checkSpeed(speed);\nlet mk_(a, e, g):(bool * bool * bool) \u003d ((klv.getCabDisplay)().getDisplay)(), e\u0027:bool \u003d ((klv.getEmergencyBreak)().getEmergencyBreak)() in return (mk_Test`KLVstate(mk_Test`CabDisp(a, e, g), mk_Test`EmerBreak(e\u0027)))\n)\nend CheckSpeedEvent\n","class EmergencyBreak\nprivate  emergencybreak:bool :\u003d false\npublic  setEmergencyBreak() (() \u003d\u003d\u003e ())\n\tsetEmergencyBreak()() \u003d\u003d\nemergencybreak :\u003d true\npublic  unsetEmergencyBreak() (() \u003d\u003d\u003e ())\n\tunsetEmergencyBreak()() \u003d\u003d\nemergencybreak :\u003d false\npublic  getEmergencyBreak() (() \u003d\u003d\u003e bool)\n\tgetEmergencyBreak()() \u003d\u003d\nreturn (emergencybreak)\nend EmergencyBreak\n","class Event\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(-) \u003d\u003d\nis subclass responsibility\nend Event\n","class FLTV is subclass of [Beacon]\nend FLTV\n","class HeadMeetBeaconEvent is subclass of [Event]\nprivate  beacon:Beacon :\u003d (undefined)\npublic  HeadMeetBeaconEvent(Beacon) (Beacon \u003d\u003d\u003e HeadMeetBeaconEvent)\n\tHeadMeetBeaconEvent(Beacon)(b) \u003d\u003d\nbeacon :\u003d b\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(klv) \u003d\u003d\n(\n\nklv.headMeetsBeacon(beacon);\nlet anns:seq of (TIV_D) \u003d (klv.getAnnouncements)(), restr:seq of (TIV_E) \u003d (klv.getSpeedRestrictions)() in return (mk_Test`BeaconsMet([mk_Test`TIVD((anns(i).getTargetSpeed)()) | i in set (inds anns)], [mk_Test`TIVE((restr(i).getSpeedRestriction)()) | i in set (inds restr)]))\n)\nend HeadMeetBeaconEvent\n","class KLV\nprivate  onboardcomp:OnBoardComp :\u003d new OnBoardComp()\nprivate  cabdisplay:CabDisplay :\u003d new CabDisplay()\nprivate  emergencybreak:EmergencyBreak :\u003d new EmergencyBreak()\nprivate  announcements:seq of (TIV_D) :\u003d []\nprivate  speedrestrictions:seq of (TIV_E) :\u003d []\nprivate  inv((len speedrestrictions) \u003c\u003d 5)\nprivate  firstspeedrestriction:bool :\u003d true\nprivate static  maxspeed:real \u003d 140\npublic  headMeetsBeacon(Beacon) (Beacon \u003d\u003d\u003e ())\n\theadMeetsBeacon(Beacon)(beacon) \u003d\u003d\ncases true :\n  (isofclass(TIV_D,beacon)) -\u003e announceSpeedRestriction(beacon)  (isofclass(TIV_E,beacon)) -\u003e addSpeedRestriction(beacon)  (isofclass(TIV_A,beacon)) -\u003e deleteAnnouncements()  (isofclass(FLTV,beacon)) -\u003e skip end\npublic  tailMeetsBeacon(Beacon) (Beacon \u003d\u003d\u003e ())\n\ttailMeetsBeacon(Beacon)(beacon) \u003d\u003d\ncases true :\n  (isofclass(TIV_D,beacon)) -\u003e skip  (isofclass(TIV_E,beacon)) -\u003e if (not firstspeedrestriction)\nthen\nremoveSpeedRestriction()else\nfirstspeedrestriction :\u003d false  (isofclass(TIV_A,beacon)) -\u003e skip  (isofclass(FLTV,beacon)) -\u003e (\n\nfirstspeedrestriction :\u003d true;\nremoveSpeedRestriction()\n) end\npublic  announceSpeedRestriction(TIV_D) (TIV_D \u003d\u003d\u003e ())\n\tannounceSpeedRestriction(TIV_D)(tiv_d) \u003d\u003d\n(\n\nannouncements :\u003d (announcements ^ [tiv_d]);\ndeletePossibleGroundFault()\n)\npublic  addSpeedRestriction(TIV_E) (TIV_E \u003d\u003d\u003e ())\n\taddSpeedRestriction(TIV_E)(tiv_e) \u003d\u003d\nif ((len speedrestrictions) \u003c 5)\nthen\n(\n\nlet speed:real \u003d ((hd announcements).getTargetSpeed)() in tiv_e.setSpeedRestriction(speed);\nspeedrestrictions :\u003d (speedrestrictions ^ [tiv_e]);\nannouncements :\u003d (tl announcements);\ndeletePossibleGroundFault()\n)else\nraiseGroundFault()\n\tpre (announcements \u003c\u003e [])\npublic  deleteAnnouncements() (() \u003d\u003d\u003e ())\n\tdeleteAnnouncements()() \u003d\u003d\n(\n\nannouncements :\u003d [];\ndeletePossibleGroundFault()\n)\n\tpre (announcements \u003c\u003e [])\npublic  removeSpeedRestriction() (() \u003d\u003d\u003e ())\n\tremoveSpeedRestriction()() \u003d\u003d\n(\n\nspeedrestrictions :\u003d (tl speedrestrictions);\ndeletePossibleGroundFault()\n)\n\tpre (speedrestrictions \u003c\u003e [])\npublic  raiseGroundFault() (() \u003d\u003d\u003e ())\n\traiseGroundFault()() \u003d\u003d\ncabdisplay.setGroundFault()\npublic  deletePossibleGroundFault() (() \u003d\u003d\u003e ())\n\tdeletePossibleGroundFault()() \u003d\u003d\nlet mk_(-, -, gf):(bool * bool * bool) \u003d (cabdisplay.getDisplay)() in if gf\nthen\ncabdisplay.unsetGroundFault()\npublic  noBeaconMet() (() \u003d\u003d\u003e ())\n\tnoBeaconMet()() \u003d\u003d\n(\n\nannouncements :\u003d (tl announcements);\nraiseGroundFault()\n)\n\tpre (announcements \u003c\u003e [])\npublic  checkSpeed(real) (real \u003d\u003d\u003e ())\n\tcheckSpeed(real)(speed) \u003d\u003d\nlet speedalarm:AlarmLevel \u003d (onboardcomp.checkSpeed)(speed, getMaxSpeed()) in cases speedalarm :\n  \u003cSpeedOk\u003e -\u003e if (not (emergencybreak.getEmergencyBreak)())\nthen\ncabdisplay.unsetAlarm()  \u003cAlarmSpeed\u003e -\u003e if (not (emergencybreak.getEmergencyBreak)())\nthen\ncabdisplay.setAlarm()  \u003cEmergencyBreakSpeed\u003e -\u003e (\n\ncabdisplay.setEmergencyBreak();\nemergencybreak.setEmergencyBreak()\n) end\npublic  getMaxSpeed() (() \u003d\u003d\u003e real)\n\tgetMaxSpeed()() \u003d\u003d\nif (speedrestrictions \u003c\u003e [])\nthen\nlet speeds:set of (real) \u003d {(tiv_e.getSpeedRestriction)() | tiv_e in set (elems speedrestrictions)} in let minspeed in set speeds be st (forall sp in set speeds \u0026 (minspeed \u003c\u003d sp)) in return (minspeed)else\nreturn (maxspeed)\npublic  releaseEmergencyBreak(real) (real \u003d\u003d\u003e ())\n\treleaseEmergencyBreak(real)(sp) \u003d\u003d\nif (sp \u003d 0)\nthen\n(\n\ncabdisplay.unsetEmergencyBreak();\nemergencybreak.unsetEmergencyBreak()\n)\n\tpre let mk_(-, eb, -):(bool * bool * bool) \u003d (cabdisplay.getDisplay)() in (eb and (emergencybreak.getEmergencyBreak)())\npublic  getCabDisplay() (() \u003d\u003d\u003e CabDisplay)\n\tgetCabDisplay()() \u003d\u003d\nreturn (cabdisplay)\npublic  getEmergencyBreak() (() \u003d\u003d\u003e EmergencyBreak)\n\tgetEmergencyBreak()() \u003d\u003d\nreturn (emergencybreak)\npublic  getAnnouncements() (() \u003d\u003d\u003e seq of (TIV_D))\n\tgetAnnouncements()() \u003d\u003d\nreturn (announcements)\npublic  getSpeedRestrictions() (() \u003d\u003d\u003e seq of (TIV_E))\n\tgetSpeedRestrictions()() \u003d\u003d\nreturn (speedrestrictions)\nend KLV\n","class KLVStateEvent is subclass of [Event]\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(klv) \u003d\u003d\n(\n\nlet mk_(a, e, g):(bool * bool * bool) \u003d ((klv.getCabDisplay)().getDisplay)(), e\u0027:bool \u003d ((klv.getEmergencyBreak)().getEmergencyBreak)() in return (mk_Test`KLVstate(mk_Test`CabDisp(a, e, g), mk_Test`EmerBreak(e\u0027)))\n)\nend KLVStateEvent\n","class MaxSpeedEvent is subclass of [Event]\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(klv) \u003d\u003d\n(\n\nlet ms:real \u003d (klv.getMaxSpeed)() in return (mk_Test`MaxSpeed(ms))\n)\nend MaxSpeedEvent\n","class NoBeaconMetEvent is subclass of [Event]\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(klv) \u003d\u003d\n(\n\nklv.noBeaconMet();\nlet mk_(a, e, g):(bool * bool * bool) \u003d ((klv.getCabDisplay)().getDisplay)(), e\u0027:bool \u003d ((klv.getEmergencyBreak)().getEmergencyBreak)() in return (mk_Test`KLVstate(mk_Test`CabDisp(a, e, g), mk_Test`EmerBreak(e\u0027)))\n)\nend NoBeaconMetEvent\n","class OnBoardComp\npublic static  AlarmLevel \u003d AlarmLevel\nprivate static  AlarmSpeedAdd:nat1 \u003d 5\nprivate static  EmergencySpeedAdd:nat1 \u003d 10\npublic  public checkSpeed: (real * real -\u003e AlarmLevel)\n\tcheckSpeed(speed, maxspeed) \u003d\u003d\n(if (speed \u003c (maxspeed + AlarmSpeedAdd))\nthen \u003cSpeedOk\u003e\nelseif (speed \u003c (maxspeed + EmergencySpeedAdd))\nthen \u003cAlarmSpeed\u003e\nelse \u003cEmergencyBreakSpeed\u003e)\nend OnBoardComp\n","class TIV_A is subclass of [Beacon]\nend TIV_A\n","class TIV_D is subclass of [Beacon]\nprivate  targetspeed:real :\u003d (undefined)\npublic  TIV_D(real) (real \u003d\u003d\u003e TIV_D)\n\tTIV_D(real)(ts) \u003d\u003d\ntargetspeed :\u003d ts\npublic  getTargetSpeed() (() \u003d\u003d\u003e real)\n\tgetTargetSpeed()() \u003d\u003d\nreturn (targetspeed)\nend TIV_D\n","class TIV_E is subclass of [Beacon]\nprivate  speed:[real] :\u003d nil\npublic  setSpeedRestriction(real) (real \u003d\u003d\u003e ())\n\tsetSpeedRestriction(real)(s) \u003d\u003d\nspeed :\u003d s\npublic  getSpeedRestriction() (() \u003d\u003d\u003e real)\n\tgetSpeedRestriction()() \u003d\u003d\nreturn (speed)\n\tpre (speed \u003c\u003e nil)\nend TIV_E\n","class TailMeetBeaconEvent is subclass of [Event]\nprivate  beacon:Beacon :\u003d (undefined)\npublic  TailMeetBeaconEvent(Beacon) (Beacon \u003d\u003d\u003e TailMeetBeaconEvent)\n\tTailMeetBeaconEvent(Beacon)(b) \u003d\u003d\nbeacon :\u003d b\npublic  execute(KLV) (KLV \u003d\u003d\u003e TestResult)\n\texecute(KLV)(klv) \u003d\u003d\n(\n\nklv.tailMeetsBeacon(beacon);\nlet anns:seq of (TIV_D) \u003d (klv.getAnnouncements)(), restr:seq of (TIV_E) \u003d (klv.getSpeedRestrictions)() in return (mk_Test`BeaconsMet([mk_Test`TIVD((anns(i).getTargetSpeed)()) | i in set (inds anns)], [mk_Test`TIVE((restr(i).getSpeedRestriction)()) | i in set (inds restr)]))\n)\nend TailMeetBeaconEvent\n","class Test\npublic static  TestResult \u003d TestResult\npublic static  KLVstate \u003d KLVstate\npublic static  CabDisp \u003d CabDisp\npublic static  EmerBreak \u003d EmerBreak\npublic static  BeaconsMet \u003d BeaconsMet\npublic static  TIVD \u003d TIVD\npublic static  TIVE \u003d TIVE\npublic static  MaxSpeed \u003d MaxSpeed\nprivate  klv:KLV :\u003d new KLV()\npublic  runTests(seq of (Event)) (seq of (Event) \u003d\u003d\u003e seq of (TestResult))\n\trunTests(seq of (Event))(events) \u003d\u003d\nreturn ([(events(i).execute)(klv) | i in set (inds events)])\npublic  runOneTest(Event) (Event \u003d\u003d\u003e TestResult)\n\trunOneTest(Event)(event) \u003d\u003d\nreturn ((event.execute)(klv))\nend Test\n","class UseKLV\nprivate static  ev60:HeadMeetBeaconEvent \u003d new HeadMeetBeaconEvent(new TIV_D(60))\nprivate static  ev40:HeadMeetBeaconEvent \u003d new HeadMeetBeaconEvent(new TIV_D(40))\nprivate static  ev70:HeadMeetBeaconEvent \u003d new HeadMeetBeaconEvent(new TIV_D(70))\nprivate static  eve1:HeadMeetBeaconEvent \u003d new HeadMeetBeaconEvent(new TIV_E())\nprivate static  eve2:TailMeetBeaconEvent \u003d new TailMeetBeaconEvent(new TIV_E())\nprivate static  eve3:TailMeetBeaconEvent \u003d new TailMeetBeaconEvent(new FLTV())\nprivate static  ev_s:set of (Event) \u003d {ev60, ev40, ev70, eve1, eve2, eve3}\nprivate  test:Test :\u003d new Test()\nprivate  klv:KLV :\u003d new KLV()\npublic  [Seq1][[ev1 in set ev_sALetBeStBindingTraceDefinitionev2 in set (ev_s \\ {ev1})ALetBeStBindingTraceDefinitionev3 in set (ev_s \\ {ev1, ev2})ALetBeStBindingTraceDefinitionev4 in set (ev_s \\ {ev1, ev2, ev3})ALetBeStBindingTraceDefinitionev5 in set (ev_s \\ {ev1, ev2, ev3, ev4})ALetBeStBindingTraceDefinitionev6 in set (ev_s \\ {ev1, ev2, ev3, ev4, ev5})ALetBeStBindingTraceDefinition([[test.runOneTest(ev1){1,1}], [test.runOneTest(ev2){1,1}], [test.runOneTest(ev3){1,1}], [test.runOneTest(ev1){1,1}], [test.runOneTest(ev4){1,1}], [test.runOneTest(ev5){1,1}], [test.runOneTest(ev6){1,1}]]){1,1}def ev6 in set (ev_s \\ {ev1, ev2, ev3, ev4, ev5})def ev5 in set (ev_s \\ {ev1, ev2, ev3, ev4})def ev4 in set (ev_s \\ {ev1, ev2, ev3})def ev3 in set (ev_s \\ {ev1, ev2})def ev2 in set (ev_s \\ {ev1})def ev1 in set ev_s]]\nend UseKLV\n"]