["Elem \u003d Elem","Bag \u003d Bag","private Min: (nat * nat -\u003e nat)\n\tMin(i, j) \u003d\u003d\n(if (i \u003c j)\nthen i\nelse j)","private Max: (nat * nat -\u003e nat)\n\tMax(i, j) \u003d\u003d\n(if (i \u003e j)\nthen i\nelse j)","private AuxSeqToBag: (seq of (Elem) * Bag -\u003e Bag)\n\tAuxSeqToBag(s, b) \u003d\u003d\n(cases s :\n[] -\u003e b,\n[e] ^ rest -\u003e AuxSeqToBag(rest, Add(e, b))\n end)","private LenPar1: (seq of (Elem) * Bag -\u003e nat)\n\tLenPar1(list, -) \u003d\u003d\n(len list)","private Empty: (() -\u003e Bag)\n\tEmpty() \u003d\u003d\n{|-\u003e}","private Add: (Elem * Bag -\u003e Bag)\n\tAdd(e, b) \u003d\u003d\n(if (e in set (dom b))\nthen (b ++ {e |-\u003e (b(e) + 1)})\nelse (b ++ {e |-\u003e 1}))","private Remove: (Elem * Bag -\u003e Bag)\n\tRemove(e, b) \u003d\u003d\n(if (e in set (dom b))\nthen (if (b(e) \u003d 1)\nthen ({e} \u003c-: b)\nelse (b ++ {e |-\u003e (b(e) - 1)}))\nelse b)","private Count: (Elem * Bag -\u003e nat)\n\tCount(e, b) \u003d\u003d\n(if (e in set (dom b))\nthen b(e)\nelse 0)","private In: (Elem * Bag -\u003e bool)\n\tIn(e, b) \u003d\u003d\n(e in set (dom b))","private Join: (Bag * Bag -\u003e Bag)\n\tJoin(b1, b2) \u003d\u003d\n{e |-\u003e Max(Count(e, b1), Count(e, b2)) | e in set ((dom b1) union (dom b2))}","private Union: (Bag * Bag -\u003e Bag)\n\tUnion(b1, b2) \u003d\u003d\n{e |-\u003e (Count(e, b1) + Count(e, b2)) | e in set ((dom b1) union (dom b2))}","private SubBag: (Bag * Bag -\u003e bool)\n\tSubBag(b1, b2) \u003d\u003d\n(forall e in set (dom b1) \u0026 (Count(e, b1) \u003c\u003d Count(e, b2)))","private Difference: (Bag * Bag -\u003e Bag)\n\tDifference(b1, b2) \u003d\u003d\n{e |-\u003e (Count(e, b1) - Count(e, b2)) | e in set (dom b1) \u0026 (Count(e, b1) \u003e Count(e, b2))}","private Size: (Bag -\u003e nat)\n\tSize(b) \u003d\u003d\n(if (b \u003d {|-\u003e})\nthen 0\nelse let e in set (dom b) in (b(e) + Size(({e} \u003c-: b))))","private CardDom: (Bag -\u003e nat)\n\tCardDom(b) \u003d\u003d\n(card (dom b))","private Intersection: (Bag * Bag -\u003e Bag)\n\tIntersection(b1, b2) \u003d\u003d\n{e |-\u003e Min(Count(e, b1), Count(e, b2)) | e in set ((dom b1) inter (dom b2))}","private SeqToBag: (seq of (Elem) -\u003e Bag)\n\tSeqToBag(s) \u003d\u003d\nAuxSeqToBag(s, Empty())","baga:Bag \u003d {\u003cA\u003e |-\u003e 3, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 4}","bagb:Bag \u003d {\u003cA\u003e |-\u003e 1, \u003cC\u003e |-\u003e 5, \u003cD\u003e |-\u003e 4, \u003cE\u003e |-\u003e 1}","private TestBagAll: (() -\u003e bool)\n\tTestBagAll() \u003d\u003d\nlet b1:bool \u003d TestAdd1(), b2:bool \u003d TestAdd2(), b3:bool \u003d TestCount1(), b4:bool \u003d TestCount2(), b5:bool \u003d TestDifference(), b6:bool \u003d TestEmpty(), b7:bool \u003d TestIn1(), b8:bool \u003d TestIn2(), b9:bool \u003d TestIntersection(), b10:bool \u003d TestJoin(), b11:bool \u003d TestRemove1(), b12:bool \u003d TestRemove2(), b13:bool \u003d TestRemove3(), b14:bool \u003d TestSeqToBag(), b15:bool \u003d TestSize(), b16:bool \u003d TestSubBag1(), b17:bool \u003d TestSubBag2(), b18:bool \u003d TestUnion() in (b1 and (b2 and (b3 and (b4 and (b5 and (b6 and (b7 and (b8 and (b9 and (b10 and (b11 and (b12 and (b13 and (b14 and (b15 and (b16 and (b17 and b18)))))))))))))))))","private TestAdd1: (() -\u003e bool)\n\tTestAdd1() \u003d\u003d\n(BAG`Add(\u003cC\u003e, BAG`baga) \u003d {\u003cA\u003e |-\u003e 3, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 5})","private TestAdd2: (() -\u003e bool)\n\tTestAdd2() \u003d\u003d\n(BAG`Add(\u003cD\u003e, BAG`baga) \u003d {\u003cA\u003e |-\u003e 3, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 4, \u003cD\u003e |-\u003e 1})","private TestCount1: (() -\u003e bool)\n\tTestCount1() \u003d\u003d\n(BAG`Count(\u003cD\u003e, BAG`baga) \u003d 0)","private TestCount2: (() -\u003e bool)\n\tTestCount2() \u003d\u003d\n(BAG`Count(\u003cD\u003e, BAG`bagb) \u003d 4)","private TestDifference: (() -\u003e bool)\n\tTestDifference() \u003d\u003d\n(BAG`Difference(BAG`baga, BAG`bagb) \u003d {\u003cA\u003e |-\u003e 2, \u003cB\u003e |-\u003e 2})","private TestEmpty: (() -\u003e bool)\n\tTestEmpty() \u003d\u003d\n(BAG`Empty() \u003d {|-\u003e})","private TestIn1: (() -\u003e bool)\n\tTestIn1() \u003d\u003d\nBAG`In(\u003cA\u003e, BAG`baga)","private TestIn2: (() -\u003e bool)\n\tTestIn2() \u003d\u003d\n(not BAG`In(\u003cD\u003e, BAG`baga))","private TestIntersection: (() -\u003e bool)\n\tTestIntersection() \u003d\u003d\n(BAG`Intersection(BAG`baga, BAG`bagb) \u003d {\u003cA\u003e |-\u003e 1, \u003cC\u003e |-\u003e 4})","private TestJoin: (() -\u003e bool)\n\tTestJoin() \u003d\u003d\n(BAG`Join(BAG`baga, BAG`bagb) \u003d {\u003cA\u003e |-\u003e 3, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 5, \u003cD\u003e |-\u003e 4, \u003cE\u003e |-\u003e 1})","private TestRemove1: (() -\u003e bool)\n\tTestRemove1() \u003d\u003d\n(BAG`Remove(\u003cA\u003e, BAG`bagb) \u003d {\u003cC\u003e |-\u003e 5, \u003cD\u003e |-\u003e 4, \u003cE\u003e |-\u003e 1})","private TestRemove2: (() -\u003e bool)\n\tTestRemove2() \u003d\u003d\n(BAG`Remove(\u003cA\u003e, BAG`baga) \u003d {\u003cA\u003e |-\u003e 2, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 4})","private TestRemove3: (() -\u003e bool)\n\tTestRemove3() \u003d\u003d\n(BAG`Remove(\u003cD\u003e, BAG`baga) \u003d BAG`baga)","private TestSeqToBag: (() -\u003e bool)\n\tTestSeqToBag() \u003d\u003d\n(BAG`SeqToBag([\u003cA\u003e, \u003cA\u003e, \u003cB\u003e, \u003cC\u003e, \u003cA\u003e]) \u003d {\u003cA\u003e |-\u003e 3, \u003cB\u003e |-\u003e 1, \u003cC\u003e |-\u003e 1})","private TestSize: (() -\u003e bool)\n\tTestSize() \u003d\u003d\n(BAG`Size(BAG`baga) \u003d 9)","private TestSubBag1: (() -\u003e bool)\n\tTestSubBag1() \u003d\u003d\n(not BAG`SubBag(BAG`baga, BAG`bagb))","private TestSubBag2: (() -\u003e bool)\n\tTestSubBag2() \u003d\u003d\nBAG`SubBag({\u003cA\u003e |-\u003e 2, \u003cC\u003e |-\u003e 4}, BAG`baga)","private TestUnion: (() -\u003e bool)\n\tTestUnion() \u003d\u003d\n(BAG`Union(BAG`baga, BAG`bagb) \u003d {\u003cA\u003e |-\u003e 4, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 9, \u003cD\u003e |-\u003e 4, \u003cE\u003e |-\u003e 1})","Drink \u003d Drink","Cellar \u003d Cellar","Bar \u003d Bar","Supplier \u003d Supplier","Pub \u003d Pub","BarLevel \u003d BarLevel","CellarLevel \u003d CellarLevel","Stock \u003d Stock","Order \u003d Order","private BuyStock: (map (Supplier) to (Stock) * Supplier * Order * Pub -\u003e Pub)\n\tBuyStock(supps, s, stock, mk_(c, r)) \u003d\u003d\nmk_(BAG`Union(c, stock), r)\n\tpre ((s in set (dom supps)) and BAG`SubBag(stock, supps(s)))","private RestockBar: (Pub * BarLevel -\u003e Pub)\n\tRestockBar(mk_(c, r), bl) \u003d\u003d\nlet missing:Bag \u003d BAG`Difference(bl, r) in let can_restock:Bag \u003d BAG`Intersection(missing, c) in mk_(BAG`Difference(c, can_restock), BAG`Union(r, can_restock))","private Round: (seq of (Drink) * Pub -\u003e Pub)\n\tRound(sold, mk_(c, r)) \u003d\u003d\nmk_(c, BAG`Difference(r, BAG`SeqToBag(sold)))\n\tpre BAG`SubBag(BAG`SeqToBag(sold), r)","private RestockCellar: (CellarLevel * Pub * map (Supplier) to (Stock) -\u003e Pub)\n\tRestockCellar(cl, mk_(c, r), sb) \u003d\u003d\n(if (sb \u003d {|-\u003e})\nthen mk_(c, r)\nelse let s in set (dom sb) in let missing:Bag \u003d BAG`Difference(cl, c) in (if (BAG`Size(missing) \u003e 0)\nthen let can_restock:Bag \u003d BAG`Intersection(missing, sb(s)) in RestockCellar(cl, mk_(BAG`Union(c, can_restock), r), ({s} \u003c-: sb))\nelse mk_(c, r)))","private CardCellar: (CellarLevel * Pub * map (Supplier) to (Stock) -\u003e nat)\n\tCardCellar(-, -, sb) \u003d\u003d\n(card (dom sb))","private Drink1: (Drink * Pub -\u003e Pub)\n\tDrink1(dr, mk_(c, r)) \u003d\u003d\nmk_(c, BAG`Remove(dr, r))\n\tpre BAG`In(dr, r)","private Disaster: (Pub -\u003e bool)\n\tDisaster(mk_(c, r)) \u003d\u003d\n((c \u003d BAG`Empty()) and (r \u003d BAG`Empty()))","private Unwanted: (Drink * Pub -\u003e Pub)\n\tUnwanted(dr, mk_(c, r)) \u003d\u003d\nmk_(c, BAG`Add(dr, r))","private HighestStock: (map (Supplier) to (Stock) -\u003e Bag)\n\tHighestStock(supps) \u003d\u003d\n(if ((dom supps) \u003d {})\nthen BAG`Empty()\nelse let s in set (dom supps) in BAG`Join(supps(s), HighestStock(({s} \u003c-: supps))))","private CardDom: (map (Supplier) to (Stock) -\u003e nat)\n\tCardDom(m) \u003d\u003d\n(card (dom m))","private TotalDrinks: (Pub -\u003e nat)\n\tTotalDrinks(mk_(c, r)) \u003d\u003d\n(BAG`Size(c) + BAG`Size(r))","cellarlevel1:map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) \u003d {\u003cA\u003e |-\u003e 5, \u003cB\u003e |-\u003e 5, \u003cC\u003e |-\u003e 3}","barlevel1:map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) \u003d {\u003cA\u003e |-\u003e 2, \u003cB\u003e |-\u003e 2, \u003cC\u003e |-\u003e 5}","cellar1:map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) \u003d {\u003cA\u003e |-\u003e 8, \u003cB\u003e |-\u003e 5, \u003cC\u003e |-\u003e 4}","cellar2:map ((\u003cB\u003e | \u003cC\u003e)) to (nat1) \u003d {\u003cB\u003e |-\u003e 1, \u003cC\u003e |-\u003e 4}","bar1:map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) \u003d {\u003cA\u003e |-\u003e 2, \u003cB\u003e |-\u003e 3, \u003cC\u003e |-\u003e 6}","bar2:map ((\u003cA\u003e | \u003cC\u003e)) to (nat1) \u003d {\u003cA\u003e |-\u003e 3, \u003cC\u003e |-\u003e 2}","bar3:map ((\u003cA\u003e | \u003cB\u003e)) to (nat1) \u003d {\u003cA\u003e |-\u003e 3, \u003cB\u003e |-\u003e 3}","pub1:(map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) * map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1)) \u003d mk_(cellar1, bar1)","pub2:(map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) * map ((\u003cA\u003e | \u003cC\u003e)) to (nat1)) \u003d mk_(cellar1, bar2)","pub3:(map ((\u003cB\u003e | \u003cC\u003e)) to (nat1) * map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1)) \u003d mk_(cellar2, bar1)","pub4:(map ((\u003cB\u003e | \u003cC\u003e)) to (nat1) * map ((\u003cA\u003e | \u003cC\u003e)) to (nat1)) \u003d mk_(cellar2, bar2)","pub5:(map ((\u003cA\u003e | \u003cB\u003e | \u003cC\u003e)) to (nat1) * map ((\u003cA\u003e | \u003cB\u003e)) to (nat1)) \u003d mk_(cellar1, bar3)","supps1:map (seq1 of (char)) to ((map ((\u003cB\u003e | \u003cC\u003e)) to (nat1) | map (\u003cA\u003e) to (nat1))) \u003d {\"Fizz\" |-\u003e {\u003cA\u003e |-\u003e 10}, \"Real\" |-\u003e {\u003cB\u003e |-\u003e 10, \u003cC\u003e |-\u003e 2}, \"Scrumpy\" |-\u003e {\u003cB\u003e |-\u003e 1, \u003cC\u003e |-\u003e 10}}","supps2:map (seq1 of (char)) to ((map ((\u003cB\u003e | \u003cC\u003e)) to (nat1) | map (\u003cA\u003e) to (nat1))) \u003d {\"Fizz\" |-\u003e {\u003cA\u003e |-\u003e 10}, \"Real\" |-\u003e {\u003cB\u003e |-\u003e 1, \u003cC\u003e |-\u003e 5}, \"Scrumpy\" |-\u003e {\u003cB\u003e |-\u003e 1, \u003cC\u003e |-\u003e 10}}"]