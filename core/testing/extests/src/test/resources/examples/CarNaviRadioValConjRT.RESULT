["class EnvironmentTask\nprivate  num:nat :\u003d 0\nprotected  max_stimuli:nat :\u003d 0\nprotected  e2s:map (nat) to (nat) :\u003d {|-\u003e}\nprotected  s2e:map (nat) to (nat) :\u003d {|-\u003e}\npublic  public checkResponseTimes: (map (nat) to (nat) * map (nat) to (nat) * nat -\u003e bool)\n\tcheckResponseTimes(pe2s, ps2e, plim) \u003d\u003d\n(forall idx in set (dom ps2e) \u0026 ((ps2e(idx) - pe2s(idx)) \u003c\u003d plim))\n\tpre (((dom ps2e) inter (dom pe2s)) \u003d (dom ps2e))\npublic  EnvironmentTask(nat) (nat \u003d\u003d\u003e EnvironmentTask)\n\tEnvironmentTask(nat)(pno) \u003d\u003d\nmax_stimuli :\u003d pno\npublic  getNum() (() \u003d\u003d\u003e nat)\n\tgetNum()() \u003d\u003d\n(\nres:nat :\u003d num\n\nnum :\u003d (num + 1);\nreturn (res)\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nis subclass responsibility\npublic  HandleEvent(nat) (nat \u003d\u003d\u003e ())\n\tHandleEvent(nat)(pev) \u003d\u003d\nis subclass responsibility\npublic  logEnvToSys(nat) (nat \u003d\u003d\u003e ())\n\tlogEnvToSys(nat)(pev) \u003d\u003d\ne2s :\u003d (e2s munion {pev |-\u003e time})\npublic  logSysToEnv(nat) (nat \u003d\u003d\u003e ())\n\tlogSysToEnv(nat)(pev) \u003d\u003d\ns2e :\u003d (s2e munion {pev |-\u003e time})\npublic  getMinMaxAverage() (() \u003d\u003d\u003e (nat * nat * real))\n\tgetMinMaxAverage()() \u003d\u003d\n(\nmin:[nat] :\u003d nil\nmax:[nat] :\u003d nil\ndiff:nat :\u003d 0\n\nfor all cnt in set (dom s2e) do\nlet dt:int \u003d (s2e(cnt) - e2s(cnt)) in (\n\nif (min \u003d nil)\nthen\nmin :\u003d dtelse\n(\n\nif (min \u003e dt)\nthen\nmin :\u003d dt\n);\nif (max \u003d nil)\nthen\nmax :\u003d dtelse\n(\n\nif (max \u003c dt)\nthen\nmax :\u003d dt\n);\ndiff :\u003d (diff + dt)\n);\nreturn (mk_(min, max, (diff / (card (dom s2e)))))\n)\n\tpre ((card (dom s2e)) \u003e 0)\npublic static  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  mutex(getNum)\nprivate  per getMinMaxAverage \u003d\u003e ((card (dom s2e)) \u003e\u003d max_stimuli)\nprivate  per IsFinished \u003d\u003e (#fin[logSysToEnv] \u003e 0)\nend EnvironmentTask\n","class InsertAddress is subclass of [EnvironmentTask]\npublic  InsertAddress(nat) (nat \u003d\u003d\u003e InsertAddress)\n\tInsertAddress(nat)(pno) \u003d\u003d\nmax_stimuli :\u003d pno\npublic  HandleEvent(nat) (nat \u003d\u003d\u003e ())\n\tHandleEvent(nat)(pev) \u003d\u003d\nlogSysToEnv(pev)\n\tpost checkResponseTimes(e2s, s2e, 24000000000)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nstart (self)\nprivate  createSignal() (() \u003d\u003d\u003e ())\n\tcreateSignal()() \u003d\u003d\n(\nnum2:nat :\u003d getNum()\n\nlogEnvToSys(num2);\nRadNavSys`mmi.HandleKeyPress(2, num2)\n)\nprotected  thread periodic(2.0E9, 100, 1000, 0)(createSignal())\nend InsertAddress\n","class Test\nprivate  mmi:MMI :\u003d new MMI()\nprivate  radio:Radio :\u003d new Radio()\nprivate  nav:Navigation :\u003d new Navigation()\npublic  [TT][[x in set {1, 2, 3}ALetBeStBindingTraceDefinition([[([[mmi.HandleKeyPress(x, x){1,1}, mmi.UpdateScreen(x, x){1,1}, radio.AdjustVolume(x){1,1}, radio.HandleTMC(x){1,1}, nav.DatabaseLookup(x){1,1}, nav.DecodeTMC(x){1,1}]]){1,1}], [EnvironmentTask`IsFinished(){1,1}]]){1,1}def x in set {1, 2, 3}]]\nend Test\n","class TransmitTMC is subclass of [EnvironmentTask]\npublic  TransmitTMC(nat) (nat \u003d\u003d\u003e TransmitTMC)\n\tTransmitTMC(nat)(pno) \u003d\u003d\nmax_stimuli :\u003d pno\npublic  HandleEvent(nat) (nat \u003d\u003d\u003e ())\n\tHandleEvent(nat)(pev) \u003d\u003d\nlogSysToEnv(pev)\n\tpost checkResponseTimes(e2s, s2e, 40000000000)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nstart (self)\nprivate  createSignal() (() \u003d\u003d\u003e ())\n\tcreateSignal()() \u003d\u003d\n(\nnum2:nat :\u003d getNum()\n\nlogEnvToSys(num2);\nRadNavSys`radio.HandleTMC(num2)\n)\nprotected  thread periodic(4.0E9, 400, 3910, 0)(createSignal())\nend TransmitTMC\n","class VolumeKnob is subclass of [EnvironmentTask]\npublic  VolumeKnob(nat) (nat \u003d\u003d\u003e VolumeKnob)\n\tVolumeKnob(nat)(pno) \u003d\u003d\nmax_stimuli :\u003d pno\npublic  HandleEvent(nat) (nat \u003d\u003d\u003e ())\n\tHandleEvent(nat)(pev) \u003d\u003d\nlogSysToEnv(pev)\n\tpost checkResponseTimes(e2s, s2e, 22000000000)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\nstart (self)\nprivate  createSignal() (() \u003d\u003d\u003e ())\n\tcreateSignal()() \u003d\u003d\n(\nnum2:nat :\u003d getNum()\n\nlogEnvToSys(num2);\nRadNavSys`mmi.HandleKeyPress(1, num2)\n)\nprotected  thread periodic(1.0E9, 50, 500, 0)(createSignal())\nend VolumeKnob\n","class World\npublic static  perfdata \u003d perfdata\npublic static  envTasks:map (seq of (char)) to (EnvironmentTask) :\u003d {|-\u003e}\nprivate  addEnvironmentTask(seq of (char), EnvironmentTask) (seq of (char) * EnvironmentTask \u003d\u003d\u003e ())\n\taddEnvironmentTask(seq of (char), EnvironmentTask)(pnm, penv) \u003d\u003d\n(\n\nenvTasks :\u003d (envTasks munion {pnm |-\u003e penv});\npenv.Run()\n)\npublic  RunScenario1() (() \u003d\u003d\u003e map (seq of (char)) to (perfdata))\n\tRunScenario1()() \u003d\u003d\n(\n\naddEnvironmentTask(\"VolumeKnob\", new VolumeKnob(10));\naddEnvironmentTask(\"TransmitTMC\", new TransmitTMC(10));\nreturn ({name |-\u003e (envTasks(name).getMinMaxAverage)() | name in set (dom envTasks)})\n)\npublic  RunScenario2() (() \u003d\u003d\u003e map (seq of (char)) to (perfdata))\n\tRunScenario2()() \u003d\u003d\n(\n\naddEnvironmentTask(\"InsertAddress\", new InsertAddress(10));\naddEnvironmentTask(\"TransmitTMC\", new TransmitTMC(10));\nreturn ({name |-\u003e (envTasks(name).getMinMaxAverage)() | name in set (dom envTasks)})\n)\nend World\n","class MMI\npublic async  HandleKeyPress(nat, nat) (nat * nat \u003d\u003d\u003e ())\n\tHandleKeyPress(nat, nat)(pn, pno) \u003d\u003d\n(\n\ncycles (100000.0) skip;\ncases pn :\n  1 -\u003e RadNavSys`radio.AdjustVolume(pno)  2 -\u003e RadNavSys`navigation.DatabaseLookup(pno) end\n)\npublic async  UpdateScreen(nat, nat) (nat * nat \u003d\u003d\u003e ())\n\tUpdateScreen(nat, nat)(pn, pno) \u003d\u003d\n(\n\ncycles (500000.0) skip;\ncases pn :\n  1 -\u003e World`envTasks(\"VolumeKnob\").HandleEvent(pno)  2 -\u003e World`envTasks(\"InsertAddress\").HandleEvent(pno)  3 -\u003e World`envTasks(\"TransmitTMC\").HandleEvent(pno) end\n)\nend MMI\n","class Navigation\npublic async  DatabaseLookup(nat) (nat \u003d\u003d\u003e ())\n\tDatabaseLookup(nat)(pno) \u003d\u003d\n(\n\ncycles (5000000.0) skip;\nRadNavSys`mmi.UpdateScreen(2, pno)\n)\npublic async  DecodeTMC(nat) (nat \u003d\u003d\u003e ())\n\tDecodeTMC(nat)(pno) \u003d\u003d\n(\n\ncycles (500000.0) skip;\nRadNavSys`mmi.UpdateScreen(3, pno)\n)\nend Navigation\n","system RadNavSys\npublic static  mmi:MMI :\u003d new MMI()\nprivate  CPU1:CPU :\u003d new CPU(\u003cFP\u003e, 2.2E7)\npublic static  radio:Radio :\u003d new Radio()\nprivate  CPU2:CPU :\u003d new CPU(\u003cFP\u003e, 1.1E7)\npublic static  navigation:Navigation :\u003d new Navigation()\nprivate  CPU3:CPU :\u003d new CPU(\u003cFP\u003e, 1.13E8)\nprivate  BUS1:BUS :\u003d new BUS(\u003cCSMACD\u003e, 72000.0, {CPU1, CPU2, CPU3})\npublic  RadNavSys() (() \u003d\u003d\u003e RadNavSys)\n\tRadNavSys()() \u003d\u003d\n(\n\nCPU1.deploy(mmi, \"MMIT\");\nCPU1.setPriority(\"MMI`HandleKeyPress\", 100);\nCPU1.setPriority(\"MMI`UpdateScreen\", 90);\nCPU2.deploy(radio, \"RadioT\");\nCPU2.setPriority(\"Radio`AdjustVolume\", 100);\nCPU3.deploy(navigation, \"NavT\");\nCPU3.setPriority(\"Navigation`DatabaseLookup\", 100);\nCPU3.setPriority(\"Navigation`DecodeTMC\", 90)\n)\nend RadNavSys\n","class Radio\npublic async  AdjustVolume(nat) (nat \u003d\u003d\u003e ())\n\tAdjustVolume(nat)(pno) \u003d\u003d\n(\n\ncycles (100000.0) skip;\nRadNavSys`mmi.UpdateScreen(1, pno)\n)\npublic async  HandleTMC(nat) (nat \u003d\u003d\u003e ())\n\tHandleTMC(nat)(pno) \u003d\u003d\n(\n\ncycles (1000000.0) skip;\nRadNavSys`navigation.DecodeTMC(pno)\n)\nend Radio\n"]