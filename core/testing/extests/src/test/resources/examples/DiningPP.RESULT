["class GiraffeBasicTypeImpl is subclass of [GiraffeBasicType]\nend GiraffeBasicTypeImpl\n","class GiraffeBinaryExpressionImpl is subclass of [GiraffeBinaryExpression]\nprivate  iv_lhs:GiraffeExpression :\u003d (undefined)\nprivate  iv_op:GiraffeBinaryOperator :\u003d (undefined)\nprivate  iv_rhs:GiraffeExpression :\u003d (undefined)\npublic  GiraffeBinaryExpressionImpl(GiraffeExpression, GiraffeBinaryOperator, GiraffeExpression) (GiraffeExpression * GiraffeBinaryOperator * GiraffeExpression \u003d\u003d\u003e GiraffeBinaryExpressionImpl)\n\tGiraffeBinaryExpressionImpl(GiraffeExpression, GiraffeBinaryOperator, GiraffeExpression)(p_lhs, p_op, p_rhs) \u003d\u003d\n(\n\niv_lhs :\u003d p_lhs;\niv_op :\u003d p_op;\niv_rhs :\u003d p_rhs\n)\npublic  getLhs() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetLhs()() \u003d\u003d\nreturn (iv_lhs)\npublic  getOp() (() \u003d\u003d\u003e GiraffeBinaryOperator)\n\tgetOp()() \u003d\u003d\nreturn (iv_op)\npublic  getRhs() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetRhs()() \u003d\u003d\nreturn (iv_rhs)\nend GiraffeBinaryExpressionImpl\n","class GiraffeBinaryOperatorImpl is subclass of [GiraffeBinaryOperator]\nend GiraffeBinaryOperatorImpl\n","class GiraffeBooleanLiteralExpressionImpl is subclass of [GiraffeBooleanLiteralExpression]\nprivate  iv_value:bool :\u003d (undefined)\npublic  GiraffeBooleanLiteralExpressionImpl(bool) (bool \u003d\u003d\u003e GiraffeBooleanLiteralExpressionImpl)\n\tGiraffeBooleanLiteralExpressionImpl(bool)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e bool)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend GiraffeBooleanLiteralExpressionImpl\n","class GiraffeCaseAlternativeImpl is subclass of [GiraffeCaseAlternative]\nprivate  iv_test:GiraffeExpression :\u003d (undefined)\nprivate  iv_exp:GiraffeExpression :\u003d (undefined)\npublic  GiraffeCaseAlternativeImpl(GiraffeExpression, GiraffeExpression) (GiraffeExpression * GiraffeExpression \u003d\u003d\u003e GiraffeCaseAlternativeImpl)\n\tGiraffeCaseAlternativeImpl(GiraffeExpression, GiraffeExpression)(p_test, p_exp) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_exp :\u003d p_exp\n)\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getExp() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetExp()() \u003d\u003d\nreturn (iv_exp)\nend GiraffeCaseAlternativeImpl\n","class GiraffeCasesExpressionImpl is subclass of [GiraffeCasesExpression]\nprivate  iv_test:GiraffeExpression :\u003d (undefined)\nprivate  iv_alts:seq of (GiraffeCaseAlternative) :\u003d (undefined)\nprivate  iv_deflt:[GiraffeExpression] :\u003d (undefined)\npublic  GiraffeCasesExpressionImpl(GiraffeExpression, seq of (GiraffeCaseAlternative), [GiraffeExpression]) (GiraffeExpression * seq of (GiraffeCaseAlternative) * [GiraffeExpression] \u003d\u003d\u003e GiraffeCasesExpressionImpl)\n\tGiraffeCasesExpressionImpl(GiraffeExpression, seq of (GiraffeCaseAlternative), [GiraffeExpression])(p_test, p_alts, p_deflt) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_alts :\u003d p_alts;\niv_deflt :\u003d p_deflt\n)\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getAlts() (() \u003d\u003d\u003e seq of (GiraffeCaseAlternative))\n\tgetAlts()() \u003d\u003d\nreturn (iv_alts)\npublic  hasDeflt() (() \u003d\u003d\u003e bool)\n\thasDeflt()() \u003d\u003d\nreturn ((iv_deflt \u003d nil))\npublic  getDeflt() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetDeflt()() \u003d\u003d\nreturn (iv_deflt)\nend GiraffeCasesExpressionImpl\n","class GiraffeClassDefinitionImpl is subclass of [GiraffeClassDefinition]\nprivate  iv_name:GiraffeIdentifier :\u003d (undefined)\nprivate  iv_methods:set of (GiraffeMethodDefinition) :\u003d (undefined)\npublic  GiraffeClassDefinitionImpl(GiraffeIdentifier, set of (GiraffeMethodDefinition)) (GiraffeIdentifier * set of (GiraffeMethodDefinition) \u003d\u003d\u003e GiraffeClassDefinitionImpl)\n\tGiraffeClassDefinitionImpl(GiraffeIdentifier, set of (GiraffeMethodDefinition))(p_name, p_methods) \u003d\u003d\n(\n\niv_name :\u003d p_name;\niv_methods :\u003d p_methods\n)\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getMethods() (() \u003d\u003d\u003e set of (GiraffeMethodDefinition))\n\tgetMethods()() \u003d\u003d\nreturn (iv_methods)\nend GiraffeClassDefinitionImpl\n","class GiraffeDoubleLiteralExpressionImpl is subclass of [GiraffeDoubleLiteralExpression]\nprivate  iv_value:real :\u003d (undefined)\npublic  GiraffeDoubleLiteralExpressionImpl(real) (real \u003d\u003d\u003e GiraffeDoubleLiteralExpressionImpl)\n\tGiraffeDoubleLiteralExpressionImpl(real)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e real)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend GiraffeDoubleLiteralExpressionImpl\n","class GiraffeElseIfExpressionImpl is subclass of [GiraffeElseIfExpression]\nprivate  iv_test:GiraffeExpression :\u003d (undefined)\nprivate  iv_thn:GiraffeExpression :\u003d (undefined)\npublic  GiraffeElseIfExpressionImpl(GiraffeExpression, GiraffeExpression) (GiraffeExpression * GiraffeExpression \u003d\u003d\u003e GiraffeElseIfExpressionImpl)\n\tGiraffeElseIfExpressionImpl(GiraffeExpression, GiraffeExpression)(p_test, p_thn) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_thn :\u003d p_thn\n)\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getThn() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetThn()() \u003d\u003d\nreturn (iv_thn)\nend GiraffeElseIfExpressionImpl\n","class GiraffeExpressionImpl is subclass of [GiraffeNodeImpl]\nend GiraffeExpressionImpl\n","class GiraffeIdentifierImpl is subclass of [GiraffeIdentifier]\nprivate  iv_name:seq of (char) :\u003d (undefined)\npublic  GiraffeIdentifierImpl(seq of (char)) (seq of (char) \u003d\u003d\u003e GiraffeIdentifierImpl)\n\tGiraffeIdentifierImpl(seq of (char))(p_name) \u003d\u003d\n(\n\niv_name :\u003d p_name\n)\npublic  getName() (() \u003d\u003d\u003e seq of (char))\n\tgetName()() \u003d\u003d\nreturn (iv_name)\nend GiraffeIdentifierImpl\n","class GiraffeIfExpressionImpl is subclass of [GiraffeIfExpression]\nprivate  iv_test:GiraffeExpression :\u003d (undefined)\nprivate  iv_thn:GiraffeExpression :\u003d (undefined)\nprivate  iv_els:GiraffeExpression :\u003d (undefined)\npublic  GiraffeIfExpressionImpl(GiraffeExpression, GiraffeExpression, GiraffeExpression) (GiraffeExpression * GiraffeExpression * GiraffeExpression \u003d\u003d\u003e GiraffeIfExpressionImpl)\n\tGiraffeIfExpressionImpl(GiraffeExpression, GiraffeExpression, GiraffeExpression)(p_test, p_thn, p_els) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_thn :\u003d p_thn;\niv_els :\u003d p_els\n)\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getThn() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetThn()() \u003d\u003d\nreturn (iv_thn)\npublic  getEls() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetEls()() \u003d\u003d\nreturn (iv_els)\nend GiraffeIfExpressionImpl\n","class GiraffeIntegerLiteralExpressionImpl is subclass of [GiraffeIntegerLiteralExpression]\nprivate  iv_value:int :\u003d (undefined)\npublic  GiraffeIntegerLiteralExpressionImpl(int) (int \u003d\u003d\u003e GiraffeIntegerLiteralExpressionImpl)\n\tGiraffeIntegerLiteralExpressionImpl(int)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e int)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend GiraffeIntegerLiteralExpressionImpl\n","class GiraffeLiteralExpressionImpl is subclass of [GiraffeExpressionImpl]\nend GiraffeLiteralExpressionImpl\n","class GiraffeMethodDefinitionImpl is subclass of [GiraffeMethodDefinition]\nprivate  iv_name:GiraffeIdentifier :\u003d (undefined)\nprivate  iv_parameters:seq of (GiraffeParameter) :\u003d (undefined)\nprivate  iv_type:GiraffeType :\u003d (undefined)\nprivate  iv_body:seq of (GiraffeStatement) :\u003d (undefined)\npublic  GiraffeMethodDefinitionImpl(GiraffeIdentifier, seq of (GiraffeParameter), GiraffeType, seq of (GiraffeStatement)) (GiraffeIdentifier * seq of (GiraffeParameter) * GiraffeType * seq of (GiraffeStatement) \u003d\u003d\u003e GiraffeMethodDefinitionImpl)\n\tGiraffeMethodDefinitionImpl(GiraffeIdentifier, seq of (GiraffeParameter), GiraffeType, seq of (GiraffeStatement))(p_name, p_parameters, p_type, p_body) \u003d\u003d\n(\n\niv_name :\u003d p_name;\niv_parameters :\u003d p_parameters;\niv_type :\u003d p_type;\niv_body :\u003d p_body\n)\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getParameters() (() \u003d\u003d\u003e seq of (GiraffeParameter))\n\tgetParameters()() \u003d\u003d\nreturn (iv_parameters)\npublic  getType() (() \u003d\u003d\u003e GiraffeType)\n\tgetType()() \u003d\u003d\nreturn (iv_type)\npublic  getBody() (() \u003d\u003d\u003e seq of (GiraffeStatement))\n\tgetBody()() \u003d\u003d\nreturn (iv_body)\nend GiraffeMethodDefinitionImpl\n","class GiraffeNodeImpl\nend GiraffeNodeImpl\n","class GiraffeParameterImpl is subclass of [GiraffeParameter]\nprivate  iv_type:GiraffeType :\u003d (undefined)\nprivate  iv_name:GiraffeIdentifier :\u003d (undefined)\npublic  GiraffeParameterImpl(GiraffeType, GiraffeIdentifier) (GiraffeType * GiraffeIdentifier \u003d\u003d\u003e GiraffeParameterImpl)\n\tGiraffeParameterImpl(GiraffeType, GiraffeIdentifier)(p_type, p_name) \u003d\u003d\n(\n\niv_type :\u003d p_type;\niv_name :\u003d p_name\n)\npublic  getType() (() \u003d\u003d\u003e GiraffeType)\n\tgetType()() \u003d\u003d\nreturn (iv_type)\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\nend GiraffeParameterImpl\n","class GiraffeReturnStatementImpl is subclass of [GiraffeReturnStatement]\nprivate  iv_value:GiraffeExpression :\u003d (undefined)\npublic  GiraffeReturnStatementImpl(GiraffeExpression) (GiraffeExpression \u003d\u003d\u003e GiraffeReturnStatementImpl)\n\tGiraffeReturnStatementImpl(GiraffeExpression)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend GiraffeReturnStatementImpl\n","class GiraffeSpecificationImpl is subclass of [GiraffeSpecification]\nprivate  iv_clazz:GiraffeClassDefinition :\u003d (undefined)\npublic  GiraffeSpecificationImpl(GiraffeClassDefinition) (GiraffeClassDefinition \u003d\u003d\u003e GiraffeSpecificationImpl)\n\tGiraffeSpecificationImpl(GiraffeClassDefinition)(p_clazz) \u003d\u003d\n(\n\niv_clazz :\u003d p_clazz\n)\npublic  getClazz() (() \u003d\u003d\u003e GiraffeClassDefinition)\n\tgetClazz()() \u003d\u003d\nreturn (iv_clazz)\nend GiraffeSpecificationImpl\n","class GiraffeStatementImpl is subclass of [GiraffeNodeImpl]\nend GiraffeStatementImpl\n","class GiraffeTypeImpl is subclass of [GiraffeNodeImpl]\nend GiraffeTypeImpl\n","class GiraffeUnaryExpressionImpl is subclass of [GiraffeUnaryExpression]\nprivate  iv_op:GiraffeUnaryOperator :\u003d (undefined)\nprivate  iv_exp:GiraffeExpression :\u003d (undefined)\npublic  GiraffeUnaryExpressionImpl(GiraffeUnaryOperator, GiraffeExpression) (GiraffeUnaryOperator * GiraffeExpression \u003d\u003d\u003e GiraffeUnaryExpressionImpl)\n\tGiraffeUnaryExpressionImpl(GiraffeUnaryOperator, GiraffeExpression)(p_op, p_exp) \u003d\u003d\n(\n\niv_op :\u003d p_op;\niv_exp :\u003d p_exp\n)\npublic  getOp() (() \u003d\u003d\u003e GiraffeUnaryOperator)\n\tgetOp()() \u003d\u003d\nreturn (iv_op)\npublic  getExp() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetExp()() \u003d\u003d\nreturn (iv_exp)\nend GiraffeUnaryExpressionImpl\n","class GiraffeUnaryOperatorImpl is subclass of [GiraffeUnaryOperator]\nend GiraffeUnaryOperatorImpl\n","class GiraffeVariableDeclStatementImpl is subclass of [GiraffeVariableDeclStatement]\nprivate  iv_type:GiraffeType :\u003d (undefined)\nprivate  iv_name:GiraffeIdentifier :\u003d (undefined)\nprivate  iv_value:GiraffeExpression :\u003d (undefined)\npublic  GiraffeVariableDeclStatementImpl(GiraffeType, GiraffeIdentifier, GiraffeExpression) (GiraffeType * GiraffeIdentifier * GiraffeExpression \u003d\u003d\u003e GiraffeVariableDeclStatementImpl)\n\tGiraffeVariableDeclStatementImpl(GiraffeType, GiraffeIdentifier, GiraffeExpression)(p_type, p_name, p_value) \u003d\u003d\n(\n\niv_type :\u003d p_type;\niv_name :\u003d p_name;\niv_value :\u003d p_value\n)\npublic  getType() (() \u003d\u003d\u003e GiraffeType)\n\tgetType()() \u003d\u003d\nreturn (iv_type)\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getValue() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend GiraffeVariableDeclStatementImpl\n","class GiraffeVariableExpressionImpl is subclass of [GiraffeVariableExpression]\nprivate  iv_name:GiraffeIdentifier :\u003d (undefined)\npublic  GiraffeVariableExpressionImpl(GiraffeIdentifier) (GiraffeIdentifier \u003d\u003d\u003e GiraffeVariableExpressionImpl)\n\tGiraffeVariableExpressionImpl(GiraffeIdentifier)(p_name) \u003d\u003d\n(\n\niv_name :\u003d p_name\n)\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\nend GiraffeVariableExpressionImpl\n","class GiraffeBasicType is subclass of [GiraffeType]\npublic static  BOOL:GiraffeBasicType \u003d new GiraffeBasicType(\"BOOL\")\npublic static  DOUBLE:GiraffeBasicType \u003d new GiraffeBasicType(\"DOUBLE\")\npublic static  INT:GiraffeBasicType \u003d new GiraffeBasicType(\"INT\")\npublic  name:[seq of (char)] :\u003d nil\npublic  GiraffeBasicType(seq of (char)) (seq of (char) \u003d\u003d\u003e GiraffeBasicType)\n\tGiraffeBasicType(seq of (char))(n) \u003d\u003d\nname :\u003d n\nend GiraffeBasicType\n","class GiraffeBinaryExpression is subclass of [GiraffeExpression]\npublic  getLhs() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetLhs()() \u003d\u003d\nis subclass responsibility\npublic  getOp() (() \u003d\u003d\u003e GiraffeBinaryOperator)\n\tgetOp()() \u003d\u003d\nis subclass responsibility\npublic  getRhs() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetRhs()() \u003d\u003d\nis subclass responsibility\nend GiraffeBinaryExpression\n","class GiraffeBinaryOperator is subclass of [GiraffeNode]\npublic static  AND:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"AND\")\npublic static  DIV:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"DIV\")\npublic static  EQUALS:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"EQUALS\")\npublic static  GE:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"GE\")\npublic static  GT:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"GT\")\npublic static  LE:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"LE\")\npublic static  LT:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"LT\")\npublic static  MINUS:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"MINUS\")\npublic static  MOD:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"MOD\")\npublic static  NE:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"NE\")\npublic static  OR:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"OR\")\npublic static  PLUS:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"PLUS\")\npublic static  TIMES:GiraffeBinaryOperator \u003d new GiraffeBinaryOperator(\"TIMES\")\npublic  name:[seq of (char)] :\u003d nil\npublic  GiraffeBinaryOperator(seq of (char)) (seq of (char) \u003d\u003d\u003e GiraffeBinaryOperator)\n\tGiraffeBinaryOperator(seq of (char))(n) \u003d\u003d\nname :\u003d n\nend GiraffeBinaryOperator\n","class GiraffeBooleanLiteralExpression is subclass of [GiraffeLiteralExpression]\npublic  getValue() (() \u003d\u003d\u003e bool)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend GiraffeBooleanLiteralExpression\n","class GiraffeCaseAlternative is subclass of [GiraffeNode]\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getExp() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetExp()() \u003d\u003d\nis subclass responsibility\nend GiraffeCaseAlternative\n","class GiraffeCasesExpression is subclass of [GiraffeExpression]\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getAlts() (() \u003d\u003d\u003e seq of (GiraffeCaseAlternative))\n\tgetAlts()() \u003d\u003d\nis subclass responsibility\npublic  hasDeflt() (() \u003d\u003d\u003e bool)\n\thasDeflt()() \u003d\u003d\nis subclass responsibility\npublic  getDeflt() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetDeflt()() \u003d\u003d\nis subclass responsibility\nend GiraffeCasesExpression\n","class GiraffeClassDefinition is subclass of [GiraffeNode]\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getMethods() (() \u003d\u003d\u003e set of (GiraffeMethodDefinition))\n\tgetMethods()() \u003d\u003d\nis subclass responsibility\nend GiraffeClassDefinition\n","class GiraffeDoubleLiteralExpression is subclass of [GiraffeLiteralExpression]\npublic  getValue() (() \u003d\u003d\u003e real)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend GiraffeDoubleLiteralExpression\n","class GiraffeElseIfExpression is subclass of [GiraffeNode]\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getThn() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetThn()() \u003d\u003d\nis subclass responsibility\nend GiraffeElseIfExpression\n","class GiraffeExpression is subclass of [GiraffeNode]\nend GiraffeExpression\n","class GiraffeIdentifier is subclass of [GiraffeType]\npublic  getName() (() \u003d\u003d\u003e seq of (char))\n\tgetName()() \u003d\u003d\nis subclass responsibility\nend GiraffeIdentifier\n","class GiraffeIfExpression is subclass of [GiraffeExpression]\npublic  getTest() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getThn() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetThn()() \u003d\u003d\nis subclass responsibility\npublic  getEls() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetEls()() \u003d\u003d\nis subclass responsibility\nend GiraffeIfExpression\n","class GiraffeIntegerLiteralExpression is subclass of [GiraffeLiteralExpression]\npublic  getValue() (() \u003d\u003d\u003e int)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend GiraffeIntegerLiteralExpression\n","class GiraffeLiteralExpression is subclass of [GiraffeExpression]\nend GiraffeLiteralExpression\n","class GiraffeMethodDefinition is subclass of [GiraffeNode]\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getParameters() (() \u003d\u003d\u003e seq of (GiraffeParameter))\n\tgetParameters()() \u003d\u003d\nis subclass responsibility\npublic  getType() (() \u003d\u003d\u003e GiraffeType)\n\tgetType()() \u003d\u003d\nis subclass responsibility\npublic  getBody() (() \u003d\u003d\u003e seq of (GiraffeStatement))\n\tgetBody()() \u003d\u003d\nis subclass responsibility\nend GiraffeMethodDefinition\n","class GiraffeNode\nend GiraffeNode\n","class GiraffeParameter is subclass of [GiraffeNode]\npublic  getType() (() \u003d\u003d\u003e GiraffeType)\n\tgetType()() \u003d\u003d\nis subclass responsibility\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\nend GiraffeParameter\n","class GiraffeReturnStatement is subclass of [GiraffeStatement]\npublic  getValue() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend GiraffeReturnStatement\n","class GiraffeSpecification is subclass of [GiraffeNode]\npublic  getClazz() (() \u003d\u003d\u003e GiraffeClassDefinition)\n\tgetClazz()() \u003d\u003d\nis subclass responsibility\nend GiraffeSpecification\n","class GiraffeStatement is subclass of [GiraffeNode]\nend GiraffeStatement\n","class GiraffeType is subclass of [GiraffeNode]\nend GiraffeType\n","class GiraffeUnaryExpression is subclass of [GiraffeExpression]\npublic  getOp() (() \u003d\u003d\u003e GiraffeUnaryOperator)\n\tgetOp()() \u003d\u003d\nis subclass responsibility\npublic  getExp() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetExp()() \u003d\u003d\nis subclass responsibility\nend GiraffeUnaryExpression\n","class GiraffeUnaryOperator is subclass of [GiraffeNode]\npublic static  MINUS:GiraffeUnaryOperator \u003d new GiraffeUnaryOperator(\"MINUS\")\npublic static  NOT:GiraffeUnaryOperator \u003d new GiraffeUnaryOperator(\"NOT\")\npublic static  PLUS:GiraffeUnaryOperator \u003d new GiraffeUnaryOperator(\"PLUS\")\npublic  name:[seq of (char)] :\u003d nil\npublic  GiraffeUnaryOperator(seq of (char)) (seq of (char) \u003d\u003d\u003e GiraffeUnaryOperator)\n\tGiraffeUnaryOperator(seq of (char))(n) \u003d\u003d\nname :\u003d n\nend GiraffeUnaryOperator\n","class GiraffeVariableDeclStatement is subclass of [GiraffeStatement]\npublic  getType() (() \u003d\u003d\u003e GiraffeType)\n\tgetType()() \u003d\u003d\nis subclass responsibility\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getValue() (() \u003d\u003d\u003e GiraffeExpression)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend GiraffeVariableDeclStatement\n","class GiraffeVariableExpression is subclass of [GiraffeExpression]\npublic  getName() (() \u003d\u003d\u003e GiraffeIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\nend GiraffeVariableExpression\n","class SimpleApplyExpressionImpl is subclass of [SimpleApplyExpression]\nprivate  iv_func:SimpleExpression :\u003d (undefined)\nprivate  iv_args:seq of (SimpleExpression) :\u003d (undefined)\npublic  SimpleApplyExpressionImpl(SimpleExpression, seq of (SimpleExpression)) (SimpleExpression * seq of (SimpleExpression) \u003d\u003d\u003e SimpleApplyExpressionImpl)\n\tSimpleApplyExpressionImpl(SimpleExpression, seq of (SimpleExpression))(p_func, p_args) \u003d\u003d\n(\n\niv_func :\u003d p_func;\niv_args :\u003d p_args\n)\npublic  getFunc() (() \u003d\u003d\u003e SimpleExpression)\n\tgetFunc()() \u003d\u003d\nreturn (iv_func)\npublic  getArgs() (() \u003d\u003d\u003e seq of (SimpleExpression))\n\tgetArgs()() \u003d\u003d\nreturn (iv_args)\nend SimpleApplyExpressionImpl\n","class SimpleBasicTypeImpl is subclass of [SimpleBasicType]\nend SimpleBasicTypeImpl\n","class SimpleBinaryExpressionImpl is subclass of [SimpleBinaryExpression]\nprivate  iv_lhs:SimpleExpression :\u003d (undefined)\nprivate  iv_op:SimpleBinaryOperator :\u003d (undefined)\nprivate  iv_rhs:SimpleExpression :\u003d (undefined)\npublic  SimpleBinaryExpressionImpl(SimpleExpression, SimpleBinaryOperator, SimpleExpression) (SimpleExpression * SimpleBinaryOperator * SimpleExpression \u003d\u003d\u003e SimpleBinaryExpressionImpl)\n\tSimpleBinaryExpressionImpl(SimpleExpression, SimpleBinaryOperator, SimpleExpression)(p_lhs, p_op, p_rhs) \u003d\u003d\n(\n\niv_lhs :\u003d p_lhs;\niv_op :\u003d p_op;\niv_rhs :\u003d p_rhs\n)\npublic  getLhs() (() \u003d\u003d\u003e SimpleExpression)\n\tgetLhs()() \u003d\u003d\nreturn (iv_lhs)\npublic  getOp() (() \u003d\u003d\u003e SimpleBinaryOperator)\n\tgetOp()() \u003d\u003d\nreturn (iv_op)\npublic  getRhs() (() \u003d\u003d\u003e SimpleExpression)\n\tgetRhs()() \u003d\u003d\nreturn (iv_rhs)\nend SimpleBinaryExpressionImpl\n","class SimpleBinaryOperatorImpl is subclass of [SimpleBinaryOperator]\nend SimpleBinaryOperatorImpl\n","class SimpleBooleanLiteralExpressionImpl is subclass of [SimpleBooleanLiteralExpression]\nprivate  iv_value:bool :\u003d (undefined)\npublic  SimpleBooleanLiteralExpressionImpl(bool) (bool \u003d\u003d\u003e SimpleBooleanLiteralExpressionImpl)\n\tSimpleBooleanLiteralExpressionImpl(bool)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e bool)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend SimpleBooleanLiteralExpressionImpl\n","class SimpleCaseAlternativeImpl is subclass of [SimpleCaseAlternative]\nprivate  iv_test:SimpleExpression :\u003d (undefined)\nprivate  iv_exp:SimpleExpression :\u003d (undefined)\npublic  SimpleCaseAlternativeImpl(SimpleExpression, SimpleExpression) (SimpleExpression * SimpleExpression \u003d\u003d\u003e SimpleCaseAlternativeImpl)\n\tSimpleCaseAlternativeImpl(SimpleExpression, SimpleExpression)(p_test, p_exp) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_exp :\u003d p_exp\n)\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getExp() (() \u003d\u003d\u003e SimpleExpression)\n\tgetExp()() \u003d\u003d\nreturn (iv_exp)\nend SimpleCaseAlternativeImpl\n","class SimpleCasesExpressionImpl is subclass of [SimpleCasesExpression]\nprivate  iv_test:SimpleExpression :\u003d (undefined)\nprivate  iv_alts:seq of (SimpleCaseAlternative) :\u003d (undefined)\nprivate  iv_deflt:[SimpleExpression] :\u003d (undefined)\npublic  SimpleCasesExpressionImpl(SimpleExpression, seq of (SimpleCaseAlternative), [SimpleExpression]) (SimpleExpression * seq of (SimpleCaseAlternative) * [SimpleExpression] \u003d\u003d\u003e SimpleCasesExpressionImpl)\n\tSimpleCasesExpressionImpl(SimpleExpression, seq of (SimpleCaseAlternative), [SimpleExpression])(p_test, p_alts, p_deflt) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_alts :\u003d p_alts;\niv_deflt :\u003d p_deflt\n)\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getAlts() (() \u003d\u003d\u003e seq of (SimpleCaseAlternative))\n\tgetAlts()() \u003d\u003d\nreturn (iv_alts)\npublic  hasDeflt() (() \u003d\u003d\u003e bool)\n\thasDeflt()() \u003d\u003d\nreturn ((iv_deflt \u003d nil))\npublic  getDeflt() (() \u003d\u003d\u003e SimpleExpression)\n\tgetDeflt()() \u003d\u003d\nreturn (iv_deflt)\nend SimpleCasesExpressionImpl\n","class SimpleDefinitionImpl is subclass of [SimpleNodeImpl]\nend SimpleDefinitionImpl\n","class SimpleElseIfExpressionImpl is subclass of [SimpleElseIfExpression]\nprivate  iv_test:SimpleExpression :\u003d (undefined)\nprivate  iv_thn:SimpleExpression :\u003d (undefined)\npublic  SimpleElseIfExpressionImpl(SimpleExpression, SimpleExpression) (SimpleExpression * SimpleExpression \u003d\u003d\u003e SimpleElseIfExpressionImpl)\n\tSimpleElseIfExpressionImpl(SimpleExpression, SimpleExpression)(p_test, p_thn) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_thn :\u003d p_thn\n)\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getThn() (() \u003d\u003d\u003e SimpleExpression)\n\tgetThn()() \u003d\u003d\nreturn (iv_thn)\nend SimpleElseIfExpressionImpl\n","class SimpleExpressionImpl is subclass of [SimpleNodeImpl]\nend SimpleExpressionImpl\n","class SimpleFunctionDefinitionImpl is subclass of [SimpleFunctionDefinition]\nprivate  iv_name:SimpleIdentifier :\u003d (undefined)\nprivate  iv_params:seq of (SimpleParameter) :\u003d (undefined)\nprivate  iv_body:SimpleExpression :\u003d (undefined)\npublic  SimpleFunctionDefinitionImpl(SimpleIdentifier, seq of (SimpleParameter), SimpleExpression) (SimpleIdentifier * seq of (SimpleParameter) * SimpleExpression \u003d\u003d\u003e SimpleFunctionDefinitionImpl)\n\tSimpleFunctionDefinitionImpl(SimpleIdentifier, seq of (SimpleParameter), SimpleExpression)(p_name, p_params, p_body) \u003d\u003d\n(\n\niv_name :\u003d p_name;\niv_params :\u003d p_params;\niv_body :\u003d p_body\n)\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getParams() (() \u003d\u003d\u003e seq of (SimpleParameter))\n\tgetParams()() \u003d\u003d\nreturn (iv_params)\npublic  getBody() (() \u003d\u003d\u003e SimpleExpression)\n\tgetBody()() \u003d\u003d\nreturn (iv_body)\nend SimpleFunctionDefinitionImpl\n","class SimpleIdentifierImpl is subclass of [SimpleIdentifier]\nprivate  iv_name:seq of (char) :\u003d (undefined)\npublic  SimpleIdentifierImpl(seq of (char)) (seq of (char) \u003d\u003d\u003e SimpleIdentifierImpl)\n\tSimpleIdentifierImpl(seq of (char))(p_name) \u003d\u003d\n(\n\niv_name :\u003d p_name\n)\npublic  getName() (() \u003d\u003d\u003e seq of (char))\n\tgetName()() \u003d\u003d\nreturn (iv_name)\nend SimpleIdentifierImpl\n","class SimpleIfExpressionImpl is subclass of [SimpleIfExpression]\nprivate  iv_test:SimpleExpression :\u003d (undefined)\nprivate  iv_thn:SimpleExpression :\u003d (undefined)\nprivate  iv_elif:seq of (SimpleElseIfExpression) :\u003d (undefined)\nprivate  iv_ese:SimpleExpression :\u003d (undefined)\npublic  SimpleIfExpressionImpl(SimpleExpression, SimpleExpression, seq of (SimpleElseIfExpression), SimpleExpression) (SimpleExpression * SimpleExpression * seq of (SimpleElseIfExpression) * SimpleExpression \u003d\u003d\u003e SimpleIfExpressionImpl)\n\tSimpleIfExpressionImpl(SimpleExpression, SimpleExpression, seq of (SimpleElseIfExpression), SimpleExpression)(p_test, p_thn, p_elif, p_ese) \u003d\u003d\n(\n\niv_test :\u003d p_test;\niv_thn :\u003d p_thn;\niv_elif :\u003d p_elif;\niv_ese :\u003d p_ese\n)\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nreturn (iv_test)\npublic  getThn() (() \u003d\u003d\u003e SimpleExpression)\n\tgetThn()() \u003d\u003d\nreturn (iv_thn)\npublic  getElif() (() \u003d\u003d\u003e seq of (SimpleElseIfExpression))\n\tgetElif()() \u003d\u003d\nreturn (iv_elif)\npublic  getEse() (() \u003d\u003d\u003e SimpleExpression)\n\tgetEse()() \u003d\u003d\nreturn (iv_ese)\nend SimpleIfExpressionImpl\n","class SimpleIntegerLiteralExpressionImpl is subclass of [SimpleIntegerLiteralExpression]\nprivate  iv_value:int :\u003d (undefined)\npublic  SimpleIntegerLiteralExpressionImpl(int) (int \u003d\u003d\u003e SimpleIntegerLiteralExpressionImpl)\n\tSimpleIntegerLiteralExpressionImpl(int)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e int)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend SimpleIntegerLiteralExpressionImpl\n","class SimpleLetExpressionImpl is subclass of [SimpleLetExpression]\nprivate  iv_defs:seq of (SimpleLocalDefinition) :\u003d (undefined)\nprivate  iv_body:SimpleExpression :\u003d (undefined)\npublic  SimpleLetExpressionImpl(seq of (SimpleLocalDefinition), SimpleExpression) (seq of (SimpleLocalDefinition) * SimpleExpression \u003d\u003d\u003e SimpleLetExpressionImpl)\n\tSimpleLetExpressionImpl(seq of (SimpleLocalDefinition), SimpleExpression)(p_defs, p_body) \u003d\u003d\n(\n\niv_defs :\u003d p_defs;\niv_body :\u003d p_body\n)\npublic  getDefs() (() \u003d\u003d\u003e seq of (SimpleLocalDefinition))\n\tgetDefs()() \u003d\u003d\nreturn (iv_defs)\npublic  getBody() (() \u003d\u003d\u003e SimpleExpression)\n\tgetBody()() \u003d\u003d\nreturn (iv_body)\nend SimpleLetExpressionImpl\n","class SimpleLiteralExpressionImpl is subclass of [SimpleExpressionImpl]\nend SimpleLiteralExpressionImpl\n","class SimpleLocalDefinitionImpl is subclass of [SimpleLocalDefinition]\nprivate  iv_name:SimpleIdentifier :\u003d (undefined)\nprivate  iv_value:SimpleExpression :\u003d (undefined)\npublic  SimpleLocalDefinitionImpl(SimpleIdentifier, SimpleExpression) (SimpleIdentifier * SimpleExpression \u003d\u003d\u003e SimpleLocalDefinitionImpl)\n\tSimpleLocalDefinitionImpl(SimpleIdentifier, SimpleExpression)(p_name, p_value) \u003d\u003d\n(\n\niv_name :\u003d p_name;\niv_value :\u003d p_value\n)\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getValue() (() \u003d\u003d\u003e SimpleExpression)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend SimpleLocalDefinitionImpl\n","class SimpleNodeImpl\nend SimpleNodeImpl\n","class SimpleParameterImpl is subclass of [SimpleParameter]\nprivate  iv_name:SimpleIdentifier :\u003d (undefined)\nprivate  iv_type:SimpleType :\u003d (undefined)\npublic  SimpleParameterImpl(SimpleIdentifier, SimpleType) (SimpleIdentifier * SimpleType \u003d\u003d\u003e SimpleParameterImpl)\n\tSimpleParameterImpl(SimpleIdentifier, SimpleType)(p_name, p_type) \u003d\u003d\n(\n\niv_name :\u003d p_name;\niv_type :\u003d p_type\n)\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getType() (() \u003d\u003d\u003e SimpleType)\n\tgetType()() \u003d\u003d\nreturn (iv_type)\nend SimpleParameterImpl\n","class SimpleRealLiteralExpressionImpl is subclass of [SimpleRealLiteralExpression]\nprivate  iv_value:real :\u003d (undefined)\npublic  SimpleRealLiteralExpressionImpl(real) (real \u003d\u003d\u003e SimpleRealLiteralExpressionImpl)\n\tSimpleRealLiteralExpressionImpl(real)(p_value) \u003d\u003d\n(\n\niv_value :\u003d p_value\n)\npublic  getValue() (() \u003d\u003d\u003e real)\n\tgetValue()() \u003d\u003d\nreturn (iv_value)\nend SimpleRealLiteralExpressionImpl\n","class SimpleSpecificationImpl is subclass of [SimpleSpecification]\nprivate  iv_defs:seq of (SimpleDefinition) :\u003d (undefined)\npublic  SimpleSpecificationImpl(seq of (SimpleDefinition)) (seq of (SimpleDefinition) \u003d\u003d\u003e SimpleSpecificationImpl)\n\tSimpleSpecificationImpl(seq of (SimpleDefinition))(p_defs) \u003d\u003d\n(\n\niv_defs :\u003d p_defs\n)\npublic  getDefs() (() \u003d\u003d\u003e seq of (SimpleDefinition))\n\tgetDefs()() \u003d\u003d\nreturn (iv_defs)\nend SimpleSpecificationImpl\n","class SimpleTypeDefinitionImpl is subclass of [SimpleTypeDefinition]\nprivate  iv_name:SimpleIdentifier :\u003d (undefined)\nprivate  iv_type:SimpleType :\u003d (undefined)\npublic  SimpleTypeDefinitionImpl(SimpleIdentifier, SimpleType) (SimpleIdentifier * SimpleType \u003d\u003d\u003e SimpleTypeDefinitionImpl)\n\tSimpleTypeDefinitionImpl(SimpleIdentifier, SimpleType)(p_name, p_type) \u003d\u003d\n(\n\niv_name :\u003d p_name;\niv_type :\u003d p_type\n)\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\npublic  getType() (() \u003d\u003d\u003e SimpleType)\n\tgetType()() \u003d\u003d\nreturn (iv_type)\nend SimpleTypeDefinitionImpl\n","class SimpleTypeImpl is subclass of [SimpleNodeImpl]\nend SimpleTypeImpl\n","class SimpleUnaryExpressionImpl is subclass of [SimpleUnaryExpression]\nprivate  iv_op:SimpleUnaryOperator :\u003d (undefined)\nprivate  iv_exp:SimpleExpression :\u003d (undefined)\npublic  SimpleUnaryExpressionImpl(SimpleUnaryOperator, SimpleExpression) (SimpleUnaryOperator * SimpleExpression \u003d\u003d\u003e SimpleUnaryExpressionImpl)\n\tSimpleUnaryExpressionImpl(SimpleUnaryOperator, SimpleExpression)(p_op, p_exp) \u003d\u003d\n(\n\niv_op :\u003d p_op;\niv_exp :\u003d p_exp\n)\npublic  getOp() (() \u003d\u003d\u003e SimpleUnaryOperator)\n\tgetOp()() \u003d\u003d\nreturn (iv_op)\npublic  getExp() (() \u003d\u003d\u003e SimpleExpression)\n\tgetExp()() \u003d\u003d\nreturn (iv_exp)\nend SimpleUnaryExpressionImpl\n","class SimpleUnaryOperatorImpl is subclass of [SimpleUnaryOperator]\nend SimpleUnaryOperatorImpl\n","class SimpleVariableExpressionImpl is subclass of [SimpleVariableExpression]\nprivate  iv_name:SimpleIdentifier :\u003d (undefined)\npublic  SimpleVariableExpressionImpl(SimpleIdentifier) (SimpleIdentifier \u003d\u003d\u003e SimpleVariableExpressionImpl)\n\tSimpleVariableExpressionImpl(SimpleIdentifier)(p_name) \u003d\u003d\n(\n\niv_name :\u003d p_name\n)\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nreturn (iv_name)\nend SimpleVariableExpressionImpl\n","class SimpleApplyExpression is subclass of [SimpleExpression]\npublic  getFunc() (() \u003d\u003d\u003e SimpleExpression)\n\tgetFunc()() \u003d\u003d\nis subclass responsibility\npublic  getArgs() (() \u003d\u003d\u003e seq of (SimpleExpression))\n\tgetArgs()() \u003d\u003d\nis subclass responsibility\nend SimpleApplyExpression\n","class SimpleBasicType is subclass of [SimpleType]\npublic static  BOOL:SimpleBasicType \u003d new SimpleBasicType(\"BOOL\")\npublic static  INT:SimpleBasicType \u003d new SimpleBasicType(\"INT\")\npublic static  NAT:SimpleBasicType \u003d new SimpleBasicType(\"NAT\")\npublic static  REAL:SimpleBasicType \u003d new SimpleBasicType(\"REAL\")\npublic  name:[seq of (char)] :\u003d nil\npublic  SimpleBasicType(seq of (char)) (seq of (char) \u003d\u003d\u003e SimpleBasicType)\n\tSimpleBasicType(seq of (char))(n) \u003d\u003d\nname :\u003d n\nend SimpleBasicType\n","class SimpleBinaryExpression is subclass of [SimpleExpression]\npublic  getLhs() (() \u003d\u003d\u003e SimpleExpression)\n\tgetLhs()() \u003d\u003d\nis subclass responsibility\npublic  getOp() (() \u003d\u003d\u003e SimpleBinaryOperator)\n\tgetOp()() \u003d\u003d\nis subclass responsibility\npublic  getRhs() (() \u003d\u003d\u003e SimpleExpression)\n\tgetRhs()() \u003d\u003d\nis subclass responsibility\nend SimpleBinaryExpression\n","class SimpleBinaryOperator is subclass of [SimpleNode]\npublic static  AND:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"AND\")\npublic static  DIV:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"DIV\")\npublic static  DIVIDE:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"DIVIDE\")\npublic static  EQUALS:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"EQUALS\")\npublic static  EQUIVALENT:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"EQUIVALENT\")\npublic static  GE:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"GE\")\npublic static  GT:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"GT\")\npublic static  IMPLIES:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"IMPLIES\")\npublic static  LE:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"LE\")\npublic static  LT:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"LT\")\npublic static  MINUS:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"MINUS\")\npublic static  MOD:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"MOD\")\npublic static  NE:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"NE\")\npublic static  OR:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"OR\")\npublic static  PLUS:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"PLUS\")\npublic static  REM:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"REM\")\npublic static  TIMES:SimpleBinaryOperator \u003d new SimpleBinaryOperator(\"TIMES\")\npublic  name:[seq of (char)] :\u003d nil\npublic  SimpleBinaryOperator(seq of (char)) (seq of (char) \u003d\u003d\u003e SimpleBinaryOperator)\n\tSimpleBinaryOperator(seq of (char))(n) \u003d\u003d\nname :\u003d n\nend SimpleBinaryOperator\n","class SimpleBooleanLiteralExpression is subclass of [SimpleLiteralExpression]\npublic  getValue() (() \u003d\u003d\u003e bool)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend SimpleBooleanLiteralExpression\n","class SimpleCaseAlternative is subclass of [SimpleNode]\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getExp() (() \u003d\u003d\u003e SimpleExpression)\n\tgetExp()() \u003d\u003d\nis subclass responsibility\nend SimpleCaseAlternative\n","class SimpleCasesExpression is subclass of [SimpleExpression]\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getAlts() (() \u003d\u003d\u003e seq of (SimpleCaseAlternative))\n\tgetAlts()() \u003d\u003d\nis subclass responsibility\npublic  hasDeflt() (() \u003d\u003d\u003e bool)\n\thasDeflt()() \u003d\u003d\nis subclass responsibility\npublic  getDeflt() (() \u003d\u003d\u003e SimpleExpression)\n\tgetDeflt()() \u003d\u003d\nis subclass responsibility\nend SimpleCasesExpression\n","class SimpleDefinition is subclass of [SimpleNode]\nend SimpleDefinition\n","class SimpleElseIfExpression is subclass of [SimpleNode]\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getThn() (() \u003d\u003d\u003e SimpleExpression)\n\tgetThn()() \u003d\u003d\nis subclass responsibility\nend SimpleElseIfExpression\n","class SimpleExpression is subclass of [SimpleNode]\nend SimpleExpression\n","class SimpleFunctionDefinition is subclass of [SimpleDefinition]\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getParams() (() \u003d\u003d\u003e seq of (SimpleParameter))\n\tgetParams()() \u003d\u003d\nis subclass responsibility\npublic  getBody() (() \u003d\u003d\u003e SimpleExpression)\n\tgetBody()() \u003d\u003d\nis subclass responsibility\nend SimpleFunctionDefinition\n","class SimpleIdentifier is subclass of [SimpleType]\npublic  getName() (() \u003d\u003d\u003e seq of (char))\n\tgetName()() \u003d\u003d\nis subclass responsibility\nend SimpleIdentifier\n","class SimpleIfExpression is subclass of [SimpleExpression]\npublic  getTest() (() \u003d\u003d\u003e SimpleExpression)\n\tgetTest()() \u003d\u003d\nis subclass responsibility\npublic  getThn() (() \u003d\u003d\u003e SimpleExpression)\n\tgetThn()() \u003d\u003d\nis subclass responsibility\npublic  getElif() (() \u003d\u003d\u003e seq of (SimpleElseIfExpression))\n\tgetElif()() \u003d\u003d\nis subclass responsibility\npublic  getEse() (() \u003d\u003d\u003e SimpleExpression)\n\tgetEse()() \u003d\u003d\nis subclass responsibility\nend SimpleIfExpression\n","class SimpleIntegerLiteralExpression is subclass of [SimpleLiteralExpression]\npublic  getValue() (() \u003d\u003d\u003e int)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend SimpleIntegerLiteralExpression\n","class SimpleLetExpression is subclass of [SimpleExpression]\npublic  getDefs() (() \u003d\u003d\u003e seq of (SimpleLocalDefinition))\n\tgetDefs()() \u003d\u003d\nis subclass responsibility\npublic  getBody() (() \u003d\u003d\u003e SimpleExpression)\n\tgetBody()() \u003d\u003d\nis subclass responsibility\nend SimpleLetExpression\n","class SimpleLiteralExpression is subclass of [SimpleExpression]\nend SimpleLiteralExpression\n","class SimpleLocalDefinition is subclass of [SimpleNode]\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getValue() (() \u003d\u003d\u003e SimpleExpression)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend SimpleLocalDefinition\n","class SimpleNode\nend SimpleNode\n","class SimpleParameter is subclass of [SimpleNode]\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getType() (() \u003d\u003d\u003e SimpleType)\n\tgetType()() \u003d\u003d\nis subclass responsibility\nend SimpleParameter\n","class SimpleRealLiteralExpression is subclass of [SimpleLiteralExpression]\npublic  getValue() (() \u003d\u003d\u003e real)\n\tgetValue()() \u003d\u003d\nis subclass responsibility\nend SimpleRealLiteralExpression\n","class SimpleSpecification is subclass of [SimpleNode]\npublic  getDefs() (() \u003d\u003d\u003e seq of (SimpleDefinition))\n\tgetDefs()() \u003d\u003d\nis subclass responsibility\nend SimpleSpecification\n","class SimpleType is subclass of [SimpleNode]\nend SimpleType\n","class SimpleTypeDefinition is subclass of [SimpleDefinition]\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\npublic  getType() (() \u003d\u003d\u003e SimpleType)\n\tgetType()() \u003d\u003d\nis subclass responsibility\nend SimpleTypeDefinition\n","class SimpleUnaryExpression is subclass of [SimpleExpression]\npublic  getOp() (() \u003d\u003d\u003e SimpleUnaryOperator)\n\tgetOp()() \u003d\u003d\nis subclass responsibility\npublic  getExp() (() \u003d\u003d\u003e SimpleExpression)\n\tgetExp()() \u003d\u003d\nis subclass responsibility\nend SimpleUnaryExpression\n","class SimpleUnaryOperator is subclass of [SimpleNode]\npublic static  MINUS:SimpleUnaryOperator \u003d new SimpleUnaryOperator(\"MINUS\")\npublic static  NOT:SimpleUnaryOperator \u003d new SimpleUnaryOperator(\"NOT\")\npublic static  PLUS:SimpleUnaryOperator \u003d new SimpleUnaryOperator(\"PLUS\")\npublic  name:[seq of (char)] :\u003d nil\npublic  SimpleUnaryOperator(seq of (char)) (seq of (char) \u003d\u003d\u003e SimpleUnaryOperator)\n\tSimpleUnaryOperator(seq of (char))(n) \u003d\u003d\nname :\u003d n\nend SimpleUnaryOperator\n","class SimpleVariableExpression is subclass of [SimpleExpression]\npublic  getName() (() \u003d\u003d\u003e SimpleIdentifier)\n\tgetName()() \u003d\u003d\nis subclass responsibility\nend SimpleVariableExpression\n","class Codegen\npublic  Generate(GiraffeSpecification) (GiraffeSpecification \u003d\u003d\u003e seq of (char))\n\tGenerate(GiraffeSpecification)(spec) \u003d\u003d\nlet clazz:GiraffeClassDefinition \u003d (spec.getClazz)(), genClasses:seq of (char) \u003d Generate(clazz) in return ((conc [\"public class \", genClasses]))\npublic  Generate(GiraffeClassDefinition) (GiraffeClassDefinition \u003d\u003d\u003e seq of (char))\n\tGenerate(GiraffeClassDefinition)(classDef) \u003d\u003d\nlet methods:set of (GiraffeMethodDefinition) \u003d (classDef.getMethods)(), mlist:seq of (GiraffeMethodDefinition) \u003d (VDMUtil`set2seq)[GiraffeMethodDefinition](methods), genMethods:seq of (char) \u003d (conc [Generate(mlist(i)) | i in set (inds mlist)]) in return ((conc [((classDef.getName)().getName)(), \" { \", genMethods]))\npublic  Generate(GiraffeMethodDefinition) (GiraffeMethodDefinition \u003d\u003d\u003e seq of (char))\n\tGenerate(GiraffeMethodDefinition)(method) \u003d\u003d\nlet params:seq of (GiraffeParameter) \u003d (method.getParameters)(), genParams:seq of (char) \u003d (conc tail((conc [[\", \", Generate(params(i))] | i in set (inds params)]))), body:seq of (GiraffeStatement) \u003d (method.getBody)(), genBody:seq of (char) \u003d (conc (conc [[Generate(body(i)), \";\"] | i in set (inds body)])) in return ((conc [\"public static \", Generate((method.getType)()), \" \", Generate((method.getName)()), \"(\", genParams, \")\", \"{\", genBody, \"}\"]))\npublic  Generate(GiraffeParameter) (GiraffeParameter \u003d\u003d\u003e seq of (char))\n\tGenerate(GiraffeParameter)(param) \u003d\u003d\nreturn ((conc [Generate((param.getType)()), \" \", ((param.getName)().getName)()]))\npublic  Generate(GiraffeType) (GiraffeType \u003d\u003d\u003e seq of (char))\n\tGenerate(GiraffeType)(type) \u003d\u003d\nif isofclass(GiraffeIdentifier,type)\nthen\nlet i:GiraffeIdentifier \u003d type in return ((i.getName)())else\nlet t:GiraffeBasicType \u003d type in cases (t.name) :\n  \"INT\" -\u003e return (\"int\")  \"DOUBLE\" -\u003e return (\"double\")  \"BOOL\" -\u003e return (\"boolean\")  others -\u003e error end\npublic  Generate(GiraffeStatement) (GiraffeStatement \u003d\u003d\u003e seq of (char))\n\tGenerate(GiraffeStatement)(stm) \u003d\u003d\ncases true :\n  (isofclass(GiraffeVariableDeclStatement,stm)) -\u003e let s:GiraffeVariableDeclStatement \u003d stm in return ((conc [Generate((s.getType)()), \" \", Generate((s.getName)()), \" \u003d \", GenerateExpression((s.getValue)())]))  (isofclass(GiraffeReturnStatement,stm)) -\u003e let s:GiraffeReturnStatement \u003d stm in return ((conc [\"return \", GenerateExpression((s.getValue)())]))  others -\u003e error end\npublic  GenerateExpression(GiraffeExpression) (GiraffeExpression \u003d\u003d\u003e seq of (char))\n\tGenerateExpression(GiraffeExpression)(exp) \u003d\u003d\ncases true :\n  (isofclass(GiraffeIntegerLiteralExpression,exp)) -\u003e let e:GiraffeIntegerLiteralExpression \u003d exp in return ((new codegen_Util().iToS)((e.getValue)()))  (isofclass(GiraffeVariableExpression,exp)) -\u003e let e:GiraffeVariableExpression \u003d exp in return (((e.getName)().getName)())  (isofclass(GiraffeBinaryExpression,exp)) -\u003e let e:GiraffeBinaryExpression \u003d exp in return (GenerateBinaryExpression(e))  (isofclass(GiraffeIfExpression,exp)) -\u003e let e:GiraffeIfExpression \u003d exp in return (((((((\" ( (\" ^ GenerateExpression((e.getTest)())) ^ \") ? (\") ^ GenerateExpression((e.getThn)())) ^ \") : (\") ^ GenerateExpression((e.getEls)())) ^ \") ) \"))  others -\u003e error end\npublic  GenerateBinaryExpression(GiraffeBinaryExpression) (GiraffeBinaryExpression \u003d\u003d\u003e seq of (char))\n\tGenerateBinaryExpression(GiraffeBinaryExpression)(binexp) \u003d\u003d\nlet op:GiraffeBinaryOperator \u003d (binexp.getOp)(), lhs:GiraffeExpression \u003d (binexp.getLhs)(), rhs:GiraffeExpression \u003d (binexp.getRhs)() in cases (op.name) :\n  (\"EQUALS\") -\u003e return (((((\" ( \" ^ GenerateExpression(lhs)) ^ \" \u003d\u003d \") ^ GenerateExpression(rhs)) ^ \" ) \"))  (\"PLUS\") -\u003e return (((((\" ( \" ^ GenerateExpression(lhs)) ^ \" + \") ^ GenerateExpression(rhs)) ^ \" ) \"))  others -\u003e error end\npublic  public tail: (seq of (seq of (char)) -\u003e seq of (seq of (char)))\n\ttail(x) \u003d\u003d\n(if (x \u003d [])\nthen []\nelse (tl x))\nend Codegen\n","class Compiler\nprivate static  util:codegen_Util \u003d new codegen_Util()\nprivate  typeDefs:seq of (SimpleTypeDefinition) :\u003d []\nprivate  context:map (seq of (char)) to (seq of (char)) :\u003d {|-\u003e}\nprivate  inv((card (dom context)) \u003d (card (rng context)))\nprivate  varDecls:seq of (GiraffeVariableDeclStatement) :\u003d []\nprivate  uid:nat1 :\u003d 1\nprivate  getUniqeName() (() \u003d\u003d\u003e seq of (char))\n\tgetUniqeName()() \u003d\u003d\nlet res:nat1 \u003d uid in (\n\nuid :\u003d (uid + 1);\nreturn ((\"v\" ^ (util.iToS)(res)))\n)\n\tpost (RESULT not in set (rng context))\nprivate  getUniqeSimpleName() (() \u003d\u003d\u003e seq of (char))\n\tgetUniqeSimpleName()() \u003d\u003d\n(\n\nwhile true do (\n\nlet name:seq of (char) \u003d getUniqeName() in if (name not in set (dom context))\nthen\nreturn (name)\n);\nreturn (\"\")\n)\n\tpost (RESULT not in set (dom context))\npublic  Compile(seq of (char), SimpleSpecification) (seq of (char) * SimpleSpecification \u003d\u003d\u003e GiraffeSpecification)\n\tCompile(seq of (char), SimpleSpecification)(programName, spec) \u003d\u003d\nlet name:GiraffeIdentifier \u003d new GiraffeIdentifierImpl(programName), defs:seq of (SimpleDefinition) \u003d (spec.getDefs)(), functionz:set of (GiraffeMethodDefinition) \u003d {Compile(defs(i)) | i in set (inds defs) \u0026 isofclass(SimpleFunctionDefinition,defs(i))}, classDef:GiraffeClassDefinition \u003d new GiraffeClassDefinitionImpl(name, functionz) in (\n\ntypeDefs :\u003d [defs(i) | i in set (inds defs) \u0026 isofclass(SimpleTypeDefinition,defs(i))];\nreturn (new GiraffeSpecificationImpl(classDef))\n)\n\tpre (((len programName) \u003e 0) and (programName(1) not in set {\u00270\u0027, \u00271\u0027, \u00272\u0027, \u00273\u0027, \u00274\u0027, \u00275\u0027, \u00276\u0027, \u00277\u0027, \u00278\u0027, \u00279\u0027}))\npublic  Compile(SimpleFunctionDefinition) (SimpleFunctionDefinition \u003d\u003d\u003e GiraffeMethodDefinition)\n\tCompile(SimpleFunctionDefinition)(func) \u003d\u003d\nlet name:GiraffeIdentifier \u003d new GiraffeIdentifierImpl(((func.getName)().getName)()), defs:seq of (SimpleParameter) \u003d (func.getParams)(), params:seq of (GiraffeParameter) \u003d [Compile(defs(i)) | i in set (inds defs)], type:GiraffeType \u003d Compile(GetType((func.getBody)())), body:seq of (GiraffeStatement) \u003d (varDecls ^ [new GiraffeReturnStatementImpl(Compile((func.getBody)()))]) in (\n\nvarDecls :\u003d [];\nreturn (new GiraffeMethodDefinitionImpl(name, params, type, body))\n)\n\tpre ((varDecls \u003d []) and (context \u003d {|-\u003e}))\n\tpost ((varDecls \u003d []) and (context \u003d {|-\u003e}))\npublic  Compile(SimpleParameter) (SimpleParameter \u003d\u003d\u003e GiraffeParameter)\n\tCompile(SimpleParameter)(param) \u003d\u003d\nlet name:GiraffeIdentifier \u003d new GiraffeIdentifierImpl(((param.getName)().getName)()), type:GiraffeType \u003d Compile((param.getType)()) in return (new GiraffeParameterImpl(type, name))\npublic  Compile(SimpleType) (SimpleType \u003d\u003d\u003e [GiraffeType])\n\tCompile(SimpleType)(type) \u003d\u003d\nif isofclass(SimpleIdentifier,type)\nthen\nlet t:SimpleIdentifier \u003d type in return (Compile(GetBasicType(t)))else\nlet t:SimpleBasicType \u003d type in cases (t.name) :\n  \"INT\" -\u003e return (GiraffeBasicType`INT)  others -\u003e return (nil) end\n\tpost (RESULT \u003c\u003e nil)\npublic  Compile(SimpleExpression) (SimpleExpression \u003d\u003d\u003e [GiraffeExpression])\n\tCompile(SimpleExpression)(exp) \u003d\u003d\ncases true :\n  (isofclass(SimpleIntegerLiteralExpression,exp)) -\u003e let e:SimpleIntegerLiteralExpression \u003d exp in return (new GiraffeIntegerLiteralExpressionImpl((e.getValue)()))  (isofclass(SimpleBinaryExpression,exp)) -\u003e let e:SimpleBinaryExpression \u003d exp in return (Compile((e.getOp)(), (e.getLhs)(), (e.getRhs)()))  (isofclass(SimpleCasesExpression,exp)) -\u003e let e:SimpleCasesExpression \u003d exp in return (CompileCases(e))  (isofclass(SimpleVariableExpression,exp)) -\u003e let e:SimpleVariableExpression \u003d exp, name:SimpleIdentifier \u003d (e.getName)() in return (new GiraffeVariableExpressionImpl(new GiraffeIdentifierImpl(context((name.getName)()))))  (isofclass(SimpleLetExpression,exp)) -\u003e let e:SimpleLetExpression \u003d exp in return (CompileLet(e))  (isofclass(SimpleIfExpression,exp)) -\u003e let e:SimpleIfExpression \u003d exp in return (CompileIf(e))  others -\u003e return (nil) end\n\tpost (RESULT \u003c\u003e nil)\npublic  CompileCases(SimpleCasesExpression) (SimpleCasesExpression \u003d\u003d\u003e GiraffeExpression)\n\tCompileCases(SimpleCasesExpression)(e) \u003d\u003d\nlet testVarName:SimpleIdentifier \u003d new SimpleIdentifierImpl(getUniqeSimpleName()), testVar:SimpleVariableExpression \u003d new SimpleVariableExpressionImpl(testVarName), testVarAss:SimpleLocalDefinition \u003d new SimpleLocalDefinitionImpl(testVarName, (e.getTest)()), letBody:SimpleExpression \u003d (if ((e.getAlts)() \u003d [])\nthen (e.getDeflt)()\nelse let first:SimpleCaseAlternative \u003d (hd (e.getAlts)()), ifTest:SimpleBinaryExpression \u003d new SimpleBinaryExpressionImpl(testVar, SimpleBinaryOperator`EQUALS, (first.getTest)()), rest:seq of (SimpleCaseAlternative) \u003d (tl (e.getAlts)()), elsIfs:seq of (SimpleElseIfExpression) \u003d [new SimpleElseIfExpressionImpl(new SimpleBinaryExpressionImpl(testVar, SimpleBinaryOperator`EQUALS, (rest(i).getTest)()), (rest(i).getExp)()) | i in set (inds rest)] in new SimpleIfExpressionImpl(ifTest, (first.getExp)(), elsIfs, (e.getDeflt)())) in return (Compile(new SimpleLetExpressionImpl([testVarAss], letBody)))\n\tpre (not (e.hasDeflt)())\npublic  CompileLet(SimpleLetExpression) (SimpleLetExpression \u003d\u003d\u003e GiraffeExpression)\n\tCompileLet(SimpleLetExpression)(letExp) \u003d\u003d\nlet oldContext:map (seq of (char)) to (seq of (char)) \u003d context in (\n\nfor in \u0027Compiler\u0027 (Compiler.vdmpp) at line 129:13xADefPatternBind[x \u003d SimpleLocalDefinition]ADefPatternBind in (letExp.getDefs)() do\nlet name:seq of (char) \u003d ((x.getName)().getName)(), newName:seq of (char) \u003d getUniqeName(), type:SimpleType \u003d GetType((x.getValue)()), gType:GiraffeType \u003d Compile(type), gName:GiraffeIdentifier \u003d new GiraffeIdentifierImpl(newName), gValue:GiraffeExpression \u003d Compile((x.getValue)()), gStm:GiraffeVariableDeclStatement \u003d new GiraffeVariableDeclStatementImpl(gType, gName, gValue) in (\n\ncontext :\u003d (context ++ {name |-\u003e newName});\nvarDecls :\u003d (varDecls ^ [gStm])\n);\nlet body:GiraffeExpression \u003d Compile((letExp.getBody)()) in (\n\ncontext :\u003d oldContext;\nreturn (body)\n)\n)\n\tpre ((letExp.getDefs)() \u003c\u003e [])\npublic  Compile(SimpleBinaryOperator, SimpleExpression, SimpleExpression) (SimpleBinaryOperator * SimpleExpression * SimpleExpression \u003d\u003d\u003e [GiraffeBinaryExpression])\n\tCompile(SimpleBinaryOperator, SimpleExpression, SimpleExpression)(op, lhs, rhs) \u003d\u003d\ncases (op.name) :\n  \"EQUALS\" -\u003e let glhs:GiraffeExpression \u003d Compile(lhs), gop:GiraffeBinaryOperator \u003d GiraffeBinaryOperator`EQUALS, grhs:GiraffeExpression \u003d Compile(rhs) in return (new GiraffeBinaryExpressionImpl(glhs, gop, grhs))  \"PLUS\" -\u003e let glhs:GiraffeExpression \u003d Compile(lhs), gop:GiraffeBinaryOperator \u003d GiraffeBinaryOperator`PLUS, grhs:GiraffeExpression \u003d Compile(rhs) in return (new GiraffeBinaryExpressionImpl(glhs, gop, grhs))  others -\u003e return (nil) end\n\tpost (RESULT \u003c\u003e nil)\npublic  GetType(SimpleExpression) (SimpleExpression \u003d\u003d\u003e SimpleType)\n\tGetType(SimpleExpression)(exp) \u003d\u003d\nreturn (SimpleBasicType`INT)\npublic  GetBasicType(SimpleType) (SimpleType \u003d\u003d\u003e SimpleBasicType)\n\tGetBasicType(SimpleType)(type) \u003d\u003d\nreturn (SimpleBasicType`INT)\npublic  public CompileIf: (SimpleIfExpression -\u003e GiraffeIfExpression)\n\tCompileIf(selif) \u003d\u003d\nlet gTest:GiraffeExpression \u003d Compile((selif.getTest)()), gThen:GiraffeExpression \u003d Compile((selif.getThn)()), gElse:GiraffeExpression \u003d deflatten((selif.getElif)(), (selif.getEse)()) in new GiraffeIfExpressionImpl(gTest, gThen, gElse)\npublic  public deflatten: (seq of (SimpleElseIfExpression) * SimpleExpression -\u003e GiraffeExpression)\n\tdeflatten(elsif, els) \u003d\u003d\n(if (elsif \u003d [])\nthen Compile(els)\nelse let head:SimpleElseIfExpression \u003d (hd elsif), gTest:GiraffeExpression \u003d Compile((head.getTest)()), gThen:GiraffeExpression \u003d Compile((head.getThn)()), gElse:GiraffeExpression \u003d deflatten((tl elsif), els) in new GiraffeIfExpressionImpl(gTest, gThen, gElse))\nend Compiler\n","class returnConstInt\npublic static  returnConstInt:SimpleSpecificationImpl \u003d new SimpleSpecificationImpl([new SimpleFunctionDefinitionImpl(new SimpleIdentifierImpl(\"x\"), [], new SimpleIntegerLiteralExpressionImpl(13))])\nend returnConstInt\n","class VDMUtil\npublic static  public static set2seq[(T)]: (set of (@T) +\u003e seq of (@T))\n\tset2seq(x) \u003d\u003d\nis not yet specified\npublic static  public static get_file_pos: (() +\u003e [(seq of (char) * nat * nat * seq of (char) * seq of (char))])\n\tget_file_pos() \u003d\u003d\nis not yet specified\npublic static  public static val2seq_of_char[(T)]: (@T +\u003e seq of (char))\n\tval2seq_of_char(x) \u003d\u003d\nis not yet specified\npublic static  public static seq_of_char2val[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tseq_of_char2val(s) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\nend VDMUtil\n","class A\npublic  public  f()r:[(seq of (char) * nat * nat * seq of (char) * seq of (char))] \u003d\u003d\n\tVDMUtil`get_file_pos()\nend A\n","class codegen_Util\nprivate  compiler:Compiler :\u003d new Compiler()\nprivate  codegen:Codegen :\u003d new Codegen()\npublic  Run() (() \u003d\u003d\u003e (bool | int | seq of (char)))\n\tRun()() \u003d\u003d\nlet programs:seq of (seq of (char)) \u003d getSimpleNames() in Run(programs)\npublic  Run(seq of (seq of (char))) (seq of (seq of (char)) \u003d\u003d\u003e seq of (char))\n\tRun(seq of (seq of (char)))(programs) \u003d\u003d\nif (programs \u003d [])\nthen\nreturn ([])else\nlet program:seq of (char) \u003d (hd programs), z:SimpleSpecification \u003d parseSimpleProgram(program), a:GiraffeSpecification \u003d (compiler.Compile)(program, z), b:seq of (char) \u003d (codegen.Generate)(a), real_b:seq1 of (char) \u003d (b ^ \" public static void main(String[] argv){ System.exit(x()); }}\"), c:bool \u003d writeProgram(program, real_b), d:bool \u003d compileProgram(program), e:(bool | int) \u003d runProgram(program) in if (e \u003c\u003e 42)\nthen\nreturn (((((\"\nTest \" ^ program) ^ \" failed with code: \") ^ iToS(e)) ^ Run((tl programs))))else\nreturn ((((\"\nTest \" ^ program) ^ \" success\") ^ Run((tl programs))))\npublic  public iToS: (int -\u003e seq of (char))\n\tiToS(i) \u003d\u003d\nis not yet specified\npublic  public showType: (int -\u003e int)\n\tshowType(type) \u003d\u003d\nis not yet specified\npublic  public getSimpleNames: (() -\u003e seq of (seq of (char)))\n\tgetSimpleNames() \u003d\u003d\nis not yet specified\npublic  public parseSimpleProgram: (seq of (char) -\u003e SimpleSpecification)\n\tparseSimpleProgram(filename) \u003d\u003d\nis not yet specified\npublic  public writeProgram: (seq of (char) * seq of (char) -\u003e bool)\n\twriteProgram(fileName, contents) \u003d\u003d\nis not yet specified\npublic  public compileProgram: (seq of (char) -\u003e bool)\n\tcompileProgram(fileName) \u003d\u003d\nis not yet specified\npublic  public runProgram: (seq of (char) -\u003e (bool | int))\n\trunProgram(fileName) \u003d\u003d\nis not yet specified\nend codegen_Util\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]