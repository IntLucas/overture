["class AbPurseFunctional\npublic static  AbPurse \u003d AbPurse\npublic static  PurseId \u003d PurseId\npublic static  AbWorld \u003d AbWorld\n\tinv mk_AbWorld(authentic, abPurses) \u003d\u003d (forall name in set (dom abPurses) \u0026 (name in set authentic))\npublic  public GetBalance: (AbPurse -\u003e nat)\n\tGetBalance(p) \u003d\u003d\n(p.balance)\npublic  public GetLost: (AbPurse -\u003e nat)\n\tGetLost(p) \u003d\u003d\n(p.lost)\npublic  public IncreaseBalance: (AbPurse * nat -\u003e AbPurse)\n\tIncreaseBalance(p, val) \u003d\u003d\nmk_AbPurse(((p.balance) + val), (p.lost))\npublic  public IncreaseLost: (AbPurse * nat -\u003e AbPurse)\n\tIncreaseLost(p, val) \u003d\u003d\nmk_AbPurse((p.balance), ((p.lost) + val))\npublic  public ReduceBalance: (AbPurse * nat -\u003e AbPurse)\n\tReduceBalance(p, val) \u003d\u003d\nmk_AbPurse(((p.balance) - val), (p.lost))\n\tpre ((p.balance) \u003e\u003d val)\npublic  public GetTotal: (AbPurse -\u003e nat)\n\tGetTotal(p) \u003d\u003d\n((p.balance) + (p.lost))\nprivate  private newAbWorld: (map (PurseId) to (AbPurse) * set of (PurseId) -\u003e AbWorld)\n\tnewAbWorld(purses, auth) \u003d\u003d\nmk_AbWorld(auth, purses)\n\tpre ((dom purses) subset auth)\npublic  public TransferOk: (AbWorld * PurseId * PurseId * nat -\u003e AbWorld)\n\tTransferOk(wrld, frm, too, val) \u003d\u003d\nlet newFrm:AbPurse \u003d ReduceBalance((wrld.abPurses)(frm), val), newTo:AbPurse \u003d IncreaseBalance((wrld.abPurses)(too), val) in mk_AbWorld((wrld.authentic), ((wrld.abPurses) ++ {frm |-\u003e newFrm, too |-\u003e newTo}))\n\tpre ((frm \u003c\u003e too) and ((frm in set (dom (wrld.abPurses))) and ((too in set (dom (wrld.abPurses))) and (GetBalance((wrld.abPurses)(frm)) \u003e\u003d val))))\n\tpost (((GetTotal((RESULT.abPurses)(frm)) + GetTotal((RESULT.abPurses)(too))) \u003d (GetTotal((wrld.abPurses)(frm)) + GetTotal((wrld.abPurses)(too)))) and (((GetBalance((RESULT.abPurses)(frm)) + GetBalance((RESULT.abPurses)(too))) \u003d (GetBalance((wrld.abPurses)(frm)) + GetBalance((wrld.abPurses)(too)))) and (forall name in set ((dom (RESULT.abPurses)) \\ {frm, too}) \u0026 ((GetBalance((wrld.abPurses)(name)) \u003d GetBalance((RESULT.abPurses)(name))) and (GetLost((wrld.abPurses)(name)) \u003d GetLost((RESULT.abPurses)(name)))))))\npublic  public TransferLost: (AbWorld * PurseId * PurseId * nat -\u003e AbWorld)\n\tTransferLost(wrld, frm, -, val) \u003d\u003d\nlet newFrm:AbPurse \u003d ReduceBalance((wrld.abPurses)(frm), val) in mk_AbWorld((wrld.authentic), ((wrld.abPurses) ++ {frm |-\u003e IncreaseLost(newFrm, val)}))\n\tpre ((frm in set (dom (wrld.abPurses))) and (GetBalance((wrld.abPurses)(frm)) \u003e\u003d val))\n\tpost ((GetTotal((RESULT.abPurses)(frm)) \u003d GetTotal((wrld.abPurses)(frm))) and ((GetBalance((wrld.abPurses)(frm)) \u003e\u003d GetBalance((RESULT.abPurses)(frm))) and (forall name in set ((dom (RESULT.abPurses)) \\ {frm}) \u0026 ((GetBalance((wrld.abPurses)(name)) \u003d GetBalance((RESULT.abPurses)(name))) and (GetLost((wrld.abPurses)(name)) \u003d GetLost((RESULT.abPurses)(name)))))))\npublic  RunTest() (() \u003d\u003d\u003e AbWorld)\n\tRunTest()() \u003d\u003d\n(\n\nlet w:AbWorld \u003d mk_AbWorld({mk_token(1), mk_token(2)}, {mk_token(1) |-\u003e mk_AbPurse(100, 0), mk_token(2) |-\u003e mk_AbPurse(10, 0)}) in TransferOk(w, mk_token(1), mk_token(2), 30)\n)\nend AbPurseFunctional\n"]