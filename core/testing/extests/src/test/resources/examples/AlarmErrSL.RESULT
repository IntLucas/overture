["Plant \u003d Plant\n\tinv mk_Plant(schedule, alarms) \u003d\u003d (forall a in set alarms \u0026 (forall peri in set (dom schedule) \u0026 QualificationOK(schedule(peri), (a.quali))))","Schedule \u003d Schedule\n\tinv sch \u003d\u003d (forall exs in set (rng sch) \u0026 ((exs \u003c\u003e {}) and (forall ex1, ex2 in set exs \u0026 ((ex1 \u003c\u003e ex2) \u003d\u003e ((ex1.expertid) \u003c\u003e (ex2.expertid))))))","Period \u003d Period","Expert \u003d Expert\n\tinv ex \u003d\u003d ((ex.quali) \u003c\u003e {})","ExpertId \u003d ExpertId","Qualification \u003d Qualification","Alarm \u003d Alarm","private static NumberOfExperts: (Period * Plant -\u003e nat)\n\tNumberOfExperts(peri, plant) \u003d\u003d\n(card (plant.schedule)(peri))\n\tpre (peri in set (dom (plant.schedule)))","private static ExpertIsOnDuty: (Expert * Plant -\u003e set of (Period))\n\tExpertIsOnDuty(ex, mk_Plant(sch, -)) \u003d\u003d\n{peri | peri in set (dom sch) \u0026 (ex in set sch(peri))}","private static  ExpertToPage((a:Alarm), (peri:Period), (plant:Plant))r:Expert\n\tpre ((peri in set (dom (plant.schedule))) and (a in set (plant.alarms)))\n\tpost ((r in set (plant.schedule)(peri)) and ((a.quali) in set (r.quali)))","private static QualificationOK: (set of (Expert) * Qualification -\u003e bool)\n\tQualificationOK(exs, reqquali) \u003d\u003d\n(exists ex in set exs \u0026 (reqquali in set (ex.quali)))","private static ChangeExpert: (Plant * Expert * Expert * Period -\u003e Plant)\n\tChangeExpert(mk_Plant(plan, alarms), ex1, ex2, peri) \u003d\u003d\nmk_Plant((plan ++ {peri |-\u003e ((plan(peri) \\ {ex1}) union {ex2})}), alarms)","p1:Period \u003d mk_token(\"Monday day\")","p2:Period \u003d mk_token(\"Monday night\")","p3:Period \u003d mk_token(\"Tuesday day\")","p4:Period \u003d mk_token(\"Tuesday night\")","p5:Period \u003d mk_token(\"Wednesday day\")","ps:set of (Period) \u003d {p1, p2, p3, p4, p5}","eid1:ExpertId \u003d mk_token(134)","eid2:ExpertId \u003d mk_token(145)","eid3:ExpertId \u003d mk_token(154)","eid4:ExpertId \u003d mk_token(165)","eid5:ExpertId \u003d mk_token(169)","eid6:ExpertId \u003d mk_token(174)","eid7:ExpertId \u003d mk_token(181)","eid8:ExpertId \u003d mk_token(190)","e1:Expert \u003d mk_Expert(eid1, {\u003cElec\u003e})","e2:Expert \u003d mk_Expert(eid2, {\u003cMech\u003e, \u003cChem\u003e})","e3:Expert \u003d mk_Expert(eid3, {\u003cBio\u003e, \u003cChem\u003e, \u003cElec\u003e})","e4:Expert \u003d mk_Expert(eid4, {\u003cBio\u003e})","e5:Expert \u003d mk_Expert(eid5, {\u003cChem\u003e, \u003cBio\u003e})","e6:Expert \u003d mk_Expert(eid6, {\u003cElec\u003e, \u003cChem\u003e, \u003cBio\u003e, \u003cMech\u003e})","e7:Expert \u003d mk_Expert(eid7, {\u003cElec\u003e, \u003cMech\u003e})","e8:Expert \u003d mk_Expert(eid8, {\u003cMech\u003e, \u003cBio\u003e})","exs:set of (Expert) \u003d {e1, e2, e3, e4, e5, e6, e7, e8}","s:map (Period) to (set of (Expert)) \u003d {p1 |-\u003e {e7, e5, e1}, p2 |-\u003e {e6}, p3 |-\u003e {e1, e3, e8}, p4 |-\u003e {e6}}","a1:Alarm \u003d mk_Alarm(\"Power supply missing\", \u003cElec\u003e)","a2:Alarm \u003d mk_Alarm(\"Tank overflow\", \u003cMech\u003e)","a3:Alarm \u003d mk_Alarm(\"CO2 detected\", \u003cChem\u003e)","a4:Alarm \u003d mk_Alarm(\"Biological attack\", \u003cBio\u003e)","alarms:set of (Alarm) \u003d {a1, a2, a3, a4}","plant1:Plant \u003d mk_Plant(s, {a1, a2, a3})","Run (Expert \u003d\u003d\u003e set of (Period))\n\tRun(e) \u003d\u003d\nreturn (ExpertIsOnDuty(e, plant1))","[Test1][[a in set alarmsALetBeStBindingTraceDefinitionp in set psALetBeStBindingTraceDefinition([[NumberOfExperts(p, plant1){1,1}], [pre_ExpertToPage(a, p, plant1){1,1}], [ex in set exsALetBeStBindingTraceDefinitionpost_ExpertToPage(a, p, plant1, ex){1,1}def ex in set exs]]){1,1}def p in set psdef a in set alarms]]","[Test2][[ex in set exsALetBeStBindingTraceDefinitionExpertIsOnDuty(ex, plant1){1,1}def ex in set exs]]"]