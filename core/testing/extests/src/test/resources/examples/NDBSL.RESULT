["Word_Length:nat1 \u003d 32","Maximum_Number_Size:int \u003d ((2 ** Word_Length) - 1)","Maximum_Number_Size_plus_1:int \u003d (Maximum_Number_Size + 1)","Maximum_Number_Size_plus_1_div_2:int \u003d (Maximum_Number_Size_plus_1 div 2)","Maximum_No_of_Message_blocks:nat1 \u003d 1000000","A:nat1 \u003d ((((2 * (2 ** 24)) + (4 * (2 ** 16))) + (8 * (2 ** 8))) + 1)","B:nat1 \u003d ((((0 * (2 ** 24)) + (128 * (2 ** 16))) + (64 * (2 ** 8))) + 33)","C:nat1 \u003d ((((191 * (2 ** 24)) + (239 * (2 ** 16))) + (127 * (2 ** 8))) + 223)","D:nat1 \u003d ((((125 * (2 ** 24)) + (254 * (2 ** 16))) + (251 * (2 ** 8))) + 255)","Maximum_No_of_blocks_for_MAC:int \u003d (1024 div 4)","Maximum_No_of_blocks_for_MAC_plus_1:int \u003d (Maximum_No_of_blocks_for_MAC + 1)","Number \u003d Number\n\tinv N \u003d\u003d (N \u003c Maximum_Number_Size_plus_1)","Bit \u003d Bit\n\tinv b \u003d\u003d (b in set {0, 1})","Message_in_bits \u003d Message_in_bits\n\tinv M \u003d\u003d (if (((len M) mod Word_Length) \u003d 0)\nthen ((((len M) div Word_Length) \u003c\u003d Maximum_No_of_Message_blocks) and ((len M) \u003e 0))\nelse ((((len M) div Word_Length) + 1) \u003c\u003d Maximum_No_of_Message_blocks))","Message_in_blocks_plus_empty_Message \u003d Message_in_blocks_plus_empty_Message\n\tinv M \u003d\u003d ((len M) \u003c\u003d Maximum_No_of_Message_blocks)","Message_in_blocks \u003d Message_in_blocks\n\tinv M \u003d\u003d (1 \u003c\u003d (len M))","Double_Number \u003d Double_Number\n\tinv d \u003d\u003d ((len d) \u003d 2)","Key \u003d Key","Key_Constant \u003d Key_Constant","private Pad_out_Message: (Message_in_bits -\u003e Message_in_bits)\n\tPad_out_Message(M) \u003d\u003d\nlet No_Extra_bits:int \u003d (Word_Length - ((len M) mod Word_Length)) in (if (No_Extra_bits \u003d Word_Length)\nthen M\nelse (M ^ Get_Application_defined_bits(M, No_Extra_bits)))","private  Get_Application_defined_bits((M:Message_in_bits), (No_bits:nat))Extra:Message_in_bits\n\tpre (No_bits \u003c Word_Length)\n\tpost ((len Extra) \u003d No_bits)","private Form_Message_into_blocks: (Message_in_bits -\u003e Message_in_blocks)\n\tForm_Message_into_blocks(M) \u003d\u003d\n(if ((len M) \u003d Word_Length)\nthen [Form_Number(M)]\nelse ([Form_Number(Get_head_in_bits(M, Word_Length))] ^ Form_Message_into_blocks(Get_tail_in_bits(M, Word_Length))))\n\tpre (((len M) \u003e\u003d Word_Length) and (((len M) mod Word_Length) \u003d 0))","private Form_Number: (Message_in_bits -\u003e Number)\n\tForm_Number(M) \u003d\u003d\n(if ((len M) \u003d 1)\nthen (hd M)\nelse ((hd M) + (2 * Form_Number((tl M)))))\n\tpre ((len M) \u003c\u003d Word_Length)","private CYC: (Number -\u003e Number)\n\tCYC(X) \u003d\u003d\n(ADD(X, X) + CAR(X, X))","private AND: (Number * Number -\u003e Number)\n\tAND(X, Y) \u003d\u003d\n(if ((X \u003d 0) or (Y \u003d 0))\nthen 0\nelse ((((X mod 2) * Y) mod 2) + (2 * AND((X div 2), (Y div 2)))))","private OR: (Number * Number -\u003e Number)\n\tOR(X, Y) \u003d\u003d\n(if ((X \u003d 0) or (Y \u003d 0))\nthen (X + Y)\nelse (max((X mod 2), (Y mod 2)) + (2 * OR((X div 2), (Y div 2)))))","private max: (int * int -\u003e int)\n\tmax(X, Y) \u003d\u003d\n(if (X \u003e\u003d Y)\nthen X\nelse Y)","private XOR: (Number * Number -\u003e Number)\n\tXOR(X, Y) \u003d\u003d\n(if ((X \u003d 0) or (Y \u003d 0))\nthen (X + Y)\nelse (((X + Y) mod 2) + (2 * XOR((X div 2), (Y div 2)))))","private ADD: (Number * Number -\u003e Number)\n\tADD(X, Y) \u003d\u003d\n((X + Y) mod Maximum_Number_Size_plus_1)","private CAR: (Number * Number -\u003e Number)\n\tCAR(X, Y) \u003d\u003d\n((X + Y) div Maximum_Number_Size_plus_1)","private MUL1: (Number * Number -\u003e Number)\n\tMUL1(X, Y) \u003d\u003d\nlet L:int \u003d ((X * Y) mod Maximum_Number_Size_plus_1), U:int \u003d ((X * Y) div Maximum_Number_Size_plus_1) in let S:Number \u003d ADD(U, L), C:Number \u003d CAR(U, L) in ADD(S, C)","private MUL2: (Number * Number -\u003e Number)\n\tMUL2(X, Y) \u003d\u003d\nlet L:int \u003d ((X * Y) mod Maximum_Number_Size_plus_1), U:int \u003d ((X * Y) div Maximum_Number_Size_plus_1) in let D:Number \u003d ADD(U, U), E:Number \u003d CAR(U, U) in let F:Number \u003d ADD(D, (2 * E)) in let S:Number \u003d ADD(F, L), C:Number \u003d CAR(F, L) in ADD(S, (2 * C))","private MUL2A: (Number * Number -\u003e Number)\n\tMUL2A(X, Y) \u003d\u003d\nlet L:int \u003d ((X * Y) mod Maximum_Number_Size_plus_1), U:int \u003d ((X * Y) div Maximum_Number_Size_plus_1) in let D:Number \u003d ADD(U, U) in let S:Number \u003d ADD(D, L), C:Number \u003d CAR(D, L) in ADD(S, (2 * C))\n\tpre (((X div Maximum_Number_Size_plus_1_div_2) \u003d 0) or ((Y div Maximum_Number_Size_plus_1_div_2) \u003d 0))","private BYT: (Double_Number -\u003e Double_Number)\n\tBYT(K) \u003d\u003d\nlet X:Number \u003d (hd K), Y:Number \u003d (hd (tl K)) in let X\u0027:seq1 of (Number) \u003d [Byte(X, 3), Byte(X, 2), Byte(X, 1), Byte(X, 0)], Y\u0027:seq1 of (Number) \u003d [Byte(Y, 3), Byte(Y, 2), Byte(Y, 1), Byte(X, 0)] in let XY:seq1 of (Number) \u003d (X\u0027 ^ Y\u0027), P:nat \u003d 0 in let XY\u0027:Message_in_blocks \u003d Condition_Sequence(XY, P) in let X\u0027\u0027:Message_in_blocks \u003d Get_head_in_blocks(XY\u0027, 4), Y\u0027\u0027:Message_in_blocks \u003d Get_tail_in_blocks(XY\u0027, 4) in ([Convert_Bytes_to_Number(X\u0027\u0027)] ^ [Convert_Bytes_to_Number(Y\u0027\u0027)])","private Byte: (Number * nat -\u003e Number)\n\tByte(N, B) \u003d\u003d\n(if (B \u003d 0)\nthen (N mod (2 ** 8))\nelse Byte((N div (2 ** 8)), (B - 1)))\n\tpre ((B \u003e\u003d 0) and (B \u003c\u003d 3))","private Condition_Sequence: (Message_in_blocks * Number -\u003e Message_in_blocks)\n\tCondition_Sequence(M, P) \u003d\u003d\n(if ((len M) \u003d 1)\nthen [Condition_value((hd M), P)]\nelse ([Condition_value((hd M), P)] ^ Condition_Sequence((tl M), Changes((hd M), P))))","private Condition_value: (Number * Number -\u003e Number)\n\tCondition_value(B, P) \u003d\u003d\nlet P\u0027:nat \u003d (2 * P) in let P\u0027\u0027:nat1 \u003d (P\u0027 + 1) in (if (B \u003d 0)\nthen P\u0027\u0027\nelse (if (B \u003d ((2 ** 8) - 1))\nthen (((2 ** 8) - 1) - P\u0027\u0027)\nelse B))","private Changes: (Number * Number -\u003e Number)\n\tChanges(B, P) \u003d\u003d\nlet P\u0027:nat \u003d (2 * P) in let P\u0027\u0027:nat1 \u003d (P\u0027 + 1) in (if ((B \u003d 0) or (B \u003d ((2 ** 8) - 1)))\nthen P\u0027\u0027\nelse P\u0027)","private Convert_Bytes_to_Number: (Message_in_blocks -\u003e Number)\n\tConvert_Bytes_to_Number(M) \u003d\u003d\n(if ((len M) \u003d 1)\nthen (hd M)\nelse (Convert_Bytes_to_Number((tl M)) + ((hd M) * (2 ** (8 * ((len M) - 1))))))","private PAT: (Double_Number -\u003e Number)\n\tPAT(D) \u003d\u003d\nlet X:Number \u003d (hd D), Y:Number \u003d (hd (tl D)) in let X\u0027:seq1 of (Number) \u003d [Byte(X, 3), Byte(X, 2), Byte(Y, 1), Byte(Y, 0)], Y\u0027:seq1 of (Number) \u003d [Byte(Y, 3), Byte(Y, 2), Byte(Y, 1), Byte(Y, 0)] in let XY:seq1 of (Number) \u003d (X\u0027 ^ Y\u0027), P:nat \u003d 0 in Record_Changes(XY, P)","private Record_Changes: (Message_in_blocks * Number -\u003e Number)\n\tRecord_Changes(M, P) \u003d\u003d\n(if ((len M) \u003d 1)\nthen Changes((hd M), P)\nelse Record_Changes((tl M), Changes((hd M), P)))","private Prelude: (Key -\u003e Key_Constant)\n\tPrelude(K) \u003d\u003d\nlet J1K1:Double_Number \u003d BYT(K) in let J1:Number \u003d (hd J1K1), K1:Number \u003d (hd (tl J1K1)), P:Number \u003d PAT(K), Q:nat1 \u003d ((1 + P) * (1 + P)) in let J12:Number \u003d MUL1(J1, J1), J22:Number \u003d MUL2(J1, J1) in let J14:Number \u003d MUL1(J12, J12), J24:Number \u003d MUL2(J22, J22) in let J16:Number \u003d MUL1(J12, J14), J26:Number \u003d MUL2(J22, J24) in let J18:Number \u003d MUL1(J12, J16), J28:Number \u003d MUL2(J22, J26) in let H4:Number \u003d XOR(J14, J28), H6:Number \u003d XOR(J16, J26), H8:Number \u003d XOR(J18, J28) in let K12:Number \u003d MUL1(K1, K1), K22:Number \u003d MUL2(K1, K1) in let K14:Number \u003d MUL1(K12, K12), K24:Number \u003d MUL2(K22, K22) in let K15:Number \u003d MUL1(K1, K14), K25:Number \u003d MUL2(K1, K24) in let K17:Number \u003d MUL1(K12, K15), K27:Number \u003d MUL2(K22, K25) in let K19:Number \u003d MUL1(K12, K17), K29:Number \u003d MUL2(K22, K27) in let H\u0027:Number \u003d XOR(K15, K25) in let H5:Number \u003d MUL2(H\u0027, Q), H7:Number \u003d XOR(K17, K27), H9:Number \u003d XOR(K19, K29) in let X0Y0:Double_Number \u003d BYT([H4, H5]), V0W:Double_Number \u003d BYT([H6, H7]), ST:Double_Number \u003d BYT([H8, H9]) in mk_Key_Constant((hd X0Y0), (hd (tl X0Y0)), (hd V0W), (hd (tl V0W)), (hd ST), (hd (tl ST)))","private Main_loop: (Message_in_blocks_plus_empty_Message * Key_Constant -\u003e Number)\n\tMain_loop(M, KC) \u003d\u003d\nlet mk_Key_Constant(X, Y, V, W, S, T):Key_Constant \u003d KC in (if ((len M) \u003d 0)\nthen XOR(X, Y)\nelse let Mi:Number \u003d (hd M) in let V\u0027:Number \u003d CYC(V) in let E:Number \u003d XOR(V\u0027, W), X\u0027:Number \u003d XOR(X, Mi), Y\u0027:Number \u003d XOR(Y, Mi) in let F:Number \u003d ADD(E, Y\u0027), G:Number \u003d ADD(E, X\u0027) in let F\u0027:Number \u003d OR(F, A), G\u0027:Number \u003d OR(G, B) in let F\u0027\u0027:Number \u003d AND(F\u0027, C), G\u0027\u0027:Number \u003d AND(G\u0027, D) in let X\u0027\u0027:Number \u003d MUL1(X\u0027, F\u0027\u0027), Y\u0027\u0027:Number \u003d MUL2A(Y\u0027, G\u0027\u0027) in Main_loop((tl M), mk_Key_Constant(X\u0027\u0027, Y\u0027\u0027, V\u0027, W, S, T)))","private Z: (Message_in_blocks * Key -\u003e Number)\n\tZ(M, K) \u003d\u003d\nlet KC:Key_Constant \u003d Prelude(K) in let S:Number \u003d (KC.S), T:Number \u003d (KC.T) in let M\u0027:seq1 of (Number) \u003d ((M ^ [S]) ^ [T]) in Main_loop(M\u0027, KC)","private MAC: (Message_in_bits * Key -\u003e Number)\n\tMAC(M, K) \u003d\u003d\nlet M\u0027:Message_in_bits \u003d Pad_out_Message(M) in let M\u0027\u0027:Message_in_blocks \u003d Form_Message_into_blocks(M\u0027) in (if ((len M\u0027\u0027) \u003c\u003d Maximum_No_of_blocks_for_MAC)\nthen Z(M\u0027\u0027, K)\nelse let M\u0027\u0027\u0027:seq1 of (Number) \u003d ([Z(Get_head_in_blocks(M\u0027\u0027, Maximum_No_of_blocks_for_MAC), K)] ^ Get_tail_in_blocks(M\u0027\u0027, Maximum_No_of_blocks_for_MAC)) in Z_of_SEG(M\u0027\u0027\u0027, K, Maximum_No_of_blocks_for_MAC_plus_1))","private Z_of_SEG: (Message_in_blocks * Key * nat -\u003e Number)\n\tZ_of_SEG(M, K, No_blocks) \u003d\u003d\n(if ((len M) \u003c\u003d No_blocks)\nthen Z(M, K)\nelse let M\u0027:seq1 of (Number) \u003d ([Z(Get_head_in_blocks(M, No_blocks), K)] ^ Get_tail_in_blocks(M, No_blocks)) in Z_of_SEG(M\u0027, K, No_blocks))","private Get_tail_in_bits: (Message_in_bits * nat -\u003e Message_in_bits)\n\tGet_tail_in_bits(M, No_bits) \u003d\u003d\n(if (No_bits \u003d 0)\nthen M\nelse Get_tail_in_bits((tl M), (No_bits - 1)))\n\tpre ((len M) \u003e\u003d No_bits)","private Get_head_in_bits: (Message_in_bits * nat -\u003e Message_in_bits)\n\tGet_head_in_bits(M, No_bits) \u003d\u003d\n(if (No_bits \u003d 0)\nthen [(hd M)]\nelse ([(hd M)] ^ Get_head_in_bits((tl M), (No_bits - 1))))\n\tpre (((len M) \u003e\u003d No_bits) and (No_bits \u003e\u003d 1))","private Get_tail_in_blocks: (Message_in_blocks * nat -\u003e Message_in_blocks)\n\tGet_tail_in_blocks(M, No_blocks) \u003d\u003d\n(if (No_blocks \u003d 0)\nthen M\nelse Get_tail_in_blocks((tl M), (No_blocks - 1)))\n\tpre ((len M) \u003e\u003d No_blocks)","private Get_head_in_blocks: (Message_in_blocks * nat -\u003e Message_in_blocks)\n\tGet_head_in_blocks(M, No_blocks) \u003d\u003d\n(if (No_blocks \u003d 0)\nthen [(hd M)]\nelse ([(hd M)] ^ Get_head_in_blocks((tl M), (No_blocks - 1))))\n\tpre (((len M) \u003e\u003d No_blocks) and (No_blocks \u003e\u003d 1))"]