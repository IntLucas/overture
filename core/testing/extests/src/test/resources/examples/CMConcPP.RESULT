["class Bus\nprivate  seats:set of (Passenger) :\u003d (undefined)\nprivate  inv((card seats) \u003c\u003d Config`BusCapacity)\nprivate  line:nat :\u003d (undefined)\nprivate  route:seq of (Road) :\u003d (undefined)\nprivate  curRoute:seq of (Road) :\u003d (undefined)\nprivate  nextWP:Waypoint :\u003d (undefined)\nprivate  currentRoad:Road :\u003d (undefined)\nprivate  wps:seq of (Waypoint) :\u003d (undefined)\npublic  Bus(nat, seq of (Road), seq of (Waypoint)) (nat * seq of (Road) * seq of (Waypoint) \u003d\u003d\u003e Bus)\n\tBus(nat, seq of (Road), seq of (Waypoint))(linenumber, busroute, waypoints) \u003d\u003d\n(\n\nline :\u003d linenumber;\nroute :\u003d busroute;\ncurRoute :\u003d busroute;\nnextWP :\u003d (hd waypoints);\nwps :\u003d waypoints;\nseats :\u003d {}\n)\n\tpre (((len waypoints) \u003e 1) and (waypoints \u003c\u003e []))\npublic  GetOn(set of (Passenger)) (set of (Passenger) \u003d\u003d\u003e ())\n\tGetOn(set of (Passenger))(ps) \u003d\u003d\n(\n\nseats :\u003d (seats union ps);\nWorld`graphics.busPassengerCountChanged(line, (card seats))\n)\n\tpre (((card seats) + (card ps)) \u003c\u003d Config`BusCapacity)\npublic  GotOff(set of (Passenger)) (set of (Passenger) \u003d\u003d\u003e ())\n\tGotOff(set of (Passenger))(p) \u003d\u003d\n(\n\nseats :\u003d (seats \\ p);\nWorld`graphics.busPassengerCountChanged(line, (card seats))\n)\n\tpre ((p inter seats) \u003c\u003e {})\npublic  GetWaypoints() (() \u003d\u003d\u003e seq of (Waypoint))\n\tGetWaypoints()() \u003d\u003d\nreturn (wps)\npublic  GetStops() (() \u003d\u003d\u003e seq of (Busstop))\n\tGetStops()() \u003d\u003d\nreturn ([wps(i) | i in set (inds wps) \u0026 (wps(i).IsStop)()])\nprivate  NextWaypoint() (() \u003d\u003d\u003e Waypoint)\n\tNextWaypoint()() \u003d\u003d\n(\n\nif ((len curRoute) \u003d 0)\nthen\ncurRoute :\u003d route;\nlet nextRoad:Road \u003d (hd curRoute) in (\n\ncurRoute :\u003d (tl curRoute);\ncurrentRoad :\u003d nextRoad;\nlet currentWp:Waypoint \u003d nextWP in (\n\nnextWP :\u003d (currentRoad.OppositeEnd)(currentWp);\nreturn (currentWp)\n)\n)\n)\npublic  WaitForThreadStart() (() \u003d\u003d\u003e ())\n\tWaitForThreadStart()() \u003d\u003d\nskip\nprivate  ThreadStarted() (() \u003d\u003d\u003e ())\n\tThreadStarted()() \u003d\u003d\nskip\nprivate  per GetOn \u003d\u003e ((card seats) \u003c Config`BusCapacity)\nprivate  per WaitForThreadStart \u003d\u003e (#fin[ThreadStarted] \u003e 0)\nprotected  thread (\npassGettingOn:set of (Passenger) :\u003d (undefined)\n\nThreadStarted();\nlet -:Waypoint \u003d NextWaypoint() in skip;\nwhile true do (\n\nPrinter`OutWithTS((((((((((((\"%Bus \" ^ Printer`natToString(line)) ^ \": running on \") ^ (VDMUtil`val2seq_of_char)[RoadNumber]((currentRoad.GetRoadNumber)())) ^ \" with length \") ^ Printer`natToString((currentRoad.GetLength)())) ^ \" and speedlimit \") ^ Printer`natToString((currentRoad.GetSpeedLimit)())) ^ \" Next: \") ^ (VDMUtil`val2seq_of_char)[WaypointsEnum]((nextWP.GetId)())) ^ \" Time: \") ^ Printer`natToString((currentRoad.GetTimePenalty)())));\nWorld`graphics.busInRouteTo(line, (VDMUtil`val2seq_of_char)[RoadNumber]((currentRoad.GetRoadNumber)()), (VDMUtil`val2seq_of_char)[WaypointsEnum]((nextWP.GetId)()), (currentRoad.GetTimePenalty)());\nWorld`timerRef.WaitRelative((currentRoad.GetTimePenalty)());\nWorld`timerRef.NotifyAll();\nWorld`timerRef.Awake();\nlet next:Waypoint \u003d NextWaypoint() in (\n\nPrinter`OutWithTS((((\"%Bus \" ^ Printer`natToString(line)) ^ \" arrived at \") ^ (VDMUtil`val2seq_of_char)[WaypointsEnum]((next.GetId)())));\nlet nextId:WaypointsEnum \u003d (next.GetId)() in (\n\nif (nextId \u003d \u003cCentral\u003e)\nthen\n(\n\nlet central:Busstop \u003d next in (\n\nlet potentialPassengers:set of (Passenger) \u003d (central.GetWaitingOn)(wps) in (\n\nif ((card potentialPassengers) \u003e 0)\nthen\n(\n\nif ((Config`BusCapacity - (card seats)) \u003c (card potentialPassengers))\nthen\npassGettingOn :\u003d SelectSubset(potentialPassengers, (Config`BusCapacity - (card seats)))else\npassGettingOn :\u003d potentialPassengers;\ncentral.PassengerLeft(passGettingOn);\nGetOn(passGettingOn);\nfor all p in set passGettingOn do\np.GotOnBus();\nPrinter`OutWithTS(((((\"%Bus \" ^ Printer`natToString(line)) ^ \": \") ^ Printer`natToString((card passGettingOn))) ^ \" got on\"));\nWorld`graphics.busStopping(line);\nWorld`timerRef.WaitRelative(3);\nWorld`timerRef.NotifyAll();\nWorld`timerRef.Awake()\n)\n)\n)\n);\nlet gettingOff:set of (Passenger) \u003d {p | p in set seats \u0026 ((p.GetDestination)() \u003d next)} in (\n\nif ((card gettingOff) \u003e 0)\nthen\n(\n\nGotOff(gettingOff);\nPrinter`OutWithTS(((((\"%Bus \" ^ Printer`natToString(line)) ^ \": \") ^ Printer`natToString((card gettingOff))) ^ \" got off\"));\nWorld`env.TransportedPassengers((card gettingOff));\nWorld`graphics.busStopping(line);\nWorld`timerRef.WaitRelative(3);\nWorld`timerRef.NotifyAll();\nWorld`timerRef.Awake()\n)\n)\n)\n)\n)\n)\nprivate  SelectSubset(set of (Passenger), nat) (set of (Passenger) * nat \u003d\u003d\u003e set of (Passenger))\n\tSelectSubset(set of (Passenger), nat)(ps, limit) \u003d\u003d\n(\n\nif (limit \u003d 0)\nthen\nreturn ({});\nif ((card ps) \u003c\u003d limit)\nthen\nreturn (ps);\nlet sub in set ps in return (({sub} union SelectSubset((ps \\ {sub}), (limit - 1))))\n)\nend Bus\n","class Busstop is subclass of [Waypoint]\nprivate  waiting:set of (Passenger) :\u003d {}\npublic  Busstop(BusStops) (BusStops \u003d\u003d\u003e Busstop)\n\tBusstop(BusStops)(s) \u003d\u003d\n(\n\nid :\u003d s;\nisStop :\u003d true\n)\npublic  GetWaitingCount() (() \u003d\u003d\u003e nat)\n\tGetWaitingCount()() \u003d\u003d\nreturn ((card waiting))\npublic  GetWaiting() (() \u003d\u003d\u003e set of (Passenger))\n\tGetWaiting()() \u003d\u003d\nreturn (waiting)\npublic  GetWaitingOn(seq of (Waypoint)) (seq of (Waypoint) \u003d\u003d\u003e set of (Passenger))\n\tGetWaitingOn(seq of (Waypoint))(stopsAt) \u003d\u003d\nlet stops:set of (Waypoint) \u003d (elems stopsAt) in return ({p | p in set waiting \u0026 (({(p.GetDestination)()} inter stops) \u003c\u003e {})})\npublic  AddPassenger(Passenger) (Passenger \u003d\u003d\u003e ())\n\tAddPassenger(Passenger)(p) \u003d\u003d\nwaiting :\u003d (waiting union {p})\npublic  PassengerLeft(set of (Passenger)) (set of (Passenger) \u003d\u003d\u003e ())\n\tPassengerLeft(set of (Passenger))(p) \u003d\u003d\nwaiting :\u003d (waiting \\ p)\n\tpre ((p inter waiting) \u003c\u003e {})\nprivate  mutex(GetWaitingCount, AddPassenger, PassengerLeft)\nend Busstop\n","class City\nprivate  wayspoints:inmap (WaypointsEnum) to (Waypoint) :\u003d {|-\u003e}\nprivate  stops:inmap (BusStops) to (Busstop) :\u003d {|-\u003e}\nprivate  roads:inmap (RoadNumber) to (Road) :\u003d {|-\u003e}\nprivate  buses:inmap (nat) to (Bus) :\u003d {|-\u003e}\nprivate  central:Busstop :\u003d (undefined)\nprivate  inflow:nat :\u003d (undefined)\npublic  City() (() \u003d\u003d\u003e City)\n\tCity()() \u003d\u003d\n(\n\ncentral :\u003d addBusstop(\u003cCentral\u003e);\ninflow :\u003d 1\n)\npublic  newCity() (() \u003d\u003d\u003e ())\n\tnewCity()() \u003d\u003d\n(\n\nstops :\u003d {|-\u003e};\nroads :\u003d {|-\u003e};\nwayspoints :\u003d {|-\u003e};\nbuses :\u003d {|-\u003e};\ncentral :\u003d addBusstop(\u003cCentral\u003e)\n)\npublic  addBusstop(BusStops) (BusStops \u003d\u003d\u003e Busstop)\n\taddBusstop(BusStops)(stp) \u003d\u003d\n(\n\nlet bs:Busstop \u003d new Busstop(stp) in (\n\nstops :\u003d (stops munion {stp |-\u003e bs});\nwayspoints :\u003d (wayspoints munion {stp |-\u003e bs});\nreturn (bs)\n)\n)\n\tpre (stp not in set (dom stops))\npublic  addWaypoint(WaypointsEnum) (WaypointsEnum \u003d\u003d\u003e Waypoint)\n\taddWaypoint(WaypointsEnum)(stp) \u003d\u003d\n(\n\nPrinter`Out(\"CITY: Add WP\");\nlet wp:Waypoint \u003d new Waypoint(stp) in (\n\nwayspoints :\u003d (wayspoints munion {stp |-\u003e wp});\nreturn (wp)\n)\n)\n\tpre (stp not in set (dom stops))\npublic  addRoad(Waypoint, Waypoint, RoadNumber, nat) (Waypoint * Waypoint * RoadNumber * nat \u003d\u003d\u003e ())\n\taddRoad(Waypoint, Waypoint, RoadNumber, nat)(wp1, wp2, roadNmbr, length) \u003d\u003d\n(\n\nlet r:Road \u003d new Road(roadNmbr, {wp1, wp2}, length) in (\n\nroads :\u003d (roads munion {roadNmbr |-\u003e r})\n)\n)\n\tpre ((roadNmbr not in set (dom roads)) and ((wp1 \u003c\u003e wp2) and (forall r in set (rng roads) \u0026 (not (r.Covers)({wp1, wp2})))))\npublic  addRoad(WaypointsEnum, WaypointsEnum, RoadNumber, nat, bool) (WaypointsEnum * WaypointsEnum * RoadNumber * nat * bool \u003d\u003d\u003e ())\n\taddRoad(WaypointsEnum, WaypointsEnum, RoadNumber, nat, bool)(wp1, wp2, roadNmbr, length, highspeed) \u003d\u003d\nif highspeed\nthen\naddRoad(wayspoints(wp1), wayspoints(wp2), roadNmbr, length, (Config`DefaultRoadSpeedLimit + 10))else\naddRoad(wayspoints(wp1), wayspoints(wp2), roadNmbr, length)\npublic  addRoad(Waypoint, Waypoint, RoadNumber, nat, nat) (Waypoint * Waypoint * RoadNumber * nat * nat \u003d\u003d\u003e ())\n\taddRoad(Waypoint, Waypoint, RoadNumber, nat, nat)(wp1, wp2, roadNmbr, length, speedlimit) \u003d\u003d\n(\n\nlet r:Road \u003d new Road(roadNmbr, {wp1, wp2}, length, speedlimit) in (\n\nroads :\u003d (roads munion {roadNmbr |-\u003e r})\n)\n)\n\tpre ((roadNmbr not in set (dom roads)) and (forall r in set (rng roads) \u0026 ((not (r.Covers)({wp1, wp2})) and (wp1 \u003c\u003e wp2))))\npublic  addBus(nat, seq of (RoadNumber)) (nat * seq of (RoadNumber) \u003d\u003d\u003e Bus)\n\taddBus(nat, seq of (RoadNumber))(lineNumber, route) \u003d\u003d\n(\nbusstops:seq of (Waypoint) :\u003d []\ncurrentWP:Waypoint :\u003d (undefined)\n\nlet busRoads:seq of (Road) \u003d findRoadsFromRoadNumber(route) in (\n\ncurrentWP :\u003d central;\nbusstops :\u003d [currentWP];\nfor all i in set (inds busRoads) do\n(\n\ncurrentWP :\u003d (busRoads(i).OppositeEnd)(currentWP);\nbusstops :\u003d (busstops ^ [currentWP])\n);\nif ((hd busstops) \u003c\u003e busstops((len busstops)))\nthen\nexit (\"End not the same as start \");\nlet bus:Bus \u003d new Bus(lineNumber, busRoads, busstops) in (\n\nbuses :\u003d (buses munion {lineNumber |-\u003e bus});\nWorld`graphics.busAdded(lineNumber);\nreturn (bus)\n)\n)\n)\n\tpre (((len route) \u003e 1) and (lineNumber not in set (dom buses)))\nprivate  findRoadsFromRoadNumber(seq of (RoadNumber)) (seq of (RoadNumber) \u003d\u003d\u003e seq of (Road))\n\tfindRoadsFromRoadNumber(seq of (RoadNumber))(route) \u003d\u003d\nreturn ([roads(route(i)) | i in set (inds route)])\npublic  getCentralStation() (() \u003d\u003d\u003e Busstop)\n\tgetCentralStation()() \u003d\u003d\nreturn (central)\npublic  setInflow(nat) (nat \u003d\u003d\u003e ())\n\tsetInflow(nat)(flow) \u003d\u003d\n(\n\ninflow :\u003d flow;\nWorld`graphics.inflowChanged(inflow)\n)\npublic  getInflow() (() \u003d\u003d\u003e nat)\n\tgetInflow()() \u003d\u003d\nreturn (inflow)\npublic  getBuses() (() \u003d\u003d\u003e set of (Bus))\n\tgetBuses()() \u003d\u003d\nreturn ((rng buses))\npublic  WaitForThreadStart() (() \u003d\u003d\u003e ())\n\tWaitForThreadStart()() \u003d\u003d\nskip\nprivate  ThreadStarted() (() \u003d\u003d\u003e ())\n\tThreadStarted()() \u003d\u003d\nskip\nprivate  per WaitForThreadStart \u003d\u003e (#fin[ThreadStarted] \u003e 0)\nprotected  thread (\n\nThreadStarted();\nwhile true do (\n\nfor all - in set {1, ... ,getInflow()} do\n(\n\nlet stopSeq:seq of (BusStops) \u003d (VDMUtil`set2seq)[BusStops]((dom stops)) in let i:int \u003d (MATH`rand((World`timerRef.GetTime)()) mod (len stopSeq)) in let pass:Passenger \u003d new Passenger(stops(stopSeq((i + 1)))) in (\n\ncentral.AddPassenger(pass);\nWorld`graphics.passengerAtCentral((pass.Id)(), (VDMUtil`val2seq_of_char)[WaypointsEnum](((pass.GetDestination)().GetId)()))\n)\n);\nWorld`env.handleEvent((Printer`natToString((central.GetWaitingCount)()) ^ \" passengers waiting a central station\"));\nfor all pass in set (central.GetWaiting)() do\npass.AnnoyedOfWaiting();\nWorld`timerRef.WaitRelative(5);\nWorld`timerRef.NotifyAll();\nWorld`timerRef.Awake()\n)\n)\nend City\n","class ClockTick\nprotected  thread while true do (\n\nWorld`timerRef.WaitRelative(1);\nWorld`timerRef.NotifyAll();\nWorld`timerRef.Awake()\n)\nend ClockTick\n","class Config\npublic static  BusCapacity:nat \u003d 15\npublic static  DefaultRoadSpeedLimit:nat \u003d 10\npublic static  PassengerAnnoyanceLimit:nat \u003d 40\npublic static  MaxInflow:nat \u003d 10\nend Config\n","class Environment\npublic  city:City :\u003d (undefined)\nprivate  io:IO :\u003d new IO()\nprivate  inlines:seq of (inline) :\u003d []\nprivate  outlines:seq of (char) :\u003d []\nprivate  busy:bool :\u003d true\nprivate  simulating:bool :\u003d false\nprivate  passengersTransported:nat :\u003d 0\nprivate  passengersAnnoyed:nat :\u003d 0\nprivate  passengersCount:nat :\u003d 0\nprivate  passengersAnnoyedStops:map (WaypointsEnum) to (nat) :\u003d {|-\u003e}\nprivate static  inline \u003d inline\nprivate static  InputTP \u003d InputTP\npublic  Environment(seq of (char)) (seq of (char) \u003d\u003d\u003e Environment)\n\tEnvironment(seq of (char))(filename) \u003d\u003d\n(\n\ncity :\u003d new City();\nlet mk_(-, input) \u003d ((io.freadval))[InputTP](filename) in (\n\ninlines :\u003d input\n)\n)\nprivate  BuildCityMap() (() \u003d\u003d\u003e ())\n\tBuildCityMap()() \u003d\u003d\n(\na:Busstop :\u003d (undefined)\nb:Busstop :\u003d (undefined)\nc:Busstop :\u003d (undefined)\nd:Busstop :\u003d (undefined)\ne:Busstop :\u003d (undefined)\nf:Busstop :\u003d (undefined)\nwp1:Waypoint :\u003d (undefined)\nwp2:Waypoint :\u003d (undefined)\nwp3:Waypoint :\u003d (undefined)\nwp4:Waypoint :\u003d (undefined)\n\na :\u003d (city.addBusstop)(\u003cA\u003e);\nb :\u003d (city.addBusstop)(\u003cB\u003e);\nc :\u003d (city.addBusstop)(\u003cC\u003e);\nd :\u003d (city.addBusstop)(\u003cD\u003e);\ne :\u003d (city.addBusstop)(\u003cE\u003e);\nf :\u003d (city.addBusstop)(\u003cF\u003e);\nwp1 :\u003d (city.addWaypoint)(\u003cWP1\u003e);\nwp2 :\u003d (city.addWaypoint)(\u003cWP2\u003e);\nwp3 :\u003d (city.addWaypoint)(\u003cWP3\u003e);\nwp4 :\u003d (city.addWaypoint)(\u003cWP4\u003e);\ncity.addRoad(a, b, \u003cR1\u003e, 40);\ncity.addRoad(b, wp1, \u003cR2\u003e, 80);\ncity.addRoad(b, wp2, \u003cR3\u003e, 50);\ncity.addRoad(a, wp2, \u003cR4\u003e, 90);\ncity.addRoad(wp2, c, \u003cR5\u003e, 60);\ncity.addRoad(c, d, \u003cR6\u003e, 40);\ncity.addRoad(c, f, \u003cR7\u003e, 60);\ncity.addRoad(f, (city.getCentralStation)(), \u003cR8\u003e, 100);\ncity.addRoad((city.getCentralStation)(), wp3, \u003cR9\u003e, 50);\ncity.addRoad(wp3, wp4, \u003cR10\u003e, 30);\ncity.addRoad(d, wp4, \u003cR11\u003e, 40);\ncity.addRoad(wp3, e, \u003cR12\u003e, 40);\ncity.addRoad(e, wp1, \u003cR13\u003e, 40);\ncity.addRoad(wp1, d, \u003cR14\u003e, 30);\ncity.addRoad(f, wp4, \u003cR15\u003e, 20);\ncity.addRoad(wp1, wp3, \u003cR16\u003e, 40);\ncity.addRoad(a, (city.getCentralStation)(), \u003cHW1\u003e, 310, (Config`DefaultRoadSpeedLimit + 10))\n)\npublic  Events() (() \u003d\u003d\u003e ())\n\tEvents()() \u003d\u003d\n(\n\nif (inlines \u003c\u003e [])\nthen\n(\ndone:bool :\u003d false\neventOccurred:bool :\u003d false\ncurtime:Time :\u003d (World`timerRef.GetTime)()\n\nwhile (not done) do (\n\nlet event \u003d (hd inlines) in cases event :\n  mk_BusRoute(-, -, -) -\u003e (\n\nif ((event.t) \u003c\u003d curtime)\nthen\n(\n\nPrinter`OutWithTS((\"Environment: Bus route \" ^ Printer`natToString((event.ID))));\nlet b:Bus \u003d (city.addBus)((event.ID), (event.route)) in (\n\nPrinter`Out(\"Waypoints:\");\nlet wps:seq of (Waypoint) \u003d (b.GetWaypoints)() in let wpsIds:seq of (WaypointsEnum) \u003d [(wps(i).GetId)() | i in set (inds wps)] in IO`print(wpsIds);\nPrinter`Out(\"\nStops:\");\nlet wps:seq of (Busstop) \u003d (b.GetStops)() in let wpsIds:seq of (WaypointsEnum) \u003d [(wps(i).GetId)() | i in set (inds wps)] in IO`print(wpsIds);\nPrinter`Out(\"\n\");\nif simulating\nthen\n(\n\nstart (b)\n)\n);\neventOccurred :\u003d true\n)\n)  mk_Inflow(-, -) -\u003e (\n\nif ((event.t) \u003c\u003d curtime)\nthen\n(\n\nSetInflow((event.flow));\neventOccurred :\u003d true\n)\n)  mk_Simulate(-) -\u003e (\n\nif ((event.t) \u003c\u003d curtime)\nthen\n(\n\nif (not simulating)\nthen\n(\n\nPrinter`OutWithTS((\"Environment: \" ^ \"Simulation started\"));\nsimulating :\u003d true;\nstart (city);\ncity.WaitForThreadStart();\nfor all bus in set (city.getBuses)() do\n(\n\nstart (bus);\nbus.WaitForThreadStart()\n)\n);\neventOccurred :\u003d true\n)\n)  mk_WasteTime(-) -\u003e (\n\nif ((event.t) \u003c\u003d curtime)\nthen\n(\n\nPrinter`OutWithTS(\"Environment: Wasting time\");\neventOccurred :\u003d true\n)\n)  others -\u003e Printer`OutWithTS(\"Environment: No match found\") end;\nif eventOccurred\nthen\n(\n\ninlines :\u003d (tl inlines);\ndone :\u003d ((len inlines) \u003d 0)\n)else\ndone :\u003d true;\neventOccurred :\u003d false\n)\n)else\nbusy :\u003d false\n)\npublic  handleEvent(seq of (char)) (seq of (char) \u003d\u003d\u003e ())\n\thandleEvent(seq of (char))(s) \u003d\u003d\n(\n\nPrinter`OutWithTS((\"#Environment handled System Event: \" ^ s));\noutlines :\u003d ((((outlines ^ Printer`natToString((World`timerRef.GetTime)())) ^ \": \") ^ s) ^ \"\n\")\n)\nprivate  SetInflow(nat) (nat \u003d\u003d\u003e ())\n\tSetInflow(nat)(flow) \u003d\u003d\n(\n\nPrinter`OutWithTS(((\"Environment: \" ^ \"Inflow changed to \") ^ Printer`natToString(flow)));\ncity.setInflow(flow)\n)\npublic  IncreaseInflow() (() \u003d\u003d\u003e ())\n\tIncreaseInflow()() \u003d\u003d\n(\n\nPrinter`Out(\"Increase\");\nlet flow:nat \u003d (city.getInflow)() in (\n\nif (flow \u003c Config`MaxInflow)\nthen\nSetInflow((flow + 1))\n)\n)\npublic  DecreaseInflow() (() \u003d\u003d\u003e ())\n\tDecreaseInflow()() \u003d\u003d\n(\n\nlet flow:nat \u003d (city.getInflow)() in (\n\nif (flow \u003e 0)\nthen\nSetInflow((flow - 1))\n)\n)\npublic  TransportedPassengers(nat) (nat \u003d\u003d\u003e ())\n\tTransportedPassengers(nat)(number) \u003d\u003d\npassengersTransported :\u003d (passengersTransported + number)\npublic  AnnoyedPassenger(nat, WaypointsEnum) (nat * WaypointsEnum \u003d\u003d\u003e ())\n\tAnnoyedPassenger(nat, WaypointsEnum)(number, goal) \u003d\u003d\n(\n\npassengersAnnoyed :\u003d (passengersAnnoyed + number);\nif (goal not in set (dom passengersAnnoyedStops))\nthen\n(\n\npassengersAnnoyedStops :\u003d (passengersAnnoyedStops ++ {goal |-\u003e number})\n)else\npassengersAnnoyedStops :\u003d (passengersAnnoyedStops ++ {goal |-\u003e (passengersAnnoyedStops(goal) + number)})\n)\npublic  PassengerCount() (() \u003d\u003d\u003e ())\n\tPassengerCount()() \u003d\u003d\npassengersCount :\u003d (passengersCount + 1)\npublic  report() (() \u003d\u003d\u003e ())\n\treport()() \u003d\u003d\n(\n\nPrinter`Out((\"\n\nHowever beautiful the strategy,\" ^ \" you should occasionally look at the results.\"));\nPrinter`Out(\"**************RESULT**************\");\nPrinter`Out(\"**********************************\");\nPrinter`Out(((\" \" ^ (VDMUtil`val2seq_of_char)[nat](passengersCount)) ^ \"\t passengers in total. (transported and at central)\"));\nPrinter`Out(((\" \" ^ (VDMUtil`val2seq_of_char)[nat](passengersTransported)) ^ \"\t passengers transported.\"));\nPrinter`Out(((\" \" ^ (VDMUtil`val2seq_of_char)[nat](passengersAnnoyed)) ^ \"\t passengers got annoyed.\"));\nfor all waypoint in set (dom passengersAnnoyedStops) do\n(\n\nPrinter`Out((((\"\t\" ^ (VDMUtil`val2seq_of_char)[WaypointsEnum](waypoint)) ^ \" : \") ^ (VDMUtil`val2seq_of_char)[nat](passengersAnnoyedStops(waypoint))))\n);\nPrinter`Out(\"\n**********************************\");\nPrinter`Out(\"**********************************\")\n)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  goEnvironment() (() \u003d\u003d\u003e ())\n\tgoEnvironment()() \u003d\u003d\nskip\npublic  run() (() \u003d\u003d\u003e ())\n\trun()() \u003d\u003d\n(\n\nstart (new ClockTick());\nEvents();\nWorld`graphics.move()\n)\npublic  step() (() \u003d\u003d\u003e ())\n\tstep()() \u003d\u003d\n(\n\nEvents();\nWorld`timerRef.NotifyAndIncTime();\nWorld`timerRef.Awake();\nif busy\nthen\n(\n\nWorld`graphics.move();\nWorld`graphics.sleep()\n)else\n(\n\nreport()\n)\n)\nprivate  per isFinished \u003d\u003e (not busy)\nprivate  mutex(handleEvent)\nend Environment\n","class Passenger\nprivate static  nextPassengerId:nat :\u003d 1\nprivate  passengerId:nat :\u003d (undefined)\nprivate  goal:Waypoint :\u003d (undefined)\nprivate  inv((goal.IsStop)() \u003d true)\nprivate  annoyanceLimit:nat :\u003d (undefined)\nprivate  pickedUp:bool :\u003d (undefined)\nprivate  alreadyAnnoyed:bool :\u003d (undefined)\npublic  Passenger(Busstop) (Busstop \u003d\u003d\u003e Passenger)\n\tPassenger(Busstop)(destination) \u003d\u003d\n(\n\npassengerId :\u003d GetNextId();\ngoal :\u003d destination;\nannoyanceLimit :\u003d ((World`timerRef.GetTime)() + Config`PassengerAnnoyanceLimit);\npickedUp :\u003d false;\nalreadyAnnoyed :\u003d false;\nWorld`env.PassengerCount()\n)\n\tpre ((destination.IsStop)() \u003d true)\npublic  GetDestination() (() \u003d\u003d\u003e Waypoint)\n\tGetDestination()() \u003d\u003d\nreturn (goal)\npublic  GotOnBus() (() \u003d\u003d\u003e ())\n\tGotOnBus()() \u003d\u003d\n(\n\nWorld`graphics.passengerGotOnBus(passengerId);\npickedUp :\u003d true\n)\npublic  IsAnnoyedOfWaiting() (() \u003d\u003d\u003e bool)\n\tIsAnnoyedOfWaiting()() \u003d\u003d\nreturn (((annoyanceLimit \u003c (World`timerRef.GetTime)()) and (not pickedUp)))\npublic  AnnoyedOfWaiting() (() \u003d\u003d\u003e ())\n\tAnnoyedOfWaiting()() \u003d\u003d\n(\n\nif (IsAnnoyedOfWaiting() and (not alreadyAnnoyed))\nthen\n(\n\nalreadyAnnoyed :\u003d true;\nWorld`env.handleEvent(((((\"Passenger \" ^ Printer`natToString(passengerId)) ^ \" heading for \") ^ (VDMUtil`val2seq_of_char)[WaypointsEnum]((goal.GetId)())) ^ \" is annoyed of waiting.\"));\nWorld`env.AnnoyedPassenger(1, (goal.GetId)());\nWorld`graphics.passengerAnnoyed(passengerId)\n)\n)\npublic  Id() (() \u003d\u003d\u003e nat)\n\tId()() \u003d\u003d\nreturn (passengerId)\nprivate  GetNextId() (() \u003d\u003d\u003e nat)\n\tGetNextId()() \u003d\u003d\n(\n\nlet pid:nat \u003d nextPassengerId in (\n\nnextPassengerId :\u003d (nextPassengerId + 1);\nreturn (pid)\n)\n)\nprivate  mutex(GotOnBus, AnnoyedOfWaiting)\nend Passenger\n","class Printer\npublic static  Out(seq of (char)) (seq of (char) \u003d\u003d\u003e ())\n\tOut(seq of (char))(pstr) \u003d\u003d\nlet - \u003d (new IO().echo)((pstr ^ \"\n\")) in skip\npublic static  natToString(nat) (nat \u003d\u003d\u003e seq of (char))\n\tnatToString(nat)(n) \u003d\u003d\n(\n\nreturn ((VDMUtil`val2seq_of_char)[nat](n))\n)\npublic static  OutWithTS(seq of (char)) (seq of (char) \u003d\u003d\u003e ())\n\tOutWithTS(seq of (char))(pstr) \u003d\u003d\nlet - \u003d (new IO().echo)((((Printer`natToString((World`timerRef.GetTime)()) ^ \": \") ^ pstr) ^ \"\n\")) in skip\npublic static  intToString(int) (int \u003d\u003d\u003e seq of (char))\n\tintToString(int)(i) \u003d\u003d\n(\n\nreturn ((VDMUtil`val2seq_of_char)[int](i))\n)\nend Printer\n","class Road\npublic static  RoadNumber \u003d RoadNumber\nprivate  roadNmbr:RoadNumber :\u003d (undefined)\nprivate  roadLength:nat :\u003d (undefined)\nprivate  speedlimit:nat :\u003d (undefined)\nprivate  wps:set of (Waypoint) :\u003d {}\nprivate  timePenalty:nat :\u003d (undefined)\nprivate  inv((card wps) \u003e 1)\npublic  Road(RoadNumber, set of (Waypoint), nat) (RoadNumber * set of (Waypoint) * nat \u003d\u003d\u003e Road)\n\tRoad(RoadNumber, set of (Waypoint), nat)(roadnumber, waypoints, length) \u003d\u003d\n(\n\nroadNmbr :\u003d roadnumber;\nroadLength :\u003d length;\nspeedlimit :\u003d Config`DefaultRoadSpeedLimit;\nwps :\u003d waypoints;\ntimePenalty :\u003d (floor (roadLength / speedlimit))\n)\n\tpre ((card waypoints) \u003e 1)\npublic  Road(RoadNumber, set of (Waypoint), nat, nat) (RoadNumber * set of (Waypoint) * nat * nat \u003d\u003d\u003e Road)\n\tRoad(RoadNumber, set of (Waypoint), nat, nat)(roadnumber, waypoints, length, limit) \u003d\u003d\n(\n\nroadNmbr :\u003d roadnumber;\nroadLength :\u003d length;\nspeedlimit :\u003d limit;\nwps :\u003d waypoints;\ntimePenalty :\u003d (floor (roadLength / speedlimit))\n)\n\tpre ((card waypoints) \u003e 1)\npublic  Covers(set of (Waypoint)) (set of (Waypoint) \u003d\u003d\u003e bool)\n\tCovers(set of (Waypoint))(waypoints) \u003d\u003d\nreturn (({(w.GetId)() | w in set waypoints} \u003d {(w.GetId)() | w in set wps}))\npublic  GetWaypoints() (() \u003d\u003d\u003e set of (Waypoint))\n\tGetWaypoints()() \u003d\u003d\nreturn (wps)\npublic  OppositeEnd(Waypoint) (Waypoint \u003d\u003d\u003e Waypoint)\n\tOppositeEnd(Waypoint)(wp) \u003d\u003d\nlet opposite in set (wps \\ {wp}) in return (opposite)\n\tpre (wp in set wps)\npublic  GetSpeedLimit() (() \u003d\u003d\u003e nat)\n\tGetSpeedLimit()() \u003d\u003d\nreturn (speedlimit)\npublic  GetLength() (() \u003d\u003d\u003e nat)\n\tGetLength()() \u003d\u003d\nreturn (roadLength)\npublic  GetRoadNumber() (() \u003d\u003d\u003e RoadNumber)\n\tGetRoadNumber()() \u003d\u003d\nreturn (roadNmbr)\npublic  GetTimePenalty() (() \u003d\u003d\u003e nat)\n\tGetTimePenalty()() \u003d\u003d\nreturn (timePenalty)\nend Road\n","class TimeStamp\npublic static  stepLength:nat \u003d 1\nprivate  currentTime:nat :\u003d 0\nprivate  wakeUpMap:map (nat) to (nat) :\u003d {|-\u003e}\npublic  WaitRelative(nat) (nat \u003d\u003d\u003e ())\n\tWaitRelative(nat)(val) \u003d\u003d\nAddToWakeUpMap(threadid, (currentTime + val))\npublic  WaitAbsolute(nat) (nat \u003d\u003d\u003e ())\n\tWaitAbsolute(nat)(val) \u003d\u003d\nAddToWakeUpMap(threadid, val)\nprivate  AddToWakeUpMap(nat, nat) (nat * nat \u003d\u003d\u003e ())\n\tAddToWakeUpMap(nat, nat)(tId, val) \u003d\u003d\nwakeUpMap :\u003d (wakeUpMap ++ {tId |-\u003e val})\npublic  NotifyThread(nat) (nat \u003d\u003d\u003e ())\n\tNotifyThread(nat)(tId) \u003d\u003d\nwakeUpMap :\u003d ({tId} \u003c-: wakeUpMap)\npublic  NotifyAll() (() \u003d\u003d\u003e ())\n\tNotifyAll()() \u003d\u003d\nlet threadSet:set of (nat) \u003d {th | th in set (dom wakeUpMap) \u0026 (wakeUpMap(th) \u003c\u003d currentTime)} in for all t in set threadSet do\nNotifyThread(t)\npublic  NotifyAndIncTime() (() \u003d\u003d\u003e ())\n\tNotifyAndIncTime()() \u003d\u003d\n(\n\ncurrentTime :\u003d (currentTime + stepLength);\nNotifyAll()\n)\npublic  GetTime() (() \u003d\u003d\u003e nat)\n\tGetTime()() \u003d\u003d\nreturn (currentTime)\npublic  Awake() (() \u003d\u003d\u003e ())\n\tAwake()() \u003d\u003d\nskip\nprivate  per Awake \u003d\u003e (threadid not in set (dom wakeUpMap))\nprivate  per NotifyAndIncTime \u003d\u003e ((card {th | th in set (dom wakeUpMap) \u0026 (wakeUpMap(th) \u003d (currentTime + 1))}) \u003e 0)\nprivate  mutex(NotifyAll)\nprivate  mutex(AddToWakeUpMap)\nprivate  mutex(AddToWakeUpMap, NotifyAll)\nend TimeStamp\n","class Types\npublic static  Time \u003d Time\npublic static  Direction \u003d Direction\npublic static  Event \u003d Event\npublic static  BusRoute \u003d BusRoute\npublic static  Inflow \u003d Inflow\npublic static  Simulate \u003d Simulate\npublic static  WasteTime \u003d WasteTime\npublic static  public static DirectionToGraphics: (Direction -\u003e nat)\n\tDirectionToGraphics(d) \u003d\u003d\n(cases d :\n\u003cNORTH\u003e -\u003e 1,\n\u003cSOUTH\u003e -\u003e 5,\n\u003cEAST\u003e -\u003e 3,\n\u003cWEST\u003e -\u003e 7\n end)\nend Types\n","class WaitNotify\nprivate  waitset:set of (nat) :\u003d {}\npublic  Wait() (() \u003d\u003d\u003e ())\n\tWait()() \u003d\u003d\n(\n\nAddToWaitSet(threadid);\nAwake()\n)\npublic  Notify() (() \u003d\u003d\u003e ())\n\tNotify()() \u003d\u003d\nlet p in set waitset in waitset :\u003d (waitset \\ {p})\npublic  NotifyThread(nat) (nat \u003d\u003d\u003e ())\n\tNotifyThread(nat)(tId) \u003d\u003d\nwaitset :\u003d (waitset \\ {tId})\npublic  NotifyAll() (() \u003d\u003d\u003e ())\n\tNotifyAll()() \u003d\u003d\nwaitset :\u003d {}\nprivate  AddToWaitSet(nat) (nat \u003d\u003d\u003e ())\n\tAddToWaitSet(nat)(n) \u003d\u003d\nwaitset :\u003d (waitset union {n})\nprivate  Awake() (() \u003d\u003d\u003e ())\n\tAwake()() \u003d\u003d\nskip\nprivate  per Awake \u003d\u003e (threadid not in set waitset)\nprivate  mutex(AddToWaitSet)\nend WaitNotify\n","class Waypoint\npublic static  BusStops \u003d BusStops\npublic static  WaypointsEnum \u003d WaypointsEnum\nprotected  id:WaypointsEnum :\u003d (undefined)\nprotected  isStop:bool :\u003d false\npublic  Waypoint(WaypointsEnum) (WaypointsEnum \u003d\u003d\u003e Waypoint)\n\tWaypoint(WaypointsEnum)(s) \u003d\u003d\n(\n\nid :\u003d s\n)\npublic  GetId() (() \u003d\u003d\u003e WaypointsEnum)\n\tGetId()() \u003d\u003d\nreturn (id)\npublic  IsStop() (() \u003d\u003d\u003e bool)\n\tIsStop()() \u003d\u003d\nreturn (isStop)\npublic static  public static StringToBusStop: (seq of (char) -\u003e BusStops)\n\tStringToBusStop(busstop) \u003d\u003d\n(cases busstop :\n\"A\" -\u003e \u003cA\u003e,\n\"B\" -\u003e \u003cB\u003e,\n\"C\" -\u003e \u003cC\u003e,\n\"D\" -\u003e \u003cD\u003e,\n\"E\" -\u003e \u003cE\u003e,\n\"F\" -\u003e \u003cF\u003e,\n\"Central\" -\u003e \u003cCentral\u003e\n end)\npublic static  public static StringToWaypoint: (seq of (char) -\u003e WaypointsEnum)\n\tStringToWaypoint(wp) \u003d\u003d\n(cases wp :\n\"WP1\" -\u003e \u003cWP1\u003e,\n\"WP2\" -\u003e \u003cWP2\u003e,\n\"WP3\" -\u003e \u003cWP3\u003e,\n\"WP4\" -\u003e \u003cWP4\u003e,\n\"WP5\" -\u003e \u003cWP5\u003e,\n\"WP6\" -\u003e \u003cWP6\u003e,\n\"WP7\" -\u003e \u003cWP7\u003e\nothers StringToBusStop(wp)\n end)\nend Waypoint\n","class World\npublic static  graphics:gui_Graphics :\u003d new gui_Graphics()\npublic static  env:[Environment] :\u003d new Environment(\"inputvalues.txt\")\npublic static  timerRef:TimeStamp :\u003d new TimeStamp()\npublic  World() (() \u003d\u003d\u003e World)\n\tWorld()() \u003d\u003d\n(\n\nPrinter`Out(\"World created: \");\nPrinter`Out(\"------------------------------------------\n\")\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\ngraphics.init()\n)\npublic  StartSimulation() (() \u003d\u003d\u003e ())\n\tStartSimulation()() \u003d\u003d\n(\n\nenv.run()\n)\npublic  addWaypoint(WaypointsEnum) (WaypointsEnum \u003d\u003d\u003e Waypoint)\n\taddWaypoint(WaypointsEnum)(wp) \u003d\u003d\nenv.city.addWaypoint(wp)\npublic  addRoad(WaypointsEnum, WaypointsEnum, RoadNumber, nat, bool) (WaypointsEnum * WaypointsEnum * RoadNumber * nat * bool \u003d\u003d\u003e ())\n\taddRoad(WaypointsEnum, WaypointsEnum, RoadNumber, nat, bool)(wp1, wp2, roadNmbr, length, highspeed) \u003d\u003d\nenv.city.addRoad(wp1, wp2, roadNmbr, length, highspeed)\npublic  addBus(nat, seq of (RoadNumber)) (nat * seq of (RoadNumber) \u003d\u003d\u003e Bus)\n\taddBus(nat, seq of (RoadNumber))(lineNumber, route) \u003d\u003d\nenv.city.addBus(lineNumber, route)\nend World\n","class gui_Graphics\npublic  init() (() \u003d\u003d\u003e ())\n\tinit()() \u003d\u003d\nis not yet specified\npublic  busInRouteTo(nat, seq of (char), seq of (char), nat) (nat * seq of (char) * seq of (char) * nat \u003d\u003d\u003e ())\n\tbusInRouteTo(nat, seq of (char), seq of (char), nat)(busid, roadid, waypoint, time) \u003d\u003d\nis not yet specified\npublic  move() (() \u003d\u003d\u003e ())\n\tmove()() \u003d\u003d\nis not yet specified\npublic  sleep() (() \u003d\u003d\u003e ())\n\tsleep()() \u003d\u003d\nis not yet specified\npublic  passengerAtCentral(nat, seq of (char)) (nat * seq of (char) \u003d\u003d\u003e ())\n\tpassengerAtCentral(nat, seq of (char))(id, waypoint) \u003d\u003d\nis not yet specified\npublic  passengerAnnoyed(nat) (nat \u003d\u003d\u003e ())\n\tpassengerAnnoyed(nat)(id) \u003d\u003d\nis not yet specified\npublic  passengerGotOnBus(nat) (nat \u003d\u003d\u003e ())\n\tpassengerGotOnBus(nat)(id) \u003d\u003d\nis not yet specified\npublic  inflowChanged(nat) (nat \u003d\u003d\u003e ())\n\tinflowChanged(nat)(id) \u003d\u003d\nis not yet specified\npublic  busAdded(nat) (nat \u003d\u003d\u003e ())\n\tbusAdded(nat)(id) \u003d\u003d\nis not yet specified\npublic  busStopping(nat) (nat \u003d\u003d\u003e ())\n\tbusStopping(nat)(id) \u003d\u003d\nis not yet specified\npublic  busPassengerCountChanged(nat, nat) (nat * nat \u003d\u003d\u003e ())\n\tbusPassengerCountChanged(nat, nat)(busid, count) \u003d\u003d\nis not yet specified\nend gui_Graphics\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n","class VDMUtil\npublic static  public static set2seq[(T)]: (set of (@T) +\u003e seq of (@T))\n\tset2seq(x) \u003d\u003d\nis not yet specified\npublic static  public static get_file_pos: (() +\u003e [(seq of (char) * nat * nat * seq of (char) * seq of (char))])\n\tget_file_pos() \u003d\u003d\nis not yet specified\npublic static  public static val2seq_of_char[(T)]: (@T +\u003e seq of (char))\n\tval2seq_of_char(x) \u003d\u003d\nis not yet specified\npublic static  public static seq_of_char2val[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tseq_of_char2val(s) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic static  public static classname[(T)]: (@T -\u003e [seq1 of (char)])\n\tclassname(s) \u003d\u003d\nis not yet specified\nend VDMUtil\n","class MATH\npublic static  public static sin: (real +\u003e real)\n\tsin(v) \u003d\u003d\nis not yet specified\n\tpost ((abs RESULT) \u003c\u003d 1)\npublic static  public static cos: (real +\u003e real)\n\tcos(v) \u003d\u003d\nis not yet specified\n\tpost ((abs RESULT) \u003c\u003d 1)\npublic static  public static tan: (real -\u003e real)\n\ttan(a) \u003d\u003d\nis not yet specified\n\tpre (cos(a) \u003c\u003e 0)\npublic static  public static cot: (real -\u003e real)\n\tcot(a) \u003d\u003d\nis not yet specified\n\tpre (sin(a) \u003c\u003e 0)\npublic static  public static asin: (real -\u003e real)\n\tasin(a) \u003d\u003d\nis not yet specified\n\tpre ((abs a) \u003c\u003d 1)\npublic static  public static acos: (real -\u003e real)\n\tacos(a) \u003d\u003d\nis not yet specified\n\tpre ((abs a) \u003c\u003d 1)\npublic static  public static atan: (real +\u003e real)\n\tatan(v) \u003d\u003d\nis not yet specified\npublic static  public static acot: (real +\u003e real)\n\tacot(a) \u003d\u003d\natan((1 / a))\n\tpre (a \u003c\u003e 0)\npublic static  public static sqrt: (real -\u003e real)\n\tsqrt(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e\u003d 0)\npublic static  public static pi_f: (() +\u003e real)\n\tpi_f() \u003d\u003d\nis not yet specified\npublic static  srand(int) (int \u003d\u003d\u003e ())\n\tsrand(int)(a) \u003d\u003d\nlet -:int \u003d MATH`srand2(a) in skip\n\tpre (a \u003e\u003d -1)\npublic static  rand(int) (int \u003d\u003d\u003e int)\n\trand(int)(a) \u003d\u003d\nis not yet specified\npublic static  srand2(int) (int \u003d\u003d\u003e int)\n\tsrand2(int)(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e\u003d -1)\npublic static  public static exp: (real +\u003e real)\n\texp(a) \u003d\u003d\nis not yet specified\npublic static  public static ln: (real -\u003e real)\n\tln(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e 0)\npublic static  public static log: (real -\u003e real)\n\tlog(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e 0)\npublic static  public static fac: (nat -\u003e nat1)\n\tfac(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003c 21)\npublic static  pi:real \u003d 3.141592653589793\nend MATH\n"]