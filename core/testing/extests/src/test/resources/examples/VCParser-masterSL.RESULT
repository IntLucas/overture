["glass:token \u003d mk_token(\"Glass\")","liquid:token \u003d mk_token(\"liquid\")","metal:token \u003d mk_token(\"metal\")","plastic:token \u003d mk_token(\"plastic\")","all_material:set of (token) \u003d {glass, liquid, metal, plastic}","unpacking_inital:Phase \u003d mk_Phase({}, all_material, 5)","sorting_inital:Phase \u003d mk_Phase({}, all_material, 6)","assay_inital:Phase \u003d mk_Phase({}, all_material, 5)","compaction_inital:Phase \u003d mk_Phase({}, {glass, metal, plastic}, 3)","storage_inital:Phase \u003d mk_Phase({}, {glass, metal, plastic}, 50)","coninfo_inital:map (?) to (?) \u003d {|-\u003e}","cid1:ContainerId \u003d mk_token(42)","phases_inital:map (token) to (Phase) \u003d {mk_token(\"Unpacking\") |-\u003e unpacking_inital, mk_token(\"Sorting\") |-\u003e sorting_inital, mk_token(\"Assay\") |-\u003e assay_inital, mk_token(\"Compaction\") |-\u003e compaction_inital, mk_token(\"Storage\") |-\u003e storage_inital}","tracker_inital:Tracker \u003d mk_Tracker(coninfo_inital, phases_inital)","private SetUp: (() -\u003e Tracker)\n\tSetUp() \u003d\u003d\ntracker_inital","Tracker \u003d Tracker\n\tinv mk_Tracker(containers, phases) \u003d\u003d (Consistent(containers, phases) and (PhasesDistinguished(phases) and MaterialSafe(containers, phases)))","ContainerInfo \u003d ContainerInfo","PhaseInfo \u003d PhaseInfo","Container \u003d Container","Phase \u003d Phase\n\tinv p \u003d\u003d (((card (p.contents)) \u003c\u003d (p.capacity)) and ((p.expected_materials) \u003c\u003e {}))","ContainerId \u003d ContainerId","PhaseId \u003d PhaseId","Material \u003d Material","private Introduce: (Tracker * ContainerId * real * Material -\u003e Tracker)\n\tIntroduce(trk, cid, quan, mat) \u003d\u003d\nmk_Tracker(((trk.containers) munion {cid |-\u003e mk_Container(quan, mat)}), (trk.phases))\n\tpre (cid not in set (dom (trk.containers)))","private Permission: (Tracker * ContainerId * PhaseId -\u003e bool)\n\tPermission(mk_Tracker(containers, phases), cid, dest) \u003d\u003d\n((cid in set (dom containers)) and ((dest in set (dom phases)) and (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) and ((containers(cid).material) in set (phases(dest).expected_materials)))))","private Remove: (Tracker * ContainerId * PhaseId -\u003e Tracker)\n\tRemove(mk_Tracker(containers, phases), cid, source) \u003d\u003d\nlet pha:Phase \u003d mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)) in mk_Tracker(containers, (phases ++ {source |-\u003e pha}))\n\tpre ((source in set (dom phases)) and (cid in set (phases(source).contents)))","private Move: (Tracker * ContainerId * PhaseId * PhaseId -\u003e Tracker)\n\tMove(trk, cid, ptoid, pfromid) \u003d\u003d\nlet cont:Phase \u003d (trk.phases)(ptoid) in let pha:Phase \u003d mk_Phase(((cont.contents) union {cid}), (cont.expected_materials), (cont.capacity)) in mk_Tracker((trk.containers), ((Remove(trk, cid, pfromid).phases) ++ {ptoid |-\u003e pha}))\n\tpre (Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid))","private Delete: (Tracker * ContainerId * PhaseId -\u003e Tracker)\n\tDelete(tkr, cid, source) \u003d\u003d\nmk_Tracker(({cid} \u003c-: (tkr.containers)), (Remove(tkr, cid, source).phases))\n\tpre pre_Remove(tkr, cid, source)","private Consistent: (ContainerInfo * PhaseInfo -\u003e bool)\n\tConsistent(containers, phases) \u003d\u003d\n(forall ph in set (rng phases) \u0026 ((ph.contents) subset (dom containers)))","private PhasesDistinguished: (PhaseInfo -\u003e bool)\n\tPhasesDistinguished(phases) \u003d\u003d\n(not (exists p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) and (((phases(p1).contents) inter (phases(p2).contents)) \u003c\u003e {}))))","private MaterialSafe: (ContainerInfo * PhaseInfo -\u003e bool)\n\tMaterialSafe(containers, phases) \u003d\u003d\n(forall ph in set (rng phases) \u0026 (forall cid in set (ph.contents) \u0026 ((cid in set (dom containers)) and ((containers(cid).material) in set (ph.expected_materials)))))"]