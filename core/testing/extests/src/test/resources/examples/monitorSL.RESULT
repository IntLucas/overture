["state Metroof\n[doors : (\u003cClosed\u003e | \u003cOpen\u003e), train : (\u003cMoving\u003e | \u003cStopped\u003e)]\n\tinv mk_Metro(doors, train) \u003d\u003d (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))\n\tinit metro \u003d\u003d (metro \u003d mk_Metro(\u003cClosed\u003e, \u003cStopped\u003e))","Accelerate (() \u003d\u003d\u003e ())\n\tAccelerate() \u003d\u003d\n(\n\ntrain :\u003d \u003cMoving\u003e\n)\n\tpre (doors \u003d \u003cClosed\u003e)","Break (() \u003d\u003d\u003e ())\n\tBreak() \u003d\u003d\n(\n\ntrain :\u003d \u003cStopped\u003e\n)","Open (() \u003d\u003d\u003e ())\n\tOpen() \u003d\u003d\n(\n\ndoors :\u003d \u003cOpen\u003e\n)\n\tpre (train \u003d \u003cStopped\u003e)","Close (() \u003d\u003d\u003e ())\n\tClose() \u003d\u003d\n(\n\ndoors :\u003d \u003cClosed\u003e\n)","state Metroof\n[doorsopen : bool, trainmoving : bool]\n\tinv mk_Metro(doorsopen, trainmoving) \u003d\u003d (not (doorsopen and trainmoving))\n\tinit metro \u003d\u003d (metro \u003d mk_Metro(false, false))","Accelerate()\n\text [wr[trainmoving]?, rd[doorsopen]?]\n\tpre (not doorsopen)\n\tpost trainmoving","Break()\n\text [wr[trainmoving]?]\n\tpost (not trainmoving)","Open()\n\text [wr[doorsopen]?, rd[trainmoving]?]\n\tpre (not trainmoving)\n\tpost doorsopen","Close()\n\text [wr[doorsopen]?]\n\tpost (not doorsopen)","state Metroof\n[doors : (\u003cClosed\u003e | \u003cOpen\u003e), train : (\u003cMoving\u003e | \u003cStopped\u003e), bellon : [Time]]\n\tinv mk_Metro(doors, train, bellon) \u003d\u003d (not ((doors \u003d \u003cOpen\u003e) and (train \u003d \u003cMoving\u003e)))\n\tinit metro \u003d\u003d (metro \u003d mk_Metro(\u003cClosed\u003e, \u003cStopped\u003e, nil))","Time \u003d Time","Accelerate (() \u003d\u003d\u003e ())\n\tAccelerate() \u003d\u003d\n(\n\ntrain :\u003d \u003cMoving\u003e\n)\n\tpre (doors \u003d \u003cOpen\u003e)","Break (() \u003d\u003d\u003e ())\n\tBreak() \u003d\u003d\n(\n\ntrain :\u003d \u003cStopped\u003e\n)","Open (() \u003d\u003d\u003e ())\n\tOpen() \u003d\u003d\n(\n\ndoors :\u003d \u003cOpen\u003e\n)\n\tpre (train \u003d \u003cStopped\u003e)","CloseDepressed (Time \u003d\u003d\u003e ())\n\tCloseDepressed(t) \u003d\u003d\n(\n\nbellon :\u003d t\n)\n\tpre (bellon \u003d nil)","CloseReleased (Time \u003d\u003d\u003e ())\n\tCloseReleased(t) \u003d\u003d\n(\n\nif ((t + 3) \u003e\u003d bellon)\nthen\ndoors :\u003d \u003cClosed\u003eelse\nskip;\nbellon :\u003d nil\n)\n\tpre (bellon \u003c\u003e nil)","Time \u003d Time\n\tinv t \u003d\u003d (t \u003e 0)","Interval \u003d Interval\n\tinv mk_Interval(s, e) \u003d\u003d (s \u003c e)","LifeTime \u003d LifeTime\n\tinv s \u003d\u003d (forall i in set {1, ... ,((len s) - 1)} \u0026 ((s(i).stop) \u003c (s((i + 1)).start)))","System \u003d System\n\tinv mk_System(train, doors, bell, closebut, closeassist) \u003d\u003d (NotMovingAndOpen(train, doors) and (BellOnWhenCloseBut(bell, closebut) and CloseAssistAfter3Secs(closeassist, bell)))","private NotMovingAndOpen: (LifeTime * LifeTime -\u003e bool)\n\tNotMovingAndOpen(train, doors) \u003d\u003d\n(forall i in set (inds train), j in set (inds doors) \u0026 (not OverlappingIntervals(train(i), doors(j))))","private CloseAssistAfter3Secs: (LifeTime * LifeTime -\u003e bool)\n\tCloseAssistAfter3Secs(closeassist, bell) \u003d\u003d\n(forall i in set (inds closeassist) \u0026 (exists j in set (inds bell) \u0026 (((bell(j).stop) \u003e\u003d ((bell(j).start) + 3)) and ((closeassist(i).start) \u003d ((bell(j).start) + 3)))))","private BellOnWhenCloseBut: (LifeTime * LifeTime -\u003e bool)\n\tBellOnWhenCloseBut(bell, closebut) \u003d\u003d\n(forall i in set (inds bell) \u0026 (exists j in set (inds closebut) \u0026 SubInterval(bell(i), closebut(j))))","private OverlappingIntervals: (Interval * Interval -\u003e bool)\n\tOverlappingIntervals(int1, int2) \u003d\u003d\n(undefined)","private SubInterval: (Interval * Interval -\u003e bool)\n\tSubInterval(int1, int2) \u003d\u003d\n(undefined)"]