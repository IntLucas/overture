["class MATH\npublic static  public static sin: (real +\u003e real)\n\tsin(v) \u003d\u003d\nis not yet specified\n\tpost ((abs RESULT) \u003c\u003d 1)\npublic static  public static cos: (real +\u003e real)\n\tcos(v) \u003d\u003d\nis not yet specified\n\tpost ((abs RESULT) \u003c\u003d 1)\npublic static  public static tan: (real -\u003e real)\n\ttan(a) \u003d\u003d\nis not yet specified\n\tpre (cos(a) \u003c\u003e 0)\npublic static  public static cot: (real -\u003e real)\n\tcot(a) \u003d\u003d\nis not yet specified\n\tpre (sin(a) \u003c\u003e 0)\npublic static  public static asin: (real -\u003e real)\n\tasin(a) \u003d\u003d\nis not yet specified\n\tpre ((abs a) \u003c\u003d 1)\npublic static  public static acos: (real -\u003e real)\n\tacos(a) \u003d\u003d\nis not yet specified\n\tpre ((abs a) \u003c\u003d 1)\npublic static  public static atan: (real +\u003e real)\n\tatan(v) \u003d\u003d\nis not yet specified\npublic static  public static acot: (real +\u003e real)\n\tacot(a) \u003d\u003d\natan((1 / a))\n\tpre (a \u003c\u003e 0)\npublic static  public static sqrt: (real -\u003e real)\n\tsqrt(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e\u003d 0)\npublic static  public static pi_f: (() +\u003e real)\n\tpi_f() \u003d\u003d\nis not yet specified\npublic static  srand(int) (int \u003d\u003d\u003e ())\n\tsrand(int)(a) \u003d\u003d\nlet -:int \u003d MATH`srand2(a) in skip\n\tpre (a \u003e\u003d -1)\npublic static  rand(int) (int \u003d\u003d\u003e int)\n\trand(int)(a) \u003d\u003d\nis not yet specified\npublic static  srand2(int) (int \u003d\u003d\u003e int)\n\tsrand2(int)(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e\u003d -1)\npublic static  public static exp: (real +\u003e real)\n\texp(a) \u003d\u003d\nis not yet specified\npublic static  public static ln: (real -\u003e real)\n\tln(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e 0)\npublic static  public static log: (real -\u003e real)\n\tlog(a) \u003d\u003d\nis not yet specified\n\tpre (a \u003e 0)\npublic static  pi:real \u003d 3.141592653589793\nend MATH\n","class Mathematics\nprivate static  pi:real \u003d 3.14\nprivate static  Angle \u003d Angle\n\tinv a \u003d\u003d ((a \u003e\u003d 0) and (a \u003c\u003d (2 * pi)))\nprivate  private  acos((x:real))res:Angle\n\tpost inv_Angle(res)\nprivate  private  sqrt((r:real))res:real\n\tpost ((res ** 2) \u003d r)\nend Mathematics\n","class Parallelogram is subclass of [Quadrilateral]\nprivate  inv((length(v1) \u003d length(v3)) and (length(v2) \u003d length(v4)))\npublic  GetAngle() (() \u003d\u003d\u003e real)\n\tGetAngle()() \u003d\u003d\nlet math:MATH \u003d new MATH() in return ((math.acos)((inproduct(v1, v2) / (length(v1) * length(v2)))))\nend Parallelogram\n","class Quadrilateral is subclass of [Vector]\nprivate  position:vector :\u003d NullVector\nprotected  v1:vector :\u003d NullVector\nprotected  v2:vector :\u003d NullVector\nprotected  v3:vector :\u003d NullVector\nprotected  v4:vector :\u003d NullVector\nprivate  inv(add(add(v1, v2), add(v3, v4)) \u003d NullVector)\npublic  Move(Position, Position) (Position * Position \u003d\u003d\u003e ())\n\tMove(Position, Position)(p1, p2) \u003d\u003d\nposition :\u003d add(position, mk_vector(p1, p2))\npublic  SetShape(Position, Position, Position, Position) (Position * Position * Position * Position \u003d\u003d\u003e ())\n\tSetShape(Position, Position, Position, Position)(p1, p2, p3, p4) \u003d\u003d\n(\n\natomic (v1 :\u003d mk_vector(p1, p2), v2 :\u003d mk_vector(p2, p3), v3 :\u003d mk_vector(p3, p4), v4 :\u003d mk_vector(p4, p1))\n)\npublic  Display() (() \u003d\u003d\u003e ())\n\tDisplay()() \u003d\u003d\nis not yet specified\nend Quadrilateral\n","class Rectangle is subclass of [Parallelogram]\nprivate  inv(inproduct(v1, v2) \u003d 0)\nend Rectangle\n","class Rhombus is subclass of [Parallelogram]\nprivate  inv(length(v1) \u003d length(v2))\nend Rhombus\n","class Square is subclass of [Rhombus, Rectangle]\nend Square\n","class Vector\npublic static  NullVector:vector \u003d mk_vector(mk_(0, 0), mk_(0, 0))\npublic static  vector \u003d vector\npublic static  Position \u003d Position\npublic static  Coordinate \u003d Coordinate\npublic  public inproduct: (vector * vector -\u003e real)\n\tinproduct(v1, v2) \u003d\u003d\nlet mk_vector(mk_(hd1x, hd1y), mk_(tl1x, tl1y)):vector \u003d v1, mk_vector(mk_(hd2x, hd2y), mk_(tl2x, tl2y)):vector \u003d v2 in (((tl1x - hd1x) * (tl2x - hd2x)) + ((tl1y - hd1y) * (tl2y - hd2y)))\npublic  public length: (vector -\u003e real)\n\tlength(v) \u003d\u003d\nlet mk_vector(mk_(hdx, hdy), mk_(tlx, tly)):vector \u003d v in let math:MATH \u003d new MATH() in (math.sqrt)((((tlx - hdx) ** 2) + ((tly - hdy) ** 2)))\npublic  public add: (vector * vector -\u003e vector)\n\tadd(v1, v2) \u003d\u003d\nlet mk_vector(hd1, mk_(tl1x, tl1y)):vector \u003d v1, mk_vector(mk_(hd2x, hd2y), mk_(tl2x, tl2y)):vector \u003d v2 in mk_vector(hd1, mk_((tl1x + (tl2x - hd2x)), (tl1y + (tl2y - hd2y))))\nend Vector\n","class WorkSpace is subclass of [Vector]\nprivate static  Token \u003d Token\nprivate  screen:map (Token) to (Quadrilateral) :\u003d {|-\u003e}\nprivate  LookUp(Token) (Token \u003d\u003d\u003e Quadrilateral)\n\tLookUp(Token)(qid) \u003d\u003d\nreturn (screen(qid))\n\tpre (qid in set (dom screen))\nprivate  GetAngle(Token) (Token \u003d\u003d\u003e real)\n\tGetAngle(Token)(qid) \u003d\u003d\nlet scrn:Parallelogram \u003d screen(qid) in return ((scrn.GetAngle)())\n\tpre ((qid in set (dom screen)) and isofclass(Parallelogram,screen(qid)))\nprivate  Display(Token, Quadrilateral) (Token * Quadrilateral \u003d\u003d\u003e ())\n\tDisplay(Token, Quadrilateral)(qid, q) \u003d\u003d\n(\n\nscreen :\u003d (screen munion {qid |-\u003e q});\nq.Display()\n)\n\tpre (q not in set (rng screen))\nprivate  UnDisplay(Token) (Token \u003d\u003d\u003e ())\n\tUnDisplay(Token)(qid) \u003d\u003d\nscreen :\u003d ({qid} \u003c-: screen)\n\tpre (qid in set (dom screen))\nprivate  Move(Token, (nat * nat), (nat * nat)) (Token * (nat * nat) * (nat * nat) \u003d\u003d\u003e ())\n\tMove(Token, (nat * nat), (nat * nat))(qid, p1, p2) \u003d\u003d\n(\nscrn:Quadrilateral :\u003d screen(qid)\n\nUnDisplay(qid);\nscrn.Move(p1, p2);\nDisplay(qid, scrn)\n)\n\tpre (qid in set (dom screen))\nend WorkSpace\n"]