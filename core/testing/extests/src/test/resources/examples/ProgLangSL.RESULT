["Literal \u003d Literal","State \u003d State","Goal \u003d Goal","Action \u003d Action","Planning_Problem \u003d Planning_Problem\n\tinv mk_Planning_Problem(AS, I, G) \u003d\u003d (forall l in set G \u0026 (((l in set I) or (exists A in set AS \u0026 (l in set (A.add)))) and ((not (G subset I)) and (forall A in set AS \u0026 (not (exists p:Literal \u0026 ((p in set (A.add)) and (p in set (A.del)))))))))","Action_id \u003d Action_id","Action_instances \u003d Action_instances","Arc \u003d Arc","Bounded_Poset \u003d Bounded_Poset\n\tinv p \u003d\u003d (forall x, y in set get_nodes(p) \u0026 (((not (before(x, y, p) and before(y, x, p))) and (x \u003c\u003e mk_token(\"pinit\"))) \u003d\u003e ((before(mk_token(\"pinit\"), x, p) and (x \u003c\u003e mk_token(\"goal\"))) \u003d\u003e before(x, mk_token(\"goal\"), p))))","Goal_instance \u003d Goal_instance","Goal_instances \u003d Goal_instances","state Partial_Planof\n[pp : Planning_Problem, Os : Action_instances, Ts : Bounded_Poset, Ps : Goal_instances, As : Goal_instances]\n\tinv mk_Partial_Plan(pp, Os, Ts, Ps, As) \u003d\u003d ((Os(mk_token(\"pinit\")) \u003d mk_Action([mk_token(\"pinit\")], {}, (pp.I), {})) and ((Os(mk_token(\"goal\")) \u003d mk_Action([mk_token(\"goal\")], (pp.G), {}, {})) and (((rng Os) subset ((pp.AS) union {Os(mk_token(\"pinit\")), Os(mk_token(\"goal\"))})) and (((dom Os) \u003d get_nodes(Ts)) and (((As inter Ps) \u003d {}) and (forall A in set (dom Os) \u0026 ((forall p in set (Os(A).pra) \u0026 (mk_Goal_instance(p, A) in set (Ps union As))) and (forall gi in set As \u0026 (exists A in set (dom Os) \u0026 achieve(Os, Ts, A, gi))))))))))","private get_nodes: (set of (Arc) -\u003e set of (Action_id))\n\tget_nodes(p) \u003d\u003d\n({(a.source) | a in set p} union {(a.dest) | a in set p})","private before: (Action_id * Action_id * set of (Arc) -\u003e bool)\n\tbefore(x, z, p) \u003d\u003d\n((mk_Arc(x, z) in set p) or (exists y in set get_nodes(p) \u0026 (before(x, y, p) and before(y, z, p))))","private possibly_before: (Action_id * Action_id * set of (Arc) -\u003e bool)\n\tpossibly_before(x, z, p) \u003d\u003d\n((x \u003c\u003e z) and (not before(z, x, p)))","private completion_of: (Bounded_Poset * Bounded_Poset -\u003e bool)\n\tcompletion_of(p, q) \u003d\u003d\n(forall x, y in set get_nodes(p) \u0026 (before(x, y, q) and before(x, y, p)))","private initposet: (() -\u003e Bounded_Poset)\n\tinitposet() \u003d\u003d\n{mk_Arc(mk_token(\"pinit\"), mk_token(\"goal\"))}","private add_node: (Action_id * Bounded_Poset -\u003e Bounded_Poset)\n\tadd_node(u, p) \u003d\u003d\n(p union {mk_Arc(mk_token(\"pinit\"), u), mk_Arc(u, mk_token(\"goal\"))})","private make_before: (Action_id * Action_id * Bounded_Poset -\u003e Bounded_Poset)\n\tmake_before(u, v, p) \u003d\u003d\n(if (possibly_before(u, v, p) and ({u, v} subset get_nodes(p)))\nthen (p union {mk_Arc(u, v)})\nelse p)","private  newid((isa:set of (Action_id)))i:Action_id\n\tpost (i not in set isa)","private achieve: (Action_instances * Bounded_Poset * Action_id * Goal_instance -\u003e bool)\n\tachieve(Os, Ts, A, mk_Goal_instance(p, O)) \u003d\u003d\n(before(A, O, Ts) and ((p in set (Os(A).add)) and (not (exists C in set (dom Os) \u0026 (possibly_before(C, O, Ts) and (possibly_before(A, C, Ts) and (p in set (Os(C).del))))))))","private declobber: (Action_instances * Bounded_Poset * Action_id * Goal_instance -\u003e bool)\n\tdeclobber(Os, Ts, NewA, mk_Goal_instance(q, C)) \u003d\u003d\n(before(C, NewA, Ts) or ((not (q in set (Os(NewA).del))) or (exists W in set (dom Os) \u0026 (before(NewA, W, Ts) and (before(W, C, Ts) and (q in set (Os(W).add)))))))","INIT([ppi]Planning_Problem)\n\text [wr[pp]Planning_Problem, wr[Os]Action_instances, wr[Ts]Bounded_Poset, wr[Ps]Goal_instances, wr[As]Goal_instances]\n\tpost ((pp \u003d ppi) and ((Os \u003d {mk_token(\"pinit\") |-\u003e mk_Action([mk_token(\"pinit\")], {}, (ppi.I), {}), mk_token(\"goal\") |-\u003e mk_Action([mk_token(\"goal\")], (ppi.G), {}, {})}) and ((Ts \u003d initposet()) and ((Ps \u003d {mk_Goal_instance(g, mk_token(\"goal\")) | g in set (ppi.G)}) and (As \u003d {})))))","ACHIEVE_1([gi]Goal_instance)\n\text [rd[Os]Action_instances, wr[Ts]Bounded_Poset, wr[Ps]Goal_instances, wr[As]Goal_instances]\n\tpre (gi in set Ps)\n\tpost (exists A in set (dom Os) \u0026 (achieve(Os, Ts, A, gi) and (completion_of(Ts, Ts~) and ((Ps \u003d (Ps~ \\ {gi})) and (As \u003d (As~ union {gi}))))))","ACHIEVE_2([gi]Goal_instance)\n\text [rd[pp]Planning_Problem, wr[Os]Action_instances, wr[Ts]Bounded_Poset, wr[Ps]Goal_instances, wr[As]Goal_instances]\n\tpre (gi in set Ps)\n\tpost let NewA:Action_id \u003d newid((dom Os~)) in (exists A in set (pp.AS) \u0026 ((Os \u003d (Os~ ++ {NewA |-\u003e A})) and (achieve(Os, Ts, NewA, gi) and (forall gj in set As~ \u0026 (declobber(Os, Ts, NewA, gj) and (completion_of(Ts, add_node(NewA, Ts~)) and ((Ps \u003d ((Ps~ \\ {gi}) union {mk_Goal_instance(p, NewA) | p in set (A.pra)})) and (As \u003d (As~ union {gi})))))))))"]