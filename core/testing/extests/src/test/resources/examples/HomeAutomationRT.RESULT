["class ActivePlanManager is subclass of [Strategy]\nprivate  activeTokens:inmap (TokenDevice) to (TransportPlan) :\u003d {|-\u003e}\nprivate  inv(forall x, y in set (dom activeTokens) \u0026 ((x \u003d y) \u003d\u003e (activeTokens(x) \u003d activeTokens(y))))\nprivate  busy:bool :\u003d false\nprivate  q_CR_out:CyberRail :\u003d (undefined)\nprivate  tokenDevices:set of (TokenDevice) :\u003d (undefined)\nprivate  q_Tok_in:seq of (MessageT) :\u003d []\nprivate  q_CR_in:seq of (MessageT) :\u003d []\nprivate  q_Tok_out:seq of (TransportPlan) :\u003d []\nprivate  state:State :\u003d \u003crun\u003e\npublic static  State \u003d State\nprotected  strategyInit() (() \u003d\u003d\u003e ())\n\tstrategyInit()() \u003d\u003d\n(\n\nstate :\u003d \u003chalt\u003e\n)\nprotected  strategyNotify() (() \u003d\u003d\u003e ())\n\tstrategyNotify()() \u003d\u003d\nskip\nprotected  strategyEnd() (() \u003d\u003d\u003e ())\n\tstrategyEnd()() \u003d\u003d\n(\n\nstate :\u003d \u003crun\u003e\n)\nprotected  handleEvents() (() \u003d\u003d\u003e ())\n\thandleEvents()() \u003d\u003d\nis not yet specified\npublic  ActivePlanManager() (() \u003d\u003d\u003e ActivePlanManager)\n\tActivePlanManager()() \u003d\u003d\n(\n\nskip\n)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  inactiveRoute(nat) (nat \u003d\u003d\u003e ())\n\tinactiveRoute(nat)(id_route) \u003d\u003d\n(\n\nduration (50) (\n\nfor all t in set (rng activeTokens) do\n(\n\nif (t.containsRoute)(id_route)\nthen\n(\n\nlet p:map (TransportPlan) to (TokenDevice) \u003d (inverse activeTokens) in q_CR_out.addToSystemQueue(mk_MessageTypes`CALCPLAN((t.getPlanAsNaviInput)(), p(t)))\n)\n)\n)\n)\npublic  addTransportPlan(TransportPlan, TokenDevice) (TransportPlan * TokenDevice \u003d\u003d\u003e ())\n\taddTransportPlan(TransportPlan, TokenDevice)(plan, tokenDevice) \u003d\u003d\n(\n\nactiveTokens :\u003d (activeTokens ++ {tokenDevice |-\u003e plan});\nq_Tok_out :\u003d (q_Tok_out ^ [plan])\n)\npublic  removeTransportPlan(TransportPlan, TokenDevice) (TransportPlan * TokenDevice \u003d\u003d\u003e ())\n\tremoveTransportPlan(TransportPlan, TokenDevice)(plan, tokenDevice) \u003d\u003d\n(\n\nactiveTokens :\u003d ({tokenDevice} \u003c-: activeTokens)\n)\npublic  getPlans() (() \u003d\u003d\u003e set of (TransportPlan))\n\tgetPlans()() \u003d\u003d\nreturn ((rng activeTokens))\npublic  handleEvent() (() \u003d\u003d\u003e ())\n\thandleEvent()() \u003d\u003d\n(\n\nif ((((len q_CR_in) + (len q_Tok_in)) + (len q_Tok_out)) \u003c\u003e 0)\nthen\n(\n\nif ((len q_CR_in) \u003c\u003e 0)\nthen\nhandleQ_CR_in()else\nif ((state \u003d \u003crun\u003e) and ((len q_Tok_out) \u003c\u003e 0))\nthen\nhandleQ_Tok_out()else\nif ((state \u003d \u003crun\u003e) and ((len q_Tok_in) \u003c\u003e 0))\nthen\nhandleQ_Tok_in()\n)else\nbusy :\u003d false\n)\nprivate  handleQ_Tok_out() (() \u003d\u003d\u003e ())\n\thandleQ_Tok_out()() \u003d\u003d\n(\n\nlet ptt_map:map (TransportPlan) to (TokenDevice) \u003d (inverse activeTokens), plan:TransportPlan \u003d (hd q_Tok_out) in (\n\nlet tokenDevice:TokenDevice \u003d ptt_map(plan) in (\n\ntokenDevice.notifyPassenger(plan)\n);\nq_Tok_out :\u003d (tl q_Tok_out)\n)\n)\n\tpre (((len q_Tok_out) \u003e 0) and (exists plan in set (rng activeTokens) \u0026 (plan \u003d (hd q_Tok_out))))\nprivate  handleQ_CR_in() (() \u003d\u003d\u003e ())\n\thandleQ_CR_in()() \u003d\u003d\n(\n\nbusy :\u003d true;\nlet msg:MessageT \u003d (hd q_CR_in) in (\n\ncases msg :\n  mk_RETURNPLAN(-, -) -\u003e handleTransportPlan(msg)  mk_STRATEGYNOTIFY(-) -\u003e handleInactiveRoute(msg)  mk_STRATEGYINIT() -\u003e handleStrategyInit()  mk_STRATEGYEND() -\u003e handleStrategyEnd() end\n);\nreduce_Q_CR()\n)\n\tpre ((len q_CR_in) \u003e 0)\nprivate  handleQ_Tok_in() (() \u003d\u003d\u003e ())\n\thandleQ_Tok_in()() \u003d\u003d\n(\n\nbusy :\u003d true;\nlet msg:MessageT \u003d (hd q_Tok_in) in (\n\ncases msg :\n  mk_REQUESTPLAN(-, -) -\u003e handleRequestPlan(msg) end\n);\nreduce_Q_Tok()\n)\n\tpre ((len q_Tok_in) \u003e 0)\nprivate  handleStrategyInit() (() \u003d\u003d\u003e ())\n\thandleStrategyInit()() \u003d\u003d\n(\n\nLogger`write(\"Read StrategyINIT \");\nLogger`write(time);\nstate :\u003d \u003chalt\u003e\n)\nprivate  handleStrategyEnd() (() \u003d\u003d\u003e ())\n\thandleStrategyEnd()() \u003d\u003d\n(\n\nstate :\u003d \u003crun\u003e\n)\nprivate  handleInactiveRoute(MessageT) (MessageT \u003d\u003d\u003e ())\n\thandleInactiveRoute(MessageT)(msg) \u003d\u003d\n(\n\nlet mk_STRATEGYNOTIFY(routeid):MessageT \u003d msg in (\n\ninactiveRoute(routeid)\n)\n)\nprivate  handleTransportPlan(MessageT) (MessageT \u003d\u003d\u003e ())\n\thandleTransportPlan(MessageT)(msg) \u003d\u003d\n(\n\nlet mk_RETURNPLAN(dto, tok):MessageT \u003d msg in (\n\naddTransportPlan(new TransportPlan((dto.routeList), (dto.choice), (dto.id_token)), tok)\n)\n)\nprivate  handleRequestPlan(MessageT) (MessageT \u003d\u003d\u003e ())\n\thandleRequestPlan(MessageT)(msg) \u003d\u003d\n(\n\nlet mk_REQUESTPLAN(navi, tok):MessageT \u003d msg in (\n\nq_CR_out.addToSystemQueue(mk_MessageTypes`CALCPLAN(navi, tok))\n)\n)\nprivate  reduce_Q_Tok() (() \u003d\u003d\u003e ())\n\treduce_Q_Tok()() \u003d\u003d\nq_Tok_in :\u003d (tl q_Tok_in)\n\tpre ((len q_Tok_in) \u003e 0)\nprivate  reduce_Q_CR() (() \u003d\u003d\u003e ())\n\treduce_Q_CR()() \u003d\u003d\n(\n\nq_CR_in :\u003d (tl q_CR_in)\n)\n\tpre ((len q_CR_in) \u003e 0)\npublic  setQ_CR_out(CyberRail) (CyberRail \u003d\u003d\u003e ())\n\tsetQ_CR_out(CyberRail)(cr) \u003d\u003d\n(\n\nq_CR_out :\u003d cr\n)\npublic  addToSystemQueue(MessageT) (MessageT \u003d\u003d\u003e ())\n\taddToSystemQueue(MessageT)(msg) \u003d\u003d\n(\n\nq_CR_in :\u003d (q_CR_in ^ [msg])\n)\npublic async  addToClientQueue(MessageT) (MessageT \u003d\u003d\u003e ())\n\taddToClientQueue(MessageT)(msg) \u003d\u003d\n(\n\nq_Tok_in :\u003d (q_Tok_in ^ [msg])\n)\nprotected  thread while true do (\n\nhandleEvent()\n)\nprivate  per handleEvent \u003d\u003e ((((len q_CR_in) + (len q_Tok_in)) + (len q_Tok_out)) \u003e 0)\nprivate  per isFinished \u003d\u003e ((((len q_CR_in) + (len q_Tok_in)) + (len q_Tok_out)) \u003d 0)\nprivate  mutex(reduce_Q_Tok, addToClientQueue)\nprivate  mutex(reduce_Q_CR, addToSystemQueue)\nprivate  mutex(addToSystemQueue)\nprivate  mutex(addToClientQueue)\nprivate  mutex(handleEvent)\nprivate  mutex(reduce_Q_Tok)\nprivate  mutex(reduce_Q_CR)\nend ActivePlanManager\n","system CRSystem\nprivate  cpu1:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu3:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu4:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu5:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu6:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu7:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu8:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu9:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu10:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu11:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu12:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu2:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  bus1:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000.0, {cpu1, cpu2})\nprivate  bus2:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu3, cpu2})\nprivate  bus3:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu4, cpu2})\nprivate  bus4:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu5, cpu2})\nprivate  bus5:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu6, cpu2})\nprivate  bus6:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu7, cpu2})\nprivate  bus7:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu8, cpu2})\nprivate  bus8:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu9, cpu2})\nprivate  bus9:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu10, cpu2})\nprivate  bus10:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu11, cpu2})\nprivate  bus12:BUS :\u003d new BUS(\u003cFCFS\u003e, 5, {cpu12, cpu2})\npublic static  tok1:TokenDevice :\u003d new TokenDevice(1)\npublic static  tok2:TokenDevice :\u003d new TokenDevice(2)\npublic static  tok3:TokenDevice :\u003d new TokenDevice(3)\npublic static  tok4:TokenDevice :\u003d new TokenDevice(4)\npublic static  tok5:TokenDevice :\u003d new TokenDevice(5)\npublic static  tok6:TokenDevice :\u003d new TokenDevice(6)\npublic static  tok7:TokenDevice :\u003d new TokenDevice(7)\npublic static  tok8:TokenDevice :\u003d new TokenDevice(8)\npublic static  tok9:TokenDevice :\u003d new TokenDevice(9)\npublic static  tok10:TokenDevice :\u003d new TokenDevice(10)\npublic static  cb:CyberRail :\u003d new CyberRail()\npublic static  apm:ActivePlanManager :\u003d new ActivePlanManager()\npublic static  grid:RailwayGrid :\u003d new RailwayGrid()\nprivate  CRSystem() (() \u003d\u003d\u003e CRSystem)\n\tCRSystem()() \u003d\u003d\n(\n\ncpu1.deploy(cb);\ncpu2.deploy(apm);\ncpu1.deploy(grid);\ncpu3.deploy(tok1);\ncpu4.deploy(tok2);\ncpu5.deploy(tok3);\ncpu6.deploy(tok4);\ncpu7.deploy(tok5);\ncpu8.deploy(tok6);\ncpu9.deploy(tok7);\ncpu10.deploy(tok8);\ncpu11.deploy(tok9);\ncpu12.deploy(tok10)\n)\nend CRSystem\n","class Company is subclass of [Environment]\nprivate  cyberrail:CyberRail :\u003d (undefined)\npublic  Company(seq of (char)) (seq of (char) \u003d\u003d\u003e Company)\n\tCompany(seq of (char))(fname) \u003d\u003d\nself.Environment(fname)\npublic  composeTransportGrid() (() \u003d\u003d\u003e ())\n\tcomposeTransportGrid()() \u003d\u003d\nis not yet specified\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  stimulate() (() \u003d\u003d\u003e ())\n\tstimulate()() \u003d\u003d\n(\n\nif ((len inlines) \u003e 0)\nthen\n(\ndone:bool :\u003d false\n\n(\n\nwhile (not done) do (\n\nlet mk_(nav, tid, route_id, t) \u003d (hd inlines) in if (t \u003c\u003d time)\nthen\n(\n\ncyberrail.setInactiveRoute(route_id);\ninlines :\u003d (tl inlines)\n)else\ndone :\u003d true\n)\n)\n)else\nbusy :\u003d false\n)\nprotected  thread while true do (\n\nif busy\nthen\nstimulate()\n)\nprivate  per isFinished \u003d\u003e (not busy)\nend Company\n","class Customer is subclass of [Environment]\npublic static  tokenDevices:map (nat) to (TokenDevice) :\u003d {|-\u003e}\nprivate  cyberrail:CyberRail :\u003d (undefined)\npublic  Customer(seq of (char)) (seq of (char) \u003d\u003d\u003e Customer)\n\tCustomer(seq of (char))(fname) \u003d\u003d\n(\n\nlet mk_(-, input) \u003d ((io.freadval))[seq of (inline)](fname) in inlines :\u003d input;\noutfileName :\u003d (\"Results for \" ^ fname)\n)\npublic  Customer() (() \u003d\u003d\u003e Customer)\n\tCustomer()() \u003d\u003d\n(\n\ntokenDevices :\u003d {0 |-\u003e new TokenDevice(0)}\n)\npublic  addCyberRail(CyberRail) (CyberRail \u003d\u003d\u003e ())\n\taddCyberRail(CyberRail)(cr) \u003d\u003d\ncyberrail :\u003d cr\npublic  addTokenDevice(TokenDevice) (TokenDevice \u003d\u003d\u003e ())\n\taddTokenDevice(TokenDevice)(td) \u003d\u003d\ntokenDevices :\u003d (tokenDevices munion {(td.getTokenId)() |-\u003e td})\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  test() (() \u003d\u003d\u003e map (nat) to (TokenDevice))\n\ttest()() \u003d\u003d\nreturn (tokenDevices)\npublic  stimulate() (() \u003d\u003d\u003e ())\n\tstimulate()() \u003d\u003d\n(\n\nduration (1) (\n\nif ((len inlines) \u003e 0)\nthen\n(\ncurtime:nat :\u003d time\ndone:bool :\u003d false\n\n(\n\nwhile (not done) do (\n\nlet mk_(nav, tid, route_id, t) \u003d (hd inlines) in if (t \u003c time)\nthen\n(\n\nif (route_id \u003d nil)\nthen\ntokenDevices(tid).requestTransportPlan(nav)else\ncyberrail.addToStimuliQueue(mk_MessageTypes`INACTIVEROUTE(route_id));\nreduceInline();\ndone :\u003d ((len inlines) \u003d 0)\n)else\n(\n\ndone :\u003d true\n)\n)\n)\n)else\n(\n\nbusy :\u003d false\n)\n)\n)\nprivate  isDone() (() \u003d\u003d\u003e ())\n\tisDone()() \u003d\u003d\nskip\nprivate  reduceInline() (() \u003d\u003d\u003e ())\n\treduceInline()() \u003d\u003d\n(\n\nif ((len inlines) \u003e 0)\nthen\ninlines :\u003d (tl inlines)\n)\n\tpre ((len inlines) \u003e 0)\nprivate  inputStimuli() (() \u003d\u003d\u003e ())\n\tinputStimuli()() \u003d\u003d\n(\n\nduration (1) (\n\nif ((len inlines) \u003e 0)\nthen\n(\n\nstimulate()\n)else\n(\n\nbusy :\u003d false\n)\n)\n)\nprotected  thread periodic(2.0E9, 100, 1900, 0)(inputStimuli())\nprivate  mutex(addTokenDevice)\nprivate  mutex(stimulate)\nprivate  mutex(reduceInline)\nprivate  per isFinished \u003d\u003e (not busy)\nend Customer\n","class CyberRail\nprivate  normalState:bool :\u003d true\nprivate  curtime:nat :\u003d 0\nprivate  railway:RailwayGrid :\u003d (undefined)\nprivate  q_APM_out:ActivePlanManager :\u003d (undefined)\nprivate  q_Env_in:seq of (MessageT) :\u003d []\nprivate  q_APM_in:seq of (MessageT) :\u003d []\nprivate  busy:bool :\u003d false\nprivate  timeout:nat :\u003d 0\npublic static  NavigationInput \u003d NavigationInput\n\tinv n \u003d\u003d (((len (n.departureLocation)) \u003e 0) and ((len (n.arrivalLocation)) \u003e 0))\npublic static  String \u003d String\npublic static  Choice \u003d Choice\npublic  setRailwayGrid(RailwayGrid) (RailwayGrid \u003d\u003d\u003e ())\n\tsetRailwayGrid(RailwayGrid)(grid) \u003d\u003d\n(\n\nrailway :\u003d grid\n)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  calculateTransportPlan(NavigationInput, TokenDevice) (NavigationInput * TokenDevice \u003d\u003d\u003e [DTO])\n\tcalculateTransportPlan(NavigationInput, TokenDevice)(navInput, tokenDevice) \u003d\u003d\n(\ntempPlan:TransportPlan :\u003d (undefined)\ntempGrid:Grid :\u003d (railway.getGrid)()\n\nlet l \u003d {r | r in set tempGrid \u0026 (((r(1).departureLocation) \u003d (navInput.departureLocation)) and ((r((len r)).arrivalLocation) \u003d (navInput.arrivalLocation)))} in (\n\nif ((card l) \u003d 0)\nthen\n(\n\nreturn (nil)\n)else\nif ((navInput.transportChoice) \u003d \u003cCheapest\u003e)\nthen\ntempPlan :\u003d new TransportPlan(findCheapest(l), \u003cCheapest\u003e, (navInput.id_token))else\ntempPlan :\u003d new TransportPlan(findQuickest(l), \u003cQuickest\u003e, (navInput.id_token))\n);\nreturn ((tempPlan.getByValue)())\n)\n\tpre (exists r in set (railway.getGrid)() \u0026 (((r(1).departureLocation) \u003d (navInput.departureLocation)) and ((r((len r)).arrivalLocation) \u003d (navInput.arrivalLocation))))\npublic  setActiveRoute(nat) (nat \u003d\u003d\u003e ())\n\tsetActiveRoute(nat)(id_Route) \u003d\u003d\nis not yet specified\nprivate  findCheapest(Grid) (Grid \u003d\u003d\u003e [seq of (Route)])\n\tfindCheapest(Grid)(list) \u003d\u003d\n(\nsum:real :\u003d 0\ncheap:real :\u003d 9999\nrtn:seq of (Route) :\u003d []\n\nfor all s in set list do\n(\n\nsum :\u003d 0;\nfor in \u0027CyberRail\u0027 (CyberRail.vdmrt) at line 92:13rADefPatternBind[r \u003d Route]ADefPatternBind in s do\nsum :\u003d (sum + (r.fee));\nif (sum \u003c cheap)\nthen\n(\n\ncheap :\u003d sum;\nrtn :\u003d s\n)\n);\nreturn (rtn)\n)\nprivate  findQuickest(Grid) (Grid \u003d\u003d\u003e [seq of (Route)])\n\tfindQuickest(Grid)(list) \u003d\u003d\nfindCheapest(list)\npublic  setQ_APM_out(ActivePlanManager) (ActivePlanManager \u003d\u003d\u003e ())\n\tsetQ_APM_out(ActivePlanManager)(apm) \u003d\u003d\n(\n\nq_APM_out :\u003d apm\n)\npublic async  addToStimuliQueue(MessageT) (MessageT \u003d\u003d\u003e ())\n\taddToStimuliQueue(MessageT)(msg) \u003d\u003d\n(\n\nq_Env_in :\u003d (q_Env_in ^ [msg])\n)\npublic  addToSystemQueue(MessageT) (MessageT \u003d\u003d\u003e ())\n\taddToSystemQueue(MessageT)(msg) \u003d\u003d\n(\n\nq_APM_in :\u003d (q_APM_in ^ [msg])\n)\npublic  handleEvents() (() \u003d\u003d\u003e ())\n\thandleEvents()() \u003d\u003d\n(\n\nduration (0) (\n\nif (((len q_Env_in) \u003e 0) or ((len q_APM_in) \u003e 0))\nthen\n(\n\nbusy :\u003d true;\nif ((len q_Env_in) \u003e 0)\nthen\nhandleQ_Env_in()else\nif (normalState and ((len q_APM_in) \u003e 0))\nthen\nhandleQ_APM_in()\n)else\nbusy :\u003d false;\nif ((not normalState) and ((curtime + timeout) \u003c\u003d time))\nthen\nfinalizeInactiveRoute()\n)\n)\nprivate  handleQ_Env_in() (() \u003d\u003d\u003e ())\n\thandleQ_Env_in()() \u003d\u003d\n(\n\nlet msg:MessageT \u003d (hd q_Env_in) in (\n\ncases msg :\n  mk_INACTIVEROUTE(-) -\u003e handleInactiveRoute(msg)  mk_ACTIVEROUTE(-) -\u003e skip  mk_ADDROUTE(-) -\u003e skip  mk_REMOVEROUTE(-) -\u003e skip end\n);\nreduce_Q_Env()\n)\n\tpre ((len q_Env_in) \u003e 0)\nprivate  handleQ_APM_in() (() \u003d\u003d\u003e ())\n\thandleQ_APM_in()() \u003d\u003d\n(\n\nlet msg:MessageT \u003d (hd q_APM_in) in (\n\ncases msg :\n  mk_CALCPLAN(navi, tokenDevice) -\u003e handleCalcPlan(navi, tokenDevice) end\n);\nreduce_Q_APM()\n)\n\tpre ((len q_APM_in) \u003e 0)\nprivate  handleCalcPlan(NavigationInput, TokenDevice) (NavigationInput * TokenDevice \u003d\u003d\u003e ())\n\thandleCalcPlan(NavigationInput, TokenDevice)(navi, tokenDevice) \u003d\u003d\n(\n\nq_APM_out.addToSystemQueue(mk_MessageTypes`RETURNPLAN(calculateTransportPlan(navi, tokenDevice), tokenDevice))\n)\nprivate  handleInactiveRoute(MessageT) (MessageT \u003d\u003d\u003e ())\n\thandleInactiveRoute(MessageT)(msg) \u003d\u003d\n(\n\nnormalState :\u003d false;\ncurtime :\u003d time;\nlet mk_INACTIVEROUTE(routeid):MessageT \u003d msg in (\n\nq_APM_out.addToSystemQueue(mk_MessageTypes`STRATEGYINIT());\nrailway.setInactiveRoute(routeid);\nq_APM_out.addToSystemQueue(mk_MessageTypes`STRATEGYNOTIFY(routeid))\n)\n)\nprivate  finalizeInactiveRoute() (() \u003d\u003d\u003e ())\n\tfinalizeInactiveRoute()() \u003d\u003d\n(\n\nq_APM_out.addToSystemQueue(mk_MessageTypes`STRATEGYEND());\nnormalState :\u003d true\n)\npublic  setInactiveRoute(nat) (nat \u003d\u003d\u003e ())\n\tsetInactiveRoute(nat)(id_Route) \u003d\u003d\n(\n\nskip\n)\nprivate  reduce_Q_APM() (() \u003d\u003d\u003e ())\n\treduce_Q_APM()() \u003d\u003d\nq_APM_in :\u003d (tl q_APM_in)\n\tpre ((len q_APM_in) \u003e 0)\nprivate  reduce_Q_Env() (() \u003d\u003d\u003e ())\n\treduce_Q_Env()() \u003d\u003d\nq_Env_in :\u003d (tl q_Env_in)\n\tpre ((len q_APM_in) \u003e 0)\nprotected  thread while true do (\n\nhandleEvents()\n)\nprivate  per handleEvents \u003d\u003e (((len q_Env_in) + (len q_APM_in)) \u003e 0)\nprivate  per isFinished \u003d\u003e (((len q_Env_in) + (len q_APM_in)) \u003d 0)\nprivate  mutex(reduce_Q_Env, addToStimuliQueue)\nprivate  mutex(reduce_Q_APM, addToSystemQueue)\nprivate  mutex(reduce_Q_Env)\nprivate  mutex(reduce_Q_APM)\nprivate  mutex(calculateTransportPlan)\nprivate  mutex(addToStimuliQueue)\nprivate  mutex(addToSystemQueue)\nend CyberRail\n","class Environment\npublic static  outline \u003d outline\npublic static  inline \u003d inline\nprotected  io:IO :\u003d new IO()\nprotected  outfileName:seq of (char) :\u003d \"\"\nprotected  outlines:seq of (outline) :\u003d []\nprotected  inlines:seq of (inline) :\u003d []\nprotected  busy:bool :\u003d true\npublic  stimulate() (() \u003d\u003d\u003e ())\n\tstimulate()() \u003d\u003d\nis subclass responsibility\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nis subclass responsibility\npublic  respons([TransportPlan], [Route], nat) ([TransportPlan] * [Route] * nat \u003d\u003d\u003e ())\n\trespons([TransportPlan], [Route], nat)(plan, route, t) \u003d\u003d\n(\n\noutlines :\u003d (outlines ^ [mk_(plan, route, t)])\n)\npublic  showResults() (() \u003d\u003d\u003e ())\n\tshowResults()() \u003d\u003d\nlet - \u003d ((io.fwriteval))[seq of (outline)](outfileName, outlines, \u003cstart\u003e) in skip\npublic  Environment(seq of (char)) (seq of (char) \u003d\u003d\u003e Environment)\n\tEnvironment(seq of (char))(fname) \u003d\u003d\n(\n\nlet mk_(-, input) \u003d ((io.freadval))[seq of (inline)](fname) in inlines :\u003d input;\noutfileName :\u003d (\"Results for \" ^ fname)\n)\nprivate  mutex(respons)\nprivate  mutex(showResults)\nprotected  thread (\n\nwhile true do (\n\nshowResults()\n)\n)\nend Environment\n","class Logger\npublic static  logType \u003d logType\npublic static  TP \u003d TP\npublic static  Fnc \u003d Fnc\npublic static  log:seq of (logType) :\u003d []\npublic static  writeTransportPlan(TransportPlan) (TransportPlan \u003d\u003d\u003e ())\n\twriteTransportPlan(TransportPlan)(o) \u003d\u003d\n(\nlist:seq of (nat) :\u003d []\n\nif ((len (o.getRouteList)()) \u003d 0)\nthen\nlog :\u003d ((log ^ [mk_TP(\"NA\", \"NA\", [], (o.getTokenId)())]) ^ [\"\n\"])else\n(\n\nfor in \u0027Logger\u0027 (Logger.vdmrt) at line 35:17rADefPatternBind[r \u003d Route]ADefPatternBind in (o.getRouteList)() do\nlist :\u003d (list ^ [(r.id_route)]);\nlog :\u003d ((log ^ [mk_TP(((o.getRouteList)()(1).departureLocation), ((o.getRouteList)()((len (o.getRouteList)())).arrivalLocation), list, (o.getTokenId)())]) ^ [\"\n\"])\n)\n)\npublic static  writeFnc(String) (String \u003d\u003d\u003e ())\n\twriteFnc(String)(fnc) \u003d\u003d\n(\n\nlog :\u003d ((log ^ [mk_Fnc(fnc)]) ^ [\"\n\"])\n)\npublic static  write(logType) (logType \u003d\u003d\u003e ())\n\twrite(logType)(o) \u003d\u003d\n(\n\nduration (0) (\n\nlog :\u003d ((log ^ [o]) ^ [\"\n\"]);\nLogger`flush()\n)\n)\npublic static  flush() (() \u003d\u003d\u003e ())\n\tflush()() \u003d\u003d\n(\nio:IO :\u003d new IO()\n\nlet - \u003d ((io.fwriteval))[seq of (logType)](\"logger.log\", log, \u003cstart\u003e) in skip\n)\npublic static  printLog() (() \u003d\u003d\u003e seq of (logType))\n\tprintLog()() \u003d\u003d\nreturn (log)\nprivate  mutex(write)\nend Logger\n","class MessageQueue\nprivate  queue:seq of (Message) :\u003d []\nprivate  size:nat :\u003d 0\npublic static  String \u003d String\npublic static  FunctionType \u003d FunctionType\npublic static  ParamType \u003d ParamType\npublic static  Message \u003d Message\npublic  MessageQueue(nat) (nat \u003d\u003d\u003e MessageQueue)\n\tMessageQueue(nat)(psize) \u003d\u003d\nsize :\u003d psize\npublic  push(Message) (Message \u003d\u003d\u003e ())\n\tpush(Message)(message) \u003d\u003d\nqueue :\u003d (queue ^ [message])\npublic  pop() (() \u003d\u003d\u003e Message)\n\tpop()() \u003d\u003d\n(\n\nlet rtn_data:Message \u003d (hd queue) in (\n\nqueue :\u003d (tl queue);\nreturn (rtn_data)\n)\n)\nprivate  per push \u003d\u003e ((#fin[push] - #fin[pop]) \u003c size)\nprivate  per pop \u003d\u003e ((#fin[push] - #fin[pop]) \u003e 0)\nprivate  mutex(pop, push)\nend MessageQueue\n","class RailwayGrid\nprivate  routeList:set of (Route) :\u003d (undefined)\nprivate  grid:Grid :\u003d {}\nprivate  inactiveGrid:Grid :\u003d {}\nprivate  inactiveRouteID:set of ((Route | nat)) :\u003d {}\nprivate  io:IO :\u003d new IO()\npublic static  String \u003d String\npublic static  Plan \u003d Plan\npublic static  Grid \u003d Grid\npublic  RailwayGrid() (() \u003d\u003d\u003e RailwayGrid)\n\tRailwayGrid()() \u003d\u003d\n(\nR1:Route :\u003d mk_TransportPlan`Route(\"A\", \"B\", 42, \"P1\", 200, 1)\nR2:Route :\u003d mk_TransportPlan`Route(\"A\", \"C\", 42, \"P1\", 200, 2)\nR3:Route :\u003d mk_TransportPlan`Route(\"B\", \"C\", 99, \"P1\", 200, 3)\nR4:Route :\u003d mk_TransportPlan`Route(\"B\", \"D\", 42, \"P1\", 200, 4)\nR5:Route :\u003d mk_TransportPlan`Route(\"B\", \"A\", 42, \"P1\", 200, 5)\nR6:Route :\u003d mk_TransportPlan`Route(\"C\", \"D\", 42, \"P1\", 200, 6)\nR7:Route :\u003d mk_TransportPlan`Route(\"C\", \"A\", 42, \"P1\", 200, 7)\nR8:Route :\u003d mk_TransportPlan`Route(\"D\", \"B\", 42, \"P1\", 200, 8)\nR9:Route :\u003d mk_TransportPlan`Route(\"D\", \"C\", 42, \"P1\", 200, 9)\nR10:Route :\u003d mk_TransportPlan`Route(\"C\", \"B\", 99, \"P1\", 200, 10)\n\nrouteList :\u003d {R1, R2, R3, R4, R5, R6, R7, R8, R9, R10};\ngrid :\u003d (((recAlgo({}, [], \"A\") union recAlgo({}, [], \"B\")) union recAlgo({}, [], \"C\")) union recAlgo({}, [], \"D\"));\nwritef(grid)\n)\nprivate  recAlgo(Grid, Plan, String) (Grid * Plan * String \u003d\u003d\u003e Grid)\n\trecAlgo(Grid, Plan, String)(grid, plan, station) \u003d\u003d\n(\ngrid_temp:Grid :\u003d grid\n\nfor all r in set routeList do\n(\n\nif (((r.departureLocation) \u003d station) and (not (exists p in set (elems plan) \u0026 (((r.arrivalLocation) \u003d (p.arrivalLocation)) or ((r.arrivalLocation) \u003d (p.departureLocation))))))\nthen\n(\ntemp:Plan :\u003d (plan ^ [r])\n\ngrid_temp :\u003d (grid_temp union {temp});\ngrid_temp :\u003d recAlgo(grid_temp, temp, (r.arrivalLocation))\n)\n);\nreturn (grid_temp)\n)\npublic  getGrid() (() \u003d\u003d\u003e Grid)\n\tgetGrid()() \u003d\u003d\n(\n\nreturn (grid)\n)\npublic  setInactiveRoute(nat) (nat \u003d\u003d\u003e ())\n\tsetInactiveRoute(nat)(id) \u003d\u003d\n(\n\nduration (0) (\n\ninactiveRouteID :\u003d (inactiveRouteID union {id});\ninactiveGrid :\u003d (inactiveGrid union {tp | tp in set grid \u0026 (exists x in set (elems tp) \u0026 ((x.id_route) \u003d id))});\ngrid :\u003d {x | x in set grid \u0026 (id not in set {(route.id_route) | route in set (elems x)})}\n)\n)\n\tpre (exists x in set routeList \u0026 ((x.id_route) \u003d id))\npublic  test() (() \u003d\u003d\u003e ())\n\ttest()() \u003d\u003d\n(\n\nwritef((((recAlgo({}, [], \"A\") union recAlgo({}, [], \"B\")) union recAlgo({}, [], \"C\")) union recAlgo({}, [], \"D\")))\n)\nprivate  writef(Grid) (Grid \u003d\u003d\u003e ())\n\twritef(Grid)(grid) \u003d\u003d\n(\n\nlet - \u003d ((io.fwriteval))[Grid](\"railway.txt\", grid, \u003cappend\u003e) in skip\n)\nend RailwayGrid\n","class TokenDevice\nprivate  id_token:nat :\u003d 1\nprivate  transportPlan:[TransportPlan] :\u003d nil\nprivate  q_Env_out:Environment :\u003d (undefined)\nprivate  q_APM_out:ActivePlanManager :\u003d (undefined)\npublic  TokenDevice(nat) (nat \u003d\u003d\u003e TokenDevice)\n\tTokenDevice(nat)(id) \u003d\u003d\nid_token :\u003d id\npublic  notifyPassenger(TransportPlan) (TransportPlan \u003d\u003d\u003e ())\n\tnotifyPassenger(TransportPlan)(TransPlan) \u003d\u003d\n(\n\ntransportPlan :\u003d TransPlan;\nq_Env_out.respons(transportPlan, nil, time);\nLogger`write(\"Notify \");\nLogger`write(id_token);\nLogger`write(time)\n)\npublic  requestTransportPlan(NavigationInput) (NavigationInput \u003d\u003d\u003e ())\n\trequestTransportPlan(NavigationInput)(NavInput) \u003d\u003d\n(\n\nLogger`write(\"RequestTP\");\nLogger`write(id_token);\nLogger`write(time);\nq_APM_out.addToClientQueue(mk_MessageTypes`REQUESTPLAN(NavInput, self))\n)\npublic  getTokenId() (() \u003d\u003d\u003e nat)\n\tgetTokenId()() \u003d\u003d\nreturn (id_token)\npublic  routeTraveled() (() \u003d\u003d\u003e ())\n\trouteTraveled()() \u003d\u003d\n(\n\ntransportPlan.routeTraveled()\n)\n\tpre ((transportPlan.routesRemaining)() \u003e 0)\npublic  setTransportPlan(TransportPlan) (TransportPlan \u003d\u003d\u003e ())\n\tsetTransportPlan(TransportPlan)(tp) \u003d\u003d\n(\n\ntransportPlan :\u003d tp\n)\npublic  travel() (() \u003d\u003d\u003e ())\n\ttravel()() \u003d\u003d\n(\n\nonTheRoad();\nif ((transportPlan \u003c\u003e nil) and ((transportPlan.routesRemaining)() \u003e 0))\nthen\n(\n\ntransportPlan.routeTraveled()\n)\n)\npublic  onTheRoad() (() \u003d\u003d\u003e ())\n\tonTheRoad()() \u003d\u003d\nskip\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  setQ_Env_out(Environment) (Environment \u003d\u003d\u003e ())\n\tsetQ_Env_out(Environment)(env) \u003d\u003d\n(\n\nq_Env_out :\u003d env\n)\npublic  setQ_APM_out(ActivePlanManager) (ActivePlanManager \u003d\u003d\u003e ())\n\tsetQ_APM_out(ActivePlanManager)(apm) \u003d\u003d\n(\n\nq_APM_out :\u003d apm\n)\nprotected  thread periodic(2.0E9, 100, 2900, 200000)(travel())\nprivate  per onTheRoad \u003d\u003e ((transportPlan \u003c\u003e nil) and ((len (transportPlan.routeList)) \u003e 0))\nprivate  per isFinished \u003d\u003e ((transportPlan \u003d nil) or ((len (transportPlan.routeList)) \u003d 0))\nprivate  mutex(requestTransportPlan)\nprivate  mutex(travel)\nend TokenDevice\n","class TransportPlan\nprivate  id_token:nat :\u003d (undefined)\nprivate  totalFee:real :\u003d (undefined)\nprivate  totalDuration:nat :\u003d (undefined)\nprivate  choice:Choice :\u003d (undefined)\npublic  routeList:seq of (Route) :\u003d []\nprivate  routesTravled:seq of (Route) :\u003d []\nprivate  inv(((len routeList) \u003e 0) \u003d\u003e (forall i in set (inds routeList) \u0026 ((i \u003c (len routeList)) \u003d\u003e ((routeList(i).arrivalLocation) \u003d (routeList((i + 1)).departureLocation)))))\npublic static  Route \u003d Route\n\tinv r \u003d\u003d (((len (r.platform)) \u003e 0) and (((len (r.arrivalLocation)) \u003e 0) and (((len (r.departureLocation)) \u003e 0) and ((r.fee) \u003e\u003d 0))))\npublic static  DTO \u003d DTO\npublic  TransportPlan(seq of (Route), Choice, nat) (seq of (Route) * Choice * nat \u003d\u003d\u003e TransportPlan)\n\tTransportPlan(seq of (Route), Choice, nat)(routes, pChoice, id_tok) \u003d\u003d\n(\n\nid_token :\u003d id_tok;\nchoice :\u003d pChoice;\nrouteList :\u003d routes\n)\npublic  getNextRoute() (() \u003d\u003d\u003e Route)\n\tgetNextRoute()() \u003d\u003d\n(\n\nreturn ((hd routeList))\n)\n\tpre ((len routeList) \u003e 0)\npublic  containsRoute(nat) (nat \u003d\u003d\u003e bool)\n\tcontainsRoute(nat)(id_route) \u003d\u003d\nreturn ((exists r in set (elems routeList) \u0026 ((r.id_route) \u003d id_route)))\n\tpre ((len routeList) \u003e 0)\npublic  addRoute(Route) (Route \u003d\u003d\u003e ())\n\taddRoute(Route)(route) \u003d\u003d\n(\n\nrouteList :\u003d (routeList ^ [route]);\ntotalFee :\u003d (totalFee + (route.fee))\n)\n\tpre ((routeList((len routeList)).arrivalLocation) \u003d (route.departureLocation))\npublic  routeTraveled() (() \u003d\u003d\u003e ())\n\trouteTraveled()() \u003d\u003d\n(\n\nroutesTravled :\u003d (routesTravled ^ [(hd routeList)]);\nrouteList :\u003d (tl routeList)\n)\n\tpre ((len routeList) \u003e 0)\npublic  routesRemaining() (() \u003d\u003d\u003e nat)\n\troutesRemaining()() \u003d\u003d\n(\n\nreturn ((len routeList))\n)\npublic  getByValue() (() \u003d\u003d\u003e DTO)\n\tgetByValue()() \u003d\u003d\nreturn (mk_TransportPlan`DTO(id_token, routeList, choice))\npublic  getPlanAsNaviInput() (() \u003d\u003d\u003e NavigationInput)\n\tgetPlanAsNaviInput()() \u003d\u003d\n(\n\nreturn (mk_CyberRail`NavigationInput(((hd routeList).departureLocation), (routeList((len routeList)).arrivalLocation), choice, id_token))\n)\n\tpre ((len routeList) \u003e 0)\npublic  getTokenId() (() \u003d\u003d\u003e nat)\n\tgetTokenId()() \u003d\u003d\nreturn (id_token)\npublic  getRouteList() (() \u003d\u003d\u003e seq of (Route))\n\tgetRouteList()() \u003d\u003d\nreturn (routeList)\nprivate  mutex(routeTraveled)\nend TransportPlan\n","class World\nprotected  envCustomer:[Customer] :\u003d nil\npublic  World(seq of (char)) (seq of (char) \u003d\u003d\u003e World)\n\tWorld(seq of (char))(fname) \u003d\u003d\n(\n\nenvCustomer :\u003d new Customer(fname);\nenvCustomer.addTokenDevice(CRSystem`tok1);\nenvCustomer.addTokenDevice(CRSystem`tok2);\nenvCustomer.addTokenDevice(CRSystem`tok3);\nenvCustomer.addTokenDevice(CRSystem`tok4);\nenvCustomer.addTokenDevice(CRSystem`tok5);\nenvCustomer.addTokenDevice(CRSystem`tok6);\nenvCustomer.addTokenDevice(CRSystem`tok7);\nenvCustomer.addTokenDevice(CRSystem`tok8);\nenvCustomer.addTokenDevice(CRSystem`tok9);\nenvCustomer.addTokenDevice(CRSystem`tok10);\nenvCustomer.addCyberRail(CRSystem`cb);\nCRSystem`cb.setQ_APM_out(CRSystem`apm);\nCRSystem`cb.setRailwayGrid(CRSystem`grid);\nCRSystem`apm.setQ_CR_out(CRSystem`cb);\nCRSystem`tok1.setQ_APM_out(CRSystem`apm);\nCRSystem`tok1.setQ_Env_out(envCustomer);\nCRSystem`tok2.setQ_Env_out(envCustomer);\nCRSystem`tok2.setQ_APM_out(CRSystem`apm);\nCRSystem`tok3.setQ_Env_out(envCustomer);\nCRSystem`tok3.setQ_APM_out(CRSystem`apm);\nCRSystem`tok4.setQ_Env_out(envCustomer);\nCRSystem`tok4.setQ_APM_out(CRSystem`apm);\nCRSystem`tok5.setQ_Env_out(envCustomer);\nCRSystem`tok5.setQ_APM_out(CRSystem`apm);\nCRSystem`tok6.setQ_Env_out(envCustomer);\nCRSystem`tok6.setQ_APM_out(CRSystem`apm);\nCRSystem`tok7.setQ_Env_out(envCustomer);\nCRSystem`tok7.setQ_APM_out(CRSystem`apm);\nCRSystem`tok8.setQ_Env_out(envCustomer);\nCRSystem`tok8.setQ_APM_out(CRSystem`apm);\nCRSystem`tok9.setQ_Env_out(envCustomer);\nCRSystem`tok9.setQ_APM_out(CRSystem`apm);\nCRSystem`tok10.setQ_Env_out(envCustomer);\nCRSystem`tok10.setQ_APM_out(CRSystem`apm)\n)\npublic  test() (() \u003d\u003d\u003e TokenDevice)\n\ttest()() \u003d\u003d\nreturn (CRSystem`tok1)\npublic  run() (() \u003d\u003d\u003e seq of (logType))\n\trun()() \u003d\u003d\n(\ni:nat :\u003d 5\n\n(\n\nstart (envCustomer);\nstart (CRSystem`apm);\nstart (CRSystem`cb);\nstart (CRSystem`tok1);\nstart (CRSystem`tok2);\nstart (CRSystem`tok3);\nstart (CRSystem`tok4);\nstart (CRSystem`tok5);\nstart (CRSystem`tok6);\nstart (CRSystem`tok7);\nstart (CRSystem`tok8);\nstart (CRSystem`tok9);\nstart (CRSystem`tok10)\n);\nenvCustomer.isFinished();\nwhile (i \u003e 0) do (\n\nCRSystem`cb.isFinished();\nCRSystem`apm.isFinished();\nCRSystem`tok1.isFinished();\nCRSystem`tok1.isFinished();\nCRSystem`tok2.isFinished();\nCRSystem`tok3.isFinished();\nCRSystem`tok4.isFinished();\nCRSystem`tok5.isFinished();\nCRSystem`tok6.isFinished();\nCRSystem`tok7.isFinished();\nCRSystem`tok8.isFinished();\nCRSystem`tok9.isFinished();\nCRSystem`tok10.isFinished();\ni :\u003d (i - 1)\n);\nenvCustomer.showResults();\nreturn (Logger`printLog())\n)\nend World\n","class SNW is subclass of [Strategy]\nprivate  state:State :\u003d \u003crun\u003e\npublic static  State \u003d State\nprotected  strategyInit() (() \u003d\u003d\u003e ())\n\tstrategyInit()() \u003d\u003d\n(\n\nstate :\u003d \u003chalt\u003e\n)\nprotected  strategyNotify() (() \u003d\u003d\u003e ())\n\tstrategyNotify()() \u003d\u003d\nis subclass responsibility\nprotected  strategyEnd() (() \u003d\u003d\u003e ())\n\tstrategyEnd()() \u003d\u003d\n(\n\nstate :\u003d \u003crun\u003e\n)\nprotected  handleEvents(ActivePlanManager) (ActivePlanManager \u003d\u003d\u003e ())\n\thandleEvents(ActivePlanManager)(apm) \u003d\u003d\nis subclass responsibility\nend SNW\n","class Strategy\nprotected  strategyInit() (() \u003d\u003d\u003e ())\n\tstrategyInit()() \u003d\u003d\nis subclass responsibility\nprotected  strategyNotify() (() \u003d\u003d\u003e ())\n\tstrategyNotify()() \u003d\u003d\nis subclass responsibility\nprotected  strategyEnd() (() \u003d\u003d\u003e ())\n\tstrategyEnd()() \u003d\u003d\nis subclass responsibility\nprotected  handleEvents() (() \u003d\u003d\u003e ())\n\thandleEvents()() \u003d\u003d\nis subclass responsibility\nend Strategy\n","class MessageTypes\npublic static  REQUESTPLAN \u003d REQUESTPLAN\npublic static  RETURNPLAN \u003d RETURNPLAN\npublic static  CALCPLAN \u003d CALCPLAN\npublic static  INACTIVEROUTE \u003d INACTIVEROUTE\npublic static  ACTIVEROUTE \u003d ACTIVEROUTE\npublic static  ADDROUTE \u003d ADDROUTE\npublic static  REMOVEROUTE \u003d REMOVEROUTE\npublic static  STRATEGYINIT \u003d STRATEGYINIT\npublic static  STRATEGYEND \u003d STRATEGYEND\npublic static  STRATEGYNOTIFY \u003d STRATEGYNOTIFY\npublic static  MessageT \u003d MessageT\nend MessageTypes\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]