["LRL:nat \u003d 60","ARP:nat \u003d 250","SenseTimeline \u003d SenseTimeline","Sense \u003d Sense","ReactionTimeline \u003d ReactionTimeline","Reaction \u003d Reaction","private  Pacemaker((inp:SenseTimeline))r:ReactionTimeline\n\tpost let m:set of (nat1) \u003d {i | i in set (inds r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in (((len r) \u003d (len inp)) and ((r(1) \u003d \u003cPULSE\u003e) and (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e ((exists z in set m \u0026 ((z \u003e\u003d x) and ((z - x) \u003c\u003d (60000 / LRL)))) or (exists z in set (inds inp) \u0026 ((z \u003e\u003d x) and (((z - x) \u003e ARP) and (inp(z) \u003d \u003cPULSE\u003e)))))))))","LRL:nat \u003d 60","ARP:nat \u003d 250","SenseTimeline \u003d SenseTimeline","Sense \u003d Sense","Time \u003d Time","ReactionTimeline \u003d ReactionTimeline","Reaction \u003d Reaction","private  Pacemaker((inp:SenseTimeline))r:ReactionTimeline\n\tpost let m:set of (nat1) \u003d {i | i in set (inds r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in (((len r) \u003d (len inp)) and (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e (exists z in set m \u0026 ((z \u003e\u003d x) and ((z - x) \u003c\u003d (60000 / LRL)))))))","LRL:nat \u003d 60","SenseTimeline \u003d SenseTimeline","Sense \u003d Sense","Time \u003d Time","ReactionTimeline \u003d ReactionTimeline","Reaction \u003d Reaction","private  Pacemaker((inp:SenseTimeline))r:ReactionTimeline\n\tpost let m:set of (Time) \u003d {i | i in set (dom r) \u0026 (r(i) \u003d \u003cPULSE\u003e)} in ((((card (dom r)) \u003d (card (dom inp))) and ((card (dom inp)) \u003e 1)) \u003d\u003e ((r(1) \u003d \u003cPULSE\u003e) and (forall x in set m \u0026 ((exists y in set m \u0026 (y \u003e x)) \u003d\u003e (exists y in set m \u0026 (((abs (x - y)) \u003c\u003d (60000 / LRL)) and (x \u003c\u003e y)))))))","Time \u003d Time","SenseTimeline \u003d SenseTimeline\n\tinv stl \u003d\u003d let l:seq of ([AccelerometerData]) \u003d [(stl(i).#2) | i in set (inds stl) \u0026 ((stl(i).#2) \u003c\u003e nil)] in ((l(1) \u003d HIGH) and (forall i in set (inds l) \u0026 ((l(i) \u003c MED) \u003d\u003e (l((i - 1)) \u003e MED))))","AccelerometerData \u003d AccelerometerData\n\tinv n \u003d\u003d (n \u003c 3)","Sense \u003d Sense","ReactionTimeline \u003d ReactionTimeline","Reaction \u003d Reaction","state Sigmaof\n[LRL : nat, LRLs : nat, LRLf : nat, MSR : nat, ActivityThreshold : AccelerometerData, ReactionTime : nat, RecoveryTime : nat, rateChangePlan : map (nat) to ((\u003cDEC\u003e | \u003cINC\u003e))]\n\tinit s \u003d\u003d (s \u003d mk_Sigma(60, 0, 2, 120, MED, 10, 2, {|-\u003e}))","Pacemaker (SenseTimeline \u003d\u003d\u003e ReactionTimeline)\n\tPacemaker(inp) \u003d\u003d\nreturn ((if (inp \u003d [])\nthen []\nelse ([HeartController((hd inp))] ^ Pacemaker((tl inp)))))","HeartController ((Sense * [AccelerometerData] * Time) \u003d\u003d\u003e (Reaction * Time))\n\tHeartController(mk_(-, acc, time)) \u003d\u003d\n(\n\nif (acc \u003c\u003e nil)\nthen\nAdjustRate(acc, time);\nif (time in set (dom rateChangePlan))\nthen\napplyChange(rateChangePlan(time));\nif (LRLf \u003c\u003d LRLs)\nthen\n(\n\nLRLs :\u003d 1;\nreturn (mk_(\u003cPULSE\u003e, time))\n)else\n(\n\nLRLs :\u003d (LRLs + 1);\nreturn (mk_(\u003cNONE\u003e, time))\n)\n)","applyChange ((\u003cDEC\u003e | \u003cINC\u003e) \u003d\u003d\u003e ())\n\tapplyChange(a) \u003d\u003d\nif (a \u003d \u003cINC\u003e)\nthen\nLRLf :\u003d 1else\nLRLf :\u003d 2","AdjustRate (AccelerometerData * Time \u003d\u003d\u003e ())\n\tAdjustRate(act, time) \u003d\u003d\nif (act \u003e ActivityThreshold)\nthen\nrateChangePlan :\u003d {(time + (10 * 2)) |-\u003e \u003cINC\u003e}else\nrateChangePlan :\u003d {(time + (120 * 2)) |-\u003e \u003cDEC\u003e}","LOW:AccelerometerData \u003d 0","MED:AccelerometerData \u003d 1","HIGH:AccelerometerData \u003d 2","sensedData:seq of ((Sense * [AccelerometerData] * Time)) \u003d (((([mk_(\u003cNONE\u003e, nil, i) | i in set {1, ... ,120}] ^ [mk_(\u003cNONE\u003e, HIGH, 121)]) ^ [mk_(\u003cNONE\u003e, nil, i) | i in set {121, ... ,190}]) ^ [mk_(\u003cNONE\u003e, LOW, 191)]) ^ [mk_(\u003cNONE\u003e, nil, i) | i in set {192, ... ,436}])","LRL:nat \u003d 60","ARP:nat \u003d 250","VRP:nat \u003d 320","PVARP:nat \u003d 250","AVD:nat \u003d 150","VAD:nat \u003d 850","SenseTimeline \u003d SenseTimeline","Chamber \u003d Chamber","Time \u003d Time","Alarm \u003d Alarm","ReactionTimeline \u003d ReactionTimeline","private Pacemaker: (Time * SenseTimeline -\u003e ReactionTimeline)\n\tPacemaker(t, s) \u003d\u003d\n(PM(mk_(1, t, s, {}, 1000, 0, -ARP, -VRP)).#1)","private PM: ((Time * Time * SenseTimeline * ReactionTimeline * Alarm * Alarm * Time * Time) -\u003e (ReactionTimeline * Alarm * Alarm * Time * Time))\n\tPM(mk_(i, t, s, r, AA, VA, LastA, LastV)) \u003d\u003d\n(if (i \u003d t)\nthen mk_(r, AA, VA, LastA, LastV)\nelse (if (mk_(i, \u003cATRIUM\u003e) in set s)\nthen PM(c((i + 1), t, s, SensedAtrium(i, r, AA, VA, LastA, LastV)))\nelseif (mk_(i, \u003cVENTRICLE\u003e) in set s)\nthen PM(c((i + 1), t, s, SensedVentricle(i, r, AA, VA, LastA, LastV)))\nelse PM(c((i + 1), t, s, SensedNothing(i, r, AA, VA, LastA, LastV)))))","private SensedAtrium: (Time * ReactionTimeline * Alarm * Alarm * Time * Time -\u003e (ReactionTimeline * Alarm * Alarm * Time * Time))\n\tSensedAtrium(t, r, AA, VA, LastA, LastV) \u003d\u003d\n(if (((t - LastA) \u003c ARP) or ((VA \u003e 0) or ((t - LastA) \u003c PVARP)))\nthen SensedNothing(t, r, AA, VA, LastA, LastV)\nelse mk_(r, 0, (t + AVD), t, LastV))","private SensedVentricle: (Time * ReactionTimeline * Alarm * Alarm * Time * Time -\u003e (ReactionTimeline * Alarm * Alarm * Time * Time))\n\tSensedVentricle(t, r, AA, VA, LastA, LastV) \u003d\u003d\n(if ((t - LastV) \u003c VRP)\nthen SensedNothing(t, r, AA, VA, LastA, LastV)\nelse mk_(r, (t + VAD), 0, LastA, t))","private SensedNothing: (Time * ReactionTimeline * Alarm * Alarm * Time * Time -\u003e (ReactionTimeline * Alarm * Alarm * Time * Time))\n\tSensedNothing(t, r, AA, VA, LastA, LastV) \u003d\u003d\n(if ((AA \u003e 0) and (t \u003e\u003d AA))\nthen mk_((r union {mk_(t, \u003cATRIUM\u003e)}), 0, (t + AVD), t, LastV)\nelseif ((VA \u003e 0) and (t \u003e\u003d VA))\nthen mk_((r union {mk_(t, \u003cVENTRICLE\u003e)}), (t + VAD), 0, LastA, t)\nelse mk_(r, AA, VA, LastA, LastV))","private c: (Time * Time * SenseTimeline * (ReactionTimeline * Alarm * Alarm * Time * Time) -\u003e (Time * Time * SenseTimeline * ReactionTimeline * Alarm * Alarm * Time * Time))\n\tc(i, t, s, mk_(r, a, v, la, lv)) \u003d\u003d\nmk_(i, t, s, r, a, v, la, lv)","Time \u003d Time","SensedTimeline \u003d SensedTimeline","Chamber \u003d Chamber","ReactionTimeline \u003d ReactionTimeline","LRL:nat \u003d 60","URL:nat \u003d 120","FixedAV:nat \u003d 150","private  Pacemaker((mk_(inp, n):(SensedTimeline * nat1)))r:ReactionTimeline\n\tpost let nPulsesAtria:nat \u003d (card {i | i in set r \u0026 ((i.#1) \u003d \u003cATRIA\u003e)}), nPulsesVentricle:nat \u003d (card {i | i in set r \u0026 ((i.#1) \u003d \u003cVENTRICLE\u003e)}) in (((nPulsesAtria / n) \u003e\u003d ((LRL / 60) / 1000)) and (((nPulsesVentricle / n) \u003c\u003d ((URL / 60) / 1000)) and (forall mk_(\u003cATRIA\u003e, ta) in set r \u0026 (exists mk_(\u003cVENTRICLE\u003e, tv) in set r \u0026 (tv \u003d (ta + FixedAV))))))","Input \u003d Input","Time \u003d Time","ActivityData \u003d ActivityData\n\tinv a \u003d\u003d (a \u003c\u003d 7)","RF \u003d RF\n\tinv rf \u003d\u003d (rf \u003c\u003d 16)","Output \u003d Output","PPM \u003d PPM\n\tinv ppm \u003d\u003d ((ppm \u003e\u003d 30) and (ppm \u003c\u003d 175))","LRL:PPM \u003d 60","MSR:PPM \u003d 120","Threshold:ActivityData \u003d 6","ReactionTime:Time \u003d 150","ResponseFactor:RF \u003d 8","RecoveryTime:Time \u003d 5","private  Simulate((inp:Input))out:Output\n\tpre (0 not in set (dom inp))\n\tpost (forall t in set (dom inp) \u0026 (((out(t) \u003d MSR) \u003d\u003e ((inp((t - ReactionTime)) \u003e Threshold) or (out((t - 1)) \u003d MSR))) and (forall t in set ((dom inp) \\ {1}) \u0026 ((out(t) \u003d LRL) \u003d\u003e ((inp((t - RecoveryTime)) \u003c Threshold) or (out((t - 1)) \u003d LRL))))))"]