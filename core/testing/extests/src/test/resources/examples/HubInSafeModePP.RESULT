["class Actuator\nprotected  ID:nat :\u003d (undefined)\nprotected  Type:nodeType :\u003d (undefined)\nprotected  Corr:correction :\u003d (undefined)\nprotected  Env:Environment :\u003d (undefined)\npublic  GetID() (() \u003d\u003d\u003e nat)\n\tGetID()() \u003d\u003d\nreturn (ID)\npublic  GetType() (() \u003d\u003d\u003e nodeType)\n\tGetType()() \u003d\u003d\nreturn (Type)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\nis subclass responsibility\nend Actuator\n","class Environment\nprivate  envTemp:nat :\u003d (undefined)\nprivate  envHumid:nat :\u003d (undefined)\nprivate  ha:HA :\u003d (undefined)\nprivate  io:IO :\u003d new IO()\nprivate  inlines:seq of (inline) :\u003d []\nprivate  simtime:nat :\u003d (undefined)\nprivate  finished:bool :\u003d false\npublic static  inline \u003d inline\npublic  Environment(seq of (char)) (seq of (char) \u003d\u003d\u003e Environment)\n\tEnvironment(seq of (char))(fname) \u003d\u003d\n(\n\nlet mk_(-, mk_(t, input)) \u003d ((io.freadval))[(nat * seq of (inline))](fname) in (\n\ninlines :\u003d input;\nsimtime :\u003d t\n);\nha :\u003d new HA();\nenvTemp :\u003d 20;\nenvHumid :\u003d 85\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nwhile (not isFinished()) do (\n\nCreateSignal();\nHA`Host.Step();\nWorld`timerRef.StepTime()\n)\n)\nprivate  CreateSignal() (() \u003d\u003d\u003e ())\n\tCreateSignal()() \u003d\u003d\n(\n\nif ((len inlines) \u003e 0)\nthen\n(\ncurtime:nat :\u003d (World`timerRef.GetTime)()\n\nlet mk_(temp, humid, time) \u003d (hd inlines) in (\n\nif (time \u003c\u003d curtime)\nthen\n(\n\nSetTemp(temp);\nSetHumid(humid);\nIO`print(\"\n\nNew env values set\");\nIO`print(\"\nAt time: \");\nIO`print(time);\ninlines :\u003d (tl inlines);\nreturn\n)\n)\n)else\n(\n\nfinished :\u003d true;\nreturn\n)\n)\npublic  ReadTemp() (() \u003d\u003d\u003e nat)\n\tReadTemp()() \u003d\u003d\nreturn (envTemp)\npublic  IncTemp() (() \u003d\u003d\u003e ())\n\tIncTemp()() \u003d\u003d\nenvTemp :\u003d (envTemp + 1)\npublic  DecTemp() (() \u003d\u003d\u003e ())\n\tDecTemp()() \u003d\u003d\nenvTemp :\u003d (envTemp - 1)\npublic  SetTemp(nat) (nat \u003d\u003d\u003e ())\n\tSetTemp(nat)(t) \u003d\u003d\nenvTemp :\u003d t\npublic  ReadHumid() (() \u003d\u003d\u003e nat)\n\tReadHumid()() \u003d\u003d\nreturn (envHumid)\npublic  IncHumid() (() \u003d\u003d\u003e ())\n\tIncHumid()() \u003d\u003d\nenvHumid :\u003d (envHumid + 1)\npublic  DecHumid() (() \u003d\u003d\u003e ())\n\tDecHumid()() \u003d\u003d\nenvHumid :\u003d (envHumid - 1)\npublic  SetHumid(nat) (nat \u003d\u003d\u003e ())\n\tSetHumid(nat)(h) \u003d\u003d\nenvHumid :\u003d h\npublic  isFinished() (() \u003d\u003d\u003e bool)\n\tisFinished()() \u003d\u003d\nreturn (((inlines \u003d []) and finished))\nend Environment\n","class HA\npublic static  Host:HostController :\u003d new HostController(22, 75)\npublic static  TempNode:TemperatureSensor :\u003d new TemperatureSensor(1, \u003cTEMPSENSOR\u003e, 0)\npublic static  HumidNode:HumidSensor :\u003d new HumidSensor(2, \u003cHUMIDSENSOR\u003e, 0)\npublic static  ThermNode:Thermostat :\u003d new Thermostat(3, \u003cTHERMOSTAT\u003e)\npublic static  WinNode:Window :\u003d new Window(4, \u003cWINDOW\u003e)\npublic  HA() (() \u003d\u003d\u003e HA)\n\tHA()() \u003d\u003d\n(\n\nHost.AddNode((TempNode.GetID)(), (TempNode.GetType)());\nHost.AddNode((HumidNode.GetID)(), (HumidNode.GetType)());\nHost.AddNode((ThermNode.GetID)(), (ThermNode.GetType)());\nHost.AddNode((WinNode.GetID)(), (WinNode.GetType)())\n)\nend HA\n","class HostController\nprivate  finished:bool :\u003d false\nprivate  print:bool :\u003d true\nprivate  TargetTemp:nat :\u003d (undefined)\nprivate  Temp:nat :\u003d 0\nprivate  TargetHumid:nat :\u003d (undefined)\nprivate  Humid:nat :\u003d 0\nprivate  NodeList:map (nat) to (nodeType) :\u003d {|-\u003e}\nprivate  Algo:algType :\u003d \u003cNONE\u003e\npublic static  algType \u003d algType\npublic  HostController(nat, nat) (nat * nat \u003d\u003d\u003e HostController)\n\tHostController(nat, nat)(t, h) \u003d\u003d\n(\n\nTargetTemp :\u003d t;\nTargetHumid :\u003d h\n)\npublic  UpdateValues() (() \u003d\u003d\u003e ())\n\tUpdateValues()() \u003d\u003d\n(\n\nfor all r in set (rng NodeList) do\n(\n\nif (r \u003d \u003cHUMIDSENSOR\u003e)\nthen\nHumid :\u003d (HA`HumidNode.ReadValue)();\nif (r \u003d \u003cTEMPSENSOR\u003e)\nthen\nTemp :\u003d (HA`TempNode.ReadValue)()\n)\n)\npublic  GetAlgo() (() \u003d\u003d\u003e algType)\n\tGetAlgo()() \u003d\u003d\nreturn (Algo)\npublic  GetTemp() (() \u003d\u003d\u003e nat)\n\tGetTemp()() \u003d\u003d\nreturn (Temp)\npublic  GetHumid() (() \u003d\u003d\u003e nat)\n\tGetHumid()() \u003d\u003d\nreturn (Humid)\npublic  Algorithm() (() \u003d\u003d\u003e ())\n\tAlgorithm()() \u003d\u003d\n(\n\ncases Algo :\n  \u003cTHTW\u003e -\u003e THTWAlgo()  \u003cTTW\u003e -\u003e TTWAlgo()  \u003cTT\u003e -\u003e TTAlgo()  \u003cTW\u003e -\u003e TWAlgo()  \u003cHW\u003e -\u003e HWAlgo()  \u003cNONE\u003e -\u003e return end\n)\nprivate  THTWAlgo() (() \u003d\u003d\u003e ())\n\tTHTWAlgo()() \u003d\u003d\n(\n\nif (Humid \u003e TargetHumid)\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\nHA`ThermNode.SetCorrection(\u003cNONE\u003e);\nprint :\u003d true\n)elseif (Temp \u003e (TargetTemp + 1))\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\nprint :\u003d true\n)elseif (Temp \u003c (TargetTemp - 1))\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cINC\u003e);\nprint :\u003d true\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cNONE\u003e);\nif print\nthen\n(\n\nTargetReachedPrint((World`timerRef.GetTime)())\n);\nprint :\u003d false\n)\n)\nprivate  TTWAlgo() (() \u003d\u003d\u003e ())\n\tTTWAlgo()() \u003d\u003d\n(\n\nif (Temp \u003e (TargetTemp + 2))\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\nprint :\u003d true\n)elseif (Temp \u003e (TargetTemp + 1))\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\nprint :\u003d true\n)elseif (Temp \u003c (TargetTemp - 1))\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cINC\u003e);\nprint :\u003d true\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cNONE\u003e);\nif print\nthen\n(\n\nTargetReachedPrint((World`timerRef.GetTime)())\n);\nprint :\u003d false\n)\n)\nprivate  TTAlgo() (() \u003d\u003d\u003e ())\n\tTTAlgo()() \u003d\u003d\n(\n\nif (Temp \u003e (TargetTemp + 1))\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\nprint :\u003d true\n)elseif (Temp \u003c (TargetTemp - 1))\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cINC\u003e);\nprint :\u003d true\n)else\n(\n\nHA`ThermNode.SetCorrection(\u003cNONE\u003e);\nif print\nthen\n(\n\nTargetReachedPrint((World`timerRef.GetTime)())\n);\nprint :\u003d false\n)\n)\nprivate  TWAlgo() (() \u003d\u003d\u003e ())\n\tTWAlgo()() \u003d\u003d\n(\n\nif (Temp \u003e (TargetTemp + 1))\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\nprint :\u003d true\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nif print\nthen\n(\n\nTargetReachedPrint((World`timerRef.GetTime)())\n);\nprint :\u003d false\n)\n)\nprivate  HWAlgo() (() \u003d\u003d\u003e ())\n\tHWAlgo()() \u003d\u003d\n(\n\nif (Humid \u003e TargetHumid)\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\nprint :\u003d true\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nif print\nthen\n(\n\nTargetReachedPrint((World`timerRef.GetTime)())\n);\nprint :\u003d false\n)\n)\nprivate  TargetReachedPrint(nat) (nat \u003d\u003d\u003e ())\n\tTargetReachedPrint(nat)(t) \u003d\u003d\n(\n\nIO`print(\"\nTarget values reached\");\nIO`print(\"\nAt time: \");\nIO`print(t)\n)\nprivate  UpdateAlgorithm() (() \u003d\u003d\u003e ())\n\tUpdateAlgorithm()() \u003d\u003d\n(\n\nif ((rng NodeList) \u003d {})\nthen\nAlgo :\u003d \u003cNONE\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cHUMIDSENSOR\u003e, \u003cTHERMOSTAT\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cTHTW\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cTHERMOSTAT\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cTTW\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cTHERMOSTAT\u003e})\nthen\nAlgo :\u003d \u003cTT\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cTW\u003eelseif ((rng NodeList) \u003d {\u003cHUMIDSENSOR\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cHW\u003eelse\nAlgo :\u003d \u003cNONE\u003e\n)\npublic  AddNode(nat, nodeType) (nat * nodeType \u003d\u003d\u003e ())\n\tAddNode(nat, nodeType)(id, type) \u003d\u003d\n(\n\nNodeList :\u003d (NodeList ++ {id |-\u003e type});\nUpdateAlgorithm()\n)\n\tpre (id not in set (dom NodeList))\n\tpost ((card (dom NodeList)) \u003d ((card (dom NodeList~)) + 1))\npublic  RemoveNode(nat, nodeType) (nat * nodeType \u003d\u003d\u003e ())\n\tRemoveNode(nat, nodeType)(id, type) \u003d\u003d\n(\n\nif (NodeList(id) \u003d type)\nthen\nNodeList :\u003d ({id} \u003c-: NodeList);\nUpdateAlgorithm()\n)\n\tpre (id in set (dom NodeList))\n\tpost ((card (dom NodeList)) \u003d ((card (dom NodeList~)) - 1))\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\n\nHA`TempNode.Step();\nHA`HumidNode.Step();\nUpdateValues();\nAlgorithm();\nHA`WinNode.Step();\nHA`ThermNode.Step()\n)\nend HostController\n","class HumidSensor is subclass of [Sensor]\npublic  HumidSensor(nat, nodeType, nat) (nat * nodeType * nat \u003d\u003d\u003e HumidSensor)\n\tHumidSensor(nat, nodeType, nat)(id, type, val) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nValue :\u003d val\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\n\nValue :\u003d (World`env.ReadHumid)()\n)\nend HumidSensor\n","class NetworkTypes\npublic static  nodeType \u003d nodeType\npublic static  correction \u003d correction\nend NetworkTypes\n","class Sensor\nprotected  ID:nat :\u003d (undefined)\nprotected  Type:nodeType :\u003d (undefined)\nprotected  Value:nat :\u003d (undefined)\nprotected  Env:Environment :\u003d (undefined)\npublic  GetID() (() \u003d\u003d\u003e nat)\n\tGetID()() \u003d\u003d\nreturn (ID)\npublic  GetType() (() \u003d\u003d\u003e nodeType)\n\tGetType()() \u003d\u003d\nreturn (Type)\npublic  ReadValue() (() \u003d\u003d\u003e nat)\n\tReadValue()() \u003d\u003d\nreturn (Value)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\nis subclass responsibility\nend Sensor\n","class Surroundings\nprivate  envTemp:nat :\u003d (undefined)\nprivate  envHumid:nat :\u003d (undefined)\npublic  Surroundings() (() \u003d\u003d\u003e Surroundings)\n\tSurroundings()() \u003d\u003d\n(\n\nenvTemp :\u003d 20;\nenvHumid :\u003d 85\n)\npublic  ReadTemp() (() \u003d\u003d\u003e nat)\n\tReadTemp()() \u003d\u003d\nreturn (envTemp)\npublic  IncTemp() (() \u003d\u003d\u003e ())\n\tIncTemp()() \u003d\u003d\nenvTemp :\u003d (envTemp + 1)\npublic  DecTemp() (() \u003d\u003d\u003e ())\n\tDecTemp()() \u003d\u003d\nenvTemp :\u003d (envTemp - 1)\npublic  SetTemp(nat) (nat \u003d\u003d\u003e ())\n\tSetTemp(nat)(t) \u003d\u003d\nenvTemp :\u003d t\npublic  ReadHumid() (() \u003d\u003d\u003e nat)\n\tReadHumid()() \u003d\u003d\nreturn (envHumid)\npublic  IncHumid() (() \u003d\u003d\u003e ())\n\tIncHumid()() \u003d\u003d\nenvHumid :\u003d (envHumid + 1)\npublic  DecHumid() (() \u003d\u003d\u003e ())\n\tDecHumid()() \u003d\u003d\nenvHumid :\u003d (envHumid - 1)\npublic  SetHumid(nat) (nat \u003d\u003d\u003e ())\n\tSetHumid(nat)(h) \u003d\u003d\nenvHumid :\u003d h\nend Surroundings\n","class TemperatureSensor is subclass of [Sensor]\npublic  TemperatureSensor(nat, nodeType, nat) (nat * nodeType * nat \u003d\u003d\u003e TemperatureSensor)\n\tTemperatureSensor(nat, nodeType, nat)(id, type, val) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nValue :\u003d val\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\n\nValue :\u003d (World`env.ReadTemp)()\n)\nend TemperatureSensor\n","class Test\npublic  Run(TestResult) (TestResult \u003d\u003d\u003e ())\n\tRun(TestResult)(-) \u003d\u003d\nis subclass responsibility\nend Test\n","class TestActuator is subclass of [TestCase]\nprivate  win:Window :\u003d (undefined)\nprivate  therm:Thermostat :\u003d (undefined)\npublic  TestActuator(seq of (char)) (seq of (char) \u003d\u003d\u003e TestActuator)\n\tTestActuator(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\n(\n\nwin :\u003d new Window(3, \u003cWINDOW\u003e);\ntherm :\u003d new Thermostat(4, \u003cTHERMOSTAT\u003e)\n)\nprotected  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\n(\n\nAssertTrue(((win.GetID)() \u003d 3));\nAssertTrue(((win.GetType)() \u003d \u003cWINDOW\u003e));\nAssertTrue(((therm.GetID)() \u003d 4));\nAssertTrue(((therm.GetType)() \u003d \u003cTHERMOSTAT\u003e))\n)\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\nTest()\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nskip\nend TestActuator\n","class TestCase is subclass of [Test]\nprotected  name:seq of (char) :\u003d (undefined)\npublic  TestCase(seq of (char)) (seq of (char) \u003d\u003d\u003e TestCase)\n\tTestCase(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\npublic  GetName() (() \u003d\u003d\u003e seq of (char))\n\tGetName()() \u003d\u003d\nreturn (name)\nprotected  AssertTrue(bool) (bool \u003d\u003d\u003e ())\n\tAssertTrue(bool)(pb) \u003d\u003d\nif (not pb)\nthen\nexit (\u003cFAILURE\u003e)\nprotected  AssertFalse(bool) (bool \u003d\u003d\u003e ())\n\tAssertFalse(bool)(pb) \u003d\u003d\nif pb\nthen\nexit (\u003cFAILURE\u003e)\npublic  Run(TestResult) (TestResult \u003d\u003d\u003e ())\n\tRun(TestResult)(ptr) \u003d\u003d\ntrap in \u0027TestCase\u0027 (TestCase.vdmpp) at line 41:14\u003cFAILURE\u003eADefPatternBind[]ADefPatternBind with ptr.AddFailure(self) in (\n\nSetUp();\nRunTest();\nTearDown()\n)\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\nis subclass responsibility\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\nis subclass responsibility\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nis subclass responsibility\nend TestCase\n","class TestComplete\npublic  Execute() (() \u003d\u003d\u003e ())\n\tExecute()() \u003d\u003d\n(\nts:TestSuite :\u003d new TestSuite()\n\nts.AddTest(new TestSensor(\"TestSensor\"));\nts.AddTest(new TestActuator(\"TestActuator\"));\nts.AddTest(new TestHostController(\"TestHC\"));\nts.Run()\n)\nend TestComplete\n","class TestHostController is subclass of [TestCase]\nprivate  world:World :\u003d (undefined)\nprivate  host:HostController :\u003d (undefined)\nprivate  tempSensor:TemperatureSensor :\u003d (undefined)\nprivate  humidSensor:HumidSensor :\u003d (undefined)\nprivate  win:Window :\u003d (undefined)\nprivate  therm:Thermostat :\u003d (undefined)\npublic  TestHostController(seq of (char)) (seq of (char) \u003d\u003d\u003e TestHostController)\n\tTestHostController(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\n(\n\nworld :\u003d new World();\nhost :\u003d new HostController(23, 78)\n)\nprotected  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\n(\n\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cTHTW\u003e));\nHA`TempNode.Step();\nHA`HumidNode.Step();\nAssertTrue(((HA`TempNode.ReadValue)() \u003d 20));\nAssertTrue(((HA`HumidNode.ReadValue)() \u003d 85));\nHA`Host.UpdateValues();\nAssertTrue(((HA`Host.GetTemp)() \u003d 20));\nAssertTrue(((HA`Host.GetHumid)() \u003d 85));\nHA`Host.Algorithm();\nAssertTrue(((HA`WinNode.GetCorrection)() \u003d \u003cOPEN\u003e));\nAssertTrue(((HA`ThermNode.GetCorrection)() \u003d \u003cNONE\u003e));\nHA`Host.RemoveNode((HA`HumidNode.GetID)(), (HA`HumidNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cTTW\u003e));\nHA`TempNode.Step();\nAssertTrue(((HA`TempNode.ReadValue)() \u003d 20));\nHA`Host.UpdateValues();\nAssertTrue(((HA`Host.GetTemp)() \u003d 20));\nHA`Host.Algorithm();\nAssertTrue(((HA`WinNode.GetCorrection)() \u003d \u003cCLOSE\u003e));\nAssertTrue(((HA`ThermNode.GetCorrection)() \u003d \u003cINC\u003e));\nHA`Host.RemoveNode((HA`WinNode.GetID)(), (HA`WinNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cTT\u003e));\nHA`TempNode.Step();\nAssertTrue(((HA`TempNode.ReadValue)() \u003d 20));\nHA`Host.UpdateValues();\nAssertTrue(((HA`Host.GetTemp)() \u003d 20));\nHA`Host.Algorithm();\nAssertTrue(((HA`ThermNode.GetCorrection)() \u003d \u003cINC\u003e));\nHA`Host.RemoveNode((HA`TempNode.GetID)(), (HA`TempNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cNONE\u003e));\nHA`Host.RemoveNode((HA`ThermNode.GetID)(), (HA`ThermNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cNONE\u003e));\nHA`Host.AddNode((HA`WinNode.GetID)(), (HA`WinNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cNONE\u003e));\nHA`Host.AddNode((HA`HumidNode.GetID)(), (HA`HumidNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cHW\u003e));\nHA`HumidNode.Step();\nAssertTrue(((HA`HumidNode.ReadValue)() \u003d 85));\nHA`Host.UpdateValues();\nAssertTrue(((HA`Host.GetHumid)() \u003d 85));\nHA`Host.Algorithm();\nAssertTrue(((HA`WinNode.GetCorrection)() \u003d \u003cOPEN\u003e));\nHA`Host.RemoveNode((HA`HumidNode.GetID)(), (HA`HumidNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cNONE\u003e));\nHA`Host.AddNode((HA`TempNode.GetID)(), (HA`TempNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cTW\u003e));\nHA`TempNode.Step();\nAssertTrue(((HA`TempNode.ReadValue)() \u003d 20));\nHA`Host.UpdateValues();\nAssertTrue(((HA`Host.GetTemp)() \u003d 20));\nHA`Host.Algorithm();\nAssertTrue(((HA`WinNode.GetCorrection)() \u003d \u003cCLOSE\u003e));\nHA`Host.AddNode((HA`ThermNode.GetID)(), (HA`ThermNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cTTW\u003e));\nHA`Host.AddNode((HA`HumidNode.GetID)(), (HA`HumidNode.GetType)());\nAssertTrue(((HA`Host.GetAlgo)() \u003d \u003cTHTW\u003e))\n)\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\nTest()\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nskip\nend TestHostController\n","class TestResult\nprivate  failures:seq of (TestCase) :\u003d []\npublic  AddFailure(TestCase) (TestCase \u003d\u003d\u003e ())\n\tAddFailure(TestCase)(ptst) \u003d\u003d\nfailures :\u003d (failures ^ [ptst])\npublic  Print(seq of (char)) (seq of (char) \u003d\u003d\u003e ())\n\tPrint(seq of (char))(pstr) \u003d\u003d\nlet - \u003d (new IO().echo)((pstr ^ \"\n\")) in skip\npublic  Show() (() \u003d\u003d\u003e ())\n\tShow()() \u003d\u003d\nif (failures \u003d [])\nthen\nPrint(\"No failures detected\")else\nfor in \u0027TestResult\u0027 (TestResult.vdmpp) at line 39:17failureADefPatternBind[failure \u003d TestCase]ADefPatternBind in failures do\nPrint(((failure.GetName)() ^ \" failed\"))\nend TestResult\n","class TestSensor is subclass of [TestCase]\nprivate  tempSensor:TemperatureSensor :\u003d (undefined)\nprivate  humidSensor:HumidSensor :\u003d (undefined)\npublic  TestSensor(seq of (char)) (seq of (char) \u003d\u003d\u003e TestSensor)\n\tTestSensor(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\n(\n\ntempSensor :\u003d new TemperatureSensor(1, \u003cTEMPSENSOR\u003e, 0);\nhumidSensor :\u003d new HumidSensor(2, \u003cHUMIDSENSOR\u003e, 0)\n)\nprotected  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\n(\n\nAssertTrue(((tempSensor.GetID)() \u003d 1));\nAssertTrue(((tempSensor.GetType)() \u003d \u003cTEMPSENSOR\u003e));\nAssertTrue(((tempSensor.ReadValue)() \u003d 0));\nAssertTrue(((humidSensor.GetID)() \u003d 2));\nAssertTrue(((humidSensor.GetType)() \u003d \u003cHUMIDSENSOR\u003e));\nAssertTrue(((humidSensor.ReadValue)() \u003d 0))\n)\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\nTest()\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nskip\nend TestSensor\n","class TestSuite is subclass of [Test]\nprivate  tests:seq of (Test) :\u003d []\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\nntr:TestResult :\u003d new TestResult()\n\nRun(ntr);\nntr.Show()\n)\npublic  Run(TestResult) (TestResult \u003d\u003d\u003e ())\n\tRun(TestResult)(result) \u003d\u003d\nfor in \u0027TestSuite\u0027 (TestSuite.vdmpp) at line 36:13testADefPatternBind[test \u003d Test]ADefPatternBind in tests do\ntest.Run(result)\npublic  AddTest(Test) (Test \u003d\u003d\u003e ())\n\tAddTest(Test)(test) \u003d\u003d\ntests :\u003d (tests ^ [test])\nend TestSuite\n","class TestSurroundings is subclass of [TestCase]\nprivate  env:Environment :\u003d (undefined)\npublic  TestSurroundings(seq of (char)) (seq of (char) \u003d\u003d\u003e TestSurroundings)\n\tTestSurroundings(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\nenv :\u003d new Environment()\nprotected  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\n(\n\nAssertTrue(((env.ReadTemp)() \u003d 20));\nAssertTrue(((env.ReadHumid)() \u003d 85));\nenv.IncTemp();\nAssertTrue(((env.ReadTemp)() \u003d 21));\nenv.DecTemp();\nAssertTrue(((env.ReadTemp)() \u003d 20));\nenv.SetTemp(23);\nAssertTrue(((env.ReadTemp)() \u003d 23));\nenv.IncHumid();\nAssertTrue(((env.ReadHumid)() \u003d 86));\nenv.DecHumid();\nAssertTrue(((env.ReadHumid)() \u003d 85));\nenv.SetHumid(71);\nAssertTrue(((env.ReadHumid)() \u003d 71))\n)\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\nTest()\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nskip\nend TestSurroundings\n","class Thermostat is subclass of [Actuator]\npublic  Thermostat(nat, nodeType) (nat * nodeType \u003d\u003d\u003e Thermostat)\n\tThermostat(nat, nodeType)(id, type) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nCorr :\u003d \u003cNONE\u003e\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\n\nif (Corr \u003d \u003cINC\u003e)\nthen\nWorld`env.IncTemp()elseif (Corr \u003d \u003cDEC\u003e)\nthen\nWorld`env.DecTemp()\n)\npublic  SetCorrection(correction) (correction \u003d\u003d\u003e ())\n\tSetCorrection(correction)(cor) \u003d\u003d\nCorr :\u003d cor\n\tpre ((cor \u003d \u003cINC\u003e) or ((cor \u003d \u003cDEC\u003e) or (cor \u003d \u003cNONE\u003e)))\npublic  GetCorrection() (() \u003d\u003d\u003e correction)\n\tGetCorrection()() \u003d\u003d\nreturn (Corr)\nend Thermostat\n","class Window is subclass of [Actuator]\npublic  Window(nat, nodeType) (nat * nodeType \u003d\u003d\u003e Window)\n\tWindow(nat, nodeType)(id, type) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nCorr :\u003d \u003cCLOSE\u003e\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\n\nif (Corr \u003d \u003cOPEN\u003e)\nthen\n(\n\nWorld`env.DecHumid();\nWorld`env.DecTemp()\n)\n)\npublic  SetCorrection(correction) (correction \u003d\u003d\u003e ())\n\tSetCorrection(correction)(cor) \u003d\u003d\nCorr :\u003d cor\n\tpre ((cor \u003d \u003cOPEN\u003e) or (cor \u003d \u003cCLOSE\u003e))\npublic  GetCorrection() (() \u003d\u003d\u003e correction)\n\tGetCorrection()() \u003d\u003d\nreturn (Corr)\nend Window\n","class World\npublic static  env:Environment :\u003d new Environment(\"scenario.txt\")\npublic static  timerRef:Timer :\u003d new Timer()\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nenv.Run()\n)\nend World\n","class Timer\nprivate  currentTime:nat :\u003d 0\nprivate static  stepLength:nat \u003d 10\npublic  StepTime() (() \u003d\u003d\u003e ())\n\tStepTime()() \u003d\u003d\ncurrentTime :\u003d (currentTime + stepLength)\npublic  GetTime() (() \u003d\u003d\u003e nat)\n\tGetTime()() \u003d\u003d\nreturn (currentTime)\nend Timer\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]