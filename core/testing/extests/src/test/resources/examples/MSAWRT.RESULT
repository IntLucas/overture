["class Actuator\nprotected  ID:nat :\u003d (undefined)\nprotected  Type:nodeType :\u003d (undefined)\nprotected  Corr:correction :\u003d (undefined)\npublic  GetID() (() \u003d\u003d\u003e nat)\n\tGetID()() \u003d\u003d\nreturn (ID)\npublic  GetType() (() \u003d\u003d\u003e nodeType)\n\tGetType()() \u003d\u003d\nreturn (Type)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\nis subclass responsibility\nend Actuator\n","class Environment\nprivate  io:IO :\u003d new IO()\nprivate  inlines:seq of (inline) :\u003d []\nprivate  outlines:seq of (outline) :\u003d []\nprivate  simtime:nat :\u003d (undefined)\nprivate  finished:bool :\u003d false\nprivate  envTemp:int :\u003d 20\nprivate  envHumid:int :\u003d 75\npublic static  inline \u003d inline\npublic static  outline \u003d outline\npublic  Environment(seq of (char)) (seq of (char) \u003d\u003d\u003e Environment)\n\tEnvironment(seq of (char))(fname) \u003d\u003d\n(\n\nlet mk_(-, mk_(t, input)) \u003d ((io.freadval))[(nat * seq of (inline))](fname) in (\n\ninlines :\u003d input;\nsimtime :\u003d t;\nenvTemp :\u003d 20;\nenvHumid :\u003d 75\n)\n)\n\tpre (fname \u003c\u003e [])\n\tpost ((inlines \u003c\u003e []) and (simtime \u003e 0))\nprivate  CreateSignal() (() \u003d\u003d\u003e ())\n\tCreateSignal()() \u003d\u003d\n(\n\nif ((len inlines) \u003e 0)\nthen\n(\ncurtime:nat :\u003d time\n\nlet mk_(tempIn, humidIn, timeIn) \u003d (hd inlines) in (\n\nif (timeIn \u003c\u003d curtime)\nthen\n(\n\nSetTemp(tempIn);\nSetHumid(humidIn);\ninlines :\u003d (tl inlines);\nreturn\n)\n)\n);\nif (time \u003e\u003d simtime)\nthen\n(\n\nShowResults();\nfinished :\u003d true;\nreturn\n)\n)\nprivate  ShowResults() (() \u003d\u003d\u003e ())\n\tShowResults()() \u003d\u003d\n(\n\nIO`print(\"Time, Temperature, Humidity\n\");\nfor all i in set (inds outlines) do\n(\n\nIO`print(\"\n\");\nIO`print(outlines(i))\n)\n)\npublic  HandleEvent(nat, nat, nat) (nat * nat * nat \u003d\u003d\u003e ())\n\tHandleEvent(nat, nat, nat)(curTime, TempValue, HumidValue) \u003d\u003d\noutlines :\u003d (outlines ^ [mk_(curTime, TempValue, HumidValue)])\npublic  SetTemp(nat) (nat \u003d\u003d\u003e ())\n\tSetTemp(nat)(t) \u003d\u003d\n(\n\nenvTemp :\u003d t;\nHandleEvent(time, envTemp, envHumid)\n)\npublic  SetHumid(nat) (nat \u003d\u003d\u003e ())\n\tSetHumid(nat)(h) \u003d\u003d\n(\n\nenvHumid :\u003d h;\nHandleEvent(time, envTemp, envHumid)\n)\npublic  ReadTemp() (() \u003d\u003d\u003e int)\n\tReadTemp()() \u003d\u003d\nreturn (envTemp)\npublic  IncTemp() (() \u003d\u003d\u003e ())\n\tIncTemp()() \u003d\u003d\n(\n\nenvTemp :\u003d (envTemp + 1);\nHandleEvent(time, envTemp, envHumid)\n)\npublic  DecTemp() (() \u003d\u003d\u003e ())\n\tDecTemp()() \u003d\u003d\n(\n\nenvTemp :\u003d (envTemp - 1);\nHandleEvent(time, envTemp, envHumid)\n)\npublic  ReadHumid() (() \u003d\u003d\u003e nat)\n\tReadHumid()() \u003d\u003d\nreturn (envHumid)\npublic  IncHumid() (() \u003d\u003d\u003e ())\n\tIncHumid()() \u003d\u003d\n(\n\nenvHumid :\u003d (envHumid + 1);\nHandleEvent(time, envTemp, envHumid)\n)\npublic  DecHumid() (() \u003d\u003d\u003e ())\n\tDecHumid()() \u003d\u003d\n(\n\nenvHumid :\u003d (envHumid - 1);\nHandleEvent(time, envTemp, envHumid)\n)\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  mutex(IncTemp)\nprivate  mutex(DecTemp)\nprivate  mutex(SetTemp)\nprivate  mutex(ReadTemp, IncTemp, DecTemp, SetTemp)\nprivate  mutex(IncHumid)\nprivate  mutex(DecHumid)\nprivate  mutex(SetHumid)\nprivate  mutex(ReadHumid, IncHumid, DecHumid, SetHumid)\nprivate  mutex(HandleEvent)\nprivate  per IsFinished \u003d\u003e finished\nprotected  thread periodic(1.0E9, 0, 0, 0)(CreateSignal())\nend Environment\n","system HA\nprivate  cpu1:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu2:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu5:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu3:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu4:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  bus1:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000.0, {cpu1, cpu2, cpu3, cpu4, cpu5})\npublic static  Host:HostController :\u003d new HostController(20, 75)\npublic static  TempNode:TemperatureSensor :\u003d new TemperatureSensor(1, \u003cTEMPSENSOR\u003e, 20)\npublic static  HumidNode:HumidSensor :\u003d new HumidSensor(2, \u003cHUMIDSENSOR\u003e, 75)\npublic static  ThermNode:Thermostat :\u003d new Thermostat(3, \u003cTHERMOSTAT\u003e)\npublic static  WinNode:Window :\u003d new Window(4, \u003cWINDOW\u003e)\npublic  HA() (() \u003d\u003d\u003e HA)\n\tHA()() \u003d\u003d\n(\n\ncpu1.deploy(Host);\ncpu2.deploy(TempNode);\ncpu5.deploy(HumidNode);\ncpu3.deploy(ThermNode);\ncpu4.deploy(WinNode)\n)\nend HA\n","class HostController\nprivate static  OVERSHOOT_CNT:nat \u003d 2\nprivate  finished:bool :\u003d false\nprivate  TargetTemp:nat :\u003d (undefined)\nprivate  Temp:nat :\u003d 0\nprivate  TargetHumid:nat :\u003d (undefined)\nprivate  Humid:nat :\u003d 0\nprivate  NodeList:map (nat) to (nodeType) :\u003d {|-\u003e}\nprivate  Algo:algType :\u003d \u003cNONE\u003e\nprivate  incTempCnt:nat :\u003d 0\nprivate  decTempCnt:nat :\u003d 0\nprivate  decHumidCnt:nat :\u003d 0\npublic static  algType \u003d algType\npublic  HostController(nat, nat) (nat * nat \u003d\u003d\u003e HostController)\n\tHostController(nat, nat)(t, h) \u003d\u003d\n(\n\nTargetTemp :\u003d t;\nTargetHumid :\u003d h\n)\npublic  UpdateValues() (() \u003d\u003d\u003e ())\n\tUpdateValues()() \u003d\u003d\n(\n\nfor all r in set (rng NodeList) do\n(\n\nif (r \u003d \u003cHUMIDSENSOR\u003e)\nthen\nHumid :\u003d (HA`HumidNode.ReadValue)();\nif (r \u003d \u003cTEMPSENSOR\u003e)\nthen\nTemp :\u003d (HA`TempNode.ReadValue)()\n)\n)\npublic  GetAlgo() (() \u003d\u003d\u003e algType)\n\tGetAlgo()() \u003d\u003d\nreturn (Algo)\npublic  GetTemp() (() \u003d\u003d\u003e nat)\n\tGetTemp()() \u003d\u003d\nreturn (Temp)\npublic  GetHumid() (() \u003d\u003d\u003e nat)\n\tGetHumid()() \u003d\u003d\nreturn (Humid)\npublic  Algorithm() (() \u003d\u003d\u003e ())\n\tAlgorithm()() \u003d\u003d\n(\n\nif (Humid \u003e TargetHumid)\nthen\ndecHumidCnt :\u003d (decHumidCnt + 1)elseif (Temp \u003e TargetTemp)\nthen\ndecTempCnt :\u003d (decTempCnt + 1)elseif (Temp \u003c TargetTemp)\nthen\nincTempCnt :\u003d (incTempCnt + 1);\ncases Algo :\n  \u003cTHTW\u003e -\u003e THTWAlgo()  \u003cTTW\u003e -\u003e TTWAlgo()  \u003cTT\u003e -\u003e TTAlgo()  \u003cTW\u003e -\u003e TWAlgo()  \u003cHW\u003e -\u003e HWAlgo()  \u003cNONE\u003e -\u003e return end\n)\nprivate  THTWAlgo() (() \u003d\u003d\u003e ())\n\tTHTWAlgo()() \u003d\u003d\n(\n\nif (incTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cINC\u003e);\nincTempCnt :\u003d 0\n)else\nif (decTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\ndecTempCnt :\u003d 0\n)else\nif (decHumidCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\ndecHumidCnt :\u003d 0\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cNONE\u003e)\n)\n)\nprivate  TTWAlgo() (() \u003d\u003d\u003e ())\n\tTTWAlgo()() \u003d\u003d\n(\n\nif (incTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cINC\u003e);\nincTempCnt :\u003d 0\n)else\nif (decTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\ndecTempCnt :\u003d 0\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e);\nHA`ThermNode.SetCorrection(\u003cNONE\u003e)\n)\n)\nprivate  TTAlgo() (() \u003d\u003d\u003e ())\n\tTTAlgo()() \u003d\u003d\n(\n\nif (incTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cINC\u003e);\nincTempCnt :\u003d 0\n)else\nif (decTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`ThermNode.SetCorrection(\u003cDEC\u003e);\ndecTempCnt :\u003d 0\n)else\n(\n\nHA`ThermNode.SetCorrection(\u003cNONE\u003e)\n)\n)\nprivate  TWAlgo() (() \u003d\u003d\u003e ())\n\tTWAlgo()() \u003d\u003d\n(\n\nif (decTempCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\ndecTempCnt :\u003d 0\n)else\nif (decHumidCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\ndecHumidCnt :\u003d 0\n)else\n(\n\nHA`WinNode.SetCorrection(\u003cCLOSE\u003e)\n)\n)\nprivate  HWAlgo() (() \u003d\u003d\u003e ())\n\tHWAlgo()() \u003d\u003d\n(\n\nif (decHumidCnt \u003e\u003d OVERSHOOT_CNT)\nthen\n(\n\nHA`WinNode.SetCorrection(\u003cOPEN\u003e);\ndecHumidCnt :\u003d 0\n)\n)\nprivate  UpdateAlgorithm() (() \u003d\u003d\u003e ())\n\tUpdateAlgorithm()() \u003d\u003d\n(\n\nif ((rng NodeList) \u003d {})\nthen\nAlgo :\u003d \u003cNONE\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cHUMIDSENSOR\u003e, \u003cTHERMOSTAT\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cTHTW\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cTHERMOSTAT\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cTTW\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cTHERMOSTAT\u003e})\nthen\nAlgo :\u003d \u003cTT\u003eelseif ((rng NodeList) \u003d {\u003cTEMPSENSOR\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cTW\u003eelseif ((rng NodeList) \u003d {\u003cHUMIDSENSOR\u003e, \u003cWINDOW\u003e})\nthen\nAlgo :\u003d \u003cHW\u003eelse\nAlgo :\u003d \u003cNONE\u003e\n)\npublic  AddNode(nat, nodeType) (nat * nodeType \u003d\u003d\u003e ())\n\tAddNode(nat, nodeType)(id, type) \u003d\u003d\n(\n\nNodeList :\u003d (NodeList ++ {id |-\u003e type});\nUpdateAlgorithm()\n)\n\tpre (id not in set (dom NodeList))\n\tpost ((card (dom NodeList)) \u003d ((card (dom NodeList~)) + 1))\npublic  RemoveNode(nat, nodeType) (nat * nodeType \u003d\u003d\u003e ())\n\tRemoveNode(nat, nodeType)(id, type) \u003d\u003d\n(\n\nif (NodeList(id) \u003d type)\nthen\nNodeList :\u003d ({id} \u003c-: NodeList);\nUpdateAlgorithm()\n)\n\tpre (id in set (dom NodeList))\n\tpost ((card (dom NodeList)) \u003d ((card (dom NodeList~)) - 1))\nprivate  PeriodicOp() (() \u003d\u003d\u003e ())\n\tPeriodicOp()() \u003d\u003d\n(\n\nUpdateValues();\nAlgorithm()\n)\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\npublic  Finish() (() \u003d\u003d\u003e ())\n\tFinish()() \u003d\u003d\nfinished :\u003d true\nprivate  mutex(AddNode, RemoveNode)\nprivate  per IsFinished \u003d\u003e finished\nprotected  thread periodic(1.0E9, 0, 0, 0)(PeriodicOp())\nend HostController\n","class HumidSensor is subclass of [Sensor]\nprivate  finished:bool :\u003d false\npublic  HumidSensor(nat, nodeType, nat) (nat * nodeType * nat \u003d\u003d\u003e HumidSensor)\n\tHumidSensor(nat, nodeType, nat)(id, type, val) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nValue :\u003d val\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\nValue :\u003d (World`env.ReadHumid)()\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  per IsFinished \u003d\u003e finished\nprotected  thread periodic(1.0E9, 0, 0, 0)(Step())\nend HumidSensor\n","class NetworkTypes\npublic static  nodeType \u003d nodeType\npublic static  correction \u003d correction\nend NetworkTypes\n","class Sensor\nprotected  ID:nat :\u003d (undefined)\nprotected  Type:nodeType :\u003d (undefined)\nprotected  Value:int :\u003d (undefined)\npublic  GetID() (() \u003d\u003d\u003e nat)\n\tGetID()() \u003d\u003d\nreturn (ID)\npublic  GetType() (() \u003d\u003d\u003e nodeType)\n\tGetType()() \u003d\u003d\nreturn (Type)\npublic  ReadValue() (() \u003d\u003d\u003e int)\n\tReadValue()() \u003d\u003d\nreturn (Value)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\nis subclass responsibility\nend Sensor\n","class TemperatureSensor is subclass of [Sensor]\nprivate  finished:bool :\u003d false\npublic  TemperatureSensor(nat, nodeType, int) (nat * nodeType * int \u003d\u003d\u003e TemperatureSensor)\n\tTemperatureSensor(nat, nodeType, int)(id, type, val) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nValue :\u003d val\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\nValue :\u003d (World`env.ReadTemp)()\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  per IsFinished \u003d\u003e finished\nprotected  thread periodic(1.0E9, 0, 0, 0)(Step())\nend TemperatureSensor\n","class Thermostat is subclass of [Actuator]\nprivate  finished:bool :\u003d false\npublic  Thermostat(nat, nodeType) (nat * nodeType \u003d\u003d\u003e Thermostat)\n\tThermostat(nat, nodeType)(id, type) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nCorr :\u003d \u003cNONE\u003e\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\ntempCorr:correction :\u003d GetCorrection()\n\nif (tempCorr \u003d \u003cINC\u003e)\nthen\nWorld`env.IncTemp()elseif (tempCorr \u003d \u003cDEC\u003e)\nthen\nWorld`env.DecTemp()\n)\npublic async  SetCorrection(correction) (correction \u003d\u003d\u003e ())\n\tSetCorrection(correction)(cor) \u003d\u003d\nCorr :\u003d cor\n\tpre ((cor \u003d \u003cINC\u003e) or ((cor \u003d \u003cDEC\u003e) or (cor \u003d \u003cNONE\u003e)))\npublic  GetCorrection() (() \u003d\u003d\u003e correction)\n\tGetCorrection()() \u003d\u003d\nreturn (Corr)\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  per IsFinished \u003d\u003e finished\nprivate  mutex(SetCorrection, GetCorrection)\nprotected  thread periodic(1.0E9, 0, 0, 0)(Step())\nend Thermostat\n","class Window is subclass of [Actuator]\nprivate  finished:bool :\u003d false\npublic  Window(nat, nodeType) (nat * nodeType \u003d\u003d\u003e Window)\n\tWindow(nat, nodeType)(id, type) \u003d\u003d\n(\n\nID :\u003d id;\nType :\u003d type;\nCorr :\u003d \u003cCLOSE\u003e\n)\npublic  Step() (() \u003d\u003d\u003e ())\n\tStep()() \u003d\u003d\n(\ntempCorr:correction :\u003d GetCorrection()\n\nif (tempCorr \u003d \u003cOPEN\u003e)\nthen\n(\n\nWorld`env.DecHumid();\nWorld`env.DecTemp()\n)\n)\npublic async  SetCorrection(correction) (correction \u003d\u003d\u003e ())\n\tSetCorrection(correction)(cor) \u003d\u003d\nCorr :\u003d cor\n\tpre ((cor \u003d \u003cOPEN\u003e) or (cor \u003d \u003cCLOSE\u003e))\npublic  GetCorrection() (() \u003d\u003d\u003e correction)\n\tGetCorrection()() \u003d\u003d\nreturn (Corr)\npublic  IsFinished() (() \u003d\u003d\u003e ())\n\tIsFinished()() \u003d\u003d\nskip\nprivate  per IsFinished \u003d\u003e finished\nprivate  mutex(SetCorrection, GetCorrection)\nprotected  thread periodic(1.0E9, 0, 0, 0)(Step())\nend Window\n","class World\npublic static  env:[Environment] :\u003d nil\npublic  World() (() \u003d\u003d\u003e World)\n\tWorld()() \u003d\u003d\n(\n\nenv :\u003d new Environment(\"scenario.txt\");\nHA`Host.AddNode((HA`TempNode.GetID)(), (HA`TempNode.GetType)());\nHA`Host.AddNode((HA`HumidNode.GetID)(), (HA`HumidNode.GetType)());\nHA`Host.AddNode((HA`ThermNode.GetID)(), (HA`ThermNode.GetType)());\nHA`Host.AddNode((HA`WinNode.GetID)(), (HA`WinNode.GetType)());\nstart (HA`TempNode);\nstart (HA`HumidNode);\nstart (HA`ThermNode);\nstart (HA`WinNode);\nstart (HA`Host)\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nstart (env);\nenv.IsFinished()\n)\nend World\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]