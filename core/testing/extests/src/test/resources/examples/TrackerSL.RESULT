["SIZE:nat1 \u003d 3","MAX:nat1 \u003d (SIZE * SIZE)","Player \u003d Player","Pos \u003d Pos\n\tinv p \u003d\u003d (((p.row) \u003c\u003d SIZE) and ((p.col) \u003c\u003d SIZE))","Game \u003d Game","S:set of (nat1) \u003d {1, ... ,SIZE}","winningLines:set of (set of (Pos)) \u003d (dunion {{{mk_Pos(r, c) | c in set S} | r in set S}, {{mk_Pos(r, c) | r in set S} | c in set S}, {{mk_Pos(x, x) | x in set S}}, {{mk_Pos(x, ((SIZE - x) + 1)) | x in set S}}})","private static hasWon: (Game * Player -\u003e bool)\n\thasWon(g, p) \u003d\u003d\nlet moves:set of (Pos) \u003d movesForPlayer(g, p) in (exists line in set winningLines \u0026 (line subset moves))","private static whoWon: (Game -\u003e Player)\n\twhoWon(g) \u003d\u003d\n(iota p:Player \u0026 hasWon(g, p))\n\tpre isWon(g)","private static isWon: (Game -\u003e bool)\n\tisWon(g) \u003d\u003d\n(exists1 p:Player \u0026 hasWon(g, p))","private static isDraw: (Game -\u003e bool)\n\tisDraw(g) \u003d\u003d\n((not isWon(g)) and (moveCountLeft(g) \u003d 0))","private static isUnfinished: (Game -\u003e bool)\n\tisUnfinished(g) \u003d\u003d\n((not isWon(g)) and (not isDraw(g)))","private static movesSoFar: (Game -\u003e set of (Pos))\n\tmovesSoFar(g) \u003d\u003d\n(dom g)","private static moveCountSoFar: (Game -\u003e nat)\n\tmoveCountSoFar(g) \u003d\u003d\n(card movesSoFar(g))","private static moveCountLeft: (Game -\u003e nat)\n\tmoveCountLeft(g) \u003d\u003d\n(MAX - moveCountSoFar(g))","private static movesForPlayer: (Game * Player -\u003e set of (Pos))\n\tmovesForPlayer(g, p) \u003d\u003d\n(dom (g :\u003e {p}))","PLAYERS:set of (Player) \u003d {p | p:Player}","Moves \u003d Moves\n\tinv moves \u003d\u003d (((len moves) \u003d (card (elems moves))) and (((len moves) \u003e ((card PLAYERS) * (SIZE - 1))) and ((len moves) \u003c\u003d MAX)))","PlayOrder \u003d PlayOrder\n\tinv order \u003d\u003d (((len order) \u003d (card (elems order))) and ((elems order) \u003d PLAYERS))","state Sigmaof\n[game : Game]","move (Player * Pos \u003d\u003d\u003e ())\n\tmove(p, pos) \u003d\u003d\ngame(pos) :\u003d p\n\tpre ((pos not in set movesSoFar(game)) and (moveCountLeft(game) \u003e 0))\n\tpost ((game \u003d (game~ munion {pos |-\u003e p})) and (moveCountSoFar(game) \u003d (moveCountSoFar(game~) + 1)))","play (PlayOrder * Moves \u003d\u003d\u003e (\u003cDRAW\u003e | \u003cUNFINISHED\u003e | Player))\n\tplay(playorder, moves) \u003d\u003d\n(\norder:PlayOrder :\u003d playorder\n\ngame :\u003d {|-\u003e};\nfor in \u0027XO\u0027 (XO.vdmsl) at line 122:13mADefPatternBind[m \u003d Pos]ADefPatternBind in moves do\nlet player:Player \u003d (hd order) in (\n\nmove(player, m);\nif isWon(game)\nthen\nreturn (whoWon(game))elseif isDraw(game)\nthen\nreturn (\u003cDRAW\u003e)else\norder :\u003d ((tl order) ^ [player])\n);\nreturn (\u003cUNFINISHED\u003e)\n)\n\tpost (if (RESULT \u003d \u003cDRAW\u003e)\nthen isDraw(game)\nelse (if (RESULT \u003d \u003cUNFINISHED\u003e)\nthen isUnfinished(game)\nelse (RESULT \u003d whoWon(game))))","OX:seq1 of ((\u003cCROSS\u003e | \u003cNOUGHT\u003e)) \u003d [\u003cNOUGHT\u003e, \u003cCROSS\u003e]","XO:seq1 of ((\u003cCROSS\u003e | \u003cNOUGHT\u003e)) \u003d [\u003cCROSS\u003e, \u003cNOUGHT\u003e]","XX:seq1 of (\u003cCROSS\u003e) \u003d [\u003cCROSS\u003e]","T1:seq1 of (Pos) \u003d [mk_Pos(1, 1), mk_Pos(1, 2), mk_Pos(2, 1), mk_Pos(1, 3), mk_Pos(3, 1)]","T2:seq1 of (Pos) \u003d [mk_Pos(1, 1), mk_Pos(1, 2), mk_Pos(1, 3), mk_Pos(2, 2), mk_Pos(3, 1), mk_Pos(3, 2)]","E1:seq1 of (Pos) \u003d [mk_Pos(1, 1), mk_Pos(1, 1), mk_Pos(1, 2), mk_Pos(2, 1), mk_Pos(1, 3)]","S:set of (int) \u003d {1, ... ,SIZE}","test (PlayOrder * Moves \u003d\u003d\u003e (\u003cDRAW\u003e | \u003cUNFINISHED\u003e | Player))\n\ttest(playorder, moves) \u003d\u003d\nXO`play(playorder, moves)","[ALL][[[ALLPOS:set of (Pos) \u003d {mk_Pos(r, c) | r, c in set S}]m1 in set ALLPOSALetBeStBindingTraceDefinitionm2 in set (ALLPOS \\ {m1})ALetBeStBindingTraceDefinitionm3 in set (ALLPOS \\ {m1, m2})ALetBeStBindingTraceDefinitionm4 in set (ALLPOS \\ {m1, m2, m3})ALetBeStBindingTraceDefinitionm5 in set (ALLPOS \\ {m1, m2, m3, m4})ALetBeStBindingTraceDefinitionXO`play(XO, [m1, m2, m3, m4, m5]){1,1}def m5 in set (ALLPOS \\ {m1, m2, m3, m4})def m4 in set (ALLPOS \\ {m1, m2, m3})def m3 in set (ALLPOS \\ {m1, m2})def m2 in set (ALLPOS \\ {m1})def m1 in set ALLPOS]]"]