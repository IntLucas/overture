["class Env\nprivate  senv:map (Id) to (SType) :\u003d (undefined)\nprivate  denv:map (Id) to (Val) :\u003d (undefined)\npublic  Env(map (Id) to (SType), map (Id) to (Val)) (map (Id) to (SType) * map (Id) to (Val) \u003d\u003d\u003e Env)\n\tEnv(map (Id) to (SType), map (Id) to (Val))(s, d) \u003d\u003d\n(\n\nsenv :\u003d s;\ndenv :\u003d d\n)\npublic  GetSenv() (() \u003d\u003d\u003e map (Id) to (SType))\n\tGetSenv()() \u003d\u003d\nreturn (senv)\npublic  GetDenv() (() \u003d\u003d\u003e map (Id) to (Val))\n\tGetDenv()() \u003d\u003d\nreturn (denv)\npublic  GetVal(Id) (Id \u003d\u003d\u003e Val)\n\tGetVal(Id)(id) \u003d\u003d\nreturn (denv(id))\n\tpre (id in set (dom denv))\npublic  GetAVal(Id, Id) (Id * Id \u003d\u003d\u003e Val)\n\tGetAVal(Id, Id)(id, index) \u003d\u003d\nreturn (denv(id)(index))\n\tpre ((id in set (dom denv)) and (index in set (dom denv(id))))\npublic  GetSType(Id) (Id \u003d\u003d\u003e SType)\n\tGetSType(Id)(id) \u003d\u003d\nreturn (senv(id))\n\tpre (id in set (dom denv))\npublic  GetSAType(Id) (Id \u003d\u003d\u003e AType)\n\tGetSAType(Id)(id) \u003d\u003d\nreturn (senv(id))\n\tpre (id in set (dom denv))\npublic  GetAType(Id, Id) (Id * Id \u003d\u003d\u003e SType)\n\tGetAType(Id, Id)(id, index) \u003d\u003d\nreturn (senv(id)(index))\n\tpre ((id in set (dom denv)) and (index in set (dom denv(id))))\nend Env\n","class Evaluator\nprivate  pdp:PDP :\u003d (undefined)\nprivate  env:Env :\u003d (undefined)\nprivate  req:Request :\u003d (undefined)\nprivate  inst:Inst :\u003d (undefined)\nprivate static  Inst \u003d Inst\nprivate static  requester:UnId \u003d mk_FExp`UnId(\u003crequester\u003e)\nprivate static  resource:UnId \u003d mk_FExp`UnId(\u003cresource\u003e)\npublic  Evaluator(Request, PDP, Env) (Request * PDP * Env \u003d\u003d\u003e Evaluator)\n\tEvaluator(Request, PDP, Env)(r, p, e) \u003d\u003d\n(\n\nreq :\u003d r;\npdp :\u003d p;\nenv :\u003d e;\ninst :\u003d mk_Inst({requester |-\u003e (req.GetSubject)(), resource |-\u003e (req.GetResource)()})\n)\npublic  evaluate() (() \u003d\u003d\u003e Effect)\n\tevaluate()() \u003d\u003d\nif ((pdp.GetpolicyCombAlg)() \u003d \u003cdenyOverrides\u003e)\nthen\nreturn (evaluatePDPDenyOverrides())elseif ((pdp.GetpolicyCombAlg)() \u003d \u003cpermitOverrides\u003e)\nthen\nreturn (evaluatePDPPermitOverrides())else\nreturn (\u003cNotApplicable\u003e)\nprivate  evaluatePDPDenyOverrides() (() \u003d\u003d\u003e Effect)\n\tevaluatePDPDenyOverrides()() \u003d\u003d\nif (exists p in set (pdp.Getpolicies)() \u0026 ((evaluatePol(p) \u003d \u003cDeny\u003e) or (evaluatePol(p) \u003d \u003cIndeterminate\u003e)))\nthen\nreturn (\u003cDeny\u003e)elseif (exists p in set (pdp.Getpolicies)() \u0026 (evaluatePol(p) \u003d \u003cPermit\u003e))\nthen\nreturn (\u003cPermit\u003e)else\nreturn (\u003cNotApplicable\u003e)\nprivate  evaluatePDPPermitOverrides() (() \u003d\u003d\u003e Effect)\n\tevaluatePDPPermitOverrides()() \u003d\u003d\nif (exists p in set (pdp.Getpolicies)() \u0026 ((evaluatePol(p) \u003d \u003cPermit\u003e) or (evaluatePol(p) \u003d \u003cIndeterminate\u003e)))\nthen\nreturn (\u003cPermit\u003e)elseif (exists p in set (pdp.Getpolicies)() \u0026 (evaluatePol(p) \u003d \u003cDeny\u003e))\nthen\nreturn (\u003cDeny\u003e)else\nreturn (\u003cNotApplicable\u003e)\nprivate  evaluateRule(Rule) (Rule \u003d\u003d\u003e Effect)\n\tevaluateRule(Rule)(rule) \u003d\u003d\nif targetmatch((rule.target))\nthen\nif ((rule.cond) \u003d nil)\nthen\nreturn ((rule.effect))else\nif ((rule.cond).wfExpr)(env)\nthen\ncases ((rule.cond).EvaluateBind)(req, env) :\n  true -\u003e return ((rule.effect))  false -\u003e return (\u003cNotApplicable\u003e)  \u003cIndet\u003e -\u003e return (\u003cIndeterminate\u003e)  others -\u003e error endelse\nreturn (\u003cNotApplicable\u003e)else\nreturn (\u003cNotApplicable\u003e)\nprivate  evaluatePol(Policy) (Policy \u003d\u003d\u003e Effect)\n\tevaluatePol(Policy)(pol) \u003d\u003d\nif targetmatch((pol.target))\nthen\ncases (pol.ruleCombAlg) :\n  \u003cdenyOverrides\u003e -\u003e return (evaluateRulesDenyOverrides((pol.rules)))  \u003cpermitOverrides\u003e -\u003e return (evaluateRulesPermitOverrides((pol.rules)))  others -\u003e return (\u003cNotApplicable\u003e) endelse\nreturn (\u003cNotApplicable\u003e)\nprivate  evaluateRulesDenyOverrides(set of (Rule)) (set of (Rule) \u003d\u003d\u003e Effect)\n\tevaluateRulesDenyOverrides(set of (Rule))(rs) \u003d\u003d\nif (exists r in set rs \u0026 (evaluateRule(r) \u003d \u003cDeny\u003e))\nthen\nreturn (\u003cDeny\u003e)elseif (exists r in set rs \u0026 ((evaluateRule(r) \u003d \u003cIndeterminate\u003e) and ((pdp.GetEffect)(r) \u003d \u003cDeny\u003e)))\nthen\nreturn (\u003cIndeterminate\u003e)elseif (exists r in set rs \u0026 (evaluateRule(r) \u003d \u003cPermit\u003e))\nthen\nreturn (\u003cPermit\u003e)elseif (exists r in set rs \u0026 ((evaluateRule(r) \u003d \u003cIndeterminate\u003e) and ((pdp.GetEffect)(r) \u003d \u003cPermit\u003e)))\nthen\nreturn (\u003cIndeterminate\u003e)else\nreturn (\u003cNotApplicable\u003e)\nprivate  evaluateRulesPermitOverrides(set of (Rule)) (set of (Rule) \u003d\u003d\u003e Effect)\n\tevaluateRulesPermitOverrides(set of (Rule))(rs) \u003d\u003d\nif (exists r in set rs \u0026 (evaluateRule(r) \u003d \u003cPermit\u003e))\nthen\nreturn (\u003cPermit\u003e)elseif (exists r in set rs \u0026 ((evaluateRule(r) \u003d \u003cIndeterminate\u003e) and ((pdp.GetEffect)(r) \u003d \u003cPermit\u003e)))\nthen\nreturn (\u003cIndeterminate\u003e)elseif (exists r in set rs \u0026 (evaluateRule(r) \u003d \u003cDeny\u003e))\nthen\nreturn (\u003cDeny\u003e)elseif (exists r in set rs \u0026 ((evaluateRule(r) \u003d \u003cIndeterminate\u003e) and ((pdp.GetEffect)(r) \u003d \u003cDeny\u003e)))\nthen\nreturn (\u003cIndeterminate\u003e)else\nreturn (\u003cNotApplicable\u003e)\nprivate  targetmatch(Target) (Target \u003d\u003d\u003e bool)\n\ttargetmatch(Target)(tgt) \u003d\u003d\nif ((((tgt.subjects) \u003d {}) or ((req.GetSubject)() in set (tgt.subjects))) and ((((tgt.resources) \u003d {}) or ((req.GetResource)() in set (tgt.resources))) and (((tgt.actions) \u003d {}) or (((req.GetActions)() inter (tgt.actions)) \u003c\u003e {}))))\nthen\nreturn (true)else\nreturn (false)\nend Evaluator\n","class FExp\nprivate  fexp:Expr :\u003d (undefined)\npublic  FExp(Expr) (Expr \u003d\u003d\u003e FExp)\n\tFExp(Expr)(fe) \u003d\u003d\nfexp :\u003d fe\npublic  GetExp() (() \u003d\u003d\u003e Expr)\n\tGetExp()() \u003d\u003d\nreturn (fexp)\npublic static  AtomicVal \u003d AtomicVal\npublic static  BoolArray \u003d BoolArray\npublic static  IntArray \u003d IntArray\npublic static  UnArray \u003d UnArray\npublic static  StructuredVal \u003d StructuredVal\npublic static  Val \u003d Val\npublic static  Expr \u003d Expr\npublic static  Id \u003d Id\npublic static  UnId \u003d UnId\npublic static  BoolExpr \u003d BoolExpr\npublic static  RelExpr \u003d RelExpr\npublic static  Unary \u003d Unary\npublic static  Infix \u003d Infix\npublic static  Equal \u003d Equal\npublic static  boolLiteral \u003d boolLiteral\npublic static  ArithExpr \u003d ArithExpr\npublic static  intLiteral \u003d intLiteral\npublic static  ArrayLookup \u003d ArrayLookup\npublic  BindExpr(Expr, Request) (Expr * Request \u003d\u003d\u003e Expr)\n\tBindExpr(Expr, Request)(fe, req) \u003d\u003d\ncases fe :\n  mk_UnId(\u003crequester\u003e) -\u003e return ((req.GetSubject)())  mk_UnId(\u003cresource\u003e) -\u003e return ((req.GetResource)())  mk_RelExpr(left, op, right) -\u003e return (mk_RelExpr(BindExpr(left, req), op, BindExpr(right, req)))  mk_Unary(op, body) -\u003e return (mk_Unary(op, BindExpr(body, req)))  mk_Infix(left, op, right) -\u003e return (mk_Infix(BindExpr(left, req), op, BindExpr(right, req)))  mk_intLiteral(-) -\u003e return (fe)  mk_boolLiteral(-) -\u003e return (fe)  mk_ArrayLookup(aname, index) -\u003e return (mk_ArrayLookup(BindExpr(aname, req), BindExpr(index, req)))  others -\u003e return (fe) end\npublic  EvaluateBind(Request, Env) (Request * Env \u003d\u003d\u003e Val)\n\tEvaluateBind(Request, Env)(req, env) \u003d\u003d\nlet expr:Expr \u003d BindExpr(fexp, req) in Evaluate(expr, env)\nprivate  Evaluate(Expr, Env) (Expr * Env \u003d\u003d\u003e Val)\n\tEvaluate(Expr, Env)(expr, env) \u003d\u003d\ncases expr :\n  mk_RelExpr(-, -, -) -\u003e MRelExpr(expr, env)  mk_Unary(-, -) -\u003e MUnary(expr, env)  mk_Infix(-, -, -) -\u003e MInfix(expr, env)  mk_Equal(-, -, -) -\u003e MEqual(expr, env)  mk_boolLiteral(-) -\u003e MLiteral(expr)  mk_intLiteral(-) -\u003e MLiteral(expr)  mk_ArrayLookup(-, -) -\u003e MArrayLookup(expr, env)  others -\u003e MId(expr, env) end\nprivate  MId(Id, Env) (Id * Env \u003d\u003d\u003e Val)\n\tMId(Id, Env)(Id, env) \u003d\u003d\nreturn ((env.GetVal)(Id))\nprivate  MRelExpr(RelExpr, Env) (RelExpr * Env \u003d\u003d\u003e Val)\n\tMRelExpr(RelExpr, Env)(exp, env) \u003d\u003d\ncases exp :\n  mk_RelExpr(-, \u003cGT\u003e, -) -\u003e return (EvaluateGT((exp.left), (exp.right), env))  mk_RelExpr(-, \u003cLT\u003e, -) -\u003e return (EvaluateLT((exp.left), (exp.right), env))  others -\u003e error end\nprivate  EvaluateLT(Expr, Expr, Env) (Expr * Expr * Env \u003d\u003d\u003e Val)\n\tEvaluateLT(Expr, Expr, Env)(exp1, exp2, env) \u003d\u003d\nreturn ((Evaluate(exp1, env) \u003c Evaluate(exp2, env)))\nprivate  EvaluateGT(Expr, Expr, Env) (Expr * Expr * Env \u003d\u003d\u003e Val)\n\tEvaluateGT(Expr, Expr, Env)(exp1, exp2, env) \u003d\u003d\nreturn ((Evaluate(exp1, env) \u003e Evaluate(exp2, env)))\nprivate  MUnary(Unary, Env) (Unary * Env \u003d\u003d\u003e Val)\n\tMUnary(Unary, Env)(unary, env) \u003d\u003d\nreturn ((not Evaluate((unary.body), env)))\nprivate  MInfix(Infix, Env) (Infix * Env \u003d\u003d\u003e Val)\n\tMInfix(Infix, Env)(exp, env) \u003d\u003d\ncases exp :\n  mk_Infix(-, \u003cAND\u003e, -) -\u003e return (EvaluateAND((exp.left), (exp.right), env))  mk_Infix(-, \u003cOR\u003e, -) -\u003e return (EvaluateOR((exp.left), (exp.right), env))  others -\u003e error end\nprivate  EvaluateAND(Expr, Expr, Env) (Expr * Expr * Env \u003d\u003d\u003e Val)\n\tEvaluateAND(Expr, Expr, Env)(exp1, exp2, env) \u003d\u003d\nreturn ((Evaluate(exp1, env) and Evaluate(exp2, env)))\nprivate  MEqual(Equal, Env) (Equal * Env \u003d\u003d\u003e Val)\n\tMEqual(Equal, Env)(exp, env) \u003d\u003d\nreturn ((Evaluate((exp.left), env) \u003d Evaluate((exp.right), env)))\nprivate  EvaluateOR(Expr, Expr, Env) (Expr * Expr * Env \u003d\u003d\u003e Val)\n\tEvaluateOR(Expr, Expr, Env)(exp1, exp2, env) \u003d\u003d\nif Evaluate(exp1, env)\nthen\nreturn (true)else\nreturn (Evaluate(exp2, env))\nprivate  MArrayLookup(ArrayLookup, Env) (ArrayLookup * Env \u003d\u003d\u003e Val)\n\tMArrayLookup(ArrayLookup, Env)(mk_ArrayLookup(aname, index), env) \u003d\u003d\nreturn (MId(aname, env)(index))\n\tpre (index in set (dom MId(aname, env)))\nprivate  private MLiteral: ((boolLiteral | intLiteral) -\u003e Val)\n\tMLiteral(exp) \u003d\u003d\n(cases exp :\nmk_boolLiteral(\u003cTRUE\u003e) -\u003e true,\nmk_boolLiteral(\u003cFALSE\u003e) -\u003e false,\nmk_intLiteral(\u003cZERO\u003e) -\u003e 0,\nmk_intLiteral(\u003cONE\u003e) -\u003e 1,\nmk_intLiteral(\u003cTWO\u003e) -\u003e 2,\nmk_intLiteral(\u003cTHREE\u003e) -\u003e 3,\nmk_intLiteral(\u003cFOUR\u003e) -\u003e 4,\nmk_intLiteral(\u003cFIVE\u003e) -\u003e 5,\nmk_intLiteral(\u003cSIX\u003e) -\u003e 6,\nmk_intLiteral(\u003cSEVEN\u003e) -\u003e 7,\nmk_intLiteral(\u003cEIGHT\u003e) -\u003e 8,\nmk_intLiteral(\u003cNINE\u003e) -\u003e 9\nothers 10\n end)\npublic static  SType \u003d SType\npublic static  AType \u003d AType\npublic  wfExpr(Env) (Env \u003d\u003d\u003e bool)\n\twfExpr(Env)(env) \u003d\u003d\nreturn ((exprTp(fexp, env) \u003d \u003cB\u003e))\nprivate  exprTp(Expr, Env) (Expr * Env \u003d\u003d\u003e SType)\n\texprTp(Expr, Env)(ex, env) \u003d\u003d\ncases ex :\n  mk_Unary(-, -) -\u003e wfUnary(ex, env)  mk_Infix(-, -, -) -\u003e wfInfix(ex, env)  mk_RelExpr(-, -, -) -\u003e wfRelExpr(ex, env)  mk_Equal(-, -, -) -\u003e wfEqual(ex, env)  mk_boolLiteral(-) -\u003e wfLiteral(ex)  mk_intLiteral(-) -\u003e wfLiteral(ex)  mk_UnId(-) -\u003e wfUnId(ex)  mk_ArrayLookup(-, -) -\u003e wfArrayLookup(ex, env)  others -\u003e wfId(ex, env) end\nprivate  wfInfix(Infix, Env) (Infix * Env \u003d\u003d\u003e SType)\n\twfInfix(Infix, Env)(mk_Infix(e1, -, e2), env) \u003d\u003d\nif ((exprTp(e1, env) \u003d \u003cB\u003e) and (exprTp(e2, env) \u003d \u003cB\u003e))\nthen\nreturn (\u003cB\u003e)else\nreturn (\u003cErr\u003e)\nprivate  wfUnary(Unary, Env) (Unary * Env \u003d\u003d\u003e SType)\n\twfUnary(Unary, Env)(mk_Unary(-, e), env) \u003d\u003d\nif (exprTp(e, env) \u003d \u003cB\u003e)\nthen\nreturn (\u003cB\u003e)else\nreturn (\u003cErr\u003e)\nprivate  wfRelExpr(RelExpr, Env) (RelExpr * Env \u003d\u003d\u003e SType)\n\twfRelExpr(RelExpr, Env)(mk_RelExpr(e1, -, e2), env) \u003d\u003d\nif ((exprTp(e1, env) \u003d \u003cI\u003e) and (exprTp(e2, env) \u003d \u003cI\u003e))\nthen\nreturn (\u003cB\u003e)else\nreturn (\u003cErr\u003e)\nprivate  wfLiteral((boolLiteral | intLiteral)) ((boolLiteral | intLiteral) \u003d\u003d\u003e SType)\n\twfLiteral((boolLiteral | intLiteral))(e) \u003d\u003d\ncases e :\n  mk_boolLiteral(-) -\u003e return (\u003cB\u003e)  mk_intLiteral(-) -\u003e return (\u003cI\u003e)  others -\u003e return (\u003cErr\u003e) end\nprivate  wfEqual(Equal, Env) (Equal * Env \u003d\u003d\u003e SType)\n\twfEqual(Equal, Env)(mk_Equal(e1, -, e2), env) \u003d\u003d\nif (((exprTp(e1, env) \u003d \u003cB\u003e) and (exprTp(e2, env) \u003d \u003cB\u003e)) or (((exprTp(e1, env) \u003d \u003cI\u003e) and (exprTp(e2, env) \u003d \u003cI\u003e)) or ((exprTp(e1, env) \u003d \u003cU\u003e) and (exprTp(e2, env) \u003d \u003cU\u003e))))\nthen\nreturn (\u003cB\u003e)else\nreturn (\u003cErr\u003e)\nprivate  wfId(Id, Env) (Id * Env \u003d\u003d\u003e SType)\n\twfId(Id, Env)(e, env) \u003d\u003d\nif (e in set (dom (env.GetSenv)()))\nthen\nlet tp:SType \u003d (env.GetSType)(e) in if ((tp \u003d \u003cB\u003e) or ((tp \u003d \u003cI\u003e) or (tp \u003d \u003cU\u003e)))\nthen\nreturn ((env.GetSType)(e))else\nreturn (\u003cErr\u003e)else\nreturn (\u003cErr\u003e)\nprivate  wfUnId(UnId) (UnId \u003d\u003d\u003e SType)\n\twfUnId(UnId)(e) \u003d\u003d\ncases e :\n  mk_UnId(\u003crequester\u003e) -\u003e return (\u003cU\u003e)  mk_UnId(\u003cresource\u003e) -\u003e return (\u003cU\u003e)  others -\u003e return (\u003cErr\u003e) end\nprivate  wfArrayLookup(ArrayLookup, Env) (ArrayLookup * Env \u003d\u003d\u003e SType)\n\twfArrayLookup(ArrayLookup, Env)(mk_ArrayLookup(id, index), env) \u003d\u003d\nif (id in set (dom (env.GetSenv)()))\nthen\nlet tp:SType \u003d (env.GetSType)(id) in if ((tp \u003d \u003cB\u003e) or ((tp \u003d \u003cI\u003e) or (tp \u003d \u003cU\u003e)))\nthen\nreturn (\u003cErr\u003e)elseif (index in set (dom (env.GetSenv)()(id)))\nthen\nreturn ((env.GetAType)(id, index))else\nreturn (\u003cErr\u003e)else\nreturn (\u003cErr\u003e)\nend FExp\n","class PDP\nprivate  policies:set of (Policy) :\u003d (undefined)\nprivate  policyCombAlg:CombAlg :\u003d (undefined)\npublic  PDP(set of (Policy), CombAlg) (set of (Policy) * CombAlg \u003d\u003d\u003e PDP)\n\tPDP(set of (Policy), CombAlg)(ps, pca) \u003d\u003d\n(\n\npolicies :\u003d ps;\npolicyCombAlg :\u003d pca\n)\npublic static  Permit \u003d Permit\npublic static  Deny \u003d Deny\npublic static  Null \u003d Null\npublic static  CombAlg \u003d CombAlg\npublic static  Policy \u003d Policy\npublic static  Rule \u003d Rule\npublic static  Effect \u003d Effect\npublic static  Target \u003d Target\npublic static  Action \u003d Action\npublic static  Subject \u003d Subject\npublic static  Resource \u003d Resource\npublic  GetpolicyCombAlg() (() \u003d\u003d\u003e CombAlg)\n\tGetpolicyCombAlg()() \u003d\u003d\nreturn (policyCombAlg)\npublic  Getpolicies() (() \u003d\u003d\u003e set of (Policy))\n\tGetpolicies()() \u003d\u003d\nreturn (policies)\npublic  GetEffect(Rule) (Rule \u003d\u003d\u003e Effect)\n\tGetEffect(Rule)(r) \u003d\u003d\nreturn ((r.effect))\nend PDP\n","class Request\nprivate  subject:Subject :\u003d (undefined)\nprivate  resource:Resource :\u003d (undefined)\nprivate  actions:set of (Action) :\u003d (undefined)\nprivate static  Inst \u003d Inst\npublic  Request(Subject, Resource, set of (Action)) (Subject * Resource * set of (Action) \u003d\u003d\u003e Request)\n\tRequest(Subject, Resource, set of (Action))(s, r, aset) \u003d\u003d\n(\n\nsubject :\u003d s;\nresource :\u003d r;\nactions :\u003d aset\n)\npublic  GetSubject() (() \u003d\u003d\u003e Subject)\n\tGetSubject()() \u003d\u003d\nreturn (subject)\npublic  GetResource() (() \u003d\u003d\u003e Resource)\n\tGetResource()() \u003d\u003d\nreturn (resource)\npublic  GetActions() (() \u003d\u003d\u003e set of (Action))\n\tGetActions()() \u003d\u003d\nreturn (actions)\nend Request\n","class Test\nprivate static  requester:UnId \u003d mk_FExp`UnId(\u003crequester\u003e)\nprivate static  resource:UnId \u003d mk_FExp`UnId(\u003cresource\u003e)\nprivate static  Anne:Id \u003d mk_token(\"Anne\")\nprivate static  Bob:Id \u003d mk_token(\"Bob\")\nprivate static  Charlie:Id \u003d mk_token(\"Charlie\")\nprivate static  Dave:Id \u003d mk_token(\"Dave\")\nprivate static  Eric:Id \u003d mk_token(\"Eric\")\nprivate static  Fred:Id \u003d mk_token(\"Fred\")\nprivate static  write:Id \u003d mk_token(\"write\")\nprivate static  read:Id \u003d mk_token(\"read\")\nprivate static  create:Id \u003d mk_token(\"create\")\nprivate static  signoff:Id \u003d mk_token(\"signoff\")\nprivate static  lab_results_signed:Id \u003d mk_token(\"lab_results_signed\")\nprivate static  results_analysis_signed:Id \u003d mk_token(\"results_analysis_signed\")\nprivate static  Project1:set of (Subject) \u003d {Anne, Bob}\nprivate static  Project2:set of (Subject) \u003d {Bob, Charlie, Dave}\nprivate static  lab_technician:set of (Subject) \u003d {Anne, Dave}\nprivate static  lab_manager:set of (Subject) \u003d {Bob, Charlie}\nprivate static  Company2:set of (Subject) \u003d {Eric, Fred}\nprivate static  Assessor:set of (Subject) \u003d {Fred}\nprivate static  lab_results:Id \u003d mk_token(\"lab_results\")\nprivate static  results_analysis:Id \u003d mk_token(\"results_analysis\")\nprivate static  sc_assess:Id \u003d mk_token(\"sc_assess\")\nprivate static  doc1:Id \u003d mk_token(\"doc1\")\nprivate static  doc2:Id \u003d mk_token(\"doc2\")\nprivate static  signed:Id \u003d mk_token(\"signed\")\nprivate static  con_nt:FExp \u003d new FExp(mk_FExp`Unary(\u003cNOT\u003e, mk_FExp`boolLiteral(\u003cTRUE\u003e)))\nprivate static  con_nf:FExp \u003d new FExp(mk_FExp`Unary(\u003cNOT\u003e, mk_FExp`boolLiteral(\u003cFALSE\u003e)))\nprivate static  con_no:FExp \u003d new FExp(mk_FExp`Unary(\u003cNOT\u003e, mk_FExp`intLiteral(\u003cONE\u003e)))\nprivate static  project1_rule_nf:Rule \u003d mk_PDP`Rule(mk_PDP`Target(lab_technician, {lab_results}, {create}), \u003cPermit\u003e, con_nf)\nprivate static  project1_rule_nt:Rule \u003d mk_PDP`Rule(mk_PDP`Target(lab_technician, {lab_results}, {create}), \u003cPermit\u003e, con_nt)\nprivate static  project1_rule_no:Rule \u003d mk_PDP`Rule(mk_PDP`Target(lab_technician, {lab_results}, {create}), \u003cPermit\u003e, con_no)\nprivate static  project1_rule2:Rule \u003d mk_PDP`Rule(mk_PDP`Target(Project1, {lab_results}, {read}), \u003cPermit\u003e, nil)\nprivate static  lab_results_project_policy_no:Policy \u003d mk_PDP`Policy(mk_PDP`Target(Project1, {lab_results}, {}), {project1_rule_no, project1_rule2}, \u003cdenyOverrides\u003e)\nprivate static  lab_results_project_policy_nt:Policy \u003d mk_PDP`Policy(mk_PDP`Target(Project1, {lab_results}, {}), {project1_rule_nt, project1_rule2}, \u003cdenyOverrides\u003e)\nprivate static  lab_results_project_policy_nf:Policy \u003d mk_PDP`Policy(mk_PDP`Target(Project1, {lab_results}, {}), {project1_rule_nf, project1_rule2}, \u003cdenyOverrides\u003e)\nprivate static  lab_results_rule1:Rule \u003d mk_PDP`Rule(mk_PDP`Target(lab_manager, {lab_results}, {signoff}), \u003cPermit\u003e, nil)\nprivate static  lab_results_rule2:Rule \u003d mk_PDP`Rule(mk_PDP`Target(Project1, {lab_results}, {write}), \u003cDeny\u003e, new FExp(mk_FExp`ArrayLookup(signed, resource)))\nprivate static  lab_results_creator_policy:Policy \u003d mk_PDP`Policy(mk_PDP`Target(Project1, {lab_results}, {}), {lab_results_rule1, lab_results_rule2}, \u003cdenyOverrides\u003e)\nprivate static  scale_assess_write:Rule \u003d mk_PDP`Rule(mk_PDP`Target(Assessor, {sc_assess}, {write}), \u003cPermit\u003e, nil)\nprivate static  scale_assess_read:Rule \u003d mk_PDP`Rule(mk_PDP`Target(Company2, {sc_assess}, {read}), \u003cPermit\u003e, nil)\nprivate static  scale_assess_policy:Policy \u003d mk_PDP`Policy(mk_PDP`Target(Company2, {sc_assess}, {}), {scale_assess_read, scale_assess_write}, \u003cdenyOverrides\u003e)\nprivate static  gold_policy_no:PDP \u003d new PDP({lab_results_project_policy_no, lab_results_creator_policy, scale_assess_policy}, \u003cpermitOverrides\u003e)\nprivate static  gold_policy_nt:PDP \u003d new PDP({lab_results_project_policy_nt, lab_results_creator_policy, scale_assess_policy}, \u003cpermitOverrides\u003e)\nprivate static  gold_policy_nf:PDP \u003d new PDP({lab_results_project_policy_nf, lab_results_creator_policy, scale_assess_policy}, \u003cpermitOverrides\u003e)\nprivate static  gold_policy_project_results:PDP \u003d new PDP({lab_results_project_policy_nf, lab_results_creator_policy}, \u003cpermitOverrides\u003e)\nprivate static  gold_policy_results_scale:PDP \u003d new PDP({lab_results_creator_policy, scale_assess_policy}, \u003cpermitOverrides\u003e)\npublic  Run() (() \u003d\u003d\u003e Effect)\n\tRun()() \u003d\u003d\n(\npdp:PDP :\u003d gold_policy_results_scale\ns:FExp :\u003d new FExp(mk_token(\"signed\"))\nlr:FExp :\u003d new FExp(mk_token(\"lab_results\"))\nreq:Request :\u003d new Request(Anne, lab_results, {create})\nenv:Env :\u003d new Env({(s.GetExp)() |-\u003e {(lr.GetExp)() |-\u003e \u003cB\u003e}}, {(s.GetExp)() |-\u003e {(lr.GetExp)() |-\u003e true}})\neval:Evaluator :\u003d new Evaluator(req, pdp, env)\n\nreturn ((eval.evaluate)())\n)\nend Test\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]