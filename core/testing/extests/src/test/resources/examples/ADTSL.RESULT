["Cg \u003d Cg","Hzd \u003d Hzd","Inf \u003d Inf","Kg \u003d Kg\n\tinv k \u003d\u003d ((k \u003c\u003e \u003cINFINITY\u003e) \u003d\u003e (k \u003e\u003d 0))","Realp \u003d Realp\n\tinv r \u003d\u003d (r \u003e\u003d 0)","Metre \u003d Metre","Object \u003d Object","Element_label \u003d Element_label","Element \u003d Element","Point \u003d Point","Pes_types \u003d Pes_types","Magazine \u003d Magazine","Storage_building \u003d Storage_building","Process_building \u003d Process_building","Other_building \u003d Other_building","Exs_types \u003d Exs_types","Building \u003d Building","Quad \u003d Quad\n\tinv q \u003d\u003d (((len q) \u003d 4) and rectangular(q))","Site_label \u003d Site_label","Exposed_site \u003d Exposed_site\n\tinv exs \u003d\u003d ((forall p in set (elems ((exs.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (exs.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (exs.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((exs.vertices)(1).y) \u003c (p.y)))) and (((exs.door) in set {0, ... ,3}) and (exists i in set (inds (exs.vertices)), j in set (inds (exs.vertices)) \u0026 (((abs (j - i)) \u003d 2) and ((distance((exs.vertices)(1), (exs.vertices)(i)) \u003d ((exs.building).length)) and (distance((exs.vertices)(1), (exs.vertices)(j)) \u003d ((exs.building).breadth)))))))","Pot_explosion_site \u003d Pot_explosion_site\n\tinv pes \u003d\u003d ((forall p in set (elems ((pes.vertices)(2, ... ,4))) \u0026 (((distance(mk_Point(0, 0), (pes.vertices)(1)) \u003c\u003d distance(mk_Point(0, 0), p)) and (distance(mk_Point(0, 0), (pes.vertices)(1)) \u003d distance(mk_Point(0, 0), p))) \u003d\u003e (((pes.vertices)(1).y) \u003c (p.y)))) and (((pes.door) in set {0, ... ,3}) and (exists i in set (inds (pes.vertices)), j in set (inds (pes.vertices)) \u0026 ((distance((pes.vertices)(1), (pes.vertices)(i)) \u003d ((pes.mgzn).length)) and (distance((pes.vertices)(1), (pes.vertices)(j)) \u003d ((pes.mgzn).breadth))))))","Line \u003d Line","RelOrientation \u003d RelOrientation","OrientedExs \u003d OrientedExs\n\tinv mk_(exs, ro) \u003d\u003d ((not is_(exs, Storage_building)) \u003c\u003d\u003e (ro \u003d \u003cNONE\u003e))","OrientedPes \u003d OrientedPes\n\tinv mk_(pes, ro) \u003d\u003d ((pes \u003c\u003e \u003cEARTHCOVEREDBUILDING\u003e) \u003c\u003d\u003e (ro \u003d \u003cNONE\u003e))","Table_Co_ordinate \u003d Table_Co_ordinate","asharp:map (Hzd) to (map (Table_Co_ordinate) to (real)) \u003d {h |-\u003e let m:map (Table_Co_ordinate) to (real) in m | h:Hzd}","bsharp:map (Hzd) to (map (Table_Co_ordinate) to (real)) \u003d {h |-\u003e let m:map (Table_Co_ordinate) to (real) in m | h:Hzd}","exceptions_hd1_1:set of (Table_Co_ordinate) \u003d let s:set of (Table_Co_ordinate) in s","exceptions_hd1_2:set of (Table_Co_ordinate) \u003d let s:set of (Table_Co_ordinate) in s","exceptions_hd1_3a:set of (Table_Co_ordinate) \u003d let s:set of (Table_Co_ordinate) in s","exceptions_hd1_3b:set of (Table_Co_ordinate) \u003d let s:set of (Table_Co_ordinate) in s","Xmax:nat1 \u003d 5","Ymax:nat1 \u003d 5","next_point:map (nat) to (nat) \u003d {1 |-\u003e 2, 2 |-\u003e 3, 3 |-\u003e 4, 4 |-\u003e 1}","Compatible_pairs:set of ((Cg * Cg)) \u003d {mk_(\u003cA\u003e, \u003cA\u003e), mk_(\u003cA\u003e, \u003cS\u003e), mk_(\u003cB\u003e, \u003cB\u003e), mk_(\u003cB\u003e, \u003cS\u003e), mk_(\u003cC\u003e, \u003cC\u003e), mk_(\u003cC\u003e, \u003cD\u003e), mk_(\u003cC\u003e, \u003cE\u003e), mk_(\u003cC\u003e, \u003cG\u003e), mk_(\u003cC\u003e, \u003cS\u003e), mk_(\u003cD\u003e, \u003cD\u003e), mk_(\u003cD\u003e, \u003cE\u003e), mk_(\u003cD\u003e, \u003cG\u003e), mk_(\u003cD\u003e, \u003cS\u003e), mk_(\u003cE\u003e, \u003cE\u003e), mk_(\u003cE\u003e, \u003cG\u003e), mk_(\u003cE\u003e, \u003cG\u003e), mk_(\u003cE\u003e, \u003cS\u003e), mk_(\u003cF\u003e, \u003cF\u003e), mk_(\u003cF\u003e, \u003cS\u003e), mk_(\u003cG\u003e, \u003cG\u003e), mk_(\u003cG\u003e, \u003cS\u003e), mk_(\u003cH\u003e, \u003cH\u003e), mk_(\u003cH\u003e, \u003cS\u003e), mk_(\u003cJ\u003e, \u003cJ\u003e), mk_(\u003cJ\u003e, \u003cS\u003e)}","hzdnum:map (Hzd) to (nat) \u003d {\u003cONEPONE\u003e |-\u003e 1, \u003cONEPTWO\u003e |-\u003e 2, \u003cONEPTHREE\u003e |-\u003e 3, \u003cONEPFOUR\u003e |-\u003e 4}","orientation:map (nat) to (RelOrientation) \u003d {0 |-\u003e \u003cPERP\u003e, 1 |-\u003e \u003cFACING\u003e, 2 |-\u003e \u003cPERP\u003e, 3 |-\u003e \u003cAWAY\u003e}","esharp:nat \u003d let x:nat in x","state Storeof\n[pes : inmap (Site_label) to (Pot_explosion_site), exs : inmap (Site_label) to (Exposed_site), xmax : Metre, ymax : Metre]\n\tinv mk_Store(pes, exs, xmax, ymax) \u003d\u003d ((xmax \u003e 0) and ((ymax \u003e 0) and (((dom pes) subset (dom exs)) and (forall p in set (dom pes) \u0026 is_(((exs(p).building).type), Storage_building)))))\n\tinit store \u003d\u003d (store \u003d mk_Store({|-\u003e}, {|-\u003e}, Xmax, Ymax))","private rectangular: (seq of (Point) -\u003e bool)\n\trectangular(v) \u003d\u003d\n((distance(v(1), v(2)) \u003d distance(v(3), v(4))) and ((distance(v(1), v(4)) \u003d distance(v(2), v(3))) and ((distance(v(1), v(3)) \u003d distance(v(2), v(4))) and ((card (elems v)) \u003d (len v)))))\n\tpre ((len v) \u003d 4)","private distance: (Point * Point -\u003e Metre)\n\tdistance(p1, p2) \u003d\u003d\nsqrt(((((p2.x) - (p1.x)) ** 2) + (((p2.y) - (p1.y)) ** 2)))","private  sqrt((x:real))s:Realp\n\tpre (x \u003e\u003d 0)\n\tpost ((s \u003e\u003d 0) and ((s ** 2) \u003d x))","private suff_space_at: (Object * Magazine * Point -\u003e bool)\n\tsuff_space_at(o, m, p) \u003d\u003d\n((0 \u003c ((p.x) + (o.xlen))) and ((((p.x) + (o.xlen)) \u003c\u003d (m.length)) and ((0 \u003c ((p.y) + (o.ylen))) and ((((p.y) + (o.ylen)) \u003c\u003d (m.breadth)) and ((0 \u003c (o.zlen)) and (((o.zlen) \u003c\u003d (m.height)) and (forall a in set (rng (m.elements)) \u0026 ((((a.x) \u003e ((p.x) + (o.xlen))) or (((a.x) + ((a.object).xlen)) \u003c (p.x))) and (((a.y) \u003e ((p.y) + (o.ylen))) or (((a.y) + ((a.object).ylen)) \u003c (p.y)))))))))))","private  find_point((o:Object), (m:Magazine))pt:Point\n\tpre (exists x:Realp, y:Realp \u0026 suff_space_at(o, m, mk_Point(x, y)))\n\tpost suff_space_at(o, m, pt)","private within_hazard: (Object * Magazine -\u003e bool)\n\twithin_hazard(o, m) \u003d\u003d\n(hzdnum((o.hzd)) \u003e\u003d hzdnum((m.hzd)))","private compatible: (Cg * Cg -\u003e bool)\n\tcompatible(m, n) \u003d\u003d\n((mk_(m, n) in set Compatible_pairs) or (mk_(n, m) in set Compatible_pairs))","private all_compatible: (Object * Magazine -\u003e bool)\n\tall_compatible(o, m) \u003d\u003d\n(forall elt in set (rng (m.elements)) \u0026 compatible((o.cg), ((elt.object).cg)))","private sum: (set of (real) -\u003e real)\n\tsum(s) \u003d\u003d\n(if (s \u003d {})\nthen 0\nelse let x:real be st (x in set s) in (x + sum((s \\ {x}))))","private Card: (set of (real) -\u003e nat)\n\tCard(s) \u003d\u003d\n(card s)","private suff_capacity: (Object * Magazine -\u003e bool)\n\tsuff_capacity(o, m) \u003d\u003d\n(if ((m.max_neq) \u003c\u003e \u003cINFINITY\u003e)\nthen ((sum({((elt.object).neq) | elt in set (rng (m.elements))}) + (o.neq)) \u003c\u003d (m.max_neq))\nelse true)","private safe_addition: (Object * Magazine * Point -\u003e bool)\n\tsafe_addition(o, m, p) \u003d\u003d\n(suff_space_at(o, m, p) and (within_hazard(o, m) and (all_compatible(o, m) and suff_capacity(o, m))))","private rel_pos: (Pot_explosion_site * Exposed_site -\u003e nat)\n\trel_pos(pes, exs) \u003d\u003d\n((floor ang_sep(pes, exs)) div 90)","private table_entry: (Pot_explosion_site * Exposed_site -\u003e Table_Co_ordinate)\n\ttable_entry(pes, exs) \u003d\u003d\nlet inc:nat \u003d rel_pos(pes, exs) in let exs_ro:(\u003cNONE\u003e | RelOrientation) \u003d (if is_(((exs.building).type), Storage_building)\nthen orientation(((inc + (exs.door)) mod 4))\nelse \u003cNONE\u003e), pes_ro:(\u003cNONE\u003e | RelOrientation) \u003d (if (((pes.mgzn).type) \u003d \u003cEARTHCOVEREDBUILDING\u003e)\nthen orientation(((inc + (pes.door)) mod 4))\nelse \u003cNONE\u003e) in let o_exs:(Exs_types * (\u003cNONE\u003e | RelOrientation)) \u003d mk_(((exs.building).type), exs_ro), o_pes:(Pes_types * (\u003cNONE\u003e | RelOrientation)) \u003d mk_(((pes.mgzn).type), pes_ro) in mk_(o_exs, o_pes)","private  min((s:set of (Realp)))m:Realp\n\tpre (s \u003c\u003e {})\n\tpost ((m in set s) and (forall x in set s \u0026 (m \u003c\u003d x)))","private  max((s:set of (Realp)))m:Realp\n\tpre (s \u003c\u003e {})\n\tpost ((m in set s) and (forall x in set s \u0026 (m \u003e\u003d x)))","private truncated: (Realp -\u003e bool)\n\ttruncated(r) \u003d\u003d\nis_((r * (10 ** esharp)), nat)","private side: (Point * Point -\u003e set of (Point))\n\tside(p1, p2) \u003d\u003d\n(if ((p2.x) \u003d (p1.x))\nthen {mk_Point((p1.x), y) | y:Realp \u0026 (truncated(y) and ((min({(p1.y), (p2.y)}) \u003c\u003d y) and (y \u003c\u003d max({(p1.y), (p2.y)}))))}\nelse {mk_Point(x, y) | x:Realp, y:Realp \u0026 (truncated(x) and (truncated(y) and ((min({(p1.x), (p2.x)}) \u003c\u003d x) and ((x \u003c\u003d max({(p1.x), (p2.x)})) and ((min({(p1.y), (p2.y)}) \u003c\u003d y) and ((y \u003c\u003d max({(p1.y), (p2.y)})) and (if (x \u003c\u003e (p1.x))\nthen (((y - (p1.y)) / (x - (p1.x))) \u003d (((p2.y) - (p1.y)) / ((p2.x) - (p1.x))))\nelse (y \u003d (p1.y)))))))))})","private perimeter: ((Exposed_site | Pot_explosion_site) -\u003e set of (Point))\n\tperimeter(site) \u003d\u003d\n(dunion {side((site.vertices)(i), (site.vertices)(next_point(i))) | i in set {1, ... ,4}})","private shortest_dist: (Pot_explosion_site * Exposed_site -\u003e Metre)\n\tshortest_dist(pes, exs) \u003d\u003d\nmin({distance(p1, p2) | p1:Point, p2:Point \u0026 ((p1 in set perimeter(pes)) and (p2 in set perimeter(exs)))})","private min_separation: (Pot_explosion_site * Exposed_site -\u003e bool)\n\tmin_separation(pes, exs) \u003d\u003d\n(shortest_dist(pes, exs) \u003e\u003d bsharp(((pes.mgzn).hzd))(table_entry(pes, exs)))","private qd: (Pot_explosion_site * Exposed_site -\u003e Kg)\n\tqd(pes, exs) \u003d\u003d\nlet d:Metre \u003d shortest_dist(pes, exs), tbe:Table_Co_ordinate \u003d table_entry(pes, exs) in (cases ((pes.mgzn).hzd) :\n(\u003cONEPONE\u003e) -\u003e (if (tbe in set exceptions_hd1_1)\nthen (if (d \u003c 180)\nthen (0.54 * (d ** (3 / 2)))\nelseif ((180 \u003c\u003d d) and (d \u003c 240))\nthen (0.03 * (d ** 2))\nelse ((9.1 * (10 ** -5)) * (d ** 3)))\nelse (asharp(\u003cONEPONE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPTWO\u003e) -\u003e (if (tbe in set exceptions_hd1_2)\nthen \u003cINFINITY\u003e\nelse (asharp(\u003cONEPTWO\u003e)(tbe) * (d ** 5.5))),\n(\u003cONEPTHREE\u003e) -\u003e (if (tbe in set exceptions_hd1_3a)\nthen \u003cINFINITY\u003e\nelseif (tbe in set exceptions_hd1_3b)\nthen (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 2))\nelse (asharp(\u003cONEPTHREE\u003e)(tbe) * (d ** 3))),\n(\u003cONEPFOUR\u003e) -\u003e \u003cINFINITY\u003e\n end)","private  nearest_storage_building((pes:Pot_explosion_site), (exs:set of (Exposed_site)))e:Exposed_site\n\tpre (exists ex in set exs \u0026 is_(((ex.building).type), Storage_building))\n\tpost ((e in set exs) and (is_(((e.building).type), Storage_building) and (forall ex in set exs \u0026 (is_(((ex.building).type), Storage_building) \u003d\u003e (shortest_dist(pes, e) \u003c\u003d shortest_dist(pes, ex))))))","private  nearest_inhabited_building((pes:Pot_explosion_site), (exs:set of (Exposed_site)))e:Exposed_site\n\tpre (exists ex in set exs \u0026 ((((ex.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e))\n\tpost ((e in set exs) and (((((e.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e) and (forall ex in set exs \u0026 (((((ex.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e) \u003d\u003e (shortest_dist(pes, e) \u003c\u003d shortest_dist(pes, ex))))))","private  nearest_traffic_route((pes:Pot_explosion_site), (exs:set of (Exposed_site)))e:Exposed_site\n\tpre (exists ex in set exs \u0026 ((((ex.building).type).kind) \u003d \u003cTRAFFICROUTE\u003e))\n\tpost ((e in set exs) and (((((e.building).type).kind) \u003d \u003cTRAFFICROUTE\u003e) and (forall ex in set exs \u0026 (((((ex.building).type).kind) \u003d \u003cTRAFFICROUTE\u003e) \u003d\u003e (shortest_dist(pes, e) \u003c\u003d shortest_dist(pes, ex))))))","private  nearest_process_building((pes:Pot_explosion_site), (exs:set of (Exposed_site)))e:Exposed_site\n\tpre (exists ex in set exs \u0026 is_(((ex.building).type), Process_building))\n\tpost ((e in set exs) and (is_(((e.building).type), Process_building) and (forall ex in set exs \u0026 (is_(((ex.building).type), Process_building) \u003d\u003e (shortest_dist(pes, e) \u003c\u003d shortest_dist(pes, ex))))))","private  nearest_buildings((pes:Pot_explosion_site), (exs:set of (Exposed_site)))exset:set of (Exposed_site)\n\tpost ((exists e in set exs \u0026 is_(((e.building).type), Storage_building)) \u003d\u003e (((nearest_storage_building(pes, exs) in set exset) and (exists e in set exs \u0026 is_(((e.building).type), Process_building))) \u003d\u003e (((nearest_process_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cINHABITEDBUILDING\u003e))) \u003d\u003e (((nearest_inhabited_building(pes, exs) in set exset) and (exists e in set exs \u0026 ((((e.building).type).kind) \u003d \u003cTRAFFICROUTE\u003e))) \u003d\u003e (nearest_traffic_route(pes, exs) in set exset)))))","private find_max_neq: (Pot_explosion_site * set of (Exposed_site) -\u003e Kg)\n\tfind_max_neq(pes, exs) \u003d\u003d\nmin({qd(pes, e) | e in set nearest_buildings(pes, exs)})\n\tpre (exs \u003c\u003e {})","private  centre((v:Quad))p:Point\n\tpost (forall i in set {1, ... ,3} \u0026 (distance(p, v(i)) \u003d distance(p, v(1))))","private line_eqn: (Point * Point * Point -\u003e Line)\n\tline_eqn(p1, p2, p3) \u003d\u003d\nmk_Line(((((p1.y) + (p2.y)) - (2 * (p3.y))) / (((p1.x) + (p2.x)) - (2 * (p3.x)))), ((p3.y) - ((p3.x) * ((((p1.y) + (p2.y)) - (2 * (p3.y))) / (((p1.x) + (p2.x)) - (2 * (p3.x)))))))\n\tpre (distance(p1, p3) \u003d distance(p2, p3))","private incline: (Point * Point * Point * Point * Point * Point -\u003e real)\n\tincline(p1, p2, p3, p4, p5, p6) \u003d\u003d\nlet mk_Line(m1, c1):Line \u003d line_eqn(p5, p6, p2) in let mk_Line(m2, c2):Line \u003d line_eqn(p3, p4, p1) in let x3:real \u003d ((c1 - c2) / (m2 - m1)) in let y3:real \u003d (((m2 * c1) - (m1 * c2)) / (m2 - m1)) in sqrt(((((x3 - (p2.x)) ** 2) + ((y3 - (p2.y)) ** 2)) / (((x3 - (p1.x)) ** 2) + ((y3 - (p1.y)) ** 2))))\n\tpre ((distance(p1, p2) \u003d distance(p1, p4)) and ((distance(p2, p5) \u003d distance(p2, p6)) and (((line_eqn(p5, p6, p2).m) * (line_eqn(p3, p4, p1).m)) \u003d -1)))","private  ang_sep((pes:Pot_explosion_site), (exs:Exposed_site))qsharp:real\n\tpost let fsharp:real \u003d arctan(incline(centre((pes.vertices)), centre((exs.vertices)), (pes.vertices)(1), (pes.vertices)(4), (exs.vertices)(1), (exs.vertices)(2))) in (if ((centre((pes.vertices)).x) \u003d (centre((exs.vertices)).x))\nthen (if ((centre((pes.vertices)).y) \u003c (centre((exs.vertices)).y))\nthen (qsharp \u003d fsharp)\nelse (qsharp \u003d (fsharp + 180)))\nelse let m1:real \u003d (line_eqn((pes.vertices)(1), (pes.vertices)(4), centre((pes.vertices))).m), m2:real \u003d (((centre((exs.vertices)).y) - (centre((pes.vertices)).y)) / ((centre((exs.vertices)).x) - (centre((pes.vertices)).x))) in (if (m2 \u003e m1)\nthen (qsharp \u003d fsharp)\nelse (qsharp \u003d (fsharp + 180))))","private arctan: (real -\u003e real)\n\tarctan(r) \u003d\u003d\nlet res:real in res","ADD_OBJECT([o]Object, [elt]Element_label, [site]Site_label)\n\text [wr[pes]inmap (Site_label) to (Pot_explosion_site)]\n\tpre ((site in set (dom pes)) and (exists pt:Point \u0026 (safe_addition(o, (pes(site).mgzn), pt) and (elt not in set (dom ((pes(site).mgzn).elements))))))\n\tpost let p:Pot_explosion_site \u003d pes~(site) in let mk_Point(x, y):Point \u003d find_point(o, (p.mgzn)) in let new_elems:map (Element_label) to (Element) \u003d (((p.mgzn).elements) ++ {elt |-\u003e mk_Element(o, x, y)}) in let new_mag:Magazine \u003d mu((p.mgzn), elements |-\u003e new_elems) in let new_site:Pot_explosion_site \u003d mu(p, mgzn |-\u003e new_mag) in (pes \u003d (pes~ ++ {site |-\u003e new_site}))","REMOVE_OBJECT([elt]Element_label, [site]Site_label)\n\text [wr[pes]inmap (Site_label) to (Pot_explosion_site)]\n\tpre ((site in set (dom pes)) and (elt in set (dom ((pes(site).mgzn).elements))))\n\tpost let p:Pot_explosion_site \u003d pes~(site) in let new_elems:inmap (Element_label) to (Element) \u003d ({elt} \u003c-: ((p.mgzn).elements)) in let new_mag:Magazine \u003d mu((p.mgzn), elements |-\u003e new_elems) in let new_site:Pot_explosion_site \u003d mu(p, mgzn |-\u003e new_mag) in (pes \u003d (pes~ ++ {site |-\u003e new_site}))","ADD_PES([pex]Pot_explosion_site, [label]Site_label, [type]Storage_building)\n\text [wr[pes]inmap (Site_label) to (Pot_explosion_site), wr[exs]inmap (Site_label) to (Exposed_site), rd[xmax, ymax]Metre]\n\tpre (forall exp in set (rng exs) \u0026 (min_separation(pex, exp) and (forall v in set (elems (pex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and (label not in set (dom pes))))))\n\tpost let new_neq:Kg \u003d find_max_neq(pex, (rng exs~)) in let new_mgzn:Magazine \u003d mu((pex.mgzn), max_neq |-\u003e new_neq) in let new_pex:Pot_explosion_site \u003d mu(pex, mgzn |-\u003e new_mgzn) in let new_building:Building \u003d mk_Building(type, ((pex.mgzn).length), ((pex.mgzn).breadth), ((pex.mgzn).height)) in let new_exp:Exposed_site \u003d mk_Exposed_site(new_building, (pex.vertices), (pex.door)) in ((pes \u003d (pes~ ++ {label |-\u003e new_pex})) and (exs \u003d (exs~ ++ {label |-\u003e new_exp})))","ADD_EXP([ex]Exposed_site, [label]Site_label)\n\text [wr[exs]inmap (Site_label) to (Exposed_site), rd[pes]inmap (Site_label) to (Pot_explosion_site), rd[xmax, ymax]Metre]\n\tpre ((not is_(((ex.building).type), Storage_building)) and (forall v in set (elems (ex.vertices)) \u0026 (((0 \u003c\u003d (v.x)) and (((v.x) \u003c\u003d xmax) and ((0 \u003c\u003d (v.y)) and ((v.y) \u003c\u003d ymax)))) and ((label not in set (dom exs)) and (forall pex in set (rng pes) \u0026 let proposed_neq:Kg \u003d find_max_neq(pex, (rng (exs ++ {label |-\u003e ex}))) in (if (proposed_neq \u003c\u003e \u003cINFINITY\u003e)\nthen (find_max_neq(pex, (rng exs)) \u003c\u003d proposed_neq)\nelse true))))))\n\tpost (exs \u003d (exs~ ++ {label |-\u003e ex}))"]