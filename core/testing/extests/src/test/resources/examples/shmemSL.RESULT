["Graph \u003d Graph\n\tinv g \u003d\u003d ((dunion (rng g)) subset (dom g))","ASyncGraph \u003d ASyncGraph\n\tinv asyncg \u003d\u003d (forall id in set (dom asyncg) \u0026 (id not in set TransClos(asyncg, id)))","Path \u003d Path","Id \u003d Id","private Paths: (ASyncGraph * Id -\u003e set of (Path))\n\tPaths(g, id) \u003d\u003d\nlet children:set of (Id) \u003d g(id) in (if (children \u003d {})\nthen {[id]}\nelse (dunion {{([id] ^ p) | p in set Paths(g, c)} | c in set children}))\n\tpre (id in set (dom g))","private measureTransClos: (ASyncGraph * Id -\u003e nat)\n\tmeasureTransClos(g, id) \u003d\u003d\n(card TransClos(g, id))","private LinearPath: (Graph * Id -\u003e Path)\n\tLinearPath(g, id) \u003d\u003d\nlet children:set of (Id) \u003d g(id) in (if (((card children) \u003c\u003e 1) or (exists parent in set (dom g) \u0026 ((parent \u003c\u003e id) and (children subset g(parent)))))\nthen [id]\nelse let child in set children in ([id] ^ LinearPath(g, child)))\n\tpre ((id in set (dom g)) and (id not in set TransClos(g, id)))","private TransClos: (Graph * Id -\u003e set of (Id))\n\tTransClos(g, id) \u003d\u003d\n(dunion {TransClosAux(g, c, {}) | c in set g(id)})\n\tpre (id in set (dom g))","private TransClosAux: (Graph * Id * set of (Id) -\u003e set of (Id))\n\tTransClosAux(g, id, reached) \u003d\u003d\n(if (id in set reached)\nthen {}\nelse ({id} union (dunion {TransClosAux(g, c, (reached union {id})) | c in set g(id)})))\n\tpre (id in set (dom g))","private measureGraphReached: (Graph * Id * set of (Id) -\u003e nat)\n\tmeasureGraphReached(g, -, reached) \u003d\u003d\n((card (dom g)) - (card reached))","private AsycDescendents: (AcyclicGraph * Id -\u003e set of (Id))\n\tAsycDescendents(g, id) \u003d\u003d\n({id} union (dunion {AsycDescendents(g, c) | c in set g(id)}))\n\tpre (id in set (dom g))","private Descendents: (Graph * Id * set of (Id) -\u003e set of (Id))\n\tDescendents(g, id, reached) \u003d\u003d\n(if (id in set reached)\nthen {}\nelse ({id} union (dunion {Descendents(g, c, (reached union {id})) | c in set g(id)})))\n\tpre (id in set (dom g))","private AllDesc: (Graph * Id -\u003e set of (Id))\n\tAllDesc(g, id) \u003d\u003d\n(dunion {TransClosAux(g, c, {}) | c in set g(id)})\n\tpre (id in set (dom g))","AcyclicGraph \u003d AcyclicGraph\n\tinv acg \u003d\u003d (not (exists id in set (dom acg) \u0026 (id in set AllDesc(acg, id))))","graph:Graph \u003d {1 |-\u003e {2, 3}, 2 |-\u003e {4}, 3 |-\u003e {5}, 4 |-\u003e {6}, 5 |-\u003e {6}, 6 |-\u003e {}}","LabGraph \u003d LabGraph\n\tinv g \u003d\u003d (UniqueArcIds(g) and (forall m in set (rng g) \u0026 ((rng m) subset (dom g))))","AcyclicLabGraph \u003d AcyclicLabGraph\n\tinv acg \u003d\u003d (not (exists id in set (dom acg) \u0026 (id in set AllLabDesc(acg, id))))","NodeId \u003d NodeId","ArcId \u003d ArcId","private AllLabDesc: (LabGraph * NodeId -\u003e set of (NodeId))\n\tAllLabDesc(g, id) \u003d\u003d\n(dunion {LabDescendents(g, c, {}) | c in set (rng g(id))})\n\tpre (id in set (dom g))","private measureLabGraphReached: (LabGraph * Id * set of (Id) -\u003e nat)\n\tmeasureLabGraphReached(g, -, reached) \u003d\u003d\n((card (dom g)) - (card reached))","private LabDescendents: (LabGraph * NodeId * set of (NodeId) -\u003e set of (NodeId))\n\tLabDescendents(g, id, reached) \u003d\u003d\n(if (id in set reached)\nthen {}\nelse ({id} union (dunion {LabDescendents(g, c, (reached union {id})) | c in set (rng g(id))})))\n\tpre (id in set (dom g))","private UniqueArcIds: (map (NodeId) to (map (ArcId) to (NodeId)) -\u003e bool)\n\tUniqueArcIds(g) \u003d\u003d\nlet m:map (NodeId) to (set of (ArcId)) \u003d {nid |-\u003e (dom g(nid)) | nid in set (dom g)} in (forall nid1, nid2 in set (dom m) \u0026 ((nid1 \u003c\u003e nid2) \u003d\u003e ((m(nid1) inter m(nid2)) \u003d {})))","lgraph:LabGraph \u003d {1 |-\u003e {1 |-\u003e 2, 2 |-\u003e 3}, 2 |-\u003e {3 |-\u003e 4}, 3 |-\u003e {4 |-\u003e 5}, 4 |-\u003e {5 |-\u003e 6}, 5 |-\u003e {6 |-\u003e 6}, 6 |-\u003e {|-\u003e}}"]