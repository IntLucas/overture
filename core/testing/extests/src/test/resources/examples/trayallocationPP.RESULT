["class TRACKER\npublic static  Tracker \u003d Tracker\n\tinv mk_Tracker(containers, phases) \u003d\u003d (Consistent(containers, phases) and (PhasesDistinguished(phases) and MaterialSafe(containers, phases)))\npublic static  ContainerInfo \u003d ContainerInfo\npublic static  PhaseInfo \u003d PhaseInfo\npublic static  Container \u003d Container\npublic static  Phase \u003d Phase\n\tinv p \u003d\u003d (((card (p.contents)) \u003c\u003d (p.capacity)) and ((p.expected_materials) \u003c\u003e {}))\npublic static  ContainerId \u003d ContainerId\npublic static  PhaseId \u003d PhaseId\npublic static  Material \u003d Material\nprivate static  private static Introduce: (Tracker * ContainerId * real * Material -\u003e Tracker)\n\tIntroduce(trk, cid, quan, mat) \u003d\u003d\nmk_Tracker(((trk.containers) munion {cid |-\u003e mk_Container(quan, mat)}), (trk.phases))\n\tpre (cid not in set (dom (trk.containers)))\nprivate static  private static Permission: (Tracker * ContainerId * PhaseId -\u003e bool)\n\tPermission(mk_Tracker(containers, phases), cid, dest) \u003d\u003d\n((cid in set (dom containers)) and ((dest in set (dom phases)) and (((card (phases(dest).contents)) \u003c (phases(dest).capacity)) and ((containers(cid).material) in set (phases(dest).expected_materials)))))\nprivate static  private static Move: (Tracker * ContainerId * PhaseId * PhaseId -\u003e Tracker)\n\tMove(trk, cid, ptoid, pfromid) \u003d\u003d\nlet pha:Phase \u003d mk_Phase((((trk.phases)(ptoid).contents) union {cid}), ((trk.phases)(ptoid).expected_materials), ((trk.phases)(ptoid).capacity)) in mk_Tracker((trk.containers), ((Remove(trk, cid, pfromid).phases) ++ {ptoid |-\u003e pha}))\n\tpre (Permission(trk, cid, ptoid) and pre_Remove(trk, cid, pfromid))\nprivate static  private static Remove: (Tracker * ContainerId * PhaseId -\u003e Tracker)\n\tRemove(mk_Tracker(containers, phases), cid, source) \u003d\u003d\nlet pha:Phase \u003d mk_Phase(((phases(source).contents) \\ {cid}), (phases(source).expected_materials), (phases(source).capacity)) in mk_Tracker(containers, (phases ++ {source |-\u003e pha}))\n\tpre ((source in set (dom phases)) and (cid in set (phases(source).contents)))\nprivate static  private static Delete: (Tracker * ContainerId * PhaseId -\u003e Tracker)\n\tDelete(tkr, cid, source) \u003d\u003d\nmk_Tracker(({cid} \u003c-: (tkr.containers)), (Remove(tkr, cid, source).phases))\n\tpre pre_Remove(tkr, cid, source)\nprivate static  private static Consistent: (ContainerInfo * PhaseInfo -\u003e bool)\n\tConsistent(containers, phases) \u003d\u003d\n(forall ph in set (rng phases) \u0026 ((ph.contents) subset (dom containers)))\nprivate static  private static PhasesDistinguished: (PhaseInfo -\u003e bool)\n\tPhasesDistinguished(phases) \u003d\u003d\n(not (exists p1, p2 in set (dom phases) \u0026 ((p1 \u003c\u003e p2) and (((phases(p1).contents) inter (phases(p2).contents)) \u003c\u003e {}))))\nprivate static  private static MaterialSafe: (ContainerInfo * PhaseInfo -\u003e bool)\n\tMaterialSafe(containers, phases) \u003d\u003d\n(forall ph in set (rng phases) \u0026 (forall cid in set (ph.contents) \u0026 ((cid in set (dom containers)) and ((containers(cid).material) in set (ph.expected_materials)))))\nend TRACKER\n"]