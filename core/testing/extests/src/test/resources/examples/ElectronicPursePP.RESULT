["class Philosopher\nprivate  theTable:Table :\u003d (undefined)\nprivate  turns:nat :\u003d 2\npublic  Philosopher(Table) (Table \u003d\u003d\u003e Philosopher)\n\tPhilosopher(Table)(pt) \u003d\u003d\ntheTable :\u003d pt\nprivate  Think() (() \u003d\u003d\u003e ())\n\tThink()() \u003d\u003d\nskip\nprivate  Eat() (() \u003d\u003d\u003e ())\n\tEat()() \u003d\u003d\nturns :\u003d (turns - 1)\nprotected  thread (\n\nwhile (turns \u003e 0) do (\n\nThink();\ntheTable.takeFork();\ntheTable.takeFork();\nEat();\ntheTable.releaseFork();\ntheTable.releaseFork()\n);\ntheTable.IamDone()\n)\nend Philosopher\n","class Table\nprivate  forks:nat :\u003d 0\nprivate  guests:set of (Philosopher) :\u003d {}\nprivate  done:nat :\u003d 0\npublic  Table(nat1) (nat1 \u003d\u003d\u003e Table)\n\tTable(nat1)(noGuests) \u003d\u003d\nwhile (forks \u003c noGuests) do (\n\nguests :\u003d (guests union {new Philosopher(self)});\nforks :\u003d (forks + 1)\n)\n\tpre (noGuests \u003e\u003d 2)\npublic  takeFork() (() \u003d\u003d\u003e ())\n\ttakeFork()() \u003d\u003d\nforks :\u003d (forks - 1)\npublic  releaseFork() (() \u003d\u003d\u003e ())\n\treleaseFork()() \u003d\u003d\nforks :\u003d (forks + 1)\npublic  IamDone() (() \u003d\u003d\u003e ())\n\tIamDone()() \u003d\u003d\ndone :\u003d (done + 1)\nprivate  wait() (() \u003d\u003d\u003e ())\n\twait()() \u003d\u003d\nskip\npublic  LetsEat() (() \u003d\u003d\u003e ())\n\tLetsEat()() \u003d\u003d\n(\n\nstart (guests);\nwait()\n)\nprivate  per takeFork \u003d\u003e (forks \u003e 0)\nprivate  per wait \u003d\u003e (done \u003d (card guests))\nprivate  mutex(takeFork, releaseFork)\nprivate  mutex(IamDone)\nend Table\n"]