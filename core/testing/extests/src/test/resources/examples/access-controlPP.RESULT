["class FileSystemLayerAlg\npublic static  Path \u003d Path\npublic static  FileName \u003d FileName\npublic static  FileContents \u003d FileContents\npublic static  FileStore \u003d FileStore\n\tinv fileStore \u003d\u003d ((\u003cRoot\u003e in set (dom fileStore)) and (forall path in set (dom fileStore) \u0026 let parent:Path \u003d dirName(path) in ((parent in set (dom fileStore)) and isDirectory(fileStore(parent)))))\npublic static  File \u003d File\n\tinv file \u003d\u003d (((((file.attributes).fileType) \u003d \u003cDirectory\u003e) and ((file.contents) \u003d nil)) or ((((file.attributes).fileType) \u003d \u003cRegularFile\u003e) and ((file.contents) \u003c\u003e nil)))\npublic static  Attributes \u003d Attributes\npublic static  FileType \u003d FileType\npublic static  OpenFileDescriptorTable \u003d OpenFileDescriptorTable\npublic static  FileHandler \u003d FileHandler\npublic static  OpenFileDescriptor \u003d OpenFileDescriptor\npublic static  System \u003d System\n\tinv sys \u003d\u003d (forall openfiledescriptor in set (rng (sys.table)) \u0026 ((openfiledescriptor.path) in set (dom (sys.fileStore))))\npublic  public FS_DeleteFileDir_Main: (System * Path -\u003e (System * FFS_Status))\n\tFS_DeleteFileDir_Main(sys, full_path) \u003d\u003d\n(if ((not isRoot(full_path)) and (isElemFileStore(full_path, (sys.fileStore)) and pre_FS_DeleteFileDir_System(sys, full_path)))\nthen mk_(FS_DeleteFileDir_System(sys, full_path), \u003cFFS_StatusSuccess\u003e)\nelse mk_(sys, FS_DeleteFileDir_Exception(sys, full_path)))\nprivate  private FS_DeleteFileDir_System: (System * Path -\u003e System)\n\tFS_DeleteFileDir_System(sys, full_path) \u003d\u003d\nmu(sys, fileStore |-\u003e FS_DeleteFileDir_FileStore((sys.fileStore), full_path))\n\tpre (pre_FS_DeleteFileDir_FileStore((sys.fileStore), full_path) and (forall buffer in set (rng (sys.table)) \u0026 ((buffer.path) \u003c\u003e full_path)))\nprivate  private FS_DeleteFileDir_FileStore: (FileStore * Path -\u003e FileStore)\n\tFS_DeleteFileDir_FileStore(fileStore, full_path) \u003d\u003d\n({full_path} \u003c-: fileStore)\n\tpre (forall path in set (dom fileStore) \u0026 (dirName(path) \u003c\u003e full_path))\nprivate  private FS_DeleteFileDir_Exception: (System * Path -\u003e FFS_Status)\n\tFS_DeleteFileDir_Exception(sys, full_path) \u003d\u003d\n(if isRoot(full_path)\nthen \u003cFS_ErrorInvalidPath\u003e\nelseif (not isElemFileStore(full_path, (sys.fileStore)))\nthen \u003cFS_ErrorPathNotFound\u003e\nelseif (exists buffer in set (rng (sys.table)) \u0026 ((buffer.path) \u003d full_path))\nthen \u003cFS_ErrorFileStillOpen\u003e\nelseif (isDirectory((sys.fileStore)(full_path)) or (exists path in set (dom (sys.fileStore)) \u0026 (full_path \u003d dirName(path))))\nthen \u003cFS_ErrorDirectoryNotEmpty\u003e\nelse \u003cFFS_StatusUnknown\u003e)\npublic  public FS_Init_Main: (() -\u003e (System * FFS_Status))\n\tFS_Init_Main() \u003d\u003d\nmk_(FS_Init_System(), \u003cFFS_StatusSuccess\u003e)\nprivate  private FS_Init_System: (() -\u003e System)\n\tFS_Init_System() \u003d\u003d\nmk_System(FS_Init_Table(), FS_Init_FileStore())\nprivate  private FS_Init_Table: (() -\u003e OpenFileDescriptorTable)\n\tFS_Init_Table() \u003d\u003d\n{|-\u003e}\nprivate  private FS_Init_FileStore: (() -\u003e FileStore)\n\tFS_Init_FileStore() \u003d\u003d\n{\u003cRoot\u003e |-\u003e mk_File(mk_Attributes(\u003cDirectory\u003e), nil)}\npublic static  public static dirName: (Path -\u003e Path)\n\tdirName(full_path) \u003d\u003d\n(if ((full_path \u003d \u003cRoot\u003e) or ((len full_path) \u003d 1))\nthen \u003cRoot\u003e\nelse [full_path(i) | i in set (inds full_path) \u0026 (i \u003c (len full_path))])\npublic static  public static isDirectory: (File -\u003e bool)\n\tisDirectory(file) \u003d\u003d\n(((file.attributes).fileType) \u003d \u003cDirectory\u003e)\npublic  public isRoot: (Path -\u003e bool)\n\tisRoot(path) \u003d\u003d\n(path \u003d \u003cRoot\u003e)\npublic  public isElemFileStore: (Path * FileStore -\u003e bool)\n\tisElemFileStore(path, fileStore) \u003d\u003d\n(path in set (dom fileStore))\npublic static  FFS_Status \u003d FFS_Status\nend FileSystemLayerAlg\n","class UseFileSystemLayerAlg\npublic  sys:FileSystemLayerAlg :\u003d new FileSystemLayerAlg()\nprivate static  file:File \u003d mk_FileSystemLayerAlg`File(mk_FileSystemLayerAlg`Attributes(\u003cRegularFile\u003e), \"hello world\")\nprivate static  file2:File \u003d mk_FileSystemLayerAlg`File(mk_FileSystemLayerAlg`Attributes(\u003cDirectory\u003e), nil)\nprivate static  ofd:OpenFileDescriptor \u003d mk_FileSystemLayerAlg`OpenFileDescriptor([\"whoami\"])\nprivate static  s:System \u003d mk_FileSystemLayerAlg`System({42 |-\u003e ofd}, {\u003cRoot\u003e |-\u003e file2, [\"whoami\"] |-\u003e file})\npublic  dummy() (() \u003d\u003d\u003e ())\n\tdummy()() \u003d\u003d\nskip\npublic  [T][[sys.FS_Init_Main(){1,1}], [([[sys.dirName(\u003cRoot\u003e){1,1}, sys.isDirectory(file){1,1}, sys.FS_DeleteFileDir_Main(s, [\"Dummy\"]){1,1}]]){3,3}]]\nend UseFileSystemLayerAlg\n"]