["class Actuator is subclass of [IIOSSTYPES]\nprivate  actuatorID:nat :\u003d (undefined)\npublic  Actuator(nat) (nat \u003d\u003d\u003e Actuator)\n\tActuator(nat)(actID) \u003d\u003d\n(\n\nactuatorID :\u003d actID;\nreturn (self)\n)\npublic  SetValues(EventId, PigPosition) (EventId * PigPosition \u003d\u003d\u003e ())\n\tSetValues(EventId, PigPosition)(eventId, val) \u003d\u003d\n(\n\nWorld`env.handleEvent(eventId, \u003cSHOW_PIG\u003e, (\" PigPosition \" ^ (VDMUtil`val2seq_of_char)[PigPosition](val)), time)\n)\nprivate  mutex(SetValues)\nend Actuator\n","class Environment is subclass of [IIOSSTYPES]\npublic static  InputTP \u003d InputTP\npublic static  outline \u003d outline\npublic static  inline \u003d inline\nprivate  io:IO :\u003d new IO()\nprivate  inlines:seq of (inline) :\u003d []\nprivate  outlines:seq of (outline) :\u003d []\nprivate  sensors:map (nat) to (Sensor) :\u003d {|-\u003e}\nprivate  busy:bool :\u003d true\nprivate  server:[Server] :\u003d nil\nprivate  simtime:nat :\u003d (undefined)\npublic  Environment(seq of (char)) (seq of (char) \u003d\u003d\u003e Environment)\n\tEnvironment(seq of (char))(fname) \u003d\u003d\n(\n\nlet mk_(-, mk_(timeval, input)) \u003d ((io.freadval))[(Time * seq of (inline))](fname) in (\n\ninlines :\u003d input;\nsimtime :\u003d timeval\n)\n)\npublic  addServer(Server) (Server \u003d\u003d\u003e ())\n\taddServer(Server)(pServer) \u003d\u003d\n(\n\nserver :\u003d pServer\n)\npublic  addSensor(Sensor) (Sensor \u003d\u003d\u003e ())\n\taddSensor(Sensor)(psens) \u003d\u003d\n(\nid:nat :\u003d ((card (dom sensors)) + 1)\n\nsensors :\u003d (sensors munion {id |-\u003e psens})\n)\npublic  getServer() (() \u003d\u003d\u003e Server)\n\tgetServer()() \u003d\u003d\nreturn (server)\n\tpre (server \u003c\u003e nil)\npublic  getNoSensors() (() \u003d\u003d\u003e nat)\n\tgetNoSensors()() \u003d\u003d\nreturn ((card (dom sensors)))\nprivate  createSignal() (() \u003d\u003d\u003e ())\n\tcreateSignal()() \u003d\u003d\nduration (10) (\n\nif ((len inlines) \u003e 0)\nthen\n(\ncurtime:Time :\u003d time\ndone:bool :\u003d false\n\nwhile (not done) do (\n\nlet mk_(eventid, eventType, pigid, position, pigStyId, pt) \u003d (hd inlines) in if (pt \u003c\u003d curtime)\nthen\n(\n\nif (eventType \u003d \u003cPIG_NEW\u003e)\nthen\n(\n\nsensors(pigStyId).trip(eventType, pigid, position)\n)elseif (eventType \u003d \u003cPIG_MOVED\u003e)\nthen\n(\n\nsensors(pigStyId).trip(eventType, pigid, nil)\n)elseif (eventType \u003d \u003cSHOW_PIG\u003e)\nthen\n(\n\nserver.PointAtPig(eventid, pigid)\n);\ninlines :\u003d (tl inlines);\ndone :\u003d ((len inlines) \u003d 0);\nreturn\n)else\n(\n\ndone :\u003d true;\nreturn\n)\n)\n)else\n(\n\nbusy :\u003d false;\nreturn\n)\n)\n\tpre ((server \u003c\u003e nil) and ((card (dom sensors)) \u003c\u003e 0))\npublic  handleEvent(EventId, EventType, seq of (char), Time) (EventId * EventType * seq of (char) * Time \u003d\u003d\u003e ())\n\thandleEvent(EventId, EventType, seq of (char), Time)(eventID, eventType, text, eventTime) \u003d\u003d\n(\n\noutlines :\u003d (outlines ^ [mk_(eventID, eventType, text, eventTime)])\n)\npublic  showResult() (() \u003d\u003d\u003e ())\n\tshowResult()() \u003d\u003d\n(\n\nIIOSSTYPES`DebugPrint(\"---------------\");\nIIOSSTYPES`DebugPrint(\"ShowResult\");\nfor in \u0027Environment\u0027 (Environment.vdmrt) at line 117:13outlineADefPatternBind[outline \u003d outline]ADefPatternBind in outlines do\n(\n\nIIOSSTYPES`DebugPrint(\" \");\nIO`print(outline)\n);\nIIOSSTYPES`DebugPrint(\"---------------\")\n)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  GetAndPurgeOutlines() (() \u003d\u003d\u003e seq of (outline))\n\tGetAndPurgeOutlines()() \u003d\u003d\nlet res:seq of (outline) \u003d outlines in (\n\noutlines :\u003d [];\nreturn (res)\n)\nprivate  mutex(handleEvent)\nprivate  mutex(createSignal)\nprivate  per isFinished \u003d\u003e (not busy)\nprotected  thread periodic(1.0E9, 10, 900, 0)(createSignal())\nend Environment\n","system IIOSS\nprivate  cpu1:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu2:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu3:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu4:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu5:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu6:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu7:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu8:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu9:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu10:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  cpu11:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000000.0)\nprivate  bus1:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu1, cpu2})\nprivate  bus2:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu1, cpu3})\nprivate  bus3:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu2, cpu4, cpu5})\nprivate  bus4:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu3, cpu6, cpu7})\nprivate  bus5:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu2, cpu8, cpu9})\nprivate  bus6:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu3, cpu10, cpu11})\npublic static  server:Server :\u003d new Server()\npublic static  StableController1:StableController :\u003d new StableController(server)\npublic static  StableController2:StableController :\u003d new StableController(server)\npublic static  sensor1:Sensor :\u003d new Sensor(StableController1)\npublic static  sensor2:Sensor :\u003d new Sensor(StableController1)\npublic static  sensor3:Sensor :\u003d new Sensor(StableController2)\npublic static  sensor4:Sensor :\u003d new Sensor(StableController2)\npublic static  sensor5:Sensor :\u003d new Sensor(StableController2)\npublic static  actuator1:Actuator :\u003d new Actuator()\npublic static  actuator2:Actuator :\u003d new Actuator()\npublic static  actuator3:Actuator :\u003d new Actuator()\npublic static  actuator4:Actuator :\u003d new Actuator()\npublic  IIOSS() (() \u003d\u003d\u003e IIOSS)\n\tIIOSS()() \u003d\u003d\n(\n\ncpu1.deploy(server);\ncpu2.deploy(StableController1);\ncpu3.deploy(StableController2);\ncpu4.deploy(sensor1);\ncpu5.deploy(sensor2);\ncpu6.deploy(sensor3);\ncpu7.deploy(sensor4);\ncpu8.deploy(actuator1);\ncpu9.deploy(actuator2);\ncpu10.deploy(actuator3);\ncpu11.deploy(actuator4)\n)\nend IIOSS\n","class Sensor is subclass of [IIOSSTYPES]\nprivate  stableController:StableController :\u003d (undefined)\nprivate  pigs:set of (PigId) :\u003d {}\npublic  Sensor(StableController) (StableController \u003d\u003d\u003e Sensor)\n\tSensor(StableController)(controller) \u003d\u003d\n(\n\nstableController :\u003d controller;\nreturn (self)\n)\npublic async  trip(EventType, PigId, [Position]) (EventType * PigId * [Position] \u003d\u003d\u003e ())\n\ttrip(EventType, PigId, [Position])(eventType, pigId, position) \u003d\u003d\n(\n\nif (eventType \u003d \u003cPIG_NEW\u003e)\nthen\n(\n\nstableController.AddPig(pigId, self, position)\n)elseif (eventType \u003d \u003cPIG_MOVED\u003e)\nthen\n(\n\nstableController.RemovePig(pigId)\n)\n)\nend Sensor\n","class Server is subclass of [IIOSSTYPES]\nprivate static  medicTime \u003d medicTime\nprivate  io:IO :\u003d new IO()\nprivate  stables:map (PigId) to (StableController) :\u003d {|-\u003e}\nprivate  medicTimes:seq of (medicTime) :\u003d [mk_(1, 1, 5000), mk_(2, 5, 8000)]\nprivate  busy:bool :\u003d false\npublic  GetNoPigs() (() \u003d\u003d\u003e nat)\n\tGetNoPigs()() \u003d\u003d\nreturn ((card (dom stables)))\npublic  PointAtPig(EventId, PigId) (EventId * PigId \u003d\u003d\u003e ())\n\tPointAtPig(EventId, PigId)(eventid, pigId) \u003d\u003d\n(\n\nif (pigId not in set (dom stables))\nthen\n(\n\nWorld`env.handleEvent(eventid, \u003cSHOW_PIG\u003e, ((\" Pig \" ^ (VDMUtil`val2seq_of_char)[nat](pigId)) ^ \" not in stable: \"), time)\n)else\n(\n\nlet stbCtrl:StableController \u003d stables(pigId) in (\n\nstbCtrl.PointAtPig(eventid, pigId)\n)\n)\n)\npublic async  AddPig(PigId, StableController) (PigId * StableController \u003d\u003d\u003e ())\n\tAddPig(PigId, StableController)(pigID, stableController) \u003d\u003d\n(\n\nstables :\u003d (stables munion {pigID |-\u003e stableController})\n)\n\tpre (pigID not in set (dom stables))\n\tpost ((card (dom stables)) \u003d ((card (dom stables~)) + 1))\npublic async  RemovePig(PigId) (PigId \u003d\u003d\u003e ())\n\tRemovePig(PigId)(pigID) \u003d\u003d\n(\n\nstables :\u003d ({pigID} \u003c-: stables)\n)\n\tpre (pigID in set (dom stables))\n\tpost (((card (dom stables)) + 1) \u003d (card (dom stables~)))\npublic  NeedMedic() (() \u003d\u003d\u003e ())\n\tNeedMedic()() \u003d\u003d\n(\n\nif (not (medicTimes \u003d []))\nthen\n(\n\nlet mk_(eventid, pigid, t) \u003d (hd medicTimes) in if (time \u003e t)\nthen\n(\n\nif (pigid in set (dom stables))\nthen\n(\n\nWorld`env.handleEvent(eventid, \u003cNEED_MEDIC\u003e, (\" \" ^ (VDMUtil`val2seq_of_char)[nat](pigid)), time)\n);\nmedicTimes :\u003d (tl medicTimes)\n)\n)else\n(\n\nbusy :\u003d false\n)\n)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\nprivate  mutex(AddPig)\nprivate  mutex(RemovePig)\nprivate  mutex(RemovePig, AddPig)\nprivate  mutex(NeedMedic)\nprivate  per PointAtPig \u003d\u003e ((card (rng stables)) \u003e 0)\nprivate  per isFinished \u003d\u003e (not busy)\nprotected  thread periodic(1.0E9, 0, 0, 0)(NeedMedic())\nend Server\n","class StableController is subclass of [IIOSSTYPES]\nprivate  parent:Server :\u003d (undefined)\nprivate  sensors:map (Sensor) to (PigStyId) :\u003d {|-\u003e}\nprivate  actuators:inmap (Actuator) to (PigStyId) :\u003d {|-\u003e}\nprivate  busy:bool :\u003d false\nprivate  pigsInSty:map (PigPosition) to (PigStyId) :\u003d {|-\u003e}\npublic  StableController(Server) (Server \u003d\u003d\u003e StableController)\n\tStableController(Server)(srv) \u003d\u003d\n(\n\nparent :\u003d srv;\nreturn (self)\n)\npublic  AddPig(PigId, Sensor, Position) (PigId * Sensor * Position \u003d\u003d\u003e ())\n\tAddPig(PigId, Sensor, Position)(pigID, sensor, position) \u003d\u003d\n(\npigStyId:PigStyId :\u003d sensors(sensor)\npigPos:PigPosition :\u003d mk_PigPosition(pigID, position)\n\npigsInSty :\u003d (pigsInSty munion {pigPos |-\u003e pigStyId});\nparent.AddPig(pigID, self)\n)\n\tpre (sensor in set (dom sensors))\npublic  RemovePig(PigId) (PigId \u003d\u003d\u003e ())\n\tRemovePig(PigId)(pigID) \u003d\u003d\n(\npigPosition:PigPosition :\u003d mk_PigPosition(pigID, mk_Position(0, 0))\n\npigsInSty :\u003d ({pigPosition} \u003c-: pigsInSty);\nparent.RemovePig(pigID)\n)\n\tpre (exists pp in set (dom pigsInSty) \u0026 ((pp.id) \u003d pigID))\npublic async  PointAtPig(EventId, PigId) (EventId * PigId \u003d\u003d\u003e ())\n\tPointAtPig(EventId, PigId)(eventId, pigId) \u003d\u003d\n(\n\nlet pigPos in set (dom pigsInSty) be st ((pigPos.id) \u003d pigId) in (\n\nfor all pigStyID in set (rng pigsInSty) do\n(\n\nif ((pigPos.id) \u003d pigId)\nthen\n(\n\nlet invActuators:map (PigStyId) to (Actuator) \u003d (inverse actuators) in (\n\ninvActuators(pigStyID).SetValues(eventId, pigPos);\nreturn\n)\n)\n)\n)\n)\npublic  AddActuator(Actuator, PigStyId) (Actuator * PigStyId \u003d\u003d\u003e ())\n\tAddActuator(Actuator, PigStyId)(act, sti) \u003d\u003d\n(\n\nactuators :\u003d (actuators munion {act |-\u003e sti})\n)\n\tpre (act not in set (dom actuators))\npublic  AddSensor(Sensor, PigStyId) (Sensor * PigStyId \u003d\u003d\u003e ())\n\tAddSensor(Sensor, PigStyId)(sens, sti) \u003d\u003d\n(\n\nsensors :\u003d (sensors munion {sens |-\u003e sti})\n)\n\tpre (sens not in set (dom sensors))\nprivate  mutex(AddSensor)\nprivate  mutex(AddActuator)\nprivate  mutex(RemovePig, AddPig)\nprivate  mutex(AddPig)\nprivate  mutex(RemovePig)\nend StableController\n","class IIOSSTest\npublic  Execute() (() \u003d\u003d\u003e ())\n\tExecute()() \u003d\u003d\n(\nts:TestSuite :\u003d new TestSuite()\n\nts.AddTest(new IIOSSTestCase2(\"Unit test\"));\nts.Run()\n)\nend IIOSSTest\n","class IIOSSTestCase2 is subclass of [TestCase]\nprivate  world:World :\u003d (undefined)\nprivate  stbCtr:StableController :\u003d (undefined)\npublic  IIOSSTestCase2(seq of (char)) (seq of (char) \u003d\u003d\u003e IIOSSTestCase2)\n\tIIOSSTestCase2(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\n(\n\nworld :\u003d new World();\nstbCtr :\u003d new StableController(IIOSS`server)\n)\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\n(\n\nServerTest();\nEnvTest()\n)\nprivate  ServerTest() (() \u003d\u003d\u003e ())\n\tServerTest()() \u003d\u003d\n(\n\n(\nserv:Server :\u003d new Server()\n\nserv.PointAtPig(1, 1);\nworld.env.showResult();\nlet reaction:seq of (outline) \u003d ((world.env).GetAndPurgeOutlines)() in AssertTrue(((len reaction) \u003d 1));\nserv.AddPig(1, stbCtr);\nAssertTrue(((serv.GetNoPigs)() \u003d 1));\nserv.RemovePig(3);\nAssertFalse(((serv.GetNoPigs)() \u003d 0));\nserv.RemovePig(1);\nAssertTrue(((serv.GetNoPigs)() \u003d 0))\n)\n)\nprivate  EnvTest() (() \u003d\u003d\u003e ())\n\tEnvTest()() \u003d\u003d\n(\n\nlet env:[Environment] \u003d (world.env) in (\n\nAssertTrue((IIOSS`server \u003d (env.getServer)()));\nAssertTrue(((env.getNoSensors)() \u003d 4))\n)\n)\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nskip\nend IIOSSTestCase2\n","class Test\npublic  Run(TestResult) (TestResult \u003d\u003d\u003e ())\n\tRun(TestResult)(-) \u003d\u003d\nis subclass responsibility\nend Test\n","class TestCase is subclass of [Test]\nprotected  name:seq of (char) :\u003d (undefined)\npublic  TestCase(seq of (char)) (seq of (char) \u003d\u003d\u003e TestCase)\n\tTestCase(seq of (char))(nm) \u003d\u003d\nname :\u003d nm\npublic  GetName() (() \u003d\u003d\u003e seq of (char))\n\tGetName()() \u003d\u003d\nreturn (name)\nprotected  AssertTrue(bool) (bool \u003d\u003d\u003e ())\n\tAssertTrue(bool)(pb) \u003d\u003d\nif (not pb)\nthen\nexit (\u003cFAILURE\u003e)\nprotected  AssertFalse(bool) (bool \u003d\u003d\u003e ())\n\tAssertFalse(bool)(pb) \u003d\u003d\nif pb\nthen\nexit (\u003cFAILURE\u003e)\npublic  Run(TestResult) (TestResult \u003d\u003d\u003e ())\n\tRun(TestResult)(ptr) \u003d\u003d\ntrap in \u0027TestCase\u0027 (TestCase.vdmrt) at line 23:14\u003cFAILURE\u003eADefPatternBind[]ADefPatternBind with ptr.AddFailure(self) in (\n\nSetUp();\nRunTest();\nTearDown()\n)\nprotected  SetUp() (() \u003d\u003d\u003e ())\n\tSetUp()() \u003d\u003d\nis subclass responsibility\nprotected  RunTest() (() \u003d\u003d\u003e ())\n\tRunTest()() \u003d\u003d\nis subclass responsibility\nprotected  TearDown() (() \u003d\u003d\u003e ())\n\tTearDown()() \u003d\u003d\nis subclass responsibility\nend TestCase\n","class TestResult\nprivate  failures:seq of (TestCase) :\u003d []\npublic  AddFailure(TestCase) (TestCase \u003d\u003d\u003e ())\n\tAddFailure(TestCase)(ptst) \u003d\u003d\nfailures :\u003d (failures ^ [ptst])\npublic  Print(seq of (char)) (seq of (char) \u003d\u003d\u003e ())\n\tPrint(seq of (char))(pstr) \u003d\u003d\nlet - \u003d (new IO().echo)((pstr ^ \"\n\")) in skip\npublic  Show() (() \u003d\u003d\u003e ())\n\tShow()() \u003d\u003d\nif (failures \u003d [])\nthen\nPrint(\"No failures detected\")else\nfor in \u0027TestResult\u0027 (TestResult.vdmrt) at line 36:15failureADefPatternBind[failure \u003d TestCase]ADefPatternBind in failures do\nPrint(((failure.GetName)() ^ \" failed\"))\nend TestResult\n","class TestSuite is subclass of [Test]\nprivate  tests:seq of (Test) :\u003d []\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\nntr:TestResult :\u003d new TestResult()\n\nRun(ntr);\nntr.Show()\n)\npublic  Run(TestResult) (TestResult \u003d\u003d\u003e ())\n\tRun(TestResult)(result) \u003d\u003d\nfor in \u0027TestSuite\u0027 (TestSuite.vdmrt) at line 17:9testADefPatternBind[test \u003d Test]ADefPatternBind in tests do\ntest.Run(result)\npublic  AddTest(Test) (Test \u003d\u003d\u003e ())\n\tAddTest(Test)(test) \u003d\u003d\ntests :\u003d (tests ^ [test])\nend TestSuite\n","class World\npublic static  env:[Environment] :\u003d nil\npublic  World() (() \u003d\u003d\u003e World)\n\tWorld()() \u003d\u003d\n(\n\nenv :\u003d new Environment(\"scenario.txt\");\nenv.addSensor(IIOSS`sensor1);\nenv.addSensor(IIOSS`sensor2);\nenv.addSensor(IIOSS`sensor3);\nenv.addSensor(IIOSS`sensor4);\nenv.addServer(IIOSS`server);\nIIOSS`StableController1.AddSensor(IIOSS`sensor1, 1);\nIIOSS`StableController1.AddSensor(IIOSS`sensor2, 2);\nIIOSS`StableController1.AddActuator(IIOSS`actuator1, 1);\nIIOSS`StableController1.AddActuator(IIOSS`actuator2, 2);\nIIOSS`StableController2.AddSensor(IIOSS`sensor3, 3);\nIIOSS`StableController2.AddSensor(IIOSS`sensor4, 4);\nIIOSS`StableController2.AddActuator(IIOSS`actuator3, 3);\nIIOSS`StableController2.AddActuator(IIOSS`actuator4, 4);\nstart (IIOSS`server)\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nIIOSSTYPES`DebugPrint(\"************************************************\");\nIIOSSTYPES`DebugPrint(\"** World class started \");\nIIOSSTYPES`DebugPrint(\"************************************************\");\nstart (env);\nenv.isFinished();\nIIOSS`server.isFinished();\nenv.showResult();\nIIOSSTYPES`DebugPrint(\"************************************************\");\nIIOSSTYPES`DebugPrint(\"** World class ended \");\nIIOSSTYPES`DebugPrint(\"************************************************\")\n)\nend World\n","class IIOSSTYPES\npublic static  PigPosition \u003d PigPosition\npublic static  Position \u003d Position\npublic static  EventId \u003d EventId\npublic static  PigId \u003d PigId\npublic static  PigStyId \u003d PigStyId\npublic static  Time \u003d Time\npublic static  EventType \u003d EventType\npublic static  DebugPrint(seq of (char)) (seq of (char) \u003d\u003d\u003e ())\n\tDebugPrint(seq of (char))(text) \u003d\u003d\n(\n\nlet file \u003d new IO() in let - \u003d ((file.writeval))[seq of (char)](text) in skip\n)\nend IIOSSTYPES\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n","class VDMUtil\npublic static  public static set2seq[(T)]: (set of (@T) +\u003e seq of (@T))\n\tset2seq(x) \u003d\u003d\nis not yet specified\npublic static  public static get_file_pos: (() +\u003e [(seq of (char) * nat * nat * seq of (char) * seq of (char))])\n\tget_file_pos() \u003d\u003d\nis not yet specified\npublic static  public static val2seq_of_char[(T)]: (@T +\u003e seq of (char))\n\tval2seq_of_char(x) \u003d\u003d\nis not yet specified\npublic static  public static seq_of_char2val[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tseq_of_char2val(s) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic static  public static classname[(T)]: (@T -\u003e [seq1 of (char)])\n\tclassname(s) \u003d\u003d\nis not yet specified\nend VDMUtil\n"]