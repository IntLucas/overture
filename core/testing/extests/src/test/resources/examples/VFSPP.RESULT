["class Colli\nprivate  ID:int :\u003d 0\nprivate  destination:int :\u003d 0\npublic  Colli(int, int) (int * int \u003d\u003d\u003e Colli)\n\tColli(int, int)(id, dest) \u003d\u003d\n(\n\nID :\u003d id;\ndestination :\u003d dest\n)\npublic  getDestination() (() \u003d\u003d\u003e int)\n\tgetDestination()() \u003d\u003d\nreturn (destination)\npublic  getID() (() \u003d\u003d\u003e int)\n\tgetID()() \u003d\u003d\nreturn (ID)\npublic  setID(int) (int \u003d\u003d\u003e ())\n\tsetID(int)(id) \u003d\u003d\nID :\u003d id\npublic  setDestination(int) (int \u003d\u003d\u003e ())\n\tsetDestination(int)(dest) \u003d\u003d\ndestination :\u003d dest\nend Colli\n","class Conveyor\nprivate  goods:seq of (Colli) :\u003d []\nprivate  slides:seq of (Slide) :\u003d []\nprivate  inv(forall a, b in set (inds slides) \u0026 ((a \u003c\u003e b) \u003d\u003e ((slides(a).getID)() \u003c\u003e (slides(b).getID)())))\npublic  addColli(Colli) (Colli \u003d\u003d\u003e ())\n\taddColli(Colli)(elem) \u003d\u003d\ngoods :\u003d (goods ^ [elem])\npublic  addSlide(Slide) (Slide \u003d\u003d\u003e ())\n\taddSlide(Slide)(elem) \u003d\u003d\nslides :\u003d (slides ^ [elem])\n\tpre (forall a in set (inds slides) \u0026 ((elem.getID)() \u003c\u003e (slides(a).getID)()))\npublic  getSlides() (() \u003d\u003d\u003e seq of (Slide))\n\tgetSlides()() \u003d\u003d\nreturn (slides)\npublic  distributeGoods() (() \u003d\u003d\u003e ())\n\tdistributeGoods()() \u003d\u003d\n(\ndoomed:set of (Colli) :\u003d {}\n\nfor all x in set (inds goods) do\nfor all y in set (inds slides) do\nif ((goods(x).getDestination)() \u003d (slides(y).getID)())\nthen\n(\n\nslides(y).addGoods(goods(x));\ndoomed :\u003d (doomed union {goods(x)})\n);\nfor all i in set doomed do\nremoveGoods(i)\n)\npublic  removeGoods(Colli) (Colli \u003d\u003d\u003e ())\n\tremoveGoods(Colli)(elem) \u003d\u003d\n(\n\ngoods :\u003d [goods(x) | x in set (inds goods) \u0026 (goods(x) \u003c\u003e elem)]\n)\npublic  checkForUndeliverableGoods() (() \u003d\u003d\u003e set of (Colli))\n\tcheckForUndeliverableGoods()() \u003d\u003d\n(\n\nreturn ({goods(x) | x in set (inds goods) \u0026 (not (exists s in set (inds slides) \u0026 ((slides(s).getID)() \u003d (goods(x).getDestination)())))})\n)\npublic  printColli() (() \u003d\u003d\u003e ())\n\tprintColli()() \u003d\u003d\nfor all x in set (inds goods) do\n(\n\nIO`print((goods(x).getID)());\nIO`print(\"\t\")\n)\npublic  printSlides() (() \u003d\u003d\u003e ())\n\tprintSlides()() \u003d\u003d\nfor all x in set (inds slides) do\n(\n\nIO`print((slides(x).getID)());\nIO`print(\"\t\")\n)\nend Conveyor\n","class Slide\nprivate  goods:set of (Colli) :\u003d {}\nprivate  ID:int :\u003d 0\npublic  Slide(int) (int \u003d\u003d\u003e Slide)\n\tSlide(int)(id) \u003d\u003d\nID :\u003d id\npublic  getID() (() \u003d\u003d\u003e int)\n\tgetID()() \u003d\u003d\nreturn (ID)\npublic  addGoods(Colli) (Colli \u003d\u003d\u003e ())\n\taddGoods(Colli)(elem) \u003d\u003d\ngoods :\u003d (goods union {elem})\npublic  setID(int) (int \u003d\u003d\u003e ())\n\tsetID(int)(id) \u003d\u003d\nID :\u003d id\npublic  printColli() (() \u003d\u003d\u003e ())\n\tprintColli()() \u003d\u003d\nfor all x in set goods do\n(\n\nIO`print(\"\t\");\nIO`print((x.getID)())\n)\nend Slide\n","class Test\nprivate  goods:set of (Colli) :\u003d {new Colli(0, 0), new Colli(1, 1), new Colli(2, 2), new Colli(3, 3), new Colli(4, 0), new Colli(359, 14)}\nprivate  slides:set of (Slide) :\u003d {new Slide(0), new Slide(1), new Slide(2)}\nprivate  conveyor:Conveyor :\u003d new Conveyor()\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\ntemp:set of (Colli) :\u003d {}\n\nfor all x in set goods do\nconveyor.addColli(x);\nfor all y in set slides do\nconveyor.addSlide(y);\nIO`print(\"\nTest started..\");\nIO`print(\"\ngoods in conveyor:\n\");\nconveyor.printColli();\nIO`print(\"\nslides in conveyor:\n\");\nconveyor.printSlides();\nfor all s in set (elems (conveyor.getSlides)()) do\n(\n\nIO`print(\"\nSlide ID:\t\");\nIO`print((s.getID)());\nIO`print(\" has goods:\");\ns.printColli()\n);\nIO`print(\"\n\n..Distributing goods!\n\");\nconveyor.distributeGoods();\nIO`print(\"\ngoods in conveyor:\n\");\nconveyor.printColli();\nIO`print(\"\nslides in conveyor:\n\");\nconveyor.printSlides();\nfor all s in set (elems (conveyor.getSlides)()) do\n(\n\nIO`print(\"\nSlide ID:\t\");\nIO`print((s.getID)());\nIO`print(\" has goods:\");\ns.printColli()\n);\ntemp :\u003d (conveyor.checkForUndeliverableGoods)();\nIO`print(\"\nundeliverable goods:\t\");\nfor all s in set temp do\n(\n\nIO`print((s.getID)());\nIO`print(\"\t\")\n)\n)\nend Test\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]