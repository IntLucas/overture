["class Accelerometer is subclass of [GLOBAL]\npublic  stimulate(ActivityData) (ActivityData \u003d\u003d\u003e ())\n\tstimulate(ActivityData)(a) \u003d\u003d\nPacemaker`rateController.stimulate(a)\nend Accelerometer\n","class Environment is subclass of [GLOBAL]\npublic static  InputTP \u003d InputTP\n\tinv inp \u003d\u003d (forall line in set (elems (inp.#2)) \u0026 ((inp.#1) \u003e\u003d (line.#4)))\npublic static  Inpline \u003d Inpline\npublic static  Outline \u003d Outline\nprivate  io:IO :\u003d new IO()\nprivate  inplines:seq of (Inpline) :\u003d []\nprivate  outlines:seq of (Outline) :\u003d []\nprivate  busy:bool :\u003d true\nprivate  simtime:Time :\u003d (undefined)\nprivate  leads:map (Chamber) to (Lead) :\u003d {|-\u003e}\nprivate  accelerometer:Accelerometer :\u003d (undefined)\npublic  Environment(seq1 of (char)) (seq1 of (char) \u003d\u003d\u003e Environment)\n\tEnvironment(seq1 of (char))(fname) \u003d\u003d\nlet mk_(-, mk_(timeval, input)) \u003d ((io.freadval))[InputTP](fname) in (\n\ninplines :\u003d input;\nsimtime :\u003d timeval\n)\npublic  addLeadSensor(Lead) (Lead \u003d\u003d\u003e ())\n\taddLeadSensor(Lead)(lsens) \u003d\u003d\nleads :\u003d (leads ++ {(lsens.getChamber)() |-\u003e lsens})\npublic  addAccelerometer(Accelerometer) (Accelerometer \u003d\u003d\u003e ())\n\taddAccelerometer(Accelerometer)(acc) \u003d\u003d\naccelerometer :\u003d acc\nprivate  createSignal() (() \u003d\u003d\u003e ())\n\tcreateSignal()() \u003d\u003d\n(\n\nif ((len inplines) \u003e 0)\nthen\n(\ncurtime:Time :\u003d time\ndone:bool :\u003d false\n\nwhile (not done) do let mk_(sensed, chamber, accinfo, stime):Inpline \u003d (hd inplines) in if (stime \u003c\u003d curtime)\nthen\n(\n\nleads(chamber).stimulate(sensed);\naccelerometer.stimulate(accinfo);\ninplines :\u003d (inplines(2, ... ,(len inplines)));\ndone :\u003d ((len inplines) \u003d 0)\n)else\ndone :\u003d true\n);\nif ((len inplines) \u003d 0)\nthen\nbusy :\u003d false\n)\npublic  handleEvent(Pulse, Chamber, Time) (Pulse * Chamber * Time \u003d\u003d\u003e ())\n\thandleEvent(Pulse, Chamber, Time)(p, c, t) \u003d\u003d\noutlines :\u003d (outlines ^ [mk_(p, c, t)])\npublic  showResult() (() \u003d\u003d\u003e ())\n\tshowResult()() \u003d\u003d\nlet - \u003d ((io.writeval))[seq of (Outline)](convert(outlines)) in skip\nprivate  private convert: (seq of (Outline) -\u003e seq of (Outline))\n\tconvert(s) \u003d\u003d\n[mk_((s(i).#1), (s(i).#2), (floor ((s(i).#3) / 10))) | i in set (inds s)]\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\nprotected  thread periodic(1.0E9, 10, 900, 0)(createSignal())\nprivate  mutex(handleEvent, showResult)\nprivate  mutex(createSignal)\nprivate  per isFinished \u003d\u003e ((not busy) and (time \u003e\u003d simtime))\nend Environment\n","class GLOBAL\npublic static  Sense \u003d Sense\npublic static  Chamber \u003d Chamber\npublic static  ActivityData \u003d ActivityData\n\tinv a \u003d\u003d (a \u003c\u003d 7)\npublic static  Pulse \u003d Pulse\npublic static  Mode \u003d Mode\npublic static  PPM \u003d PPM\n\tinv ppm \u003d\u003d ((ppm \u003e\u003d 30) and (ppm \u003c\u003d 175))\npublic static  Time \u003d Time\nend GLOBAL\n","class HeartController is subclass of [GLOBAL]\nprivate  leads:map (Chamber) to (Lead) :\u003d (undefined)\nprivate  sensed:map (Chamber) to (Sense) :\u003d (undefined)\nprivate  finished:bool :\u003d (undefined)\nprivate  mode:Mode :\u003d (undefined)\nprivate  FixedAV:Time :\u003d (undefined)\nprivate  lastpulse:Time :\u003d (undefined)\nprivate  ARP:Time :\u003d (undefined)\nprivate  interval:Time :\u003d (undefined)\npublic  HeartController() (() \u003d\u003d\u003e HeartController)\n\tHeartController()() \u003d\u003d\n(\n\nleads :\u003d {|-\u003e};\nsensed :\u003d {|-\u003e};\nfinished :\u003d false;\nmode :\u003d \u003cAAT\u003e;\nFixedAV :\u003d 1500;\nlastpulse :\u003d 0;\nARP :\u003d 2500;\ninterval :\u003d (Pacemaker`rateController.getInterval)()\n)\npublic  addLeadPacer(Lead) (Lead \u003d\u003d\u003e ())\n\taddLeadPacer(Lead)(lead) \u003d\u003d\nleads :\u003d (leads ++ {(lead.getChamber)() |-\u003e lead})\npublic  pace() (() \u003d\u003d\u003e ())\n\tpace()() \u003d\u003d\n(\n\ncases mode :\n  \u003cAOO\u003e -\u003e PaceAOO()  \u003cAAT\u003e -\u003e PaceAAT()  \u003cDOO\u003e -\u003e PaceDOO()  \u003cOFF\u003e -\u003e skip  others -\u003e error end;\nsensed :\u003d {|-\u003e}\n)\nprivate  PaceAOO() (() \u003d\u003d\u003e ())\n\tPaceAOO()() \u003d\u003d\nlet curTime:Time \u003d time in if ((interval + lastpulse) \u003c\u003d curTime)\nthen\n(\n\nlastpulse :\u003d curTime;\nleads(\u003cATRIA\u003e).addLeadPace(\u003cPULSE\u003e, curTime)\n)else\nskip\nprivate  PaceAAT() (() \u003d\u003d\u003e ())\n\tPaceAAT()() \u003d\u003d\nlet curTime:Time \u003d time in if ((\u003cATRIA\u003e in set (dom sensed)) and (sensed(\u003cATRIA\u003e) \u003d \u003cPULSE\u003e))\nthen\nif ((curTime - lastpulse) \u003c\u003d ARP)\nthen\nskipelse\n(\n\nlastpulse :\u003d curTime;\nleads(\u003cATRIA\u003e).addLeadPace(\u003cTRI_PULSE\u003e, curTime)\n)elseif ((interval + lastpulse) \u003c\u003d curTime)\nthen\n(\n\nlastpulse :\u003d curTime;\nleads(\u003cATRIA\u003e).addLeadPace(\u003cPULSE\u003e, curTime)\n)else\nskip\nprivate  PaceDOO() (() \u003d\u003d\u003e ())\n\tPaceDOO()() \u003d\u003d\nlet curTime:Time \u003d time in (\n\nif ((interval + lastpulse) \u003c\u003d curTime)\nthen\n(\n\nlastpulse :\u003d curTime;\nleads(\u003cATRIA\u003e).addLeadPace(\u003cPULSE\u003e, curTime);\nleads(\u003cVENTRICLE\u003e).addLeadPace(\u003cPULSE\u003e, (curTime + FixedAV))\n)else\nskip\n)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nfor all lead in set (rng leads) do\nlead.isFinished()\npublic  sensorNotify(Sense, Chamber) (Sense * Chamber \u003d\u003d\u003e ())\n\tsensorNotify(Sense, Chamber)(s, c) \u003d\u003d\n(\n\nsensed :\u003d (sensed ++ {c |-\u003e s})\n)\npublic  setInterval(Time) (Time \u003d\u003d\u003e ())\n\tsetInterval(Time)(t) \u003d\u003d\ninterval :\u003d t\npublic  setMode(Mode) (Mode \u003d\u003d\u003e ())\n\tsetMode(Mode)(m) \u003d\u003d\n(\n\nmode :\u003d m\n)\nprotected  thread periodic(2.0E8, 0, 190, 0)(pace())\nprivate  per isFinished \u003d\u003e ((sensed \u003d {|-\u003e}) and (#active[pace] \u003d 0))\nprivate  mutex(sensorNotify, pace, setInterval)\nprivate  mutex(sensorNotify, PaceAOO, PaceDOO, PaceAAT)\nend HeartController\n","class Lead is subclass of [GLOBAL]\nprivate  chamber:Chamber :\u003d (undefined)\nprivate  scheduledPulse:[(Time * Pulse)] :\u003d (undefined)\npublic  Lead(Chamber) (Chamber \u003d\u003d\u003e Lead)\n\tLead(Chamber)(chm) \u003d\u003d\n(\n\nchamber :\u003d chm;\nscheduledPulse :\u003d nil\n)\npublic  getChamber() (() \u003d\u003d\u003e Chamber)\n\tgetChamber()() \u003d\u003d\nreturn (chamber)\npublic  stimulate(Sense) (Sense \u003d\u003d\u003e ())\n\tstimulate(Sense)(s) \u003d\u003d\nPacemaker`heartController.sensorNotify(s, chamber)\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\npublic  addLeadPace(Pulse, Time) (Pulse * Time \u003d\u003d\u003e ())\n\taddLeadPace(Pulse, Time)(p, t) \u003d\u003d\nif (t \u003c\u003d time)\nthen\ndischargePulse(p, chamber)else\n(\n\nscheduledPulse :\u003d mk_(t, p);\nreturn\n)\nprivate  dischargePulse(Pulse, Chamber) (Pulse * Chamber \u003d\u003d\u003e ())\n\tdischargePulse(Pulse, Chamber)(p, c) \u003d\u003d\nduration (4) World`env.handleEvent(p, c, time)\nprivate  followPlan() (() \u003d\u003d\u003e ())\n\tfollowPlan()() \u003d\u003d\n(\ncurTime:Time :\u003d time\n\nif (scheduledPulse \u003c\u003e nil)\nthen\nif (curTime \u003e\u003d (scheduledPulse.#1))\nthen\n(\n\ndischargePulse((scheduledPulse.#2), chamber);\nscheduledPulse :\u003d nil\n)\n)\nprotected  thread periodic(5.0E7, 0, 49, 0)(followPlan())\nprivate  mutex(addLeadPace)\nprivate  mutex(dischargePulse)\nprivate  mutex(followPlan)\nprivate  per isFinished \u003d\u003e (scheduledPulse \u003d nil)\nend Lead\n","system Pacemaker\npublic static  atriaLead:Lead :\u003d new Lead(\u003cATRIA\u003e)\npublic static  ventricleLead:Lead :\u003d new Lead(\u003cVENTRICLE\u003e)\npublic static  accelerometer:Accelerometer :\u003d new Accelerometer()\npublic static  rateController:RateController :\u003d new RateController()\npublic static  heartController:HeartController :\u003d new HeartController()\nprivate  cpu1:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000.0)\nprivate  cpu2:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000.0)\nprivate  cpu3:CPU :\u003d new CPU(\u003cFCFS\u003e, 1000.0)\nprivate  cpu4:CPU :\u003d new CPU(\u003cFP\u003e, 1000.0)\nprivate  bus1:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu1, cpu4})\nprivate  bus2:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu2, cpu4})\nprivate  bus3:BUS :\u003d new BUS(\u003cFCFS\u003e, 1000000.0, {cpu3, cpu4})\npublic  Pacemaker() (() \u003d\u003d\u003e Pacemaker)\n\tPacemaker()() \u003d\u003d\n(\n\ncpu1.deploy(atriaLead);\ncpu2.deploy(ventricleLead);\ncpu3.deploy(accelerometer);\ncpu4.deploy(rateController);\ncpu4.deploy(heartController)\n)\nend Pacemaker\n","class RateController is subclass of [GLOBAL]\nprivate  rateplan:map (Time) to (Time) :\u003d (undefined)\nprivate  sensed:[ActivityData] :\u003d (undefined)\nprivate  interval:Time :\u003d (undefined)\nprivate  finished:bool :\u003d (undefined)\nprivate  LRL:PPM :\u003d (undefined)\nprivate  MSR:PPM :\u003d (undefined)\nprivate  threshold:nat1 :\u003d (undefined)\nprivate  reactionT:Time :\u003d (undefined)\nprivate  recoveryT:Time :\u003d (undefined)\nprivate  responseF:nat1 :\u003d (undefined)\nprivate  inv((threshold \u003c 8) and ((reactionT in set {10, ... ,50}) and ((recoveryT in set {2, ... ,16}) and (responseF \u003c\u003d 16))))\npublic  RateController() (() \u003d\u003d\u003e RateController)\n\tRateController()() \u003d\u003d\n(\n\nLRL :\u003d 60;\nMSR :\u003d 120;\nthreshold :\u003d MED;\nreactionT :\u003d 10;\nrecoveryT :\u003d 2;\nresponseF :\u003d 8;\nsensed :\u003d nil;\ninterval :\u003d (1 / ((LRL / 60) / 10000));\nfinished :\u003d false\n)\npublic  getInterval() (() \u003d\u003d\u003e Time)\n\tgetInterval()() \u003d\u003d\nreturn (interval)\nprivate  controlRate() (() \u003d\u003d\u003e ())\n\tcontrolRate()() \u003d\u003d\n(\n\n(\n\nif (sensed \u003e threshold)\nthen\nincreaseRate()elseif (sensed \u003c threshold)\nthen\ndecreaseRate()else\nskip\n);\nsensed :\u003d nil\n)\npublic  stimulate(ActivityData) (ActivityData \u003d\u003d\u003e ())\n\tstimulate(ActivityData)(ad) \u003d\u003d\nsensed :\u003d ad\npublic  increaseRate() (() \u003d\u003d\u003e ())\n\tincreaseRate()() \u003d\u003d\n(\n\ninterval :\u003d (1 / ((MSR / 60) / 10000));\nPacemaker`heartController.setInterval(interval)\n)\npublic  decreaseRate() (() \u003d\u003d\u003e ())\n\tdecreaseRate()() \u003d\u003d\n(\n\ninterval :\u003d (1 / ((LRL / 60) / 10000));\nPacemaker`heartController.setInterval(interval)\n)\npublic  finish() (() \u003d\u003d\u003e ())\n\tfinish()() \u003d\u003d\nfinished :\u003d true\npublic  isFinished() (() \u003d\u003d\u003e ())\n\tisFinished()() \u003d\u003d\nskip\nprotected  thread while true do controlRate()\nprivate  mutex(stimulate)\nprivate  per isFinished \u003d\u003e finished\nprivate  per controlRate \u003d\u003e (sensed \u003c\u003e nil)\nprivate static  MED:ActivityData \u003d 4\nend RateController\n","class World is subclass of [GLOBAL]\npublic static  env:[Environment] :\u003d nil\npublic  World(seq of (char), Mode) (seq of (char) * Mode \u003d\u003d\u003e World)\n\tWorld(seq of (char), Mode)(filename, mode) \u003d\u003d\n(\n\nenv :\u003d new Environment(filename);\nenv.addLeadSensor(Pacemaker`atriaLead);\nenv.addLeadSensor(Pacemaker`ventricleLead);\nenv.addAccelerometer(Pacemaker`accelerometer);\nPacemaker`heartController.addLeadPacer(Pacemaker`atriaLead);\nPacemaker`heartController.addLeadPacer(Pacemaker`ventricleLead);\nPacemaker`heartController.setMode(mode);\nstart (Pacemaker`heartController);\nstart (Pacemaker`rateController);\nstart (Pacemaker`atriaLead);\nstart (Pacemaker`ventricleLead)\n)\npublic  Run() (() \u003d\u003d\u003e ())\n\tRun()() \u003d\u003d\n(\n\nstart (env);\nenv.isFinished();\nPacemaker`heartController.isFinished();\nenv.showResult()\n)\nend World\n","class Test4\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioBrokenHeart.arg\", \u003cAAI\u003e).Run()\nend Test4\n","class Test5\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioBrokenHeart.arg\", \u003cAAT\u003e).Run()\nend Test5\n","class Test1\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioBrokenHeart.arg\", \u003cAOO\u003e).Run()\nend Test1\n","class Test2\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioBrokenHeart.arg\", \u003cDDD\u003e).Run()\nend Test2\n","class Test3\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioBrokenHeart.arg\", \u003cDOO\u003e).Run()\nend Test3\n","class Test9\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioDoubleHeart.arg\", \u003cAAI\u003e).Run()\nend Test9\n","class Test10\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioDoubleHeart.arg\", \u003cAAT\u003e).Run()\nend Test10\n","class Test6\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioDoubleHeart.arg\", \u003cAOO\u003e).Run()\nend Test6\n","class Test7\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioDoubleHeart.arg\", \u003cDDD\u003e).Run()\nend Test7\n","class Test8\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioDoubleHeart.arg\", \u003cDOO\u003e).Run()\nend Test8\n","class Test15\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioGoodHeart.arg\", \u003cAAI\u003e).Run()\nend Test15\n","class Test16\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioGoodHeart.arg\", \u003cAAT\u003e).Run()\nend Test16\n","class Test11\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioGoodHeart.arg\", \u003cAOO\u003e).Run()\nend Test11\n","class Test13\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioGoodHeart.arg\", \u003cDDD\u003e).Run()\nend Test13\n","class Test14\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioGoodHeart.arg\", \u003cDOO\u003e).Run()\nend Test14\n","class Test20\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioSometimesHeart.arg\", \u003cAAI\u003e).Run()\nend Test20\n","class Test21\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioSometimesHeart.arg\", \u003cAAT\u003e).Run()\nend Test21\n","class Test17\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioSometimesHeart.arg\", \u003cAOO\u003e).Run()\nend Test17\n","class Test18\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioSometimesHeart.arg\", \u003cDDD\u003e).Run()\nend Test18\n","class Test19\npublic  Test() (() \u003d\u003d\u003e ())\n\tTest()() \u003d\u003d\nnew new World(\"tests/scenarioSometimesHeart.arg\", \u003cDOO\u003e).Run()\nend Test19\n","class IO\npublic static  filedirective \u003d filedirective\npublic static  public static writeval[(p)]: (@p -\u003e bool)\n\twriteval(val) \u003d\u003d\nis not yet specified\npublic static  public static fwriteval[(p)]: (seq1 of (char) * @p * filedirective -\u003e bool)\n\tfwriteval(filename, val, fdir) \u003d\u003d\nis not yet specified\npublic static  public static freadval[(p)]: (seq1 of (char) -\u003e (bool * [@p]))\n\tfreadval(filename) \u003d\u003d\nis not yet specified\n\tpost let mk_(b, t):(bool * [@p]) \u003d RESULT in ((not b) \u003d\u003e (t \u003d nil))\npublic  echo(seq of (char)) (seq of (char) \u003d\u003d\u003e bool)\n\techo(seq of (char))(text) \u003d\u003d\nfecho(\"\", text, nil)\npublic  fecho(seq of (char), seq of (char), [filedirective]) (seq of (char) * seq of (char) * [filedirective] \u003d\u003d\u003e bool)\n\tfecho(seq of (char), seq of (char), [filedirective])(filename, text, fdir) \u003d\u003d\nis not yet specified\n\tpre ((filename \u003d \"\") \u003c\u003d\u003e (fdir \u003d nil))\npublic  ferror() (() \u003d\u003d\u003e seq of (char))\n\tferror()() \u003d\u003d\nis not yet specified\npublic static  print(?) (? \u003d\u003d\u003e ())\n\tprint(?)(arg) \u003d\u003d\nis not yet specified\npublic static  println(?) (? \u003d\u003d\u003e ())\n\tprintln(?)(arg) \u003d\u003d\nis not yet specified\npublic static  printf(seq of (char), seq of (?)) (seq of (char) * seq of (?) \u003d\u003d\u003e ())\n\tprintf(seq of (char), seq of (?))(format, args) \u003d\u003d\nis not yet specified\nend IO\n"]