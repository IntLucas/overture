//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolLambdaFunction extends HolFunction {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=body KEEP=NO
  private HolExpression body = null;
// ***** VDMTOOLS END Name=body

// ***** VDMTOOLS START Name=type KEEP=NO
  private HolFunctionType type = null;
// ***** VDMTOOLS END Name=type

// ***** VDMTOOLS START Name=boundedVariables KEEP=NO
  private Vector boundedVariables = null;
// ***** VDMTOOLS END Name=boundedVariables


// ***** VDMTOOLS START Name=vdm_init_HolLambdaFunction KEEP=NO
  private void vdm_init_HolLambdaFunction () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolLambdaFunction


// ***** VDMTOOLS START Name=HolLambdaFunction KEEP=NO
  public HolLambdaFunction () throws CGException {
    vdm_init_HolLambdaFunction();
  }
// ***** VDMTOOLS END Name=HolLambdaFunction


// ***** VDMTOOLS START Name=HolLambdaFunction#3|Vector|HolType|HolExpression KEEP=NO
  public HolLambdaFunction (final Vector newBV, final HolType newType, final HolExpression newBody) throws CGException {

    vdm_init_HolLambdaFunction();
    {

      boundedVariables = (Vector) UTIL.ConvertToList(UTIL.clone(newBV));
      type = (HolFunctionType) UTIL.clone(newType);
      body = (HolExpression) UTIL.clone(newBody);
    }
  }
// ***** VDMTOOLS END Name=HolLambdaFunction#3|Vector|HolType|HolExpression


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    body.setTypeInformation((HolTypeDescription) typeInfo);
    type.setTypeInformation((HolTypeDescription) typeInfo);
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet subProvides = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(boundedVariables.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      String elem_6 = null;
      HolIdentifier obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= boundedVariables.size())) 
        obj_7 = (HolIdentifier) boundedVariables.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      elem_6 = obj_7.print();
      subProvides.add(elem_6);
    }
    HashSet rexpr_10 = new HashSet();
    HashSet var1_11 = new HashSet();
    HashSet var1_12 = new HashSet();
    var1_12 = body.requires();
    var1_11 = (HashSet) var1_12.clone();
    var1_11.removeAll(subProvides);
    HashSet var2_14 = new HashSet();
    var2_14 = type.requires();
    rexpr_10 = (HashSet) var1_11.clone();
    rexpr_10.addAll(var2_14);
    return rexpr_10;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String function = null;
    function = UTIL.ConvertToString(UTIL.clone(new String("\\")));
    for (int ilb_5 = 1; ilb_5 <= new Integer(boundedVariables.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      String rhs_6 = null;
      Vector unArg_7 = null;
      unArg_7 = new Vector();
      unArg_7.add(function);
      unArg_7.add(new String(" "));
      String e_seq_10 = null;
      HolIdentifier obj_11 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= boundedVariables.size())) 
        obj_11 = (HolIdentifier) boundedVariables.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      e_seq_10 = obj_11.print();
      unArg_7.add(e_seq_10);
      String rdcseq_14 = new String();
      for (Iterator enm_17 = unArg_7.iterator(); enm_17.hasNext(); ) {

        String e_15 = UTIL.ConvertToString(enm_17.next());
        rdcseq_14 = rdcseq_14.concat(e_15);
      }
      rhs_6 = rdcseq_14;
      function = UTIL.ConvertToString(UTIL.clone(rhs_6));
    }
    String rhs_18 = null;
    Vector unArg_19 = null;
    unArg_19 = new Vector();
    unArg_19.add(function);
    unArg_19.add(new String("."));
    String e_seq_22 = null;
    e_seq_22 = body.print();
    unArg_19.add(e_seq_22);
    String rdcseq_23 = new String();
    for (Iterator enm_26 = unArg_19.iterator(); enm_26.hasNext(); ) {

      String e_24 = UTIL.ConvertToString(enm_26.next());
      rdcseq_23 = rdcseq_23.concat(e_24);
    }
    rhs_18 = rdcseq_23;
    function = UTIL.ConvertToString(UTIL.clone(rhs_18));
    String rexpr_27 = null;
    Vector unArg_28 = null;
    unArg_28 = new Vector();
    unArg_28.add(new String("(("));
    unArg_28.add(function);
    unArg_28.add(new String(") : "));
    String e_seq_32 = null;
    e_seq_32 = type.printAsTerm();
    unArg_28.add(e_seq_32);
    unArg_28.add(new String(")"));
    String rdcseq_34 = new String();
    for (Iterator enm_37 = unArg_28.iterator(); enm_37.hasNext(); ) {

      String e_35 = UTIL.ConvertToString(enm_37.next());
      rdcseq_34 = rdcseq_34.concat(e_35);
    }
    rexpr_27 = rdcseq_34;
    return rexpr_27;
  }
// ***** VDMTOOLS END Name=print


// ***** VDMTOOLS START Name=getType KEEP=NO
  public HolFunctionType getType () throws CGException {
    return (HolFunctionType) type;
  }
// ***** VDMTOOLS END Name=getType


// ***** VDMTOOLS START Name=getBoundedVars KEEP=NO
  public Vector getBoundedVars () throws CGException {
    return boundedVariables;
  }
// ***** VDMTOOLS END Name=getBoundedVars


// ***** VDMTOOLS START Name=getBody KEEP=NO
  public HolExpression getBody () throws CGException {
    return (HolExpression) body;
  }
// ***** VDMTOOLS END Name=getBody

}
;
