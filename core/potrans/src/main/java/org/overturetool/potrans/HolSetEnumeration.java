//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolSetEnumeration extends HolExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=elements KEEP=NO
  private Vector elements = null;
// ***** VDMTOOLS END Name=elements


// ***** VDMTOOLS START Name=vdm_init_HolSetEnumeration KEEP=NO
  private void vdm_init_HolSetEnumeration () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolSetEnumeration


// ***** VDMTOOLS START Name=HolSetEnumeration KEEP=NO
  public HolSetEnumeration () throws CGException {
    vdm_init_HolSetEnumeration();
  }
// ***** VDMTOOLS END Name=HolSetEnumeration


// ***** VDMTOOLS START Name=HolSetEnumeration#1|Vector KEEP=NO
  public HolSetEnumeration (final Vector newElements) throws CGException {

    vdm_init_HolSetEnumeration();
    elements = (Vector) UTIL.ConvertToList(UTIL.clone(newElements));
  }
// ***** VDMTOOLS END Name=HolSetEnumeration#1|Vector


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {
    for (int ilb_5 = 1; ilb_5 <= new Integer(elements.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolExpression obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= elements.size())) 
        obj_7 = (HolExpression) elements.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(elements.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      HashSet rhs_5 = new HashSet();
      HashSet var2_7 = new HashSet();
      HolExpression obj_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= elements.size())) 
        obj_8 = (HolExpression) elements.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_7 = obj_8.requires();
      rhs_5 = (HashSet) result.clone();
      rhs_5.addAll(var2_7);
      result = (HashSet) UTIL.clone(rhs_5);
    }
    return result;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String result = null;
    result = UTIL.ConvertToString(UTIL.clone(new String("{")));
    for (int ilb_5 = 1; ilb_5 <= new Integer(elements.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      {

        String rhs_6 = null;
        Vector unArg_7 = null;
        unArg_7 = new Vector();
        unArg_7.add(result);
        String e_seq_9 = null;
        HolExpression obj_10 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= elements.size())) 
          obj_10 = (HolExpression) elements.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        e_seq_9 = obj_10.print();
        unArg_7.add(e_seq_9);
        String rdcseq_13 = new String();
        for (Iterator enm_16 = unArg_7.iterator(); enm_16.hasNext(); ) {

          String e_14 = UTIL.ConvertToString(enm_16.next());
          rdcseq_13 = rdcseq_13.concat(e_14);
        }
        rhs_6 = rdcseq_13;
        result = UTIL.ConvertToString(UTIL.clone(rhs_6));
        if (new Boolean((i.intValue()) < (new Integer(elements.size()).intValue())).booleanValue()) {

          String rhs_21 = null;
          Vector unArg_22 = null;
          unArg_22 = new Vector();
          unArg_22.add(result);
          unArg_22.add(new String(";"));
          String rdcseq_25 = new String();
          for (Iterator enm_28 = unArg_22.iterator(); enm_28.hasNext(); ) {

            String e_26 = UTIL.ConvertToString(enm_28.next());
            rdcseq_25 = rdcseq_25.concat(e_26);
          }
          rhs_21 = rdcseq_25;
          result = UTIL.ConvertToString(UTIL.clone(rhs_21));
        }
      }
    }
    String rexpr_29 = null;
    Vector unArg_30 = null;
    unArg_30 = new Vector();
    unArg_30.add(result);
    unArg_30.add(new String("}"));
    String rdcseq_33 = new String();
    for (Iterator enm_36 = unArg_30.iterator(); enm_36.hasNext(); ) {

      String e_34 = UTIL.ConvertToString(enm_36.next());
      rdcseq_33 = rdcseq_33.concat(e_34);
    }
    rexpr_29 = rdcseq_33;
    return rexpr_29;
  }
// ***** VDMTOOLS END Name=print

}
;
