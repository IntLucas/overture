//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolConditional extends HolExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=test KEEP=NO
  private HolExpression test = null;
// ***** VDMTOOLS END Name=test

// ***** VDMTOOLS START Name=success KEEP=NO
  private HolExpression success = null;
// ***** VDMTOOLS END Name=success

// ***** VDMTOOLS START Name=failure KEEP=NO
  private HolExpression failure = null;
// ***** VDMTOOLS END Name=failure


// ***** VDMTOOLS START Name=vdm_init_HolConditional KEEP=NO
  private void vdm_init_HolConditional () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolConditional


// ***** VDMTOOLS START Name=HolConditional KEEP=NO
  public HolConditional () throws CGException {
    vdm_init_HolConditional();
  }
// ***** VDMTOOLS END Name=HolConditional


// ***** VDMTOOLS START Name=HolConditional#3|HolExpression|HolExpression|HolExpression KEEP=NO
  public HolConditional (final HolExpression newTest, final HolExpression newSuccess, final HolExpression newFailure) throws CGException {

    vdm_init_HolConditional();
    {

      test = (HolExpression) UTIL.clone(newTest);
      success = (HolExpression) UTIL.clone(newSuccess);
      failure = (HolExpression) UTIL.clone(newFailure);
    }
  }
// ***** VDMTOOLS END Name=HolConditional#3|HolExpression|HolExpression|HolExpression


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    test.setTypeInformation((HolTypeDescription) typeInfo);
    success.setTypeInformation((HolTypeDescription) typeInfo);
    failure.setTypeInformation((HolTypeDescription) typeInfo);
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet rexpr_1 = new HashSet();
    HashSet var1_2 = new HashSet();
    HashSet var1_3 = new HashSet();
    var1_3 = test.requires();
    HashSet var2_4 = new HashSet();
    var2_4 = success.requires();
    var1_2 = (HashSet) var1_3.clone();
    var1_2.addAll(var2_4);
    HashSet var2_5 = new HashSet();
    var2_5 = failure.requires();
    rexpr_1 = (HashSet) var1_2.clone();
    rexpr_1.addAll(var2_5);
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String rexpr_1 = null;
    Vector unArg_2 = null;
    unArg_2 = new Vector();
    unArg_2.add(new String("(if "));
    String e_seq_4 = null;
    e_seq_4 = test.print();
    unArg_2.add(e_seq_4);
    unArg_2.add(new String(" then "));
    String e_seq_6 = null;
    e_seq_6 = success.print();
    unArg_2.add(e_seq_6);
    unArg_2.add(new String(" else "));
    String e_seq_8 = null;
    e_seq_8 = failure.print();
    unArg_2.add(e_seq_8);
    unArg_2.add(new String(")"));
    String rdcseq_10 = new String();
    for (Iterator enm_13 = unArg_2.iterator(); enm_13.hasNext(); ) {

      String e_11 = UTIL.ConvertToString(enm_13.next());
      rdcseq_10 = rdcseq_10.concat(e_11);
    }
    rexpr_1 = rdcseq_10;
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=print

}
;
