//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolSimpleTypeDefinition extends HolTypeDefinition {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_HolSimpleTypeDefinition KEEP=NO
  private void vdm_init_HolSimpleTypeDefinition () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolSimpleTypeDefinition


// ***** VDMTOOLS START Name=HolSimpleTypeDefinition KEEP=NO
  public HolSimpleTypeDefinition () throws CGException {
    vdm_init_HolSimpleTypeDefinition();
  }
// ***** VDMTOOLS END Name=HolSimpleTypeDefinition


// ***** VDMTOOLS START Name=HolSimpleTypeDefinition#3|HolTypeIdentifier|HolType|HolFunction KEEP=NO
  public HolSimpleTypeDefinition (final HolTypeIdentifier newName, final HolType newType, final HolFunction newInv) throws CGException {

    vdm_init_HolSimpleTypeDefinition();
    {

      name = (HolTypeIdentifier) UTIL.clone(newName);
      type = (HolType) UTIL.clone(newType);
      invar = (HolFunction) UTIL.clone(newInv);
    }
  }
// ***** VDMTOOLS END Name=HolSimpleTypeDefinition#3|HolTypeIdentifier|HolType|HolFunction


// ***** VDMTOOLS START Name=processTypeInformation#1|HolTypeDescription KEEP=NO
  public HolTypeDescription processTypeInformation (final HolTypeDescription typeDesc) throws CGException {

    HolTypeDescription rexpr_2 = null;
    rexpr_2 = (HolTypeDescription) typeDesc.setSynonymType((HolTypeIdentifier) name, (HolType) type);
    return (HolTypeDescription) rexpr_2;
  }
// ***** VDMTOOLS END Name=processTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=provides KEEP=NO
  public HashSet provides () throws CGException {

    HashSet result = new HashSet();
    String enum_set_1 = null;
    enum_set_1 = name.print(new org.overturetool.potrans.quotes.plain());
    result = new HashSet();
    result.add(enum_set_1);
    if (new Boolean(!UTIL.equals(invar, null)).booleanValue()) {

      HashSet rexpr_7 = new HashSet();
      HashSet var2_9 = new HashSet();
      String enum_set_10 = null;
      String var2_12 = null;
      var2_12 = name.print(new org.overturetool.potrans.quotes.plain());
      enum_set_10 = new String("inv_").concat(var2_12);
      var2_9 = new HashSet();
      var2_9.add(enum_set_10);
      rexpr_7 = (HashSet) result.clone();
      rexpr_7.addAll(var2_9);
      return rexpr_7;
    }
    else 
      return result;
  }
// ***** VDMTOOLS END Name=provides


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {
    if (new Boolean(UTIL.equals(invar, null)).booleanValue()) {

      String rexpr_23 = null;
      String var1_24 = null;
      String var1_25 = null;
      String var1_26 = null;
      HolFunctionDefinition obj_27 = null;
      String arg_28 = null;
      Vector unArg_30 = null;
      unArg_30 = new Vector();
      unArg_30.add(new String("inv_"));
      String e_seq_32 = null;
      e_seq_32 = name.print(new org.overturetool.potrans.quotes.plain());
      unArg_30.add(e_seq_32);
      String rdcseq_34 = new String();
      for (Iterator enm_37 = unArg_30.iterator(); enm_37.hasNext(); ) {

        String e_35 = UTIL.ConvertToString(enm_37.next());
        rdcseq_34 = rdcseq_34.concat(e_35);
      }
      arg_28 = rdcseq_34;
      HolLambdaFunction arg_29 = null;
      Vector arg_38 = null;
      arg_38 = new Vector();
      arg_38.add(new HolIdentifier(new String("inv_param")));
      HolFunctionType arg_39 = null;
      Vector arg_43 = null;
      arg_43 = new Vector();
      arg_43.add(type);
      arg_39 = new HolFunctionType(arg_43, new HolNativeTypeIdentifier(new String("bool")));
      arg_29 = new HolLambdaFunction(arg_38, arg_39, new HolNativeIdentifier(new String("T")));
      obj_27 = new HolFunctionDefinition(arg_28, arg_29);
      var1_26 = obj_27.print();
      var1_25 = var1_26.concat(new String("BasicProvers.export_rewrites([\"inv_"));
      String var2_49 = null;
      var2_49 = name.print(new org.overturetool.potrans.quotes.plain());
      var1_24 = var1_25.concat(var2_49);
      rexpr_23 = var1_24.concat(new String("_def\"]);\n"));
      return rexpr_23;
    }
    else {

      String rexpr_4 = null;
      String var1_5 = null;
      String var1_6 = null;
      String var1_7 = null;
      HolFunctionDefinition obj_8 = null;
      String arg_9 = null;
      Vector unArg_11 = null;
      unArg_11 = new Vector();
      unArg_11.add(new String("inv_"));
      String e_seq_13 = null;
      e_seq_13 = name.print(new org.overturetool.potrans.quotes.plain());
      unArg_11.add(e_seq_13);
      String rdcseq_15 = new String();
      for (Iterator enm_18 = unArg_11.iterator(); enm_18.hasNext(); ) {

        String e_16 = UTIL.ConvertToString(enm_18.next());
        rdcseq_15 = rdcseq_15.concat(e_16);
      }
      arg_9 = rdcseq_15;
      obj_8 = new HolFunctionDefinition(arg_9, invar);
      var1_7 = obj_8.print();
      var1_6 = var1_7.concat(new String("BasicProvers.export_rewrites([\"inv_"));
      String var2_20 = null;
      var2_20 = name.print(new org.overturetool.potrans.quotes.plain());
      var1_5 = var1_6.concat(var2_20);
      rexpr_4 = var1_5.concat(new String("_def\"]);\n"));
      return rexpr_4;
    }
  }
// ***** VDMTOOLS END Name=print

}
;
