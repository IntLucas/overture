class HolProductType is subclass of HolType

instance variables
prodTypes : seq of HolType


operations

public HolProductType : seq of HolType ==> HolProductType
HolProductType(newTypes) ==
	prodTypes := newTypes
;

public setTypeInformation : HolTypeDescription ==> ()
setTypeInformation (typeInfo) ==
(
	for i = 1 to len prodTypes do
		prodTypes(i).setTypeInformation(typeInfo)
);

public requires : () ==> set of seq of char
requires() == 
(
	dcl result : set of seq of char := {};
	for i = 1 to len prodTypes do
		result := result union prodTypes(i).requires();
	return result
);

public print : HolType`HolTypeSpecificationType ==> seq of char
print (specType) == 
	return printProdTypeSeq(specType, prodTypes)
;

public printAsCurriedFunction : HolType`HolTypeSpecificationType ==> seq of char
printAsCurriedFunction (specType) == 
	return printAsCurriedFunctionF(specType, prodTypes)
;

public getTypes : () ==> seq of HolType
getTypes() == 
	return prodTypes
;

functions


printAsCurriedFunctionF : HolType`HolTypeSpecificationType * seq of HolType -> seq of char
printAsCurriedFunctionF (specType, typeSeq) == 
	conc ["(", printAsCurriedFunctionFA(specType, typeSeq), ")"]
;

printAsCurriedFunctionFA : HolType`HolTypeSpecificationType * seq of HolType -> seq of char
printAsCurriedFunctionFA (specType, typeSeq) == 
	if len typeSeq = 0 then ""
	elseif len typeSeq = 1 then (hd(typeSeq)).print(specType)
	else
		conc [(hd(typeSeq)).print(specType), " -> ", printAsCurriedFunctionF(specType, tl(typeSeq))]
;

public printProdTypeSeq : HolType`HolTypeSpecificationType * seq of HolType-> seq of char
printProdTypeSeq (specType, prodTypes) == 
	conc ["(", printProdTypeSeqA (specType, prodTypes), ")"]
;

public printProdTypeSeqA : HolType`HolTypeSpecificationType * seq of HolType-> seq of char
printProdTypeSeqA (specType, prodTypes) == 
	if len prodTypes = 0 then ""
	elseif len prodTypes = 1 then (hd(prodTypes)).print(specType)
	else
		conc [(hd(prodTypes)).print(specType), " # ", printProdTypeSeq(specType, tl(prodTypes))]

end HolProductType
