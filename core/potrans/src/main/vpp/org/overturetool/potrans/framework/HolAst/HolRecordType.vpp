class HolRecordType is subclass of HolType

instance variables
tag :		HolTypeIdentifier;
fieldNames:	seq of HolIdentifier;
fieldTypes:	seq of HolType

operations

public HolRecordType : HolTypeIdentifier * seq of HolIdentifier * seq of HolType ==> HolRecordType
HolRecordType(newTag, newFieldNames, newFieldTypes) ==
(
	tag :=			newTag;
	fieldNames :=	newFieldNames;
	fieldTypes :=	newFieldTypes
)
pre len newFieldNames = len newFieldTypes
;

public setTypeInformation : HolTypeDescription ==> ()
setTypeInformation (typeInfo) ==
(
	for i = 1 to len fieldTypes do
		fieldTypes(i).setTypeInformation(typeInfo)
);

public requires : () ==> set of seq of char
requires() == 
(
	dcl result : set of seq of char := {};
	for i = 1 to len fieldTypes do
		result := result union fieldTypes(i).requires();
	return result
);

public print : HolType`HolTypeSpecificationType ==> seq of char
print (specType) ==
(
	dcl result : seq of char;
	result := "<|";
	for i = 1 to len fieldNames do
	(
		result := conc [result, " ", fieldNames(i).print(), ":", fieldTypes(i).print(<type>)];
		if i <> (len fieldNames) then result := conc [result, "; "]
	);
	return conc [result, " |>"];
)
pre specType = <type>
;

public definitionShouldProvide : () ==> set of seq of char
definitionShouldProvide () == 
(
	dcl result : set of seq of char := {"make_" ^ tag.print(<plain>)};						-- Constructor
	for i = 1 to len fieldNames do
		result := result union {tag.print(<plain>) ^ "_field_" ^ new Util().itoa(i)};		-- Field selectors
	return result
);
	
public getOrderedRecordConstructor : () ==> HolFunctionDefinition
getOrderedRecordConstructor() == 
	let
		fieldEnum = getFieldEnumeration(fieldNames)
	in
		return new HolFunctionDefinition
		(
			"make_" ^ tag.print(<plain>),	-- Cannot be mk, since Hol uses these internally
			new HolLambdaFunction
			(
				fieldEnum,
				new HolFunctionType(new HolProductType(fieldTypes), self),
				new HolRecordUpdate(nil, fieldNames, fieldEnum)
			)
		)
;	
public getNumberedFieldSelectors : () ==> seq of HolFunctionDefinition
getNumberedFieldSelectors() == 
(
	dcl defs : seq of HolFunctionDefinition := [];
	for i = 1 to len fieldNames do
	(
		let newSelectionFUnction = 
			new HolFunctionDefinition
			(
				tag.print(<plain>) ^ "_field_" ^ new Util().itoa(i),
				new HolLambdaFunction
				(
					[new HolIdentifier("record")],
					new HolFunctionType(new HolProductType([tag]), fieldTypes(i)),
					new HolRecordFieldSelection(new HolIdentifier("record"), fieldNames(i))
				)
			)
		in
			defs := defs ^ [newSelectionFUnction]
	);
	return defs
)

functions

getFieldEnumeration : seq of HolIdentifier -> seq of HolIdentifier
getFieldEnumeration (fields) == 
	if fields = [] then []
	else
		conc [[new HolIdentifier(conc [(hd(fields)).print(), "_recConstrParam"])], getFieldEnumeration(tl(fields))]
end HolRecordType