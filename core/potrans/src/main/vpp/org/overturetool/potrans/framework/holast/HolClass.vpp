class HolClass 

instance variables

name :		HolIdentifier;
typeDefs :	seq of HolTypeDefinition;
funDefs :	seq of HolFunctionDefinition


operations

public HolClass : HolIdentifier * seq of HolTypeDefinition * seq of HolFunctionDefinition ==> HolClass
HolClass(newName, newTypeDefs, newfunDefs) ==
(
	name := newName;
	typeDefs := newTypeDefs;
	funDefs := newfunDefs
);

public processTypeInformation : HolTypeDescription ==> HolTypeDescription
processTypeInformation (typeDesc) == 
(
	dcl result : HolTypeDescription := typeDesc;
	for i = 1 to len typeDefs do
		result := typeDefs(i).processTypeInformation(result);
	return result
);

public setTypeInformation : HolTypeDescription ==> ()
setTypeInformation (typeInfo) ==
(
	for i = 1 to len typeDefs do
		typeDefs(i).setTypeInformation(typeInfo);
	for i = 1 to len funDefs do
		funDefs(i).setTypeInformation(typeInfo);
);

public requires : () ==> set of seq of char
requires() == 
(
	dcl result : set of seq of char := {};
	for i = 1 to len typeDefs do
		result := result union typeDefs(i).requires();
	for i = 1 to len funDefs do
		result := result union funDefs(i).requires();
	return result
);

public provides : () ==> set of seq of char
provides() == 
(
	dcl result : set of seq of char := {name.print()};
	for i = 1 to len typeDefs do
		result := result union typeDefs(i).provides();
	for i = 1 to len funDefs do
		result := result union funDefs(i).provides();
	return result
);

getMissingDependencies : () ==> set of seq of char
getMissingDependencies () == 
	return requires() \ provides();

printSet : set of seq of char ==> seq of char
printSet (settp) == 
(
	dcl result : seq of char := "";
	for all el in set settp do
		result := result ^ " " ^ el;
	return result
);

public print : () ==> seq of char
print () ==
(
	dcl result : seq of char := "";
	dcl orderedDefs : [seq of HolDefinition] := typeDefs ^ funDefs;
	if getMissingDependencies() <> {} then
		return "Error, the HolAst cannot be printed, there are missing dependencies: " ^ printSet(getMissingDependencies()) ^ "\n";
	let
		mk_(orderedDefsT, unDefined) = orderOnDependencies(orderedDefs)
	in
		if orderedDefsT = nil then
			return "Error, the HolAst cannot be printed, not all dependencies can be satisfied. Most likely due to mutual recursive definitions\nUndefined are:\n\n" ^ printDefinitions(unDefined)
		else
			orderedDefs := orderedDefsT;
	for i = 1 to len orderedDefs do
		result := conc [result, (orderedDefs(i)).print()];
	return result
)

functions 
-- TODO Maybe improve efficiency of this code
orderOnDependencies : seq of HolDefinition -> ([seq of HolDefinition] * seq of HolDefinition)
orderOnDependencies(definitions) == 
	orderOnDependenciesR(definitions, [], {})
;
orderOnDependenciesR : seq of HolDefinition * seq of HolDefinition * set of seq of char -> ([seq of HolDefinition] * seq of HolDefinition)
orderOnDependenciesR(definitionsSource, definitionsTarget, providedByTarget) == 
	if definitionsSource = [] then mk_(definitionsTarget, [])
	else
		let 
			mk_(firstSatisfiedDef, newDefinitionSource) = removeFirstSatisfied(definitionsSource, providedByTarget)
		in
			if firstSatisfiedDef = nil then mk_(nil, definitionsSource)
			else 
				let firstSatisfiedDefNonNil : HolDefinition = firstSatisfiedDef in
					orderOnDependenciesR(newDefinitionSource, definitionsTarget ^ [firstSatisfiedDefNonNil], providedByTarget union firstSatisfiedDefNonNil.provides())
;
removeFirstSatisfied : seq of HolDefinition * set of seq of char -> ([HolDefinition] * seq of HolDefinition)
removeFirstSatisfied (definitions, provided) == 
	if definitions = [] then
		let - = new IO().echo("Not satisfied, provided = " ^printSet(provided)) in
		mk_(nil, [])
	elseif ((hd(definitions)).requires() subset provided) then mk_(hd(definitions), tl(definitions))
	else
		let mk_(recFound, recNewList) = removeFirstSatisfied(tl(definitions), provided)
		in mk_(recFound, [hd(definitions)] ^ recNewList)
;

printDefinitions : seq of HolDefinition -> seq of char
printDefinitions (defs) == 
	if defs = [] then ""
	else (hd(defs)).print() ^"\n" ^ printDefinitions(tl(defs))
end HolClass