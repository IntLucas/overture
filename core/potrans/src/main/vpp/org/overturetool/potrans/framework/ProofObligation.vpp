class ProofObligation

types
public Classification =  
     -- Numeric Operations   
       <Division> 
     | <IntDivision>
     | <Remainder>
     | <Modulus>
     -- Set Operators
     | <DInter> 
     -- Sequence Operators   
     | <SeqHead>    
     | <SeqTail>   
     | <SeqModification>    
     | <SeqApplication>    
     -- Map Operators   
     | <MapMerge>    
     | <MapDistributedMerge>    
     | <MapApplication>    
     | <MapComposition>    
     | <MapIteration>    
     | <MapInverse>    
     | <MapCompatible>    
     -- Tuple Operators   
     | <TupleSelect>    
     | <OperationApplication>    
     -- Function Operators   
     | <FunctionApplication>    
     | <FuncComp>    
     | <FuncIteration>    
     -- Set Constructors
     | <SetComprehension>    
     -- Sequence Constructors
     | <SeqComprehension>    
     -- Map Constructors
     | <MapComprehension>    
     | <MapEnumeration>  
     | <MapCompatible>     
     | <MapSetOfCompatible>
     | <MapSeqOfCompatible>
     -- Expressions
     | <LetBeStExpr>    
     | <CasesExpr>    
     | <ExistsUnique>    
     -- Types
     | <Subtype>     
     | <Invariants>
     | <FlatType>
     -- Patterns Binding
     | <ValueBinding>
     | <PatternBinding>
     -- Functions
     | <FunctionPatterns>     
     | <Satisfiability>
     | <PostCondition>
     -- Operations 
     | <OperationSat>
     | <OpPostCondition>
     -----------------
     | <FiniteSet>
     | <FiniteMap>
     | <NonEndoIteration>
     | <NonZero>
     | <NonEmptySet>
     | <NonEmptySeq>
     ---Statements--------------
     | <LetBeStStmt>    
     | <CasesStmt>    
     | <WhileLoopStmt>
     | <StateInvariants>;

instance variables
po : HolExpression;
classif : Classification

operations
public ProofObligation : HolExpression * Classification ==> ProofObligation
ProofObligation (newPo, newClass) == 
(
	po := newPo;
	classif := newClass
)
;
public ProofObligation : IOmlExpression * Classification ==> ProofObligation
ProofObligation (newPo, newClass) == 
(
	po := new VdmHolTranslator().translateExpression(newPo);
	classif := newClass
)
;
public getHolProverExpression : () ==> MLExpression
getHolProverExpression () == 
(
	return new NonHolExpression 
	(
		"TAC_PROOF(([]:(term list), ``" ^ po.print() ^ "``), VDM_GENERIC_TAC)"
	)
);

public getExpression : () ==> HolExpression
getExpression() == return po;

end ProofObligation
