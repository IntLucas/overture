class HolLambdaFunction is subclass of HolFunction

instance variables

body : HolExpression;
type : HolFunctionType;
boundedVariables : seq of HolIdentifier
-- TODO Invariant that the function type parameter types have enough tuples to cover all parameters in boundedVars

operations

-- TODO Preconditions !
public HolLambdaFunction : seq of HolIdentifier * HolType * HolExpression ==> HolLambdaFunction
HolLambdaFunction(newBV, newType, newBody) ==
(
	boundedVariables := newBV;
	type := newType;
	body := newBody
)
;

public setTypeInformation : HolTypeDescription ==> ()
setTypeInformation (typeInfo) ==
(
	body.setTypeInformation(typeInfo);
	type.setTypeInformation(typeInfo)
);

public requires : () ==> set of seq of char
requires() == 
(
	dcl subProvides : set of seq of char := {};
	for i = 1 to len boundedVariables do
		subProvides := subProvides union {boundedVariables(i).print()};
	return (body.requires() \ subProvides) union type.requires()	-- All required by the body, except for the ones that are bounded as parameters, plus the ones required in the type
);

public print : () ==> seq of char
print () ==
(
	dcl function : seq of char;
	function := "\\";
	for i = 1 to len boundedVariables do
		function := conc [function, " ", boundedVariables(i).print()];
	function := conc [function, ".", body.print()];
	return 
		conc ["((", function, ") : ", type.printAsTerm(), ")"]
)
;

public getType : () ==> HolFunctionType
getType() == return type
;

public getBoundedVars : () ==> seq of HolIdentifier
getBoundedVars() == return boundedVariables
;

public getBody : () ==> HolExpression
getBody() == return body

end HolLambdaFunction
