class DocumentProver

instance variables
model : HolDocument;
pos : set of ProofObligation

operations
public DocumentProver : HolDocument * set of ProofObligation ==> DocumentProver
DocumentProver (newModel, newPos) == 
(
	dcl typeInfo : HolTypeDescription := new HolTypeDescription();
	model := newModel;
	pos := newPos;
	
	-- Substitute synonym types in PO's using the document's definitions
	typeInfo := model.processTypeInformation(typeInfo);
	for all po in set pos do
		po.getExpression().setTypeInformation(typeInfo)
)
;

public getProofCounter : () ==> MLExpression
getProofCounter () == 
(
	dcl res : seq of char := "";
	
	-- Define auxiliary function
	res := res ^ "fun boolToInteger(true) = 1 | boolToInteger(false)=0;\n";

	-- Print model
	res := res ^ model.print();
	
	-- Reset counters
	res := res ^ "val total = 0;\n";
	res := res ^ "val success = 0;\n";
	
	-- Try to proof PO's
	for all po in set pos do
		res := res ^ "val success = success + boolToInteger(can " ^ po.getHolProverExpression().print() ^ ");\n" ^ "val total = total + 1;\n";
		
	-- Print statistics
	res := res ^ "total;\n";
	res := res ^ "success;\n";
	
	return new NonHolExpression(res)
)

end DocumentProver
