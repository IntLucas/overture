class HolFunctionDefinition is subclass of HolDefinition

instance variables
name:		seq of char;
function:	HolFunction;

operations

public HolFunctionDefinition : seq of char * HolFunction ==> HolFunctionDefinition
HolFunctionDefinition(newN, newF) ==
(
	name := newN;
	function := newF;
);

public setTypeInformation : HolTypeDescription ==> ()
setTypeInformation (typeInfo) ==
	function.setTypeInformation(typeInfo);

public provides : () ==> set of seq of char
provides() == 
	return {name};

public requires : () ==> set of seq of char
requires() == 
	return (function.requires() \ provides());

public print : () ==> seq of char
print () ==
(
	if isofclass(HolLambdaFunction, function) then
		let
			params = getParameterDescription(getBoundedVars(function), getDomainTypes(function))
		in
			return conc 
			[
				"Define `", name,  " ", params, " = ", getBody(function).print(), "`;\n",
				"BasicProvers.export_rewrites([\"" ^ name ^ "_def\"]);\n"
			]
	else
		return conc
		[
			"Define `",
			new HolApplication
			(	new HolReferedFunction(new HolNativeIdentifier("$=")),
				[	new HolIdentifier(name),
					function
				]	
			).print(),
			"`;\n",
			"BasicProvers.export_rewrites([\"" ^ name ^ "_def\"]);\n"
		]
);

functions

getParameterDescription : seq of HolIdentifier * seq of HolType -> seq of char
getParameterDescription (names, ptypes) ==
	if names = [] then ""
	else
		conc ["(", (hd(names)).print(), ":", (hd(ptypes)).print(<term>), ") ", getParameterDescription(tl(names), tl(ptypes))]
pre len names = len ptypes
;

-- Operations that prevent type transformation problems (not possible in VDM)

getDomainTypes : HolLambdaFunction -> seq of HolType
getDomainTypes (function) == 
	function.getType().getDomain().getTypes()
;

getBoundedVars : HolLambdaFunction -> seq of HolIdentifier
getBoundedVars (function) == 
	function.getBoundedVars()
;

getBody : HolLambdaFunction -> HolExpression
getBody (function) == 
	function.getBody()

end HolFunctionDefinition
