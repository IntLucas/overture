class HolQuantifier is subclass of HolExpression

types
public QuantifierType = <universal> | <existential>

instance variables
type:			QuantifierType;
parameters:		seq of HolIdentifier;
parameterTypes:	[seq of HolType];
expression:		HolExpression

operations

public HolQuantifier : QuantifierType* seq of HolIdentifier * [seq of HolType] * HolExpression ==> HolQuantifier
HolQuantifier(newType, newParameters, newTypes, newExpression) ==
(
	type			:=	newType;
	parameters		:=	newParameters;
	parameterTypes	:=	newTypes;
	expression		:=	newExpression
)
pre (parameterTypes <> nil) => (len parameters = len parameterTypes);

public HolQuantifier : QuantifierType* seq of HolExpression * [seq of HolType] * seq of HolExpression ==> HolQuantifier
HolQuantifier(newType, newParameters, newTypes, newExpressions) ==
(
	type			:=	newType;
	parameters		:=	newParameters;
	parameterTypes	:=	newTypes;
	expression		:=	mergeExpression(newExpressions)
)
pre (parameterTypes <> nil) => (len parameters = len parameterTypes);

public setTypeInformation : HolTypeDescription ==> ()
setTypeInformation (typeInfo) ==
(
	expression.setTypeInformation(typeInfo);
	for i = 1 to len parameters do
		parameters(i).setTypeInformation(typeInfo);
	if parameterTypes <> nil then
		for i = 1 to len parameterTypes do
			parameterTypes(i).setTypeInformation(typeInfo)
);

public requires : () ==> set of seq of char
requires() == 
(
	dcl subProvides : set of seq of char := {},
		result : set of seq of char := {};
	for i = 1 to len parameters do
		subProvides := subProvides union {parameters(i).print()};
	if parameterTypes <> nil then 
		for i = 1 to len parameterTypes do
			result := result union parameterTypes(i).requires();
	return (expression.requires() \ subProvides) union result		-- All required by the body, except for the ones that are bounded, plus the ones required in the types
);

public print : () ==> seq of char
print () ==
(
	dcl result : seq of char;
	result :=	if type = <universal> then "! "
				else "? ";
	for i = 1 to len parameters do
	(
		result := conc [result, " ", parameters(i).print()];
		if parameterTypes <> nil then
			result := conc [result, ":(", parameterTypes(i).print(<plain>), ")"];
	);
	return conc ["(", result, ".", expression.print(), ")"]
)
pre (parameterTypes <> nil) => (len parameters = len parameterTypes);

functions

mergeExpression : seq of HolExpression -> HolExpression
mergeExpression (exprs) ==
    if      len exprs = 0 then new HolIdentifier("T")
    elseif  len exprs = 1 then exprs(1)
    else    new HolApplication(new HolNativeIdentifier("$/\\"), [hd(exprs), mergeExpression(tl(exprs))])
end HolQuantifier
