class HolDocument

instance variables
expression : [HolExpression];
specifications : seq of HolClass

operations
public HolDocument : () ==> HolDocument
HolDocument () ==
(
	expression := nil;
	specifications := []
)
;

public HolDocument : [HolExpression] * seq of HolClass ==> HolDocument
HolDocument (newExpression, newSpecs) ==
(
	expression := newExpression;
	specifications := newSpecs
)
;

public processTypeInformation : HolTypeDescription ==> HolTypeDescription
processTypeInformation (typeDesc) == 
(
	dcl result : HolTypeDescription := typeDesc;
	for i = 1 to len specifications do
		result := specifications(i).processTypeInformation(result);
	return result
);

public setTypeInformation : HolTypeDescription ==> HolDocument
setTypeInformation (typeInfo) ==
(
	for i = 1 to len specifications do
		specifications(i).setTypeInformation(typeInfo);
	return self
);

public print : () ==> seq of char
print() == 
(
	dcl result : seq of char;
	result := "";
	if expression <> nil then result := conc [result, expression.print(), ";"];
	for i = 1 to len specifications do
		result := conc [result, specifications(i).print()];
	return result
)
end HolDocument
