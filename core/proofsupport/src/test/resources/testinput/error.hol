fun boolToInteger(true) = 1 | boolToInteger(false)=0;
Hol_datatype `FFS_StatusSuccess = FFS_StatusSuccessQuoteLiteral`;
Define `inv_FFS_StatusSuccess (inv_param:FFS_StatusSuccess)  = T`;
BasicProvers.export_rewrites(["inv_FFS_StatusSuccess_def"]);
BasicProvers.export_rewrites(["inv_FFS_StatusSuccess_def"]);
Hol_datatype `FS_ErrorFileNotFound = FS_ErrorFileNotFoundQuoteLiteral`;
Define `inv_FS_ErrorFileNotFound (inv_param:FS_ErrorFileNotFound)  = T`;
BasicProvers.export_rewrites(["inv_FS_ErrorFileNotFound_def"]);
BasicProvers.export_rewrites(["inv_FS_ErrorFileNotFound_def"]);
Hol_datatype `FS_ErrorFileStillOpen = FS_ErrorFileStillOpenQuoteLiteral`;
Define `inv_FS_ErrorFileStillOpen (inv_param:FS_ErrorFileStillOpen)  = T`;
BasicProvers.export_rewrites(["inv_FS_ErrorFileStillOpen_def"]);
BasicProvers.export_rewrites(["inv_FS_ErrorFileStillOpen_def"]);
Hol_datatype `FS_ErrorDirectoryNonEmpty = FS_ErrorDirectoryNonEmptyQuoteLiteral`;
Define `inv_FS_ErrorDirectoryNonEmpty (inv_param:FS_ErrorDirectoryNonEmpty)  = T`;
BasicProvers.export_rewrites(["inv_FS_ErrorDirectoryNonEmpty_def"]);
BasicProvers.export_rewrites(["inv_FS_ErrorDirectoryNonEmpty_def"]);
Hol_datatype `FFS_StatusUnknown = FFS_StatusUnknownQuoteLiteral`;
Define `inv_FFS_StatusUnknown (inv_param:FFS_StatusUnknown)  = T`;
BasicProvers.export_rewrites(["inv_FFS_StatusUnknown_def"]);
BasicProvers.export_rewrites(["inv_FFS_StatusUnknown_def"]);
Hol_datatype `FFS_Status =     FFS_StatusSuccessQuoteLiteral | FS_ErrorFileNotFoundQuoteLiteral  | FS_ErrorFileStillOpenQuoteLiteral  | FS_ErrorDirectoryNonEmptyQuoteLiteral  | FFS_StatusUnknownQuoteLiteral `;
Define `inv_FFS_Status (inv_param:FFS_Status)  = T`;
BasicProvers.export_rewrites(["inv_FFS_Status_def"]);
BasicProvers.export_rewrites(["inv_FFS_Status_def"]);
Hol_datatype `Root = RootQuoteLiteral`;
Define `inv_Root (inv_param:Root)  = T`;
BasicProvers.export_rewrites(["inv_Root_def"]);
BasicProvers.export_rewrites(["inv_Root_def"]);
Hol_datatype `Path =  RootQuoteLiteral | ((char list) list) `;
Define `inv_Path (inv_Path_subj: RootQuoteLiteral | ((char list) list) )  = (let path = inv_Path_subj in (((\x y . ~ (x = y)) path RootQuoteLiteral)  ==> ((\x y . ~ (x = y)) path []) ))`;
BasicProvers.export_rewrites(["inv_Path_def"]);
BasicProvers.export_rewrites(["inv_Path_def"]);
