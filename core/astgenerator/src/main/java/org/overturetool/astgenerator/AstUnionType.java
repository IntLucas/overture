//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sat 19-Apr-2008 by the VDM++ to JAVA Code Generator
// (v8.1 - Fri 14-Mar-2008 10:25:17)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.astgenerator;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES
import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports


@SuppressWarnings("all")
public class AstUnionType extends AstType {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=lhs KEEP=NO
  private AstType lhs = null;
// ***** VDMTOOLS END Name=lhs

// ***** VDMTOOLS START Name=rhs KEEP=NO
  private AstType rhs = null;
// ***** VDMTOOLS END Name=rhs


// ***** VDMTOOLS START Name=AstUnionType KEEP=NO
  public AstUnionType () throws CGException {}
// ***** VDMTOOLS END Name=AstUnionType


// ***** VDMTOOLS START Name=AstUnionType KEEP=NO
  public AstUnionType (final AstType plhs, final AstType prhs) throws CGException {

    lhs = (AstType) UTIL.clone(plhs);
    rhs = (AstType) UTIL.clone(prhs);
  }
// ***** VDMTOOLS END Name=AstUnionType


// ***** VDMTOOLS START Name=getLhs KEEP=NO
  public AstType getLhs () throws CGException {
    return (AstType) lhs;
  }
// ***** VDMTOOLS END Name=getLhs


// ***** VDMTOOLS START Name=getRhs KEEP=NO
  public AstType getRhs () throws CGException {
    return (AstType) rhs;
  }
// ***** VDMTOOLS END Name=getRhs


// ***** VDMTOOLS START Name=flatten KEEP=NO
  public HashSet flatten () throws CGException {

    HashSet res = new HashSet();
    Boolean cond_1 = null;
    cond_1 = lhs.isUnionType();
    if (cond_1.booleanValue()) {

      AstUnionType aut = (AstUnionType) lhs;
      HashSet rhs_4 = new HashSet();
      HashSet var2_6 = new HashSet();
      var2_6 = aut.flatten();
      rhs_4 = (HashSet) res.clone();
      rhs_4.addAll(var2_6);
      res = (HashSet) UTIL.clone(rhs_4);
    }
    else 
      res.add(lhs);
    Boolean cond_7 = null;
    cond_7 = rhs.isUnionType();
    if (cond_7.booleanValue()) {

      AstUnionType aut = (AstUnionType) rhs;
      HashSet rhs_10 = new HashSet();
      HashSet var2_12 = new HashSet();
      var2_12 = aut.flatten();
      rhs_10 = (HashSet) res.clone();
      rhs_10.addAll(var2_12);
      res = (HashSet) UTIL.clone(rhs_10);
    }
    else 
      res.add(rhs);
    return res;
  }
// ***** VDMTOOLS END Name=flatten


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final AstVisitor pv) throws CGException {
    pv.visit((AstUnionType) this);
  }
// ***** VDMTOOLS END Name=accept


// ***** VDMTOOLS START Name=isUnionType KEEP=NO
  public Boolean isUnionType () throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=isUnionType

}
;
