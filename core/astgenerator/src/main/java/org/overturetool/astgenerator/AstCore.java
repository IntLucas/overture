//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sat 19-Apr-2008 by the VDM++ to JAVA Code Generator
// (v8.1 - Fri 14-Mar-2008 10:25:17)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.astgenerator;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES
import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports


@SuppressWarnings("all")
public class AstCore {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=lower KEEP=NO
  private static final String lower = new String("abcdefghijklmnopqrstuvwxyz");
// ***** VDMTOOLS END Name=lower

// ***** VDMTOOLS START Name=upper KEEP=NO
  private static final String upper = new String("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
// ***** VDMTOOLS END Name=upper


// ***** VDMTOOLS START Name=AstCore KEEP=NO
  public AstCore () throws CGException {}
// ***** VDMTOOLS END Name=AstCore


// ***** VDMTOOLS START Name=toUpper KEEP=NO
  public Character toUpper (final Character pch) throws CGException {

    Character varRes_2 = null;
    Boolean cond_4 = null;
    HashSet var2_6 = new HashSet();
    HashSet set_8 = new HashSet();
    Enumeration enm_9 = ((Vector) UTIL.ConvertToList(lower)).elements();
    while ( enm_9.hasMoreElements())
      set_8.add(enm_9.nextElement());
    var2_6 = set_8;
    cond_4 = new Boolean(var2_6.contains(pch));
    if (cond_4.booleanValue()) {

      HashSet tmpSet_10 = new HashSet();
      HashSet riseq_15 = new HashSet();
      int max_16 = lower.length();
      for (int i_17 = 1; i_17 <= max_16; i_17++) 
        riseq_15.add(new Integer(i_17));
      tmpSet_10 = riseq_15;
      Integer i = null;
      boolean succ_12 = false;
      for (Iterator enm_23 = tmpSet_10.iterator(); enm_23.hasNext() && !succ_12; ) {

        Integer tmpElem_13 = UTIL.NumberToInt(enm_23.next());
        succ_12 = true;
        i = tmpElem_13;
        Boolean tmpB_18 = null;
        Character var1_19 = null;
        if (1 <= i.intValue() && i.intValue() <= lower.length()) 
          var1_19 = new Character(lower.charAt(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        tmpB_18 = new Boolean(UTIL.equals(var1_19, pch));
        succ_12 = tmpB_18.booleanValue();
      }
      if (!succ_12) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      if (1 <= i.intValue() && i.intValue() <= upper.length()) 
        varRes_2 = new Character(upper.charAt(i.intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
    }
    else 
      varRes_2 = pch;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=toUpper


// ***** VDMTOOLS START Name=stripUnderscore KEEP=NO
  public String stripUnderscore (final String pstr) throws CGException {

    String str = UTIL.ConvertToString(new String());
    Integer cnt = new Integer(1);
    Boolean up = new Boolean(true);
    while ( new Boolean((cnt.intValue()) <= (new Integer(pstr.length()).intValue())).booleanValue()){

      Boolean cond_6 = null;
      Character var1_7 = null;
      if (1 <= cnt.intValue() && cnt.intValue() <= pstr.length()) 
        var1_7 = new Character(pstr.charAt(cnt.intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      cond_6 = new Boolean(UTIL.equals(var1_7, new Character('_')));
      if (cond_6.booleanValue()) {

        up = (Boolean) UTIL.clone(new Boolean(true));
        cnt = UTIL.NumberToInt(UTIL.clone(new Integer(cnt.intValue() + new Integer(1).intValue())));
      }
      else {

        if (up.booleanValue()) {

          Character e_17 = null;
          Character par_18 = null;
          if (1 <= cnt.intValue() && cnt.intValue() <= pstr.length()) 
            par_18 = new Character(pstr.charAt(cnt.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          e_17 = toUpper(par_18);
          str = str + e_17;
        }
        else {

          Character e_13 = null;
          if (1 <= cnt.intValue() && cnt.intValue() <= pstr.length()) 
            e_13 = new Character(pstr.charAt(cnt.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          str = str + e_13;
        }
        cnt = UTIL.NumberToInt(UTIL.clone(new Integer(cnt.intValue() + new Integer(1).intValue())));
        up = (Boolean) UTIL.clone(new Boolean(false));
      }
    }
    return str;
  }
// ***** VDMTOOLS END Name=stripUnderscore


// ***** VDMTOOLS START Name=stringUpper KEEP=NO
  public String stringUpper (final String pstr) throws CGException {

    String str = UTIL.ConvertToString(new String());
    {

      Character ch = null;
      for (Iterator enm_10 = ((Vector) UTIL.ConvertToList(pstr)).iterator(); enm_10.hasNext(); ) {

        Character elem_3 = (Character) enm_10.next();
        ch = elem_3;
        str = str + toUpper(ch);
      }
    }
    return str;
  }
// ***** VDMTOOLS END Name=stringUpper


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final AstVisitor var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=accept

}
;
