//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sat 19-Apr-2008 by the VDM++ to JAVA Code Generator
// (v8.1 - Fri 14-Mar-2008 10:25:17)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.astgenerator;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES
import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports


@SuppressWarnings("all")
public class AstType extends AstCore {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=AstType KEEP=NO
  public AstType () throws CGException {}
// ***** VDMTOOLS END Name=AstType


// ***** VDMTOOLS START Name=isBasicType KEEP=NO
  public Boolean isBasicType () throws CGException {

    Boolean rexpr_1 = null;
    Boolean var1_2 = null;
    Boolean var1_3 = null;
    {
      if (!(var1_3 = isCharType()).booleanValue()) 
        var1_3 = isBoolType();
    }
    {
      if (!(var1_2 = var1_3).booleanValue()) 
        var1_2 = isNatType();
    }
    {
      if (!(rexpr_1 = var1_2).booleanValue()) 
        rexpr_1 = isRealType();
    }
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=isBasicType


// ***** VDMTOOLS START Name=isCharType KEEP=NO
  public Boolean isCharType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isCharType


// ***** VDMTOOLS START Name=isBoolType KEEP=NO
  public Boolean isBoolType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isBoolType


// ***** VDMTOOLS START Name=isNatType KEEP=NO
  public Boolean isNatType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isNatType


// ***** VDMTOOLS START Name=isRealType KEEP=NO
  public Boolean isRealType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isRealType


// ***** VDMTOOLS START Name=isTypeName KEEP=NO
  public Boolean isTypeName () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isTypeName


// ***** VDMTOOLS START Name=isQuotedType KEEP=NO
  public Boolean isQuotedType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isQuotedType


// ***** VDMTOOLS START Name=isUnionType KEEP=NO
  public Boolean isUnionType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isUnionType


// ***** VDMTOOLS START Name=isSeqType KEEP=NO
  public Boolean isSeqType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isSeqType


// ***** VDMTOOLS START Name=isSetType KEEP=NO
  public Boolean isSetType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isSetType


// ***** VDMTOOLS START Name=isStringType KEEP=NO
  public Boolean isStringType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isStringType


// ***** VDMTOOLS START Name=isOptionalType KEEP=NO
  public Boolean isOptionalType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isOptionalType


// ***** VDMTOOLS START Name=isMapType KEEP=NO
  public Boolean isMapType () throws CGException {
    return new Boolean(false);
  }
// ***** VDMTOOLS END Name=isMapType


// ***** VDMTOOLS START Name=isQuotedTypeUnion KEEP=NO
  public Tuple isQuotedTypeUnion () throws CGException {

    Boolean retb = new Boolean(true);
    HashSet rets = new HashSet();
    if (isUnionType().booleanValue()) {

      AstUnionType aut = (AstUnionType) this;
      {

        boolean succ_6;
        Tuple tmpVal_7 = new Tuple(2);
        AstType obj_8 = null;
        obj_8 = (AstType) aut.getLhs();
        tmpVal_7 = obj_8.isQuotedTypeUnion();
        Boolean lb = null;
        HashSet ls = new HashSet();
        succ_6 = true;
        {

          Vector e_l_9 = new Vector();
          for (int i_10 = 1; i_10 <= tmpVal_7.Length(); i_10++) 
            e_l_9.add(tmpVal_7.GetField(i_10));
          if (succ_6 = 2 == e_l_9.size()) {

            lb = (Boolean) e_l_9.get(0);
            ls = (HashSet) e_l_9.get(2 - 1);
          }
        }
        if (!succ_6) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        if (lb.booleanValue()) {

          HashSet rhs_13 = new HashSet();
          rhs_13 = (HashSet) rets.clone();
          rhs_13.addAll(ls);
          rets = (HashSet) UTIL.clone(rhs_13);
        }
        else 
          retb = (Boolean) UTIL.clone(new Boolean(false));
      }
      {

        boolean succ_16;
        Tuple tmpVal_17 = new Tuple(2);
        AstType obj_18 = null;
        obj_18 = (AstType) aut.getRhs();
        tmpVal_17 = obj_18.isQuotedTypeUnion();
        Boolean rb = null;
        HashSet rs = new HashSet();
        succ_16 = true;
        {

          Vector e_l_19 = new Vector();
          for (int i_20 = 1; i_20 <= tmpVal_17.Length(); i_20++) 
            e_l_19.add(tmpVal_17.GetField(i_20));
          if (succ_16 = 2 == e_l_19.size()) {

            rb = (Boolean) e_l_19.get(0);
            rs = (HashSet) e_l_19.get(2 - 1);
          }
        }
        if (!succ_16) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        if (rb.booleanValue()) {

          HashSet rhs_23 = new HashSet();
          rhs_23 = (HashSet) rets.clone();
          rhs_23.addAll(rs);
          rets = (HashSet) UTIL.clone(rhs_23);
        }
        else 
          retb = (Boolean) UTIL.clone(new Boolean(false));
      }
    }
    else 
      if (isQuotedType().booleanValue()) {

        AstQuotedType aqt = (AstQuotedType) this;
        String elem_5 = null;
        elem_5 = aqt.getName();
        rets.add(elem_5);
      }
      else {
        retb = (Boolean) UTIL.clone(new Boolean(false));
      }
    if (retb.booleanValue()) {

      Tuple rexpr_30 = new Tuple(2);
      rexpr_30 = new Tuple(2);
      rexpr_30.SetField(1, retb);
      rexpr_30.SetField(2, rets);
      return rexpr_30;
    }
    else {

      Tuple rexpr_27 = new Tuple(2);
      rexpr_27 = new Tuple(2);
      rexpr_27.SetField(1, new Boolean(false));
      rexpr_27.SetField(2, new HashSet());
      return rexpr_27;
    }
  }
// ***** VDMTOOLS END Name=isQuotedTypeUnion


// ***** VDMTOOLS START Name=isTypeNameUnion KEEP=NO
  public Tuple isTypeNameUnion () throws CGException {

    Boolean retb = new Boolean(true);
    HashSet rets = new HashSet();
    if (isUnionType().booleanValue()) {

      AstUnionType aut = (AstUnionType) this;
      {

        boolean succ_6;
        Tuple tmpVal_7 = new Tuple(2);
        AstType obj_8 = null;
        obj_8 = (AstType) aut.getLhs();
        tmpVal_7 = obj_8.isTypeNameUnion();
        Boolean lb = null;
        HashSet ls = new HashSet();
        succ_6 = true;
        {

          Vector e_l_9 = new Vector();
          for (int i_10 = 1; i_10 <= tmpVal_7.Length(); i_10++) 
            e_l_9.add(tmpVal_7.GetField(i_10));
          if (succ_6 = 2 == e_l_9.size()) {

            lb = (Boolean) e_l_9.get(0);
            ls = (HashSet) e_l_9.get(2 - 1);
          }
        }
        if (!succ_6) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        if (lb.booleanValue()) {

          HashSet rhs_13 = new HashSet();
          rhs_13 = (HashSet) rets.clone();
          rhs_13.addAll(ls);
          rets = (HashSet) UTIL.clone(rhs_13);
        }
        else 
          retb = (Boolean) UTIL.clone(new Boolean(false));
      }
      {

        boolean succ_16;
        Tuple tmpVal_17 = new Tuple(2);
        AstType obj_18 = null;
        obj_18 = (AstType) aut.getRhs();
        tmpVal_17 = obj_18.isTypeNameUnion();
        Boolean rb = null;
        HashSet rs = new HashSet();
        succ_16 = true;
        {

          Vector e_l_19 = new Vector();
          for (int i_20 = 1; i_20 <= tmpVal_17.Length(); i_20++) 
            e_l_19.add(tmpVal_17.GetField(i_20));
          if (succ_16 = 2 == e_l_19.size()) {

            rb = (Boolean) e_l_19.get(0);
            rs = (HashSet) e_l_19.get(2 - 1);
          }
        }
        if (!succ_16) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        if (rb.booleanValue()) {

          HashSet rhs_23 = new HashSet();
          rhs_23 = (HashSet) rets.clone();
          rhs_23.addAll(rs);
          rets = (HashSet) UTIL.clone(rhs_23);
        }
        else 
          retb = (Boolean) UTIL.clone(new Boolean(false));
      }
    }
    else 
      if (isTypeName().booleanValue()) {

        AstTypeName atn = (AstTypeName) this;
        String elem_5 = null;
        elem_5 = atn.getName();
        rets.add(elem_5);
      }
      else {
        retb = (Boolean) UTIL.clone(new Boolean(false));
      }
    if (retb.booleanValue()) {

      Tuple rexpr_30 = new Tuple(2);
      rexpr_30 = new Tuple(2);
      rexpr_30.SetField(1, retb);
      rexpr_30.SetField(2, rets);
      return rexpr_30;
    }
    else {

      Tuple rexpr_27 = new Tuple(2);
      rexpr_27 = new Tuple(2);
      rexpr_27.SetField(1, new Boolean(false));
      rexpr_27.SetField(2, new HashSet());
      return rexpr_27;
    }
  }
// ***** VDMTOOLS END Name=isTypeNameUnion

}
;
