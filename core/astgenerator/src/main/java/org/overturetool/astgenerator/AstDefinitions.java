//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sat 19-Apr-2008 by the VDM++ to JAVA Code Generator
// (v8.1 - Fri 14-Mar-2008 10:25:17)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.astgenerator;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES
import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports


@SuppressWarnings("all")
public class AstDefinitions extends AstCore {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=composites KEEP=NO
  private HashMap composites = new HashMap();
// ***** VDMTOOLS END Name=composites

// ***** VDMTOOLS START Name=shorthands KEEP=NO
  private HashMap shorthands = new HashMap();
// ***** VDMTOOLS END Name=shorthands

// ***** VDMTOOLS START Name=inherit KEEP=NO
  private HashMap inherit = new HashMap();
// ***** VDMTOOLS END Name=inherit

// ***** VDMTOOLS START Name=prefix KEEP=NO
  private String prefix = null;
// ***** VDMTOOLS END Name=prefix

// ***** VDMTOOLS START Name=vdm_package KEEP=NO
  private Vector vdm_package = null;
// ***** VDMTOOLS END Name=vdm_package

// ***** VDMTOOLS START Name=directory KEEP=NO
  private String directory = null;
// ***** VDMTOOLS END Name=directory

// ***** VDMTOOLS START Name=top KEEP=NO
  private Vector top = null;
// ***** VDMTOOLS END Name=top


// ***** VDMTOOLS START Name=AstDefinitions KEEP=NO
  public AstDefinitions () throws CGException {

    composites = (HashMap) UTIL.clone(new HashMap());
    shorthands = (HashMap) UTIL.clone(new HashMap());
    inherit = (HashMap) UTIL.clone(new HashMap());
    vdm_package = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector()));
    directory = UTIL.ConvertToString(UTIL.clone(new Vector()));
    prefix = UTIL.ConvertToString(UTIL.clone(new Vector()));
    top = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector()));
  }
// ***** VDMTOOLS END Name=AstDefinitions


// ***** VDMTOOLS START Name=addComposite KEEP=NO
  public void addComposite (final AstComposite pcomposite) throws CGException {

    Boolean cond_2 = null;
    String var1_3 = null;
    var1_3 = pcomposite.getName();
    HashSet var2_4 = new HashSet();
    var2_4.clear();
    var2_4.addAll(composites.keySet());
    cond_2 = new Boolean(!var2_4.contains(var1_3));
    if (cond_2.booleanValue()) {

      HashMap rhs_6 = new HashMap();
      HashMap var2_8 = new HashMap();
      String tmpVar1_9 = null;
      tmpVar1_9 = pcomposite.getName();
      var2_8 = new HashMap();
      var2_8.put(tmpVar1_9, pcomposite);
      {

        HashMap m1_15 = (HashMap) composites.clone();
        HashMap m2_16 = var2_8;
        HashSet com_11 = new HashSet();
        com_11.addAll(m1_15.keySet());
        com_11.retainAll(m2_16.keySet());
        boolean all_applies_12 = true;
        Object d_13;
        for (Iterator bb_14 = com_11.iterator(); bb_14.hasNext() && all_applies_12; ) {

          d_13 = bb_14.next();
          all_applies_12 = m1_15.get(d_13).equals(m2_16.get(d_13));
        }
        if (!all_applies_12) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_15.putAll(m2_16);
        rhs_6 = m1_15;
      }
      composites = (HashMap) UTIL.clone(rhs_6);
    }
  }
// ***** VDMTOOLS END Name=addComposite


// ***** VDMTOOLS START Name=addShorthand KEEP=NO
  public void addShorthand (final AstShorthand pshorthand) throws CGException {

    Boolean cond_2 = null;
    String var1_3 = null;
    var1_3 = pshorthand.getName();
    HashSet var2_4 = new HashSet();
    var2_4.clear();
    var2_4.addAll(shorthands.keySet());
    cond_2 = new Boolean(!var2_4.contains(var1_3));
    if (cond_2.booleanValue()) {

      HashMap rhs_6 = new HashMap();
      HashMap var2_8 = new HashMap();
      String tmpVar1_9 = null;
      tmpVar1_9 = pshorthand.getName();
      var2_8 = new HashMap();
      var2_8.put(tmpVar1_9, pshorthand);
      {

        HashMap m1_15 = (HashMap) shorthands.clone();
        HashMap m2_16 = var2_8;
        HashSet com_11 = new HashSet();
        com_11.addAll(m1_15.keySet());
        com_11.retainAll(m2_16.keySet());
        boolean all_applies_12 = true;
        Object d_13;
        for (Iterator bb_14 = com_11.iterator(); bb_14.hasNext() && all_applies_12; ) {

          d_13 = bb_14.next();
          all_applies_12 = m1_15.get(d_13).equals(m2_16.get(d_13));
        }
        if (!all_applies_12) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_15.putAll(m2_16);
        rhs_6 = m1_15;
      }
      shorthands = (HashMap) UTIL.clone(rhs_6);
    }
  }
// ***** VDMTOOLS END Name=addShorthand


// ***** VDMTOOLS START Name=addInherit KEEP=NO
  public void addInherit (final String pkey, final String pval) throws CGException {

    Boolean cond_3 = null;
    HashSet var2_5 = new HashSet();
    var2_5.clear();
    var2_5.addAll(inherit.keySet());
    cond_3 = new Boolean(!var2_5.contains(pkey));
    if (cond_3.booleanValue()) {

      HashMap rhs_7 = new HashMap();
      HashMap var2_9 = new HashMap();
      var2_9 = new HashMap();
      var2_9.put(pkey, pval);
      {

        HashMap m1_16 = (HashMap) inherit.clone();
        HashMap m2_17 = var2_9;
        HashSet com_12 = new HashSet();
        com_12.addAll(m1_16.keySet());
        com_12.retainAll(m2_17.keySet());
        boolean all_applies_13 = true;
        Object d_14;
        for (Iterator bb_15 = com_12.iterator(); bb_15.hasNext() && all_applies_13; ) {

          d_14 = bb_15.next();
          all_applies_13 = m1_16.get(d_14).equals(m2_17.get(d_14));
        }
        if (!all_applies_13) 
          UTIL.RunTime("Run-Time Error:Map Merge: Incompatible maps");
        m1_16.putAll(m2_17);
        rhs_7 = m1_16;
      }
      inherit = (HashMap) UTIL.clone(rhs_7);
    }
  }
// ***** VDMTOOLS END Name=addInherit


// ***** VDMTOOLS START Name=getInherit KEEP=NO
  public String getInherit (final String pkey) throws CGException {

    if (!this.pre_getInherit(pkey).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getInherit");
    return UTIL.ConvertToString(inherit.get(pkey));
  }
// ***** VDMTOOLS END Name=getInherit


// ***** VDMTOOLS START Name=pre_getInherit KEEP=NO
  public Boolean pre_getInherit (final String pkey) throws CGException {
    return hasInherit(pkey);
  }
// ***** VDMTOOLS END Name=pre_getInherit


// ***** VDMTOOLS START Name=getInheritPrefix KEEP=NO
  public String getInheritPrefix (final String pkey) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = getPrefix().concat(getInherit(pkey));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getInheritPrefix


// ***** VDMTOOLS START Name=hasInherit KEEP=NO
  public Boolean hasInherit (final String pkey) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(inherit.containsKey(pkey));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=hasInherit


// ***** VDMTOOLS START Name=setPrefix KEEP=NO
  public void setPrefix (final String pstr) throws CGException {
    prefix = UTIL.ConvertToString(UTIL.clone(pstr));
  }
// ***** VDMTOOLS END Name=setPrefix


// ***** VDMTOOLS START Name=getPrefix KEEP=NO
  public String getPrefix () throws CGException {
    return prefix;
  }
// ***** VDMTOOLS END Name=getPrefix


// ***** VDMTOOLS START Name=setPackage KEEP=NO
  public void setPackage (final Vector psstr) throws CGException {
    vdm_package = (Vector) UTIL.ConvertToList(UTIL.clone(psstr));
  }
// ***** VDMTOOLS END Name=setPackage


// ***** VDMTOOLS START Name=getRawPackage KEEP=NO
  public Vector getRawPackage () throws CGException {
    return vdm_package;
  }
// ***** VDMTOOLS END Name=getRawPackage


// ***** VDMTOOLS START Name=getPackage KEEP=NO
  public String getPackage () throws CGException {

    String str = UTIL.ConvertToString(new String());
    {

      String pstr = null;
      for (Iterator enm_15 = vdm_package.iterator(); enm_15.hasNext(); ) {

        String elem_2 = UTIL.ConvertToString(enm_15.next());
        pstr = elem_2;
        if (new Boolean(UTIL.equals(str, new Vector())).booleanValue()) 
          str = UTIL.ConvertToString(UTIL.clone(pstr));
        else {

          String rhs_8 = null;
          String var1_9 = null;
          var1_9 = str.concat(new String("."));
          rhs_8 = var1_9.concat(pstr);
          str = UTIL.ConvertToString(UTIL.clone(rhs_8));
        }
      }
    }
    return str;
  }
// ***** VDMTOOLS END Name=getPackage


// ***** VDMTOOLS START Name=setDirectory KEEP=NO
  public void setDirectory (final String pdir) throws CGException {
    directory = UTIL.ConvertToString(UTIL.clone(pdir));
  }
// ***** VDMTOOLS END Name=setDirectory


// ***** VDMTOOLS START Name=getDirectory KEEP=NO
  public String getDirectory () throws CGException {
    return directory;
  }
// ***** VDMTOOLS END Name=getDirectory


// ***** VDMTOOLS START Name=getShorthands KEEP=NO
  public HashSet getShorthands () throws CGException {

    HashSet rexpr_1 = new HashSet();
    rexpr_1.clear();
    rexpr_1.addAll(shorthands.keySet());
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=getShorthands


// ***** VDMTOOLS START Name=getUnionShorthands KEEP=NO
  public HashSet getUnionShorthands () throws CGException {

    HashSet rexpr_1 = new HashSet();
    HashSet res_s_2 = new HashSet();
    {

      HashSet e_set_10 = new HashSet();
      e_set_10.clear();
      e_set_10.addAll(shorthands.keySet());
      String id = null;
      {
        for (Iterator enm_13 = e_set_10.iterator(); enm_13.hasNext(); ) {

          String elem_12 = UTIL.ConvertToString(enm_13.next());
          id = elem_12;
          Boolean pred_4 = null;
          AstType obj_5 = null;
          AstShorthand obj_6 = null;
          obj_6 = (AstShorthand) (AstShorthand) shorthands.get(id);
          obj_5 = (AstType) obj_6.getType();
          pred_4 = obj_5.isUnionType();
          if (pred_4.booleanValue()) {
            res_s_2.add(id);
          }
        }
      }
    }
    rexpr_1 = res_s_2;
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=getUnionShorthands


// ***** VDMTOOLS START Name=getShorthand KEEP=NO
  public AstShorthand getShorthand (final String pshnm) throws CGException {

    if (!this.pre_getShorthand(pshnm).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getShorthand");
    return (AstShorthand) (AstShorthand) shorthands.get(pshnm);
  }
// ***** VDMTOOLS END Name=getShorthand


// ***** VDMTOOLS START Name=pre_getShorthand KEEP=NO
  public Boolean pre_getShorthand (final String pshnm) throws CGException {
    return isShorthand(pshnm);
  }
// ***** VDMTOOLS END Name=pre_getShorthand


// ***** VDMTOOLS START Name=isShorthand KEEP=NO
  public Boolean isShorthand (final String pshnm) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(shorthands.containsKey(pshnm));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=isShorthand


// ***** VDMTOOLS START Name=getComposites KEEP=NO
  public HashSet getComposites () throws CGException {

    HashSet rexpr_1 = new HashSet();
    rexpr_1.clear();
    rexpr_1.addAll(composites.keySet());
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=getComposites


// ***** VDMTOOLS START Name=getComposite KEEP=NO
  public AstComposite getComposite (final String pcpnm) throws CGException {

    if (!this.pre_getComposite(pcpnm).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getComposite");
    return (AstComposite) (AstComposite) composites.get(pcpnm);
  }
// ***** VDMTOOLS END Name=getComposite


// ***** VDMTOOLS START Name=pre_getComposite KEEP=NO
  public Boolean pre_getComposite (final String pcpnm) throws CGException {
    return isComposite(pcpnm);
  }
// ***** VDMTOOLS END Name=pre_getComposite


// ***** VDMTOOLS START Name=isComposite KEEP=NO
  public Boolean isComposite (final String pcpnm) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(composites.containsKey(pcpnm));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=isComposite


// ***** VDMTOOLS START Name=setTop KEEP=NO
  public void setTop (final Vector ptop) throws CGException {
    top = (Vector) UTIL.ConvertToList(UTIL.clone(ptop));
  }
// ***** VDMTOOLS END Name=setTop


// ***** VDMTOOLS START Name=getTop KEEP=NO
  public Vector getTop () throws CGException {
    return top;
  }
// ***** VDMTOOLS END Name=getTop


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final AstVisitor pv) throws CGException {
    pv.visit((AstDefinitions) this);
  }
// ***** VDMTOOLS END Name=accept

}
;
