\begin{vdm_al}
class wfCheckVisitor is subclass of AstVisitor

values
  keywords : set of seq of char = 
    { -- VDM++ reserved words
      "abs", "all", "always", "and", "atomic", "async",
	  "be", "bool", "by", "card", "cases", "char", "class",
	  "comp", "compose", "conc", "cycles", "dcl", "def",
	  "dinter", "div", "do", "dom", "dunion", "duration",
	  "elems", "else", "elseif", "end", "error", "errs",
	  "exists", "exists1", "exit", "ext", "false", "floor",
	  "for", "forall", "from", "functions", "hd", "if",
	  "in", "inds", "inmap", "instance", "int", "inter",
	  "inv", "inverse", "iota", "is", "is_", "isofbaseclass",
	  "isofclass", "lambda", "len", "let", "map", "merge",
	  "mk_", "mod", "mu", "munion", "mutex", "nat", "nat1",
	  "new", "nil", "not", "of", "operations", "or", "others",
	  "per", "periodic", "post", "power", "pre", "pre_",
	  "private", "protected", "psubset", "public", "rat",
	  "rd", "real", "rem", "responsibility", "return",
	  "reverse", "rng", "samebaseclass", "sameclass",
	  "self", "seq", "seq1", "set", "skip", "specified",
	  "st", "start", "startlist", "static", "subclass",
	  "subset", "sync", "system", "then", "thread",
	  "threadid", "time", "tixe", "tl", "to", "token",
	  "trap", "true", "types", "undefined", "union",
	  "values", "variables", "while", "with", "wr", "yet",
	  -- other reserved words we rather don't see
	  "Node", "Visitor", "ContextInfo", "Token", "Document",
	  "Lexem" };
    
instance variables
  static public errors : nat := 0;
  ad : [AstDefinitions] := nil;
  use_adt : bool := false
    
operations
  public printError: seq of char ==> ()
  printError(-) == errors := errors + 1;

  public elabShorthand: AstShorthand ==> ()
  elabShorthand (ash) ==
    def tp = ash.getType() in
      ash.setType(elabShType(tp,tp.isUnionType()) );

  public elabComposite: AstComposite ==> ()
  elabComposite (acmp) ==
    for field in acmp.getFields() do
      elabField (field);
      
  public elabField: AstField ==> ()
  elabField (afld) ==
    def tp = afld.getType() in
      afld.setType(elabCmpType(tp));    
  
  public elabShType: AstType * bool ==> AstType
  elabShType (tp, inu) ==
    if tp.isTypeName()
    then ( dcl atn : AstTypeName := tp;
           def name = atn.getName() in
           if name in set {"Pattern","Bind"} or
              name in set ad.getComposites()
           then return tp
           else if name in set ad.getShorthands()
           then def nshtp = ad.getShorthand(name).getType() in
                  if inu
                  then return elabShType(nshtp,inu)
                  else return tp
           else printError("Undefined name \"" ^name^ "\" in shorthand");
           return tp )
    else if tp.isUnionType()
    then ( dcl aut : AstUnionType := tp;
           return new AstUnionType(elabShType(aut.getLhs(),true),elabShType(aut.getRhs(),true)) )
    else if tp.isSeqType()
    then ( dcl ast : AstSeqOfType := tp;
           return new AstSeqOfType(elabShType(ast.getType(),false)) )
    else if tp.isSetType()
    then ( dcl ast : AstSetOfType := tp;
           return new AstSetOfType(elabShType(ast.getType(),false)) )
    else if tp.isOptionalType()
    then ( dcl aot : AstOptionalType := tp;
           return new AstOptionalType(elabShType(aot.getType(),false)) )
    else if tp.isMapType()
    then ( dcl amt : AstMapType := tp;
           return new AstMapType(elabShType(amt.getDomType(),false),elabShType(amt.getRngType(),false)) )
    else return tp;
  
  public elabCmpType: AstType ==> AstType
  elabCmpType (tp) ==
    if tp.isTypeName()
    then ( dcl atn : AstTypeName := tp;
           def name = atn.getName() in
           if name in set ad.getComposites()
           then return tp
           else if name in set ad.getShorthands()
                then def nshtp = ad.getShorthand(name).getType() in
                       if nshtp.isUnionType()
                       then return tp
                       else elabCmpType(nshtp)
                else printError("Undefined name \"" ^name^ "\" in composite");
                return tp )
    else if tp.isUnionType()
    then ( dcl aut : AstUnionType := tp;
           return new AstUnionType(elabCmpType(aut.getLhs()),elabCmpType(aut.getRhs())) )
    else if tp.isSeqType()
    then ( dcl ast : AstSeqOfType := tp;
           return new AstSeqOfType(elabCmpType(ast.getType())) )
    else if tp.isSetType()
    then ( dcl ast : AstSetOfType := tp;
           return new AstSetOfType(elabCmpType(ast.getType())) )
    else if tp.isOptionalType()
    then ( dcl aot : AstOptionalType := tp;
           return new AstOptionalType(elabCmpType(aot.getType())) )
    else if tp.isMapType()
    then ( dcl amt : AstMapType := tp;
           return new AstMapType(elabCmpType(amt.getDomType()),elabCmpType(amt.getRngType())) )
    else return tp;
               
  public wfComposite: AstComposite ==> ()
  wfComposite (acmp) ==
    ( use_adt := false;
      for field in acmp.getFields() do
        def cname = acmp.getName() in
        def fname = field.getRawName() in
          if fname in set keywords
          then printError("Composite field name in \"" ^cname^"::"^fname^ "\" is a reserved word")
          else wfCmpField(cname,field);
      acmp.setAdts(use_adt) );
  
  public wfCmpField: seq of char * AstField ==> ()
  wfCmpField (acmpnm, afld) == wfCmpType(acmpnm, afld.getName(), afld.getType());
  
  public wfCmpType: seq of char * seq of char * AstType ==> ()
  wfCmpType (acmpnm, afldnm, atp) ==
    if atp.isTypeName()
    then wfCmpTypeName(acmpnm, afldnm, atp)
    else if atp.isQuotedType()
    then printError ("Quoted types not allowed in \"" ^acmpnm^ "::" ^afldnm^ "\"")
    else if atp.isUnionType()
    then printError ("Union types not allowed in \"" ^acmpnm^ "::" ^afldnm^ "\"")
    else if atp.isSeqType()
    then ( use_adt := true; wfCmpSeqType(acmpnm, afldnm, atp) )
    else if atp.isSetType()
    then ( use_adt := true; wfCmpSetType(acmpnm, afldnm, atp) )
    else if atp.isOptionalType()
    then wfCmpOptType(acmpnm, afldnm, atp)
    else if atp.isMapType()
    then ( use_adt := true; wfCmpMapType(acmpnm, afldnm, atp));
    
  public wfCmpTypeName: seq of char * seq of char * AstTypeName ==> ()  
  wfCmpTypeName (acmpnm, afldnm, atp) ==
    def atpnm = atp.getName() in
      if not atpnm in set ad.getComposites() union ad.getShorthands()
      then printError ("Type name \"" ^atpnm^ "\" is not defined in \"" ^acmpnm^ "::" ^afldnm^ "\"");

  public wfCmpSeqType: seq of char * seq of char * AstSeqOfType ==> ()  
  wfCmpSeqType (acmpnm, afldnm, atp) ==
    def tp = atp.getType() in
      if tp.isTypeName()
      then wfCmpTypeName(acmpnm, afldnm, tp)
      else if not tp.isBasicType() and not tp.isStringType()
              -- tp.isQuotedType() or tp.isUnionType() or tp.isOptionalType() or 
              -- tp.isSeqType() or tp.isSetType() or tp.isMapType()
      then printError("Type is not allowed in sequence in \"" ^acmpnm^ "::" ^afldnm^ "\"");
      
  public wfCmpSetType: seq of char * seq of char * AstSetOfType ==> ()  
  wfCmpSetType (acmpnm, afldnm, atp) ==
    def tp = atp.getType() in
      if tp.isTypeName()
      then wfCmpTypeName(acmpnm, afldnm, tp)
      else if not tp.isBasicType() and not tp.isStringType()
              -- tp.isQuotedType() or tp.isUnionType() or tp.isOptionalType() or
              -- tp.isSeqType() or tp.isSetType() or tp.isMapType()
      then printError("Type is not allowed in set in \"" ^acmpnm^ "::" ^afldnm^ "\"");
      
  public wfCmpOptType: seq of char * seq of char * AstOptionalType ==> ()  
  wfCmpOptType (acmpnm, afldnm, atp) ==
    def tp = atp.getType() in
      if tp.isTypeName()
      then wfCmpTypeName(acmpnm, afldnm, tp)
      else if not tp.isBasicType() and not tp.isStringType()
      then printError("Type is not allowed in optional type in \"" ^acmpnm^ "::" ^afldnm^ "\"");
      
  public wfCmpMapType: seq of char * seq of char * AstMapType ==> ()  
  wfCmpMapType (acmpnm, afldnm, atp) ==
    ( def tp = atp.getDomType() in
        if tp.isTypeName()
        then wfCmpTypeName(acmpnm, afldnm, tp)
        else if not tp.isBasicType() and not tp.isStringType()
                -- tp.isQuotedType() or tp.isUnionType() or tp.isOptionalType() or tp.isMapType()
             then printError("Type is not allowed in domain of map in \"" ^acmpnm^ "::" ^afldnm^ "\"");
      def tp = atp.getRngType() in
        if tp.isTypeName()
        then wfCmpTypeName(acmpnm, afldnm, tp)
        else if not tp.isBasicType() and not tp.isStringType()
                -- tp.isQuotedType() or tp.isUnionType() or tp.isOptionalType() or tp.isMapType()
             then printError("Type is not allowed in range of map in \"" ^acmpnm^ "::" ^afldnm^ "\"") );
      
  public wfShorthand: AstShorthand ==> ()
  wfShorthand (ash) == wfShType(ash.getName(),ash.getType());
  
  public wfShType: seq of char * AstType ==> ()
  wfShType (sh,atp) ==
    ( if atp.isTypeName()
      then wfShTypeName(sh,atp);
      if atp.isQuotedType()
      then printError ("Quoted type is not allowed in shorthand \"" ^sh^ "\"");
      if atp.isUnionType()
      then wfShUnionType(sh,atp);
      if atp.isSeqType()
      then wfShSeqType(sh,atp);
      if atp.isSetType()
      then wfShSetType(sh,atp);
      if atp.isOptionalType()
      then wfShOptType(sh,atp);
      if atp.isMapType()
      then wfShMapType(sh,atp) );
      
  public wfShTypeName: seq of char * AstTypeName ==> ()
  wfShTypeName (sh,atn) ==
    def name = atn.getName() in
      if name not in set ad.getComposites() and name not in set ad.getShorthands()
      then printError("Unknown composite type \"" ^name^ "\" in shorthand \"" ^sh^ "\"");
                  
  public wfShUnionType: seq of char * AstUnionType ==> ()
  wfShUnionType (sh,aut) == 
    ( def mk_(qtub,-) = aut.isQuotedTypeUnion() in
        if qtub
        then ( ad.getShorthand(sh).setQuotedTypeUnion(); return);
      def mk_(tnub,tnus) = aut.isTypeNameUnion() in
        if tnub
        then ( ad.getShorthand(sh).setTypeNameUnion();
               for all tnu in set tnus do
                 if tnu not in set ad.getComposites() union {"Pattern","Bind"}
                 then printError("Unknown composite type \"" ^tnu^ "\" in shorthand union \"" ^sh^ "\"")
                 else if ad.hasInherit(tnu)
                      then ( def inh = ad.getInherit(tnu) in
                               if inh <> sh
                               then printError("Type \"" ^tnu^ "\" is used in two shorthands, \"" ^sh^ "\" and \"" ^inh^ "\"") )
                      else ad.addInherit(tnu, sh);
               return );
      printError("Illegal (possibly nested) type in shorthand union \"" ^sh^ "\"") );  
  
  public wfShSeqType: seq of char * AstSeqOfType ==> ()
  wfShSeqType (sh,ast) ==
    def tp = ast.getType() in
      if tp.isTypeName()
      then wfShTypeName(sh,tp)
      else if tp.isQuotedType()
      then printError("Quoted type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isUnionType()
      then printError("Union type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isSeqType()
      then printError("Sequence type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isSetType()
      then printError("Set type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isOptionalType()
      then printError("Optional type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isMapType()
      then printError("Map type is not allowed in shorthand sequence \"" ^sh^ "\"");
  
  public wfShSetType: seq of char * AstSetOfType ==> ()
  wfShSetType (sh,ast) ==
    def tp = ast.getType() in
      if tp.isTypeName()
      then wfShTypeName(sh,tp)
      else if tp.isQuotedType()
      then printError("Quoted type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isUnionType()
      then printError("Union type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isSeqType()
      then printError("Sequence type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isSetType()
      then printError("Set type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isOptionalType()
      then printError("Optional type is not allowed in shorthand sequence \"" ^sh^ "\"")
      else if tp.isMapType()
      then printError("Map type is not allowed in shorthand sequence \"" ^sh^ "\"");
  
  public wfShOptType: seq of char * AstOptionalType ==> ()
  wfShOptType (sh,aot) ==
    def tp = aot.getType() in
      if tp.isTypeName()
      then wfShTypeName(sh,tp)
      else if tp.isQuotedType()
      then printError("Quoted type is not allowed in shorthand optional type \"" ^sh^ "\"")
      else if tp.isUnionType()
      then printError("Union type is not allowed in shorthand optional type \"" ^sh^ "\"")
      else if tp.isSeqType() or tp.isStringType()
      then printError("Sequence type is not allowed in shorthand optional type \"" ^sh^ "\"")
      else if tp.isSetType()
      then printError("Set type is not allowed in shorthand optional type \"" ^sh^ "\"")
      else if tp.isOptionalType()
      then printError("Optional type is not allowed in shorthand optional type \"" ^sh^ "\"")
      else if tp.isMapType()
      then printError("Map type is not allowed in shorthand optional \"" ^sh^ "\"");
  
  public wfShMapType: seq of char * AstMapType ==> ()
  wfShMapType (sh,amt) ==
    def tp1 = amt.getDomType() in
    def tp2 = amt.getRngType() in
      ( if tp1.isBasicType() or tp1.isStringType()
        then skip
        else if tp1.isTypeName()
        then wfShTypeName(sh,tp1)
        else printError ("Type not allowed in domain of map in shorthand \"" ^sh^ "\"");
        if tp2.isBasicType() or tp2.isStringType()
        then skip
        else if tp2.isTypeName()
        then wfShTypeName(sh,tp2)
        else printError ("Type not allowed in range of map in shorthand \"" ^sh^ "\"") );
  
  public visit : AstDefinitions ==> ()
  visit (pad) ==
    ( dcl names : set of seq of char := {};
      -- store the definitions
      ad := pad;
      -- check the composite type names
      for all name in set ad.getComposites() do
        if name in set keywords
        then printError("Composite type \"" ^name^ "\" is a reserved word")
        else if name in set names
             then printError("Composite type \"" ^name^ "\" is defined more than once")
             else names := names union {name};
      -- check the shorthand type names
      for all name in set ad.getShorthands() do
        if name in set keywords
        then printError("Composite type \"" ^name^ "\" is a reserved word")
        else if name in set names
             then printError("Shorthand type \"" ^name^ "\" is defined more than once")
             else names := names union {name};
      -- check for top-level entries
      def topnames = ad.getTop() in
        if topnames = []
        then printError("no top-level entry specification")
        else for name in topnames do
             if name not in set names
             then printError("top-level entry \""  ^name^ "\" does not exist!");
      -- elaborate the shorthand types
      for all sh in set ad.getShorthands() do
        elabShorthand(ad.getShorthand(sh));
      -- check the shorthand types
      for all sh in set ad.getShorthands() do
        wfShorthand(ad.getShorthand(sh));
      -- elaborate the composite types
      for all composite in set ad.getComposites() do
        elabComposite(ad.getComposite(composite));
      -- check the composite types
      for all composite in set ad.getComposites() do
        wfComposite(ad.getComposite(composite)) );
  
  public visit : AstShorthand ==> ()
  visit (ash) == skip;
  
  public visit : AstComposite ==> ()
  visit (ac) == skip;
    
  public visit : AstField ==> ()
  visit (af) == skip;
  
  public visit : AstTypeName ==> ()
  visit (asn) == skip;
  
  public visit : AstQuotedType ==> ()
  visit (aqt) == skip;
  
  public visit : AstUnionType ==> ()
  visit (aut) == skip; 
  
  public visit : AstSeqOfType ==> ()
  visit (asot) == skip;
  
  public visit : AstOptionalType ==> ()
  visit (aopt) == skip;
  
  public visit : AstMapType ==> ()
  visit (amt) == skip
  
end wfCheckVisitor
\end{vdm_al}
