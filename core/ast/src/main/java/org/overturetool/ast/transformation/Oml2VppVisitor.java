//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2009-10-20 by the VDM++ to JAVA Code Generator
// (v8.2.1b - Wed 15-Jul-2009 14:09:22)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.ast.transformation;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;

import org.overturetool.ast.imp.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



@SuppressWarnings("all")
public class Oml2VppVisitor extends OmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=result KEEP=NO
  public String result = null;
// ***** VDMTOOLS END Name=result

// ***** VDMTOOLS START Name=lvl KEEP=NO
  private Long lvl = null;
// ***** VDMTOOLS END Name=lvl

// ***** VDMTOOLS START Name=nl KEEP=NO
  private String nl = null;
// ***** VDMTOOLS END Name=nl


// ***** VDMTOOLS START Name=vdm_init_Oml2VppVisitor KEEP=NO
  private void vdm_init_Oml2VppVisitor () throws CGException {
    try {

      result = UTIL.ConvertToString(new String());
      lvl = new Long(0);
      nl = new String("");
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Oml2VppVisitor


// ***** VDMTOOLS START Name=Oml2VppVisitor KEEP=NO
  public Oml2VppVisitor () throws CGException {
    vdm_init_Oml2VppVisitor();
  }
// ***** VDMTOOLS END Name=Oml2VppVisitor


// ***** VDMTOOLS START Name=useNewLineSeparator#1|Boolean KEEP=NO
  public void useNewLineSeparator (final Boolean useNewLine) throws CGException {
    if (useNewLine.booleanValue()) 
      nl = UTIL.ConvertToString(UTIL.clone(new String("\n")));
    else 
      nl = UTIL.ConvertToString(UTIL.clone(new String("")));
  }
// ***** VDMTOOLS END Name=useNewLineSeparator#1|Boolean


// ***** VDMTOOLS START Name=printNodeField#1|IOmlNode KEEP=NO
  private void printNodeField (final IOmlNode pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=printNodeField#1|IOmlNode


// ***** VDMTOOLS START Name=printBoolField#1|Boolean KEEP=NO
  private void printBoolField (final Boolean pval) throws CGException {

    String rhs_2 = null;
    if (pval.booleanValue()) 
      rhs_2 = new String("true");
    else 
      rhs_2 = new String("false");
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=printBoolField#1|Boolean


// ***** VDMTOOLS START Name=printNatField#1|Long KEEP=NO
  private void printNatField (final Long pval) throws CGException {

    
    result = pval.toString();
  }
// ***** VDMTOOLS END Name=printNatField#1|Long


// ***** VDMTOOLS START Name=printRealField#1|Double KEEP=NO
  private void printRealField (final Double pval) throws CGException {

   result = pval.toString();
  }
// ***** VDMTOOLS END Name=printRealField#1|Double


// ***** VDMTOOLS START Name=printCharField#1|Character KEEP=NO
  private void printCharField (final Character pval) throws CGException {

    String rhs_2 = null;
    rhs_2 = new String();
    rhs_2 = rhs_2 + pval;
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=printCharField#1|Character


// ***** VDMTOOLS START Name=printField#1|Object KEEP=NO
  private void printField (final Object fld) throws CGException {
    if (((fld instanceof Boolean))) 
      printBoolField((Boolean) fld);
    else 
      if (((fld instanceof Character))) 
        printCharField((Character) fld);
      else {
        if ((UTIL.IsInteger(fld) && ((Number) fld).intValue() >= 0)) 
          printNatField(UTIL.NumberToLong(fld));
        else {
          if ((UTIL.IsReal(fld))) 
            printRealField(UTIL.NumberToReal(fld));
          else {

            Boolean cond_6 = null;
            cond_6 = new Boolean(fld instanceof IOmlNode);
            if (cond_6.booleanValue()) 
              printNodeField((IOmlNode) fld);
            else {
              printStringField(UTIL.ConvertToString(fld));
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=printField#1|Object


// ***** VDMTOOLS START Name=printStringField#1|String KEEP=NO
  private void printStringField (final String str) throws CGException {

    String rhs_2 = null;
    String var1_3 = null;
    var1_3 = new String("\"").concat(str);
    rhs_2 = var1_3.concat(new String("\""));
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=printStringField#1|String


// ***** VDMTOOLS START Name=printSeqofField#1|Vector KEEP=NO
  private void printSeqofField (final Vector pval) throws CGException {

    String str = new String("");
    Long cnt = new Long(pval.size());
    while ( ((cnt.intValue()) > (new Long(0).intValue()))){

      Object tmpArg_v_7 = null;
      if ((1 <= new Long(new Long(new Long(pval.size()).intValue() - cnt.intValue()).intValue() + new Long(1).intValue()).intValue()) && (new Long(new Long(new Long(pval.size()).intValue() - cnt.intValue()).intValue() + new Long(1).intValue()).intValue() <= pval.size())) 
        tmpArg_v_7 = pval.get(new Long(new Long(new Long(pval.size()).intValue() - cnt.intValue()).intValue() + new Long(1).intValue()).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      printField(tmpArg_v_7);
      String rhs_15 = null;
      rhs_15 = str.concat(result);
      str = UTIL.ConvertToString(UTIL.clone(rhs_15));
      if (((cnt.intValue()) > (new Long(1).intValue()))) {

        String rhs_21 = null;
        rhs_21 = str.concat(new String(", "));
        str = UTIL.ConvertToString(UTIL.clone(rhs_21));
      }
      cnt = UTIL.NumberToLong(UTIL.clone(new Long(cnt.intValue() - new Long(1).intValue())));
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=printSeqofField#1|Vector


// ***** VDMTOOLS START Name=visitNode#1|IOmlNode KEEP=NO
  public void visitNode (final IOmlNode pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitNode#1|IOmlNode


// ***** VDMTOOLS START Name=visitDocument#1|IOmlDocument KEEP=NO
  public void visitDocument (final IOmlDocument pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var2_4 = null;
    var2_4 = pcmp.getFilename();
    var1_2 = new String("--BEGIN FileName: ").concat(var2_4);
    str = var1_2.concat(nl);
    Boolean cond_6 = null;
    cond_6 = pcmp.hasSpecifications();
    if (cond_6.booleanValue()) {

      IOmlSpecifications tmpArg_v_8 = null;
      tmpArg_v_8 = (IOmlSpecifications) pcmp.getSpecifications();
      visitSpecifications((IOmlSpecifications) tmpArg_v_8);
    }
    String rhs_9 = null;
    String var1_10 = null;
    String var1_11 = null;
    var1_11 = str.concat(result);
    var1_10 = var1_11.concat(new String("--END FileName: "));
    String var2_15 = null;
    var2_15 = pcmp.getFilename();
    rhs_9 = var1_10.concat(var2_15);
    result = UTIL.ConvertToString(UTIL.clone(rhs_9));
  }
// ***** VDMTOOLS END Name=visitDocument#1|IOmlDocument


// ***** VDMTOOLS START Name=visitSpecifications#1|IOmlSpecifications KEEP=NO
  public void visitSpecifications (final IOmlSpecifications pcmp) throws CGException {

    String str = nl;
    {

      Vector sq_2 = null;
      sq_2 = pcmp.getClassList();
      IOmlClass node = null;
      for (Iterator enm_16 = sq_2.iterator(); enm_16.hasNext(); ) {

        IOmlClass elem_3 = (IOmlClass) enm_16.next();
        node = (IOmlClass) elem_3;
        {

          printNodeField((IOmlNode) node);
          String rhs_8 = null;
          String var1_9 = null;
          String var1_10 = null;
          var1_10 = str.concat(nl);
          var1_9 = var1_10.concat(result);
          rhs_8 = var1_9.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_8));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSpecifications#1|IOmlSpecifications


// ***** VDMTOOLS START Name=visitClass#1|IOmlClass KEEP=NO
  public void visitClass (final IOmlClass pcmp) throws CGException {

    String str = null;
    String var2_3 = null;
    var2_3 = pcmp.getIdentifier();
    str = new String("class ").concat(var2_3);
    Boolean cond_4 = null;
    cond_4 = pcmp.hasInheritanceClause();
    if (cond_4.booleanValue()) {

      IOmlInheritanceClause tmpArg_v_7 = null;
      tmpArg_v_7 = (IOmlInheritanceClause) pcmp.getInheritanceClause();
      printNodeField((IOmlNode) tmpArg_v_7);
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    String rhs_8 = null;
    String var1_9 = null;
    var1_9 = str.concat(result);
    rhs_8 = var1_9.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_8));
    {

      Vector sq_13 = null;
      sq_13 = pcmp.getClassBody();
      IOmlDefinitionBlock db = null;
      for (Iterator enm_25 = sq_13.iterator(); enm_25.hasNext(); ) {

        IOmlDefinitionBlock elem_14 = (IOmlDefinitionBlock) enm_25.next();
        db = (IOmlDefinitionBlock) elem_14;
        {

          printNodeField((IOmlNode) db);
          String rhs_19 = null;
          String var1_20 = null;
          var1_20 = str.concat(nl);
          rhs_19 = var1_20.concat(result);
          str = UTIL.ConvertToString(UTIL.clone(rhs_19));
        }
      }
    }
    String rhs_26 = null;
    String var1_27 = null;
    String var1_28 = null;
    var1_28 = str.concat(nl);
    var1_27 = var1_28.concat(new String("end "));
    String var2_32 = null;
    var2_32 = pcmp.getIdentifier();
    rhs_26 = var1_27.concat(var2_32);
    result = UTIL.ConvertToString(UTIL.clone(rhs_26));
  }
// ***** VDMTOOLS END Name=visitClass#1|IOmlClass


// ***** VDMTOOLS START Name=visitInheritanceClause#1|IOmlInheritanceClause KEEP=NO
  public void visitInheritanceClause (final IOmlInheritanceClause pcmp) throws CGException {

    String str = new String(" is subclass of ");
    Vector list = null;
    list = pcmp.getIdentifierList();
    Long length = new Long(list.size());
    Long i = new Long(1);
    while ( ((i.intValue()) <= (length.intValue()))){

      String rhs_6 = null;
      String var2_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
        var2_8 = UTIL.ConvertToString(list.get(i.intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      rhs_6 = str.concat(var2_8);
      str = UTIL.ConvertToString(UTIL.clone(rhs_6));
      i = UTIL.NumberToLong(UTIL.clone(new Long(i.intValue() + new Long(1).intValue())));
      if (((i.intValue()) <= (length.intValue()))) {

        String rhs_17 = null;
        rhs_17 = str.concat(new String(" ,"));
        str = UTIL.ConvertToString(UTIL.clone(rhs_17));
      }
    }
    String rhs_20 = null;
    rhs_20 = str.concat(nl);
    result = UTIL.ConvertToString(UTIL.clone(rhs_20));
  }
// ***** VDMTOOLS END Name=visitInheritanceClause#1|IOmlInheritanceClause


// ***** VDMTOOLS START Name=visitValueDefinitions#1|IOmlValueDefinitions KEEP=NO
  public void visitValueDefinitions (final IOmlValueDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = nl.concat(new String("values"));
    str = var1_2.concat(nl);
    {

      Vector sq_6 = null;
      sq_6 = pcmp.getValueList();
      IOmlValueDefinition db = null;
      for (Iterator enm_18 = sq_6.iterator(); enm_18.hasNext(); ) {

        IOmlValueDefinition elem_7 = (IOmlValueDefinition) enm_18.next();
        db = (IOmlValueDefinition) elem_7;
        {

          printNodeField((IOmlNode) db);
          String rhs_12 = null;
          String var1_13 = null;
          var1_13 = str.concat(result);
          rhs_12 = var1_13.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_12));
        }
      }
    }
    Boolean cond_19 = null;
    Long var1_20 = null;
    Vector unArg_21 = null;
    unArg_21 = pcmp.getValueList();
    var1_20 = new Long(unArg_21.size());
    cond_19 = new Boolean(var1_20.intValue() == new Long(0).intValue());
    if (cond_19.booleanValue()) 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    else 
      result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitValueDefinitions#1|IOmlValueDefinitions


// ***** VDMTOOLS START Name=visitValueDefinition#1|IOmlValueDefinition KEEP=NO
  public void visitValueDefinition (final IOmlValueDefinition pcmp) throws CGException {

    String str = null;
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    str = UTIL.ConvertToString(UTIL.clone(result));
    IOmlValueShape tmpArg_v_6 = null;
    tmpArg_v_6 = (IOmlValueShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_6);
    String rhs_7 = null;
    String var1_8 = null;
    String var1_9 = null;
    var1_9 = str.concat(result);
    var1_8 = var1_9.concat(new String(";"));
    rhs_7 = var1_8.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitValueDefinition#1|IOmlValueDefinition


// ***** VDMTOOLS START Name=visitAccessDefinition#1|IOmlAccessDefinition KEEP=NO
  public void visitAccessDefinition (final IOmlAccessDefinition pcmp) throws CGException {

    String str = new String("");
    Boolean cond_2 = null;
    cond_2 = pcmp.getStaticAccess();
    if (cond_2.booleanValue()) 
      str = UTIL.ConvertToString(UTIL.clone(new String(" static ")));
    IOmlScope tmpArg_v_5 = null;
    tmpArg_v_5 = (IOmlScope) pcmp.getScope();
    printNodeField((IOmlNode) tmpArg_v_5);
    String rhs_6 = null;
    String var1_7 = null;
    var1_7 = str.concat(result);
    rhs_6 = var1_7.concat(new String(" "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_6));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitAccessDefinition#1|IOmlAccessDefinition


// ***** VDMTOOLS START Name=visitScope#1|IOmlScope KEEP=NO
  public void visitScope (final IOmlScope pNode) throws CGException {

    Long selRes_3 = null;
    selRes_3 = pNode.getValue();
    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQPUBLIC)) 
        succ_2 = false;
      if (succ_2) 
        result = UTIL.ConvertToString(UTIL.clone(new String("public")));
      else {

        succ_2 = true;
        if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQPRIVATE)) 
          succ_2 = false;
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQDEFAULT)) 
            succ_2 = false;
        }
        if (succ_2) 
          result = UTIL.ConvertToString(UTIL.clone(new String("private")));
        else {

          succ_2 = true;
          if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQPROTECTED)) 
            succ_2 = false;
          if (succ_2) 
            result = UTIL.ConvertToString(UTIL.clone(new String("protected")));
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=visitScope#1|IOmlScope


// ***** VDMTOOLS START Name=visitValueShape#1|IOmlValueShape KEEP=NO
  public void visitValueShape (final IOmlValueShape pcmp) throws CGException {

    String str = null;
    IOmlPattern tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlPattern) pcmp.getPattern();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = result.concat(new String(" "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Boolean cond_7 = null;
    cond_7 = pcmp.hasType();
    if (cond_7.booleanValue()) {

      IOmlType tmpArg_v_10 = null;
      tmpArg_v_10 = (IOmlType) pcmp.getType();
      printNodeField((IOmlNode) tmpArg_v_10);
      String rhs_11 = null;
      String var1_12 = null;
      String var1_13 = null;
      var1_13 = str.concat(new String(":"));
      var1_12 = var1_13.concat(result);
      rhs_11 = var1_12.concat(new String(" "));
      str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    IOmlExpression tmpArg_v_19 = null;
    tmpArg_v_19 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_19);
    String rhs_20 = null;
    String var1_21 = null;
    String var1_22 = null;
    var1_22 = str.concat(new String("="));
    var1_21 = var1_22.concat(result);
    rhs_20 = var1_21.concat(new String(" "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_20));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitValueShape#1|IOmlValueShape


// ***** VDMTOOLS START Name=visitPattern#1|IOmlPattern KEEP=NO
  public void visitPattern (final IOmlPattern pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitPattern#1|IOmlPattern


// ***** VDMTOOLS START Name=visitExpression#1|IOmlExpression KEEP=NO
  public void visitExpression (final IOmlExpression pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=visitBinaryExpression#1|IOmlBinaryExpression KEEP=NO
  public void visitBinaryExpression (final IOmlBinaryExpression pcmp) throws CGException {

    String str = new String("");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getLhsExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlBinaryOperator tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlBinaryOperator) pcmp.getOperator();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    IOmlExpression tmpArg_v_13 = null;
    tmpArg_v_13 = (IOmlExpression) pcmp.getRhsExpression();
    printNodeField((IOmlNode) tmpArg_v_13);
    String rhs_14 = null;
    String var1_15 = null;
    var1_15 = str.concat(result);
    rhs_14 = var1_15.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_14));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitBinaryExpression#1|IOmlBinaryExpression


// ***** VDMTOOLS START Name=visitUnaryExpression#1|IOmlUnaryExpression KEEP=NO
  public void visitUnaryExpression (final IOmlUnaryExpression pcmp) throws CGException {

    String str = new String("");
    IOmlUnaryOperator tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlUnaryOperator) pcmp.getOperator();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    String var1_10 = null;
    var1_10 = str.concat(result);
    rhs_9 = var1_10.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitUnaryExpression#1|IOmlUnaryExpression


// ***** VDMTOOLS START Name=visitBinaryOperator#1|IOmlBinaryOperator KEEP=NO
  public void visitBinaryOperator (final IOmlBinaryOperator pNode) throws CGException {

    String rhs_2 = null;
    Long selRes_4 = null;
    selRes_4 = pNode.getValue();
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMODIFY)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("++");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQGE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(">=");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQLT)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("<");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQPSUBSET)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" psubset ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMOD)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" mod ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMAPDOMRESBY)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("<-:");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQINTER)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" inter ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQCOMP)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" comp ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMINUS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("-");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQREM)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" rem ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQAND)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" and ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQUNION)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" union ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQINSET)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" in set ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQEQUIV)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("<=>");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMAPRNGRESTO)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(":>");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQITERATE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("**");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQSUBSET)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" subset ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMAPRNGRESBY)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(":->");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQTUPSEL)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("#.");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQNOTINSET)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" not in set ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMULTIPLY)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("*");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQIMPLY)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("=>");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQOR)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" or ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQGT)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(">");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQPLUS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("+");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMUNION)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" munion ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQMAPDOMRESTO)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("<:");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQEQ)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("=");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQDIV)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String(" div ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQDIFFERENCE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("-");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQCONC)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("^");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQLE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("<=");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQDIVIDE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("/");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlBinaryOperatorQuotes.IQNE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("<>");
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=visitBinaryOperator#1|IOmlBinaryOperator


// ***** VDMTOOLS START Name=visitUnaryOperator#1|IOmlUnaryOperator KEEP=NO
  public void visitUnaryOperator (final IOmlUnaryOperator pNode) throws CGException {

    String rhs_2 = null;
    Long selRes_4 = null;
    selRes_4 = pNode.getValue();
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQABS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("abs ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQINVERSE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("inverse ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQHD)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("hd ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQELEMS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("elems ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQINDS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("inds ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQTL)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("tl ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQCARD)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("card ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQDUNION)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("dunion ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQPOWER)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("power ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQLEN)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("len ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQPLUS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("+");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQDOM)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("dom ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQDMERGE)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("merge ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQDINTER)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("dinter ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQNOT)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("not ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQMINUS)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("-");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQRNG)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("rng ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQFLOOR)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("floor ");
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(selRes_4, OmlUnaryOperatorQuotes.IQDCONC)) 
        succ_3 = false;
      if (succ_3) 
        rhs_2 = new String("conc ");
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:No \'others\' branch in CasesExpr");
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=visitUnaryOperator#1|IOmlUnaryOperator


// ***** VDMTOOLS START Name=visitSetEnumeration#1|IOmlSetEnumeration KEEP=NO
  public void visitSetEnumeration (final IOmlSetEnumeration pcmp) throws CGException {

    String str = new String("{");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("}"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSetEnumeration#1|IOmlSetEnumeration


// ***** VDMTOOLS START Name=visitLetExpression#1|IOmlLetExpression KEEP=NO
  public void visitLetExpression (final IOmlLetExpression pcmp) throws CGException {

    String str = new String("let ");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getDefinitionList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    String var1_6 = null;
    var1_6 = str.concat(result);
    var1_5 = var1_6.concat(nl);
    rhs_4 = var1_5.concat(new String(" in "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_12 = null;
    tmpArg_v_12 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_12);
    String rhs_13 = null;
    String var1_14 = null;
    var1_14 = str.concat(result);
    rhs_13 = var1_14.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_13));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitLetExpression#1|IOmlLetExpression


// ***** VDMTOOLS START Name=visitFieldSelect#1|IOmlFieldSelect KEEP=NO
  public void visitFieldSelect (final IOmlFieldSelect pcmp) throws CGException {

    String str = new String("");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("."));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlName tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitFieldSelect#1|IOmlFieldSelect


// ***** VDMTOOLS START Name=visitApplyExpression#1|IOmlApplyExpression KEEP=NO
  public void visitApplyExpression (final IOmlApplyExpression pcmp) throws CGException {

    String str = new String("");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Vector tmpArg_v_10 = null;
    tmpArg_v_10 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitApplyExpression#1|IOmlApplyExpression


// ***** VDMTOOLS START Name=visitTupleConstructor#1|IOmlTupleConstructor KEEP=NO
  public void visitTupleConstructor (final IOmlTupleConstructor pcmp) throws CGException {

    String str = new String("mk_(");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTupleConstructor#1|IOmlTupleConstructor


// ***** VDMTOOLS START Name=visitRecordConstructor#1|IOmlRecordConstructor KEEP=NO
  public void visitRecordConstructor (final IOmlRecordConstructor pcmp) throws CGException {

    String str = new String("mk_");
    IOmlName tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Vector tmpArg_v_10 = null;
    tmpArg_v_10 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitRecordConstructor#1|IOmlRecordConstructor


// ***** VDMTOOLS START Name=visitTokenExpression#1|IOmlTokenExpression KEEP=NO
  public void visitTokenExpression (final IOmlTokenExpression pcmp) throws CGException {

    String str = new String("mk_token(");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTokenExpression#1|IOmlTokenExpression


// ***** VDMTOOLS START Name=visitLiteral#1|IOmlLiteral KEEP=NO
  public void visitLiteral (final IOmlLiteral pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitLiteral#1|IOmlLiteral


// ***** VDMTOOLS START Name=visitType#1|IOmlType KEEP=NO
  public void visitType (final IOmlType pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitType#1|IOmlType


// ***** VDMTOOLS START Name=visitPatternIdentifier#1|IOmlPatternIdentifier KEEP=NO
  public void visitPatternIdentifier (final IOmlPatternIdentifier pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = pcmp.getIdentifier();
    str = var1_2.concat(new String(" "));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitPatternIdentifier#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=visitSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression KEEP=NO
  public void visitSymbolicLiteralExpression (final IOmlSymbolicLiteralExpression pcmp) throws CGException {

    String str = new String("");
    IOmlLiteral tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlLiteral) pcmp.getLiteral();
    printNodeField((IOmlNode) tmpArg_v_3);
  }
// ***** VDMTOOLS END Name=visitSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression


// ***** VDMTOOLS START Name=visitTextLiteral#1|IOmlTextLiteral KEEP=NO
  public void visitTextLiteral (final IOmlTextLiteral pcmp) throws CGException {

    String str = null;
    str = pcmp.getVal();
    String rhs_2 = null;
    String var1_3 = null;
    var1_3 = new String("\"").concat(str);
    rhs_2 = var1_3.concat(new String("\""));
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=visitTextLiteral#1|IOmlTextLiteral


// ***** VDMTOOLS START Name=visitCharacterLiteral#1|IOmlCharacterLiteral KEEP=NO
  public void visitCharacterLiteral (final IOmlCharacterLiteral pcmp) throws CGException {

    String str = new String("\'");
    Character tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getVal();
    printCharField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("\'"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitCharacterLiteral#1|IOmlCharacterLiteral


// ***** VDMTOOLS START Name=visitSeq0Type#1|IOmlSeq0Type KEEP=NO
  public void visitSeq0Type (final IOmlSeq0Type pcmp) throws CGException {

    String str = new String("seq of ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSeq0Type#1|IOmlSeq0Type


// ***** VDMTOOLS START Name=visitCharType#1|IOmlCharType KEEP=NO
  public void visitCharType (final IOmlCharType var_1_1) throws CGException {

    String str = new String("char");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitCharType#1|IOmlCharType


// ***** VDMTOOLS START Name=visitInstanceVariableDefinitions#1|IOmlInstanceVariableDefinitions KEEP=NO
  public void visitInstanceVariableDefinitions (final IOmlInstanceVariableDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("instance variables"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getVariablesList();
      IOmlInstanceVariableShape db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlInstanceVariableShape elem_9 = (IOmlInstanceVariableShape) enm_20.next();
        db = (IOmlInstanceVariableShape) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    Boolean cond_21 = null;
    Long var1_22 = null;
    Vector unArg_23 = null;
    unArg_23 = pcmp.getVariablesList();
    var1_22 = new Long(unArg_23.size());
    cond_21 = new Boolean(var1_22.intValue() == new Long(0).intValue());
    if (cond_21.booleanValue()) 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    else 
      result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitInstanceVariableDefinitions#1|IOmlInstanceVariableDefinitions


// ***** VDMTOOLS START Name=visitInstanceVariable#1|IOmlInstanceVariable KEEP=NO
  public void visitInstanceVariable (final IOmlInstanceVariable pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlAssignmentDefinition tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlAssignmentDefinition) pcmp.getAssignmentDefinition();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitInstanceVariable#1|IOmlInstanceVariable


// ***** VDMTOOLS START Name=visitAssignmentDefinition#1|IOmlAssignmentDefinition KEEP=NO
  public void visitAssignmentDefinition (final IOmlAssignmentDefinition pcmp) throws CGException {

    String str = new String("");
    String rhs_2 = null;
    String var2_4 = null;
    var2_4 = pcmp.getIdentifier();
    rhs_2 = str.concat(var2_4);
    str = UTIL.ConvertToString(UTIL.clone(rhs_2));
    IOmlType tmpArg_v_6 = null;
    tmpArg_v_6 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_6);
    String rhs_7 = null;
    String var1_8 = null;
    var1_8 = str.concat(new String(" : "));
    rhs_7 = var1_8.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    Boolean cond_12 = null;
    cond_12 = pcmp.hasExpression();
    if (cond_12.booleanValue()) {

      IOmlExpression tmpArg_v_15 = null;
      tmpArg_v_15 = (IOmlExpression) pcmp.getExpression();
      printNodeField((IOmlNode) tmpArg_v_15);
      String rhs_16 = null;
      rhs_16 = str.concat(new String(" := "));
      str = UTIL.ConvertToString(UTIL.clone(rhs_16));
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    String rhs_19 = null;
    String var1_20 = null;
    var1_20 = str.concat(result);
    rhs_19 = var1_20.concat(new String(";"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_19));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitAssignmentDefinition#1|IOmlAssignmentDefinition


// ***** VDMTOOLS START Name=visitTypeName#1|IOmlTypeName KEEP=NO
  public void visitTypeName (final IOmlTypeName pcmp) throws CGException {

    IOmlName tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_3);
  }
// ***** VDMTOOLS END Name=visitTypeName#1|IOmlTypeName


// ***** VDMTOOLS START Name=visitName#1|IOmlName KEEP=NO
  public void visitName (final IOmlName pcmp) throws CGException {

    String str = new String("");
    Boolean cond_2 = null;
    cond_2 = pcmp.hasClassIdentifier();
    if (cond_2.booleanValue()) {

      String rhs_3 = null;
      String var1_4 = null;
      String var2_6 = null;
      var2_6 = pcmp.getClassIdentifier();
      var1_4 = str.concat(var2_6);
      rhs_3 = var1_4.concat(new String("`"));
      str = UTIL.ConvertToString(UTIL.clone(rhs_3));
    }
    String rhs_8 = null;
    String var2_10 = null;
    var2_10 = pcmp.getIdentifier();
    rhs_8 = str.concat(var2_10);
    str = UTIL.ConvertToString(UTIL.clone(rhs_8));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitName#1|IOmlName


// ***** VDMTOOLS START Name=visitIntType#1|IOmlIntType KEEP=NO
  public void visitIntType (final IOmlIntType var_1_1) throws CGException {

    String str = new String("int");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitIntType#1|IOmlIntType


// ***** VDMTOOLS START Name=visitNatType#1|IOmlNatType KEEP=NO
  public void visitNatType (final IOmlNatType var_1_1) throws CGException {

    String str = new String("nat");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNatType#1|IOmlNatType


// ***** VDMTOOLS START Name=visitNat1Type#1|IOmlNat1Type KEEP=NO
  public void visitNat1Type (final IOmlNat1Type var_1_1) throws CGException {

    String str = new String("nat1");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNat1Type#1|IOmlNat1Type


// ***** VDMTOOLS START Name=visitBoolType#1|IOmlBoolType KEEP=NO
  public void visitBoolType (final IOmlBoolType var_1_1) throws CGException {

    String str = new String("bool");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitBoolType#1|IOmlBoolType


// ***** VDMTOOLS START Name=visitSeq1Type#1|IOmlSeq1Type KEEP=NO
  public void visitSeq1Type (final IOmlSeq1Type pcmp) throws CGException {

    String str = new String("seq1 of ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSeq1Type#1|IOmlSeq1Type


// ***** VDMTOOLS START Name=visitRealType#1|IOmlRealType KEEP=NO
  public void visitRealType (final IOmlRealType var_1_1) throws CGException {

    String str = new String("real");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitRealType#1|IOmlRealType


// ***** VDMTOOLS START Name=visitSetType#1|IOmlSetType KEEP=NO
  public void visitSetType (final IOmlSetType pcmp) throws CGException {

    String str = new String("set of ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSetType#1|IOmlSetType


// ***** VDMTOOLS START Name=visitTypeDefinitions#1|IOmlTypeDefinitions KEEP=NO
  public void visitTypeDefinitions (final IOmlTypeDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("types"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getTypeList();
      IOmlTypeDefinition db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlTypeDefinition elem_9 = (IOmlTypeDefinition) enm_20.next();
        db = (IOmlTypeDefinition) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTypeDefinitions#1|IOmlTypeDefinitions


// ***** VDMTOOLS START Name=visitTypeDefinition#1|IOmlTypeDefinition KEEP=NO
  public void visitTypeDefinition (final IOmlTypeDefinition pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlTypeShape tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlTypeShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    String var1_10 = null;
    var1_10 = str.concat(result);
    rhs_9 = var1_10.concat(new String(";"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTypeDefinition#1|IOmlTypeDefinition


// ***** VDMTOOLS START Name=visitSimpleType#1|IOmlSimpleType KEEP=NO
  public void visitSimpleType (final IOmlSimpleType pcmp) throws CGException {

    String str = null;
    str = pcmp.getIdentifier();
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(new String(" = "));
    rhs_4 = var1_5.concat(result);
    result = UTIL.ConvertToString(UTIL.clone(rhs_4));
  }
// ***** VDMTOOLS END Name=visitSimpleType#1|IOmlSimpleType


// ***** VDMTOOLS START Name=visitEmptyType#1|IOmlEmptyType KEEP=NO
  public void visitEmptyType (final IOmlEmptyType var_1_1) throws CGException {

    String str = new String("()");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitEmptyType#1|IOmlEmptyType


// ***** VDMTOOLS START Name=visitNewExpression#1|IOmlNewExpression KEEP=NO
  public void visitNewExpression (final IOmlNewExpression pcmp) throws CGException {

    String str = new String("new ");
    IOmlName tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Vector tmpArg_v_10 = null;
    tmpArg_v_10 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    String var1_13 = null;
    var1_13 = str.concat(result);
    var1_12 = var1_13.concat(new String(")"));
    rhs_11 = var1_12.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNewExpression#1|IOmlNewExpression


// ***** VDMTOOLS START Name=visitIfExpression#1|IOmlIfExpression KEEP=NO
  public void visitIfExpression (final IOmlIfExpression pcmp) throws CGException {

    String str = new String("if ");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getIfExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    String var1_6 = null;
    var1_6 = str.concat(result);
    var1_5 = var1_6.concat(new String(" then "));
    rhs_4 = var1_5.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_12 = null;
    tmpArg_v_12 = (IOmlExpression) pcmp.getThenExpression();
    printNodeField((IOmlNode) tmpArg_v_12);
    String rhs_13 = null;
    String var1_14 = null;
    var1_14 = str.concat(result);
    rhs_13 = var1_14.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_13));
    Vector tmpArg_v_19 = null;
    tmpArg_v_19 = pcmp.getElseifExpressionList();
    printSeqofField(tmpArg_v_19);
    String rhs_20 = null;
    String var1_21 = null;
    var1_21 = str.concat(result);
    rhs_20 = var1_21.concat(new String(" else "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_20));
    IOmlExpression tmpArg_v_26 = null;
    tmpArg_v_26 = (IOmlExpression) pcmp.getElseExpression();
    printNodeField((IOmlNode) tmpArg_v_26);
    String rhs_27 = null;
    rhs_27 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_27));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitIfExpression#1|IOmlIfExpression


// ***** VDMTOOLS START Name=visitElseIfExpression#1|IOmlElseIfExpression KEEP=NO
  public void visitElseIfExpression (final IOmlElseIfExpression pcmp) throws CGException {

    String str = new String(" elseif ");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getElseifExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" then "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getThenExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitElseIfExpression#1|IOmlElseIfExpression


// ***** VDMTOOLS START Name=visitBracketedExpression#1|IOmlBracketedExpression KEEP=NO
  public void visitBracketedExpression (final IOmlBracketedExpression pcmp) throws CGException {

    String str = new String("(");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    String rhs_7 = null;
    rhs_7 = str.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitBracketedExpression#1|IOmlBracketedExpression


// ***** VDMTOOLS START Name=visitNumericLiteral#1|IOmlNumericLiteral KEEP=NO
  public void visitNumericLiteral (final IOmlNumericLiteral pcmp) throws CGException {

    String str = new String("");
    Long tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getVal();
    printNatField(tmpArg_v_3);
    str = UTIL.ConvertToString(UTIL.clone(result));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNumericLiteral#1|IOmlNumericLiteral


// ***** VDMTOOLS START Name=visitRealLiteral#1|IOmlRealLiteral KEEP=NO
  public void visitRealLiteral (final IOmlRealLiteral pcmp) throws CGException {

    String str = new String("");
    Double tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getVal();
    printRealField(tmpArg_v_3);
    str = UTIL.ConvertToString(UTIL.clone(result));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitRealLiteral#1|IOmlRealLiteral


// ***** VDMTOOLS START Name=visitQuoteLiteral#1|IOmlQuoteLiteral KEEP=NO
  public void visitQuoteLiteral (final IOmlQuoteLiteral pcmp) throws CGException {

    String str = new String("<");
    String tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getVal();
    printStringField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    String var2_7 = null;
    int from_11 = (int) Math.max(new Long(2).doubleValue() - 1, 0);
    int to_12 = (int) Math.min(new Long(new Long(result.length()).intValue() - new Long(1).intValue()).doubleValue(), result.length());
    if (from_11 > to_12) 
      var2_7 = new String();
    else 
      var2_7 = new String(result.substring(from_11, to_12));
    var1_5 = str.concat(var2_7);
    rhs_4 = var1_5.concat(new String(">"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitQuoteLiteral#1|IOmlQuoteLiteral


// ***** VDMTOOLS START Name=visitBooleanLiteral#1|IOmlBooleanLiteral KEEP=NO
  public void visitBooleanLiteral (final IOmlBooleanLiteral pcmp) throws CGException {

    String str = new String("");
    Boolean tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getVal();
    printBoolField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = new String(" ").concat(result);
    rhs_4 = var1_5.concat(new String(" "));
    result = UTIL.ConvertToString(UTIL.clone(rhs_4));
  }
// ***** VDMTOOLS END Name=visitBooleanLiteral#1|IOmlBooleanLiteral


// ***** VDMTOOLS START Name=visitNilLiteral#1|IOmlNilLiteral KEEP=NO
  public void visitNilLiteral (final IOmlNilLiteral var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String(" nil ")));
  }
// ***** VDMTOOLS END Name=visitNilLiteral#1|IOmlNilLiteral


// ***** VDMTOOLS START Name=visitOperationDefinitions#1|IOmlOperationDefinitions KEEP=NO
  public void visitOperationDefinitions (final IOmlOperationDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("operations"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getOperationList();
      IOmlOperationDefinition db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlOperationDefinition elem_9 = (IOmlOperationDefinition) enm_20.next();
        db = (IOmlOperationDefinition) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    Boolean cond_21 = null;
    Long var1_22 = null;
    Vector unArg_23 = null;
    unArg_23 = pcmp.getOperationList();
    var1_22 = new Long(unArg_23.size());
    cond_21 = new Boolean((var1_22.intValue()) > (new Long(0).intValue()));
    if (cond_21.booleanValue()) 
      result = UTIL.ConvertToString(UTIL.clone(str));
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
  }
// ***** VDMTOOLS END Name=visitOperationDefinitions#1|IOmlOperationDefinitions


// ***** VDMTOOLS START Name=visitOperationDefinition#1|IOmlOperationDefinition KEEP=NO
  public void visitOperationDefinition (final IOmlOperationDefinition pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlOperationShape tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlOperationShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitOperationDefinition#1|IOmlOperationDefinition


// ***** VDMTOOLS START Name=visitExplicitOperation#1|IOmlExplicitOperation KEEP=NO
  public void visitExplicitOperation (final IOmlExplicitOperation pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = pcmp.getIdentifier();
    str = var1_2.concat(new String(" : "));
    IOmlType tmpArg_v_5 = null;
    tmpArg_v_5 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_5);
    String rhs_6 = null;
    rhs_6 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_6));
    String rhs_9 = null;
    String var1_10 = null;
    String var1_11 = null;
    var1_11 = str.concat(nl);
    String var2_14 = null;
    var2_14 = pcmp.getIdentifier();
    var1_10 = var1_11.concat(var2_14);
    rhs_9 = var1_10.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    Boolean cond_16 = null;
    Long var1_17 = null;
    Vector unArg_18 = null;
    unArg_18 = pcmp.getParameterList();
    var1_17 = new Long(unArg_18.size());
    cond_16 = new Boolean((var1_17.intValue()) > (new Long(0).intValue()));
    if (cond_16.booleanValue()) {

      {

        Vector sq_20 = null;
        sq_20 = pcmp.getParameterList();
        IOmlPattern db = null;
        for (Iterator enm_32 = sq_20.iterator(); enm_32.hasNext(); ) {

          IOmlPattern elem_21 = (IOmlPattern) enm_32.next();
          db = (IOmlPattern) elem_21;
          {

            printNodeField((IOmlNode) db);
            String rhs_26 = null;
            String var1_27 = null;
            var1_27 = str.concat(result);
            rhs_26 = var1_27.concat(new String(", "));
            str = UTIL.ConvertToString(UTIL.clone(rhs_26));
          }
        }
      }
      String rhs_33 = null;
      int from_37 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
      int to_38 = (int) Math.min(new Long(new Long(str.length()).intValue() - new Long(2).intValue()).doubleValue(), str.length());
      if (from_37 > to_38) 
        rhs_33 = new String();
      else 
        rhs_33 = new String(str.substring(from_37, to_38));
      str = UTIL.ConvertToString(UTIL.clone(rhs_33));
    }
    String rhs_47 = null;
    rhs_47 = str.concat(new String(") == "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_47));
    IOmlOperationBody tmpArg_v_51 = null;
    tmpArg_v_51 = (IOmlOperationBody) pcmp.getBody();
    printNodeField((IOmlNode) tmpArg_v_51);
    String rhs_52 = null;
    String var1_53 = null;
    String var1_54 = null;
    var1_54 = str.concat(result);
    var1_53 = var1_54.concat(new String(";"));
    rhs_52 = var1_53.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_52));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitExplicitOperation#1|IOmlExplicitOperation


// ***** VDMTOOLS START Name=visitOperationType#1|IOmlOperationType KEEP=NO
  public void visitOperationType (final IOmlOperationType pcmp) throws CGException {

    String str = new String("");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getDomType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" ==> "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlType tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlType) pcmp.getRngType();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitOperationType#1|IOmlOperationType


// ***** VDMTOOLS START Name=visitOperationBody#1|IOmlOperationBody KEEP=NO
  public void visitOperationBody (final IOmlOperationBody pcmp) throws CGException {

    String str = new String("(");
    Boolean cond_2 = null;
    cond_2 = pcmp.getNotYetSpecified();
    if (cond_2.booleanValue()) {

      result = UTIL.ConvertToString(UTIL.clone(new String("is not yet specified")));
      return;
    }
    else {

      Boolean cond_3 = null;
      cond_3 = pcmp.hasStatement();
      if (cond_3.booleanValue()) {

        IOmlStatement tmpArg_v_6 = null;
        tmpArg_v_6 = (IOmlStatement) pcmp.getStatement();
        printNodeField((IOmlNode) tmpArg_v_6);
      }
      else 
        result = UTIL.ConvertToString(UTIL.clone(new String("")));
      String rhs_7 = null;
      rhs_7 = str.concat(result);
      str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    }
    Boolean cond_11 = null;
    cond_11 = pcmp.getSubclassResponsibility();
    if (cond_11.booleanValue()) {

      result = UTIL.ConvertToString(UTIL.clone(new String("sub class responsibility")));
      return;
    }
    String rhs_13 = null;
    rhs_13 = str.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_13));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitOperationBody#1|IOmlOperationBody


// ***** VDMTOOLS START Name=visitSkipStatement#1|IOmlSkipStatement KEEP=NO
  public void visitSkipStatement (final IOmlSkipStatement var_1_1) throws CGException {

    String str = new String("skip");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSkipStatement#1|IOmlSkipStatement


// ***** VDMTOOLS START Name=visitParameter#1|IOmlParameter KEEP=NO
  public void visitParameter (final IOmlParameter pcmp) throws CGException {

    String str = new String("");
    {

      Vector sq_2 = null;
      sq_2 = pcmp.getPatternList();
      IOmlPattern db = null;
      for (Iterator enm_14 = sq_2.iterator(); enm_14.hasNext(); ) {

        IOmlPattern elem_3 = (IOmlPattern) enm_14.next();
        db = (IOmlPattern) elem_3;
        {

          printNodeField((IOmlNode) db);
          String rhs_8 = null;
          String var1_9 = null;
          var1_9 = str.concat(result);
          rhs_8 = var1_9.concat(new String(", "));
          str = UTIL.ConvertToString(UTIL.clone(rhs_8));
        }
      }
    }
    String rhs_15 = null;
    int from_19 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
    int to_20 = (int) Math.min(new Long(new Long(str.length()).intValue() - new Long(2).intValue()).doubleValue(), str.length());
    if (from_19 > to_20) 
      rhs_15 = new String();
    else 
      rhs_15 = new String(str.substring(from_19, to_20));
    str = UTIL.ConvertToString(UTIL.clone(rhs_15));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitParameter#1|IOmlParameter


// ***** VDMTOOLS START Name=visitFunctionDefinitions#1|IOmlFunctionDefinitions KEEP=NO
  public void visitFunctionDefinitions (final IOmlFunctionDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("functions"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getFunctionList();
      IOmlFunctionDefinition db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlFunctionDefinition elem_9 = (IOmlFunctionDefinition) enm_20.next();
        db = (IOmlFunctionDefinition) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitFunctionDefinitions#1|IOmlFunctionDefinitions


// ***** VDMTOOLS START Name=visitFunctionDefinition#1|IOmlFunctionDefinition KEEP=NO
  public void visitFunctionDefinition (final IOmlFunctionDefinition pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlFunctionShape tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlFunctionShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitFunctionDefinition#1|IOmlFunctionDefinition


// ***** VDMTOOLS START Name=visitExplicitFunction#1|IOmlExplicitFunction KEEP=NO
  public void visitExplicitFunction (final IOmlExplicitFunction pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = pcmp.getIdentifier();
    str = var1_2.concat(new String(" : "));
    Boolean cond_4 = null;
    Long var1_5 = null;
    Vector unArg_6 = null;
    unArg_6 = pcmp.getTypeVariableList();
    var1_5 = new Long(unArg_6.size());
    cond_4 = new Boolean((var1_5.intValue()) > (new Long(0).intValue()));
    if (cond_4.booleanValue()) {

      {

        Vector sq_8 = null;
        sq_8 = pcmp.getTypeVariableList();
        IOmlTypeVariable db = null;
        for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

          IOmlTypeVariable elem_9 = (IOmlTypeVariable) enm_20.next();
          db = (IOmlTypeVariable) elem_9;
          {

            printNodeField((IOmlNode) db);
            String rhs_14 = null;
            String var1_15 = null;
            var1_15 = str.concat(result);
            rhs_14 = var1_15.concat(new String("* "));
            str = UTIL.ConvertToString(UTIL.clone(rhs_14));
          }
        }
      }
      String rhs_21 = null;
      int from_25 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
      int to_26 = (int) Math.min(new Long(new Long(str.length()).intValue() - new Long(2).intValue()).doubleValue(), str.length());
      if (from_25 > to_26) 
        rhs_21 = new String();
      else 
        rhs_21 = new String(str.substring(from_25, to_26));
      str = UTIL.ConvertToString(UTIL.clone(rhs_21));
    }
    IOmlType tmpArg_v_36 = null;
    tmpArg_v_36 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_36);
    String rhs_37 = null;
    rhs_37 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_37));
    String rhs_40 = null;
    String var1_41 = null;
    String var1_42 = null;
    var1_42 = str.concat(nl);
    String var2_45 = null;
    var2_45 = pcmp.getIdentifier();
    var1_41 = var1_42.concat(var2_45);
    rhs_40 = var1_41.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_40));
    {

      Vector sq_47 = null;
      sq_47 = pcmp.getParameterList();
      IOmlParameter db = null;
      for (Iterator enm_59 = sq_47.iterator(); enm_59.hasNext(); ) {

        IOmlParameter elem_48 = (IOmlParameter) enm_59.next();
        db = (IOmlParameter) elem_48;
        {

          printNodeField((IOmlNode) db);
          String rhs_53 = null;
          String var1_54 = null;
          var1_54 = str.concat(result);
          rhs_53 = var1_54.concat(new String(", "));
          str = UTIL.ConvertToString(UTIL.clone(rhs_53));
        }
      }
    }
    String rhs_60 = null;
    int from_64 = (int) Math.max(new Long(1).doubleValue() - 1, 0);
    int to_65 = (int) Math.min(new Long(new Long(str.length()).intValue() - new Long(2).intValue()).doubleValue(), str.length());
    if (from_64 > to_65) 
      rhs_60 = new String();
    else 
      rhs_60 = new String(str.substring(from_64, to_65));
    str = UTIL.ConvertToString(UTIL.clone(rhs_60));
    String rhs_74 = null;
    rhs_74 = str.concat(new String(") == is not yet specified;"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_74));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitExplicitFunction#1|IOmlExplicitFunction


// ***** VDMTOOLS START Name=visitPartialFunctionType#1|IOmlPartialFunctionType KEEP=NO
  public void visitPartialFunctionType (final IOmlPartialFunctionType pcmp) throws CGException {

    String str = new String("");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getDomType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" -> "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlType tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlType) pcmp.getRngType();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitPartialFunctionType#1|IOmlPartialFunctionType


// ***** VDMTOOLS START Name=visitUnionType#1|IOmlUnionType KEEP=NO
  public void visitUnionType (final IOmlUnionType pcmp) throws CGException {

    String str = new String("");
    IOmlType obj_3 = null;
    obj_3 = (IOmlType) pcmp.getLhsType();
    obj_3.accept((IOmlVisitor) this);
    String rhs_5 = null;
    rhs_5 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_5));
    IOmlType obj_9 = null;
    obj_9 = (IOmlType) pcmp.getRhsType();
    obj_9.accept((IOmlVisitor) this);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(new String(" | "));
    rhs_11 = var1_12.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitUnionType#1|IOmlUnionType


// ***** VDMTOOLS START Name=visitProductType#1|IOmlProductType KEEP=NO
  public void visitProductType (final IOmlProductType pcmp) throws CGException {

    String str = new String("");
    IOmlType obj_3 = null;
    obj_3 = (IOmlType) pcmp.getLhsType();
    obj_3.accept((IOmlVisitor) this);
    String rhs_5 = null;
    rhs_5 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_5));
    IOmlType obj_9 = null;
    obj_9 = (IOmlType) pcmp.getRhsType();
    obj_9.accept((IOmlVisitor) this);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(new String(" * "));
    rhs_11 = var1_12.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitProductType#1|IOmlProductType


// ***** VDMTOOLS START Name=visitTraceDefinitions#1|IOmlTraceDefinitions KEEP=NO
  public void visitTraceDefinitions (final IOmlTraceDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("traces"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getTraces();
      IOmlNamedTrace db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlNamedTrace elem_9 = (IOmlNamedTrace) enm_20.next();
        db = (IOmlNamedTrace) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceDefinitions#1|IOmlTraceDefinitions


// ***** VDMTOOLS START Name=visitNamedTrace#1|IOmlNamedTrace KEEP=NO
  public void visitNamedTrace (final IOmlNamedTrace pcmp) throws CGException {

    String str = new String("  ");
    Vector rhs_2 = null;
    Vector var1_3 = null;
    Vector var2_5 = null;
    var2_5 = pcmp.getName();
    var1_3 = (Vector) ((Vector) UTIL.ConvertToList(str)).clone();
    var1_3.addAll(var2_5);
    rhs_2 = (Vector) var1_3.clone();
    rhs_2.addAll((Vector) UTIL.ConvertToList(new String(" : ")));
    str = UTIL.ConvertToString(UTIL.clone(rhs_2));
    IOmlTraceDefinition tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlTraceDefinition) pcmp.getDefs();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNamedTrace#1|IOmlNamedTrace


// ***** VDMTOOLS START Name=visitTraceDefinition#1|IOmlTraceDefinition KEEP=NO
  public void visitTraceDefinition (final IOmlTraceDefinition pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitTraceDefinition#1|IOmlTraceDefinition


// ***** VDMTOOLS START Name=visitTraceDefinitionItem#1|IOmlTraceDefinitionItem KEEP=NO
  public void visitTraceDefinitionItem (final IOmlTraceDefinitionItem pcmp) throws CGException {

    String str = new String("");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getBind();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlTraceCoreDefinition tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlTraceCoreDefinition) pcmp.getTest();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    Boolean cond_12 = null;
    cond_12 = pcmp.hasRegexpr();
    if (cond_12.booleanValue()) {

      IOmlTraceRepeatPattern tmpArg_v_15 = null;
      tmpArg_v_15 = (IOmlTraceRepeatPattern) pcmp.getRegexpr();
      printNodeField((IOmlNode) tmpArg_v_15);
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    String rhs_16 = null;
    rhs_16 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_16));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceDefinitionItem#1|IOmlTraceDefinitionItem


// ***** VDMTOOLS START Name=visitTraceBinding#1|IOmlTraceBinding KEEP=NO
  public void visitTraceBinding (final IOmlTraceBinding pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitTraceBinding#1|IOmlTraceBinding


// ***** VDMTOOLS START Name=visitTraceLetBinding#1|IOmlTraceLetBinding KEEP=NO
  public void visitTraceLetBinding (final IOmlTraceLetBinding pcmp) throws CGException {

    String str = new String("let ");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getDefinitionList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" in "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceLetBinding#1|IOmlTraceLetBinding


// ***** VDMTOOLS START Name=visitTraceBracketedDefinition#1|IOmlTraceBracketedDefinition KEEP=NO
  public void visitTraceBracketedDefinition (final IOmlTraceBracketedDefinition pcmp) throws CGException {

    String str = new String("(");
    IOmlTraceDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlTraceDefinition) pcmp.getDefinition();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceBracketedDefinition#1|IOmlTraceBracketedDefinition


// ***** VDMTOOLS START Name=visitTraceMethodApply#1|IOmlTraceMethodApply KEEP=NO
  public void visitTraceMethodApply (final IOmlTraceMethodApply pcmp) throws CGException {

    String str = new String("");
    String rhs_2 = null;
    String var1_3 = null;
    String var2_5 = null;
    var2_5 = pcmp.getVariableName();
    var1_3 = str.concat(var2_5);
    rhs_2 = var1_3.concat(new String("."));
    str = UTIL.ConvertToString(UTIL.clone(rhs_2));
    String rhs_7 = null;
    String var1_8 = null;
    String var2_10 = null;
    var2_10 = pcmp.getMethodName();
    var1_8 = str.concat(var2_10);
    rhs_7 = var1_8.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    Vector tmpArg_v_13 = null;
    tmpArg_v_13 = pcmp.getArgs();
    printSeqofField(tmpArg_v_13);
    String rhs_14 = null;
    String var1_15 = null;
    var1_15 = str.concat(result);
    rhs_14 = var1_15.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_14));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceMethodApply#1|IOmlTraceMethodApply


// ***** VDMTOOLS START Name=visitTraceCoreDefinition#1|IOmlTraceCoreDefinition KEEP=NO
  public void visitTraceCoreDefinition (final IOmlTraceCoreDefinition pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitTraceCoreDefinition#1|IOmlTraceCoreDefinition


// ***** VDMTOOLS START Name=visitTraceRepeatPattern#1|IOmlTraceRepeatPattern KEEP=NO
  public void visitTraceRepeatPattern (final IOmlTraceRepeatPattern pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitTraceRepeatPattern#1|IOmlTraceRepeatPattern


// ***** VDMTOOLS START Name=visitTraceZeroOrMore#1|IOmlTraceZeroOrMore KEEP=NO
  public void visitTraceZeroOrMore (final IOmlTraceZeroOrMore var_1_1) throws CGException {

    String str = new String("*");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceZeroOrMore#1|IOmlTraceZeroOrMore


// ***** VDMTOOLS START Name=visitTraceOneOrMore#1|IOmlTraceOneOrMore KEEP=NO
  public void visitTraceOneOrMore (final IOmlTraceOneOrMore var_1_1) throws CGException {

    String str = new String("+");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceOneOrMore#1|IOmlTraceOneOrMore


// ***** VDMTOOLS START Name=visitTraceZeroOrOne#1|IOmlTraceZeroOrOne KEEP=NO
  public void visitTraceZeroOrOne (final IOmlTraceZeroOrOne var_1_1) throws CGException {

    String str = new String("?");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceZeroOrOne#1|IOmlTraceZeroOrOne


// ***** VDMTOOLS START Name=visitTraceRange#1|IOmlTraceRange KEEP=NO
  public void visitTraceRange (final IOmlTraceRange pcmp) throws CGException {

    String str = new String("{");
    IOmlNumericLiteral tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlNumericLiteral) pcmp.getLower();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Boolean cond_7 = null;
    cond_7 = pcmp.hasUpper();
    if (cond_7.booleanValue()) {

      IOmlNumericLiteral tmpArg_v_9 = null;
      tmpArg_v_9 = (IOmlNumericLiteral) pcmp.getUpper();
      printNodeField((IOmlNode) tmpArg_v_9);
      String rhs_10 = null;
      String var1_11 = null;
      var1_11 = str.concat(new String(","));
      rhs_10 = var1_11.concat(result);
      str = UTIL.ConvertToString(UTIL.clone(rhs_10));
    }
    String rhs_15 = null;
    rhs_15 = str.concat(new String("}"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_15));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceRange#1|IOmlTraceRange


// ***** VDMTOOLS START Name=visitTraceChoiceDefinition#1|IOmlTraceChoiceDefinition KEEP=NO
  public void visitTraceChoiceDefinition (final IOmlTraceChoiceDefinition pcmp) throws CGException {

    String str = new String("");
    Long count = new Long(1);
    {

      Vector sq_2 = null;
      sq_2 = pcmp.getDefs();
      IOmlTraceDefinition db = null;
      for (Iterator enm_24 = sq_2.iterator(); enm_24.hasNext(); ) {

        IOmlTraceDefinition elem_3 = (IOmlTraceDefinition) enm_24.next();
        db = (IOmlTraceDefinition) elem_3;
        {

          printNodeField((IOmlNode) db);
          Boolean cond_8 = null;
          Long var1_9 = null;
          Vector unArg_10 = null;
          unArg_10 = pcmp.getDefs();
          var1_9 = new Long(unArg_10.size());
          cond_8 = new Boolean(var1_9.intValue() == count.intValue());
          if (cond_8.booleanValue()) {

            String rhs_17 = null;
            rhs_17 = str.concat(result);
            str = UTIL.ConvertToString(UTIL.clone(rhs_17));
          }
          else {

            String rhs_12 = null;
            String var1_13 = null;
            var1_13 = str.concat(result);
            rhs_12 = var1_13.concat(new String(" | "));
            str = UTIL.ConvertToString(UTIL.clone(rhs_12));
          }
          count = UTIL.NumberToLong(UTIL.clone(new Long(count.intValue() + new Long(1).intValue())));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceChoiceDefinition#1|IOmlTraceChoiceDefinition


// ***** VDMTOOLS START Name=visitTraceSequenceDefinition#1|IOmlTraceSequenceDefinition KEEP=NO
  public void visitTraceSequenceDefinition (final IOmlTraceSequenceDefinition pcmp) throws CGException {

    String str = new String("");
    Long count = new Long(1);
    {

      Vector sq_2 = null;
      sq_2 = pcmp.getDefs();
      IOmlTraceDefinition db = null;
      for (Iterator enm_24 = sq_2.iterator(); enm_24.hasNext(); ) {

        IOmlTraceDefinition elem_3 = (IOmlTraceDefinition) enm_24.next();
        db = (IOmlTraceDefinition) elem_3;
        {

          printNodeField((IOmlNode) db);
          Boolean cond_8 = null;
          Long var1_9 = null;
          Vector unArg_10 = null;
          unArg_10 = pcmp.getDefs();
          var1_9 = new Long(unArg_10.size());
          cond_8 = new Boolean(var1_9.intValue() == count.intValue());
          if (cond_8.booleanValue()) {

            String rhs_17 = null;
            rhs_17 = str.concat(result);
            str = UTIL.ConvertToString(UTIL.clone(rhs_17));
          }
          else {

            String rhs_12 = null;
            String var1_13 = null;
            var1_13 = str.concat(result);
            rhs_12 = var1_13.concat(new String(" ; "));
            str = UTIL.ConvertToString(UTIL.clone(rhs_12));
          }
          count = UTIL.NumberToLong(UTIL.clone(new Long(count.intValue() + new Long(1).intValue())));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceSequenceDefinition#1|IOmlTraceSequenceDefinition


// ***** VDMTOOLS START Name=visitLexem#1|IOmlLexem KEEP=NO
  public void visitLexem (final IOmlLexem var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitLexem#1|IOmlLexem


// ***** VDMTOOLS START Name=visitOldName#1|IOmlOldName KEEP=NO
  public void visitOldName (final IOmlOldName var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitOldName#1|IOmlOldName


// ***** VDMTOOLS START Name=visitSeqConcPattern#1|IOmlSeqConcPattern KEEP=NO
  public void visitSeqConcPattern (final IOmlSeqConcPattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSeqConcPattern#1|IOmlSeqConcPattern


// ***** VDMTOOLS START Name=visitPeriodicThread#1|IOmlPeriodicThread KEEP=NO
  public void visitPeriodicThread (final IOmlPeriodicThread var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitPeriodicThread#1|IOmlPeriodicThread


// ***** VDMTOOLS START Name=visitCallStatement#1|IOmlCallStatement KEEP=NO
  public void visitCallStatement (final IOmlCallStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCallStatement#1|IOmlCallStatement


// ***** VDMTOOLS START Name=visitIsofclassExpression#1|IOmlIsofclassExpression KEEP=NO
  public void visitIsofclassExpression (final IOmlIsofclassExpression pcmp) throws CGException {

    String str = new String("isofclass(");
    IOmlName tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(","));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitIsofclassExpression#1|IOmlIsofclassExpression


// ***** VDMTOOLS START Name=visitIndexForLoop#1|IOmlIndexForLoop KEEP=NO
  public void visitIndexForLoop (final IOmlIndexForLoop var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitIndexForLoop#1|IOmlIndexForLoop


// ***** VDMTOOLS START Name=visitReqExpression#1|IOmlReqExpression KEEP=NO
  public void visitReqExpression (final IOmlReqExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitReqExpression#1|IOmlReqExpression


// ***** VDMTOOLS START Name=visitPermissionPredicate#1|IOmlPermissionPredicate KEEP=NO
  public void visitPermissionPredicate (final IOmlPermissionPredicate var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitPermissionPredicate#1|IOmlPermissionPredicate


// ***** VDMTOOLS START Name=visitProcedureThread#1|IOmlProcedureThread KEEP=NO
  public void visitProcedureThread (final IOmlProcedureThread var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitProcedureThread#1|IOmlProcedureThread


// ***** VDMTOOLS START Name=visitMapEnumeration#1|IOmlMapEnumeration KEEP=NO
  public void visitMapEnumeration (final IOmlMapEnumeration pcmp) throws CGException {

    String str = new String("{");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getMapletList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("}"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitMapEnumeration#1|IOmlMapEnumeration


// ***** VDMTOOLS START Name=visitAtomicStatement#1|IOmlAtomicStatement KEEP=NO
  public void visitAtomicStatement (final IOmlAtomicStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitAtomicStatement#1|IOmlAtomicStatement


// ***** VDMTOOLS START Name=visitFieldReference#1|IOmlFieldReference KEEP=NO
  public void visitFieldReference (final IOmlFieldReference var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitFieldReference#1|IOmlFieldReference


// ***** VDMTOOLS START Name=visitBlockStatement#1|IOmlBlockStatement KEEP=NO
  public void visitBlockStatement (final IOmlBlockStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitBlockStatement#1|IOmlBlockStatement


// ***** VDMTOOLS START Name=visitInjectiveMapType#1|IOmlInjectiveMapType KEEP=NO
  public void visitInjectiveMapType (final IOmlInjectiveMapType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitInjectiveMapType#1|IOmlInjectiveMapType


// ***** VDMTOOLS START Name=visitMatchValue#1|IOmlMatchValue KEEP=NO
  public void visitMatchValue (final IOmlMatchValue var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitMatchValue#1|IOmlMatchValue


// ***** VDMTOOLS START Name=visitOperationTrailer#1|IOmlOperationTrailer KEEP=NO
  public void visitOperationTrailer (final IOmlOperationTrailer var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitOperationTrailer#1|IOmlOperationTrailer


// ***** VDMTOOLS START Name=visitTypeBind#1|IOmlTypeBind KEEP=NO
  public void visitTypeBind (final IOmlTypeBind var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTypeBind#1|IOmlTypeBind


// ***** VDMTOOLS START Name=visitRecordModifier#1|IOmlRecordModifier KEEP=NO
  public void visitRecordModifier (final IOmlRecordModifier var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitRecordModifier#1|IOmlRecordModifier


// ***** VDMTOOLS START Name=visitObjectDesignatorExpression#1|IOmlObjectDesignatorExpression KEEP=NO
  public void visitObjectDesignatorExpression (final IOmlObjectDesignatorExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitObjectDesignatorExpression#1|IOmlObjectDesignatorExpression


// ***** VDMTOOLS START Name=visitIdentifierTypePair#1|IOmlIdentifierTypePair KEEP=NO
  public void visitIdentifierTypePair (final IOmlIdentifierTypePair var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitIdentifierTypePair#1|IOmlIdentifierTypePair


// ***** VDMTOOLS START Name=visitPatternBindExpression#1|IOmlPatternBindExpression KEEP=NO
  public void visitPatternBindExpression (final IOmlPatternBindExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitPatternBindExpression#1|IOmlPatternBindExpression


// ***** VDMTOOLS START Name=visitTrapDefinition#1|IOmlTrapDefinition KEEP=NO
  public void visitTrapDefinition (final IOmlTrapDefinition var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTrapDefinition#1|IOmlTrapDefinition


// ***** VDMTOOLS START Name=visitSelfExpression#1|IOmlSelfExpression KEEP=NO
  public void visitSelfExpression (final IOmlSelfExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String(" self ")));
  }
// ***** VDMTOOLS END Name=visitSelfExpression#1|IOmlSelfExpression


// ***** VDMTOOLS START Name=visitRecursiveTrapStatement#1|IOmlRecursiveTrapStatement KEEP=NO
  public void visitRecursiveTrapStatement (final IOmlRecursiveTrapStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitRecursiveTrapStatement#1|IOmlRecursiveTrapStatement


// ***** VDMTOOLS START Name=visitWhileLoop#1|IOmlWhileLoop KEEP=NO
  public void visitWhileLoop (final IOmlWhileLoop var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitWhileLoop#1|IOmlWhileLoop


// ***** VDMTOOLS START Name=visitDefStatement#1|IOmlDefStatement KEEP=NO
  public void visitDefStatement (final IOmlDefStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitDefStatement#1|IOmlDefStatement


// ***** VDMTOOLS START Name=visitSetForLoop#1|IOmlSetForLoop KEEP=NO
  public void visitSetForLoop (final IOmlSetForLoop var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSetForLoop#1|IOmlSetForLoop


// ***** VDMTOOLS START Name=visitDefExpression#1|IOmlDefExpression KEEP=NO
  public void visitDefExpression (final IOmlDefExpression pcmp) throws CGException {

    String str = new String("def ");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getPatternBindList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" in "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitDefExpression#1|IOmlDefExpression


// ***** VDMTOOLS START Name=visitDurationStatement#1|IOmlDurationStatement KEEP=NO
  public void visitDurationStatement (final IOmlDurationStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitDurationStatement#1|IOmlDurationStatement


// ***** VDMTOOLS START Name=visitImplicitOperation#1|IOmlImplicitOperation KEEP=NO
  public void visitImplicitOperation (final IOmlImplicitOperation var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitImplicitOperation#1|IOmlImplicitOperation


// ***** VDMTOOLS START Name=visitTypeVariable#1|IOmlTypeVariable KEEP=NO
  public void visitTypeVariable (final IOmlTypeVariable var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTypeVariable#1|IOmlTypeVariable


// ***** VDMTOOLS START Name=visitCompositeType#1|IOmlCompositeType KEEP=NO
  public void visitCompositeType (final IOmlCompositeType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCompositeType#1|IOmlCompositeType


// ***** VDMTOOLS START Name=visitCasesStatementAlternative#1|IOmlCasesStatementAlternative KEEP=NO
  public void visitCasesStatementAlternative (final IOmlCasesStatementAlternative var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCasesStatementAlternative#1|IOmlCasesStatementAlternative


// ***** VDMTOOLS START Name=visitActiveExpression#1|IOmlActiveExpression KEEP=NO
  public void visitActiveExpression (final IOmlActiveExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitActiveExpression#1|IOmlActiveExpression


// ***** VDMTOOLS START Name=visitForAllExpression#1|IOmlForAllExpression KEEP=NO
  public void visitForAllExpression (final IOmlForAllExpression pcmp) throws CGException {

    String str = new String("forall ");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getBindList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" in "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitForAllExpression#1|IOmlForAllExpression


// ***** VDMTOOLS START Name=visitCasesExpression#1|IOmlCasesExpression KEEP=NO
  public void visitCasesExpression (final IOmlCasesExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCasesExpression#1|IOmlCasesExpression


// ***** VDMTOOLS START Name=visitCasesStatement#1|IOmlCasesStatement KEEP=NO
  public void visitCasesStatement (final IOmlCasesStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCasesStatement#1|IOmlCasesStatement


// ***** VDMTOOLS START Name=visitErrorStatement#1|IOmlErrorStatement KEEP=NO
  public void visitErrorStatement (final IOmlErrorStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitErrorStatement#1|IOmlErrorStatement


// ***** VDMTOOLS START Name=visitImplicitFunction#1|IOmlImplicitFunction KEEP=NO
  public void visitImplicitFunction (final IOmlImplicitFunction var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitImplicitFunction#1|IOmlImplicitFunction


// ***** VDMTOOLS START Name=visitSamebaseclassExpression#1|IOmlSamebaseclassExpression KEEP=NO
  public void visitSamebaseclassExpression (final IOmlSamebaseclassExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSamebaseclassExpression#1|IOmlSamebaseclassExpression


// ***** VDMTOOLS START Name=visitComplexType#1|IOmlComplexType KEEP=NO
  public void visitComplexType (final IOmlComplexType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitComplexType#1|IOmlComplexType


// ***** VDMTOOLS START Name=visitExternals#1|IOmlExternals KEEP=NO
  public void visitExternals (final IOmlExternals var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitExternals#1|IOmlExternals


// ***** VDMTOOLS START Name=visitSubsequenceExpression#1|IOmlSubsequenceExpression KEEP=NO
  public void visitSubsequenceExpression (final IOmlSubsequenceExpression pcmp) throws CGException {

    String str = new String("");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getLower();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(new String(",...,"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    IOmlExpression tmpArg_v_17 = null;
    tmpArg_v_17 = (IOmlExpression) pcmp.getUpper();
    printNodeField((IOmlNode) tmpArg_v_17);
    String rhs_18 = null;
    String var1_19 = null;
    var1_19 = str.concat(result);
    rhs_18 = var1_19.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_18));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSubsequenceExpression#1|IOmlSubsequenceExpression


// ***** VDMTOOLS START Name=visitElseIfStatement#1|IOmlElseIfStatement KEEP=NO
  public void visitElseIfStatement (final IOmlElseIfStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitElseIfStatement#1|IOmlElseIfStatement


// ***** VDMTOOLS START Name=visitGeneralMapType#1|IOmlGeneralMapType KEEP=NO
  public void visitGeneralMapType (final IOmlGeneralMapType pcmp) throws CGException {

    String str = new String("map ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getDomType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" to "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlType tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlType) pcmp.getRngType();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitGeneralMapType#1|IOmlGeneralMapType


// ***** VDMTOOLS START Name=visitSpecificationStatement#1|IOmlSpecificationStatement KEEP=NO
  public void visitSpecificationStatement (final IOmlSpecificationStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSpecificationStatement#1|IOmlSpecificationStatement


// ***** VDMTOOLS START Name=visitTuplePattern#1|IOmlTuplePattern KEEP=NO
  public void visitTuplePattern (final IOmlTuplePattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTuplePattern#1|IOmlTuplePattern


// ***** VDMTOOLS START Name=visitField#1|IOmlField KEEP=NO
  public void visitField (final IOmlField var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitField#1|IOmlField


// ***** VDMTOOLS START Name=visitTokenType#1|IOmlTokenType KEEP=NO
  public void visitTokenType (final IOmlTokenType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTokenType#1|IOmlTokenType


// ***** VDMTOOLS START Name=visitSameclassExpression#1|IOmlSameclassExpression KEEP=NO
  public void visitSameclassExpression (final IOmlSameclassExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSameclassExpression#1|IOmlSameclassExpression


// ***** VDMTOOLS START Name=visitExitStatement#1|IOmlExitStatement KEEP=NO
  public void visitExitStatement (final IOmlExitStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitExitStatement#1|IOmlExitStatement


// ***** VDMTOOLS START Name=visitExistsExpression#1|IOmlExistsExpression KEEP=NO
  public void visitExistsExpression (final IOmlExistsExpression pcmp) throws CGException {

    String str = new String("exists ");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getBindList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("&"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitExistsExpression#1|IOmlExistsExpression


// ***** VDMTOOLS START Name=visitFunctionTypeInstantiation#1|IOmlFunctionTypeInstantiation KEEP=NO
  public void visitFunctionTypeInstantiation (final IOmlFunctionTypeInstantiation var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitFunctionTypeInstantiation#1|IOmlFunctionTypeInstantiation


// ***** VDMTOOLS START Name=visitSequenceEnumeration#1|IOmlSequenceEnumeration KEEP=NO
  public void visitSequenceEnumeration (final IOmlSequenceEnumeration pcmp) throws CGException {

    String str = new String("[");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("]"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSequenceEnumeration#1|IOmlSequenceEnumeration


// ***** VDMTOOLS START Name=visitObjectApply#1|IOmlObjectApply KEEP=NO
  public void visitObjectApply (final IOmlObjectApply var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitObjectApply#1|IOmlObjectApply


// ***** VDMTOOLS START Name=visitSetUnionPattern#1|IOmlSetUnionPattern KEEP=NO
  public void visitSetUnionPattern (final IOmlSetUnionPattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSetUnionPattern#1|IOmlSetUnionPattern


// ***** VDMTOOLS START Name=visitStartStatement#1|IOmlStartStatement KEEP=NO
  public void visitStartStatement (final IOmlStartStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitStartStatement#1|IOmlStartStatement


// ***** VDMTOOLS START Name=visitError#1|IOmlError KEEP=NO
  public void visitError (final IOmlError var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitError#1|IOmlError


// ***** VDMTOOLS START Name=visitIfStatement#1|IOmlIfStatement KEEP=NO
  public void visitIfStatement (final IOmlIfStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitIfStatement#1|IOmlIfStatement


// ***** VDMTOOLS START Name=visitLetBeExpression#1|IOmlLetBeExpression KEEP=NO
  public void visitLetBeExpression (final IOmlLetBeExpression pcmp) throws CGException {

    String str = new String("let ");
    IOmlBind tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlBind) pcmp.getBind();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Boolean cond_7 = null;
    cond_7 = pcmp.hasBest();
    if (cond_7.booleanValue()) {

      IOmlExpression tmpArg_v_9 = null;
      tmpArg_v_9 = (IOmlExpression) pcmp.getBest();
      printNodeField((IOmlNode) tmpArg_v_9);
      String rhs_10 = null;
      String var1_11 = null;
      var1_11 = new String(" be st ").concat(result);
      rhs_10 = var1_11.concat(new String(" in "));
      str = UTIL.ConvertToString(UTIL.clone(rhs_10));
    }
    IOmlExpression tmpArg_v_16 = null;
    tmpArg_v_16 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_16);
    String rhs_17 = null;
    rhs_17 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_17));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitLetBeExpression#1|IOmlLetBeExpression


// ***** VDMTOOLS START Name=visitTotalFunctionType#1|IOmlTotalFunctionType KEEP=NO
  public void visitTotalFunctionType (final IOmlTotalFunctionType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTotalFunctionType#1|IOmlTotalFunctionType


// ***** VDMTOOLS START Name=visitSporadicThread#1|IOmlSporadicThread KEEP=NO
  public void visitSporadicThread (final IOmlSporadicThread var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSporadicThread#1|IOmlSporadicThread


// ***** VDMTOOLS START Name=visitMapComprehension#1|IOmlMapComprehension KEEP=NO
  public void visitMapComprehension (final IOmlMapComprehension pcmp) throws CGException {

    String str = new String("{");
    IOmlMaplet tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlMaplet) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("|"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Vector tmpArg_v_10 = null;
    tmpArg_v_10 = pcmp.getBindList();
    printSeqofField(tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    Boolean cond_14 = null;
    cond_14 = pcmp.hasGuard();
    if (cond_14.booleanValue()) {

      IOmlExpression tmpArg_v_16 = null;
      tmpArg_v_16 = (IOmlExpression) pcmp.getGuard();
      printNodeField((IOmlNode) tmpArg_v_16);
      String rhs_17 = null;
      rhs_17 = new String("&").concat(result);
      str = UTIL.ConvertToString(UTIL.clone(rhs_17));
    }
    String rhs_20 = null;
    rhs_20 = str.concat(new String("}"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_20));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitMapComprehension#1|IOmlMapComprehension


// ***** VDMTOOLS START Name=visitSetBind#1|IOmlSetBind KEEP=NO
  public void visitSetBind (final IOmlSetBind pBind) throws CGException {

    String str = new String("");
    {

      Vector pat_ul = null;
      pat_ul = pBind.getPattern();
      IOmlExpression set_ue = null;
      set_ue = (IOmlExpression) pBind.getExpression();
      {

        printSeqofField(pat_ul);
        String rhs_7 = null;
        rhs_7 = result.concat(new String(" in set "));
        str = UTIL.ConvertToString(UTIL.clone(rhs_7));
        printNodeField((IOmlNode) set_ue);
        String rhs_12 = null;
        rhs_12 = str.concat(result);
        result = UTIL.ConvertToString(UTIL.clone(rhs_12));
      }
    }
  }
// ***** VDMTOOLS END Name=visitSetBind#1|IOmlSetBind


// ***** VDMTOOLS START Name=visitNondeterministicStatement#1|IOmlNondeterministicStatement KEEP=NO
  public void visitNondeterministicStatement (final IOmlNondeterministicStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitNondeterministicStatement#1|IOmlNondeterministicStatement


// ***** VDMTOOLS START Name=visitSymbolicLiteralPattern#1|IOmlSymbolicLiteralPattern KEEP=NO
  public void visitSymbolicLiteralPattern (final IOmlSymbolicLiteralPattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSymbolicLiteralPattern#1|IOmlSymbolicLiteralPattern


// ***** VDMTOOLS START Name=visitOptionalType#1|IOmlOptionalType KEEP=NO
  public void visitOptionalType (final IOmlOptionalType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitOptionalType#1|IOmlOptionalType


// ***** VDMTOOLS START Name=visitMutexAllPredicate#1|IOmlMutexAllPredicate KEEP=NO
  public void visitMutexAllPredicate (final IOmlMutexAllPredicate var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitMutexAllPredicate#1|IOmlMutexAllPredicate


// ***** VDMTOOLS START Name=visitSequenceComprehension#1|IOmlSequenceComprehension KEEP=NO
  public void visitSequenceComprehension (final IOmlSequenceComprehension var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSequenceComprehension#1|IOmlSequenceComprehension


// ***** VDMTOOLS START Name=visitEqualsDefinition#1|IOmlEqualsDefinition KEEP=NO
  public void visitEqualsDefinition (final IOmlEqualsDefinition var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitEqualsDefinition#1|IOmlEqualsDefinition


// ***** VDMTOOLS START Name=visitMaplet#1|IOmlMaplet KEEP=NO
  public void visitMaplet (final IOmlMaplet pcmp) throws CGException {

    String str = new String("");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getDomExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("|->"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getRngExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitMaplet#1|IOmlMaplet


// ***** VDMTOOLS START Name=visitExistsUniqueExpression#1|IOmlExistsUniqueExpression KEEP=NO
  public void visitExistsUniqueExpression (final IOmlExistsUniqueExpression pcmp) throws CGException {

    String str = new String("exists1 ");
    IOmlBind tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlBind) pcmp.getBind();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("&"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitExistsUniqueExpression#1|IOmlExistsUniqueExpression


// ***** VDMTOOLS START Name=visitThreadIdExpression#1|IOmlThreadIdExpression KEEP=NO
  public void visitThreadIdExpression (final IOmlThreadIdExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitThreadIdExpression#1|IOmlThreadIdExpression


// ***** VDMTOOLS START Name=visitExtendedExplicitOperation#1|IOmlExtendedExplicitOperation KEEP=NO
  public void visitExtendedExplicitOperation (final IOmlExtendedExplicitOperation var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitExtendedExplicitOperation#1|IOmlExtendedExplicitOperation


// ***** VDMTOOLS START Name=visitSetComprehension#1|IOmlSetComprehension KEEP=NO
  public void visitSetComprehension (final IOmlSetComprehension pcmp) throws CGException {

    String str = new String("{");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("|"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Vector tmpArg_v_10 = null;
    tmpArg_v_10 = pcmp.getBindList();
    printSeqofField(tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    Boolean cond_14 = null;
    cond_14 = pcmp.hasGuard();
    if (cond_14.booleanValue()) {

      IOmlExpression tmpArg_v_16 = null;
      tmpArg_v_16 = (IOmlExpression) pcmp.getGuard();
      printNodeField((IOmlNode) tmpArg_v_16);
      String rhs_17 = null;
      String var1_18 = null;
      var1_18 = str.concat(new String(" & "));
      rhs_17 = var1_18.concat(result);
      str = UTIL.ConvertToString(UTIL.clone(rhs_17));
    }
    String rhs_22 = null;
    rhs_22 = str.concat(new String("}"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_22));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSetComprehension#1|IOmlSetComprehension


// ***** VDMTOOLS START Name=visitIotaExpression#1|IOmlIotaExpression KEEP=NO
  public void visitIotaExpression (final IOmlIotaExpression pcmp) throws CGException {

    String str = new String("iota ");
    IOmlBind tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlBind) pcmp.getBind();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("&"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitIotaExpression#1|IOmlIotaExpression


// ***** VDMTOOLS START Name=visitReturnStatement#1|IOmlReturnStatement KEEP=NO
  public void visitReturnStatement (final IOmlReturnStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitReturnStatement#1|IOmlReturnStatement


// ***** VDMTOOLS START Name=visitSetEnumPattern#1|IOmlSetEnumPattern KEEP=NO
  public void visitSetEnumPattern (final IOmlSetEnumPattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSetEnumPattern#1|IOmlSetEnumPattern


// ***** VDMTOOLS START Name=visitTrapStatement#1|IOmlTrapStatement KEEP=NO
  public void visitTrapStatement (final IOmlTrapStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTrapStatement#1|IOmlTrapStatement


// ***** VDMTOOLS START Name=visitFunctionTypeSelect#1|IOmlFunctionTypeSelect KEEP=NO
  public void visitFunctionTypeSelect (final IOmlFunctionTypeSelect var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitFunctionTypeSelect#1|IOmlFunctionTypeSelect


// ***** VDMTOOLS START Name=visitClassTypeInstantiation#1|IOmlClassTypeInstantiation KEEP=NO
  public void visitClassTypeInstantiation (final IOmlClassTypeInstantiation var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitClassTypeInstantiation#1|IOmlClassTypeInstantiation


// ***** VDMTOOLS START Name=visitCyclesStatement#1|IOmlCyclesStatement KEEP=NO
  public void visitCyclesStatement (final IOmlCyclesStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCyclesStatement#1|IOmlCyclesStatement


// ***** VDMTOOLS START Name=visitPreconditionExpression#1|IOmlPreconditionExpression KEEP=NO
  public void visitPreconditionExpression (final IOmlPreconditionExpression pcmp) throws CGException {

    String str = new String("pre_(");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getExpressionList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitPreconditionExpression#1|IOmlPreconditionExpression


// ***** VDMTOOLS START Name=visitTraceLetBeBinding#1|IOmlTraceLetBeBinding KEEP=NO
  public void visitTraceLetBeBinding (final IOmlTraceLetBeBinding pcmp) throws CGException {

    String str = new String("let ");
    IOmlBind tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlBind) pcmp.getBind();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" in "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Boolean cond_9 = null;
    cond_9 = pcmp.hasBest();
    if (cond_9.booleanValue()) {

      IOmlExpression tmpArg_v_11 = null;
      tmpArg_v_11 = (IOmlExpression) pcmp.getBest();
      printNodeField((IOmlNode) tmpArg_v_11);
      String rhs_12 = null;
      String var1_13 = null;
      var1_13 = str.concat(new String(" be st "));
      rhs_12 = var1_13.concat(result);
      str = UTIL.ConvertToString(UTIL.clone(rhs_12));
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTraceLetBeBinding#1|IOmlTraceLetBeBinding


// ***** VDMTOOLS START Name=visitVarInformation#1|IOmlVarInformation KEEP=NO
  public void visitVarInformation (final IOmlVarInformation var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitVarInformation#1|IOmlVarInformation


// ***** VDMTOOLS START Name=visitIsofbaseclassExpression#1|IOmlIsofbaseclassExpression KEEP=NO
  public void visitIsofbaseclassExpression (final IOmlIsofbaseclassExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitIsofbaseclassExpression#1|IOmlIsofbaseclassExpression


// ***** VDMTOOLS START Name=visitLetStatement#1|IOmlLetStatement KEEP=NO
  public void visitLetStatement (final IOmlLetStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitLetStatement#1|IOmlLetStatement


// ***** VDMTOOLS START Name=visitActExpression#1|IOmlActExpression KEEP=NO
  public void visitActExpression (final IOmlActExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitActExpression#1|IOmlActExpression


// ***** VDMTOOLS START Name=visitExceptions#1|IOmlExceptions KEEP=NO
  public void visitExceptions (final IOmlExceptions var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitExceptions#1|IOmlExceptions


// ***** VDMTOOLS START Name=visitIsExpression#1|IOmlIsExpression KEEP=NO
  public void visitIsExpression (final IOmlIsExpression pcmp) throws CGException {

    String str = new String("is_");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    String var1_10 = null;
    var1_10 = str.concat(result);
    rhs_9 = var1_10.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitIsExpression#1|IOmlIsExpression


// ***** VDMTOOLS START Name=visitCasesExpressionAlternative#1|IOmlCasesExpressionAlternative KEEP=NO
  public void visitCasesExpressionAlternative (final IOmlCasesExpressionAlternative var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitCasesExpressionAlternative#1|IOmlCasesExpressionAlternative


// ***** VDMTOOLS START Name=visitLetBeStatement#1|IOmlLetBeStatement KEEP=NO
  public void visitLetBeStatement (final IOmlLetBeStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitLetBeStatement#1|IOmlLetBeStatement


// ***** VDMTOOLS START Name=visitMutexPredicate#1|IOmlMutexPredicate KEEP=NO
  public void visitMutexPredicate (final IOmlMutexPredicate var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitMutexPredicate#1|IOmlMutexPredicate


// ***** VDMTOOLS START Name=visitUndefinedExpression#1|IOmlUndefinedExpression KEEP=NO
  public void visitUndefinedExpression (final IOmlUndefinedExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("undefined")));
  }
// ***** VDMTOOLS END Name=visitUndefinedExpression#1|IOmlUndefinedExpression


// ***** VDMTOOLS START Name=visitAssignStatement#1|IOmlAssignStatement KEEP=NO
  public void visitAssignStatement (final IOmlAssignStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitAssignStatement#1|IOmlAssignStatement


// ***** VDMTOOLS START Name=visitSequenceForLoop#1|IOmlSequenceForLoop KEEP=NO
  public void visitSequenceForLoop (final IOmlSequenceForLoop var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSequenceForLoop#1|IOmlSequenceForLoop


// ***** VDMTOOLS START Name=visitWaitingExpression#1|IOmlWaitingExpression KEEP=NO
  public void visitWaitingExpression (final IOmlWaitingExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitWaitingExpression#1|IOmlWaitingExpression


// ***** VDMTOOLS START Name=visitInvariant#1|IOmlInvariant KEEP=NO
  public void visitInvariant (final IOmlInvariant var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitInvariant#1|IOmlInvariant


// ***** VDMTOOLS START Name=visitObjectFieldReference#1|IOmlObjectFieldReference KEEP=NO
  public void visitObjectFieldReference (final IOmlObjectFieldReference var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitObjectFieldReference#1|IOmlObjectFieldReference


// ***** VDMTOOLS START Name=visitBracketedType#1|IOmlBracketedType KEEP=NO
  public void visitBracketedType (final IOmlBracketedType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitBracketedType#1|IOmlBracketedType


// ***** VDMTOOLS START Name=visitFinExpression#1|IOmlFinExpression KEEP=NO
  public void visitFinExpression (final IOmlFinExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitFinExpression#1|IOmlFinExpression


// ***** VDMTOOLS START Name=visitSetRangeExpression#1|IOmlSetRangeExpression KEEP=NO
  public void visitSetRangeExpression (final IOmlSetRangeExpression pcmp) throws CGException {

    String str = new String("{");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getLower();
    printField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(",...,"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getUpper();
    printField(tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(new String("}"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSetRangeExpression#1|IOmlSetRangeExpression


// ***** VDMTOOLS START Name=visitFunctionBody#1|IOmlFunctionBody KEEP=NO
  public void visitFunctionBody (final IOmlFunctionBody var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitFunctionBody#1|IOmlFunctionBody


// ***** VDMTOOLS START Name=visitLambdaExpression#1|IOmlLambdaExpression KEEP=NO
  public void visitLambdaExpression (final IOmlLambdaExpression pcmp) throws CGException {

    String str = new String("lambda ");
    Vector tmpArg_v_3 = null;
    tmpArg_v_3 = pcmp.getTypeBindList();
    printSeqofField(tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("&"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlExpression tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitLambdaExpression#1|IOmlLambdaExpression


// ***** VDMTOOLS START Name=visitInstanceVariableInvariant#1|IOmlInstanceVariableInvariant KEEP=NO
  public void visitInstanceVariableInvariant (final IOmlInstanceVariableInvariant var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitInstanceVariableInvariant#1|IOmlInstanceVariableInvariant


// ***** VDMTOOLS START Name=visitDontCarePattern#1|IOmlDontCarePattern KEEP=NO
  public void visitDontCarePattern (final IOmlDontCarePattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitDontCarePattern#1|IOmlDontCarePattern


// ***** VDMTOOLS START Name=visitSeqEnumPattern#1|IOmlSeqEnumPattern KEEP=NO
  public void visitSeqEnumPattern (final IOmlSeqEnumPattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSeqEnumPattern#1|IOmlSeqEnumPattern


// ***** VDMTOOLS START Name=visitTypelessExplicitFunction#1|IOmlTypelessExplicitFunction KEEP=NO
  public void visitTypelessExplicitFunction (final IOmlTypelessExplicitFunction var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitTypelessExplicitFunction#1|IOmlTypelessExplicitFunction


// ***** VDMTOOLS START Name=visitThreadDefinition#1|IOmlThreadDefinition KEEP=NO
  public void visitThreadDefinition (final IOmlThreadDefinition var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitThreadDefinition#1|IOmlThreadDefinition


// ***** VDMTOOLS START Name=visitAlwaysStatement#1|IOmlAlwaysStatement KEEP=NO
  public void visitAlwaysStatement (final IOmlAlwaysStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitAlwaysStatement#1|IOmlAlwaysStatement


// ***** VDMTOOLS START Name=visitRecordPattern#1|IOmlRecordPattern KEEP=NO
  public void visitRecordPattern (final IOmlRecordPattern var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitRecordPattern#1|IOmlRecordPattern


// ***** VDMTOOLS START Name=visitQuoteType#1|IOmlQuoteType KEEP=NO
  public void visitQuoteType (final IOmlQuoteType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitQuoteType#1|IOmlQuoteType


// ***** VDMTOOLS START Name=visitDclStatement#1|IOmlDclStatement KEEP=NO
  public void visitDclStatement (final IOmlDclStatement var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitDclStatement#1|IOmlDclStatement


// ***** VDMTOOLS START Name=visitPatternTypePair#1|IOmlPatternTypePair KEEP=NO
  public void visitPatternTypePair (final IOmlPatternTypePair var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitPatternTypePair#1|IOmlPatternTypePair


// ***** VDMTOOLS START Name=visitMapOrSequenceReference#1|IOmlMapOrSequenceReference KEEP=NO
  public void visitMapOrSequenceReference (final IOmlMapOrSequenceReference var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitMapOrSequenceReference#1|IOmlMapOrSequenceReference


// ***** VDMTOOLS START Name=visitSynchronizationDefinitions#1|IOmlSynchronizationDefinitions KEEP=NO
  public void visitSynchronizationDefinitions (final IOmlSynchronizationDefinitions var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitSynchronizationDefinitions#1|IOmlSynchronizationDefinitions


// ***** VDMTOOLS START Name=visitMuExpression#1|IOmlMuExpression KEEP=NO
  public void visitMuExpression (final IOmlMuExpression pcmp) throws CGException {

    String str = new String("mu(");
    IOmlExpression tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(","));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Vector tmpArg_v_10 = null;
    tmpArg_v_10 = pcmp.getModifierList();
    printSeqofField(tmpArg_v_10);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(result);
    rhs_11 = var1_12.concat(new String(")"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitMuExpression#1|IOmlMuExpression


// ***** VDMTOOLS START Name=visitFunctionTrailer#1|IOmlFunctionTrailer KEEP=NO
  public void visitFunctionTrailer (final IOmlFunctionTrailer var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitFunctionTrailer#1|IOmlFunctionTrailer


// ***** VDMTOOLS START Name=visitTimeExpression#1|IOmlTimeExpression KEEP=NO
  public void visitTimeExpression (final IOmlTimeExpression var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String(" time ")));
  }
// ***** VDMTOOLS END Name=visitTimeExpression#1|IOmlTimeExpression


// ***** VDMTOOLS START Name=visitRatType#1|IOmlRatType KEEP=NO
  public void visitRatType (final IOmlRatType var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitRatType#1|IOmlRatType


// ***** VDMTOOLS START Name=visitStateDesignatorName#1|IOmlStateDesignatorName KEEP=NO
  public void visitStateDesignatorName (final IOmlStateDesignatorName var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitStateDesignatorName#1|IOmlStateDesignatorName


// ***** VDMTOOLS START Name=visitExtendedExplicitFunction#1|IOmlExtendedExplicitFunction KEEP=NO
  public void visitExtendedExplicitFunction (final IOmlExtendedExplicitFunction var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitExtendedExplicitFunction#1|IOmlExtendedExplicitFunction


// ***** VDMTOOLS START Name=visitContextInfo#1|IOmlContextInfo KEEP=NO
  public void visitContextInfo (final IOmlContextInfo var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitContextInfo#1|IOmlContextInfo


// ***** VDMTOOLS START Name=visitMode#1|IOmlMode KEEP=NO
  public void visitMode (final IOmlMode var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("NOT YET SUPPORTED")));
  }
// ***** VDMTOOLS END Name=visitMode#1|IOmlMode

}
;
