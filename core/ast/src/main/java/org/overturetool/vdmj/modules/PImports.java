/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overturetool.vdmj.modules;


import org.overture.ast.node.Node;
import java.lang.String;
import org.overture.ast.node.NodeEnum;
import org.overturetool.vdmj.modules.EImports;


public abstract class PImports extends Node
{


	/**
	 * Creates a new {@link PImports} node with no children.
	 */
	public PImports()
	{

	}


	/**
	 * Removes the {@link Node} {@code child} as a child of this {@link PImports} node.
	 * @param child the child node to be removed from this {@link PImports} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link PImports} node
	 */
	public void removeChild(Node child)
	{
		throw new RuntimeException("Not a child.");
	}


	public String toString()
	{
		return super.toString();

	}


	/**
	 * Returns the {@link NodeEnum} corresponding to the
	 * type of this {@link Node} node.
	 * @return the {@link NodeEnum} for this node
	 */
	@Override
	public NodeEnum kindNode()
	{
		return NodeEnum.IMPORTS;
	}


	/**
	 * Returns the {@link EImports} corresponding to the
	 * type of this {@link EImports} node.
	 * @return the {@link EImports} for this node
	 */
	public abstract EImports kindPImports()
;

}

