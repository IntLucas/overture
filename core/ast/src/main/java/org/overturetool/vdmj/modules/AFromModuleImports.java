/* This file was generated by ASTcreator (http://www.lausdahl.com/). */

package org.overturetool.vdmj.modules;


import org.overturetool.vdmj.modules.PImports;
import org.overturetool.vdmj.lex.LexIdentifierToken;
import org.overturetool.vdmj.modules.ASignaturesImports;
import org.overture.ast.node.Node;
import java.lang.String;
import java.util.Map;
import org.overturetool.vdmj.modules.AFromModuleImports;
import org.overturetool.vdmj.modules.EImports;
import org.overture.ast.analysis.IAnalysis;
import org.overture.ast.analysis.IAnswer;
import org.overture.ast.analysis.IQuestion;
import org.overture.ast.analysis.IQuestionAnswer;


public class AFromModuleImports extends PImports
{
	private LexIdentifierToken _name;
	private ASignaturesImports _signatures;

	/**
	* Creates a new {@code AFromModuleImports} node with the given nodes as children.
	* The basic child nodes are removed from their previous parents.
	* @param name the {@link LexIdentifierToken} node for the {@code name} child of this {@link AFromModuleImports} node
	* @param signatures the {@link ASignaturesImports} node for the {@code signatures} child of this {@link AFromModuleImports} node
	*/
	public AFromModuleImports(LexIdentifierToken name_, ASignaturesImports signatures_)
	{
		super();
		this.setName(name_);
		this.setSignatures(signatures_);

	}


	/**
	 * Creates a new {@link AFromModuleImports} node with no children.
	 */
	public AFromModuleImports()
	{

	}


	/**
	 * Removes the {@link Node} {@code child} as a child of this {@link AFromModuleImports} node.
	 * @param child the child node to be removed from this {@link AFromModuleImports} node
	 * @throws RuntimeException if {@code child} is not a child of this {@link AFromModuleImports} node
	 */
	public void removeChild(Node child)
	{
		if (this._name == child) {
			this._name = null;
			return;
		}

		if (this._signatures == child) {
			this._signatures = null;
			return;
		}

		throw new RuntimeException("Not a child.");
	}


	public String toString()
	{
		return (_name!=null?_name.toString():this.getClass().getSimpleName())+ (_signatures!=null?_signatures.toString():this.getClass().getSimpleName());
	}


	/**
	 * Returns a deep clone of this {@link AFromModuleImports} node.
	 * @return a deep clone of this {@link AFromModuleImports} node
	 */
	public AFromModuleImports clone()
	{
		return new AFromModuleImports(
			cloneNode(_name),
			cloneNode(_signatures)
		);
	}


	/**
	 * Creates a deep clone of this {@link AFromModuleImports} node while putting all
	 * old node-new node relations in the map {@code oldToNewMap}.
	 * @param oldToNewMap the map filled with the old node-new node relation
	 * @return a deep clone of this {@link AFromModuleImports} node
	 */
	public AFromModuleImports clone(Map<Node,Node> oldToNewMap)
	{
		AFromModuleImports node = new AFromModuleImports(
			cloneNode(_name, oldToNewMap),
			cloneNode(_signatures, oldToNewMap)
		);
		oldToNewMap.put(this, node);
		return node;
	}


	/**
	 * Returns the {@link EImports} corresponding to the
	 * type of this {@link EImports} node.
	 * @return the {@link EImports} for this node
	 */
	@Override
	public EImports kindPImports()
	{
		return EImports.FROMMODULE;
	}


	/**
	 * Sets the {@code _name} child of this {@link AFromModuleImports} node.
	 * @param value the new {@code _name} child of this {@link AFromModuleImports} node
	*/
	public void setName(LexIdentifierToken value)
	{
		if (this._name != null) {
			this._name.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._name = value;

	}


	/**
	 * Returns the {@link LexIdentifierToken} node which is the {@code _name} child of this {@link AFromModuleImports} node.
	 * @return the {@link LexIdentifierToken} node which is the {@code _name} child of this {@link AFromModuleImports} node
	*/
	public LexIdentifierToken getName()
	{
		return this._name;
	}


	/**
	 * Sets the {@code _signatures} child of this {@link AFromModuleImports} node.
	 * @param value the new {@code _signatures} child of this {@link AFromModuleImports} node
	*/
	public void setSignatures(ASignaturesImports value)
	{
		if (this._signatures != null) {
			this._signatures.parent(null);
		}
		if (value != null) {
			if (value.parent() != null) {
				value.parent().removeChild(value);
		}
			value.parent(this);
		}
		this._signatures = value;

	}


	/**
	 * Returns the {@link ASignaturesImports} node which is the {@code _signatures} child of this {@link AFromModuleImports} node.
	 * @return the {@link ASignaturesImports} node which is the {@code _signatures} child of this {@link AFromModuleImports} node
	*/
	public ASignaturesImports getSignatures()
	{
		return this._signatures;
	}


	/**
	* Calls the {@link IAnalysis#caseAFromModuleImports(AFromModuleImports)} of the {@link IAnalysis} {@code analysis}.
	* @param analysis the {@link IAnalysis} to which this {@link AFromModuleImports} node is applied
	*/
	@Override
	public void apply(IAnalysis analysis)
	{
		analysis.caseAFromModuleImports(this);
	}


	/**
	* Calls the {@link IAnswer#caseAFromModuleImports(AFromModuleImports)} of the {@link IAnswer} {@code caller}.
	* @param caller the {@link IAnswer} to which this {@link AFromModuleImports} node is applied
	*/
	@Override
	public <A> A apply(IAnswer<A> caller)
	{
		return caller.caseAFromModuleImports(this);
	}


	/**
	* Calls the {@link IQuestion#caseAFromModuleImports(AFromModuleImports)} of the {@link IQuestion} {@code caller}.
	* @param caller the {@link IQuestion} to which this {@link AFromModuleImports} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q> void apply(IQuestion<Q> caller, Q question)
	{
		caller.caseAFromModuleImports(this, question);
	}


	/**
	* Calls the {@link IQuestionAnswer#caseAFromModuleImports(AFromModuleImports)} of the {@link IQuestionAnswer} {@code caller}.
	* @param caller the {@link IQuestionAnswer} to which this {@link AFromModuleImports} node is applied
	* @param question the question provided to {@code caller}
	*/
	@Override
	public <Q, A> A apply(IQuestionAnswer<Q, A> caller, Q question)
	{
		return caller.caseAFromModuleImports(this, question);
	}



}

