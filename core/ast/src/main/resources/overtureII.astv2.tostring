To String Extensions
// import packages used by external $$ java code
import org.overturetool.util.Utils;
import org.overturetool.util.ToStringUtil;


//  Expressions

%exp->apply = [root] "(" + $Utils.listToString($ [args] $)$ + ")"
%exp->boolean_const =  [value] 
%exp->cases = "(cases " [expression] " :\n" +  $Utils.listToString("",$ [cases] $, ",\n", "\n") + ($ [others] $ == null ? "\n" : "others " + $ [others] + $"\n")$ + "end)" 
%exp->char_const =  [value] 
%exp->elseIf =  "elseif " + [elseIf] + "\nthen " + [then]
%exp->exists1 = "(exists1 " + [bind] + " & " + [predicate] + ")" 
%exp->exists = "(exists " + [bindList] + " & " + [predicate] + ")"
%exp->field =  "(" [object] "." + $($ [memberName] $ == null ? $[field]$.getName() : $[memberName]$.getName())$ + ")"
%exp->fieldNumber = "(" + [tuple] + "." + [field] + ")"
%exp->forAll = "(forall " + $Utils.listToString($ [bindList] $)$ + " & " [predicate] ")"
%exp->funcInstatiation = "(" [function] ")[" + $Utils.listToString($[actualTypes]$)$ + "]"
%exp->if = "" + $Utils.ifToString($[test]$, $[then]$, $[elseList]$, $[else]$)$
%exp->int_const = [value] 
%exp->iota = "(iota " [bind] " & " [predicate] ")"
%exp->is = "is_(" [test] ", " + $( $ [typeName] $ == null ? $ [basicType] $ : $ [typeName] $)$ + ")"
%exp->isOfBaseClass = "isofbaseclass(" [baseClass] "," [exp] ")"
%exp->isOfClass = "isofclass(" [className] "," [exp] ")"
%exp->lambda = "(lambda " + [bindList] + " & " + [expression] + ")"
%exp->letBeSt = "let " [bind] + $($[suchThat]$ == null ? "" : " be st " + $[suchThat]$)$ + " in " + [value]
%exp->letDef = "let " + $Utils.listToString($ [localDefs] $)$ + " in " [expression]
%exp->def = "def " + $Utils.listToString($[localDefs]$)$ + " in\n" + [expression]
%exp->maplet = [left] + " |-> " + [right]
%exp->mkBasic = "mk_" + [type] + "(" + [arg] + ")"
%exp->mkType = "mk_" [typeName] "(" + $Utils.listToString($[args]$)$ + ")"
%exp->mu  = "mu(" [recordType] ", " + $Utils.listToString($[modifiers]$)$ + ")"
%exp->new = "new " [className] "("+ $Utils.listToString($[args]$)$ + ")"
%exp->nil = "nil"
%exp->postOp = [postexpression]
%exp->pre = "pre_(" [function] + $Utils.listToString($ [args] $)$ + ")"
%exp->preOp = [expression]
%exp->quote_const = [value]
%exp->real_const = [value]
%exp->sameBaseClass = "samebaseclass(" + [left] + "," + [right] + ")"
%exp->sameClass = "sameclass(" [left] "," + [right] + ")"
%exp->self = "self"
%exp->stateInit = "init " [state]$.getInitPattern()$ + " == " [state]$.getInitExpression()$
%exp->string_const = [value]
%exp->subclassResponsibility = "is subclass responsibility"
%exp->subseq = "(" [seq] "(" [from] ", ... ," [to] "))"
%exp->threadId = "threadid"
%exp->time = "time"
%exp->tuple = "mk_(" + $Utils.listToString($ [args] $)$ + ")"
%exp->undefined = "(undefined)"
%exp->variable = [name]

//
%alternative->case ="case "  [pattern] + " -> "  [result] 

%exp->#Unary->absolute ="(abs "  [exp]+")"
%exp->#Unary->cardinality ="(card "  [exp]+")"
%exp->#Unary->distConcat ="(conc "  [exp]+")"
%exp->#Unary->distIntersect ="(dinter "  [exp]+")"
%exp->#Unary->distMerge ="(merge "  [exp]+")"
%exp->#Unary->distUnion ="(dunion "  [exp]+")"
%exp->#Unary->elements ="(elems "  [exp]+")"
%exp->#Unary->floor ="(floor "  [exp]+")"
%exp->#Unary->head ="(hd "  [exp]+")"
%exp->#Unary->indices ="(inds "  [exp]+")"
%exp->#Unary->len ="(len "  [exp]+")"
%exp->#Unary->mapDomain ="(dom "  [exp]+")"
%exp->#Unary->mapInverse ="(inverse "  [exp]+")"
%exp->#Unary->mapRange ="(rng "  [exp]+")"
%exp->#Unary->not ="(not "  [exp]+")"
%exp->#Unary->powerSet ="(power "  [exp]+")"
%exp->#Unary->reverse ="(reverse "  [exp]+")"
%exp->#Unary->tail ="(tl "  [exp]+")"
%exp->#Unary->unaryMinus ="(- "  [exp]+")"
%exp->#Unary->unaryPlus ="(+ "  [exp]+")"

%exp->#binary->comp = "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->domainResBy = "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->domainResTo = "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->equals = "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->inSet = "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->mapUnion = "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->notEqual =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->notInSet =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->plusPlus =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->properSubset =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->rangeResBy =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->rangeResTo =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->seqConcat =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->setDifference =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->setIntersect =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->setUnion =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->starStar =  "(" [left] " " + [op] + " " + [left] + ")"
%exp->#binary->subset =  "(" [left] " " + [op] + " " + [left] + ")"


%exp->#binary->#Boolean->and = [left] "and" [right]
%exp->#binary->#Boolean->equivalent = [left] "<=>" [right]
%exp->#binary->#Boolean->implies = [left] "=>" [right]
%exp->#binary->#Boolean->or = [left] "or" [right]

%exp->#binary->#Numeric->div = [left] "div" [right]
%exp->#binary->#Numeric->divide = [left] "/" [right]
%exp->#binary->#Numeric->greaterEqual = [left] ">=" [right]
%exp->#binary->#Numeric->greater = [left] ">" [right]
%exp->#binary->#Numeric->lessEqual = [left] "<=" [right]
%exp->#binary->#Numeric->less = [left] "<" [right]
%exp->#binary->#Numeric->mod = [left] "mod" [right]
%exp->#binary->#Numeric->plus = [left] "+" [right]
%exp->#binary->#Numeric->rem = [left] "rem" [right]
%exp->#binary->#Numeric->substract = [left] "-" [right]
%exp->#binary->#Numeric->times = [left] "*" [right]

%exp->#Map->mapComp = "{" [first] " | " + $Utils.listToString($[bindings]$) + ($[predicate]$ == null ? "}" : " & " + $[predicate]$ + "}")$
%exp->#Map->mapEnum = "{" + $Utils.listToString($[members]$)$ + "}"
 
%exp->#Seq->seqComp = "[" [first] " | "  [setBind] + $($[predicate]$ == null ? "]" : " & " + $[predicate]$ + "]")$
%exp->#Seq->seqEnum = "" + $Utils.listToString("[", $[members]$, ", ", "]")$

%exp->#Set->setComp = "{" [first] " | " [bindings] + $($[predicate]$ == null ? "}" : " & " + $[predicate]$ + "}")$
%exp->#Set->setEnum = "" + $Utils.listToString("{", $[members]$, ", ", "}")$
%exp->#Set->setRange = "{" [first] ", ... ," + [last] "}"
 
//  Types
%type->#basic->boolean = "bool"
%type->#basic->char="char"
%type->#basic->token="token"

%type->#basic->#numeric->int ="int"
%type->#basic->#numeric->natOne="nat1"
%type->#basic->#numeric->nat="nat"
%type->#basic->#numeric->rational="rat"
%type->#basic->#numeric->real="real"

%type->bracket ="(" [type] ")"
%type->class =[classdef]$.getName().name$
%type->function = "(" + $($ [parameters]$.isEmpty() ? "()" : Utils.listToString($[parameters]$, " * ")) + ($[partial]$ ? " -> " : " +> ")$ + [result] + ")"
%type->#invariant->named = [name]
%type->#invariant->record = [name]
//map
%type->operation = "(" + $($[parameters]$.isEmpty() ? "()" : Utils.listToString($[parameters]$, " * ")) + " ==> "$ + [result] + ")"
%type->optional = "[" [type] "]"
%type->parameter = "@" [name]
%type->product = "" +$Utils.listToString("(",$ [types] $, " * ", ")")$
%type->quote = "<" [value] ">"
%type->seq = ""+ $($[empty]$ ? "[]" : "seq of (" + $  [seqof] $+ ")" )$ 
%type->seq1 = "seq1 of (" + [seqof] + ")"
%type->set = ""+ $($[empty]$ ? "{}" : "set of (" +$ [setof]$ + ")")$
%type->undefined = "(undefined)"
%type->union = ""+$($[types]$.size() == 1?$ [types]$.iterator().next().toString() : Utils.setToString($[types]$, " | "))$
%type->unknown = "?"
%type->unresolved = "(unresolved " + [typename] + ")"
%type->voidReturn = "(return)"
%type->void = "()"       

//  Patterns
%pattern->boolean = [value]
%pattern->character = [value]
%pattern->concatenation = [left] " ^ " [right]
%pattern->expression = "(" [exp] ")"
%pattern->identifier = [name]
%pattern->ignore = "-"
%pattern->integer = [value]
%pattern->nil = "nil"
%pattern->quote = [value]
%pattern->real = [value]
%pattern->record = "mk_" [typename]  "(" + $Utils.listToString($[plist]$)$ + ")"
%pattern->seq = "[" [plist] "]"
%pattern->set = "{" [plist] "}"
%pattern->string = [value]
%pattern->tuple = "mk_"  "(" + $Utils.listToString($[plist]$)$ + ")"
%pattern->union = [left] " union " [right]

  

//  Definitions
%definition->assignment = [name] ":"  [type] " := " [expression]
%definition->instanceVariable = [name] ":"  [type] " := " [expression]
%definition->#class->bus = "class " [name]$.getName()+ ($[supernames]$.isEmpty() ? "" : " is subclass of " +$ [supernames]$) + "\n" + ToStringUtil.getDefinitionListString($[definitions]$)$ +
                "end "  [name]$.getName()$ + "\n"
%definition->#class->cpu = "class " [name]$.getName()+ ($[supernames]$.isEmpty() ? "" : " is subclass of " +$ [supernames]$) + "\n" + ToStringUtil.getDefinitionListString($[definitions]$)$ +
                "end "  [name]$.getName()$ + "\n"
%definition->#class->system = "class " [name]$.getName()+ ($[supernames]$.isEmpty() ? "" : " is subclass of " +$ [supernames]$) + "\n" + ToStringUtil.getDefinitionListString($[definitions]$)$ +
                "end "  [name]$.getName()$ + "\n"
%definition->#class->class = "class " [name]$.getName()+ ($[supernames]$.isEmpty() ? "" : " is subclass of " +$ [supernames]$) + "\n" + ToStringUtil.getDefinitionListString($[definitions]$)$ +
                "end "  [name]$.getName()$ + "\n"
%definition->classInvariant = "inv" [expression]
%definition->equals = ""+ $($[pattern]$ != null ? $[pattern]$ : $[typebind]$ != null ? $[typebind]$ : $[setbind]$)$ + " = " + [test]
%definition->explicitFunction = ""+$ToStringUtil.getExplicitFunctionString(this)$ 
%definition->external = ""+$($[readOnly]$ ? "ext rd " : "ext wr ")+$  [state]$.getName()$
%definition->implicitFunction = ""+$ToStringUtil.getImplicitFunctionString(this)$
%definition->explicitOperation = ""+$ToStringUtil.getExplicitOperationString(this)$
%definition->implicitOperation = ""+$ToStringUtil.getImplicitOperationString(this)$
%definition->imported = [def]
%definition->inherited = [superdef] 
//%definition->local = 
%definition->multiBindList = "def " + $Utils.listToString($[bindings]$)$
%definition->mutexSync = "mutex(" + $($[operations]$.isEmpty() ? "all)" :
                Utils.listToString("", $[operations]$, ", ", ")"))$
//%definition->namedTrace = [pathname] " = " [terms]
%definition->perSync =  "per " [opname] " => " [guard]
%definition->renamed = [def]  " renamed " [name]
%definition->state = "state " [name] "of\n" [fields]+$
            ($[invPattern]$ == null ? "" : "\n\tinv " + $[invPattern]$ + " == " + $[invExpression]$) +
            ($[initPattern]$ == null ? "" : "\n\tinit " + $[initPattern]$ + " == " + $[initExpression]$)$
%definition->thread = "thread " [statement]
%definition->type = [name]$.getName() + " = " + $[type]$/*.toDetailedString()*/ +
                ($[invPattern]$ == null ? "" :
                    "\n\tinv " + $[invPattern]$ + " == " + $[invExpression]$)$
%definition->untyped = "Unknown type definition " [name] 
%definition->value = [pattern] +$($[type]$ == null ? "" : ":" + $[type]$) + " = " +$ [expression]



//%definition->value = [pattern] " : " [expType] " = " [expression]

//  Statements




