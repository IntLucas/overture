Tokens
/* This section declared tokens as internal types or external classes
 * internal definitions:
 *  plus='+';
 *
 * external
 *  location = 'java:org.overturetool.vdmj.lex.LexLocation';
 */
  LexToken = 'java:node:org.overturetool.vdmj.lex.LexToken';
  LexNameToken = 'java:node:org.overturetool.vdmj.lex.LexNameToken';
  LexIdentifierToken = 'java:node:org.overturetool.vdmj.lex.LexIdentifierToken';
  LexBooleanToken = 'java:node:org.overturetool.vdmj.lex.LexBooleanToken';
  LexCharacterToken = 'java:node:org.overturetool.vdmj.lex.LexCharacterToken';
  LexIntegerToken = 'java:node:org.overturetool.vdmj.lex.LexIntegerToken';
  LexQuoteToken = 'java:node:org.overturetool.vdmj.lex.LexQuoteToken';
  LexRealToken = 'java:node:org.overturetool.vdmj.lex.LexRealToken';
  LexStringToken = 'java:node:org.overturetool.vdmj.lex.LexStringToken';
  
  location = 'java:org.overturetool.vdmj.lex.LexLocation';
  plus = '+';
  java_Boolean = 'java:java.lang.Boolean';
  java_Integer = 'java:java.lang.Integer';
  java_String = 'java:java.lang.String';
  nameScope = 'java:enum:org.overturetool.vdmj.typechecker.NameScope';
  
  bool = 'bool';
  char = 'char';
  int = 'int';
  natOne = 'nat1';
  nat = 'nat';
  rat = 'rat';
  real = 'real';
  true = 'true';
  false = 'false';
  and_and = '&&';
  or_or = '||';  
  numbers_literal = 'some regex for numbers';
  char_literal = 'some regex for chars';
  quote_literal = 'some regex for quote types';
  real_literal = 'some regex for reals';
  string_literal = 'some regex for string';
  token_literal = 'some regex for token type';
  bool_literal = 'some regex for bool type';
  static = 'static';
  async = 'async';
  


Abstract Syntax Tree
/* This section declares the AST by giving root nodes and their possible sub classes
 *
 * exp {-> package='org.overture.ast.expressions'}
 *      = {subclass1} [field_name]:field_type_must_either_be_root_or_token ...
 *      ;
 *
 */

binop {-> package='org.overture.ast.expressions'}
    =   {lazy_and} 
    |   {equivalent} 
    |   {implies} 
    |   {lazy_or} 
    |   {comp} 
    |   {domainResBy} 
    |   {domainResTo} 
    |   {equals} 
    |   {inSet} 
    |   {mapUnion} 
    |   {notEqual} 
    |   {notInSet} 
    |   {div} 
    |   {divide} 
    |   {greaterEqual} 
    |   {greater} 
    |   {lessEqual} 
    |   {less} 
    |   {mod}     
    |   {plus} 
    |   {rem} 
    |   {subtract} 
    |   {times} 
    |   {plusPlus} 
    |   {properSubset} 
    |   {rangeResBy} 
    |   {rangeResTo} 
    |   {seqConcat} 
    |   {setDifference} 
    |   {setIntersect} 
    |   {setUnion} 
    |   {starStar} 
    |   {subset}          
    ;
    
unop {-> package='org.overture.ast.expressions'}
    =   {absolute} 
    |   {cardinality}  
    |   {distConcat} 
    |   {distIntersect}  
    |   {distMerge} 
    |   {distUnion} 
    |   {elements}
    |   {floor}  
    |   {head} 
    |   {indices}  
    |   {len} 
    |   {mapDomain} 
    |   {mapInverse} 
    |   {mapRange} 
    |   {not}  
    |   {powerSet} 
    |   {reverse}  
    |   {tail} 
    |   {unaryMinus}
    |   {unaryPlus}       
    ;
    
exp {-> package='org.overture.ast.expressions'}
    =   {apply} [root]:exp [args]:exp*
    |   {binop} [left]:exp binop [right]:exp
    |   {boolean_const} [value]:LexBooleanToken
    |   {cases} [expression]:exp [cases]:alternative.case* [others]:exp
    |   {char_const} [value]:LexCharacterToken
    |   {elseIf} [elseIf]:exp [then]:exp  
    |   {exists1}  [bind]:bind [predicate]:exp
    |   {exists} [bindList]:multipleBind* [predicate]:exp
    |   {field} [object]:exp [memberName]:LexNameToken [field]:LexIdentifierToken
    |   {fieldNumber} [tuple]:exp [field]:LexIntegerToken
    |   {forAll} [bindList]:multipleBind* [predicate]:exp
    |   {funcInstatiation} [function]:exp [actualTypes]:type*
    |   {history} [hop]:LexToken [opnames]:LexNameToken*
    |   {if} [test]:exp [then]:exp [elseList]:elseIf* [else]:exp
    |   {int_const} [value]:LexIntegerToken
    |   {iota} [bind]:bind [predicate]:exp
    |   {is} [typeName]:LexNameToken [test]:exp
    |   {isOfBaseClass} [baseClass]:LexNameToken [exp]:exp
    |   {isOfClass} [className]:LexNameToken [exp]:exp
    |   {lambda} [bindList]:bind.type* [expression]:exp    
    |   {letBeSt} [bind]:multipleBind [suchThat]:exp [value]:exp
    |   {letDef} [localDefs]:definition* [expression]:exp
    |   {def} [localDefs]:definition* [expression]:exp
//    |   {mapComp} [first]:maplet [bindings]:multipleBind [predicate]:exp
//    |   {mapEnum} [members]:maplet*     
    |   #Map
    |   {maplet}  [left]:exp [right]:exp
    |   {mkBasic} [arg]:exp
    |   {mkType} [typeName]:LexNameToken [args]:exp*
    |   {mu} [recordType]:exp [modifiers]:modifier.record*
    |   {new} [className]:LexIdentifierToken [args]:exp*
    |   {nil} 
    |   {notYetSpecified} 
    //|   {postOp} [opname]:lextokenname [preexpression]:exp [postexpression]:exp [errors]:errorCase* [state]:stateDefinition
    |   {pre} [function]:exp [args]:exp*
    //|   {preOp} [opname]:lextokenname [expression]:exp  [errors]:errorCase* [state]:stateDefinition
    |   {quote_const} [value]:LexQuoteToken
    |   {real_const} [value]:LexRealToken
    |   {sameBaseClass} [left]:exp [right]:exp
    |   {sameClass} [left]:exp [right]:exp
    |   {self} [name]:LexNameToken
//    |   {seqComp} [first]:exp [setBind]:bind.set [predicate]:exp
//    |   {seqEnum} [members]:exp*
    |   #Seq
//    |   {setComp} [first]:exp [bindings]:multipleBind* [predicate]:exp
//    |   {setEnum} [members]:exp*
//    |   {setRange} [first]:exp [last]:exp
    |   #Set
    |   {stateInit} [state]:state
    |   {string_const} [value]:LexStringToken
    |   {subclassResponsibility} 
    |   {subseq} [seq]:exp [from]:exp [to]:exp
    |   {threadId} 
    |   {time} 
    |   {tuple} [args]:exp*    
    |   {unary} unop [exp]:exp     
    |   {undefined}
    |   {variable} [name]:LexNameToken           
    ;
    
#Map {-> package='org.overture.ast.expressions'}
    =   {mapComp} [first]:maplet [bindings]:multipleBind* [predicate]:exp
    |   {mapEnum} [members]:maplet* 
    ;
    
#Seq {-> package='org.overture.ast.expressions'}
    =   {seqComp} [first]:exp [setBind]:bind.set [predicate]:exp
    |   {seqEnum} [members]:exp*
    ;
    
#Set {-> package='org.overture.ast.expressions'}
    =   {setComp} [first]:exp [bindings]:multipleBind* [predicate]:exp
    |   {setEnum} [members]:exp*
    |   {setRange} [first]:exp [last]:exp
    ;
    
modifier {-> package='org.overture.ast.expressions'}
    = {record} [tag]:LexIdentifierToken [value]:exp
    ;
    
alternative {-> package='org.overture.ast.expressions'}
    = {case} [location]:location [cexp]:exp [pattern]:pattern [result]:exp
    ;
    
boolean_const
    =   {true}
    |   {false}
    ;
    
type {-> package='org.overture.ast.types'}
    =   #basic
    |   {bracket} [type]:type
    |   {class} [name]:LexNameToken [classdef]:definition.class 
    |   {function} [partial]:java_Boolean [parameters]:type* [result]:type
    |   #invariant
    |   {map}   [from]:type [to]:type [empty]:java_Boolean
    |   {inMap} [from]:type [to]:type 
    |   {operation} [parameters]:type* [result]:type
    |   {optional} [type]:type
    |   {parameter} [name]:LexNameToken
    |   {product} [types]:type*
    |   {quote} [value]:string_literal //TODO whats the value type
    |   {seq} [seqof]:type [empty]:java_Boolean
    |   {seq1} [seqof]:type [empty]:java_Boolean
    |   {set} [setof]:type [empty]:java_Boolean
    |   {undefined}
    |   {union} [types]:type* //should be a type set
    |   {unknown}
    |   {unresolved} [typename]:LexNameToken
    |   {voidReturn}
    |   {void} 
    ;

#invariant {-> package='org.overture.ast.types'}
    =   {named} [typename]:LexNameToken [type]:type [invdef]:explicitFunction //super = invariant type
    |   {record} [typename]:LexNameToken [fields]:field* [invdef]:explicitFunction //super = invariant type
    ;

#basic {-> package='org.overture.ast.types'}
    =   {boolean}
    |   {char}
    |   #numeric     
    |   {token}
    ;

#numeric {-> package='org.overture.ast.types'}
    =   {int} 
    |   {natOne} 
    |   {nat} 
    |   {rational} 
    |   {real} 
    ;

field {-> package='org.overture.ast.types'}
    =   {field} [access]:accessSpecifier [static]:static [async]:async [tagname]:LexNameToken [tag]:java_String [type]:type [equalityAbstraction]:java_Boolean
    ;
accessSpecifier  {-> package='org.overture.ast.types'}
  = {accessSpecifier} [access]:access [static]:static [async]:async 
  ;
access  {-> package='org.overture.ast.definitions'}
    =   {public}
    |   {protected}
    |   {private}
    ;
//  = {accessSpecifier} [isStatic]:bool_java [isAsync]:bool_java [access]:token 
//  ;

pattern {-> package='org.overture.ast.patterns'}
    =   {boolean} [value]:LexBooleanToken
    |   {character} [value]:LexCharacterToken
    |   {concatenation} [left]:pattern [right]:pattern
    |   {expression} [exp]:exp
    |   {identifier} [name]:LexNameToken
    |   {ignore} 
    |   {integer} [value]:LexIntegerToken
    |   {nil}
    |   {quote} [value]:LexQuoteToken
    |   {real} [value]:LexRealToken
    |   {record} [typename]:LexNameToken [plist]:pattern* [type]:type
    |   {seq} [plist]:pattern*
    |   {set} [plist]:pattern*
    |   {string} [value]:LexStringToken
    |   {tuple} [plist]:pattern*
    |   {union} [left]:pattern [right]:pattern
    ;
    
pair {-> package='org.overture.ast.patterns'}
    = {patternType} [pattern]:pattern [type]:type
    ; 
    
bind {-> package='org.overture.ast.patterns'}
    =   {set} [pattern]:pattern [set]:exp //binds
    |   {type} [pattern]:pattern [type]:type //binds
    ;

multipleBind {-> package='org.overture.ast.patterns'}
    =   {multipleSet} [plist]:pattern* [set]:exp //binds
    |   {multipleType}  [plist]:pattern* [type]:type //binds
    ;

patternBind {-> package='org.overture.ast.patterns'}
    = {def} [location]:location [pattern]:pattern [bind]:bind
    ;
    
definition {-> package='org.overture.ast.definitions'}
    =   {assignment} [expression]:exp [expType]:type
    |   {instanceVariable} [expression]:exp [expType]:type [initialized]:boolean_const [oldname]:LexNameToken
    |   {class} [className]:LexNameToken [supertypes]:type* [supernames]:LexNameToken* [definitions]:definition*
    //| missing bus cpu and system defs
    |   {classInvariant}  [expression]:exp
    |   {equals} [pattern]:pattern [typebind]:bind.type [setbind]:bind.set [test]:exp [expType]:type [defType]:type [defs]:definition*
    |   {explicitFunction} [typeParams]:LexNameToken* [functionType]:function [paramPatternList]:pattern_inner_list* 
                           [precondition]:exp [predef]:explicitFunction 
                           [postcondition]:exp [postdef]:explicitFunction 
                           [body]:exp [actualResult]:type
                           [isTypeInvariant]:java_Boolean 
                           [measure]:LexNameToken [measureDef]:definition [recursive]:java_Boolean [measureLexical]:java_Integer
                           [isCurried]:java_Boolean 
                              
    //| {explicitOperation_def} [typeParams]:LexNameToken* [type]:operation [paramPatternList]:pattern* [precondition]:exp [postcondition]:exp [body]:statement  
    |   {external} [state]:definition [readOnly]:boolean_const [oldname]:LexNameToken
    |   {implicitFunction} [typeParams]:LexNameToken* [typeFunction]:function [paramPatternList]:pair.patternType* 
                           [precondition]:exp [predef]:explicitFunction 
                           [postcondition]:exp [postdef]:explicitFunction 
                           [body]:exp 
                           [isTypeInvariant]:java_Boolean [measure]:LexNameToken [isCurried]:java_Boolean 
    //| TODO implicit operation def
    |   {imported} [def]:definition
    |   {inherited} [superdef]:definition [oldname]:LexNameToken
    |   {local} 
    |   {multiBindList} [bindings]:multipleBind* [defs]:definition*
    |   {mutexSync} [operations]:LexNameToken*
    // |    {namedTrace_def} [pathname]:string* [terms]:traceDefinitionTerm*
    |   {perSync} [opname]:LexNameToken [guard]:exp
    |   {renamed} [def]:definition
    |   {state} [fields]:field* [invPattern]:pattern [invExpression]:exp [initPattern]:pattern [initExpression]:exp [stateDefs]:definition*
    // |    {thread_def} [statement]:statement [operationName]:LexNameToken [operationDef]:explicitOperation_def
    |   {type} [invType]:invariant [invPattern]:pattern [invExpression]:exp
    |   {untyped}
    |   {value} [pattern]:pattern [expression]:exp [defs]:definition* [expType]:type 
    ;

modules {-> package='org.overture.ast.modules'}
    = {module} [name]:LexNameToken [imports]:imports.module
        //[exports]:moduleExports
        [importdefs]:definition*
        //[exportdefs]:definition*
        [defs]:definition*
        ;

imports {-> package='org.overture.ast.modules'} 
    = {module} [name]:LexIdentifierToken [imports]:fromModule*
    | {fromModule} [name]:LexIdentifierToken [signatures]:signatures
    | {signatures} [importList]:import*
    | {import} [location]:location [name]:LexNameToken [renamed]:LexNameToken [from]:module
    ;
 

patternList {-> package='org.overture.ast.patterns'}
    = {pattern_inner_list} [list]:pattern*
    ;
    
/*
    Statements
*/

stm {-> package='org.overture.ast.statements'}
    =   {always} [always]:stm [body]:stm
    |   {assignment} [target]:stateDesignator [exp]:exp
    |   {atomic} [assignments]:stm.assignment*
    |   {callObject} [designator]:objectDesignator [classname]:LexNameToken [args]:exp*
    |   {call} [name]:LexNameToken [args]:exp*
    |   {cases} [exp]:exp [cases]:alternativeStm.case [others]:stm*//? is this correct
    |   {classInvariant} [name]:LexNameToken [invDefs]:definition*
    |   {cycles} [cycles]:exp [statement]:stm
    |   {duration} [duration]:exp [statement]:stm
    |   {elseIf} [elseIf]:exp [thenStm]:stm
    |   {error}
    |   {exit}
    |   {forAll} [pattern]:pattern [set]:exp [statement]:stm
    |   {forIndex} [var]:LexNameToken [from]:exp [to]:exp [by]:exp [statement]:stm
    |   {forPatternBind} [patternBind]:patternBind [reverse]:java_Boolean [exp]:exp [statement]:stm
    |   {if} [ifExp]:exp [thenStm]:stm [elseIf]:stm.elseIf* [elseStm]:stm
    |   {letBe} [bind]:multipleBind [suchThat]:exp [statement]:stm
//    |   {letDef}
    |   {notYetSpecified} [opname]:LexNameToken [args]:exp*
    |   {return} [expression]:exp
    |   #SimpleBlock
    |   {skip}
//    |   {specification}
    |   {start} [obj]:exp
    |   {subclassResponsibility}
    //|   {tixe}
    //|   {traceVariable}
    |   {trap} [patternBind]:patternBind [with]:stm [body]:stm
    |   {while} [exp]:exp [statement]:stm 
    ; 
    
#SimpleBlock {-> package='org.overture.ast.statements'}
    =   {block} [assignmentDefs]:definition*
    |   {nonDeterministic}
    ;
    
stateDesignator {-> package='org.overture.ast.statements'}
    =   {field} [object]:stateDesignator [field]:LexIdentifierToken
    |   {identifier} [name]:LexNameToken
    |   {mapSeq} [mapseq]:stateDesignator [exp]:exp
    ;
    
objectDesignator {-> package='org.overture.ast.statements'}
    =   {apply} [object]:objectDesignator [args]:exp*
    |   {field} [object]:objectDesignator [className]:LexNameToken [fieldName]:LexIdentifierToken
    |   {identifier} [name]:LexNameToken [expression]:exp.variable
    |   {new} [expression]:exp.new
    |   {self} [self]:LexNameToken
    ;

alternativeStm {-> package='org.overture.ast.statements'}
    = {case} [location]:location [cexp]:exp [pattern]:pattern [result]:exp
    ;

Aspect Declaration
/* This section allows fields of root types to be declared e.g. exp*/

%unop = [location]:location
    ;

%binop = [location]:location
    ;

%exp = [type]:type [location]:location
    ;

%type = [location]:location
     ; 

%pattern = [location]:location [definitions]:definition*
    ;

%bind = [location]:location
    ;

%multipleBind = [location]:location
    ;
    
%definition = [location]:location [name]:LexNameToken [nameScope]:nameScope [used]:java_Boolean [classDefinition]:definition.class [type]:type // [pass]:pass
    ;
    
%stm->#SimpleBlock 
    =   [statements]:stm*
    ;
