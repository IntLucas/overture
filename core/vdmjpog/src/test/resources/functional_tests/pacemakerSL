-- TCErrors: WARNING:5007:488,1 WARNING:5007:490,1 WARNING:5007:488,1 WARNING:5007:490,1 WARNING:5007:488,1 WARNING:5007:490,1 WARNING:5007:488,1 WARNING:5007:490,1 WARNING:5007:488,1 WARNING:5007:490,1 WARNING:5012:537,1 WARNING:5000:662,16 WARNING:5008:788,13 WARNING:5000:76,1 WARNING:5000:166,1 WARNING:5000:177,1 WARNING:5000:193,1 WARNING:5000:330,1 WARNING:5000:435,4 WARNING:5000:438,4 WARNING:5000:440,4 WARNING:5000:441,4 WARNING:5000:489,1 WARNING:5000:490,1 WARNING:5000:493,1 WARNING:5000:512,1 WARNING:5000:533,1 WARNING:5000:662,1 WARNING:5000:774,4 WARNING:5000:783,1 PROOFOBLIGATION: fDc3IFBhY2VtYWtlciwgbSwoZm9yYWxsIHI6UmVhY3Rpb25UaW1lbGluZSAmIAogIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgcikgJgogICAgaSBpbiBzZXQgaW5kcyByKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDgwIFBhY2VtYWtlciwoZm9yYWxsIHI6UmVhY3Rpb25UaW1lbGluZSAmIAogIChsZXQgbTpzZXQgb2YgKG5hdDEpID0ge2kgfCBbaSBpbiBzZXQgKGluZHMgcildICYgKHIoaSkgPSA8UFVMU0U+KX0gaW4KICAgICgoKGxlbiByKSA9IChsZW4gaW5wKSkgPT4KICAgICAgMSBpbiBzZXQgaW5kcyByKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDg0IFBhY2VtYWtlciwoZm9yYWxsIHI6UmVhY3Rpb25UaW1lbGluZSAmIAogIChsZXQgbTpzZXQgb2YgKG5hdDEpID0ge2kgfCBbaSBpbiBzZXQgKGluZHMgcildICYgKHIoaSkgPSA8UFVMU0U+KX0gaW4KICAgICgoKGxlbiByKSA9IChsZW4gaW5wKSkgPT4KICAgICAgKChyKDEpID0gPFBVTFNFPikgPT4KICAgICAgICAoZm9yYWxsIHggaW4gc2V0IG0gJgogICAgICAgICAgKGZvcmFsbCB6IGluIHNldCBtICYKICAgICAgICAgICAgKCh6ID49IHgpID0+CiAgICAgICAgICAgICAgTFJMIDw+IDApKSkpKSkpCixub24temVybyxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDg2IFBhY2VtYWtlciwoZm9yYWxsIHI6UmVhY3Rpb25UaW1lbGluZSAmIAogIChsZXQgbTpzZXQgb2YgKG5hdDEpID0ge2kgfCBbaSBpbiBzZXQgKGluZHMgcildICYgKHIoaSkgPSA8UFVMU0U+KX0gaW4KICAgICgoKGxlbiByKSA9IChsZW4gaW5wKSkgPT4KICAgICAgKChyKDEpID0gPFBVTFNFPikgPT4KICAgICAgICAoZm9yYWxsIHggaW4gc2V0IG0gJgogICAgICAgICAgKG5vdCAoZXhpc3RzIFt6IGluIHNldCBtXSAmICgoeiA+PSB4KSBhbmQgKCh6IC0geCkgPD0gKDYwMDAwIC8gTFJMKSkpKSA9PgogICAgICAgICAgICAoZm9yYWxsIHogaW4gc2V0IChpbmRzIGlucCkgJgogICAgICAgICAgICAgICgoeiA+PSB4KSA9PgogICAgICAgICAgICAgICAgKCgoeiAtIHgpID4gQVJQKSA9PgogICAgICAgICAgICAgICAgICB6IGluIHNldCBpbmRzIGlucCkpKSkpKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc2IFBhY2VtYWtlciwoZm9yYWxsIGlucDpTZW5zZVRpbWVsaW5lICYKICBleGlzdHMgcjpSZWFjdGlvblRpbWVsaW5lICYgcG9zdF9QYWNlbWFrZXIoaW5wLCByKSkKLGZ1bmN0aW9uIHNhdGlzZmlhYmlsaXR5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE5NCBQYWNlbWFrZXIsIG0sKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIHIpICYKICAgIGkgaW4gc2V0IGluZHMgcikpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE5OSBQYWNlbWFrZXIsKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAobGV0IG06c2V0IG9mIChuYXQxKSA9IHtpIHwgW2kgaW4gc2V0IChpbmRzIHIpXSAmIChyKGkpID0gPFBVTFNFPil9IGluCiAgICAoKChsZW4gcikgPSAobGVuIGlucCkpID0+CiAgICAgIChmb3JhbGwgeCBpbiBzZXQgbSAmCiAgICAgICAgKGZvcmFsbCB6IGluIHNldCBtICYKICAgICAgICAgICgoeiA+PSB4KSA9PgogICAgICAgICAgICBMUkwgPD4gMCkpKSkpKQosbm9uLXplcm8sbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE5MyBQYWNlbWFrZXIsKGZvcmFsbCBpbnA6U2Vuc2VUaW1lbGluZSAmCiAgZXhpc3RzIHI6UmVhY3Rpb25UaW1lbGluZSAmIHBvc3RfUGFjZW1ha2VyKGlucCwgcikpCixmdW5jdGlvbiBzYXRpc2ZpYWJpbGl0eSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDMzMSBQYWNlbWFrZXIsIG0sKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAoZm9yYWxsIGkgaW4gc2V0IChkb20gcikgJgogICAgaSBpbiBzZXQgZG9tIHIpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDMzNCBQYWNlbWFrZXIsKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAobGV0IG06c2V0IG9mIChUaW1lKSA9IHtpIHwgW2kgaW4gc2V0IChkb20gcildICYgKHIoaSkgPSA8UFVMU0U+KX0gaW4KICAgIDEgaW4gc2V0IGRvbSByKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDMzOCBQYWNlbWFrZXIsKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAobGV0IG06c2V0IG9mIChUaW1lKSA9IHtpIHwgW2kgaW4gc2V0IChkb20gcildICYgKHIoaSkgPSA8UFVMU0U+KX0gaW4KICAgICgocigxKSA9IDxQVUxTRT4pID0+CiAgICAgIChmb3JhbGwgeCBpbiBzZXQgbSAmCiAgICAgICAgKGZvcmFsbCB5IGluIHNldCBtICYKICAgICAgICAgIExSTCA8PiAwKSkpKSkKLG5vbi16ZXJvLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDMzMCBQYWNlbWFrZXIsKGZvcmFsbCBpbnA6U2Vuc2VUaW1lbGluZSAmCiAgZXhpc3RzIHI6UmVhY3Rpb25UaW1lbGluZSAmIHBvc3RfUGFjZW1ha2VyKGlucCwgcikpCixmdW5jdGlvbiBzYXRpc2ZpYWJpbGl0eSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQxNCBTZW5zZVRpbWVsaW5lLCBsLChmb3JhbGwgc3RsOnNlcSBvZiAoKFNlbnNlICogW0FjY2VsZXJvbWV0ZXJEYXRhXSAqIFRpbWUpKSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBzdGwpICYgKChzdGwoaSkuMikgPD4gbmlsKSA9PgogICAgaSBpbiBzZXQgaW5kcyBzdGwpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQxNCBTZW5zZVRpbWVsaW5lLCBsLChmb3JhbGwgc3RsOnNlcSBvZiAoKFNlbnNlICogW0FjY2VsZXJvbWV0ZXJEYXRhXSAqIFRpbWUpKSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBzdGwpICYKICAgIGkgaW4gc2V0IGluZHMgc3RsKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQxNSBTZW5zZVRpbWVsaW5lLChmb3JhbGwgc3RsOnNlcSBvZiAoKFNlbnNlICogW0FjY2VsZXJvbWV0ZXJEYXRhXSAqIFRpbWUpKSAmCiAgKGxldCBsOnNlcSBvZiAoW0FjY2VsZXJvbWV0ZXJEYXRhXSkgPSBbKHN0bChpKS4yKSB8IGkgaW4gc2V0IChpbmRzIHN0bCkgJiAoKHN0bChpKS4yKSA8PiBuaWwpXSBpbgogICAgMSBpbiBzZXQgaW5kcyBsKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQxNSBTZW5zZVRpbWVsaW5lLChmb3JhbGwgc3RsOnNlcSBvZiAoKFNlbnNlICogW0FjY2VsZXJvbWV0ZXJEYXRhXSAqIFRpbWUpKSAmCiAgKGxldCBsOnNlcSBvZiAoW0FjY2VsZXJvbWV0ZXJEYXRhXSkgPSBbKHN0bChpKS4yKSB8IGkgaW4gc2V0IChpbmRzIHN0bCkgJiAoKHN0bChpKS4yKSA8PiBuaWwpXSBpbgogICAgKChsKDEpID0gSElHSCkgPT4KICAgICAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBsKSAmCiAgICAgICAgaSBpbiBzZXQgaW5kcyBsKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQxNSBTZW5zZVRpbWVsaW5lLChmb3JhbGwgc3RsOnNlcSBvZiAoKFNlbnNlICogW0FjY2VsZXJvbWV0ZXJEYXRhXSAqIFRpbWUpKSAmCiAgKGxldCBsOnNlcSBvZiAoW0FjY2VsZXJvbWV0ZXJEYXRhXSkgPSBbKHN0bChpKS4yKSB8IGkgaW4gc2V0IChpbmRzIHN0bCkgJiAoKHN0bChpKS4yKSA8PiBuaWwpXSBpbgogICAgKChsKDEpID0gSElHSCkgPT4KICAgICAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBsKSAmCiAgICAgICAgKGkgLSAxKSBpbiBzZXQgaW5kcyBsKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ1MyBQYWNlbWFrZXIsKG5vdCAoaW5wID0gW10pID0+CiAgaW5wIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ1MyBQYWNlbWFrZXIsKG5vdCAoaW5wID0gW10pID0+CiAgaW5wIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ1OSBIZWFydENvbnRyb2xsZXIsdGltZSBpbiBzZXQgZG9tIHJhdGVDaGFuZ2VQbGFuCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ4OCBNRUQsaW52X0FjY2VsZXJvbWV0ZXJEYXRhKDMpIGFuZCAoaXNfbmF0KDMpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ4OSBMT1csaW52X0FjY2VsZXJvbWV0ZXJEYXRhKDApIGFuZCAoaXNfbmF0KDApKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ5MCBNRUQsaW52X0FjY2VsZXJvbWV0ZXJEYXRhKDEpIGFuZCAoaXNfbmF0KDEpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ5MSBISUdILGludl9BY2NlbGVyb21ldGVyRGF0YSgyKSBhbmQgKGlzX25hdCgyKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ5NyBzZW5zZWREYXRhLGlzXygoKCgoW21rXyg8Tk9ORT4sIG5pbCwgaSkgfCBpIGluIHNldCB7MSwgLi4uICwxMjB9XSBeIFtta18oPE5PTkU+LCA8SElHSD4sIDEyMSldKSBeIFtta18oPE5PTkU+LCBuaWwsIGkpIHwgaSBpbiBzZXQgezEyMSwgLi4uICwxOTB9XSkgXiBbbWtfKDxOT05FPiwgPExPVz4sIDE5MSldKSBeIFtta18oPE5PTkU+LCBuaWwsIGkpIHwgaSBpbiBzZXQgezE5MiwgLi4uICw0MzZ9XSksIHNlcSBvZiAoKFNlbnNlICogW0FjY2VsZXJvbWV0ZXJEYXRhXSAqIFRpbWUpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU1MCBTZW5zZWRBdHJpdW0sKGZvcmFsbCB0OlRpbWUsIHI6UmVhY3Rpb25UaW1lbGluZSwgQUE6QWxhcm0sIFZBOkFsYXJtLCBMYXN0QTpUaW1lLCBMYXN0VjpUaW1lICYKICBpc18oKGlmICgoKHQgLSBMYXN0QSkgPCBBUlApIG9yICgoVkEgPiAwKSBvciAoKHQgLSBMYXN0QSkgPCBQVkFSUCkpKQogIHRoZW4gU2Vuc2VkTm90aGluZyh0LCByLCBBQSwgVkEsIExhc3RBLCBMYXN0VikKICBlbHNlIG1rXyhyLCAwLCAodCArIEFWRCksIHQsIExhc3RWKSksIChSZWFjdGlvblRpbWVsaW5lICogQWxhcm0gKiBBbGFybSAqIFRpbWUgKiBUaW1lKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU1OCBTZW5zZWRWZW50cmljbGUsKGZvcmFsbCB0OlRpbWUsIHI6UmVhY3Rpb25UaW1lbGluZSwgQUE6QWxhcm0sIFZBOkFsYXJtLCBMYXN0QTpUaW1lLCBMYXN0VjpUaW1lICYKICBpc18oKGlmICgodCAtIExhc3RWKSA8IFZSUCkKICB0aGVuIFNlbnNlZE5vdGhpbmcodCwgciwgQUEsIFZBLCBMYXN0QSwgTGFzdFYpCiAgZWxzZSBta18ociwgKHQgKyBWQUQpLCAwLCBMYXN0QSwgdCkpLCAoUmVhY3Rpb25UaW1lbGluZSAqIEFsYXJtICogQWxhcm0gKiBUaW1lICogVGltZSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU2NiBTZW5zZWROb3RoaW5nLChmb3JhbGwgdDpUaW1lLCByOlJlYWN0aW9uVGltZWxpbmUsIEFBOkFsYXJtLCBWQTpBbGFybSwgTGFzdEE6VGltZSwgTGFzdFY6VGltZSAmCiAgaXNfKChpZiAoKEFBID4gMCkgYW5kICh0ID49IEFBKSkKICB0aGVuIG1rXygociB1bmlvbiB7bWtfKHQsIDxBVFJJVU0+KX0pLCAwLCAodCArIEFWRCksIHQsIExhc3RWKQogIGVsc2VpZiAoKFZBID4gMCkgYW5kICh0ID49IFZBKSkKICB0aGVuIG1rXygociB1bmlvbiB7bWtfKHQsIDxWRU5UUklDTEU+KX0pLCAodCArIFZBRCksIDAsIExhc3RBLCB0KQogIGVsc2UgbWtfKHIsIEFBLCBWQSwgTGFzdEEsIExhc3RWKSksIChSZWFjdGlvblRpbWVsaW5lICogQWxhcm0gKiBBbGFybSAqIFRpbWUgKiBUaW1lKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY2NSBQYWNlbWFrZXIsKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAobGV0IG5QdWxzZXNBdHJpYTpuYXQgPSAoY2FyZCB7aSB8IFtpIGluIHNldCByXSAmICgoaS4xKSA9IDxBVFJJQT4pfSksIG5QdWxzZXNWZW50cmljbGU6bmF0ID0gKGNhcmQge2kgfCBbaSBpbiBzZXQgcl0gJiAoKGkuMSkgPSA8VkVOVFJJQ0xFPil9KSBpbgogICAgbiA8PiAwKSkKLG5vbi16ZXJvLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY2NyBQYWNlbWFrZXIsKGZvcmFsbCByOlJlYWN0aW9uVGltZWxpbmUgJiAKICAobGV0IG5QdWxzZXNBdHJpYTpuYXQgPSAoY2FyZCB7aSB8IFtpIGluIHNldCByXSAmICgoaS4xKSA9IDxBVFJJQT4pfSksIG5QdWxzZXNWZW50cmljbGU6bmF0ID0gKGNhcmQge2kgfCBbaSBpbiBzZXQgcl0gJiAoKGkuMSkgPSA8VkVOVFJJQ0xFPil9KSBpbgogICAgKCgoblB1bHNlc0F0cmlhIC8gbikgPj0gKChMUkwgLyA2MCkgLyAxMDAwKSkgPT4KICAgICAgbiA8PiAwKSkpCixub24temVybyxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDY2MiBQYWNlbWFrZXIsKGZvcmFsbCBta18oaW5wLCBuKTooU2Vuc2VkVGltZWxpbmUgKiBuYXQxKSAmCiAgZXhpc3RzIHI6UmVhY3Rpb25UaW1lbGluZSAmIHBvc3RfUGFjZW1ha2VyKG1rXyhpbnAsIG4pLCByKSkKLGZ1bmN0aW9uIHNhdGlzZmlhYmlsaXR5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDc3MCBMUkwsaW52X1BQTSg2MCkgYW5kIChpc19uYXQxKDYwKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc3MSBNU1IsaW52X1BQTSgxMjApIGFuZCAoaXNfbmF0MSgxMjApKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc3MiBUaHJlc2hvbGQsaW52X0FjdGl2aXR5RGF0YSg2KSBhbmQgKGlzX25hdDEoNikpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDc3NCBSZXNwb25zZUZhY3RvcixpbnZfUkYoOCkgYW5kIChpc19uYXQxKDgpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4NiBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgdCBpbiBzZXQgZG9tIG91dCkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc4NiBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKHQgLSBSZWFjdGlvblRpbWUpIGluIHNldCBkb20gaW5wKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4NiBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKGlzX25hdDEoKHQgLSBSZWFjdGlvblRpbWUpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4NiBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKG5vdCAoaW5wKCh0IC0gUmVhY3Rpb25UaW1lKSkgPiBUaHJlc2hvbGQpID0+CiAgICAgICh0IC0gMSkgaW4gc2V0IGRvbSBvdXQpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4NiBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKG5vdCAoaW5wKCh0IC0gUmVhY3Rpb25UaW1lKSkgPiBUaHJlc2hvbGQpID0+CiAgICAgIChpc19uYXQxKCh0IC0gMSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4OSBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKCgob3V0KHQpID0gTVNSKSA9PiAoKGlucCgodCAtIFJlYWN0aW9uVGltZSkpID4gVGhyZXNob2xkKSBvciAob3V0KCh0IC0gMSkpID0gTVNSKSkpID0+CiAgICAgIChmb3JhbGwgdCBpbiBzZXQgKChkb20gaW5wKSBcIHsxfSkgJgogICAgICAgIHQgaW4gc2V0IGRvbSBvdXQpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc4OSBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKCgob3V0KHQpID0gTVNSKSA9PiAoKGlucCgodCAtIFJlYWN0aW9uVGltZSkpID4gVGhyZXNob2xkKSBvciAob3V0KCh0IC0gMSkpID0gTVNSKSkpID0+CiAgICAgIChmb3JhbGwgdCBpbiBzZXQgKChkb20gaW5wKSBcIHsxfSkgJgogICAgICAgICh0IC0gUmVjb3ZlcnlUaW1lKSBpbiBzZXQgZG9tIGlucCkpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4OSBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKCgob3V0KHQpID0gTVNSKSA9PiAoKGlucCgodCAtIFJlYWN0aW9uVGltZSkpID4gVGhyZXNob2xkKSBvciAob3V0KCh0IC0gMSkpID0gTVNSKSkpID0+CiAgICAgIChmb3JhbGwgdCBpbiBzZXQgKChkb20gaW5wKSBcIHsxfSkgJgogICAgICAgIChpc19uYXQxKCh0IC0gUmVjb3ZlcnlUaW1lKSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc4OSBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKCgob3V0KHQpID0gTVNSKSA9PiAoKGlucCgodCAtIFJlYWN0aW9uVGltZSkpID4gVGhyZXNob2xkKSBvciAob3V0KCh0IC0gMSkpID0gTVNSKSkpID0+CiAgICAgIChmb3JhbGwgdCBpbiBzZXQgKChkb20gaW5wKSBcIHsxfSkgJgogICAgICAgIChub3QgKGlucCgodCAtIFJlY292ZXJ5VGltZSkpIDwgVGhyZXNob2xkKSA9PgogICAgICAgICAgKHQgLSAxKSBpbiBzZXQgZG9tIG91dCkpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc4OSBTaW11bGF0ZSwoKDAgbm90IGluIHNldCAoZG9tIGlucCkpID0+IGZvcmFsbCBvdXQ6T3V0cHV0ICYgCiAgKGZvcmFsbCB0IGluIHNldCAoZG9tIGlucCkgJgogICAgKCgob3V0KHQpID0gTVNSKSA9PiAoKGlucCgodCAtIFJlYWN0aW9uVGltZSkpID4gVGhyZXNob2xkKSBvciAob3V0KCh0IC0gMSkpID0gTVNSKSkpID0+CiAgICAgIChmb3JhbGwgdCBpbiBzZXQgKChkb20gaW5wKSBcIHsxfSkgJgogICAgICAgIChub3QgKGlucCgodCAtIFJlY292ZXJ5VGltZSkpIDwgVGhyZXNob2xkKSA9PgogICAgICAgICAgKGlzX25hdDEoKHQgLSAxKSkpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc4MyBTaW11bGF0ZSwoZm9yYWxsIGlucDpJbnB1dCAmCiAgcHJlX1NpbXVsYXRlKGlucCkgPT4gZXhpc3RzIG91dDpPdXRwdXQgJiBwb3N0X1NpbXVsYXRlKGlucCwgb3V0KSkKLGZ1bmN0aW9uIHNhdGlzZmlhYmlsaXR5LG51bGwsVW5wcm92ZWR8


--PacemakerAAI.vdmsl

\section{AAI mode requirements}

The AAI code states

\begin{itemize}
\item[A] Pace the Atria.
\item[A] Sensing the Atria chamber.
\item[I] With inhibited response to sensing. A sense in the Atria inhibits a scheduled pace in it. 
\end{itemize}

\noindent This means the pacemaker must pace the atria chamber regarding the valid sensed data from the atria and the programmable parameters.


\paragraph{Programmable parameter requirements}

\begin{itemize}
\item LRL\ref{sym:LRL} shall be 60 ppm
\item URL\ref{sym:URL} shall be 120 ppm
\item ARP\ref{sym:ARP} shall be 250 ms
\item PVARP\ref{sym:PVARP} shall be 250 ms
\end{itemize}

\subsection*{Purpose and abstraction level}

The purpose is to model and validate the requirements of the Pacemaker AAI mode.

\begin{itemize}
\item Atrial Amplitude, Atrial Pulse With and Sensivity are discarded because they are not relevant for the propose.
\item In this mode the chamber is always the atria so the other chambers are discarded in the model.
\end{itemize}

\subsection*{VDM-SL module}

 The model of the requirements start by defining the input of the system as a sequence of senses in a chamber at a given time.

 The model of the requirements start by defining the value of the LRL.

\begin{vdm_al}
module PacemakerAAI

definitions 

values 
LRL     : nat = 60;
ARP     : nat = 250;
\end{vdm_al}

The input is a sequence and of sensed stimuli and the time of it.

\begin{vdm_al}
types 
SenseTimeline = seq of Sense;

Sense = <NONE> | <PULSE>;

\end{vdm_al}

The output will be a sequence of the reactions to the input that can be either do nothing or discharge a pulse on the Atria at a particular time.

\begin{vdm_al}
ReactionTimeline = seq of Reaction; 

Reaction = <NONE> | <PULSE>;
   
functions
\end{vdm_al}

The pacemaker its modelled as an implicit function stating that the bpm rate is larger or equal the LRL\cite{www:PacemakerCycles} and that every valid stimuli from the input triggers an artificial pulse response. The invalid ones are filtered by the ARP interval.

\begin{vdm_al}                         
Pacemaker (inp : SenseTimeline) r : ReactionTimeline
post let m = {i | i in set inds r & r(i) = <PULSE>}
     in len r = len inp 
        and
        r(1) = <PULSE> 
        and
        forall x in set m & (
           (exists y in set m & y > x) => 
                 (exists z in set m &  z >= x and z - x <= 60000/LRL)
                 or
                 (exists z in set inds inp &  z >= x and z - x > ARP and inp(z) = <PULSE>)
           );


end PacemakerAAI
\end{vdm_al}

\subsection{Requirements review}

\begin{itemize}
\item LRL \textbf{Modeled}
\item URL \textbf{Not modelled}\footnote{We discovered this requirement is contradictory and its a minor error in a table from the specification.}
\item ARP \textbf{Modeled}.
\item PVARP available to modes with atrial sensing is the time interval following a ventricular event when an atrial cardiac event shall not 
   \begin{enumerate}
   \item Inhibit an atrial pace. 
   \item Trigger a ventricular pace.
   \end{enumerate} \textbf{Not modelled}\footnote{We discovered this requirement is contradictory and its a minor error in a table from the specification.}
\end{itemize}


%\begin{rtinfo}
%[TotalxCoverage]{vdm.tc}[PacemakerAAI]
%Pace
%Pulse
%\end{rtinfo}

%>> p PacemakerAAI`post_Pacemaker({1|-><NONE>,250 |-> <PULSE>},{ 1 |-> <PULSE>, 500|-> <PULSE>})

%Should return false



--PacemakerAAT.vdmsl

\section{AAT mode requirements}

The AAT code states

\begin{itemize}
\item[A] Pace the Atria.
\item[A] Sensing the Atria chamber.
\item[T] With triggered response to sensing. A sense in the Atria triggers an immediate pace in it. 
\end{itemize}

\noindent meaning the pacemaker must pace the atria chamber regarding the valid sensed data from the atria and the programmable parameters.


\paragraph{Programmable parameter requirements}

\begin{itemize}
\item LRL\ref{sym:LRL} shall be 60 ppm
\item URL\ref{sym:URL} shall be 120 ppm
\item ARP\ref{sym:ARP} shall be 250 ms
\item PVARP\ref{sym:PVARP} shall be 250 ms
\end{itemize}

\paragraph{Purpose and abstraction level}

The purpose is to model and validate the requirements of the Pacemaker AAT mode.

\begin{itemize}
\item Atrial Amplitude, Atrial Pulse With and Sensivity are discarded because they are not relevant for the propose.
\item In this mode the chamber is always the atria so the other chambers are discarded in the model.
\end{itemize}

\subsection*{VDM-SL module}

 The model of the requirements start by defining the input of the system as a sequence of senses in a chamber at a given time.

 The model of the requirements start by defining the value of the LRL.


\begin{vdm_al}
module PacemakerAAT

definitions 

values 
LRL     : nat = 60;
ARP     : nat = 250;
\end{vdm_al}

The input is a sequence and of sensed stimuli and the time of it.

\begin{vdm_al}
types 
SenseTimeline = seq of Sense ;

Sense = <NONE> | <PULSE>;

Time = nat1;
\end{vdm_al}

The output will be a sequence of the reactions to the input that can be either do nothing or discharge a pulse on the Atria at a particular time.

\begin{vdm_al}
ReactionTimeline = seq of Reaction;

Reaction = <NONE> | <PULSE>;
   
functions
\end{vdm_al}

The pacemaker its modelled as an implicit function stating that the bpm rate is larger or equal the LRL\cite{www:PacemakerCycles} and  all the valid stimuli from the input triggers an artificial pulse response. The invalid ones are filtered by the ARP interval.

\begin{vdm_al}                         
Pacemaker (inp : SenseTimeline) r : ReactionTimeline
post let m = {i | i in set inds r & r(i) = <PULSE>}
     in len r = len inp 
        and
        forall x in set m & (
           (exists y in set m & y > x) => 
                 (exists z in set m &  z >= x and z - x <= 60000/LRL)
           );


end PacemakerAAT
\end{vdm_al}

\paragraph{Requirements review}

\begin{itemize}
\item LRL \textbf{Modeled}
\item URL \textbf{Not modelled}\footnote{We discovered this requirement is contradictory and its a minor error in a table from the specification.}
\item ARP \textbf{Modeled}.
\item PVARP available to modes with atrial sensing is the time interval following a ventricular event when an atrial cardiac event shall not 
   \begin{enumerate}
   \item Inhibit an atrial pace. 
   \item Trigger a ventricular pace.
   \end{enumerate} \textbf{Not modelled}\footnote{We discovered this requirement is contradictory and its a minor error in a table from the specification.}
\end{itemize}


%
%Pace
%Pulse
%\end{rtinfo}



--PacemakerAOO.vdmsl

\section{AOO mode requirements}

The AOO code states

\begin{itemize}
\item[A] Pace the Atria
\item[O] Without sensing the chambers
\item[O] Without response to sensing
\end{itemize}

\noindent meaning that the pacemaker must pace the atria chamber discarding any sensed data from the chambers just regarding the programmable parameters.

\paragraph{Programmable parameters requirements}

\begin{itemize}
\item LRL\ref{sym:LRL} shall be 60 ppm
\item URL\ref{sym:URL} shall be 120 ppm
\end{itemize}

\paragraph{Purpose and abstraction level}

The purpose is to model and validate the requirements of the Pacemaker AOO mode.

\begin{itemize}
\item Atrial Amplitude, Atrial Pulse With and Sensitivity are discarded because they are not relevant for the propose and don't add any understanding of the mode of pacing.
\item In this mode the paced/sensed chamber is always the atria so the other chambers are discarded in the model.
\end{itemize}

\subsection*{VDM-SL module}

 The model of the requirements start by defining the value of the LRL.

\begin{vdm_al}
module PacemakerAOO

definitions 

values 
LRL     : nat = 60;
\end{vdm_al}

The input is a sequence and each element of it corresponds to a time unit abstraction (in this case 1 millisecond).

\begin{vdm_al}
types 
SenseTimeline = map Time to Sense;

Sense = <NONE> | <PULSE>;

Time = nat1;
\end{vdm_al}

The output will be a sequence of the reactions to the input that can be either do nothing or discharge a pulse on the Atria.

\begin{vdm_al}
ReactionTimeline = map Time to Reaction; 

Reaction = <NONE> | <PULSE>;
   
functions
\end{vdm_al}

\subsubsection*{From LRL to ppm}

Considering that the ppm rate is given by the following formula
 
\begin{displaymath}
ppm = \frac{numberOfPulses}{timeInMinutes}
\end{displaymath}

\noindent and converting it to the modelled time unit: (milliseconds)

\begin{displaymath}
ppm = \frac{60000}{ms}
\end{displaymath}
We get
\begin{displaymath}
ms = \frac{60000}{ppm} 
\end{displaymath}

The period of the LRL is

\begin{displaymath}
LRLperiod_{observed} = \frac{numberOfPulses}{numberOfElementsObserved} 
\end{displaymath}

To compare the observed value to the LRL expressed in ppm, we need to convert it to milliseconds:

\begin{displaymath}
LRLperiod_{expected} = \frac{60000}{LRL}
\end{displaymath}

And because LRL is defined as a minimum, the pacemaker it is modelled as an implicit function stating that the ppm rate is larger or equal the LRL\cite{www:PacemakerCycles}.

\begin{displaymath}
LRLperiod_{observed} <= LRLperiod_{expected}
\end{displaymath}



\begin{vdm_al}                         
Pacemaker (inp : SenseTimeline) r : ReactionTimeline
post let m = {i | i in set dom r & r(i) = <PULSE>}
     in card dom r = card dom inp 
        and
        card dom inp > 1 => r(1) = <PULSE> 
        and
        forall x in set m & (
           (exists y in set m & y > x) => 
                 (exists y in set m & abs(x - y) <= 60000/LRL and x <> y));

end PacemakerAOO
\end{vdm_al}

\paragraph{Requirements review}

\begin{itemize}
\item LRL \textbf{Modelled}
\item URL is the maximum rate at which the paced ventricular rate will track sensed atrial events. The URL interval is the minimum time between a ventricular event and the next ventricular pace.\textbf{Not modelled}\footnote{We discovered this requirement is contradictory and its a minor error in a table from the specification.}
\end{itemize}




--PacemakerAOOR.vdmsl

\section{Reaching AOOR mode}

The AOOR mode is identical to the AOO mode except that the LRL value is adjusted
dynamicaly using the values of the Pacemaker accelerometer

\subsection{Requirements}

In this mode the following programmable parameters must be taken into account
while pacing:

\begin{itemize}
\item The device shall have the ability to adjust the cardiac cycle in response to metabolic need as measured from body motion using an accelerometer. 
%Page 32
\item LRL number of generator pulses delivered per minute.
\item LRLs LRL interval start. Shall start at a sensed or paced event.
\item LRLf The end of the LRL interval.
\item MSR  Maximum pacing rate allowed as a resolt of sensor control.
\item ActivityThreshold The value the accelerometer sensor output shall exceed  before the pacemaker's rate is afected by activity data.
\item ResponseFactor \ldots
\item ReactionTime is the time required to drive the rate from LRL to MSR. 
\item RecoveryTime is the time required to drive the rate from MSR to LRL.
\end{itemize}

The accelerometer shall determine the rate of increse of the pacing rate. (page 33 s 5.7.4)
The accelerometer shall determine the rate decrease of the pacing rate. (page 33 s 5.7.5)


\subsection{VDM-SL module}

In this operational mode the system will accept as input a sequence of
triples where

\begin{itemize}
\item LeadSense models the absence or not of a pulse.
\item Chamber the heart cavity from which the sence comes.
\item ActivityOutput the values outputed from the Accelerometer.
\end{itemize}

Each element in the sequence represents 1/4 of second.

Because this is a rate-adaptive mode we must take into account the values comming from the accelerometer. We will only model three of this values oposing to the seven in the requirements because theres an well defined abstraction between this two linear orders.

\begin{itemize}
\item{LOW} 0
\item{MED} 1
\item{HIGH} 2
\end{itemize}  


\begin{vdm_al}
module PacemakerAOOR

definitions 

types 

Time = nat;

SenseTimeline = seq of (Sense * [AccelerometerData] * Time)
inv stl == let l = [stl(i).#2 | i in set inds stl & stl(i).#2 <> nil]
           in l(1) = HIGH and forall i in set inds l & l(i) < MED => l(i-1) > MED;

AccelerometerData = nat
inv n == n < 3;

Sense = <NONE> | <PULSE>;

\end{vdm_al}

The reaction of our system will be a sequence of Lead paces or absence of it in each chamber.
 
\begin{vdm_al}

ReactionTimeline = seq of (Reaction * Time); 

Reaction = <NONE> | <PULSE>;
\end{vdm_al}

\begin{vdm_al}
state Sigma of
   LRL                : nat
   LRLs               : nat
   LRLf               : nat
   MSR                : nat
   ActivityThreshold  : AccelerometerData
   ReactionTime       : nat
   RecoveryTime       : nat
   rateChangePlan     : map nat to (<INC> | <DEC>)
init s == s = mk_Sigma(60,0,2,120,MED,10,2,{|->})
end   
   

operations

Pacemaker : SenseTimeline ==> ReactionTimeline
Pacemaker(inp) == 
   return if inp = [] 
          then []
          else [HeartController(hd inp)] ^ Pacemaker(tl inp);
                         
HeartController : (Sense * [AccelerometerData] * Time) ==> (Reaction * Time)
HeartController (mk_(-,acc,time)) == 
  (
   if acc <> nil then AdjustRate(acc,time);        
   if time in set dom rateChangePlan then applyChange(rateChangePlan(time));
   if LRLf <= LRLs 
   then (
          LRLs := 1; 
          return mk_(<PULSE>,time)
        )
   else (
          LRLs := LRLs + 1; 
          return mk_(<NONE>,time)
        ); 

   );   

 applyChange : <INC> | <DEC> ==> ()
 applyChange (a) == if a = <INC> then LRLf := 1
                                 else LRLf := 2;
 
 AdjustRate : AccelerometerData * Time ==> ()
 AdjustRate(act,time) == 
    if act > ActivityThreshold
    then rateChangePlan := {time + 10*2 |-> <INC>}
    else rateChangePlan := {time + 120*2 |-> <DEC>}


 

                             
values 

MED  : AccelerometerData = 3;
LOW  : AccelerometerData = 0;
MED  : AccelerometerData = 1;
HIGH : AccelerometerData = 2;

sensedData : seq of (Sense * [AccelerometerData] * Time) = 
[mk_(<NONE>,nil,i) | i in set {1,...,120}]^
[mk_(<NONE>,<HIGH>,121)]^
[mk_(<NONE>,nil,i) | i in set {121,...,190}]^
[mk_(<NONE>,<LOW>,191)]^
[mk_(<NONE>,nil,i) | i in set {192,...,436}];	

end PacemakerAOOR
\end{vdm_al}


--PacemakerDDD.vdmsl

\begin{vdm_al}
module PacemakerDDD

definitions 

values 
LRL     : nat = 60;   -- ppm
ARP     : nat = 250;  -- ms
VRP     : nat = 320;  -- ms
PVARP   : nat = 250;  -- ms
AVD     : nat = 150;  -- ms
VAD     : nat = 850; -- ms

types 
SenseTimeline = set of (Time * Chamber);

Chamber = <ATRIUM> | <VENTRICLE>;

Time = int;

Alarm = nat;

ReactionTimeline = set of (Time * Chamber); 
   

functions

Pacemaker : Time * SenseTimeline -> ReactionTimeline
Pacemaker (t,s) == PM(mk_(1,t,s,{},1000,0,-ARP,-VRP)).#1;


PM : (Time * Time * SenseTimeline * ReactionTimeline * Alarm * Alarm * Time * Time) -> 
                                   ReactionTimeline * Alarm * Alarm * Time * Time
PM (mk_(i,t,s,r,AA,VA,LastA,LastV)) == 

                                 if i = t
                                 then mk_(r,AA,VA,LastA,LastV)
                                 else if mk_(i,<ATRIUM>) in set s 
                                      then PM(c(i+1,t,s,SensedAtrium(i,r,AA,VA,LastA,LastV)))
                                      elseif mk_(i,<VENTRICLE>) in set s 
                                          then PM(c(i+1,t,s,SensedVentricle(i,r,AA,VA,LastA,LastV)))
                                          else PM(c(i+1,t,s,SensedNothing(i,r,AA,VA,LastA,LastV)));


SensedAtrium : Time * ReactionTimeline * Alarm * Alarm * Time * Time -> ReactionTimeline * Alarm * Alarm * Time * Time
SensedAtrium (t,r,AA,VA,LastA,LastV) == 
 
                             if t - LastA < ARP or VA > 0 or t - LastA < PVARP   -- 5.4.2  or 5.4.5 or 5.4.3
                             then SensedNothing(t,r,AA,VA,LastA,LastV)
                             else mk_(r,0,t + AVD,t,LastV); -- valid sense + schedule Ventricle


SensedVentricle : Time * ReactionTimeline * Alarm * Alarm * Time * Time -> ReactionTimeline * Alarm * Alarm * Time * Time
SensedVentricle (t,r,AA,VA,LastA,LastV) == 

                                if t - LastV < VRP -- 5.4.3
                                then SensedNothing(t,r,AA,VA,LastA,LastV)
                                else mk_(r,t + VAD,0,LastA,t); -- valid sense + unset ventricle alarm


SensedNothing : Time * ReactionTimeline * Alarm * Alarm * Time * Time -> ReactionTimeline * Alarm * Alarm * Time * Time
SensedNothing (t, r, AA, VA,LastA,LastV) == 
             
             if AA > 0 and t >= AA                                           -- Atrium alarm is set and fired
             then mk_(r union {mk_(t,<ATRIUM>)}, 0, t + AVD,t,LastV)   -- atrial pulse + schedule ventrile
             elseif VA > 0 and t >= VA                                       -- Ventricle alarm is set and fired
                 then mk_(r union {mk_(t,<VENTRICLE>)}, t + VAD, 0,LastA,t)       -- pulse ventricle + unset timer
                 else mk_(r, AA, VA,LastA,LastV);                            -- no alarms




-- Auxiliar funtcions

-- A curry function
c : Time * Time * SenseTimeline * (ReactionTimeline * Alarm * Alarm * Time * Time) -> 
                    Time * Time * SenseTimeline * ReactionTimeline * Alarm * Alarm * Time * Time
c (i,t,s,mk_(r,a,v,la,lv)) == mk_(i,t,s,r,a,v,la,lv);

end PacemakerDDD
\end{vdm_al}


--PacemakerDOO.vdmsl

\section{DOO mode requirements}

The DOO code states

\begin{itemize}
\item[D] Pace the atria and ventricle
\item[O] Without sensing the chambers
\item[O] Without response to sensing
\end{itemize}

\noindent This means the pacemaker must pace the atria chamber and ventricle discarding any sensed data from the chambers just regarding the programmable parameters.

\paragraph{Programmable parameter requirements}

\begin{itemize}
\item LRL\ref{sym:LRL} shall be 60 ppm.
\item URL\ref{sym:URL} shall be 120 ppm.
\item Fixed AV\ref{sym:FixedAVDelay} shall be 150 ms.
\end{itemize}

\paragraph{Purpose and abstraction level}

Model and validate the requirements of the Pacemaker DOO mode.

\begin{itemize}
\item Atrial/Ventricular Amplitude, Pulse Width and Sensitivity are discarded because they are not relevant for us, as they don't add any understanding of the mode of pacing.
\end{itemize}



\subsection*{VDM-SL module}

 The model of the requirements start by defining the input of the system as a set of the senses in a chamber at a given time.



\begin{vdm_al}
module PacemakerDOO

definitions 

types 

Time = nat;

SensedTimeline = set of (Chamber * Time);

Chamber = <ATRIA> | <VENTRICLE>;
\end{vdm_al}

Reactions will be an identical set but representing the discharged pulses.

\begin{vdm_al}
ReactionTimeline = set of (Chamber * Time);

\end{vdm_al}

The programmable parameters are defined as values.

\begin{vdm_al}
values
   LRL     : nat = 60;
   URL     : nat = 120;
   FixedAV : nat = 150;
\end{vdm_al}

The Pacemaker system transforms the input set into an output set containing the amount of atrial and ventricular pulses in order to achieve the expected ppm rate. The FixedAV requirement is expressed in the last universal quantifier.

\begin{vdm_al}                         
functions

Pacemaker (mk_(inp,n) : SensedTimeline * nat1) r : ReactionTimeline
post let nPulsesAtria = card {i | i in set r & i.#1 = <ATRIA>}, 
         nPulsesVentricle = card {i | i in set r & i.#1 = <VENTRICLE>}
     in  nPulsesAtria / n >= (LRL / 60) / 1000
         and
         nPulsesVentricle / n <= (URL / 60) / 1000
         and
         forall mk_(<ATRIA>,ta) in set r & (exists mk_(<VENTRICLE>,tv) in set r & tv = ta + FixedAV) ;
	                             
end PacemakerDOO
\end{vdm_al}

\paragraph{Requirements review}

\begin{itemize}
\item LRL \textbf{Modeled}.
\item URL \textbf{Modeled}.
\item Fixed AV \textbf{Modeled}.
\end{itemize}


--RateController.vdmsl

\section{XXXR modes requirements}

The modes ending in R like AOOR require that we adjust the rate for that we had to model the component that will adjust the rate.

\paragraph{Programmable parameters requirements}

In this mode the following programmable parameters must be taken into account
while pacing:

\begin{itemize}
\item LRL shall be 60 ppm.
\item MSR shall be 120 ppm.
\item ActivityThreshold shall be \textbf{Med}.
\item ResponseFactor shall be 8.
\item ReactionTime shall be 30 s. 
\item RecoveryTime shall be 5 m.
\end{itemize}



\paragraph{Purpose and abstraction level}

The rate controller full functionality is not modelled, we represent all the variables needed to control the increase and decrease in rate. But the changes will be instantaneous disregarding the response and recovery time delays. These are requirements for the rate change and not for the operating mode. 

The purpose it to understand the different operation modes not how the rate changes, so its logical that if the rate can change on an operation mode for instance AOOR we model that change but in an abstract way.

\subsection*{VDM-SL module}

The rate controller will accept as input a sequence of Accelerometer inputs:

\begin{vdm_al}
module RateController

definitions 

types 

Input = map Time to ActivityData;
\end{vdm_al}

Activity data is mapped to a subset of nat1 as:

\begin{itemize}
\item{V-LOW} 1
\item{LOW} 2
\item{MED-LOW} 3
\item{MED} 4
\item{MED-HIGH} 5
\item{HIGH} 6
\item{V-HIGH} 7
\end{itemize}  

Time is abstracted as a nat.

\begin{vdm_al}
Time = nat1;

ActivityData = nat1
inv a == a <= 7;

\end{vdm_al}

The response factor is an integer number betwen 1 and 16.

\begin{vdm_al}
RF = nat1
inv rf == rf <= 16;
\end{vdm_al}

The reaction of our system will be a comand to change the rate, in this case 
we model the ouput as 
 
\begin{vdm_al}

Output = map Time to PPM; 

PPM = nat1
inv ppm == ppm >= 30 and ppm <= 175;

\end{vdm_al}

The programmable parameters are declared as values.

\begin{vdm_al}
values
   LRL           : PPM = 60;
   MSR           : PPM = 120;
   Threshold     : ActivityData = 6;
   ReactionTime  : Time = 150;
   ResponseFactor: RF = 8; -- Not understood
   RecoveryTime  : Time = 5;
\end{vdm_al}   

Finally the simulation of the rate controller follows as a relation between the reach of the MSR with a exceeding input value of the treshold, and the LRL as a decrease after the reacovery time form the MSR or the normal functioning of the system.

\begin{vdm_al}
functions

Simulate(inp : Input)  out : Output
pre 0 not in set dom inp
post forall t in set dom inp &
            (out(t) = MSR =>  inp(t-ReactionTime) > Threshold or out(t-1) = MSR)
     and
     forall t in set dom inp \ {1} & 
            (out(t) = LRL =>  inp(t-RecoveryTime) < Threshold or out(t-1) = LRL);




end RateController
\end{vdm_al}

\subsection{Requirements review}

\begin{itemize}
\item LRL \textbf{Modelled}.
\item MSR \textbf{Modelled}.
\item ActivityThreshold \textbf{Modelled}.
\item ResponseFactor \textbf{Not understood}.
\item ReactionTime \textbf{Modelled}.
\item RecoveryTime \textbf{Modelled}.
\end{itemize}