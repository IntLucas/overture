-- TCErrors: WARNING:5000:67,3 WARNING:5000:74,3 WARNING:5000:78,3 WARNING:5000:82,3 PROOFOBLIGATION: fDQzIEdhdGV3YXksIHJlc3RfcCwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKG5vdCAobXMgPSBbXSkgPT4KICAgIE1lc0xlbihtcywgY2F0KSA+IE1lc0xlbigodGwgbXMpLCBjYXQpKSkKLHJlY3Vyc2l2ZSBmdW5jdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ3IEdhdGV3YXksIHJlc3RfcCwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKG5vdCAobXMgPSBbXSkgPT4KICAgIG1zIDw+IFtdKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ5IEdhdGV3YXksKGZvcmFsbCBtczpzZXEgb2YgKE1lc3NhZ2UpLCBjYXQ6Q2F0ZWdvcnkgJgogIChub3QgKG1zID0gW10pID0+CiAgICAobGV0IHJlc3RfcDpQb3J0cyA9IEdhdGV3YXkoKHRsIG1zKSwgY2F0KSBpbgogICAgICBtcyA8PiBbXSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY5IEdhdGV3YXkyLChmb3JhbGwgbXM6c2VxIG9mIChNZXNzYWdlKSwgY2F0OkNhdGVnb3J5ICYKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG1zKSAmIChDbGFzc2lmeShtcyhpKSwgY2F0KSA9IDxIST4pID0+CiAgICBpIGluIHNldCBpbmRzIG1zKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY5IEdhdGV3YXkyLChmb3JhbGwgbXM6c2VxIG9mIChNZXNzYWdlKSwgY2F0OkNhdGVnb3J5ICYKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG1zKSAmCiAgICBpIGluIHNldCBpbmRzIG1zKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDcwIEdhdGV3YXkyLChmb3JhbGwgbXM6c2VxIG9mIChNZXNzYWdlKSwgY2F0OkNhdGVnb3J5ICYKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG1zKSAmIChDbGFzc2lmeShtcyhpKSwgY2F0KSA9IDxMTz4pID0+CiAgICBpIGluIHNldCBpbmRzIG1zKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDcwIEdhdGV3YXkyLChmb3JhbGwgbXM6c2VxIG9mIChNZXNzYWdlKSwgY2F0OkNhdGVnb3J5ICYKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG1zKSAmCiAgICBpIGluIHNldCBpbmRzIG1zKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDgwIENlbnNvciwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBtcykgJiAoQ2xhc3NpZnkobXMoaSksIGNhdCkgPSA8TE8+KSA9PgogICAgaSBpbiBzZXQgaW5kcyBtcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDgwIENlbnNvciwoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSksIGNhdDpDYXRlZ29yeSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBtcykgJgogICAgaSBpbiBzZXQgaW5kcyBtcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDgyIEZsYXR0ZW5NZXNzYWdlcywoZm9yYWxsIG1zOnNlcSBvZiAoTWVzc2FnZSkgJiAoKGxlbiAoY29uYyBtcykpIDw9IDEwMCkgPT4KICBpbnZfTWVzc2FnZSgoY29uYyBtcykpIGFuZCAoaW52X1N0cmluZygoY29uYyBtcykpIGFuZCAoaXNfKChjb25jIG1zKSwgc2VxIG9mIChjaGFyKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw=


--gateway.vdmsl

-- A trusted gateway
-- For Chapter 7 (Sequences)

types

  String = seq of char
  inv s == s <> [];  

  Message = String
  inv m == len m <= 100;

  Classification = <HI> | <LO>;

  Category = set of String;

  Ports :: high: seq of Message
           low : seq of Message

functions

-- checking whether a substring occur in another string

  Occurs: String * String -> bool
  Occurs(substr,str) ==
    exists i,j in set inds str & substr = str(i,...,j);

-- Classifying messages

  Classify: Message * Category -> Classification
  Classify(m,cat) ==
    if exists hi in set cat & Occurs(hi,m)
    then <HI>
    else <LO>;


-- The main gateway function using recursion

  Gateway: seq of Message * Category -> Ports
  Gateway(ms,cat) ==
    if ms = []
    then mk_Ports([],[])
    else let rest_p = Gateway(tl ms,cat)
         in
           ProcessMessage(hd ms,cat,rest_p)
   measure MesLen;
   
   MesLen: seq of Message * Category -> nat
   MesLen(list,-) ==
     len list;

-- Classify the message and add to the appropriate port.

  ProcessMessage: Message * Category * Ports -> Ports
  ProcessMessage(m,cat,ps) ==
    if Classify(m,cat) = <HI>
    then mk_Ports([m]^ps.high,ps.low)
    else mk_Ports(ps.high,[m]^ps.low);


-- The main gateway function without using recursion

  Gateway2: seq of Message * Category -> Ports
  Gateway2(ms,cat) ==
    mk_Ports([ms(i)|i in set inds ms & Classify(ms(i),cat) = <HI>],
             [ms(i)|i in set inds ms & Classify(ms(i),cat) = <LO>]);

-- Functions illustrating other sequence operators. 

  AnyHighClass: seq of Message * Category -> bool
  AnyHighClass(ms,cat) ==
    exists m in set elems ms & Classify(m,cat) = <HI>;

  Censor: seq of Message * Category -> seq of Message
  Censor(ms,cat) ==
    [ms(i) | i in set inds ms & Classify(ms(i),cat) = <LO>];

  FlattenMessages: seq of Message -> Message
  FlattenMessages(ms) ==
    conc ms
  pre len conc ms <= 100 