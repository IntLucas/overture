-- TCErrors: WARNING:5012:240,1 WARNING:5012:461,1 WARNING:5012:474,1 WARNING:5012:487,1 WARNING:5012:698,1 WARNING:5012:717,1 WARNING:5008:1165,46 WARNING:5008:1165,52 WARNING:5012:1205,1 WARNING:5012:1484,1 WARNING:5012:1516,1 WARNING:5000:832,1 WARNING:5000:838,1 WARNING:5000:841,1 WARNING:5000:870,1 WARNING:5000:873,1 WARNING:5000:909,1 WARNING:5000:917,1 WARNING:5000:1078,1 WARNING:5000:1554,1 WARNING:5000:1784,11 WARNING:5000:1785,11 WARNING:5000:1808,1 WARNING:5000:1846,1 WARNING:5000:2116,1 WARNING:5000:2255,1 PROOFOBLIGATION: Tm9kZXNfR2V0RGF0YSwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpID0+CiAgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgZXhpc3RzIG1rX05vZGVzX1NpbmdsZUxpbmsoZGF0YSwgLSk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX1NpbmdsZUxpbmsoZGF0YSwgLSkgPSBub2RlKSkKLHZhbHVlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfR2V0RGF0YSwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpID0+CiAgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfR2V0RGF0YSwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpID0+CiAgKG5vdCBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykgPT4KICAgIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgPT4KICAgICAgZXhpc3RzIG1rX05vZGVzX0RvdWJsZUxpbmsoZGF0YSwgLSwgLSk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0RvdWJsZUxpbmsoZGF0YSwgLSwgLSkgPSBub2RlKSkpCix2YWx1ZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0RGF0YSwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpID0+CiAgKG5vdCBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykgPT4KICAgIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgPT4KICAgICAgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0RGF0YSwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpID0+CiAgKG5vdCBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykgPT4KICAgIChub3QgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspID0+CiAgICAgIGV4aXN0cyBta19Ob2Rlc19CaW5hcnlUcmVlKGRhdGEsIC0sIC0sIC0pOk5vZGVzX05vZGUgJiBta19Ob2Rlc19CaW5hcnlUcmVlKGRhdGEsIC0sIC0sIC0pID0gbm9kZSkpKQosdmFsdWUgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfR2V0RGF0YSwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpID0+CiAgKG5vdCBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykgPT4KICAgIChub3QgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspID0+CiAgICAgIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0RGF0YSwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBkYXRhOk5vZGVzX0RhdGEgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgb3IgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkgPT4KICAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspID0+CiAgICBleGlzdHMgbWtfTm9kZXNfU2luZ2xlTGluaygtLCBuZXh0KTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfU2luZ2xlTGluaygtLCBuZXh0KSA9IG5vZGUpKQosdmFsdWUgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0RGF0YSwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBkYXRhOk5vZGVzX0RhdGEgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgb3IgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkgPT4KICAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspID0+CiAgICBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0RGF0YSwgbmV4dCwgcHJldiwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBkYXRhOk5vZGVzX0RhdGEgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgb3IgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkgPT4KICAobm90IGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgKGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSA9PgogICAgICBleGlzdHMgbWtfTm9kZXNfRG91YmxlTGluaygtLCBuZXh0LCBwcmV2KTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfRG91YmxlTGluaygtLCBuZXh0LCBwcmV2KSA9IG5vZGUpKSkKLHZhbHVlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfU2V0RGF0YSwgbmV4dCwgcHJldiwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBkYXRhOk5vZGVzX0RhdGEgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgb3IgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkgPT4KICAobm90IGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgKGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSA9PgogICAgICBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfU2V0RGF0YSwgcmlnaHQsIGxlZnQsIHBhcmVudCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBkYXRhOk5vZGVzX0RhdGEgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgb3IgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkgPT4KICAobm90IGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgKG5vdCBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgPT4KICAgICAgZXhpc3RzIG1rX05vZGVzX0JpbmFyeVRyZWUoLSwgcmlnaHQsIGxlZnQsIHBhcmVudCk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0JpbmFyeVRyZWUoLSwgcmlnaHQsIGxlZnQsIHBhcmVudCkgPSBub2RlKSkpCix2YWx1ZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfU2V0RGF0YSwgcmlnaHQsIGxlZnQsIHBhcmVudCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBkYXRhOk5vZGVzX0RhdGEgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIChpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgb3IgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkgPT4KICAobm90IGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgKG5vdCBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgPT4KICAgICAgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0TmV4dCwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykpID0+CiAgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgZXhpc3RzIG1rX05vZGVzX1NpbmdsZUxpbmsoLSwgbmV4dCk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX1NpbmdsZUxpbmsoLSwgbmV4dCkgPSBub2RlKSkKLHZhbHVlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfR2V0TmV4dCwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykpID0+CiAgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfR2V0TmV4dCwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykpID0+CiAgKG5vdCBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykgPT4KICAgIGV4aXN0cyBta19Ob2Rlc19Eb3VibGVMaW5rKC0sIG5leHQsIC0pOk5vZGVzX05vZGUgJiBta19Ob2Rlc19Eb3VibGVMaW5rKC0sIG5leHQsIC0pID0gbm9kZSkpCix2YWx1ZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0TmV4dCwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSBvciBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykpID0+CiAgKG5vdCBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykgPT4KICAgIGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfU2V0TmV4dCwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBuZXh0Ok5vZGVzX05vZGVQdHIgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSkgPT4KICAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspID0+CiAgICBleGlzdHMgbWtfTm9kZXNfU2luZ2xlTGluayhkYXRhLCAtKTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfU2luZ2xlTGluayhkYXRhLCAtKSA9IG5vZGUpKQosdmFsdWUgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0TmV4dCwgZGF0YSwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBuZXh0Ok5vZGVzX05vZGVQdHIgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSkgPT4KICAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspID0+CiAgICBpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0TmV4dCwgZGF0YSwgcHJldiwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBuZXh0Ok5vZGVzX05vZGVQdHIgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSkgPT4KICAobm90IGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgZXhpc3RzIG1rX05vZGVzX0RvdWJsZUxpbmsoZGF0YSwgLSwgcHJldik6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0RvdWJsZUxpbmsoZGF0YSwgLSwgcHJldikgPSBub2RlKSkKLHZhbHVlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfU2V0TmV4dCwgZGF0YSwgcHJldiwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBuZXh0Ok5vZGVzX05vZGVQdHIgJiAoaXNfKG5vZGUsIE5vZGVzX1NpbmdsZUxpbmspIG9yIGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSkgPT4KICAobm90IGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSA9PgogICAgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfR2V0UHJldiwgcHJldiwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspID0+CiAgZXhpc3RzIG1rX05vZGVzX0RvdWJsZUxpbmsoLSwgLSwgcHJldik6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0RvdWJsZUxpbmsoLSwgLSwgcHJldikgPSBub2RlKQosdmFsdWUgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfR2V0UHJldiwgcHJldiwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspID0+CiAgaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0UHJldiwgZGF0YSwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBwcmV2Ok5vZGVzX05vZGVQdHIgJiBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgPT4KICBleGlzdHMgbWtfTm9kZXNfRG91YmxlTGluayhkYXRhLCBuZXh0LCAtKTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfRG91YmxlTGluayhkYXRhLCBuZXh0LCAtKSA9IG5vZGUpCix2YWx1ZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfU2V0UHJldiwgZGF0YSwgbmV4dCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBwcmV2Ok5vZGVzX05vZGVQdHIgJiBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykgPT4KICBpc18obm9kZSwgTm9kZXNfRG91YmxlTGluaykpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0UmlnaHQsIHJpZ2h0LDAsKGZvcmFsbCBub2RlOk5vZGVzX05vZGUgJiBpc18obm9kZSwgTm9kZXNfQmluYXJ5VHJlZSkgPT4KICBleGlzdHMgbWtfTm9kZXNfQmluYXJ5VHJlZSgtLCByaWdodCwgLSwgLSk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0JpbmFyeVRyZWUoLSwgcmlnaHQsIC0sIC0pID0gbm9kZSkKLHZhbHVlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfR2V0UmlnaHQsIHJpZ2h0LDAsKGZvcmFsbCBub2RlOk5vZGVzX05vZGUgJiBpc18obm9kZSwgTm9kZXNfQmluYXJ5VHJlZSkgPT4KICBpc18obm9kZSwgTm9kZXNfQmluYXJ5VHJlZSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfU2V0UmlnaHQsIGRhdGEsIGxlZnQsIHBhcmVudCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCByaWdodDpOb2Rlc19Ob2RlUHRyICYgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpID0+CiAgZXhpc3RzIG1rX05vZGVzX0JpbmFyeVRyZWUoZGF0YSwgLSwgbGVmdCwgcGFyZW50KTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfQmluYXJ5VHJlZShkYXRhLCAtLCBsZWZ0LCBwYXJlbnQpID0gbm9kZSkKLHZhbHVlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfU2V0UmlnaHQsIGRhdGEsIGxlZnQsIHBhcmVudCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCByaWdodDpOb2Rlc19Ob2RlUHRyICYgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpID0+CiAgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfR2V0TGVmdCwgbGVmdCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpID0+CiAgZXhpc3RzIG1rX05vZGVzX0JpbmFyeVRyZWUoLSwgLSwgbGVmdCwgLSk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0JpbmFyeVRyZWUoLSwgLSwgbGVmdCwgLSkgPSBub2RlKQosdmFsdWUgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfR2V0TGVmdCwgbGVmdCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlICYgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpID0+CiAgaXNfKG5vZGUsIE5vZGVzX0JpbmFyeVRyZWUpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0TGVmdCwgZGF0YSwgcmlnaHQsIHBhcmVudCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBsZWZ0Ok5vZGVzX05vZGVQdHIgJiBpc18obm9kZSwgTm9kZXNfQmluYXJ5VHJlZSkgPT4KICBleGlzdHMgbWtfTm9kZXNfQmluYXJ5VHJlZShkYXRhLCByaWdodCwgLSwgcGFyZW50KTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfQmluYXJ5VHJlZShkYXRhLCByaWdodCwgLSwgcGFyZW50KSA9IG5vZGUpCix2YWx1ZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfU2V0TGVmdCwgZGF0YSwgcmlnaHQsIHBhcmVudCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBsZWZ0Ok5vZGVzX05vZGVQdHIgJiBpc18obm9kZSwgTm9kZXNfQmluYXJ5VHJlZSkgPT4KICBpc18obm9kZSwgTm9kZXNfQmluYXJ5VHJlZSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0UGFyZW50LCBwYXJlbnQsMCwoZm9yYWxsIG5vZGU6Tm9kZXNfTm9kZSAmIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSA9PgogIGV4aXN0cyBta19Ob2Rlc19CaW5hcnlUcmVlKC0sIC0sIC0sIHBhcmVudCk6Tm9kZXNfTm9kZSAmIG1rX05vZGVzX0JpbmFyeVRyZWUoLSwgLSwgLSwgcGFyZW50KSA9IG5vZGUpCix2YWx1ZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: Tm9kZXNfR2V0UGFyZW50LCBwYXJlbnQsMCwoZm9yYWxsIG5vZGU6Tm9kZXNfTm9kZSAmIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSA9PgogIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: Tm9kZXNfU2V0UGFyZW50LCBkYXRhLCByaWdodCwgbGVmdCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSA9PgogIGV4aXN0cyBta19Ob2Rlc19CaW5hcnlUcmVlKGRhdGEsIHJpZ2h0LCBsZWZ0LCAtKTpOb2Rlc19Ob2RlICYgbWtfTm9kZXNfQmluYXJ5VHJlZShkYXRhLCByaWdodCwgbGVmdCwgLSkgPSBub2RlKQosdmFsdWUgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: Tm9kZXNfU2V0UGFyZW50LCBkYXRhLCByaWdodCwgbGVmdCwwLChmb3JhbGwgbm9kZTpOb2Rlc19Ob2RlLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSA9PgogIGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: SGVhcHNfSW5pdFNlcXVlbmNlLDAsKGZvcmFsbCBsZW5ndGg6bmF0MSAmCiAgKChsZW5ndGggPiAxKSA9PgogICAgaW52X0hlYXBzX0xvY2F0aW9uKG1rX0hlYXBzX0xvY2F0aW9uKG5pbCwgZmFsc2UpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: SGVhcHNfSW5pdFNlcXVlbmNlLDAsKGZvcmFsbCBsZW5ndGg6bmF0MSAmCiAgKChsZW5ndGggPiAxKSA9PgogICAgKGxlbmd0aCAtIDEpID4gMCkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: SGVhcHNfSW5pdFNlcXVlbmNlLDAsKGZvcmFsbCBsZW5ndGg6bmF0MSAmCiAgKG5vdCAobGVuZ3RoID4gMSkgPT4KICAgIGludl9IZWFwc19Mb2NhdGlvbihta19IZWFwc19Mb2NhdGlvbihuaWwsIGZhbHNlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: SGVhcHNfSW5pdCwwLGludl9IZWFwc19IZWFwKG1rX0hlYXBzX0hlYXAoSGVhcHNfSW5pdFNlcXVlbmNlKEhlYXBzX1NpemUpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: SGVhcHNfQW1vdW50VXNlZCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwICYKICAobGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgc3RvcmUpICYgKChzdG9yZShpKS5hbGxvY2F0ZWQpID0gdHJ1ZSkgPT4KICAgICAgaSBpbiBzZXQgaW5kcyBzdG9yZSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: SGVhcHNfQW1vdW50VXNlZCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwICYKICAobGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgc3RvcmUpICYKICAgICAgaSBpbiBzZXQgaW5kcyBzdG9yZSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: SGVhcHNfTW9kaWZ5TG9jLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGFkZHJlc3M6QUREUkVTUywgbG9jYXRpb246SGVhcHNfTG9jYXRpb24gJiAoYWRkcmVzcyBpbiBzZXQgKGluZHMgKGhlYXAuc3RvcmFnZSkpKSA9PgogIGRvbSB7YWRkcmVzcyB8LT4gbG9jYXRpb259IHN1YnNldCBpbmRzIChoZWFwLnN0b3JhZ2UpKQosc2VxdWVuY2UgbW9kaWZpY2F0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: SGVhcHNfTW9kaWZ5TG9jLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGFkZHJlc3M6QUREUkVTUywgbG9jYXRpb246SGVhcHNfTG9jYXRpb24gJiAoYWRkcmVzcyBpbiBzZXQgKGluZHMgKGhlYXAuc3RvcmFnZSkpKSA9PgogIGludl9IZWFwc19IZWFwKG1rX0hlYXBzX0hlYXAoKChoZWFwLnN0b3JhZ2UpICsrIHthZGRyZXNzIHwtPiBsb2NhdGlvbn0pKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: SGVhcHNfTW9kaWZ5LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGFkZHJlc3M6QUREUkVTUywgZGF0YTpIZWFwc19EYXRhICYKICAobGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4KICAgICgoYWRkcmVzcyBpbiBzZXQgKGluZHMgc3RvcmUpKSA9PgogICAgICBhZGRyZXNzIGluIHNldCBpbmRzIHN0b3JlKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: SGVhcHNfTW9kaWZ5LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGFkZHJlc3M6QUREUkVTUywgZGF0YTpIZWFwc19EYXRhICYgbGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4gKChhZGRyZXNzIGluIHNldCAoaW5kcyBzdG9yZSkpIGFuZCAoKHN0b3JlKGFkZHJlc3MpLmFsbG9jYXRlZCkgPSB0cnVlKSkgPT4KICBwcmVfSGVhcHNfTW9kaWZ5TG9jKGhlYXAsIGFkZHJlc3MsIG1rX0hlYXBzX0xvY2F0aW9uKGRhdGEsIHRydWUpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: SGVhcHNfTW9kaWZ5LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGFkZHJlc3M6QUREUkVTUywgZGF0YTpIZWFwc19EYXRhICYgbGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4gKChhZGRyZXNzIGluIHNldCAoaW5kcyBzdG9yZSkpIGFuZCAoKHN0b3JlKGFkZHJlc3MpLmFsbG9jYXRlZCkgPSB0cnVlKSkgPT4KICBpbnZfSGVhcHNfTG9jYXRpb24obWtfSGVhcHNfTG9jYXRpb24oZGF0YSwgdHJ1ZSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: SGVhcHNfUmV0cmlldmUsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgYWRkcmVzczpBRERSRVNTICYKICAobGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4KICAgICgoYWRkcmVzcyBpbiBzZXQgKGluZHMgc3RvcmUpKSA9PgogICAgICBhZGRyZXNzIGluIHNldCBpbmRzIHN0b3JlKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: SGVhcHNfUmV0cmlldmUsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgYWRkcmVzczpBRERSRVNTICYgbGV0IHN0b3JlOnNlcSBvZiAoSGVhcHNfTG9jYXRpb24pID0gKGhlYXAuc3RvcmFnZSkgaW4gKChhZGRyZXNzIGluIHNldCAoaW5kcyBzdG9yZSkpIGFuZCAoKHN0b3JlKGFkZHJlc3MpLmFsbG9jYXRlZCkgPSB0cnVlKSkgPT4KICBhZGRyZXNzIGluIHNldCBpbmRzIChoZWFwLnN0b3JhZ2UpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: SGVhcHNfVW5hbGxvY2F0ZWRBZGRyZXNzZXMsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCAmCiAgKGxldCBzdG9yZTpzZXEgb2YgKEhlYXBzX0xvY2F0aW9uKSA9IChoZWFwLnN0b3JhZ2UpIGluCiAgICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIHN0b3JlKSAmCiAgICAgIGkgaW4gc2V0IGluZHMgc3RvcmUpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: SGVhcHNfVW5hbGxvY2F0ZWRBZGRyZXNzLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAgJiBIZWFwc19BdmFpbGFibGUoaGVhcCkgPT4KICBleGlzdHMxIG5ldyBpbiBzZXQgSGVhcHNfVW5hbGxvY2F0ZWRBZGRyZXNzZXMoaGVhcCkgJiAoZm9yYWxsIGkgaW4gc2V0IEhlYXBzX1VuYWxsb2NhdGVkQWRkcmVzc2VzKGhlYXApICYgKG5ldyA8PSBpKSkpCix1bmlxdWUgZXhpc3RlbmNlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: TkVXLCBuZXdBZGRyZXNzLDAscHJlX0hlYXBzX1VuYWxsb2NhdGVkQWRkcmVzcyhoZWFwKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: TkVXLCBuZXdMb2MsMCxpbnZfSGVhcHNfTG9jYXRpb24obWtfSGVhcHNfTG9jYXRpb24oZGF0YSwgdHJ1ZSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: TkVXLDAscHJlX0hlYXBzX01vZGlmeUxvYyhoZWFwLCBuZXdBZGRyZXNzLCBuZXdMb2MpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RElTUE9TRSwwLGludl9IZWFwc19Mb2NhdGlvbihta19IZWFwc19Mb2NhdGlvbihuaWwsIGZhbHNlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RElTUE9TRSwwLHByZV9IZWFwc19Nb2RpZnlMb2MoaGVhcCwgYWRkcmVzcywgbWtfSGVhcHNfTG9jYXRpb24obmlsLCBmYWxzZSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RElTUE9TRSwwLGludl9IZWFwc19Mb2NhdGlvbihta19IZWFwc19Mb2NhdGlvbihuaWwsIGZhbHNlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX0RBVEEsMCxwcmVfSGVhcHNfTW9kaWZ5KGhlYXAsIHB0ciwgTm9kZXNfU2V0RGF0YShIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBkYXRhKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX0RBVEEsMCxwcmVfTm9kZXNfU2V0RGF0YShIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBkYXRhKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX0RBVEEsMCwoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19TaW5nbGVMaW5rKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX0RBVEEsMCxwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX05FWFQsMCxwcmVfSGVhcHNfTW9kaWZ5KGhlYXAsIHB0ciwgTm9kZXNfU2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBuZXh0KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX05FWFQsMCxwcmVfTm9kZXNfU2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBuZXh0KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX05FWFQsMCwoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19TaW5nbGVMaW5rKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX05FWFQsMCxwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX0xFRlQsMCxwcmVfSGVhcHNfTW9kaWZ5KGhlYXAsIHB0ciwgTm9kZXNfU2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBsZWZ0KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX0xFRlQsMCxwcmVfTm9kZXNfU2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBsZWZ0KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX0xFRlQsMCwoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19TaW5nbGVMaW5rKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX0xFRlQsMCxwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX1JJR0hULDAscHJlX0hlYXBzX01vZGlmeShoZWFwLCBwdHIsIE5vZGVzX1NldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIHJpZ2h0KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX1JJR0hULDAscHJlX05vZGVzX1NldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIHJpZ2h0KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX1JJR0hULDAsKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCihpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfRG91YmxlTGluaykpIG9yCihpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfU2luZ2xlTGluaykpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0VUX1JJR0hULDAscHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX1BSRVYsMCxwcmVfSGVhcHNfTW9kaWZ5KGhlYXAsIHB0ciwgTm9kZXNfU2V0UHJldihIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBwcmV2KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX1BSRVYsMCxwcmVfTm9kZXNfU2V0UHJldihIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBwcmV2KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX1BSRVYsMCwoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19TaW5nbGVMaW5rKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX1BSRVYsMCxwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX1BBUkVOVCwwLHByZV9IZWFwc19Nb2RpZnkoaGVhcCwgcHRyLCBOb2Rlc19TZXRQYXJlbnQoSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgcGFyZW50KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0VUX1BBUkVOVCwwLHByZV9Ob2Rlc19TZXRQYXJlbnQoSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgcGFyZW50KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX1BBUkVOVCwwLCgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX1NpbmdsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0VUX1BBUkVOVCwwLHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: REFUQSwwLHByZV9Ob2Rlc19HZXREYXRhKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: REFUQSwwLCgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX1NpbmdsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: REFUQSwwLHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: TkVYVCwwLHByZV9Ob2Rlc19HZXROZXh0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: TkVYVCwwLCgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX1NpbmdsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: TkVYVCwwLHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: TEVGVCwwLHByZV9Ob2Rlc19HZXRMZWZ0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: TEVGVCwwLCgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgooaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX1NpbmdsZUxpbmspKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: TEVGVCwwLHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: UklHSFQsMCxwcmVfTm9kZXNfR2V0UmlnaHQoSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: UklHSFQsMCwoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19TaW5nbGVMaW5rKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: UklHSFQsMCxwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: UEFSRU5ULDAscHJlX05vZGVzX0dldFBhcmVudChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: UEFSRU5ULDAsKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCihpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfRG91YmxlTGluaykpIG9yCihpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfU2luZ2xlTGluaykpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: UEFSRU5ULDAscHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfU2VxLCBub2RlLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCAmCiAgKChub3QgU0xpc3RfSXNFbXB0eShsaXN0KSkgPT4KICAgIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfU2VxLCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCAmCiAgKChub3QgU0xpc3RfSXNFbXB0eShsaXN0KSkgPT4KICAgIChsZXQgbm9kZTpbSGVhcHNfRGF0YV0gPSBIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSBpbgogICAgICBwcmVfTm9kZXNfR2V0RGF0YShub2RlKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfU2VxLCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCAmCiAgKChub3QgU0xpc3RfSXNFbXB0eShsaXN0KSkgPT4KICAgIChsZXQgbm9kZTpbSGVhcHNfRGF0YV0gPSBIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSBpbgogICAgICAoKGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgICAgKGlzXyhub2RlLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAgICAgKGlzXyhub2RlLCBOb2Rlc19TaW5nbGVMaW5rKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfU2VxLCB0YWlsLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCAmCiAgKChub3QgU0xpc3RfSXNFbXB0eShsaXN0KSkgPT4KICAgIChsZXQgbm9kZTpbSGVhcHNfRGF0YV0gPSBIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSBpbgogICAgICAobGV0IGRhdGE6Tm9kZXNfRGF0YSA9IE5vZGVzX0dldERhdGEobm9kZSkgaW4KICAgICAgICBwcmVfTm9kZXNfR2V0TmV4dChub2RlKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfU2VxLCB0YWlsLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCAmCiAgKChub3QgU0xpc3RfSXNFbXB0eShsaXN0KSkgPT4KICAgIChsZXQgbm9kZTpbSGVhcHNfRGF0YV0gPSBIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSBpbgogICAgICAobGV0IGRhdGE6Tm9kZXNfRGF0YSA9IE5vZGVzX0dldERhdGEobm9kZSkgaW4KICAgICAgICAoKGlzXyhub2RlLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgICAgICAoaXNfKG5vZGUsIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgICAgIChpc18obm9kZSwgTm9kZXNfU2luZ2xlTGluaykpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfTGVuZ3RoZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBsaXN0OlNMaXN0X0xpc3QgJgogIHBvc3RfU0xpc3RfTGVuZ3RoZihoZWFwLCBsaXN0LCAoaWYgKG5vdCBTTGlzdF9Jc0VtcHR5KGxpc3QpKQogIHRoZW4gbGV0IHRhaWw6Tm9kZXNfTm9kZVB0ciA9IE5vZGVzX0dldE5leHQoSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCkpIGluICgxICsgU0xpc3RfTGVuZ3RoZihoZWFwLCB0YWlsKSkKICBlbHNlIDApKSkKLHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfTGVuZ3RoZiwgdGFpbCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBsaXN0OlNMaXN0X0xpc3QgJgogICgobm90IFNMaXN0X0lzRW1wdHkobGlzdCkpID0+CiAgICBwcmVfTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfTGVuZ3RoZiwgdGFpbCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBsaXN0OlNMaXN0X0xpc3QgJgogICgobm90IFNMaXN0X0lzRW1wdHkobGlzdCkpID0+CiAgICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCksIE5vZGVzX1NpbmdsZUxpbmspKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfTGVuZ3RoZiwgdGFpbCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBsaXN0OlNMaXN0X0xpc3QgJgogICgobm90IFNMaXN0X0lzRW1wdHkobGlzdCkpID0+CiAgICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmCiAgcHJlX1NMaXN0X1B0clRvTm9kZShoZWFwLCBsaXN0LCBwb3NpdGlvbikgPT4gcG9zdF9TTGlzdF9QdHJUb05vZGUoaGVhcCwgbGlzdCwgcG9zaXRpb24sIGxldCB0YWlsOk5vZGVzX05vZGVQdHIgPSBOb2Rlc19HZXROZXh0KEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpKSBpbiAoaWYgKHBvc2l0aW9uID4gMSkKICB0aGVuIFNMaXN0X1B0clRvTm9kZShoZWFwLCB0YWlsLCAocG9zaXRpb24gLSAxKSkKICBlbHNlIGxpc3QpKSkKLHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmCiAgKChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PiBsZXQgUkVTVUxUOk5vZGVzX05vZGVQdHIgPSBsZXQgdGFpbDpOb2Rlc19Ob2RlUHRyID0gTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkgaW4gKGlmIChwb3NpdGlvbiA+IDEpCiAgdGhlbiBTTGlzdF9QdHJUb05vZGUoaGVhcCwgdGFpbCwgKHBvc2l0aW9uIC0gMSkpCiAgZWxzZSBsaXN0KSBpbiAKICAgIHByZV9Ob2Rlc19HZXREYXRhKEhlYXBzX1JldHJpZXZlKGhlYXAsIFJFU1VMVCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmCiAgKChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PiBsZXQgUkVTVUxUOk5vZGVzX05vZGVQdHIgPSBsZXQgdGFpbDpOb2Rlc19Ob2RlUHRyID0gTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkgaW4gKGlmIChwb3NpdGlvbiA+IDEpCiAgdGhlbiBTTGlzdF9QdHJUb05vZGUoaGVhcCwgdGFpbCwgKHBvc2l0aW9uIC0gMSkpCiAgZWxzZSBsaXN0KSBpbiAKICAgICgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIFJFU1VMVCksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgogICAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBSRVNVTFQpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgUkVTVUxUKSwgTm9kZXNfU2luZ2xlTGluaykpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmCiAgKChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PiBsZXQgUkVTVUxUOk5vZGVzX05vZGVQdHIgPSBsZXQgdGFpbDpOb2Rlc19Ob2RlUHRyID0gTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkgaW4gKGlmIChwb3NpdGlvbiA+IDEpCiAgdGhlbiBTTGlzdF9QdHJUb05vZGUoaGVhcCwgdGFpbCwgKHBvc2l0aW9uIC0gMSkpCiAgZWxzZSBsaXN0KSBpbiAKICAgIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBSRVNVTFQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmCiAgKChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PiBsZXQgUkVTVUxUOk5vZGVzX05vZGVQdHIgPSBsZXQgdGFpbDpOb2Rlc19Ob2RlUHRyID0gTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkgaW4gKGlmIChwb3NpdGlvbiA+IDEpCiAgdGhlbiBTTGlzdF9QdHJUb05vZGUoaGVhcCwgdGFpbCwgKHBvc2l0aW9uIC0gMSkpCiAgZWxzZSBsaXN0KSBpbiAKICAgIChsZXQgZGF0YTpOb2Rlc19EYXRhID0gTm9kZXNfR2V0RGF0YShIZWFwc19SZXRyaWV2ZShoZWFwLCBSRVNVTFQpKSwgbGlzdFNlcTpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXAsIGxpc3QpIGluCiAgICAgIHBvc2l0aW9uIGluIHNldCBpbmRzIGxpc3RTZXEpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLCB0YWlsLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmIChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PgogIHByZV9Ob2Rlc19HZXROZXh0KEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLCB0YWlsLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmIChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PgogICgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpLCBOb2Rlc19TaW5nbGVMaW5rKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLCB0YWlsLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmIChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PgogIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmIChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PgogIChsZXQgdGFpbDpOb2Rlc19Ob2RlUHRyID0gTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkgaW4KICAgICgocG9zaXRpb24gPiAxKSA9PgogICAgICBwcmVfU0xpc3RfUHRyVG9Ob2RlKGhlYXAsIHRhaWwsIChwb3NpdGlvbiAtIDEpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfUHRyVG9Ob2RlLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIGxpc3Q6U0xpc3RfTGlzdCwgcG9zaXRpb246bmF0MSAmIChwb3NpdGlvbiA8PSBTTGlzdF9MZW5ndGhmKGhlYXAsIGxpc3QpKSA9PgogIChsZXQgdGFpbDpOb2Rlc19Ob2RlUHRyID0gTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkgaW4KICAgICgocG9zaXRpb24gPiAxKSA9PgogICAgICAocG9zaXRpb24gLSAxKSA+IDApKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfSW5zZXJ0QXRCZWdpbm5pbmcsMCwoKFtkYXRhXSBeIFNMaXN0X1NlcShoZWFwfiwgbGlzdCkpID0gU0xpc3RfU2VxKGhlYXAsIFJFU1VMVCkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfSW5zZXJ0QWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgMSBpbiBzZXQgaW5kcyBvbGQpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfSW5zZXJ0QWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgb2xkIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfSW5zZXJ0QWZ0ZXIsMCxsZXQgb2xkOnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcH4sIHB0cikgaW4gKCgoW29sZCgxKV0gXiBbZGF0YV0pIF4gKHRsIG9sZCkpID0gU0xpc3RfU2VxKGhlYXAsIHB0cikpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfSW5zZXJ0LDAsKGxldCBuZXc6c2VxIG9mIChTTGlzdF9EYXRhKSA9IFNMaXN0X1NlcShoZWFwLCBSRVNVTFQpIGluCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBuZXcpICYgKGkgPD4gcG9zaXRpb24pID0+CiAgICBpIGluIHNldCBpbmRzIG5ldykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfSW5zZXJ0LDAsKGxldCBuZXc6c2VxIG9mIChTTGlzdF9EYXRhKSA9IFNMaXN0X1NlcShoZWFwLCBSRVNVTFQpIGluCiAgKChTTGlzdF9TZXEoaGVhcH4sIGxpc3QpID0gW25ldyhpKSB8IGkgaW4gc2V0IChpbmRzIG5ldykgJiAoaSA8PiBwb3NpdGlvbildKSA9PgogICAgcG9zaXRpb24gaW4gc2V0IGluZHMgbmV3KSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfSW5zZXJ0LDAsbGV0IG5ldzpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXAsIFJFU1VMVCkgaW4gKChTTGlzdF9TZXEoaGVhcH4sIGxpc3QpID0gW25ldyhpKSB8IGkgaW4gc2V0IChpbmRzIG5ldykgJiAoaSA8PiBwb3NpdGlvbildKSBhbmQgKChuZXcocG9zaXRpb24pID0gZGF0YSkgYW5kICgoSGVhcHNfQW1vdW50VXNlZChoZWFwfikgKyAxKSA9IEhlYXBzX0Ftb3VudFVzZWQoaGVhcCkpKSkKLG9wZXJhdGlvbiBwb3N0IGNvbmRpdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfSW5zZXJ0LDAscHJlX1NMaXN0X1B0clRvTm9kZShoZWFwLCBsaXN0LCAocG9zaXRpb24gLSAxKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfSW5zZXJ0LDAsKHBvc2l0aW9uIC0gMSkgPiAwCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfQXBwZW5kLDAsKCgoU0xpc3RfU2VxKGhlYXB+LCBsaXN0KSBeIFtkYXRhXSkgPSBTTGlzdF9TZXEoaGVhcCwgUkVTVUxUKSkgYW5kICgoSGVhcHNfQW1vdW50VXNlZChoZWFwfikgKyAxKSA9IEhlYXBzX0Ftb3VudFVzZWQoaGVhcCkpKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfQXBwZW5kLDAsd2hpbGUgKE5FWFQocHRyKSA8PiBOSUwpIGRvIC4uLgosd2hpbGUgbG9vcCB0ZXJtaW5hdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfVXBkYXRlLDAsZG9tIHtwb3NpdGlvbiB8LT4gZGF0YX0gc3Vic2V0IGluZHMgU0xpc3RfU2VxKGhlYXB+LCBsaXN0KQosc2VxdWVuY2UgbW9kaWZpY2F0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfVXBkYXRlLDAsKCgoU0xpc3RfU2VxKGhlYXB+LCBsaXN0KSArKyB7cG9zaXRpb24gfC0+IGRhdGF9KSA9IFNMaXN0X1NlcShoZWFwLCBSRVNVTFQpKSBhbmQgKEhlYXBzX0Ftb3VudFVzZWQoaGVhcH4pID0gSGVhcHNfQW1vdW50VXNlZChoZWFwKSkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfVXBkYXRlLCBwdHIsMCxwcmVfU0xpc3RfUHRyVG9Ob2RlKGhlYXAsIGxpc3QsIHBvc2l0aW9uKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRGVsZXRlQXRCZWdpbm5pbmcsMCxTTGlzdF9TZXEoaGVhcH4sIGxpc3QpIDw+IFtdCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRGVsZXRlQXRCZWdpbm5pbmcsMCwoKHRsIFNMaXN0X1NlcShoZWFwfiwgbGlzdCkpID0gU0xpc3RfU2VxKGhlYXAsIFJFU1VMVCkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRGVsZXRlQWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgMSBpbiBzZXQgaW5kcyBvbGQpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfRGVsZXRlQWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgb2xkIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfRGVsZXRlQWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgKHRsIG9sZCkgPD4gW10pCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRGVsZXRlQWZ0ZXIsMCxsZXQgb2xkOnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcH4sIHB0cikgaW4gKChbb2xkKDEpXSBeICh0bCAodGwgb2xkKSkpID0gU0xpc3RfU2VxKGhlYXAsIHB0cikpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRGVsZXRlLDAsKGxldCBvbGQ6c2VxIG9mIChTTGlzdF9EYXRhKSA9IFNMaXN0X1NlcShoZWFwfiwgbGlzdCkgaW4KICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG9sZCkgJiAoaSA8PiBwb3NpdGlvbikgPT4KICAgIGkgaW4gc2V0IGluZHMgb2xkKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfRGVsZXRlLDAsbGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBsaXN0KSBpbiAoKFtvbGQoaSkgfCBpIGluIHNldCAoaW5kcyBvbGQpICYgKGkgPD4gcG9zaXRpb24pXSA9IFNMaXN0X1NlcShoZWFwLCBSRVNVTFQpKSBhbmQgKEhlYXBzX0Ftb3VudFVzZWQoaGVhcH4pID0gKEhlYXBzX0Ftb3VudFVzZWQoaGVhcCkgKyAxKSkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRGVsZXRlLDAscHJlX1NMaXN0X1B0clRvTm9kZShoZWFwLCBsaXN0LCAocG9zaXRpb24gLSAxKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfRGVsZXRlLDAsKHBvc2l0aW9uIC0gMSkgPiAwCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfVHJhdmVyc2UsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBsaXN0KSBpbgogIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgb2xkKSAmCiAgICBwcmVfKHRyYXZlcnNhbCwgb2xkKGkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfVHJhdmVyc2UsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBsaXN0KSBpbgogIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgb2xkKSAmCiAgICBpIGluIHNldCBpbmRzIG9sZCkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U0xpc3RfVHJhdmVyc2UsMCxsZXQgb2xkOnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcH4sIGxpc3QpIGluICgob2xkIDw+IFtdKSA9PiAoW3RyYXZlcnNhbChvbGQoaSkpIHwgaSBpbiBzZXQgKGluZHMgb2xkKV0gPSBTTGlzdF9TZXEoaGVhcCwgUkVTVUxUKSkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfVHJhdmVyc2UsMCx3aGlsZSAocHRyIDw+IE5JTCkgZG8gLi4uCix3aGlsZSBsb29wIHRlcm1pbmF0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U0xpc3RfVHJhdmVyc2UsMCxwcmVfKHRyYXZlcnNhbCwgREFUQShwdHIpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U0xpc3RfRWxlbWVudCwwLHByZV9TTGlzdF9QdHJUb05vZGUoaGVhcCwgbGlzdCwgcG9zaXRpb24pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RExpc3RfTGFzdE5vZGUsIG5leHQsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICBwcmVfTm9kZXNfR2V0TmV4dChIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RExpc3RfTGFzdE5vZGUsIG5leHQsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSwgTm9kZXNfRG91YmxlTGluaykpIG9yCiAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSwgTm9kZXNfU2luZ2xlTGluaykpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfTGFzdE5vZGUsIG5leHQsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RExpc3RfQmFja3dhcmQsIHByZXYsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGxpc3QgPD4gTklMKSA9PgogICAgcHJlX05vZGVzX0dldFByZXYoSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfQmFja3dhcmQsIHByZXYsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGxpc3QgPD4gTklMKSA9PgogICAgKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgogICAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSwgTm9kZXNfRG91YmxlTGluaykpIG9yCiAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpLCBOb2Rlc19TaW5nbGVMaW5rKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfQmFja3dhcmQsIHByZXYsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGxpc3QgPD4gTklMKSA9PgogICAgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfQmFja3dhcmQsIGRhdGEsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGxpc3QgPD4gTklMKSA9PgogICAgKGxldCBwcmV2Ok5vZGVzX05vZGVQdHIgPSBOb2Rlc19HZXRQcmV2KEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpKSBpbgogICAgICBwcmVfTm9kZXNfR2V0RGF0YShIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfQmFja3dhcmQsIGRhdGEsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGxpc3QgPD4gTklMKSA9PgogICAgKGxldCBwcmV2Ok5vZGVzX05vZGVQdHIgPSBOb2Rlc19HZXRQcmV2KEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpKSBpbgogICAgICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBsaXN0KSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpLCBOb2Rlc19TaW5nbGVMaW5rKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfQmFja3dhcmQsIGRhdGEsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgbGlzdDpETGlzdF9MaXN0ICYKICAoKGxpc3QgPD4gTklMKSA9PgogICAgKGxldCBwcmV2Ok5vZGVzX05vZGVQdHIgPSBOb2Rlc19HZXRQcmV2KEhlYXBzX1JldHJpZXZlKGhlYXAsIGxpc3QpKSBpbgogICAgICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgbGlzdCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfSW5zZXJ0QXRCZWdpbm5pbmcsMCwoKFtkYXRhXSBeIFNMaXN0X1NlcShoZWFwfiwgbGlzdCkpID0gU0xpc3RfU2VxKGhlYXAsIFJFU1VMVCkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfSW5zZXJ0QWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgMSBpbiBzZXQgaW5kcyBvbGQpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RExpc3RfSW5zZXJ0QWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgb2xkIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfSW5zZXJ0QWZ0ZXIsMCxsZXQgb2xkOnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcH4sIHB0cikgaW4gKCgoW29sZCgxKV0gXiBbZGF0YV0pIF4gKHRsIG9sZCkpID0gU0xpc3RfU2VxKGhlYXAsIHB0cikpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfSW5zZXJ0LDAsKERMaXN0X0lzTGlzdChoZWFwLCBSRVNVTFQpID0+CiAgKGxldCBuZXc6c2VxIG9mIChTTGlzdF9EYXRhKSA9IFNMaXN0X1NlcShoZWFwLCBSRVNVTFQpIGluCiAgICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG5ldykgJiAoaSA8PiBwb3NpdGlvbikgPT4KICAgICAgaSBpbiBzZXQgaW5kcyBuZXcpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfSW5zZXJ0LDAsKERMaXN0X0lzTGlzdChoZWFwLCBSRVNVTFQpID0+CiAgKGxldCBuZXc6c2VxIG9mIChTTGlzdF9EYXRhKSA9IFNMaXN0X1NlcShoZWFwLCBSRVNVTFQpIGluCiAgICAoKFNMaXN0X1NlcShoZWFwfiwgbGlzdCkgPSBbbmV3KGkpIHwgaSBpbiBzZXQgKGluZHMgbmV3KSAmIChpIDw+IHBvc2l0aW9uKV0pID0+CiAgICAgIHBvc2l0aW9uIGluIHNldCBpbmRzIG5ldykpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfSW5zZXJ0LDAsKERMaXN0X0lzTGlzdChoZWFwLCBSRVNVTFQpIGFuZCBsZXQgbmV3OnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcCwgUkVTVUxUKSBpbiAoKFNMaXN0X1NlcShoZWFwfiwgbGlzdCkgPSBbbmV3KGkpIHwgaSBpbiBzZXQgKGluZHMgbmV3KSAmIChpIDw+IHBvc2l0aW9uKV0pIGFuZCAobmV3KHBvc2l0aW9uKSA9IGRhdGEpKSkKLG9wZXJhdGlvbiBwb3N0IGNvbmRpdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RExpc3RfSW5zZXJ0LDAscHJlX1NMaXN0X1B0clRvTm9kZShoZWFwLCBsaXN0LCAocG9zaXRpb24gLSAxKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfSW5zZXJ0LDAsKHBvc2l0aW9uIC0gMSkgPiAwCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfRGVsZXRlQXRCZWdpbm5pbmcsMCxTTGlzdF9TZXEoaGVhcH4sIGxpc3QpIDw+IFtdCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfRGVsZXRlQXRCZWdpbm5pbmcsMCwoKHRsIFNMaXN0X1NlcShoZWFwfiwgbGlzdCkpID0gU0xpc3RfU2VxKGhlYXAsIFJFU1VMVCkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfRGVsZXRlQWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgMSBpbiBzZXQgaW5kcyBvbGQpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: RExpc3RfRGVsZXRlQWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgb2xkIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfRGVsZXRlQWZ0ZXIsMCwobGV0IG9sZDpzZXEgb2YgKFNMaXN0X0RhdGEpID0gU0xpc3RfU2VxKGhlYXB+LCBwdHIpIGluCiAgKHRsIG9sZCkgPD4gW10pCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfRGVsZXRlQWZ0ZXIsMCxsZXQgb2xkOnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcH4sIHB0cikgaW4gKChbb2xkKDEpXSBeICh0bCAodGwgb2xkKSkpID0gU0xpc3RfU2VxKGhlYXAsIHB0cikpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfRGVsZXRlLDAsKERMaXN0X0lzTGlzdChoZWFwLCBSRVNVTFQpID0+CiAgKGxldCBvbGQ6c2VxIG9mIChTTGlzdF9EYXRhKSA9IFNMaXN0X1NlcShoZWFwfiwgbGlzdCkgaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgb2xkKSAmIChpIDw+IHBvc2l0aW9uKSA9PgogICAgICBpIGluIHNldCBpbmRzIG9sZCkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfRGVsZXRlLDAsKERMaXN0X0lzTGlzdChoZWFwLCBSRVNVTFQpIGFuZCBsZXQgb2xkOnNlcSBvZiAoU0xpc3RfRGF0YSkgPSBTTGlzdF9TZXEoaGVhcH4sIGxpc3QpIGluICgoW29sZChpKSB8IGkgaW4gc2V0IChpbmRzIG9sZCkgJiAoaSA8PiBwb3NpdGlvbildID0gU0xpc3RfU2VxKGhlYXAsIFJFU1VMVCkpIGFuZCAoSGVhcHNfQW1vdW50VXNlZChoZWFwfikgPSAoSGVhcHNfQW1vdW50VXNlZChoZWFwKSArIDEpKSkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RExpc3RfRGVsZXRlLDAscHJlX1NMaXN0X1B0clRvTm9kZShoZWFwLCBsaXN0LCAocG9zaXRpb24gLSAxKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfRGVsZXRlLDAsKHBvc2l0aW9uIC0gMSkgPiAwCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfQXBwZW5kLDAsKCgoU0xpc3RfU2VxKGhlYXB+LCBsaXN0KSBeIFtkYXRhXSkgPSBTTGlzdF9TZXEoaGVhcCwgUkVTVUxUKSkgYW5kICgoKEhlYXBzX0Ftb3VudFVzZWQoaGVhcH4pICsgMSkgPSBIZWFwc19BbW91bnRVc2VkKGhlYXApKSBhbmQgRExpc3RfSXNMaXN0KGhlYXAsIFJFU1VMVCkpKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: RExpc3RfQXBwZW5kLDAsd2hpbGUgKE5FWFQocHRyKSA8PiBOSUwpIGRvIC4uLgosd2hpbGUgbG9vcCB0ZXJtaW5hdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: UXVldWVzX0RlcXVldWUsMCxpc18oUkVTVUxULCAoUXVldWVzX1F1ZXVlICogUXVldWVzX0RhdGEpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U3RhY2tzX1BvcCwwLGlzXyhSRVNVTFQsIChTdGFja3NfU3RhY2sgKiBTdGFja3NfRGF0YSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX1RyZWUsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSkgJgogIChmb3JhbGwgbm9kZSBpbiBzZXQgdHJlZSAmCiAgICBwcmVfU1RyZWVzX0lzUm9vdCh0cmVlLCBub2RlKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1RyZWUsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSkgJgogIChmb3JhbGwgbm9kZSBpbiBzZXQgdHJlZSAmCiAgICBwcmVfU1RyZWVzX0lzQ2hpbGQodHJlZSwgbm9kZSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX1RyZWUsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSkgJgogICgoZm9yYWxsIG5vZGUgaW4gc2V0IHRyZWUgJiAoKG5vdCBTVHJlZXNfSXNSb290KHRyZWUsIG5vZGUpKSA8PT4gKFNUcmVlc19Jc0NoaWxkKHRyZWUsIG5vZGUpIGFuZCBTVHJlZXNfSXNVbmlxdWUodHJlZSwgbm9kZSkpKSkgPT4KICAgIChmb3JhbGwgbm9kZSBpbiBzZXQgdHJlZSAmCiAgICAgIHByZV9TVHJlZXNfSXNSb290KHRyZWUsIG5vZGUpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luZm8sIHIsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHQsIGMpOlNUcmVlc19JbmZvICYKICAoKChjID0gbmlsKSA8PT4gKHQgPSB7fSkpID0+CiAgICAoKGMgaW4gc2V0IHQpID0+CiAgICAgIHByZV9TVHJlZXNfUm9vdCh0KSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01rVHJlZSwwLChmb3JhbGwgdHJlZTpzZXQgb2YgKFNUcmVlc19Ob2RlKSAmIGludl9TVHJlZXNfVHJlZSh0cmVlKSA9PgogIGludl9TVHJlZXNfVHJlZSh0cmVlKSBhbmQgKGlzXyh0cmVlLCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01rSW5mbywwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgY3VycmVudDpTVHJlZXNfTm9kZSAmCiAgaW52X1NUcmVlc19JbmZvKG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01rSW5mbywwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgY3VycmVudDpTVHJlZXNfTm9kZSAmIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSkgPT4KICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luaXQsMCxpbnZfU1RyZWVzX1RyZWUoe30pIGFuZCAoCmFuZCBpc18oe30sIHNldCBvZiAoU1RyZWVzX05vZGUpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luaXQsMCxpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8oe30sIG5pbCkpIGFuZCAoaW52X1NUcmVlc19UcmVlKHt9KSBhbmQgKAphbmQgaXNfKHt9LCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0lzUm9vdCwwLChmb3JhbGwgdHJlZTpzZXQgb2YgKFNUcmVlc19Ob2RlKSwgbWtfU1RyZWVzX05vZGUoZHIsIHByKTpTVHJlZXNfTm9kZSAmIChta19TVHJlZXNfTm9kZShkciwgcHIpIGluIHNldCB0cmVlKSA9PgogIHByZV9TVHJlZXNfSXNDaGlsZCh0cmVlLCBta19TVHJlZXNfTm9kZShkciwgcHIpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0lzUGFyZW50LDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBub2RlOlNUcmVlc19Ob2RlICYgKG5vZGUgaW4gc2V0IHRyZWUpID0+CiAgKGZvcmFsbCBjaGlsZCBpbiBzZXQgdHJlZSAmCiAgICBwcmVfU1RyZWVzX0lzUGFyZW50T2YodHJlZSwgbm9kZSwgY2hpbGQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0lzQ2hpbGQsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSksIG5vZGU6U1RyZWVzX05vZGUgJiAobm9kZSBpbiBzZXQgdHJlZSkgPT4KICAoZm9yYWxsIHBhcmVudCBpbiBzZXQgdHJlZSAmCiAgICBwcmVfU1RyZWVzX0lzUGFyZW50T2YodHJlZSwgcGFyZW50LCBub2RlKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0lzQ2hpbGQsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSksIG5vZGU6U1RyZWVzX05vZGUgJiAobm9kZSBpbiBzZXQgdHJlZSkgPT4KICAoKGV4aXN0cyBbcGFyZW50IGluIHNldCB0cmVlXSAmIFNUcmVlc19Jc1BhcmVudE9mKHRyZWUsIHBhcmVudCwgbm9kZSkpID0+CiAgICAoZm9yYWxsIHBhcmVudCBpbiBzZXQgdHJlZSAmCiAgICAgIHByZV9TVHJlZXNfSXNQYXJlbnRPZih0cmVlLCBwYXJlbnQsIG5vZGUpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0lzUGFyZW50T2YsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSksIG5vZGUxOlNUcmVlc19Ob2RlLCBub2RlMjpTVHJlZXNfTm9kZSAmICgobm9kZTEgaW4gc2V0IHRyZWUpIGFuZCAobm9kZTIgaW4gc2V0IHRyZWUpKSA9PgogIHByZV9TVHJlZXNfSXNSaWdodENoaWxkT2YodHJlZSwgbm9kZTIsIG5vZGUxKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0lzUGFyZW50T2YsMCwoZm9yYWxsIHRyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSksIG5vZGUxOlNUcmVlc19Ob2RlLCBub2RlMjpTVHJlZXNfTm9kZSAmICgobm9kZTEgaW4gc2V0IHRyZWUpIGFuZCAobm9kZTIgaW4gc2V0IHRyZWUpKSA9PgogIChub3QgU1RyZWVzX0lzUmlnaHRDaGlsZE9mKHRyZWUsIG5vZGUyLCBub2RlMSkgPT4KICAgIHByZV9TVHJlZXNfSXNMZWZ0Q2hpbGRPZih0cmVlLCBub2RlMiwgbm9kZTEpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAoKChkaXJlY3Rpb24gPSA8VG9Sb290PikgPT4gKHRyZWUgPSB7fSkpID0+CiAgICBwcmVfU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAoKChkaXJlY3Rpb24gPSA8VG9Sb290PikgPT4gKHRyZWUgPSB7fSkpID0+CiAgICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAoKChkaXJlY3Rpb24gPSA8VG9Sb290PikgPT4gKHRyZWUgPSB7fSkpID0+CiAgICAoKChkaXJlY3Rpb24gPSA8VG9MZWZ0PikgPT4gKG5vdCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSkgPT4KICAgICAgcHJlX1NUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAoKChkaXJlY3Rpb24gPSA8VG9Sb290PikgPT4gKHRyZWUgPSB7fSkpID0+CiAgICAoKChkaXJlY3Rpb24gPSA8VG9MZWZ0PikgPT4gKG5vdCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSkgPT4KICAgICAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICBwcmVfU1RyZWVzX0luc2VydChta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGF0YSwgZGlyZWN0aW9uKSA9PiBwb3N0X1NUcmVlc19JbnNlcnQobWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCksIGRhdGEsIGRpcmVjdGlvbiwgKGNhc2VzIG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pIDoKICBjYXNlIG1rXyhuaWwsIDxUb1Jvb3Q+KSAtPiBTVHJlZXNfSW5zZXJ0Um9vdChkYXRhKSwKICBjYXNlIG1rXygtLCA8VG9MZWZ0PikgLT4gU1RyZWVzX0luc2VydExlZnQodHJlZSwgY3VycmVudCwgZGF0YSksCiAgY2FzZSBta18oLSwgPFRvUmlnaHQ+KSAtPiBTVHJlZXNfSW5zZXJ0UmlnaHQodHJlZSwgY3VycmVudCwgZGF0YSkKICBlbmQpKSkKLHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlID0ge30pKSBhbmQgKCgoZGlyZWN0aW9uID0gPFRvTGVmdD4pID0+IChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpIGFuZCAoKGRpcmVjdGlvbiA9IDxUb1JpZ2h0PikgPT4gKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkgPT4KICAobm90IG1rXyhuaWwsIDxUb1Jvb3Q+KSA9IG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pID0+CiAgICAobWtfKC0sIDxUb0xlZnQ+KSA9IG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pID0+IAogICAgICBwcmVfU1RyZWVzX0luc2VydExlZnQodHJlZSwgY3VycmVudCwgZGF0YSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlID0ge30pKSBhbmQgKCgoZGlyZWN0aW9uID0gPFRvTGVmdD4pID0+IChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpIGFuZCAoKGRpcmVjdGlvbiA9IDxUb1JpZ2h0PikgPT4gKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkgPT4KICAobm90IG1rXyhuaWwsIDxUb1Jvb3Q+KSA9IG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pID0+CiAgICAobWtfKC0sIDxUb0xlZnQ+KSA9IG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pID0+IAogICAgICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlID0ge30pKSBhbmQgKCgoZGlyZWN0aW9uID0gPFRvTGVmdD4pID0+IChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpIGFuZCAoKGRpcmVjdGlvbiA9IDxUb1JpZ2h0PikgPT4gKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkgPT4KICAobm90IG1rXyhuaWwsIDxUb1Jvb3Q+KSA9IG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pID0+CiAgICAobm90IG1rXygtLCA8VG9MZWZ0PikgPSBta18oY3VycmVudCwgZGlyZWN0aW9uKSA9PgogICAgICAobWtfKC0sIDxUb1JpZ2h0PikgPSBta18oY3VycmVudCwgZGlyZWN0aW9uKSA9PiAKICAgICAgICBwcmVfU1RyZWVzX0luc2VydFJpZ2h0KHRyZWUsIGN1cnJlbnQsIGRhdGEpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlID0ge30pKSBhbmQgKCgoZGlyZWN0aW9uID0gPFRvTGVmdD4pID0+IChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpIGFuZCAoKGRpcmVjdGlvbiA9IDxUb1JpZ2h0PikgPT4gKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkgPT4KICAobm90IG1rXyhuaWwsIDxUb1Jvb3Q+KSA9IG1rXyhjdXJyZW50LCBkaXJlY3Rpb24pID0+CiAgICAobm90IG1rXygtLCA8VG9MZWZ0PikgPSBta18oY3VycmVudCwgZGlyZWN0aW9uKSA9PgogICAgICAobWtfKC0sIDxUb1JpZ2h0PikgPSBta18oY3VycmVudCwgZGlyZWN0aW9uKSA9PiAKICAgICAgICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRhdGE6U1RyZWVzX0RhdGEsIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlID0ge30pKSBhbmQgKCgoZGlyZWN0aW9uID0gPFRvTGVmdD4pID0+IChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpIGFuZCAoKGRpcmVjdGlvbiA9IDxUb1JpZ2h0PikgPT4gKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkgPT4KICBta18oY3VycmVudCwgZGlyZWN0aW9uKSA9IG1rXyhuaWwsIDxUb1Jvb3Q+KSBvciBta18oY3VycmVudCwgZGlyZWN0aW9uKSA9IG1rXygtLCA8VG9MZWZ0Pikgb3IgbWtfKGN1cnJlbnQsIGRpcmVjdGlvbikgPSBta18oLSwgPFRvUmlnaHQ+KSkKLGNhc2VzIGV4aGF1c3RpdmUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydFJvb3QsMCwoZm9yYWxsIGRhdGE6U1RyZWVzX0RhdGEgJgogIChsZXQgcm9vdDpTVHJlZXNfTm9kZSA9IG1rX1NUcmVlc19Ob2RlKGRhdGEsIDEpIGluCiAgICBpbnZfU1RyZWVzX1RyZWUoe3Jvb3R9KSBhbmQgKAogICAgYW5kIGlzXyh7cm9vdH0sIHNldCBvZiAoU1RyZWVzX05vZGUpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydFJvb3QsMCwoZm9yYWxsIGRhdGE6U1RyZWVzX0RhdGEgJgogIChsZXQgcm9vdDpTVHJlZXNfTm9kZSA9IG1rX1NUcmVlc19Ob2RlKGRhdGEsIDEpIGluCiAgICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8oe3Jvb3R9LCByb290KSkgYW5kIChpbnZfU1RyZWVzX1RyZWUoe3Jvb3R9KSBhbmQgKAogICAgYW5kIGlzXyh7cm9vdH0sIHNldCBvZiAoU1RyZWVzX05vZGUpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydExlZnQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIGN1cnJlbnQ6U1RyZWVzX05vZGUsIGRhdGE6U1RyZWVzX0RhdGEgJgogIHByZV9TVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydExlZnQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIGN1cnJlbnQ6U1RyZWVzX05vZGUsIGRhdGE6U1RyZWVzX0RhdGEgJiAobm90IFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgKGxldCBta19TVHJlZXNfTm9kZSgtLCBwb3NpdGlvbik6U1RyZWVzX05vZGUgPSBjdXJyZW50IGluCiAgICAobGV0IG5ldzpTVHJlZXNfTm9kZSA9IG1rX1NUcmVlc19Ob2RlKGRhdGEsICgyICogcG9zaXRpb24pKSBpbgogICAgICBpbnZfU1RyZWVzX1RyZWUoKHRyZWUgdW5pb24ge25ld30pKSBhbmQgKGlzXygodHJlZSB1bmlvbiB7bmV3fSksIHNldCBvZiAoU1RyZWVzX05vZGUpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydExlZnQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIGN1cnJlbnQ6U1RyZWVzX05vZGUsIGRhdGE6U1RyZWVzX0RhdGEgJiAobm90IFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgKGxldCBta19TVHJlZXNfTm9kZSgtLCBwb3NpdGlvbik6U1RyZWVzX05vZGUgPSBjdXJyZW50IGluCiAgICAobGV0IG5ldzpTVHJlZXNfTm9kZSA9IG1rX1NUcmVlc19Ob2RlKGRhdGEsICgyICogcG9zaXRpb24pKSBpbgogICAgICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8oKHRyZWUgdW5pb24ge25ld30pLCBuZXcpKSBhbmQgKGludl9TVHJlZXNfVHJlZSgodHJlZSB1bmlvbiB7bmV3fSkpIGFuZCAoaXNfKCh0cmVlIHVuaW9uIHtuZXd9KSwgc2V0IG9mIChTVHJlZXNfTm9kZSkpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luc2VydFJpZ2h0LDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBjdXJyZW50OlNUcmVlc19Ob2RlLCBkYXRhOlNUcmVlc19EYXRhICYKICBwcmVfU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydFJpZ2h0LDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBjdXJyZW50OlNUcmVlc19Ob2RlLCBkYXRhOlNUcmVlc19EYXRhICYgKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAobGV0IG1rX1NUcmVlc19Ob2RlKC0sIHBvc2l0aW9uKTpTVHJlZXNfTm9kZSA9IGN1cnJlbnQgaW4KICAgIChsZXQgbmV3OlNUcmVlc19Ob2RlID0gbWtfU1RyZWVzX05vZGUoZGF0YSwgKCgyICogcG9zaXRpb24pICsgMSkpIGluCiAgICAgIGludl9TVHJlZXNfVHJlZSgodHJlZSB1bmlvbiB7bmV3fSkpIGFuZCAoaXNfKCh0cmVlIHVuaW9uIHtuZXd9KSwgc2V0IG9mIChTVHJlZXNfTm9kZSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luc2VydFJpZ2h0LDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBjdXJyZW50OlNUcmVlc19Ob2RlLCBkYXRhOlNUcmVlc19EYXRhICYgKG5vdCBTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAobGV0IG1rX1NUcmVlc19Ob2RlKC0sIHBvc2l0aW9uKTpTVHJlZXNfTm9kZSA9IGN1cnJlbnQgaW4KICAgIChsZXQgbmV3OlNUcmVlc19Ob2RlID0gbWtfU1RyZWVzX05vZGUoZGF0YSwgKCgyICogcG9zaXRpb24pICsgMSkpIGluCiAgICAgIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbygodHJlZSB1bmlvbiB7bmV3fSksIG5ldykpIGFuZCAoaW52X1NUcmVlc19UcmVlKCh0cmVlIHVuaW9uIHtuZXd9KSkgYW5kIChpc18oKHRyZWUgdW5pb24ge25ld30pLCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1RyYXZlcnNlLCBuZXd0cmVlLDAsKGZvcmFsbCB0cmVlaW5mbzpTVHJlZXNfSW5mbywgdHJhdmVyc2FsOihTVHJlZXNfRGF0YSAtPiBTVHJlZXNfRGF0YSkgJgogIChsZXQgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gPSB0cmVlaW5mbyBpbgogICAgKChjdXJyZW50IDw+IG5pbCkgPT4KICAgICAgKGxldCBta19TVHJlZXNfTm9kZShkYXRhLCBwb3NpdGlvbik6W1NUcmVlc19Ob2RlXSA9IGN1cnJlbnQgaW4KICAgICAgICAoZm9yYWxsIG1rX1NUcmVlc19Ob2RlKGRhdGEsIHBvc2l0aW9uKSBpbiBzZXQgdHJlZSAmCiAgICAgICAgICBwcmVfKHRyYXZlcnNhbCwgZGF0YSkpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX1RyYXZlcnNlLDAsKGZvcmFsbCB0cmVlaW5mbzpTVHJlZXNfSW5mbywgdHJhdmVyc2FsOihTVHJlZXNfRGF0YSAtPiBTVHJlZXNfRGF0YSkgJgogIChsZXQgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gPSB0cmVlaW5mbyBpbgogICAgKChjdXJyZW50IDw+IG5pbCkgPT4KICAgICAgKGxldCBta19TVHJlZXNfTm9kZShkYXRhLCBwb3NpdGlvbik6W1NUcmVlc19Ob2RlXSA9IGN1cnJlbnQgaW4KICAgICAgICAobGV0IG5ld3RyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSkgPSB7bWtfU1RyZWVzX05vZGUodHJhdmVyc2FsKGRhdGEpLCBwb3NpdGlvbikgfCBbbWtfU1RyZWVzX05vZGUoZGF0YSwgcG9zaXRpb24pIGluIHNldCB0cmVlXX0gaW4KICAgICAgICAgIHByZV8odHJhdmVyc2FsLCBkYXRhKSkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1RyYXZlcnNlLDAsKGZvcmFsbCB0cmVlaW5mbzpTVHJlZXNfSW5mbywgdHJhdmVyc2FsOihTVHJlZXNfRGF0YSAtPiBTVHJlZXNfRGF0YSkgJgogIChsZXQgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gPSB0cmVlaW5mbyBpbgogICAgKChjdXJyZW50IDw+IG5pbCkgPT4KICAgICAgKGxldCBta19TVHJlZXNfTm9kZShkYXRhLCBwb3NpdGlvbik6W1NUcmVlc19Ob2RlXSA9IGN1cnJlbnQgaW4KICAgICAgICAobGV0IG5ld3RyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSkgPSB7bWtfU1RyZWVzX05vZGUodHJhdmVyc2FsKGRhdGEpLCBwb3NpdGlvbikgfCBbbWtfU1RyZWVzX05vZGUoZGF0YSwgcG9zaXRpb24pIGluIHNldCB0cmVlXX0gaW4KICAgICAgICAgIGludl9TVHJlZXNfVHJlZShuZXd0cmVlKSBhbmQgKGlzXyhuZXd0cmVlLCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX1RyYXZlcnNlLDAsKGZvcmFsbCB0cmVlaW5mbzpTVHJlZXNfSW5mbywgdHJhdmVyc2FsOihTVHJlZXNfRGF0YSAtPiBTVHJlZXNfRGF0YSkgJgogIChsZXQgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gPSB0cmVlaW5mbyBpbgogICAgKChjdXJyZW50IDw+IG5pbCkgPT4KICAgICAgKGxldCBta19TVHJlZXNfTm9kZShkYXRhLCBwb3NpdGlvbik6W1NUcmVlc19Ob2RlXSA9IGN1cnJlbnQgaW4KICAgICAgICAobGV0IG5ld3RyZWU6c2V0IG9mIChTVHJlZXNfTm9kZSkgPSB7bWtfU1RyZWVzX05vZGUodHJhdmVyc2FsKGRhdGEpLCBwb3NpdGlvbikgfCBbbWtfU1RyZWVzX05vZGUoZGF0YSwgcG9zaXRpb24pIGluIHNldCB0cmVlXX0gaW4KICAgICAgICAgIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbyhuZXd0cmVlLCBta19TVHJlZXNfTm9kZSh0cmF2ZXJzYWwoZGF0YSksIHBvc2l0aW9uKSkpIGFuZCAoaW52X1NUcmVlc19UcmVlKG5ld3RyZWUpIGFuZCAoaXNfKG5ld3RyZWUsIHNldCBvZiAoU1RyZWVzX05vZGUpKSkpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogICg8VG9Sb290PiA9IGRpcmVjdGlvbiA9PiAKICAgIHByZV9TVHJlZXNfUm9vdCh0cmVlKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogICg8VG9Sb290PiA9IGRpcmVjdGlvbiA9PiAKICAgIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbyh0cmVlLCBTVHJlZXNfUm9vdCh0cmVlKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIChub3QgPFRvUm9vdD4gPSBkaXJlY3Rpb24gPT4KICAgICg8VG9MZWZ0PiA9IGRpcmVjdGlvbiA9PiAKICAgICAgcHJlX1NUcmVlc19MZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIChub3QgPFRvUm9vdD4gPSBkaXJlY3Rpb24gPT4KICAgICg8VG9MZWZ0PiA9IGRpcmVjdGlvbiA9PiAKICAgICAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIChub3QgPFRvUm9vdD4gPSBkaXJlY3Rpb24gPT4KICAgICg8VG9MZWZ0PiA9IGRpcmVjdGlvbiA9PiAKICAgICAgaW52X1NUcmVlc19JbmZvKG1rX1NUcmVlc19JbmZvKHRyZWUsIFNUcmVlc19MZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIChub3QgPFRvUm9vdD4gPSBkaXJlY3Rpb24gPT4KICAgIChub3QgPFRvTGVmdD4gPSBkaXJlY3Rpb24gPT4KICAgICAgKDxUb1JpZ2h0PiA9IGRpcmVjdGlvbiA9PiAKICAgICAgICBwcmVfU1RyZWVzX1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIChub3QgPFRvUm9vdD4gPSBkaXJlY3Rpb24gPT4KICAgIChub3QgPFRvTGVmdD4gPSBkaXJlY3Rpb24gPT4KICAgICAgKDxUb1JpZ2h0PiA9IGRpcmVjdGlvbiA9PiAKICAgICAgICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIChub3QgPFRvUm9vdD4gPSBkaXJlY3Rpb24gPT4KICAgIChub3QgPFRvTGVmdD4gPSBkaXJlY3Rpb24gPT4KICAgICAgKDxUb1JpZ2h0PiA9IGRpcmVjdGlvbiA9PiAKICAgICAgICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8odHJlZSwgU1RyZWVzX1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVJbkRpciwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYgU1RyZWVzX0V4aXN0c0RpcmVjdGlvbihta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KSwgZGlyZWN0aW9uKSA9PgogIGRpcmVjdGlvbiA9IDxUb1Jvb3Q+IG9yIGRpcmVjdGlvbiA9IDxUb0xlZnQ+IG9yIGRpcmVjdGlvbiA9IDxUb1JpZ2h0PikKLGNhc2VzIGV4aGF1c3RpdmUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb05vZGUsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBwb3NpdGlvbjpuYXQxICYKICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVUb05vZGUsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBwb3NpdGlvbjpuYXQxICYgU1RyZWVzX0V4aXN0c05vZGUobWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCksIHBvc2l0aW9uKSA9PgogIHByZV9TVHJlZXNfR2V0Tm9kZSh0cmVlLCBwb3NpdGlvbikpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVUb05vZGUsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBwb3NpdGlvbjpuYXQxICYgU1RyZWVzX0V4aXN0c05vZGUobWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCksIHBvc2l0aW9uKSA9PgogIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbyh0cmVlLCBTVHJlZXNfR2V0Tm9kZSh0cmVlLCBwb3NpdGlvbikpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb1BhcmVudCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJgogIHByZV9TVHJlZXNfSXNSb290KHRyZWUsIGN1cnJlbnQpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb1BhcmVudCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJgogIGlzXyhjdXJyZW50LCBTVHJlZXNfTm9kZSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX01vdmVUb1BhcmVudCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAobm90IFNUcmVlc19Jc1Jvb3QodHJlZSwgY3VycmVudCkpID0+CiAgcHJlX1NUcmVlc19QYXJlbnQodHJlZSwgY3VycmVudCkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVUb1BhcmVudCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAobm90IFNUcmVlc19Jc1Jvb3QodHJlZSwgY3VycmVudCkpID0+CiAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb1BhcmVudCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAobm90IFNUcmVlc19Jc1Jvb3QodHJlZSwgY3VycmVudCkpID0+CiAgaW52X1NUcmVlc19JbmZvKG1rX1NUcmVlc19JbmZvKHRyZWUsIFNUcmVlc19QYXJlbnQodHJlZSwgY3VycmVudCkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb0Fuc2Nlc3RvciwwLChmb3JhbGwgdHJlZWluZm86U1RyZWVzX0luZm8sIHBhdGhsZW5ndGg6bmF0MSAmIHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHRyZWVpbmZvKSA9PgogICgocGF0aGxlbmd0aCA+IDEpID0+CiAgICBwcmVfU1RyZWVzX01vdmVUb0Fuc2Nlc3RvcihTVHJlZXNfTW92ZVRvUGFyZW50KHRyZWVpbmZvKSwgKHBhdGhsZW5ndGggLSAxKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb0Fuc2Nlc3RvciwwLChmb3JhbGwgdHJlZWluZm86U1RyZWVzX0luZm8sIHBhdGhsZW5ndGg6bmF0MSAmIHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHRyZWVpbmZvKSA9PgogICgocGF0aGxlbmd0aCA+IDEpID0+CiAgICAocGF0aGxlbmd0aCAtIDEpID4gMCkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX01vdmVUb0Fuc2Nlc3RvciwwLChmb3JhbGwgdHJlZWluZm86U1RyZWVzX0luZm8sIHBhdGhsZW5ndGg6bmF0MSAmIHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHRyZWVpbmZvKSA9PgogICgocGF0aGxlbmd0aCA+IDEpID0+CiAgICBwcmVfU1RyZWVzX01vdmVUb1BhcmVudCh0cmVlaW5mbykpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX01vdmVUb0Fuc2Nlc3RvciwwLChmb3JhbGwgdHJlZWluZm86U1RyZWVzX0luZm8sIHBhdGhsZW5ndGg6bmF0MSAmIHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHRyZWVpbmZvKSA9PgogIChub3QgKHBhdGhsZW5ndGggPiAxKSA9PgogICAgcHJlX1NUcmVlc19Nb3ZlVG9QYXJlbnQodHJlZWluZm8pKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX1Jvb3QsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUgJiAodHJlZSA8PiB7fSkgPT4KICBleGlzdHMxIHJvb3QgaW4gc2V0IHRyZWUgJiBTVHJlZXNfSXNSb290KHRyZWUsIHJvb3QpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX1Jvb3QsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUgJiAodHJlZSA8PiB7fSkgPT4KICAoZm9yYWxsIHJvb3QgaW4gc2V0IHRyZWUgJgogICAgcHJlX1NUcmVlc19Jc1Jvb3QodHJlZSwgcm9vdCkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX1BhcmVudCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgbm9kZTpTVHJlZXNfTm9kZSAmCiAgKChub2RlIGluIHNldCB0cmVlKSA9PgogICAgcHJlX1NUcmVlc19Jc1Jvb3QodHJlZSwgbm9kZSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX1BhcmVudCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgbm9kZTpTVHJlZXNfTm9kZSAmICgobm9kZSBpbiBzZXQgdHJlZSkgYW5kIChub3QgU1RyZWVzX0lzUm9vdCh0cmVlLCBub2RlKSkpID0+CiAgZXhpc3RzMSBwYXJlbnQgaW4gc2V0IHRyZWUgJiBTVHJlZXNfSXNQYXJlbnRPZih0cmVlLCBwYXJlbnQsIG5vZGUpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX1BhcmVudCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgbm9kZTpTVHJlZXNfTm9kZSAmICgobm9kZSBpbiBzZXQgdHJlZSkgYW5kIChub3QgU1RyZWVzX0lzUm9vdCh0cmVlLCBub2RlKSkpID0+CiAgKGZvcmFsbCBwYXJlbnQgaW4gc2V0IHRyZWUgJgogICAgcHJlX1NUcmVlc19Jc1BhcmVudE9mKHRyZWUsIHBhcmVudCwgbm9kZSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0xlZnRDaGlsZCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgcGFyZW50OlNUcmVlc19Ob2RlICYKICAoKHBhcmVudCBpbiBzZXQgdHJlZSkgPT4KICAgIHByZV9TVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIHBhcmVudCkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0xlZnRDaGlsZCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgcGFyZW50OlNUcmVlc19Ob2RlICYgKChwYXJlbnQgaW4gc2V0IHRyZWUpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIHBhcmVudCkpID0+CiAgZXhpc3RzMSBsZWZ0Y2hpbGQgaW4gc2V0IHRyZWUgJiBTVHJlZXNfSXNMZWZ0Q2hpbGRPZih0cmVlLCBsZWZ0Y2hpbGQsIHBhcmVudCkpCix1bmlxdWUgZXhpc3RlbmNlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0xlZnRDaGlsZCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgcGFyZW50OlNUcmVlc19Ob2RlICYgKChwYXJlbnQgaW4gc2V0IHRyZWUpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIHBhcmVudCkpID0+CiAgKGZvcmFsbCBsZWZ0Y2hpbGQgaW4gc2V0IHRyZWUgJgogICAgcHJlX1NUcmVlc19Jc0xlZnRDaGlsZE9mKHRyZWUsIGxlZnRjaGlsZCwgcGFyZW50KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1JpZ2h0Q2hpbGQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIHBhcmVudDpTVHJlZXNfTm9kZSAmCiAgKChwYXJlbnQgaW4gc2V0IHRyZWUpID0+CiAgICBwcmVfU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgcGFyZW50KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1JpZ2h0Q2hpbGQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIHBhcmVudDpTVHJlZXNfTm9kZSAmICgocGFyZW50IGluIHNldCB0cmVlKSBhbmQgU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgcGFyZW50KSkgPT4KICBleGlzdHMxIHJpZ2h0Y2hpbGQgaW4gc2V0IHRyZWUgJiBTVHJlZXNfSXNSaWdodENoaWxkT2YodHJlZSwgcmlnaHRjaGlsZCwgcGFyZW50KSkKLHVuaXF1ZSBleGlzdGVuY2UgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1JpZ2h0Q2hpbGQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIHBhcmVudDpTVHJlZXNfTm9kZSAmICgocGFyZW50IGluIHNldCB0cmVlKSBhbmQgU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgcGFyZW50KSkgPT4KICAoZm9yYWxsIHJpZ2h0Y2hpbGQgaW4gc2V0IHRyZWUgJgogICAgcHJlX1NUcmVlc19Jc1JpZ2h0Q2hpbGRPZih0cmVlLCByaWdodGNoaWxkLCBwYXJlbnQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0dldE5vZGUsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIHBvc2l0aW9uOm5hdDEgJiAoZXhpc3RzIFtub2RlIGluIHNldCB0cmVlXSAmICgobm9kZS5wb3NpdGlvbikgPSBwb3NpdGlvbikpID0+CiAgZXhpc3RzMSBub2RlIGluIHNldCB0cmVlICYgKChub2RlLnBvc2l0aW9uKSA9IHBvc2l0aW9uKSkKLHVuaXF1ZSBleGlzdGVuY2UgYmluZGluZyxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0dldERhdGEsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBwb3NpdGlvbjpuYXQxICYKICBpbnZfU1RyZWVzX0luZm8obWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0dldERhdGEsIGRhdGEsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBwb3NpdGlvbjpuYXQxICYgU1RyZWVzX0V4aXN0c05vZGUobWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCksIHBvc2l0aW9uKSA9PgogIHByZV9TVHJlZXNfR2V0Tm9kZSh0cmVlLCBwb3NpdGlvbikpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX1N0b3JlQ3VycmVudERhdGEsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBkYXRhOlNUcmVlc19EYXRhICYgKGN1cnJlbnQgPD4gbmlsKSA9PgogIChsZXQgbWtfU1RyZWVzX05vZGUoLSwgcG9zaXRpb24pOltTVHJlZXNfTm9kZV0gPSBjdXJyZW50IGluCiAgICAobGV0IG5ld2N1cnJlbnQ6U1RyZWVzX05vZGUgPSBta19TVHJlZXNfTm9kZShkYXRhLCBwb3NpdGlvbikgaW4KICAgICAgaW52X1NUcmVlc19UcmVlKCgodHJlZSBcIHtjdXJyZW50fSkgdW5pb24ge25ld2N1cnJlbnR9KSkgYW5kIChpc18oKCh0cmVlIFwge2N1cnJlbnR9KSB1bmlvbiB7bmV3Y3VycmVudH0pLCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX1N0b3JlQ3VycmVudERhdGEsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvLCBkYXRhOlNUcmVlc19EYXRhICYgKGN1cnJlbnQgPD4gbmlsKSA9PgogIChsZXQgbWtfU1RyZWVzX05vZGUoLSwgcG9zaXRpb24pOltTVHJlZXNfTm9kZV0gPSBjdXJyZW50IGluCiAgICAobGV0IG5ld2N1cnJlbnQ6U1RyZWVzX05vZGUgPSBta19TVHJlZXNfTm9kZShkYXRhLCBwb3NpdGlvbikgaW4KICAgICAgaW52X1NUcmVlc19JbmZvKG1rX1NUcmVlc19JbmZvKCgodHJlZSBcIHtjdXJyZW50fSkgdW5pb24ge25ld2N1cnJlbnR9KSwgbmV3Y3VycmVudCkpIGFuZCAoaW52X1NUcmVlc19UcmVlKCgodHJlZSBcIHtjdXJyZW50fSkgdW5pb24ge25ld2N1cnJlbnR9KSkgYW5kIChpc18oKCh0cmVlIFwge2N1cnJlbnR9KSB1bmlvbiB7bmV3Y3VycmVudH0pLCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0dldEN1cnJlbnROb2RlLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbygtLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmCiAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX1NldEN1cnJlbnROb2RlLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCAtKTpTVHJlZXNfSW5mbywgbmV3Y3VycmVudDpTVHJlZXNfTm9kZSAmIChuZXdjdXJyZW50IGluIHNldCB0cmVlKSA9PgogIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbyh0cmVlLCBuZXdjdXJyZW50KSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0hhc0xlZnRDaGlsZCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgcGFyZW50OlNUcmVlc19Ob2RlICYgKHBhcmVudCBpbiBzZXQgdHJlZSkgPT4KICAoZm9yYWxsIGNoaWxkIGluIHNldCB0cmVlICYKICAgIHByZV9TVHJlZXNfSXNMZWZ0Q2hpbGRPZih0cmVlLCBjaGlsZCwgcGFyZW50KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0hhc1JpZ2h0Q2hpbGQsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIHBhcmVudDpTVHJlZXNfTm9kZSAmIChwYXJlbnQgaW4gc2V0IHRyZWUpID0+CiAgKGZvcmFsbCBjaGlsZCBpbiBzZXQgdHJlZSAmCiAgICBwcmVfU1RyZWVzX0lzUmlnaHRDaGlsZE9mKHRyZWUsIGNoaWxkLCBwYXJlbnQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0luT3JkZXJQcmVkZWNlc3NvciwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgbm9kZTpTVHJlZXNfTm9kZSAmCiAgKChub2RlIGluIHNldCB0cmVlKSA9PgogICAgcHJlX1NUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgbm9kZSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0luT3JkZXJQcmVkZWNlc3NvciwgbGVmdGNoaWxkLDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBub2RlOlNUcmVlc19Ob2RlICYgKChub2RlIGluIHNldCB0cmVlKSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBub2RlKSkgPT4KICBwcmVfU1RyZWVzX0xlZnRDaGlsZCh0cmVlLCBub2RlKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0luT3JkZXJQcmVkZWNlc3NvciwgbGVmdCwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgbm9kZTpTVHJlZXNfTm9kZSAmICgobm9kZSBpbiBzZXQgdHJlZSkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgbm9kZSkpID0+CiAgKGxldCBsZWZ0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfTGVmdENoaWxkKHRyZWUsIG5vZGUpIGluCiAgICBwcmVfU1RyZWVzX1N1YnRyZWUodHJlZSwgbGVmdGNoaWxkKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0luT3JkZXJQcmVkZWNlc3NvciwwLChmb3JhbGwgdHJlZTpTVHJlZXNfVHJlZSwgbm9kZTpTVHJlZXNfTm9kZSAmICgobm9kZSBpbiBzZXQgdHJlZSkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgbm9kZSkpID0+CiAgKGxldCBsZWZ0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfTGVmdENoaWxkKHRyZWUsIG5vZGUpIGluCiAgICAobGV0IGxlZnQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBsZWZ0Y2hpbGQpIGluCiAgICAgIChsZXQgcmlnaHRwYXRoOnNldCBvZiAoU1RyZWVzX05vZGUpID0ge24gfCBbbiBpbiBzZXQgbGVmdF0gJiAoZXhpc3RzIFtwIGluIHNldCB7MCwgLi4uICwoY2FyZCBsZWZ0KX1dICYgKChuLnBvc2l0aW9uKSA9ICgoKChsZWZ0Y2hpbGQucG9zaXRpb24pICsgMSkgKiAoMiAqKiBwKSkgLSAxKSkpfSBpbgogICAgICAgIGV4aXN0czEgcHJlZCBpbiBzZXQgcmlnaHRwYXRoICYgKGZvcmFsbCBuIGluIHNldCByaWdodHBhdGggJiAoKG4ucG9zaXRpb24pIDw9IChwcmVkLnBvc2l0aW9uKSkpKSkpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJgogIHByZV9TVHJlZXNfRGVsZXRlKG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpKSA9PiBwb3N0X1NUcmVlc19EZWxldGUobWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCksIGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbiAoaWYgKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKQogIHRoZW4gbGV0IGxlZnRjaGlsZDpTVHJlZXNfTm9kZSA9IFNUcmVlc19MZWZ0Q2hpbGQodHJlZSwgY3VycmVudCksIHJpZ2h0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSwgbGVmdDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKG9sZCwgbGVmdGNoaWxkKSwgbWtfU1RyZWVzX05vZGUoLSwgcG9zaXRpb24pOlNUcmVlc19Ob2RlID0gU1RyZWVzX0luT3JkZXJQcmVkZWNlc3NvcihvbGQsIGN1cnJlbnQpLCBuZXdyaWdodDpTVHJlZXNfVHJlZSA9IFNUcmVlc19Nb3ZlU3VidHJlZShvbGQsIHJpZ2h0Y2hpbGQsICgoMiAqIHBvc2l0aW9uKSArIDEpKSwgbmV3bGVmdDpTVHJlZXNfVHJlZSA9IChsZWZ0IHVuaW9uIG5ld3JpZ2h0KSwgbmV3OlNUcmVlc19UcmVlID0gU1RyZWVzX01vdmVTdWJ0cmVlKG5ld2xlZnQsIFNUcmVlc19Sb290KG5ld2xlZnQpLCAoY3VycmVudC5wb3NpdGlvbikpIGluIG1rX1NUcmVlc19JbmZvKCgodHJlZSBcIG9sZCkgdW5pb24gbmV3KSwgU1RyZWVzX1Jvb3QobmV3KSkKICBlbHNlaWYgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KQogIHRoZW4gbGV0IGxlZnRjaGlsZDpTVHJlZXNfTm9kZSA9IFNUcmVlc19MZWZ0Q2hpbGQodHJlZSwgY3VycmVudCksIG5ldzpTVHJlZXNfVHJlZSA9IFNUcmVlc19Nb3ZlU3VidHJlZShvbGQsIGxlZnRjaGlsZCwgKGN1cnJlbnQucG9zaXRpb24pKSBpbiBta19TVHJlZXNfSW5mbygoKHRyZWUgXCBvbGQpIHVuaW9uIG5ldyksIFNUcmVlc19Sb290KG5ldykpCiAgZWxzZWlmIFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpCiAgdGhlbiBsZXQgcmlnaHRjaGlsZDpTVHJlZXNfTm9kZSA9IFNUcmVlc19SaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpLCBuZXc6U1RyZWVzX1RyZWUgPSBTVHJlZXNfTW92ZVN1YnRyZWUob2xkLCByaWdodGNoaWxkLCAoY3VycmVudC5wb3NpdGlvbikpIGluIG1rX1NUcmVlc19JbmZvKCgodHJlZSBcIG9sZCkgdW5pb24gbmV3KSwgU1RyZWVzX1Jvb3QobmV3KSkKICBlbHNlIG1rX1NUcmVlc19JbmZvKCh0cmVlIFwge2N1cnJlbnR9KSwgU1RyZWVzX1BhcmVudCh0cmVlLCBjdXJyZW50KSkpKSkKLHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgb2xkLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICBwcmVfU1RyZWVzX1N1YnRyZWUodHJlZSwgY3VycmVudCkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgb2xkLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgcHJlX1NUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpID0+CiAgICAgIHByZV9TVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpID0+CiAgICAgIGlzXyhjdXJyZW50LCBTVHJlZXNfTm9kZSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbGVmdGNoaWxkLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAoKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSA9PgogICAgICBwcmVfU1RyZWVzX0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbGVmdGNoaWxkLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAoKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSA9PgogICAgICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgcmlnaHRjaGlsZCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgcHJlX1NUcmVlc19SaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgcmlnaHRjaGlsZCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbGVmdCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgcHJlX1NUcmVlc19TdWJ0cmVlKG9sZCwgbGVmdGNoaWxkKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgcG9zaXRpb24sMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvICYgKGN1cnJlbnQgPD4gbmlsKSA9PgogIChsZXQgb2xkOlNUcmVlc19UcmVlID0gU1RyZWVzX1N1YnRyZWUodHJlZSwgY3VycmVudCkgaW4KICAgICgoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIHByZV9TVHJlZXNfSW5PcmRlclByZWRlY2Vzc29yKG9sZCwgY3VycmVudCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgcG9zaXRpb24sMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvICYgKGN1cnJlbnQgPD4gbmlsKSA9PgogIChsZXQgb2xkOlNUcmVlc19UcmVlID0gU1RyZWVzX1N1YnRyZWUodHJlZSwgY3VycmVudCkgaW4KICAgICgoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIGlzXyhjdXJyZW50LCBTVHJlZXNfTm9kZSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbmV3cmlnaHQsMCwoZm9yYWxsIG1rX1NUcmVlc19JbmZvKHRyZWUsIGN1cnJlbnQpOlNUcmVlc19JbmZvICYgKGN1cnJlbnQgPD4gbmlsKSA9PgogIChsZXQgb2xkOlNUcmVlc19UcmVlID0gU1RyZWVzX1N1YnRyZWUodHJlZSwgY3VycmVudCkgaW4KICAgICgoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIHByZV9TVHJlZXNfTW92ZVN1YnRyZWUob2xkLCByaWdodGNoaWxkLCAoKDIgKiBwb3NpdGlvbikgKyAxKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbmV3LDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAoKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSA9PgogICAgICBwcmVfU1RyZWVzX01vdmVTdWJ0cmVlKG5ld2xlZnQsIFNUcmVlc19Sb290KG5ld2xlZnQpLCAoY3VycmVudC5wb3NpdGlvbikpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbmV3LDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAoKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpIGFuZCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpKSA9PgogICAgICBwcmVfU1RyZWVzX1Jvb3QobmV3bGVmdCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgKGxldCBsZWZ0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpLCByaWdodGNoaWxkOlNUcmVlc19Ob2RlID0gU1RyZWVzX1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCksIGxlZnQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZShvbGQsIGxlZnRjaGlsZCksIG1rX1NUcmVlc19Ob2RlKC0sIHBvc2l0aW9uKTpTVHJlZXNfTm9kZSA9IFNUcmVlc19Jbk9yZGVyUHJlZGVjZXNzb3Iob2xkLCBjdXJyZW50KSwgbmV3cmlnaHQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfTW92ZVN1YnRyZWUob2xkLCByaWdodGNoaWxkLCAoKDIgKiBwb3NpdGlvbikgKyAxKSksIG5ld2xlZnQ6U1RyZWVzX1RyZWUgPSAobGVmdCB1bmlvbiBuZXdyaWdodCksIG5ldzpTVHJlZXNfVHJlZSA9IFNUcmVlc19Nb3ZlU3VidHJlZShuZXdsZWZ0LCBTVHJlZXNfUm9vdChuZXdsZWZ0KSwgKGN1cnJlbnQucG9zaXRpb24pKSBpbgogICAgICAgIHByZV9TVHJlZXNfUm9vdChuZXcpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgKGxldCBsZWZ0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpLCByaWdodGNoaWxkOlNUcmVlc19Ob2RlID0gU1RyZWVzX1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCksIGxlZnQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZShvbGQsIGxlZnRjaGlsZCksIG1rX1NUcmVlc19Ob2RlKC0sIHBvc2l0aW9uKTpTVHJlZXNfTm9kZSA9IFNUcmVlc19Jbk9yZGVyUHJlZGVjZXNzb3Iob2xkLCBjdXJyZW50KSwgbmV3cmlnaHQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfTW92ZVN1YnRyZWUob2xkLCByaWdodGNoaWxkLCAoKDIgKiBwb3NpdGlvbikgKyAxKSksIG5ld2xlZnQ6U1RyZWVzX1RyZWUgPSAobGVmdCB1bmlvbiBuZXdyaWdodCksIG5ldzpTVHJlZXNfVHJlZSA9IFNUcmVlc19Nb3ZlU3VidHJlZShuZXdsZWZ0LCBTVHJlZXNfUm9vdChuZXdsZWZ0KSwgKGN1cnJlbnQucG9zaXRpb24pKSBpbgogICAgICAgIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbygoKHRyZWUgXCBvbGQpIHVuaW9uIG5ldyksIFNUcmVlc19Sb290KG5ldykpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbGVmdGNoaWxkLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAobm90IChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgKFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkgPT4KICAgICAgICBwcmVfU1RyZWVzX0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbGVmdGNoaWxkLDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAobm90IChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgKFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkgPT4KICAgICAgICBpc18oY3VycmVudCwgU1RyZWVzX05vZGUpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbmV3LDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAobm90IChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgKFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkgPT4KICAgICAgICBwcmVfU1RyZWVzX01vdmVTdWJ0cmVlKG9sZCwgbGVmdGNoaWxkLCAoY3VycmVudC5wb3NpdGlvbikpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpID0+CiAgICAgICAgKGxldCBsZWZ0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpLCBuZXc6U1RyZWVzX1RyZWUgPSBTVHJlZXNfTW92ZVN1YnRyZWUob2xkLCBsZWZ0Y2hpbGQsIChjdXJyZW50LnBvc2l0aW9uKSkgaW4KICAgICAgICAgIHByZV9TVHJlZXNfUm9vdChuZXcpKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpID0+CiAgICAgICAgKGxldCBsZWZ0Y2hpbGQ6U1RyZWVzX05vZGUgPSBTVHJlZXNfTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpLCBuZXc6U1RyZWVzX1RyZWUgPSBTVHJlZXNfTW92ZVN1YnRyZWUob2xkLCBsZWZ0Y2hpbGQsIChjdXJyZW50LnBvc2l0aW9uKSkgaW4KICAgICAgICAgIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbygoKHRyZWUgXCBvbGQpIHVuaW9uIG5ldyksIFNUcmVlc19Sb290KG5ldykpKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgcmlnaHRjaGlsZCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgICAgcHJlX1NUcmVlc19SaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgcmlnaHRjaGlsZCwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgICAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwgbmV3LDAsKGZvcmFsbCBta19TVHJlZXNfSW5mbyh0cmVlLCBjdXJyZW50KTpTVHJlZXNfSW5mbyAmIChjdXJyZW50IDw+IG5pbCkgPT4KICAobGV0IG9sZDpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIGN1cnJlbnQpIGluCiAgICAobm90IChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSBhbmQgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSkgPT4KICAgICAgKG5vdCBTVHJlZXNfSGFzTGVmdENoaWxkKHRyZWUsIGN1cnJlbnQpID0+CiAgICAgICAgKFNUcmVlc19IYXNSaWdodENoaWxkKHRyZWUsIGN1cnJlbnQpID0+CiAgICAgICAgICBwcmVfU1RyZWVzX01vdmVTdWJ0cmVlKG9sZCwgcmlnaHRjaGlsZCwgKGN1cnJlbnQucG9zaXRpb24pKSkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgICAgKGxldCByaWdodGNoaWxkOlNUcmVlc19Ob2RlID0gU1RyZWVzX1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCksIG5ldzpTVHJlZXNfVHJlZSA9IFNUcmVlc19Nb3ZlU3VidHJlZShvbGQsIHJpZ2h0Y2hpbGQsIChjdXJyZW50LnBvc2l0aW9uKSkgaW4KICAgICAgICAgICAgcHJlX1NUcmVlc19Sb290KG5ldykpKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChTVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgICAgKGxldCByaWdodGNoaWxkOlNUcmVlc19Ob2RlID0gU1RyZWVzX1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCksIG5ldzpTVHJlZXNfVHJlZSA9IFNUcmVlc19Nb3ZlU3VidHJlZShvbGQsIHJpZ2h0Y2hpbGQsIChjdXJyZW50LnBvc2l0aW9uKSkgaW4KICAgICAgICAgICAgaW52X1NUcmVlc19JbmZvKG1rX1NUcmVlc19JbmZvKCgodHJlZSBcIG9sZCkgdW5pb24gbmV3KSwgU1RyZWVzX1Jvb3QobmV3KSkpKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChub3QgU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgPT4KICAgICAgICAgIHByZV9TVHJlZXNfUGFyZW50KHRyZWUsIGN1cnJlbnQpKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChub3QgU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgPT4KICAgICAgICAgIGlzXyhjdXJyZW50LCBTVHJlZXNfTm9kZSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0RlbGV0ZSwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8gJiAoY3VycmVudCA8PiBuaWwpID0+CiAgKGxldCBvbGQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBjdXJyZW50KSBpbgogICAgKG5vdCAoU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgYW5kIFNUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpID0+CiAgICAgIChub3QgU1RyZWVzX0hhc0xlZnRDaGlsZCh0cmVlLCBjdXJyZW50KSA9PgogICAgICAgIChub3QgU1RyZWVzX0hhc1JpZ2h0Q2hpbGQodHJlZSwgY3VycmVudCkgPT4KICAgICAgICAgIGludl9TVHJlZXNfSW5mbyhta19TVHJlZXNfSW5mbygodHJlZSBcIHtjdXJyZW50fSksIFNUcmVlc19QYXJlbnQodHJlZSwgY3VycmVudCkpKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX1N1YnRyZWUsMCwoZm9yYWxsIHRyZWU6U1RyZWVzX1RyZWUsIG1rX1NUcmVlc19Ob2RlKHJvb3RkYXRhLCByb290cG9zKTpTVHJlZXNfTm9kZSAmIChta19TVHJlZXNfTm9kZShyb290ZGF0YSwgcm9vdHBvcykgaW4gc2V0IHRyZWUpID0+CiAgaW52X1NUcmVlc19UcmVlKHtta19TVHJlZXNfTm9kZShkLCBwKSB8IFtta19TVHJlZXNfTm9kZShkLCBwKSBpbiBzZXQgdHJlZV0gJiAoZXhpc3RzMSBuIGluIHNldCB7MCwgLi4uICwoY2FyZCB0cmVlKX0gJiAoKHAgPj0gKHJvb3Rwb3MgKiAoMiAqKiBuKSkpIGFuZCAocCA8ICgocm9vdHBvcyArIDEpICogKDIgKiogbikpKSkpfSkgYW5kIChpc18oe21rX1NUcmVlc19Ob2RlKGQsIHApIHwgW21rX1NUcmVlc19Ob2RlKGQsIHApIGluIHNldCB0cmVlXSAmIChleGlzdHMxIG4gaW4gc2V0IHswLCAuLi4gLChjYXJkIHRyZWUpfSAmICgocCA+PSAocm9vdHBvcyAqICgyICoqIG4pKSkgYW5kIChwIDwgKChyb290cG9zICsgMSkgKiAoMiAqKiBuKSkpKSl9LCBzZXQgb2YgKFNUcmVlc19Ob2RlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVTdWJ0cmVlLCBzdWJ0cmVlLDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBzdWJ0cmVlUm9vdDpTVHJlZXNfTm9kZSwgbmV3Um9vdFBvczpuYXQxICYgKHN1YnRyZWVSb290IGluIHNldCB0cmVlKSA9PgogIHByZV9TVHJlZXNfU3VidHJlZSh0cmVlLCBzdWJ0cmVlUm9vdCkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX01vdmVTdWJ0cmVlLDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBzdWJ0cmVlUm9vdDpTVHJlZXNfTm9kZSwgbmV3Um9vdFBvczpuYXQxICYgKHN1YnRyZWVSb290IGluIHNldCB0cmVlKSA9PgogIGludl9TVHJlZXNfVHJlZShsZXQgc3VidHJlZTpTVHJlZXNfVHJlZSA9IFNUcmVlc19TdWJ0cmVlKHRyZWUsIHN1YnRyZWVSb290KSwgbWtfU1RyZWVzX05vZGUoLSwgb2xkUm9vdFBvcyk6U1RyZWVzX05vZGUgPSBzdWJ0cmVlUm9vdCBpbiB7U1RyZWVzX01vdmVOb2RlKHRyZWUsIG5vZGUsIG9sZFJvb3RQb3MsIG5ld1Jvb3RQb3MpIHwgW25vZGUgaW4gc2V0IHN1YnRyZWVdfSkgYW5kIChpc18obGV0IHN1YnRyZWU6U1RyZWVzX1RyZWUgPSBTVHJlZXNfU3VidHJlZSh0cmVlLCBzdWJ0cmVlUm9vdCksIG1rX1NUcmVlc19Ob2RlKC0sIG9sZFJvb3RQb3MpOlNUcmVlc19Ob2RlID0gc3VidHJlZVJvb3QgaW4ge1NUcmVlc19Nb3ZlTm9kZSh0cmVlLCBub2RlLCBvbGRSb290UG9zLCBuZXdSb290UG9zKSB8IFtub2RlIGluIHNldCBzdWJ0cmVlXX0sIHNldCBvZiAoU1RyZWVzX05vZGUpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX01vdmVOb2RlLCBuLDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBta19TVHJlZXNfTm9kZShkLCBwKTpTVHJlZXNfTm9kZSwgb2xkUm9vdFBvczpuYXQxLCBuZXdSb290UG9zOm5hdDEgJgogIGV4aXN0czEgbiBpbiBzZXQgezAsIC4uLiAsKGNhcmQgdHJlZSl9ICYgKChwID49IChvbGRSb290UG9zICogKDIgKiogbikpKSBhbmQgKHAgPCAoKG9sZFJvb3RQb3MgKyAxKSAqICgyICoqIG4pKSkpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: U1RyZWVzX01vdmVOb2RlLDAsKGZvcmFsbCB0cmVlOlNUcmVlc19UcmVlLCBta19TVHJlZXNfTm9kZShkLCBwKTpTVHJlZXNfTm9kZSwgb2xkUm9vdFBvczpuYXQxLCBuZXdSb290UG9zOm5hdDEgJgogIChsZXQgbjppbnQgPSAoaW90YSBuIGluIHNldCB7MCwgLi4uICwoY2FyZCB0cmVlKX0gJiAoKHAgPj0gKG9sZFJvb3RQb3MgKiAoMiAqKiBuKSkpIGFuZCAocCA8ICgob2xkUm9vdFBvcyArIDEpICogKDIgKiogbikpKSkpIGluCiAgICAoKChuZXdSb290UG9zICogKDIgKiogbikpICsgcCkgLSAob2xkUm9vdFBvcyAqICgyICoqIG4pKSkgPiAwKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0V4aXN0c0RpcmVjdGlvbiwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAobm90IDxUb1Jvb3Q+ID0gZGlyZWN0aW9uID0+CiAgICAoPFRvTGVmdD4gPSBkaXJlY3Rpb24gPT4gCiAgICAgICgoY3VycmVudCA8PiBuaWwpID0+CiAgICAgICAgcHJlX1NUcmVlc19IYXNMZWZ0Q2hpbGQodHJlZSwgY3VycmVudCkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0V4aXN0c0RpcmVjdGlvbiwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAobm90IDxUb1Jvb3Q+ID0gZGlyZWN0aW9uID0+CiAgICAoPFRvTGVmdD4gPSBkaXJlY3Rpb24gPT4gCiAgICAgICgoY3VycmVudCA8PiBuaWwpID0+CiAgICAgICAgaXNfKGN1cnJlbnQsIFNUcmVlc19Ob2RlKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: U1RyZWVzX0V4aXN0c0RpcmVjdGlvbiwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAobm90IDxUb1Jvb3Q+ID0gZGlyZWN0aW9uID0+CiAgICAobm90IDxUb0xlZnQ+ID0gZGlyZWN0aW9uID0+CiAgICAgICg8VG9SaWdodD4gPSBkaXJlY3Rpb24gPT4gCiAgICAgICAgKChjdXJyZW50IDw+IG5pbCkgPT4KICAgICAgICAgIHByZV9TVHJlZXNfSGFzUmlnaHRDaGlsZCh0cmVlLCBjdXJyZW50KSkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0V4aXN0c0RpcmVjdGlvbiwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICAobm90IDxUb1Jvb3Q+ID0gZGlyZWN0aW9uID0+CiAgICAobm90IDxUb0xlZnQ+ID0gZGlyZWN0aW9uID0+CiAgICAgICg8VG9SaWdodD4gPSBkaXJlY3Rpb24gPT4gCiAgICAgICAgKChjdXJyZW50IDw+IG5pbCkgPT4KICAgICAgICAgIGlzXyhjdXJyZW50LCBTVHJlZXNfTm9kZSkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: U1RyZWVzX0V4aXN0c0RpcmVjdGlvbiwwLChmb3JhbGwgbWtfU1RyZWVzX0luZm8odHJlZSwgY3VycmVudCk6U1RyZWVzX0luZm8sIGRpcmVjdGlvbjpTVHJlZXNfRGlyZWN0aW9uICYKICBkaXJlY3Rpb24gPSA8VG9Sb290PiBvciBkaXJlY3Rpb24gPSA8VG9MZWZ0PiBvciBkaXJlY3Rpb24gPSA8VG9SaWdodD4pCixjYXNlcyBleGhhdXN0aXZlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfUG9zaXRpb24sIHBhcmVudCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyICYgKGNoaWxkIDw+IE5JTCkgPT4KICBwcmVfTm9kZXNfR2V0UGFyZW50KEhlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfUG9zaXRpb24sIHBhcmVudCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyICYgKGNoaWxkIDw+IE5JTCkgPT4KICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCksIE5vZGVzX0JpbmFyeVRyZWUpKSBvcgogIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgY2hpbGQpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSwgTm9kZXNfU2luZ2xlTGluaykpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfUG9zaXRpb24sIHBhcmVudCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyICYgKGNoaWxkIDw+IE5JTCkgPT4KICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgY2hpbGQpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfUG9zaXRpb24sMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciAmIChjaGlsZCA8PiBOSUwpID0+CiAgKGxldCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciA9IE5vZGVzX0dldFBhcmVudChIZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpIGluCiAgICAobm90IChwYXJlbnQgPSBOSUwpID0+CiAgICAgIChUcmVlc19Jc1JpZ2h0Q2hpbGRPZihoZWFwLCBjaGlsZCwgcGFyZW50KSA9PgogICAgICAgIHByZV9UcmVlc19Qb3NpdGlvbihoZWFwLCBwYXJlbnQpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfUG9zaXRpb24sMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciAmIChjaGlsZCA8PiBOSUwpID0+CiAgKGxldCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciA9IE5vZGVzX0dldFBhcmVudChIZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpIGluCiAgICAobm90IChwYXJlbnQgPSBOSUwpID0+CiAgICAgIChub3QgVHJlZXNfSXNSaWdodENoaWxkT2YoaGVhcCwgY2hpbGQsIHBhcmVudCkgPT4KICAgICAgICBwcmVfVHJlZXNfUG9zaXRpb24oaGVhcCwgcGFyZW50KSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU2V0LCB0cmVlc2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIG1rX1RyZWVzX1RyZWUodHJlZVB0ciwgY3VycmVudCk6VHJlZXNfVHJlZSAmCiAgKCh0cmVlUHRyIDw+IE5JTCkgPT4KICAgIHByZV9TVHJlZXNfTWtUcmVlKFRyZWVzX1N1YnRyZWVUb1NldChoZWFwLCB0cmVlUHRyLCAxKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfU2V0LCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIG1rX1RyZWVzX1RyZWUodHJlZVB0ciwgY3VycmVudCk6VHJlZXNfVHJlZSAmCiAgKCh0cmVlUHRyIDw+IE5JTCkgPT4KICAgIChsZXQgdHJlZXNldDpTVHJlZXNfVHJlZSA9IFNUcmVlc19Na1RyZWUoVHJlZXNfU3VidHJlZVRvU2V0KGhlYXAsIHRyZWVQdHIsIDEpKSBpbgogICAgICBwcmVfTm9kZXNfR2V0RGF0YShIZWFwc19SZXRyaWV2ZShoZWFwLCBjdXJyZW50KSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU2V0LCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIG1rX1RyZWVzX1RyZWUodHJlZVB0ciwgY3VycmVudCk6VHJlZXNfVHJlZSAmCiAgKCh0cmVlUHRyIDw+IE5JTCkgPT4KICAgIChsZXQgdHJlZXNldDpTVHJlZXNfVHJlZSA9IFNUcmVlc19Na1RyZWUoVHJlZXNfU3VidHJlZVRvU2V0KGhlYXAsIHRyZWVQdHIsIDEpKSBpbgogICAgICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBjdXJyZW50KSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgY3VycmVudCksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGN1cnJlbnQpLCBOb2Rlc19TaW5nbGVMaW5rKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU2V0LCBkYXRhLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIG1rX1RyZWVzX1RyZWUodHJlZVB0ciwgY3VycmVudCk6VHJlZXNfVHJlZSAmCiAgKCh0cmVlUHRyIDw+IE5JTCkgPT4KICAgIChsZXQgdHJlZXNldDpTVHJlZXNfVHJlZSA9IFNUcmVlc19Na1RyZWUoVHJlZXNfU3VidHJlZVRvU2V0KGhlYXAsIHRyZWVQdHIsIDEpKSBpbgogICAgICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgY3VycmVudCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU2V0LCBwb3NpdGlvbiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBta19UcmVlc19UcmVlKHRyZWVQdHIsIGN1cnJlbnQpOlRyZWVzX1RyZWUgJgogICgodHJlZVB0ciA8PiBOSUwpID0+CiAgICAobGV0IHRyZWVzZXQ6U1RyZWVzX1RyZWUgPSBTVHJlZXNfTWtUcmVlKFRyZWVzX1N1YnRyZWVUb1NldChoZWFwLCB0cmVlUHRyLCAxKSkgaW4KICAgICAgKGxldCBkYXRhOk5vZGVzX0RhdGEgPSBOb2Rlc19HZXREYXRhKEhlYXBzX1JldHJpZXZlKGhlYXAsIGN1cnJlbnQpKSBpbgogICAgICAgIHByZV9UcmVlc19Qb3NpdGlvbihoZWFwLCBjdXJyZW50KSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIG1rX1RyZWVzX1RyZWUodHJlZVB0ciwgY3VycmVudCk6VHJlZXNfVHJlZSAmCiAgKCh0cmVlUHRyIDw+IE5JTCkgPT4KICAgIChsZXQgdHJlZXNldDpTVHJlZXNfVHJlZSA9IFNUcmVlc19Na1RyZWUoVHJlZXNfU3VidHJlZVRvU2V0KGhlYXAsIHRyZWVQdHIsIDEpKSBpbgogICAgICAobGV0IGRhdGE6Tm9kZXNfRGF0YSA9IE5vZGVzX0dldERhdGEoSGVhcHNfUmV0cmlldmUoaGVhcCwgY3VycmVudCkpIGluCiAgICAgICAgKGxldCBwb3NpdGlvbjpuYXQxID0gVHJlZXNfUG9zaXRpb24oaGVhcCwgY3VycmVudCkgaW4KICAgICAgICAgIChsZXQgY3VycmVudG5vZGU6U1RyZWVzX05vZGUgPSBTVHJlZXNfTWtOb2RlKGRhdGEsIHBvc2l0aW9uKSBpbgogICAgICAgICAgICBwcmVfU1RyZWVzX01rSW5mbyh0cmVlc2V0LCBjdXJyZW50bm9kZSkpKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgIHByZV9Ob2Rlc19HZXREYXRhKEhlYXBzX1JldHJpZXZlKGhlYXAsIHN1YnRyZWUpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgICgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHN1YnRyZWUpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgc3VidHJlZSksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSwgTm9kZXNfU2luZ2xlTGluaykpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgIHByZV9Ob2Rlc19HZXRMZWZ0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHN1YnRyZWUpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgICgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHN1YnRyZWUpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgc3VidHJlZSksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSwgTm9kZXNfU2luZ2xlTGluaykpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgIHByZV9Ob2Rlc19HZXRSaWdodChIZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgICgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHN1YnRyZWUpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgc3VidHJlZSksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSwgTm9kZXNfU2luZ2xlTGluaykpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfU3VidHJlZVRvU2V0LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHN1YnRyZWU6Tm9kZXNfTm9kZVB0ciwgcG9zaXRpb246bmF0MSAmCiAgKChzdWJ0cmVlIDw+IE5JTCkgPT4KICAgIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBzdWJ0cmVlKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSGFzTGVmdENoaWxkLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHB0cjpOb2Rlc19Ob2RlUHRyICYgKChwdHIgPD4gTklMKSA9PiBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSkgPT4KICAoKHB0ciA8PiBOSUwpID0+CiAgICBwcmVfTm9kZXNfR2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSGFzTGVmdENoaWxkLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHB0cjpOb2Rlc19Ob2RlUHRyICYgKChwdHIgPD4gTklMKSA9PiBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSkgPT4KICAoKHB0ciA8PiBOSUwpID0+CiAgICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfRG91YmxlTGluaykpIG9yCiAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX1NpbmdsZUxpbmspKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSGFzTGVmdENoaWxkLDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHB0cjpOb2Rlc19Ob2RlUHRyICYgKChwdHIgPD4gTklMKSA9PiBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSkgPT4KICAoKHB0ciA8PiBOSUwpID0+CiAgICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSGFzUmlnaHRDaGlsZCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBwdHI6Tm9kZXNfTm9kZVB0ciAmICgocHRyIDw+IE5JTCkgPT4gcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpID0+CiAgKChwdHIgPD4gTklMKSA9PgogICAgcHJlX05vZGVzX0dldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSGFzUmlnaHRDaGlsZCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBwdHI6Tm9kZXNfTm9kZVB0ciAmICgocHRyIDw+IE5JTCkgPT4gcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpID0+CiAgKChwdHIgPD4gTklMKSA9PgogICAgKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogICAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19TaW5nbGVMaW5rKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSGFzUmlnaHRDaGlsZCwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBwdHI6Tm9kZXNfTm9kZVB0ciAmICgocHRyIDw+IE5JTCkgPT4gcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpID0+CiAgKChwdHIgPD4gTklMKSA9PgogICAgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSXNSaWdodENoaWxkT2YsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciwgcGFyZW50Ok5vZGVzX05vZGVQdHIgJiAocHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkgYW5kIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpID0+CiAgcHJlX05vZGVzX0dldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSXNSaWdodENoaWxkT2YsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciwgcGFyZW50Ok5vZGVzX05vZGVQdHIgJiAocHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkgYW5kIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpID0+CiAgKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwYXJlbnQpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCksIE5vZGVzX1NpbmdsZUxpbmspKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNSaWdodENoaWxkT2YsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciwgcGFyZW50Ok5vZGVzX05vZGVQdHIgJiAocHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkgYW5kIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpID0+CiAgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSXNSaWdodENoaWxkT2YsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciwgcGFyZW50Ok5vZGVzX05vZGVQdHIgJiAocHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkgYW5kIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpID0+CiAgKChjaGlsZCA9IE5vZGVzX0dldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkpKSA9PgogICAgcHJlX05vZGVzX0dldFBhcmVudChIZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNSaWdodENoaWxkT2YsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciwgcGFyZW50Ok5vZGVzX05vZGVQdHIgJiAocHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkgYW5kIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpID0+CiAgKChjaGlsZCA9IE5vZGVzX0dldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkpKSA9PgogICAgKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgY2hpbGQpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgY2hpbGQpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAgIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgY2hpbGQpLCBOb2Rlc19TaW5nbGVMaW5rKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSXNSaWdodENoaWxkT2YsMCwoZm9yYWxsIGhlYXA6SGVhcHNfSGVhcCwgY2hpbGQ6Tm9kZXNfTm9kZVB0ciwgcGFyZW50Ok5vZGVzX05vZGVQdHIgJiAocHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkgYW5kIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpID0+CiAgKChjaGlsZCA9IE5vZGVzX0dldFJpZ2h0KEhlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCkpKSA9PgogICAgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSXNMZWZ0Q2hpbGRPZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIChwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSBhbmQgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkgPT4KICBwcmVfTm9kZXNfR2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwYXJlbnQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNMZWZ0Q2hpbGRPZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIChwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSBhbmQgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkgPT4KICAoKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwYXJlbnQpLCBOb2Rlc19CaW5hcnlUcmVlKSkgb3IKICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHBhcmVudCksIE5vZGVzX0RvdWJsZUxpbmspKSBvcgogIChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSwgTm9kZXNfU2luZ2xlTGluaykpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSXNMZWZ0Q2hpbGRPZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIChwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSBhbmQgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkgPT4KICBwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNMZWZ0Q2hpbGRPZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIChwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSBhbmQgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkgPT4KICAoKGNoaWxkID0gTm9kZXNfR2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwYXJlbnQpKSkgPT4KICAgIHByZV9Ob2Rlc19HZXRQYXJlbnQoSGVhcHNfUmV0cmlldmUoaGVhcCwgY2hpbGQpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSXNMZWZ0Q2hpbGRPZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIChwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSBhbmQgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkgPT4KICAoKGNoaWxkID0gTm9kZXNfR2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwYXJlbnQpKSkgPT4KICAgICgoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSwgTm9kZXNfRG91YmxlTGluaykpIG9yCiAgICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSwgTm9kZXNfU2luZ2xlTGluaykpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNMZWZ0Q2hpbGRPZiwwLChmb3JhbGwgaGVhcDpIZWFwc19IZWFwLCBjaGlsZDpOb2Rlc19Ob2RlUHRyLCBwYXJlbnQ6Tm9kZXNfTm9kZVB0ciAmIChwcmVfSGVhcHNfUmV0cmlldmUoaGVhcCwgcGFyZW50KSBhbmQgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIGNoaWxkKSkgPT4KICAoKGNoaWxkID0gTm9kZXNfR2V0TGVmdChIZWFwc19SZXRyaWV2ZShoZWFwLCBwYXJlbnQpKSkgPT4KICAgIHByZV9IZWFwc19SZXRyaWV2ZShoZWFwLCBjaGlsZCkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSXNSb290LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHB0cjpOb2Rlc19Ob2RlUHRyICYgKHB0ciA8PiBOSUwpID0+CiAgcHJlX05vZGVzX0dldFBhcmVudChIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNSb290LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHB0cjpOb2Rlc19Ob2RlUHRyICYgKHB0ciA8PiBOSUwpID0+CiAgKChpc18oSGVhcHNfUmV0cmlldmUoaGVhcCwgcHRyKSwgTm9kZXNfQmluYXJ5VHJlZSkpIG9yCiAgKGlzXyhIZWFwc19SZXRyaWV2ZShoZWFwLCBwdHIpLCBOb2Rlc19Eb3VibGVMaW5rKSkgb3IKICAoaXNfKEhlYXBzX1JldHJpZXZlKGhlYXAsIHB0ciksIE5vZGVzX1NpbmdsZUxpbmspKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSXNSb290LDAsKGZvcmFsbCBoZWFwOkhlYXBzX0hlYXAsIHB0cjpOb2Rlc19Ob2RlUHRyICYgKHB0ciA8PiBOSUwpID0+CiAgcHJlX0hlYXBzX1JldHJpZXZlKGhlYXAsIHB0cikpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSW5zZXJ0LDAsKEhlYXBzX0F2YWlsYWJsZShoZWFwKSA9PgogIChsZXQgbWtfVHJlZXNfVHJlZSh0cmVlUHRyLCBjdXJyZW50KTpUcmVlc19UcmVlID0gdHJlZSBpbgogICAgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlUHRyID0gTklMKSkgPT4KICAgICAgcHJlX1RyZWVzX0hhc1JpZ2h0Q2hpbGQoaGVhcCwgY3VycmVudCkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfSW5zZXJ0LDAsKEhlYXBzX0F2YWlsYWJsZShoZWFwKSA9PgogIChsZXQgbWtfVHJlZXNfVHJlZSh0cmVlUHRyLCBjdXJyZW50KTpUcmVlc19UcmVlID0gdHJlZSBpbgogICAgKCgoZGlyZWN0aW9uID0gPFRvUm9vdD4pID0+ICh0cmVlUHRyID0gTklMKSkgPT4KICAgICAgKCgoZGlyZWN0aW9uID0gPFRvUmlnaHQ+KSA9PiAobm90IFRyZWVzX0hhc1JpZ2h0Q2hpbGQoaGVhcCwgY3VycmVudCkpKSA9PgogICAgICAgIHByZV9UcmVlc19IYXNMZWZ0Q2hpbGQoaGVhcCwgY3VycmVudCkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSW5zZXJ0LDAsKCgoSGVhcHNfQW1vdW50VXNlZChoZWFwfikgKyAxKSA9IEhlYXBzX0Ftb3VudFVzZWQoaGVhcCkpID0+CiAgKGxldCBvbGQ6U1RyZWVzX0luZm8gPSBUcmVlc19TZXQoaGVhcH4sIHRyZWUpIGluCiAgICBwcmVfU1RyZWVzX0luc2VydChvbGQsIGRhdGEsIGRpcmVjdGlvbikpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSW5zZXJ0LDAsKCgoSGVhcHNfQW1vdW50VXNlZChoZWFwfikgKyAxKSA9IEhlYXBzX0Ftb3VudFVzZWQoaGVhcCkpIGFuZCBsZXQgb2xkOlNUcmVlc19JbmZvID0gVHJlZXNfU2V0KGhlYXB+LCB0cmVlKSBpbiAoU1RyZWVzX0luc2VydChvbGQsIGRhdGEsIGRpcmVjdGlvbikgPSBUcmVlc19TZXQoaGVhcCwgUkVTVUxUKSkpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSW5PcmRlclByZWRlY2Vzc29yLDAscHJlX1RyZWVzX0hhc0xlZnRDaGlsZChoZWFwLCBwdHIpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfSW5PcmRlclByZWRlY2Vzc29yLDAsd2hpbGUgVHJlZXNfSGFzUmlnaHRDaGlsZChoZWFwLCBwcmVkKSBkbyAuLi4KLHdoaWxlIGxvb3AgdGVybWluYXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfSW5PcmRlclByZWRlY2Vzc29yLDAscHJlX1RyZWVzX0hhc1JpZ2h0Q2hpbGQoaGVhcCwgcHJlZCkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRGVsZXRlLDAsKChIZWFwc19BbW91bnRVc2VkKGhlYXB+KSA9IChIZWFwc19BbW91bnRVc2VkKGhlYXApICsgMSkpID0+CiAgKGxldCBvbGQ6U1RyZWVzX0luZm8gPSBUcmVlc19TZXQoaGVhcH4sIG1rX1RyZWVzX1RyZWUodHJlZVB0ciwgY3VycmVudCkpIGluCiAgICBwcmVfU1RyZWVzX0RlbGV0ZShvbGQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRGVsZXRlLDAsKChIZWFwc19BbW91bnRVc2VkKGhlYXB+KSA9IChIZWFwc19BbW91bnRVc2VkKGhlYXApICsgMSkpIGFuZCBsZXQgb2xkOlNUcmVlc19JbmZvID0gVHJlZXNfU2V0KGhlYXB+LCBta19UcmVlc19UcmVlKHRyZWVQdHIsIGN1cnJlbnQpKSBpbiAoU1RyZWVzX0RlbGV0ZShvbGQpID0gVHJlZXNfU2V0KGhlYXAsIFJFU1VMVCkpKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRGVsZXRlLCBoYXNMZWZ0Q2hpbGQsMCxwcmVfVHJlZXNfSGFzTGVmdENoaWxkKGhlYXAsIGN1cnJlbnQpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfRGVsZXRlLCBoYXNSaWdodENoaWxkLDAscHJlX1RyZWVzX0hhc1JpZ2h0Q2hpbGQoaGVhcCwgY3VycmVudCkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRGVsZXRlLDAscHJlX1RyZWVzX0lzUm9vdChoZWFwLCBjdXJyZW50KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfRGVsZXRlLDAscHJlX1RyZWVzX0lzUmlnaHRDaGlsZE9mKGhlYXAsIGN1cnJlbnQsIHBhcmVudCkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRXhpc3RzRGF0YSwwLChTVHJlZXNfRXhpc3RzRGF0YShUcmVlc19TZXQoaGVhcCwgdHJlZSksIGRhdGEpID0gUkVTVUxUKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRXhpc3RzRGlyZWN0aW9uLDAsKFNUcmVlc19FeGlzdHNEaXJlY3Rpb24oVHJlZXNfU2V0KGhlYXAsIHRyZWUpLCBkaXJlY3Rpb24pID0gUkVTVUxUKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfRXhpc3RzRGlyZWN0aW9uLDAsKCgodHJlZS5jdXJyZW50KSA8PiBOSUwpID0+CiAgcHJlX1RyZWVzX0hhc0xlZnRDaGlsZChoZWFwLCAodHJlZS5jdXJyZW50KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfRXhpc3RzRGlyZWN0aW9uLDAsKCgodHJlZS5jdXJyZW50KSA8PiBOSUwpID0+CiAgcHJlX1RyZWVzX0hhc1JpZ2h0Q2hpbGQoaGVhcCwgKHRyZWUuY3VycmVudCkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfR2V0Q3VycmVudERhdGEsMCxwcmVfU1RyZWVzX0dldEN1cnJlbnREYXRhKFRyZWVzX1NldChoZWFwLCB0cmVlKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfR2V0Q3VycmVudERhdGEsMCwoU1RyZWVzX0dldEN1cnJlbnREYXRhKFRyZWVzX1NldChoZWFwLCB0cmVlKSkgPSBSRVNVTFQpCixvcGVyYXRpb24gcG9zdCBjb25kaXRpb24sbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfU3RvcmVDdXJyZW50RGF0YSwwLHByZV9TVHJlZXNfU3RvcmVDdXJyZW50RGF0YShUcmVlc19TZXQoaGVhcH4sIHRyZWUpLCBkYXRhKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfU3RvcmVDdXJyZW50RGF0YSwwLChTVHJlZXNfU3RvcmVDdXJyZW50RGF0YShUcmVlc19TZXQoaGVhcH4sIHRyZWUpLCBkYXRhKSA9IFRyZWVzX1NldChoZWFwLCBSRVNVTFQpKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfTW92ZUluRGlyLDAsKCgodHJlZS50cmVlUHRyKSA8PiBOSUwpID0+CiAgcHJlX1RyZWVzX0hhc0xlZnRDaGlsZChoZWFwLCAodHJlZS5jdXJyZW50KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfTW92ZUluRGlyLDAsKCgodHJlZS50cmVlUHRyKSA8PiBOSUwpID0+CiAgKCgoZGlyZWN0aW9uID0gPFRvTGVmdD4pID0+IFRyZWVzX0hhc0xlZnRDaGlsZChoZWFwLCAodHJlZS5jdXJyZW50KSkpID0+CiAgICBwcmVfVHJlZXNfSGFzUmlnaHRDaGlsZChoZWFwLCAodHJlZS5jdXJyZW50KSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfTW92ZUluRGlyLDAscHJlX1NUcmVlc19Nb3ZlSW5EaXIoVHJlZXNfU2V0KGhlYXB+LCB0cmVlKSwgZGlyZWN0aW9uKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJlZXNfTW92ZUluRGlyLDAsKFNUcmVlc19Nb3ZlSW5EaXIoVHJlZXNfU2V0KGhlYXB+LCB0cmVlKSwgZGlyZWN0aW9uKSA9IFRyZWVzX1NldChoZWFwLCBSRVNVTFQpKQosb3BlcmF0aW9uIHBvc3QgY29uZGl0aW9uLG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfTW92ZVRvUGFyZW50LDAscHJlX1RyZWVzX0lzUm9vdChoZWFwLCAodHJlZS5jdXJyZW50KSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfTW92ZVRvUGFyZW50LDAscHJlX1NUcmVlc19Nb3ZlVG9QYXJlbnQoVHJlZXNfU2V0KGhlYXB+LCB0cmVlKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VHJlZXNfTW92ZVRvUGFyZW50LDAsKFNUcmVlc19Nb3ZlVG9QYXJlbnQoVHJlZXNfU2V0KGhlYXB+LCB0cmVlKSkgPSBUcmVlc19TZXQoaGVhcCwgUkVTVUxUKSkKLG9wZXJhdGlvbiBwb3N0IGNvbmRpdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfU2l6ZSwwLChTVHJlZXNfU2l6ZShUcmVlc19TZXQoaGVhcH4sIHRyZWUpKSA9IFJFU1VMVCkKLG9wZXJhdGlvbiBwb3N0IGNvbmRpdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfVHJhdmVyc2UsMCwoU1RyZWVzX1RyYXZlcnNlKFRyZWVzX1NldChoZWFwfiwgdHJlZSksIHRyYXZlcnNhbCkgPSBUcmVlc19TZXQoaGVhcCwgUkVTVUxUKSkKLG9wZXJhdGlvbiBwb3N0IGNvbmRpdGlvbixudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VHJlZXNfVHJhdmVyc2VTdWJ0cmVlLDAscHJlXyh0cmF2ZXJzYWwsIERBVEEoc3VidHJlZSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: SW5zZXJ0UmVzdWx0LDAscHJlX1NUcmVlc19Na1RyZWUoe1NUcmVlc19Na05vZGUoJ2EnLCAxKSwgU1RyZWVzX01rTm9kZSgnYicsIDIpLCBTVHJlZXNfTWtOb2RlKCdjJywgMyksIFNUcmVlc19Na05vZGUoJ2QnLCA0KSwgU1RyZWVzX01rTm9kZSgnZScsIDUpLCBTVHJlZXNfTWtOb2RlKCdmJywgNiksIFNUcmVlc19Na05vZGUoJ2cnLCA3KSwgU1RyZWVzX01rTm9kZSgnaCcsIDgpLCBTVHJlZXNfTWtOb2RlKCdpJywgOSksIFNUcmVlc19Na05vZGUoJ2onLCAxMCksIFNUcmVlc19Na05vZGUoJ2snLCAxMSksIFNUcmVlc19Na05vZGUoJ2wnLCAxMiksIFNUcmVlc19Na05vZGUoJ20nLCAxMyksIFNUcmVlc19Na05vZGUoJ24nLCAxNCksIFNUcmVlc19Na05vZGUoJ28nLCAxNSksIFNUcmVlc19Na05vZGUoJ3AnLCAxNiksIFNUcmVlc19Na05vZGUoJ3EnLCAxNyksIFNUcmVlc19Na05vZGUoJ3InLCAxOCksIFNUcmVlc19Na05vZGUoJ3MnLCAxOSksIFNUcmVlc19Na05vZGUoJ3QnLCAyMCksIFNUcmVlc19Na05vZGUoJ3UnLCAyMSksIFNUcmVlc19Na05vZGUoJ3YnLCAyMiksIFNUcmVlc19Na05vZGUoJ3cnLCAyMyksIFNUcmVlc19Na05vZGUoJ3gnLCAyNCksIFNUcmVlc19Na05vZGUoJ3knLCAyNSksIFNUcmVlc19Na05vZGUoJ3onLCAyNil9KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: RGVsZXRlUmVzdWx0LDAscHJlX1NUcmVlc19Na1RyZWUoe1NUcmVlc19Na05vZGUoJ2EnLCAxKSwgU1RyZWVzX01rTm9kZSgnZCcsIDIpLCBTVHJlZXNfTWtOb2RlKCdjJywgMyksIFNUcmVlc19Na05vZGUoJ2gnLCA0KSwgU1RyZWVzX01rTm9kZSgnaScsIDUpLCBTVHJlZXNfTWtOb2RlKCdmJywgNiksIFNUcmVlc19Na05vZGUoJ28nLCA3KSwgU1RyZWVzX01rTm9kZSgncCcsIDgpLCBTVHJlZXNfTWtOb2RlKCdyJywgMTApLCBTVHJlZXNfTWtOb2RlKCdzJywgMTEpLCBTVHJlZXNfTWtOb2RlKCdsJywgMTIpLCBTVHJlZXNfTWtOb2RlKCd6JywgMTMpLCBTVHJlZXNfTWtOb2RlKCdqJywgMjMpLCBTVHJlZXNfTWtOb2RlKCd4JywgMjQpLCBTVHJlZXNfTWtOb2RlKCd5JywgMjUpLCBTVHJlZXNfTWtOb2RlKCd0JywgNDYpLCBTVHJlZXNfTWtOb2RlKCd1JywgNDcpLCBTVHJlZXNfTWtOb2RlKCdrJywgOTUpLCBTVHJlZXNfTWtOb2RlKCd2JywgMTkwKSwgU1RyZWVzX01rTm9kZSgndycsIDE5MSl9KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VHJhdmVyc2VSZXN1bHQsMCxwcmVfU1RyZWVzX01rVHJlZSh7U1RyZWVzX01rTm9kZSgnYScsIDEpLCBTVHJlZXNfTWtOb2RlKCdhJywgMiksIFNUcmVlc19Na05vZGUoJ2EnLCAzKSwgU1RyZWVzX01rTm9kZSgnYScsIDQpLCBTVHJlZXNfTWtOb2RlKCdhJywgNSksIFNUcmVlc19Na05vZGUoJ2EnLCA2KSwgU1RyZWVzX01rTm9kZSgnYicsIDcpLCBTVHJlZXNfTWtOb2RlKCdiJywgOCksIFNUcmVlc19Na05vZGUoJ2InLCAxMCksIFNUcmVlc19Na05vZGUoJ2InLCAxMSksIFNUcmVlc19Na05vZGUoJ2InLCAxMiksIFNUcmVlc19Na05vZGUoJ2InLCAxMyksIFNUcmVlc19Na05vZGUoJ2EnLCAyMyksIFNUcmVlc19Na05vZGUoJ2InLCAyNCksIFNUcmVlc19Na05vZGUoJ2InLCAyNSksIFNUcmVlc19Na05vZGUoJ2InLCA0NiksIFNUcmVlc19Na05vZGUoJ2InLCA0NyksIFNUcmVlc19Na05vZGUoJ2InLCA5NSksIFNUcmVlc19Na05vZGUoJ2InLCAxOTApLCBTVHJlZXNfTWtOb2RlKCdiJywgMTkxKX0pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnYScsIDxUb1Jvb3Q+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnYicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnYycsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnZCcsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnZScsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9Sb290PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnZicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnZycsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9Sb290PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnaCcsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnaScsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvQW5zY2VzdG9yKHN0cmVlLCAyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnaicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnaycsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9Sb290PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnbCcsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnbScsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvQW5zY2VzdG9yKHN0cmVlLCAyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnbicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAnbycsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9Sb290PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAncCcsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAncScsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvQW5zY2VzdG9yKHN0cmVlLCAyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAncicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAncycsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvQW5zY2VzdG9yKHN0cmVlLCAzKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAndCcsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAndScsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvQW5zY2VzdG9yKHN0cmVlLCAyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAndicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAndycsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9Sb290PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9MZWZ0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAneCcsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvUGFyZW50KHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAneScsIDxUb1JpZ2h0PikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZVRvQW5zY2VzdG9yKHN0cmVlLCAyKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfTW92ZUluRGlyKHN0cmVlLCA8VG9SaWdodD4pCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0luc2VydCwwLHByZV9TVHJlZXNfSW5zZXJ0KHN0cmVlLCAneicsIDxUb0xlZnQ+KQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgMTQpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfRGVsZXRlKHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgMTcpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfRGVsZXRlKHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgMTMpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfRGVsZXRlKHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgNykKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfRGVsZXRlKHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgNSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfRGVsZXRlKHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgMikKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlc0RlbGV0ZSwwLHByZV9TVHJlZXNfRGVsZXRlKHN0cmVlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlcywwLHByZV9TVHJlZXNfTW92ZVRvTm9kZShzdHJlZSwgMykKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWQs PROOFOBLIGATION: VGVzdFNUcmVlcywwLHByZV9TVHJlZXNfR2V0RGF0YShzdHJlZSwgMTMpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlcywwLHByZV9TVHJlZXNfU2V0Q3VycmVudE5vZGUoc3RyZWUsIFNUcmVlc19Na05vZGUoJ3onLCAxMykpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA== PROOFOBLIGATION: VGVzdFNUcmVlcywwLHByZV9TVHJlZXNfU3RvcmVDdXJyZW50RGF0YShzdHJlZSwgJ1onKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZCw= PROOFOBLIGATION: VGVzdFNUcmVlcywwLHByZV9TVHJlZXNfR2V0Q3VycmVudERhdGEoc3RyZWUpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkLA==



--adt.vdmsl

% actual VDM-SL specification
\setcounter{section}{1}
\section{VDM-SL Specification of Data Structures}
\subsection{Address Model}
The underlying type for modelling memory addresses is the natural numbers.  The {\tt ADDRESS} value {\tt NIL} models the address to  `nowhere'.  In Modula-2 terms, {\tt ADDRESS} models the corresponding Modula-2 type with the same name found the pseudo-module SYSTEM.   {\tt NIL} likewise models the corresponding Modula-2 value with the same name.\\       
\\
\begin{vdm_al}
types 
     ADDRESS = nat;

values
     NIL: ADDRESS = 0;   
\end{vdm_al}

\subsection{Node Definitions}
This section specifies the node types that will be used by the abstract data types.  The {\tt Nodes\_SingleLink} type will be used in the singly-linked list; the {\tt Nodes\_DoubleLink} type will be used in the doubly-linked list; and the {\tt Nodes\_BinaryTree} type will be used in the binary tree.  The queue and stack specifications will be based on the singly-linked list so they do not require node definitions.\\
\\
There is a somewhat generic node type, {\tt Nodes\_Node}, which can be the type of any one of the three specific node types.  Because of this, the functions for handling node manipulation and retrieval are generic with respect to node type.  For example, the function {\tt Nodes\_GetData} can receive as input any one of the three node types and return its data field.

The exported data types include:
\begin{itemize}
\item {\tt Nodes\_Data}
\item {\tt Nodes\_SingleLink}
\item {\tt Nodes\_DoubleLink}
\item {\tt Nodes\_BinaryTree}
\item {\tt Nodes\_Node}
\item {\tt Nodes\_NodePtr}
\end{itemize}
The exported functions include:
\begin{itemize}
\item {\tt Nodes\_MkSingleLink}
\item {\tt Nodes\_MkDoubleLink}
\item {\tt Nodes\_MkBinaryTree}
\item {\tt Nodes\_GetData}
\item {\tt Nodes\_SetData}
\item {\tt Nodes\_GetNext}
\item {\tt Nodes\_SetNext}
\item {\tt Nodes\_GetPrev}
\item {\tt Nodes\_SetPrev}
\item {\tt Nodes\_GetRight}
\item {\tt Nodes\_SetLeft}
\item {\tt Nodes\_GetParent}
\item {\tt Nodes\_SetParent}
\end{itemize}
\begin{vdm_al}
types
     Nodes_Data = Data;
\end{vdm_al}
The type {\tt Nodes\_Data} acts a generic parameter for the {\tt Nodes}  `module'.  The type {\tt Data} is defined in the testing section of this specification (2.11).  \\
\begin{vdm_al}
types

Nodes_SingleLink ::
     data: Nodes_Data
     next: Nodes_NodePtr;
     
Nodes_DoubleLink ::
     data: Nodes_Data
     next: Nodes_NodePtr 
     prev: Nodes_NodePtr;

Nodes_BinaryTree ::

     data: Nodes_Data
     right: Nodes_NodePtr
     left: Nodes_NodePtr
     parent: Nodes_NodePtr;

Nodes_Node = Nodes_SingleLink | Nodes_DoubleLink | Nodes_BinaryTree;
Nodes_NodePtr = ADDRESS;

functions

Nodes_MkSingleLink: Nodes_Data * Nodes_NodePtr -> Nodes_Node
Nodes_MkSingleLink(data, ptr) == mk_Nodes_SingleLink(data, ptr);

Nodes_MkDoubleLink: Nodes_Data * Nodes_NodePtr * Nodes_NodePtr -> Nodes_Node
Nodes_MkDoubleLink(data, next, prev) == mk_Nodes_DoubleLink(data, next, prev);

Nodes_MkBinaryTree: Nodes_Data * Nodes_NodePtr * Nodes_NodePtr * Nodes_NodePtr 
               -> Nodes_Node
Nodes_MkBinaryTree(data, right, left, parent) == 
     mk_Nodes_BinaryTree(data, right, left, parent);

\end{vdm_al}
These three {\tt Nodes\_Mk...} functions return a node whose fields match the values of the function's arguments.  In other words, these are node constructor functions.\\
\\
\begin{vdm_al}

Nodes_GetData: Nodes_Node -> Nodes_Data
Nodes_GetData(node) == 
     if is_Nodes_SingleLink(node) then
          let mk_Nodes_SingleLink(data, -) = node in data
     elseif  is_Nodes_DoubleLink(node) then
          let mk_Nodes_DoubleLink(data, -, -) = node in data
     else 
          let mk_Nodes_BinaryTree(data, -, -, -) = node in data
pre is_Nodes_SingleLink(node) 
     or is_Nodes_DoubleLink(node) 
     or is_Nodes_BinaryTree(node); 

Nodes_SetData: Nodes_Node * Nodes_Data -> Nodes_Node
Nodes_SetData(node, data) ==
     if is_Nodes_SingleLink(node) then
          let mk_Nodes_SingleLink(-, next) = node in 
               mk_Nodes_SingleLink(data, next)
     elseif  is_Nodes_DoubleLink(node) then
          let mk_Nodes_DoubleLink(-, next, prev) = node in 

               mk_Nodes_DoubleLink(data, next, prev)
     else 
          let mk_Nodes_BinaryTree(-, right, left, parent) = node in
               mk_Nodes_BinaryTree(data, right, left, parent)
pre is_Nodes_SingleLink(node) 
     or is_Nodes_DoubleLink(node) 
     or is_Nodes_BinaryTree(node); 

Nodes_GetNext: Nodes_Node -> Nodes_NodePtr
Nodes_GetNext(node) ==
     if is_Nodes_SingleLink(node) then
          let mk_Nodes_SingleLink(-, next) = node in next
     else 
          let mk_Nodes_DoubleLink(-, next, -) = node in next
pre is_Nodes_SingleLink(node) 
     or is_Nodes_DoubleLink(node);       
               
Nodes_SetNext: Nodes_Node * Nodes_NodePtr -> Nodes_Node
Nodes_SetNext(node, next) ==
     if is_Nodes_SingleLink(node) then
          let mk_Nodes_SingleLink(data, -) = node in
               mk_Nodes_SingleLink(data, next) 
     else  
          let mk_Nodes_DoubleLink(data, -, prev) = node in
               mk_Nodes_DoubleLink(data, next, prev)
pre is_Nodes_SingleLink(node) 
     or is_Nodes_DoubleLink(node);
 
Nodes_GetPrev: Nodes_Node -> Nodes_NodePtr
Nodes_GetPrev(node) == 
     let mk_Nodes_DoubleLink(-, -, prev) = node in prev
pre is_Nodes_DoubleLink(node);

Nodes_SetPrev: Nodes_Node * Nodes_NodePtr -> Nodes_Node
Nodes_SetPrev(node, prev) == 
     let mk_Nodes_DoubleLink(data, next, -) = node in
          mk_Nodes_DoubleLink(data, next, prev)
pre  is_Nodes_DoubleLink(node);    

Nodes_GetRight: Nodes_Node -> Nodes_NodePtr
Nodes_GetRight(node) == 
     let mk_Nodes_BinaryTree(-, right, -, -) = node in right
pre is_Nodes_BinaryTree(node);     

Nodes_SetRight: Nodes_Node * Nodes_NodePtr -> Nodes_Node
Nodes_SetRight(node, right) == 

     let mk_Nodes_BinaryTree(data, -, left, parent) = node in
          mk_Nodes_BinaryTree(data, right, left, parent)
pre is_Nodes_BinaryTree(node);     

Nodes_GetLeft: Nodes_Node -> Nodes_NodePtr
Nodes_GetLeft(node) == 
     let mk_Nodes_BinaryTree(-, -, left, -) = node in left
pre is_Nodes_BinaryTree(node);

Nodes_SetLeft: Nodes_Node * Nodes_NodePtr -> Nodes_Node
Nodes_SetLeft(node, left) == 
     let mk_Nodes_BinaryTree(data, right, -, parent) = node in
          mk_Nodes_BinaryTree(data, right, left, parent)
pre is_Nodes_BinaryTree(node);     

Nodes_GetParent: Nodes_Node -> Nodes_NodePtr
Nodes_GetParent(node) == 
     let mk_Nodes_BinaryTree(-, -, -, parent) = node in parent
pre is_Nodes_BinaryTree(node);

Nodes_SetParent: Nodes_Node * Nodes_NodePtr -> Nodes_Node
Nodes_SetParent(node, parent) == 
     let mk_Nodes_BinaryTree(data, right, left, -) = node in
          mk_Nodes_BinaryTree(data, right, left, parent)
pre is_Nodes_BinaryTree(node);     
\end{vdm_al}
Each {\tt Nodes\_Get...} function has a matching {\tt Nodes\_Set...} function.  The `get' functions return one of the input node's fields.  The `set' functions return the input node with the correct field set to the input value.

\subsection{Minimal System Heap Model}
In Modula-2, memory found in the system heap can be dynamically allocated and deallocated. Allocated memory is accessed by variables of type {\tt ADDRESS}.  Memory is allocated by the {\tt NEW} procedure and deallocated by the {\tt DISPOSE} procedure.  The purpose of this {\tt Heaps}  `module' is to model Modula-2 dynamic memory as closely as possible.  \\
\\
The heap is modelled as a sequence of locations.  Locations are referenced by variables of type {\tt ADDRESS}.  Each location consists of stored data and a boolean stating whether the location has been allocated or not. \\
\\
This heap model is limited in that it supports storage of only one type of data.  In this case, the only data type is {\tt Nodes\_Node}. \\
\\
{\tt Heaps} exports the following data types:
\begin{itemize}
\item {\tt Heaps\_Size}
\item {\tt Heaps\_Heap}
\end{itemize}
The following functions are exported:
\begin{itemize}
\item {\tt Heaps\_Init}
\item {\tt Heaps\_AmountUsed}
\item {\tt Heaps\_Available}
\item {\tt Heaps\_Retrieve}
\item {\tt Heaps\_Modify}
\end{itemize}
\begin{vdm_al}
types Heaps_Data = [Nodes_Node];
values Heaps_Size = 20;
\end{vdm_al}
{\tt Heaps\_Data} and {\tt Heaps\_Size} act as generic parameters to the {\tt Heaps}  `module'.  {\tt Heaps\_Data} determines the type of data which may be stored in the heap.  {\tt Heaps\_Size} determines the size of the heap; that is, it equals the maximum number of storage locations for variables of type {\tt Heaps\_Data}.\\
\\
\begin{vdm_al}
types
     
Heaps_Location :: 
     data: [Heaps_Data]
     allocated: bool
inv mk_Heaps_Location(d, a) == (a = true) <=> (d <> nil);
\end{vdm_al}
The invariant for {\tt Heaps\_Location} states that if the location is allocated, then the {\tt data} must contain something other than {\tt nil}\footnote{In VDM-SL, {\tt [Type]} is equivalent to {\tt Type | nil} which means that a variable of that type may have a value in {\tt Type} or may be {\tt nil}.}.  On the other hand, if the location is unallocated then the {\tt data} field must be equal to
{\tt nil}.\\
\\
\begin{vdm_al}

Heaps_Heap ::
     storage: seq of Heaps_Location
inv mk_Heaps_Heap(s) == len s = Heaps_Size
\end{vdm_al}
This invariant states that the sequence of locations must contain {\tt Heaps\_Size} locations.\\
\\
\begin{vdm_al}

functions
     
Heaps_InitSequence: nat1 -> seq of Heaps_Location
Heaps_InitSequence(length) == 
     if length > 1 then
          [mk_Heaps_Location(nil, false)]
               ^Heaps_InitSequence(length - 1)
     else
          [mk_Heaps_Location(nil, false)];
\end{vdm_al}
{\tt Heaps\_InitSequence} returns a sequence containing {\tt length} locations.  It is used by {\tt Heaps\_Init} to initialize the system heap.
\\
\begin{vdm_al}

Heaps_Init: () -> Heaps_Heap
Heaps_Init() == mk_Heaps_Heap(Heaps_InitSequence(Heaps_Size));

Heaps_AmountUsed: Heaps_Heap -> nat
Heaps_AmountUsed(heap) ==
     let store = heap.storage in
          len [store(i) | i in set inds store 
               & store(i).allocated = true];
\end{vdm_al}
{\tt Heaps\_AmountUsed} returns the number of locations allocated in the system heap.  The maximum this function can return is {\tt Heaps\_Size}.
\\
\begin{vdm_al}

Heaps_Available: Heaps_Heap -> bool
Heaps_Available(heap) == 
     Heaps_AmountUsed(heap) < len heap.storage;
\end{vdm_al}
{\tt Heaps\_Available} returns true if the heap contains unallocated locations and false otherwise.
\\
\begin{vdm_al}

Heaps_ModifyLoc: Heaps_Heap * ADDRESS * Heaps_Location -> Heaps_Heap
Heaps_ModifyLoc(heap, address, location) ==
     mk_Heaps_Heap(heap.storage++{address|->location})
pre address in set inds heap.storage;
\end{vdm_al}
{\tt Heaps\_ModifyLoc} modifies the location in the heap corresponding to the {\tt address} with new  {\tt location} value.  
\\
\begin{vdm_al}
     
Heaps_Modify: Heaps_Heap * ADDRESS * Heaps_Data -> Heaps_Heap
Heaps_Modify(heap, address, data) ==

     Heaps_ModifyLoc(heap, address, mk_Heaps_Location(data, true))
pre let store = heap.storage in
     address in set inds store
     and store(address).allocated = true;
\end{vdm_al}
{\tt Heaps\_Modify} modifies the {\tt data} field of the allocated location in the heap corresponding to {\tt address}. 
\\
\begin{vdm_al}

Heaps_Retrieve: Heaps_Heap * ADDRESS -> [Heaps_Data]
Heaps_Retrieve(heap, address) ==
     heap.storage(address).data
pre 
     let store = heap.storage in
          address in set inds store     
          and store(address).allocated = true;
\end{vdm_al}
{\tt Heaps\_Retrieve} retreives the {\tt data} field of the allocated location in the heap corresponding to {\tt address}.
\\
\begin{vdm_al}
     
Heaps_UnallocatedAddresses: Heaps_Heap -> set of ADDRESS
Heaps_UnallocatedAddresses(heap) ==
     let store = heap.storage in
          {i|i in set inds store & store(i).allocated = false};
\end{vdm_al}
{\tt Heaps\_UnallocatedAddresses} returns the set of addresses corresponding to unallocated locations.
\\
\begin{vdm_al}

Heaps_UnallocatedAddress: Heaps_Heap -> ADDRESS
Heaps_UnallocatedAddress(heap) ==
     iota new in set Heaps_UnallocatedAddresses(heap) & 
          (forall i in set Heaps_UnallocatedAddresses(heap) & new <= i) 
pre Heaps_Available(heap); 
\end{vdm_al}
{\tt Heaps\_UnallocatedAddress} returns the lowest address in the set of unallocated addresses.

\subsection{Pointer Manipulation}

This section does not really correspond to a `module'.  The following operation specifications are simply meant to simulate pointer allocation, deallocation, data retrieval and data modification facilities that are available as part of the Modula-2 language.  All of the following operations assume that the specification contains a system heap and that its name is {\tt heap}. They also assume that the type {\tt Heap\_Data} is defined and is the type of the data being stored in the heap. \\
\\
\begin{vdm_al}

operations
     
NEW: Heaps_Data ==> ADDRESS
NEW(data) == 
(    def newAddress = Heaps_UnallocatedAddress(heap) in 
	 def newLoc = mk_Heaps_Location(data, true) in
     (    heap := Heaps_ModifyLoc(heap, newAddress, newLoc);
          return newAddress;
     )
)
pre Heaps_Available(heap);    
\end{vdm_al}
The operation {\tt NEW} models the regular procedure in Modula-2 having the same name.  If the heap is not completely allocated then it allocates a new location and returns its address; otherwise, it returns {\tt NIL}.  {\tt NEW} does not exactly model its counterpart in Modula-2 because in Modula-2 a {\tt NEW} call would look like the following:\\
\hspace*{7mm}{\tt NEW(ptr);}\\
whereas in this specification it would be done as follows:\\
\hspace*{7mm}{\tt ptr := NEW(initializationData);}\\
In other words, this model of {\tt NEW} requires initialization data for the location and returns the allocated location.  In Modula-2, however, {\tt ptr} is simply a variable parameter modified by  {\tt NEW}.\\
\\
\begin{vdm_al}

DISPOSE: ADDRESS ==> ()
DISPOSE(address) == 
     heap := Heaps_ModifyLoc(heap, address, mk_Heaps_Location(nil, false))
pre pre_Heaps_ModifyLoc(heap, address, mk_Heaps_Location(nil, false));
\end{vdm_al}
{\tt DISPOSE} models the procedure in Modula-2 having the same name.  If {\tt address} matches an allocated location in the heap, then that location is deallocated.  Note that the pre-condition catches addresses that do not match. \\
\\
\begin{vdm_al}

SET_DATA: ADDRESS * Data ==> ()
SET_DATA(ptr, data) == 
     heap := Heaps_Modify(heap, ptr, 
               Nodes_SetData(Heaps_Retrieve(heap, ptr), data));

SET_NEXT: ADDRESS * ADDRESS ==> ()

SET_NEXT(ptr, next) == 
     heap := Heaps_Modify(heap, ptr, 
               Nodes_SetNext(Heaps_Retrieve(heap, ptr), next));

SET_LEFT: ADDRESS * ADDRESS ==> ()
SET_LEFT(ptr, left) ==
     heap := Heaps_Modify(heap, ptr, 
               Nodes_SetLeft(Heaps_Retrieve(heap, ptr), left));

SET_RIGHT: ADDRESS * ADDRESS ==> ()
SET_RIGHT(ptr, right) ==
     heap := Heaps_Modify(heap, ptr, 
               Nodes_SetRight(Heaps_Retrieve(heap, ptr), right));

SET_PREV: ADDRESS * ADDRESS ==> ()
SET_PREV(ptr, prev) == 
     heap := Heaps_Modify(heap, ptr, 
               Nodes_SetPrev(Heaps_Retrieve(heap, ptr), prev));  

SET_PARENT: ADDRESS * ADDRESS ==> ()
SET_PARENT(ptr, parent) ==
     heap := Heaps_Modify(heap, ptr, 
               Nodes_SetParent(Heaps_Retrieve(heap, ptr), parent));

DATA: ADDRESS ==> Data
DATA(ptr) ==
     return Nodes_GetData(Heaps_Retrieve(heap, ptr));
 
NEXT: ADDRESS ==> ADDRESS
NEXT(ptr) ==
     return Nodes_GetNext(Heaps_Retrieve(heap, ptr));

LEFT: ADDRESS ==> ADDRESS
LEFT(ptr) == 
     return Nodes_GetLeft(Heaps_Retrieve(heap, ptr));

RIGHT: ADDRESS ==> ADDRESS
RIGHT(ptr) ==
     return Nodes_GetRight(Heaps_Retrieve(heap, ptr));

PARENT: ADDRESS ==> ADDRESS
PARENT(ptr) ==
     return Nodes_GetParent(Heaps_Retrieve(heap, ptr));

\end{vdm_al}

The {\tt SET\_...} operations model dynamic memory modification for pointers to {\tt Nodes\_Node}.  For example, \\
\hspace*{7mm}{\tt SET\_DATA(ptr, modificationData);}\\
models the Modula-2 statement, \\
\hspace*{7mm}{\tt ptr\char94.data := modificationData;}\\
Likewise, the {\tt GET\_...} operations are meant to model Modula-2 pointer dereferencing and retrieval of a field.  For example, \\
\hspace*{7mm}{\tt data := GET\_DATA(ptr);}\\
models the Modula-2 statement, \\
\hspace*{7mm}{\tt data := ptr\char94.data;}.\\


\subsection{Singly-Linked List}
This section specifies a singly-linked list.  It is specified so as to allow an almost automatic translation into Modula-2 \footnote{The singly-linked list is completely translated into Generic Modula-2 in Appendix A.1}.  Its operations' post-conditions checking generally test two things: that the list operation and a corresponding sequence operation are equivalent, and that memory allocation and deallocation is performed correctly.  The first test, equivalence, is achieved by translating the linked list before and after the list operation into two VDM-SL sequences, `old' and `new'.  The function {\tt SList\_Seq} performs this translation.  If the list and sequence operation are equivalent, then the result of the sequence operation on the `old' sequence should be equal to the `new' sequence.  The second test concerning memory allocation is found in the pre-conditions and post-conditions of all operations that use dynamic memory.  If an operation will attempt to allocate memory!
, th
en the pre-condition checks that memory is available using the {\tt Heaps\_Available} function.  If an operation allocates or deallocates memory, then the post-condition checks that it is done correctly.  For example, if one node was to have been deallocated then the heap should have one more location available for allocation.  The function {\tt Heaps\_AmountUsed} is used to check this.\\
\\
The following data types are exported:
\begin{itemize}
\item{\tt SList\_List}
\item{\tt SList\_Data}
\end{itemize}
The following functions are exported:      
\begin{itemize}
\item{\tt SList\_Init}
\item{\tt SList\_Seq}
\end{itemize}
The following operations are exported:
\begin{itemize}
\item{\tt SList\_Insert}
\item{\tt SList\_Delete}
\item{\tt SList\_Update}
\item{\tt SList\_Append}
\item{\tt SList\_Empty}
\item{\tt SList\_Element}
\item{\tt SList\_Length}
\item{\tt SList\_Traverse}
\end{itemize}  

\begin{vdm_al}
types SList_Data = Data;
\end{vdm_al}
{\tt SList\_Data} acts a generic parameter for the {\tt SList} `module'.    It determines the type of the elements found in the list.\\
\begin{vdm_al}

types SList_List = Nodes_NodePtr;

functions

SList_IsEmpty: SList_List -> bool
SList_IsEmpty(list) == list = NIL;

SList_Seq: Heaps_Heap * SList_List -> seq of SList_Data
SList_Seq(heap, list) == 
     if not SList_IsEmpty(list) then    
          let node = Heaps_Retrieve(heap, list) in
          let data = Nodes_GetData(node) in
          let tail = Nodes_GetNext(node) in 
               [data]^SList_Seq(heap, tail)
     else
          [];  
\end{vdm_al}
{\tt SList\_Seq} translates a {\tt SList\_List} into a sequence of {\tt SList\_Data} elements.  This is the function that appears in the post conditions of the list operations in order to compare the results of these operations with corresponding sequence operations \footnote{Sequence operations are built into {\tt VDM-SL}.}. \\
\begin{vdm_al}

SList_Lengthf: Heaps_Heap * SList_List -> nat
SList_Lengthf(heap, list) == 
     if not SList_IsEmpty(list) then
          let tail = Nodes_GetNext(Heaps_Retrieve(heap, list)) in 
               1 + SList_Lengthf(heap, tail)
     else
          0
post RESULT = len SList_Seq(heap, list);
\end{vdm_al}
{\tt SList\_Lengthf} returns the number of elements in the list.  The `f' differentiates this {\em function} from the length {\em operation} defined later.\\
\\
\begin{vdm_al}

SList_PtrToNode: Heaps_Heap * SList_List * nat1 -> Nodes_NodePtr

SList_PtrToNode(heap, list, position) ==
     let tail = Nodes_GetNext(Heaps_Retrieve(heap, list)) in
          if position > 1 then 
               SList_PtrToNode(heap, tail, position - 1) 
          else list
pre position <= SList_Lengthf(heap, list)
post 
     let data = Nodes_GetData(Heaps_Retrieve(heap, RESULT)), 
          listSeq = SList_Seq(heap, list) in
               data = listSeq(position);
\end{vdm_al}
{\tt SList\_PtrToNode} returns the pointer to the element at position {\tt position} in the list.
\\
\begin{vdm_al}

SList_Init: () -> SList_List
SList_Init() == NIL;
\end{vdm_al}
{\tt SList\_Init} returns an empty list.
\\
\begin{vdm_al}

operations

SList_InsertAtBeginning: SList_List * SList_Data ==> SList_List
SList_InsertAtBeginning(list, data) ==
     return NEW(Nodes_MkSingleLink(data, list))
post [data]^SList_Seq(heap~, list) = SList_Seq(heap, RESULT);
\end{vdm_al}
{\tt SList\_InsertAtBeginning} returns the list with {\tt data} as the first element.\\
\\
\begin{vdm_al}

SList_InsertAfter: SList_List * Nodes_NodePtr * SList_Data ==> SList_List
SList_InsertAfter(list, ptr, data) ==
(    dcl new: Nodes_NodePtr := NEW(Nodes_MkSingleLink(data, NEXT(ptr)));
     SET_NEXT(ptr, new);
     return list;
)
post 
     let old = SList_Seq(heap~, ptr) in
          [old(1)]^[data]^tl old = SList_Seq(heap, ptr);
\end{vdm_al}
{\tt SList\_InsertAfter} returns the list with {\tt data} inserted after the element corresponding to {\tt ptr}.
\\

\begin{vdm_al}

SList_Insert: SList_List * SList_Data * nat1 ==> SList_List
SList_Insert(list, data, position) ==
     if position = 1 then 
          return SList_InsertAtBeginning(list, data)
     else
          return SList_InsertAfter(list, 
               SList_PtrToNode(heap, list, position - 1), data)
pre position <= SList_Lengthf(heap, list) + 1 and Heaps_Available(heap)
post let new = SList_Seq(heap, RESULT) in
     SList_Seq(heap~, list) 
          = [new(i) | i in set inds new & i <> position]
     and new(position) = data
     and Heaps_AmountUsed(heap~) + 1 = Heaps_AmountUsed(heap);
\end{vdm_al}
{\tt SList\_Insert} returns the list with  {\tt data} at position {\tt position}.
\\
\begin{vdm_al}
     
SList_Append: SList_List * SList_Data ==> SList_List
SList_Append(list, data) ==
(    dcl ptr: Nodes_NodePtr := list;
     if ptr = NIL then
          return SList_InsertAtBeginning(list, data)
     else
     (    while (NEXT(ptr) <> NIL) do ptr := NEXT(ptr);
          return SList_InsertAfter(list, ptr, data);
     )
 )     
pre Heaps_Available(heap)
post SList_Seq(heap~, list)^[data] = SList_Seq(heap, RESULT)
     and Heaps_AmountUsed(heap~) + 1 = Heaps_AmountUsed(heap);
\end{vdm_al}
{\tt SList\_Append} returns the list with {\tt data} as its last element.
\\
\begin{vdm_al}

SList_Update: SList_List * SList_Data * nat1 ==> SList_List
SList_Update(list, data, position) ==
(    dcl ptr: Nodes_NodePtr := SList_PtrToNode(heap, list, position);
     SET_DATA(ptr, data);
     return list; 
)
pre position <= SList_Lengthf(heap, list)
post SList_Seq(heap~, list)++{position |-> data} = SList_Seq(heap, RESULT)

     and Heaps_AmountUsed(heap~) = Heaps_AmountUsed(heap);
\end{vdm_al}
{\tt SList\_Update} returns the list with {\tt data} replacing the previous element at position {\tt position}. \\
\begin{vdm_al}

SList_DeleteAtBeginning: SList_List ==> SList_List
SList_DeleteAtBeginning(list) ==
(    dcl  temp: Nodes_NodePtr := list,
          newlist: SList_List := NEXT(list);
     DISPOSE(temp);
     return newlist;
)
post tl SList_Seq(heap~, list) = SList_Seq(heap, RESULT);
\end{vdm_al}
{\tt SList\_DeleteAtBeginning} returns the list without the first element.\\
\begin{vdm_al}

SList_DeleteAfter: SList_List * Nodes_NodePtr ==> SList_List
SList_DeleteAfter(list, ptr) ==
(    dcl temp: Nodes_NodePtr;
     temp := NEXT(ptr);
     SET_NEXT(ptr, NEXT(temp));
     DISPOSE(temp);
     return list;
)
post let old = SList_Seq(heap~, ptr) in
     [old(1)]^tl (tl old) = SList_Seq(heap, ptr);
\end{vdm_al}
{\tt SList\_DeleteAfter} returns the list without the element pointed to by {\tt ptr}.\\
\begin{vdm_al}

SList_Delete: SList_List * nat1 ==> SList_List
SList_Delete(list, position) ==
(    if position = 1 then return SList_DeleteAtBeginning(list)
     else 
          return SList_DeleteAfter(list, 
                    SList_PtrToNode(heap, list, position - 1))
)
pre position <= SList_Lengthf(heap, list)
post let old = SList_Seq(heap~, list) in
     [old(i) | i in set inds old & i <> position] 
          = SList_Seq(heap, RESULT)

     and Heaps_AmountUsed(heap~) = Heaps_AmountUsed(heap) + 1;
\end{vdm_al}
{\tt SList\_Delete} returns the list without the element at position {\tt position}.
\\
\begin{vdm_al}

SList_Traverse:  SList_List * (SList_Data -> SList_Data) ==> SList_List
SList_Traverse(list, traversal) ==
(    dcl ptr: Nodes_NodePtr := list;
     while (ptr <> NIL) do
     (    SET_DATA(ptr, traversal(DATA(ptr)));
          ptr := NEXT(ptr);
     );
     return list;
)
post 
     let old = SList_Seq(heap~, list) in
          old <> [] => [traversal(old(i)) | i in set inds old] 
               = SList_Seq(heap, RESULT);
\end{vdm_al}
{\tt SList\_Traverse} returns the list with {\tt traversal} applied to each element.
\\
\begin{vdm_al}

SList_Length: SList_List ==> nat
SList_Length(list) == return SList_Lengthf(heap, list); 

SList_Empty: SList_List ==> bool
SList_Empty(list) == return SList_IsEmpty(list);

SList_Element: SList_List * nat1 ==> SList_Data
SList_Element(list, position) == DATA(SList_PtrToNode(heap, list, position));
\end{vdm_al}
{\tt SList\_Element} returns the element at position {\tt position} in the list.

\subsection{Doubly Linked List}
This specification specifies a doubly-linked list that is based on the singly-linked list; thus, it modifies only the insert, delete and append operations.  In addition, the function, {\tt DList\_IsList}, is added to determine if a list is a valid doubly-linked list (see its specification for more details).  Comments are added in this section only if the specification differs significantly from the singly-linked list specification; otherwise, the comments there apply here as well.\\     
\\ 
The following data types are exported:
\begin{itemize}
\item{\tt DList\_List}
\item{\tt DList\_Data}
\end{itemize}
The following functions are exported:      
\begin{itemize}
\item{\tt DList\_Init}
\item{\tt DList\_IsList}
\end{itemize}
The following operations are exported:
\begin{itemize}
\item{\tt DList\_Insert}
\item{\tt DList\_Delete}
\item{\tt DList\_Update}
\item{\tt DList\_Append}
\item{\tt DList\_Empty}
\item{\tt DList\_Element}
\item{\tt DList\_Length}
\item{\tt DList\_Traverse}
\end{itemize} 

\begin{vdm_al}

types
DList_Data = Data;
\end{vdm_al}
{\tt DList\_Data} acts as the generic parameter for the `module' {\tt DList}.
\begin{vdm_al}

types
DList_List = Nodes_NodePtr;

functions
     
DList_LastNode: Heaps_Heap * DList_List -> Nodes_NodePtr
DList_LastNode(heap, list) ==
     let next = Nodes_GetNext(Heaps_Retrieve(heap, list)) in
          if next <> NIL then
               DList_LastNode(heap, next)
          else list;
\end{vdm_al}
{\tt DList\_LastNode} returns the pointer to the last element in the list.
\\
\begin{vdm_al}

DList_Forward: Heaps_Heap * DList_List -> seq of DList_Data
DList_Forward(heap, list) == SList_Seq(heap, list);
\end{vdm_al}

{\tt DList\_Forward} returns the sequence corresponding to the list by following the {\tt next} links in the list from the beginning to the end.
\\
\begin{vdm_al}

DList_Backward: Heaps_Heap * DList_List -> seq of DList_Data
DList_Backward(heap, list) ==
     if list <> NIL then
          let prev = Nodes_GetPrev(Heaps_Retrieve(heap, list)) in
          let data = Nodes_GetData(Heaps_Retrieve(heap, list)) in
               DList_Backward(heap, prev)^[data]
     else [];
\end{vdm_al}
{\tt DList\_Backward} returns the sequence corresponding to the list by following the {\tt prev} links in the list from the end to the beginning.
\\
\begin{vdm_al}
               
DList_IsList: Heaps_Heap * DList_List -> bool
DList_IsList(heap, list) == 
     if list <> NIL then
          DList_Forward(heap, list) 
               = DList_Backward(heap, DList_LastNode(heap, list))
     else true;
\end{vdm_al}
{\tt DList\_IsList} decides whether a list is valid on the basis that the sequence derived by moving from beginning to end must be similar to the sequence derived by moving from end to beginning.
\\
\begin{vdm_al}

DList_Init: () -> DList_List
DList_Init() == NIL;                         

operations

DList_InsertAtBeginning: DList_List * DList_Data ==> DList_List
DList_InsertAtBeginning(list, data) ==
(    dcl new: Nodes_NodePtr := NEW(Nodes_MkDoubleLink(data, list, NIL));
     if list <> NIL then SET_PREV(list, new);
     return new;
)
     post [data]^SList_Seq(heap~, list) = SList_Seq(heap, RESULT);

DList_InsertAfter: DList_List * Nodes_NodePtr * DList_Data ==> DList_List
DList_InsertAfter(list, ptr, data) ==
(    dcl new: Nodes_NodePtr := NEW(Nodes_MkDoubleLink(data, NEXT(ptr), ptr));
     if NEXT(ptr) <> NIL then SET_PREV(NEXT(ptr), new);

     SET_NEXT(ptr, new);
     return list;
)
post 
     let old = SList_Seq(heap~, ptr) in
          [old(1)]^[data]^tl old = SList_Seq(heap, ptr);

DList_Insert: DList_List * DList_Data * nat1 ==> DList_List
DList_Insert(list, data, position) ==
     if position = 1 then 
          return DList_InsertAtBeginning(list, data)
     else
          return DList_InsertAfter(list, 
                    SList_PtrToNode(heap, list, position - 1), data)
pre position <= SList_Lengthf(heap, list) + 1 and 
     Heaps_Available(heap) and DList_IsList(heap, list)
post DList_IsList(heap, RESULT) and
     let new = SList_Seq(heap, RESULT) in
          SList_Seq(heap~, list) 
               = [new(i) | i in set inds new & i <> position]
          and new(position) = data;          

DList_DeleteAtBeginning: DList_List ==> DList_List
DList_DeleteAtBeginning(list) ==
(    dcl  temp: Nodes_NodePtr := list, 
          newlist: DList_List := NEXT(list);
        if newlist <> NIL then SET_PREV(newlist, NIL);
     DISPOSE(temp);
     return newlist;
)
post tl SList_Seq(heap~, list) = SList_Seq(heap, RESULT);

DList_DeleteAfter: DList_List * Nodes_NodePtr ==> DList_List
DList_DeleteAfter(list, ptr) ==
(    dcl temp: Nodes_NodePtr, nextPtr: Nodes_NodePtr;
     temp := NEXT(ptr);
        nextPtr := NEXT(temp);
     SET_NEXT(ptr, nextPtr);
     if nextPtr <> NIL then SET_PREV(nextPtr, ptr);
     DISPOSE(temp);
     return list;
)
post let old = SList_Seq(heap~, ptr) in
     [old(1)]^tl (tl old) = SList_Seq(heap, ptr);

DList_Delete: DList_List * nat1 ==> DList_List

DList_Delete(list, position) ==
(    if position = 1 then return DList_DeleteAtBeginning(list)
     else return DList_DeleteAfter(list, 
               SList_PtrToNode(heap, list, position - 1))
)
pre position <= SList_Lengthf(heap, list) and DList_IsList(heap, list)
post DList_IsList(heap, RESULT) and
     let old = SList_Seq(heap~, list) in
          [old(i) | i in set inds old & i <> position] 
               = SList_Seq(heap, RESULT)
          and Heaps_AmountUsed(heap~) = Heaps_AmountUsed(heap) + 1;

DList_Append: DList_List * DList_Data ==> DList_List
DList_Append(list, data) ==
(    dcl ptr: Nodes_NodePtr := list;
     if ptr = NIL then
          return DList_InsertAtBeginning(list, data)
     else
     (    while (NEXT(ptr) <> NIL) do ptr := NEXT(ptr);
          return DList_InsertAfter(list, ptr, data);
     )
)     
pre Heaps_Available(heap) and DList_IsList(heap, list)
post SList_Seq(heap~, list)^[data] = SList_Seq(heap, RESULT)
     and Heaps_AmountUsed(heap~) + 1 = Heaps_AmountUsed(heap)
     and DList_IsList(heap, RESULT);

DList_Empty: DList_List ==> bool
DList_Empty(list) == SList_Empty(list);

DList_Element: DList_List * nat1 ==> DList_Data
DList_Element(list, position) == SList_Element(list, position);

DList_Length: DList_List ==> nat
DList_Length(list) == SList_Length(list);

DList_Traverse: DList_List * (DList_Data -> DList_Data) ==> DList_List
DList_Traverse(list, traversal) == SList_Traverse(list, traversal);
     
DList_Update: DList_List * DList_Data * nat1 ==> DList_List
DList_Update(list, data, position) == SList_Update(list, data, position);
\end{vdm_al}

\subsection{Queues}

This queue specification is based on the singly-linked list.  Note the different style of specification from the singly and doubly linked list.  Specifically note that the preconditions are if-statements inside the functions and if a pre-condition fails the function returns `error'.   \\
\\
This `module' exports everything it defines.
\\
\begin{vdm_al}
types Queues_Data = Data;
\end{vdm_al}
{\tt Queues\_Data} acts as the generic parameter of the `module' {\tt Queues}.\\
\\
\begin{vdm_al}

types Queues_Queue = SList_List;

functions

Queues_Init: () -> Queues_Queue
Queues_Init() == SList_Init();

operations
     
Queues_Enqueue: Queues_Queue * Queues_Data ==> Queues_Queue
Queues_Enqueue(queue, data) == return SList_Append(queue, data);

Queues_Dequeue: Queues_Queue ==> Queues_Queue * Queues_Data
Queues_Dequeue(queue) ==
(    if not SList_Empty(queue) then
     (    dcl data: Queues_Data := Queues_Head(queue);
          return mk_(SList_Delete(queue, 1), data);    
     )
     else error;
);

Queues_Head: Queues_Queue ==> Queues_Data
Queues_Head(queue) == 
     if not SList_Empty(queue) then SList_Element(queue, 1)
     else error;


\end{vdm_al}

\subsection{Stacks}
Like the queue, the stack is also based on the singly-linked list.  \\
\\
This `module' exports everything it defines.
\\
\begin{vdm_al}
types Stacks_Data = Data;
\end{vdm_al}
{\tt Stacks\_Data} acts as the generic parameter of the `module' {\tt Stacks}.\\
\begin{vdm_al}

types Stacks_Stack = SList_List;

functions
Stacks_Init: () -> Stacks_Stack
Stacks_Init() == SList_Init();

operations
     
Stacks_Push: Stacks_Stack * Stacks_Data ==> Stacks_Stack
Stacks_Push(stack, data) == return SList_Insert(stack, data, 1);

Stacks_Top: Stacks_Stack ==> Stacks_Data
Stacks_Top(stack) == 
     if not SList_Empty(stack) then SList_Element(stack, 1)
     else error;

Stacks_Pop: Stacks_Stack ==> Stacks_Stack * Stacks_Data
Stacks_Pop(stack) == 
(    if not SList_Empty(stack) then
     (    dcl data: Stacks_Data := Stacks_Top(stack);
          return mk_(SList_Delete(stack, 1), data);
     )
     else error
);

\end{vdm_al}


\subsection{Binary Tree Based on Sets}
This binary tree will be used in the post-conditions of the binary tree in the next section.  This tree  is modelled as a set containing nodes where each node consists of a data field and a position field.  The node's {\tt position} field determines its position in the tree.  Position numbering begins with 1 at the root and then is incremented by 1 as one moves from left to right in a tree level.  At the end of a level, incrementing continues at the leftmost node in the next level.  A tree viewed in terms of  positions would appear as follows:\\
\begin{quote}
{\bf Tree Position Numbering}
\end{quote}
\begin{quote}
\begin{tabular}{|r|*{15}{c}|}
\hline
$Levels$&$Positions$&&&&&&&&&&&&&&\\
\hline
1&&&&&&&&1&&&&&&&\\
2&&&&2&&&&&&&&3&&&\\
3&&4&&&&5&&&&6&&&&7&\\
4&8&&9&&10&&11&&12&&13&&14&&15\\
n&...&&&&&&&&&&&&&&\\
\hline
\end{tabular}
\end{quote}
This scheme implies the following formulas for calculating various positions within the tree: 
\begin{itemize}
\item Given position $p$, the position of the right child is $2p + 1$ and the position of the left child is $2p$.  These formulas can be verified by referencing the table above.  Notice that a left child position is even and a right child position is odd (except for the root which is definitely not a child).
\item The parent position of $p$ is $\frac{p}{2}$.
\item Let $n$ be a level in the tree.  The leftmost node in that level has the position $2^n$.  The maximum number of nodes in level $n$ is $2^n$.  Therefore, the position of the rightmost node in that level is $2^n + 2^n - 1$ or $2^{n + 1} - 1$.   
\item The situation is somewhat more complex when calculating for a subtree rather than a tree.  Call the subtree $S$ and the position of the subtree root $r$.  Consider the positions in the subtree at a level that is $d$ levels below the subtree root.  The leftmost  position amongst these is $r2^d$.  The maximum number of positions is $2^d$;  therefore, the rightmost position is $r2^d + 2^d - 1$ or $(r + 1)2^d - 1$.
\item An obvious conclusion from the above formulas is that if $p$ is a position in $S$ then $\exists e \in {\bf N } \cdot r2^e \leq p \leq (r + 1)2^e - 1$.  If such an $e$ exists then it will denote the number of levels $p$ is below the root of $S$.  Another way to state this expression is $\exists e \in {\bf N } \cdot r2^e \leq p < (r + 1)2^e$.  Notice that $(r + 1)2^e$ is just the leftmost positions of the subtree whose root is at the position immediatly to the right of  the root of $S$.     
\end{itemize}
The following data types are exported:
\begin{itemize}
\item {\tt STrees\_Direction}
\item {\tt STrees\_Node}
\item {\tt STrees\_Tree}
\item {\tt STrees\_Info}
\item {\tt STrees\_Data}
\end{itemize}
The following functions are exported:
\begin{itemize}
\item {\tt STrees\_Delete}
\item {\tt STrees\_ExistsData}
\item {\tt STrees\_ExistsDirection}
\item {\tt STrees\_ExistsNode}
\item {\tt STrees\_GetCurrentData}
\item {\tt STrees\_GetCurrentNode}
\item {\tt STrees\_GetData}
\item {\tt STrees\_GetTree}
\item {\tt STrees\_Init}
\item {\tt STrees\_Insert}
\item {\tt STrees\_MkNode}
\item {\tt STrees\_MkTree}
\item {\tt STrees\_MkInfo}
\item {\tt STrees\_MoveInDir}
\item {\tt STrees\_MoveToAnscestor}
\item {\tt STrees\_MoveToNode}
\item {\tt STrees\_MoveToParent}
\item {\tt STrees\_SetCurrentNode}
\item {\tt STrees\_Size}
\item {\tt STrees\_StoreCurrentData}
\item {\tt STrees\_Traverse}
\end{itemize}
\begin{vdm_al}

types
STrees_Data = Data;
\end{vdm_al}
{\tt STrees\_Data} acts as the generic parameter of the `module' {\tt STrees}.  It is the data which will be inserted, deleted and updated. 
\\
\begin{vdm_al}

types 
STrees_Direction = <ToRoot> | <ToLeft> | <ToRight>
\end{vdm_al}
{\tt STrees\_Direction} is used to describe direction in the tree.  \textsc{ToRoot} refers to the root node, \textsc{ToLeft} refers to the left child of the `current node'  (`current node' is described later) and \textsc{ToRight} refers to the right child of the `current node'.   
\\
\begin{vdm_al}

types
STrees_Node ::
     data: STrees_Data
     position: nat1;
\end{vdm_al}
{\tt STrees\_Node} is the type of all of the nodes in the tree.  As the earlier discussion indicated, each node consists of a position and a data field.
\\
\begin{vdm_al}

STrees_Tree = set of STrees_Node
inv tree == 
     (forall node in set tree & 
          not STrees_IsRoot(tree, node) <=> STrees_IsChild(tree, node)
          and STrees_IsUnique(tree, node)) 
     and (tree <> {} <=> exists1 node in set tree & 
                                 STrees_IsRoot(tree, node));
\end{vdm_al}
{\tt STrees\_Tree} is the actual binary tree.  It is a set of nodes.  The invariant means that each node is either a child or the root but not both.  The only node not a child is the root; all other nodes must have a parent.   In addition, each node is unique with respect to position; that is, at most one node can occupy a single position.  Finally, if the tree is empty then there is no root; however, if it is not empty, then there is exactly one root.  Note that if the root's position is 1, then the second part of the invariant is unnecessary; however, if the tree is a subtree then the root's position is greater than 1 and, hence, it is possible for there to be multiple roots or no roots at all.  In that case, the second part of the invariant is necessary.    
\\
\begin{vdm_al}

STrees_Info ::
     tree: STrees_Tree
     current: [STrees_Node]
inv mk_STrees_Info(t, c) == 
     (c = nil <=> t = {}) and
     (c <> nil <=> (c in set t and let r = STrees_Root(t) in r.position = 1));
\end{vdm_al}
{\tt STrees\_Info} stores both the tree and the current node.  The current node is a node which enables the tree user to move around the tree.  Functions for this are specified later.  The invariant states that the current node has a node value if and only if the tree is non-empty.  The second part of the invariant states that, if and only  if the tree is not empty then, the current node is a node in the tree and the position of the root is 1.  Notice that this second part prevents the tree from being a subtree.\\
\\
\begin{vdm_al}

functions

STrees_GetTree: STrees_Info -> STrees_Tree

STrees_GetTree(mk_STrees_Info(tree, -)) == tree;
\end{vdm_al}
{\tt STrees\_GetTree} returns the set of all the nodes in the tree.
\\
\begin{vdm_al}
 
STrees_MkNode: STrees_Data * nat1 -> STrees_Node
STrees_MkNode(data, position) ==
     mk_STrees_Node(data, position);

STrees_MkTree: set of STrees_Node -> STrees_Tree
STrees_MkTree(tree) == tree
pre inv_STrees_Tree(tree);

STrees_MkInfo: STrees_Tree * STrees_Node -> STrees_Info
STrees_MkInfo(tree, current) ==
     mk_STrees_Info(tree, current)
pre inv_STrees_Info(mk_STrees_Info(tree, current));
\end{vdm_al}
The {\tt STrees\_Mk...} functions construct one of the binary tree data structures defined above.
\\
\begin{vdm_al}

STrees_Init: () -> STrees_Info
STrees_Init() == mk_STrees_Info({}, nil);
\end{vdm_al}
Initially a tree is empty.  Hence, this intialized tree is an empty set whose current node does not contain a node value.
\\
\begin{vdm_al}

STrees_IsRoot: set of STrees_Node * STrees_Node -> bool
STrees_IsRoot(tree, mk_STrees_Node(dr, pr)) == 
     not STrees_IsChild(tree, mk_STrees_Node(dr, pr))
pre mk_STrees_Node(dr, pr) in set tree;
\end{vdm_al}
{\tt STrees\_IsRoot} returns true if the input node is the root of the input tree or subtree.  Another way of saying `is a root' is to say `is not a child'.
\\
\begin{vdm_al}

STrees_IsParent: STrees_Tree * STrees_Node -> bool
STrees_IsParent(tree, node) ==
     exists child in set tree & STrees_IsParentOf(tree, node, child)
pre node in set tree;

STrees_IsChild: set of STrees_Node * STrees_Node -> bool
STrees_IsChild(tree, node) == 
     (exists parent in set tree & STrees_IsParentOf(tree, parent, node))
     and (exists1 parent in set tree & STrees_IsParentOf(tree, parent, node))
pre node in set tree;

STrees_IsUnique: set of STrees_Node * STrees_Node -> bool
STrees_IsUnique(tree, mk_STrees_Node(data, position)) ==
     (mk_STrees_Node(data, position) in set tree) and
     (exists1 node in set tree & node.position = position);
\end{vdm_al}
{\tt STrees\_IsUnique} returns true if there exists exactly one node at the node's position; that is, a set of nodes is unique if each has a unique position.  Recall that this function was used in the invariant of {\tt STrees\_Tree}.
\\
\begin{vdm_al}

STrees_IsParentOf: set of STrees_Node * STrees_Node * STrees_Node -> bool
STrees_IsParentOf(tree, node1, node2) == 
     STrees_IsRightChildOf(tree, node2, node1) 
          or STrees_IsLeftChildOf(tree, node2, node1)
pre node1 in set tree and node2 in set tree; 

STrees_IsRightChildOf: set of STrees_Node * STrees_Node * STrees_Node -> bool
STrees_IsRightChildOf(tree, node1, node2) ==
     let mk_STrees_Node(-, position1) = node1 in
     let mk_STrees_Node(-, position2) = node2 in
          (position1 = 2*position2 + 1)
pre node1 in set tree and node2 in set tree;

STrees_IsLeftChildOf: set of STrees_Node * STrees_Node * STrees_Node -> bool
STrees_IsLeftChildOf(tree, node1, node2) ==
     let mk_STrees_Node(-, position1) = node1 in
     let mk_STrees_Node(-, position2) = node2 in
          (position1 = 2*position2)
pre node1 in set tree and node2 in set tree;
\end{vdm_al}
The {\tt STrees\_Is...Of} returns true of the first node is the ... of the second node in the tree.
\\
\begin{vdm_al}

STrees_Insert: STrees_Info * STrees_Data * STrees_Direction -> STrees_Info
STrees_Insert(mk_STrees_Info(tree, current), data, direction) == 
     cases mk_(current, direction):
          mk_(nil, <ToRoot>)  -> STrees_InsertRoot(data),
          mk_(-, <ToLeft>)    -> STrees_InsertLeft(tree, current, data),

          mk_(-, <ToRight>)   -> STrees_InsertRight(tree, current, data)
     end
pre 
     (direction = <ToRoot> => tree = {}) and
     (direction = <ToLeft> => not STrees_HasLeftChild(tree, current)) and 
     (direction = <ToRight> => not STrees_HasRightChild(tree, current))
post inv_STrees_Info(RESULT);
\end{vdm_al}
{\tt STrees\_Insert} inserts a node containing the data into the tree.  Note that a node can be inserted as the root only if the tree is empty; otherwise, the insertion must be to the right or left of the tree's current node.  Following the insert, the current node becomes the node just inserted.
\\
\begin{vdm_al}

STrees_InsertRoot: STrees_Data -> STrees_Info
STrees_InsertRoot(data) == 
     let root = mk_STrees_Node(data, 1) in
          mk_STrees_Info({root}, root);

STrees_InsertLeft: STrees_Tree * STrees_Node * STrees_Data -> STrees_Info
STrees_InsertLeft(tree, current, data) ==
     let mk_STrees_Node(-, position) = current in 
     let new = mk_STrees_Node(data, 2*position) in
          mk_STrees_Info(tree union {new}, new)
pre not STrees_HasLeftChild(tree, current);

STrees_InsertRight: STrees_Tree * STrees_Node * STrees_Data -> STrees_Info
STrees_InsertRight(tree, current, data) ==
     let mk_STrees_Node(-, position) = current in 
     let new = mk_STrees_Node(data, 2*position + 1) in
          mk_STrees_Info(tree union {new}, new)
pre not STrees_HasRightChild(tree, current);

STrees_Traverse: STrees_Info * (STrees_Data -> STrees_Data) -> STrees_Info
STrees_Traverse(treeinfo, traversal) ==
     let mk_STrees_Info(tree, current) = treeinfo in
          if current <> nil then
               let mk_STrees_Node(data, position) = current in
               let newtree = {mk_STrees_Node(traversal(data), position) | 
                              mk_STrees_Node(data, position) in set tree} in
                    mk_STrees_Info(newtree, 
                         mk_STrees_Node(traversal(data), position))
          else
               treeinfo;
\end{vdm_al}
{\tt STrees\_Traverse} applies the function {\tt traversal} to the data of each node in the tree.\\
\begin{vdm_al}

STrees_MoveInDir: STrees_Info * STrees_Direction -> STrees_Info
STrees_MoveInDir(mk_STrees_Info(tree, current), direction) ==
     cases direction:
          <ToRoot>  -> mk_STrees_Info(tree, STrees_Root(tree)),
          <ToLeft>  -> mk_STrees_Info(tree, STrees_LeftChild(tree, current)),
          <ToRight> ->  mk_STrees_Info(tree, STrees_RightChild(tree, current))
 end
pre STrees_ExistsDirection(mk_STrees_Info(tree, current), direction);

\end{vdm_al}
{\tt STrees\_MoveInDir} moves the current node in the direction specified.  Movement can be to the root or to the right or left of the current node.  Note that there must be a node in the direction the current node is moving.\\
\begin{vdm_al}

STrees_MoveToNode: STrees_Info * nat1 -> STrees_Info
STrees_MoveToNode(mk_STrees_Info(tree, current), position) ==
     mk_STrees_Info(tree, STrees_GetNode(tree, position))
pre STrees_ExistsNode(mk_STrees_Info(tree, current), position);
\end{vdm_al}
{\tt STrees\_MoveToNode} moves the current node to the node at position {\tt position}.  Of course, the node at the position must already exist in the tree.
\\
\begin{vdm_al}

STrees_MoveToParent: STrees_Info -> STrees_Info
STrees_MoveToParent(mk_STrees_Info(tree, current)) ==
     mk_STrees_Info(tree, STrees_Parent(tree, current))
pre not STrees_IsRoot(tree, current);
\end{vdm_al}
{\tt STrees\_MoveToParent} moves the current node to the parent of the current node.  Of course, the current node must not already be at the root.
\\
\begin{vdm_al}

STrees_MoveToAnscestor: STrees_Info * nat1 -> STrees_Info 
STrees_MoveToAnscestor(treeinfo, pathlength) ==
  if pathlength > 1 
  then STrees_MoveToAnscestor(STrees_MoveToParent(treeinfo), pathlength - 1)
  else STrees_MoveToParent(treeinfo)
pre pre_STrees_MoveToParent(treeinfo);

\end{vdm_al}
{\tt STrees\_MoveToAnscestor} basically calls {\tt MoveToParent} {\tt pathlength} times.
\\
\begin{vdm_al}

STrees_Root: STrees_Tree -> STrees_Node
STrees_Root(tree) ==
  iota root in set tree & STrees_IsRoot(tree, root)
pre tree <> {};

STrees_Parent: STrees_Tree * STrees_Node -> STrees_Node
STrees_Parent(tree, node) == 
  iota parent in set tree 
       & STrees_IsParentOf(tree, parent, node)
pre node in set tree and not STrees_IsRoot(tree, node);

STrees_LeftChild: STrees_Tree * STrees_Node -> STrees_Node
STrees_LeftChild(tree, parent) ==
  iota leftchild in set tree & 
       STrees_IsLeftChildOf(tree, leftchild, parent)
pre parent in set tree and STrees_HasLeftChild(tree, parent);

STrees_RightChild: STrees_Tree * STrees_Node -> STrees_Node
STrees_RightChild(tree, parent) ==
  iota rightchild in set tree & 
       STrees_IsRightChildOf(tree, rightchild, parent)
pre parent in set tree and STrees_HasRightChild(tree, parent); 

STrees_GetNode: STrees_Tree * nat1 -> STrees_Node
STrees_GetNode(tree, position) ==
  iota node in set tree & node.position = position
pre exists node in set tree & node.position = position; 
\end{vdm_al}
{\tt STrees\_GetNode} returns the node at position {\tt position} in the tree.
\\
\begin{vdm_al}

STrees_GetData: STrees_Info * nat1 -> STrees_Data
STrees_GetData(mk_STrees_Info(tree, current), position) ==
     let mk_STrees_Node(data, -) = STrees_GetNode(tree, position) in 
          data
pre STrees_ExistsNode(mk_STrees_Info(tree, current), position);
\end{vdm_al}
{\tt STrees\_GetData} returns the data stored in the node at the {\tt position}.
\\
\begin{vdm_al}

STrees_StoreCurrentData: STrees_Info * STrees_Data -> STrees_Info

STrees_StoreCurrentData(mk_STrees_Info(tree, current), data) ==
     let mk_STrees_Node(-, position) = current in
     let newcurrent = mk_STrees_Node(data, position) in 
          mk_STrees_Info((tree\{current}) union {newcurrent}, newcurrent)
pre current <> nil;
\end{vdm_al}
{\tt STrees\_StoreCurrentData} updates the data stored by the current node.
\\
\begin{vdm_al}

STrees_GetCurrentData: STrees_Info -> STrees_Data
STrees_GetCurrentData(mk_STrees_Info(tree, mk_STrees_Node(data, -))) == data
pre tree <> {};
\end{vdm_al}
{\tt STrees\_GetCurrentData} retrieves the data stored by the current node. 
\\
\begin{vdm_al}

STrees_Size: STrees_Info -> nat
STrees_Size(mk_STrees_Info(tree, -)) == card tree;
\end{vdm_al}
{\tt STrees\_Size} returns the number of nodes in the tree.
\\
\begin{vdm_al}

STrees_GetCurrentNode: STrees_Info -> STrees_Node
STrees_GetCurrentNode(mk_STrees_Info(-, current)) == current;

STrees_SetCurrentNode: STrees_Info * STrees_Node -> STrees_Info
STrees_SetCurrentNode(mk_STrees_Info(tree, -), newcurrent) == 
     mk_STrees_Info(tree, newcurrent)
pre newcurrent in set tree;
\end{vdm_al}
The {\tt STrees\_...CurrentNode} functions return the current node and supply a new current node respectively.  "Setting the current node" means to move the current node to a another node in the tree.
\\
\begin{vdm_al}

STrees_HasLeftChild: STrees_Tree * STrees_Node -> bool
STrees_HasLeftChild(tree, parent) ==
     exists1 child in set tree 
          & STrees_IsLeftChildOf(tree, child, parent)
pre parent in set tree;

STrees_HasRightChild: STrees_Tree * STrees_Node -> bool
STrees_HasRightChild(tree, parent) ==

     exists1 child in set tree
          & STrees_IsRightChildOf(tree, child, parent)
pre parent in set tree;
\end{vdm_al}
The {\tt STrees\_Has...Child} functions return true if the given node has the corresponding child (left or right child) in the tree; otherwise, they return false.  
\\
\begin{vdm_al}

STrees_InOrderPredecessor: STrees_Tree * STrees_Node -> STrees_Node
STrees_InOrderPredecessor(tree, node) ==
     let leftchild = STrees_LeftChild(tree, node) in
     let left = STrees_Subtree(tree, leftchild) in 
     let rightpath = {n | n in set left 
             & (exists p in set {0, ..., card left} 
               & n.position 
			= (leftchild.position + 1)*2**p - 1)} in
          iota pred in set rightpath 
                    & (forall n in set rightpath & n.position <= pred.position)
pre node in set tree and STrees_HasLeftChild(tree, node);
\end{vdm_al}
{\tt STrees\_InOrderPredecessor} returns the in-order predecessor of the input node.  In other words, it returns the rightmost node in the left subtree of the input node.  The method by which the predecessor position is found is described at the beginning of this section.  From that description, notice that $p$, when it is found, will indicate the number of levels the node $pred$ is below the node $leftchild$.  Also recall that in the earlier discussion $p$ was said to be a natural number.  Here, however, $p$ is said only to be in the set $\{0, ..., card\ left\}$.  The reason for this difference is that the toolbox interpreter cannot search infinite sets such as the natural numbers; hence, we must supply a finite set.  This finite set is sufficient because the number of levels in any subtree is less than or equal to the number of elements in the subtree.  Thus, necessarily $p \leq card\ left$.
\\
\begin{vdm_al}

STrees_Delete: STrees_Info -> STrees_Info
STrees_Delete(mk_STrees_Info(tree, current)) ==
  let old = STrees_Subtree(tree, current) 
  in
   if STrees_HasRightChild(tree, current) and 
      STrees_HasLeftChild(tree, current) 
   then let leftchild = STrees_LeftChild(tree, current),
            rightchild = STrees_RightChild(tree, current),
            left = STrees_Subtree(old, leftchild), 
            mk_STrees_Node(-, position) = 
                STrees_InOrderPredecessor(old, current), 
            newright = STrees_MoveSubtree(old, rightchild, 
                                          2*position + 1), 
            newleft = left union newright,
            new = STrees_MoveSubtree(newleft, STrees_Root(newleft), 
                                     current.position) 
        in
          mk_STrees_Info((tree \ old) union new, STrees_Root(new))
   elseif STrees_HasLeftChild(tree, current) 
   then let leftchild = STrees_LeftChild(tree, current),
            new = STrees_MoveSubtree(old, leftchild, current.position) 
        in
          mk_STrees_Info((tree \ old) union new, STrees_Root(new)) 
   elseif STrees_HasRightChild(tree, current) 
   then let rightchild = STrees_RightChild(tree, current),
            new = STrees_MoveSubtree(old, rightchild, current.position)
        in
          mk_STrees_Info((tree \ old) union new, STrees_Root(new))

     else 
          mk_STrees_Info(tree \ {current}, STrees_Parent(tree, current))
pre current <> nil
post inv_STrees_Info(RESULT);
\end{vdm_al}
{\tt Delete} removes the current node from the tree.  Removal can be viewed in four different cases.  The first case is when the current node has both children.  In that case the current node is removed and the left child takes its place.  The right child becomes the right child of the current node's in-order predecessor.  The second case is when the current node has only the left child.  In that case, the current node is replaced by the left child.  The third case is when the current node has only the right child.  In that case, the current node is replaced by the right child.  The last case is when the current node has no children in which case the current node is removed and the new current node becomes its parent. Note that when the left child is moved, the entire left subtree must be moved.  The same is true for the right child.
\\
\begin{vdm_al}

STrees_Subtree: STrees_Tree * STrees_Node -> STrees_Tree
STrees_Subtree(tree, mk_STrees_Node(rootdata, rootpos)) ==
     {mk_STrees_Node(d, p) | mk_STrees_Node(d, p) in set tree 
          & (exists1 n in set {0, ..., card tree} 
               & p >= rootpos*2**n and p < (rootpos + 1)*2**n)}
pre mk_STrees_Node(rootdata, rootpos) in set tree;
\end{vdm_al}
{\tt STrees\_Subtree} returns the subtree of the input node.  To understand the formulas, refer to the beginning of this section.  To understand why $n$ is said be in the set $\{0, ..., card\ tree\}$ refer to previous discussion for {\tt STrees\_InOrderPredecessor}.
\\
\begin{vdm_al}

STrees_MoveSubtree:  STrees_Tree * STrees_Node * nat1 -> STrees_Tree
STrees_MoveSubtree(tree, subtreeRoot, newRootPos) ==
     let subtree = STrees_Subtree(tree, subtreeRoot), 
               mk_STrees_Node(-, oldRootPos) = subtreeRoot in
          {STrees_MoveNode(tree, node, oldRootPos, newRootPos) 
          | node in set subtree} 
pre subtreeRoot in set tree;
\end{vdm_al}
{\tt STrees\_MoveSubtree} moves the subtree found in {\tt tree} whose root is {\tt subtreeRoot}.  The subtree is moved so that the new position of its root is {\tt newRootPos}.  \\
NOTE:  This function is specified specifically to be used in {\tt STrees\_Delete}.  In the interests of simplicity in {\tt STrees\_Delete}, this function does not return a modified {\tt tree}.  Instead, it returns \emph{only} the transplanted subtree.
\\
\begin{vdm_al}

STrees_MoveNode: STrees_Tree * STrees_Node * nat1 * nat1 -> STrees_Node
STrees_MoveNode(tree, mk_STrees_Node(d, p), oldRootPos, newRootPos) ==

     let n = (iota n in set {0, ..., card tree} 
               & p >= oldRootPos*2**n and p < (oldRootPos + 1)*2**n) in
          mk_STrees_Node(d, newRootPos*2**n + p - oldRootPos*2**n);
\end{vdm_al}
{\tt STrees\_MoveNode} moves the input node in such a way that its new position has the same relationship to {\tt newRootPos} as its old position had to {\tt oldRootPos}.  To understand why $n$ is said to be in the finite set $\{0, ..., card\ tree\}$ refer to the previous discussion about {\tt STrees\_InOrderPredecessor}.
\\
\begin{vdm_al}

STrees_ExistsData: STrees_Info * STrees_Data -> bool
STrees_ExistsData(mk_STrees_Info(tree, -), data) ==
     exists node in set tree & node.data = data;
\end{vdm_al}
{\tt STrees\_ExistsData} returns true if there is a node in the tree which stores {\tt data}; otherwise it returns false. 
\\
\begin{vdm_al}

STrees_ExistsNode: STrees_Info * nat1 -> bool
STrees_ExistsNode(mk_STrees_Info(tree, -), position) ==
     exists node in set tree & node.position = position;
\end{vdm_al}
{\tt STrees\_ExistsNode} returns true if there is node at position {\tt position} in the tree; otherwise it returns false.
\\
\begin{vdm_al}

STrees_ExistsDirection: STrees_Info * STrees_Direction -> bool
STrees_ExistsDirection(mk_STrees_Info(tree, current), direction) ==
     cases direction: 
          <ToRoot>  -> (tree <> {}),
          <ToLeft>  -> 
               if current <> nil then 
                    STrees_HasLeftChild(tree, current) 
               else false,
          <ToRight> -> 
               if current <> nil then 
                    STrees_HasRightChild(tree, current) 
               else false
     end;
\end{vdm_al}
{\tt STrees\_ExistsDirection} returns true if a node exists in the indicated direction.\\

\subsection{Binary Tree Based on Links}

This section specifies a binary tree much like one would in Modula-2.   In other words, in contrast to the other binary tree, this tree uses dynamic links and memory allocation and deallocation.  Thus, just as the singly and doubly linked list operations contained checking for correct memory allocation and deallocation in their post-conditions, so do the operations in this section.  The purpose for the first binary tree specification is to provide additional post-condition checking for the operations in this section.  Similar to the way the lists were translated into sequences, the binary tree in this section will be translated into the binary tree based on sets and the results compared. \\

The following data types are exported:
\begin{itemize}
\item {\tt Trees\_Direction}
\item {\tt Trees\_Tree}
\item {\tt Trees\_Data}
\end{itemize}
The following functions are exported:
\begin{itemize}
\item {\tt Trees\_Set}
\item {\tt Trees\_Init}
\end{itemize}
The following operations are exported:
\begin{itemize}
\item {\tt Trees\_Delete}
\item {\tt Trees\_ExistsData}
\item {\tt Trees\_ExistsDirection}
\item {\tt Trees\_GetCurrentData}
\item {\tt Trees\_Insert}
\item {\tt Trees\_MoveInDir}
\item {\tt Trees\_MoveToParent}
\item {\tt Trees\_Size}
\item {\tt Trees\_StoreCurrentData}
\item {\tt Trees\_Traverse}
\end{itemize}
\begin{vdm_al}
types Trees_Data = Data
\end{vdm_al}
{\tt Trees\_Data} acts as the generic parameter for `module' {\tt Trees}.  
\\
\begin{vdm_al}

types
Trees_Direction = STrees_Direction;

Trees_Tree ::
     treePtr: Nodes_NodePtr
     current: Nodes_NodePtr
\end{vdm_al}
{\tt Trees\_Tree} consists of a pointer to the root, {\tt treePtr}, and a pointer to the current node, {\tt current}.
\\
\begin{vdm_al}


functions
Trees_Position: Heaps_Heap * Nodes_NodePtr -> nat1
Trees_Position(heap, child) == 
     let parent = Nodes_GetParent(Heaps_Retrieve(heap, child)) in
          if parent = NIL then
               1
          elseif Trees_IsRightChildOf(heap, child, parent) then
               2*Trees_Position(heap, parent) + 1
          else 
               2*Trees_Position(heap, parent)
pre child <> NIL; 
\end{vdm_al}
{\tt Trees\_Position} returns the position of the node pointed to by {\tt child}.  This is necessary for translating the `linked tree' to the `set tree'.
\\
\begin{vdm_al}

Trees_Set: Heaps_Heap * Trees_Tree -> STrees_Info
Trees_Set(heap, mk_Trees_Tree(treePtr, current)) == 

     if treePtr <> NIL then
          let treeset = STrees_MkTree(Trees_SubtreeToSet(heap, treePtr, 1)) in
          let data = Nodes_GetData(Heaps_Retrieve(heap, current)) in
          let position = Trees_Position(heap, current) in
          let currentnode = STrees_MkNode(data, position) in
          STrees_MkInfo(treeset, currentnode)
     else STrees_Init();
\end{vdm_al}
{\tt Trees\_Set} translates the `linked tree' to the `set tree' to aid in post-condition checking later on.  It begins by creating the set of nodes using {\tt Trees\_SubtreeToSet} and then constructing the current node from the current pointer.  It finishes by returning a `set tree'. \\
\\
The argument `1' in the call to {\tt Trees\_SubtreeToSet} at the beginning of {\tt Trees\_Set} means that the root position is `1'.  {\tt Trees\_SubtreeToSet} uses this number to construct all of the other node positions.
\\
\begin{vdm_al}

Trees_SubtreeToSet: Heaps_Heap * Nodes_NodePtr * nat1 -> set of STrees_Node
Trees_SubtreeToSet(heap, subtree, position) ==
  if subtree <> NIL 
  then {STrees_MkNode(Nodes_GetData(Heaps_Retrieve(heap, subtree)), position)}
       union Trees_SubtreeToSet(heap, 
       Nodes_GetLeft(
			Heaps_Retrieve(heap, subtree)), 2*position)
       union Trees_SubtreeToSet(heap, 
               Nodes_GetRight(
		          Heaps_Retrieve(heap, subtree)), 2*position + 1)
     else {};
\end{vdm_al}
{\tt Trees\_SubtreeToSet} creates a set of nodes from the input subtree.  It does this recursively first by adding the subtree root to the set and then by adding the left and right subtrees to the set.  The input value {\tt position} refers to the position of the subtree root.  Thus the positions of its children are $2position$ and $2position + 1$ respectively. 
\\
\begin{vdm_al}

Trees_HasLeftChild: Heaps_Heap * Nodes_NodePtr -> bool
Trees_HasLeftChild(heap, ptr) ==
     if ptr <> NIL then 
          Nodes_GetLeft(Heaps_Retrieve(heap, ptr)) <> NIL
     else false
pre ptr <> NIL => pre_Heaps_Retrieve(heap, ptr);

Trees_HasRightChild: Heaps_Heap * Nodes_NodePtr -> bool
Trees_HasRightChild(heap, ptr) ==
     if ptr <> NIL then
          Nodes_GetRight(Heaps_Retrieve(heap, ptr)) <> NIL
     else false

pre ptr <> NIL => pre_Heaps_Retrieve(heap, ptr);

Trees_IsRightChildOf: Heaps_Heap * Nodes_NodePtr * Nodes_NodePtr -> bool
Trees_IsRightChildOf(heap, child, parent) ==
     child = Nodes_GetRight(Heaps_Retrieve(heap, parent))
     and parent = Nodes_GetParent(Heaps_Retrieve(heap, child))
pre pre_Heaps_Retrieve(heap, parent) 
	and pre_Heaps_Retrieve(heap, child);

Trees_IsLeftChildOf: Heaps_Heap * Nodes_NodePtr * Nodes_NodePtr -> bool
Trees_IsLeftChildOf(heap, child, parent) ==
     child = Nodes_GetLeft(Heaps_Retrieve(heap, parent))
     and parent = Nodes_GetParent(Heaps_Retrieve(heap, child))
pre pre_Heaps_Retrieve(heap, parent) 
	and pre_Heaps_Retrieve(heap, child);

Trees_IsRoot: Heaps_Heap * Nodes_NodePtr -> bool
Trees_IsRoot(heap, ptr) == Nodes_GetParent(Heaps_Retrieve(heap, ptr)) = NIL
pre ptr <> NIL;

Trees_Init: () -> Trees_Tree
Trees_Init() == mk_Trees_Tree(NIL, NIL);

operations
Trees_Insert: Trees_Tree * Trees_Data * Trees_Direction ==> Trees_Tree
Trees_Insert(tree, data, direction) ==
 cases direction: 
   <ToRoot>  -> return  Trees_InsertRoot(data), 
   <ToLeft>  -> return  Trees_InsertLeft(tree, data),
   <ToRight> -> return  Trees_InsertRight(tree, data)
end
pre Heaps_Available(heap) and
    let mk_Trees_Tree(treePtr, current) = tree 
    in 
      (direction = <ToRoot> => treePtr = NIL) and
      (direction = <ToRight> => not Trees_HasRightChild(heap, current)) and
      (direction = <ToLeft> => not Trees_HasLeftChild(heap, current))
post Heaps_AmountUsed(heap~) + 1 = Heaps_AmountUsed(heap) and 
     let old = Trees_Set(heap~, tree) in
     	STrees_Insert(old, data, direction) = Trees_Set(heap, RESULT);

Trees_InsertRoot: Trees_Data ==> Trees_Tree
Trees_InsertRoot(data) ==
(dcl newTreePtr: Nodes_NodePtr := NEW(Nodes_MkBinaryTree(data, NIL, NIL, NIL)); 
 return mk_Trees_Tree(newTreePtr, newTreePtr);
);

Trees_InsertLeft: Trees_Tree * Trees_Data ==> Trees_Tree
Trees_InsertLeft(mk_Trees_Tree(treePtr, current), data) ==
(dcl new: Nodes_NodePtr := NEW(Nodes_MkBinaryTree(data, NIL, NIL, current)); 
 SET_LEFT(current, new);
 return mk_Trees_Tree(treePtr, new);
);

Trees_InsertRight: Trees_Tree * Trees_Data ==> Trees_Tree
Trees_InsertRight(mk_Trees_Tree(treePtr, current), data) ==
(dcl new: Nodes_NodePtr := NEW(Nodes_MkBinaryTree(data, NIL, NIL, current));
 SET_RIGHT(current, new);
 return mk_Trees_Tree(treePtr, new);
);

Trees_InOrderPredecessor: Nodes_NodePtr ==> Nodes_NodePtr
Trees_InOrderPredecessor(ptr) ==
(dcl pred: Nodes_NodePtr := LEFT(ptr);
 while Trees_HasRightChild(heap, pred) do
    pred := RIGHT(pred);
 return pred;   
)
pre Trees_HasLeftChild(heap, ptr);

Trees_Delete: Trees_Tree  ==> Trees_Tree
Trees_Delete(mk_Trees_Tree(treePtr, current)) ==
(    dcl  hasLeftChild: bool := Trees_HasLeftChild(heap, current),
          hasRightChild: bool := Trees_HasRightChild(heap, current),
          newcurrent: Nodes_NodePtr,
          newtree: Nodes_NodePtr := treePtr,
          parent: Nodes_NodePtr := PARENT(current),
          newchild: Nodes_NodePtr;

     if hasLeftChild or hasRightChild then 
     (    if hasLeftChild then
          (    newcurrent := LEFT(current);
               if hasRightChild then
               (    dcl right: Nodes_NodePtr := RIGHT(current),
                     pred :Nodes_NodePtr := Trees_InOrderPredecessor(current);
                    SET_PARENT(right, pred);
                    SET_RIGHT(pred, right);
               );
          )
          else 
               newcurrent := RIGHT(current);

          newchild := newcurrent;
          SET_PARENT(newcurrent, parent);
     )
     else
     (    newcurrent := parent;
          newchild := NIL;
     );

     if Trees_IsRoot(heap, current) then 
          newtree := newchild
     elseif Trees_IsRightChildOf(heap, current, parent) then
          SET_RIGHT(parent, newchild)
     else
          SET_LEFT(parent, newchild);

     DISPOSE(current);
     return mk_Trees_Tree(newtree, newcurrent);
)
pre treePtr <> NIL
post Heaps_AmountUsed(heap~) = Heaps_AmountUsed(heap) + 1 and
     let old = Trees_Set(heap~, mk_Trees_Tree(treePtr, current)) in
          STrees_Delete(old) = Trees_Set(heap, RESULT);
\end{vdm_al}
{\tt Trees\_Delete} is significantly different from its counterpart in the previous section.  Here, a deletion is divided into 12 cases.  First there are the four cases based on the current node's children.  These are the same four cases used in the previous section's delete.  Then, because the this tree is based on links, each of the four cases must be divided three further ways.  The first is when the current node is the root, the second when the current node is a right child and the third when the current node is a left child.  In the previous section, the delete did not have to be concerned about the current node's relationship to its parent because moving a child around did not affect the parent in any way.  In this case, because the parent has links to its children, they must be modified when the child is removed and/or replaced.
\\
\begin{vdm_al}

Trees_SearchSubtree: Nodes_NodePtr * Trees_Data ==> bool
Trees_SearchSubtree(subtree, dataToFind) ==
(    
     if subtree <> NIL then
     (    def data = DATA(subtree) in
          if data = dataToFind then
               return true
          else 
               return Trees_SearchSubtree(RIGHT(subtree), dataToFind)         
                    or Trees_SearchSubtree(LEFT(subtree), dataToFind)
     )

     else return false
);
\end{vdm_al}
{\tt Trees\_SearchSubtree} is used by {\tt Trees\_ExistData} to recursively search for data in the tree.
\\
\begin{vdm_al}
           
Trees_ExistsData: Trees_Tree * Trees_Data ==> bool
Trees_ExistsData(tree, data) == Trees_SearchSubtree(tree.treePtr, data)
post STrees_ExistsData(Trees_Set(heap, tree), data) = RESULT;

Trees_ExistsDirection: Trees_Tree * Trees_Direction ==> bool
Trees_ExistsDirection(tree, direction) == 
     cases direction:
          <ToRoot>  -> return tree.treePtr <> NIL,
          <ToLeft>  -> 
               return tree.current <> NIL 
                    and Trees_HasLeftChild(heap, tree.current),
          <ToRight> -> 
               return tree.current <> NIL 
                    and Trees_HasRightChild(heap, tree.current)
     end
post STrees_ExistsDirection(Trees_Set(heap, tree), direction) 
		= RESULT;


Trees_GetCurrentData: Trees_Tree ==> Trees_Data
Trees_GetCurrentData(tree) == DATA(tree.current)
pre tree.treePtr <> NIL
post STrees_GetCurrentData(Trees_Set(heap, tree)) = RESULT;

Trees_StoreCurrentData: Trees_Tree * Trees_Data ==> Trees_Tree
Trees_StoreCurrentData(tree, data) == 
(    SET_DATA(tree.current, data);
     return tree;
)
pre tree.treePtr <> NIL
post STrees_StoreCurrentData(Trees_Set(heap~, tree), data)
     = Trees_Set(heap, RESULT);

Trees_MoveInDir: Trees_Tree * Trees_Direction ==> Trees_Tree
Trees_MoveInDir(tree, direction) == 
     cases direction:
          <ToRoot> -> return mk_Trees_Tree(tree.treePtr, tree.treePtr),
          <ToLeft> -> return mk_Trees_Tree(tree.treePtr, LEFT(tree.current)),
          <ToRight> -> return mk_Trees_Tree(tree.treePtr, RIGHT(tree.current))

     end
pre tree.treePtr <> NIL 
     and (direction = <ToLeft> => Trees_HasLeftChild(heap, tree.current)) 
     and (direction = <ToRight> => Trees_HasRightChild(heap, tree.current))
post STrees_MoveInDir(Trees_Set(heap~, tree), direction)
     = Trees_Set(heap, RESULT); 
     

Trees_MoveToParent: Trees_Tree ==> Trees_Tree
Trees_MoveToParent(tree) ==
     return mk_Trees_Tree(tree.treePtr, PARENT(tree.current))
pre not Trees_IsRoot(heap, tree.current)
post STrees_MoveToParent(Trees_Set(heap~, tree)) 
     = Trees_Set(heap, RESULT); 

Trees_Size: Trees_Tree ==> nat
Trees_Size(tree) == Trees_SubtreeSize(tree.treePtr)
post STrees_Size(Trees_Set(heap~, tree)) = RESULT;

Trees_SubtreeSize: Nodes_NodePtr ==> nat
Trees_SubtreeSize(subtree) ==
     if subtree <> NIL then
          return 
               1 
               + Trees_SubtreeSize(RIGHT(subtree)) 
               + Trees_SubtreeSize(LEFT(subtree))
     else return 0;

\end{vdm_al}
{\tt Trees\_SubtreeSize} is used by {\tt Trees\_Size} to recursively discover how many nodes are in the tree.
\\
\begin{vdm_al}

Trees_Traverse: Trees_Tree * (Trees_Data -> Trees_Data) ==> Trees_Tree
Trees_Traverse(tree, traversal) == 
(    Trees_TraverseSubtree(tree.treePtr, traversal);
     return tree;
)
post STrees_Traverse(Trees_Set(heap~, tree), traversal)
     = Trees_Set(heap, RESULT);

Trees_TraverseSubtree: Nodes_NodePtr * (Trees_Data -> Trees_Data) ==> ()
Trees_TraverseSubtree(subtree, traversal) ==
     if subtree <> NIL then
     (    SET_DATA(subtree, traversal(DATA(subtree)));

          Trees_TraverseSubtree(LEFT(subtree), traversal);
          Trees_TraverseSubtree(RIGHT(subtree), traversal);
     );
\end{vdm_al}
{\tt Trees\_TraverseSubtree} is used by {\tt Trees\_Traverse} to recursively apply the function {\tt traversal} to each node's data.\\

\subsection{Hard Hat Area Only! Heavy Duty Testing in Progress}
This section tests the singly-linked list, the doubly linked list, the `set tree' and the `link tree'. \\
\\
The following is  the global state for the entire specification.  It contains a system heap, a singly-linked list, a queue, a stack, a doubly-linked list, a `set tree' and a `link tree'.  All of these are necessary for testing.\\
\\
\begin{vdm_al}
     state SystemState of
          heap: Heaps_Heap
          slist: SList_List
          charQueue: Queues_Queue
          charStack: Stacks_Stack
          dlist: DList_List
          charTree: Trees_Tree
          stree: STrees_Info
     init s == s = mk_SystemState(
               Heaps_Init(), 
               SList_Init(), 
               Queues_Init(), 
               Stacks_Init(), 
               DList_Init(), 
               Trees_Init(), 
               STrees_Init()) 
     end

 
types Data = char;
\end{vdm_al}
{\tt Data} is the type used to test all of the data structures.  Recall that each data structure set its generic data parameter to {\tt Data}. 
\\
\begin{vdm_al}

operations

TestSList: () ==> bool

TestSList() ==
(
     slist := SList_Insert(slist, 'b', 1);
     slist := SList_Update(slist, 'a', 1);
     slist := SList_Delete(slist, 1);   
          
     slist := SList_Insert(slist, 'a', 1);
     slist := SList_Insert(slist, 'b', 2);
     slist := SList_Update(slist, 'c', 2);
     slist := SList_Delete(slist, 2);

     slist := SList_Insert(slist, 'b', 2);
     slist := SList_Insert(slist, 'c', 3);
     slist := SList_Update(slist, 'd', 2);
     slist := SList_Update(slist, 'b', 3);
     slist := SList_Delete(slist, 2);

     slist := SList_Append(slist, 'c');
     slist := SList_Delete(slist, 1);
     slist := SList_Insert(slist, 'a', 1);

     slist := SList_Insert(slist, 'f', 4);
     slist := SList_Insert(slist, 'd', 4);
     slist := SList_Append(slist, 'g');
     slist := SList_Insert(slist, 'e', 5);
     slist := SList_Append(slist, 'h');
     slist := SList_Append(slist, 'i');
     slist := SList_Append(slist, 'j');
     slist := SList_Delete(slist, 10);
     return [SList_Element(slist, i)| i in set {1, ..., 9}] = "abcdefghi";
);
\end{vdm_al}
{\tt TestSList} tests much of the singly-linked list.  When it is done, if the resulting list translated into a sequence is equal to the predicted result ``abcdefghi'', then it returns true; otherwise, it returns false.  
\\
\begin{vdm_al}

TestDList: () ==> bool
TestDList() ==
(
     dlist := DList_Insert(dlist, 'b', 1);
     dlist := DList_Update(dlist, 'a', 1);
     dlist := DList_Delete(dlist, 1);   

     dlist := DList_Insert(dlist, 'a', 1);

     dlist := DList_Insert(dlist, 'b', 2);
     dlist := DList_Update(dlist, 'c', 2);
     dlist := DList_Delete(dlist, 2);

     dlist := DList_Insert(dlist, 'b', 2);
     dlist := DList_Insert(dlist, 'c', 3);
     dlist := DList_Update(dlist, 'd', 2);
     dlist := DList_Update(dlist, 'b', 3);
     dlist := DList_Delete(dlist, 2);

     dlist := DList_Append(dlist, 'c');
     dlist := DList_Delete(dlist, 1);
     dlist := DList_Insert(dlist, 'a', 1);

     dlist := DList_Insert(dlist, 'f', 4);
     dlist := DList_Insert(dlist, 'd', 4);
     dlist := DList_Append(dlist, 'g');
     dlist := DList_Insert(dlist, 'e', 5);
     dlist := DList_Append(dlist, 'h');
     dlist := DList_Append(dlist, 'i');
     dlist := DList_Append(dlist, 'j');
     dlist := DList_Delete(dlist, 10);
     return [DList_Element(dlist, i)| i in set {1, ..., 9}] = "abcdefghi";
);
\end{vdm_al}
{\tt TestDList} tests the doubly-linked list exactly the same way {\tt TestSList} tests the singly-linked list.\\
\\
The following definitions are temporary predicted results for the testing applied to the `set binary tree'.  These three predicted tree states are constructed as constant values and compared to the actual tree states during the testing.
\\
\begin{vdm_al}

values
 
InsertResult = STrees_MkTree(
          { 
                    STrees_MkNode('a', 1), 
                    STrees_MkNode('b', 2),
                    STrees_MkNode('c', 3),
                    STrees_MkNode('d', 4),
                    STrees_MkNode('e', 5),
                    STrees_MkNode('f', 6),
                    STrees_MkNode('g', 7),
                    STrees_MkNode('h', 8),

                    STrees_MkNode('i', 9),
                    STrees_MkNode('j', 10),
                    STrees_MkNode('k', 11),
                    STrees_MkNode('l', 12),
                    STrees_MkNode('m', 13),
                    STrees_MkNode('n', 14),
                    STrees_MkNode('o', 15),
                    STrees_MkNode('p', 16),
                    STrees_MkNode('q', 17),
                    STrees_MkNode('r', 18),
                    STrees_MkNode('s', 19),
                    STrees_MkNode('t', 20),
                    STrees_MkNode('u', 21),
                    STrees_MkNode('v', 22),
                    STrees_MkNode('w', 23),
                    STrees_MkNode('x', 24),
                    STrees_MkNode('y', 25),
                    STrees_MkNode('z', 26)
          });

DeleteResult = STrees_MkTree(
          { 
               STrees_MkNode('a', 1), 
                    STrees_MkNode('d', 2),
                    STrees_MkNode('c', 3),
                    STrees_MkNode('h', 4),
                    STrees_MkNode('i', 5),
                    STrees_MkNode('f', 6),
                    STrees_MkNode('o', 7),
                    STrees_MkNode('p', 8),
                    STrees_MkNode('r', 10),
                    STrees_MkNode('s', 11),
                    STrees_MkNode('l', 12),
                    STrees_MkNode('z', 13),
                    STrees_MkNode('j', 23),
                    STrees_MkNode('x', 24),
                    STrees_MkNode('y', 25),
                    STrees_MkNode('t', 46),
                    STrees_MkNode('u', 47),
                    STrees_MkNode('k', 95),
                    STrees_MkNode('v', 190),
                    STrees_MkNode('w', 191)
          });

TraverseResult = STrees_MkTree(
          { 

               STrees_MkNode('a', 1), 
                    STrees_MkNode('a', 2),
                    STrees_MkNode('a', 3),
                    STrees_MkNode('a', 4),
                    STrees_MkNode('a', 5),
                    STrees_MkNode('a', 6),
                    STrees_MkNode('b', 7),
                    STrees_MkNode('b', 8),
                    STrees_MkNode('b', 10),
                    STrees_MkNode('b', 11),
                    STrees_MkNode('b', 12),
                    STrees_MkNode('b', 13),
                    STrees_MkNode('a', 23),
                    STrees_MkNode('b', 24),
                    STrees_MkNode('b', 25),
                    STrees_MkNode('b', 46),
                    STrees_MkNode('b', 47),
                    STrees_MkNode('b', 95),
                    STrees_MkNode('b', 190),
                    STrees_MkNode('b', 191)
          });

AlphabetSubset = {'a','b','c','d','e','f','g','h','i','j'};
\end{vdm_al}
{\tt Alphabet Subset} is a constant value used by {\tt Traversal} to test tree traversal.  
\\
\begin{vdm_al}

functions
Traversal: char -> char
Traversal(ch) ==
     if ch in set AlphabetSubset then 'a' else 'b';
\end{vdm_al}
{\tt Traversal} is used to test tree traversal.  When applied to node data it returns either `a' or `b', depending on whether or not the node data value is in {\tt AlphabetSubset} or not.
\\
\begin{vdm_al}

operations

TestSTreesInsert: () ==> bool
TestSTreesInsert() ==
(
     stree := STrees_Insert(stree, 'a', <ToRoot>);
  
     stree := STrees_Insert(stree, 'b', <ToLeft>); 

   
     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'c', <ToRight>); 

     stree := STrees_MoveToParent(stree); 
     stree := STrees_MoveInDir(stree, <ToLeft>);
     stree := STrees_Insert(stree, 'd', <ToLeft>); 

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'e', <ToRight>); 

     stree := STrees_MoveInDir(stree, <ToRoot>); 
     stree := STrees_MoveInDir(stree, <ToRight>);
     stree := STrees_Insert(stree, 'f', <ToLeft>); 

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'g', <ToRight>); 

     stree := STrees_MoveInDir(stree, <ToRoot>); 
     stree := STrees_MoveInDir(stree, <ToLeft>); 
     stree := STrees_MoveInDir(stree, <ToLeft>);
     stree := STrees_Insert(stree, 'h', <ToLeft>); 

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'i', <ToRight>);

     stree := STrees_MoveToAnscestor(stree, 2); 
     stree := STrees_MoveInDir(stree, <ToRight>);
     stree := STrees_Insert(stree, 'j', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'k', <ToRight>);

     stree := STrees_MoveInDir(stree, <ToRoot>); 
     stree := STrees_MoveInDir(stree, <ToRight>); 
     stree := STrees_MoveInDir(stree, <ToLeft>);
     stree := STrees_Insert(stree, 'l', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'm', <ToRight>);

     stree := STrees_MoveToAnscestor(stree, 2); 
     stree := STrees_MoveInDir(stree, <ToRight>);
     stree := STrees_Insert(stree, 'n', <ToLeft>);

     stree := STrees_MoveToParent(stree);

     stree := STrees_Insert(stree, 'o', <ToRight>);

     stree := STrees_MoveInDir(stree, <ToRoot>); 
     stree := STrees_MoveInDir(stree, <ToLeft>); 
     stree := STrees_MoveInDir(stree, <ToLeft>); 
     stree := STrees_MoveInDir(stree, <ToLeft>);
     stree := STrees_Insert(stree, 'p', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'q', <ToRight>);

     stree := STrees_MoveToAnscestor(stree, 2); 
     stree := STrees_MoveInDir(stree, <ToRight>);
     stree := STrees_Insert(stree, 'r', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 's', <ToRight>);

     stree := STrees_MoveToAnscestor(stree, 3); 
     stree := STrees_MoveInDir(stree, <ToRight>); 
     stree := STrees_MoveInDir(stree, <ToLeft>);
     stree := STrees_Insert(stree, 't', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'u', <ToRight>);

     stree := STrees_MoveToAnscestor(stree, 2); 
     stree := STrees_MoveInDir(stree, <ToRight>);
     stree := STrees_Insert(stree, 'v', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'w', <ToRight>);

     stree := STrees_MoveInDir(stree, <ToRoot>); 
     stree := STrees_MoveInDir(stree, <ToRight>); 
     stree := STrees_MoveInDir(stree, <ToLeft>); 
     stree := STrees_MoveInDir(stree, <ToLeft>);
     stree := STrees_Insert(stree, 'x', <ToLeft>);

     stree := STrees_MoveToParent(stree);
     stree := STrees_Insert(stree, 'y', <ToRight>);

     stree := STrees_MoveToAnscestor(stree, 2); 
     stree := STrees_MoveInDir(stree, <ToRight>);
     stree := STrees_Insert(stree, 'z', <ToLeft>);


     return STrees_GetTree(stree) = InsertResult;
);

TestSTreesDelete: () ==> bool
TestSTreesDelete() ==
(
     stree := STrees_MoveToNode(stree, 14);
     stree := STrees_Delete(stree);

     stree := STrees_MoveToNode(stree, 17);
     stree := STrees_Delete(stree);

     stree := STrees_MoveToNode(stree, 13);
     stree := STrees_Delete(stree);

     stree := STrees_MoveToNode(stree, 7);
     stree := STrees_Delete(stree);

     stree := STrees_MoveToNode(stree, 5);
     stree := STrees_Delete(stree);

     stree := STrees_MoveToNode(stree, 2);
     stree := STrees_Delete(stree);
     return STrees_GetTree(stree) = DeleteResult;
);
\end{vdm_al}
The previous two operations,  {\tt TestSTreesInsert} and {\tt TestSTreesDelete} should not be called individually; otherwise, they will not return correct results \footnote{{\tt TestSTreesInsert} assumes that the list is empty and {\tt TestSTreesDelete} assumes that {\tt TestSTreesInsert} was successful.}.  Instead, they should only be called through the operation {\tt TestSTrees} below.
\\
\begin{vdm_al}

TestSTrees: () ==> bool
TestSTrees() ==
(
     if STrees_ExistsDirection(stree, <ToLeft>) then return false;

     if STrees_ExistsDirection(stree, <ToRight>) then return false;

     if not TestSTreesInsert() then return false;

     if not TestSTreesDelete() then return false;

     if not STrees_ExistsData(stree, 'c') then return false;


     if not STrees_ExistsNode(stree, 3) then return false;

     stree := STrees_MoveToNode(stree, 3);
     if not STrees_ExistsDirection(stree, <ToLeft>) then return false;

     if not STrees_ExistsDirection(stree, <ToRight>) then return false;

     if not STrees_ExistsDirection(stree, <ToRoot>) then return false;

     if 'z' <> STrees_GetData(stree, 13) then return false;

     stree := STrees_SetCurrentNode(stree, STrees_MkNode('z', 13));

     if STrees_MkNode('z', 13) <> STrees_GetCurrentNode(stree) 
     then return false;

     stree := STrees_StoreCurrentData(stree, 'Z');
     if 'Z' <> STrees_GetCurrentData(stree) then return false;

     if STrees_Size(stree) <> 20 then return false;

     stree := STrees_Traverse(stree, Traversal);

     return STrees_GetTree(stree) = TraverseResult;
);


\end{vdm_al}
The next three operations are used to test the `link tree'.  Because it's post-conditions rely heavily on the `set tree' operations, if the `set tree' has already been tested then it is not necessary to construct predicted results for the `link tree' test.  In other words, if the `set tree' is free of errors and the following test operations run successfully then we can be reasonably sure that the `link tree' is also free of errors.
\\
\begin{vdm_al}

operations

TestTreesInsert: () ==> ()
TestTreesInsert() ==
(
     charTree := Trees_Insert(charTree, 'a', <ToRoot>);

     charTree := Trees_Insert(charTree, 'b', <ToLeft>); 
 
     charTree := Trees_MoveToParent(charTree);

     charTree := Trees_Insert(charTree, 'c', <ToRight>); 

     charTree := Trees_MoveToParent(charTree); 
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_Insert(charTree, 'd', <ToLeft>); 

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_Insert(charTree, 'e', <ToRight>); 

     charTree := Trees_MoveInDir(charTree, <ToRoot>); 
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_Insert(charTree, 'f', <ToLeft>); 

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_Insert(charTree, 'g', <ToRight>); 

     charTree := Trees_MoveInDir(charTree, <ToRoot>);
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_Insert(charTree, 'h', <ToLeft>);

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_Insert(charTree, 'i', <ToRight>);

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_Insert(charTree, 'j', <ToLeft>);

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_Insert(charTree, 'k', <ToRight>);

     charTree := Trees_MoveInDir(charTree, <ToRoot>); 
     charTree := Trees_MoveInDir(charTree, <ToRight>); 
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_Insert(charTree, 'l', <ToLeft>);

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_Insert(charTree, 'm', <ToRight>);

     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_MoveToParent(charTree);
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_Insert(charTree, 'n', <ToLeft>);

     charTree := Trees_MoveToParent(charTree);

     charTree := Trees_Insert(charTree, 'o', <ToRight>);
);

TestTreesDelete: () ==> ()
TestTreesDelete() ==
(
     charTree := Trees_MoveInDir(charTree, <ToRoot>);
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_Delete(charTree);

     charTree := Trees_Delete(charTree);

     charTree := Trees_MoveInDir(charTree, <ToRoot>);
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_Delete(charTree);

     charTree := Trees_Delete(charTree);

     charTree := Trees_MoveInDir(charTree, <ToRoot>);
     charTree := Trees_MoveInDir(charTree, <ToLeft>);
     charTree := Trees_Delete(charTree);

     charTree := Trees_MoveInDir(charTree, <ToRoot>);
     charTree := Trees_MoveInDir(charTree, <ToRight>);
     charTree := Trees_Delete(charTree);

     charTree := Trees_MoveInDir(charTree, <ToRoot>);
     charTree := Trees_Delete(charTree);
);


TestTrees: () ==> bool
TestTrees() ==
(
     if Trees_ExistsDirection(charTree, <ToLeft>) then return false;

     if Trees_ExistsDirection(charTree, <ToRight>) then return false;      
     TestTreesInsert();
     TestTreesDelete();

     if not Trees_ExistsData(charTree, 'i') then return false;


     if Trees_ExistsDirection(charTree, <ToLeft>) then return false;

     if not Trees_ExistsDirection(charTree, <ToRight>) then return false;

     if not Trees_ExistsDirection(charTree, <ToRoot>) then return false;

     charTree := Trees_StoreCurrentData(charTree, 'Z');
     if 'Z' <> Trees_GetCurrentData(charTree) then return false;

     if Trees_Size(charTree) <> 8 then return false;

     charTree := Trees_Traverse(charTree, Traversal);
     return true;
);

\end{vdm_al}