-- TCErrors: WARNING:5000:18,3 WARNING:5000:24,3 WARNING:5000:32,3 WARNING:5000:38,3 WARNING:5000:46,3 WARNING:5000:58,3 WARNING:5000:61,3 PROOFOBLIGATION: fDIwOjQgUmlzaW5nLChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgMSBpbiBzZXQgaW5kcyB0ZW1wKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDIwOjE0IFJpc2luZywoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogIDUgaW4gc2V0IGluZHMgdGVtcCkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI2OjUgT3ZlckxpbWl0LChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgMSBpbiBzZXQgaW5kcyB0ZW1wKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI2OjIyIE92ZXJMaW1pdCwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogIChub3QgKHRlbXAoMSkgPiA0MDApID0+CiAgICAyIGluIHNldCBpbmRzIHRlbXApKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI3OjUgT3ZlckxpbWl0LChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgKG5vdCAodGVtcCgxKSA+IDQwMCkgPT4KICAgIChub3QgKHRlbXAoMikgPiA0MDApID0+CiAgICAgIDMgaW4gc2V0IGluZHMgdGVtcCkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI3OjIyIE92ZXJMaW1pdCwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogIChub3QgKHRlbXAoMSkgPiA0MDApID0+CiAgICAobm90ICh0ZW1wKDIpID4gNDAwKSA9PgogICAgICAobm90ICh0ZW1wKDMpID4gNDAwKSA9PgogICAgICAgIDQgaW4gc2V0IGluZHMgdGVtcCkpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI4OjUgT3ZlckxpbWl0LChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgKG5vdCAodGVtcCgxKSA+IDQwMCkgPT4KICAgIChub3QgKHRlbXAoMikgPiA0MDApID0+CiAgICAgIChub3QgKHRlbXAoMykgPiA0MDApID0+CiAgICAgICAgKG5vdCAodGVtcCg0KSA+IDQwMCkgPT4KICAgICAgICAgIDUgaW4gc2V0IGluZHMgdGVtcCkpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDM0OjMzIE92ZXJMaW1pdDIsKGZvcmFsbCB0ZW1wOlRlbXBSZWFkICYKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIHRlbXApICYKICAgIGkgaW4gc2V0IGluZHMgdGVtcCkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQwOjUgQ29udE92ZXJMaW1pdCwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogIDEgaW4gc2V0IGluZHMgdGVtcCkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQwOjIzIENvbnRPdmVyTGltaXQsKGZvcmFsbCB0ZW1wOlRlbXBSZWFkICYKICAoKHRlbXAoMSkgPiA0MDApID0+CiAgICAyIGluIHNldCBpbmRzIHRlbXApKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQxOjUgQ29udE92ZXJMaW1pdCwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogICgodGVtcCgxKSA+IDQwMCkgPT4KICAgICgodGVtcCgyKSA+IDQwMCkgPT4KICAgICAgMyBpbiBzZXQgaW5kcyB0ZW1wKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQxOjIzIENvbnRPdmVyTGltaXQsKGZvcmFsbCB0ZW1wOlRlbXBSZWFkICYKICAoKHRlbXAoMSkgPiA0MDApID0+CiAgICAoKHRlbXAoMikgPiA0MDApID0+CiAgICAgICgodGVtcCgzKSA+IDQwMCkgPT4KICAgICAgICA0IGluIHNldCBpbmRzIHRlbXApKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQyOjUgQ29udE92ZXJMaW1pdCwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogICgodGVtcCgxKSA+IDQwMCkgPT4KICAgICgodGVtcCgyKSA+IDQwMCkgPT4KICAgICAgKCh0ZW1wKDMpID4gNDAwKSA9PgogICAgICAgICgodGVtcCg0KSA+IDQwMCkgPT4KICAgICAgICAgIDUgaW4gc2V0IGluZHMgdGVtcCkpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ4OjMzIENvbnRPdmVyTGltaXQyLChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyB0ZW1wKSAmCiAgICBpIGluIHNldCBpbmRzIHRlbXApKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU0OjUgU2FmZSwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogIDMgaW4gc2V0IGluZHMgdGVtcCkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU0OjIyIFNhZmUsKGZvcmFsbCB0ZW1wOlRlbXBSZWFkICYKICA1IGluIHNldCBpbmRzIHRlbXApCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU4OjMgUmFpc2VBbGFybSwoZm9yYWxsIHRlbXA6VGVtcFJlYWQgJgogIGV4aXN0cyBhbGFybTpib29sICYgcG9zdF9SYWlzZUFsYXJtKHRlbXAsIGFsYXJtKSkKLGZ1bmN0aW9uIHNhdGlzZmlhYmlsaXR5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY2OjExIE1peFF1YW50LChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgKGZvcmFsbCBtaW4gaW4gc2V0IHsxLCAuLi4gLDV9ICYKICAgIChmb3JhbGwgaSBpbiBzZXQgezEsIC4uLiAsNX0gJgogICAgICBpIGluIHNldCBpbmRzIHRlbXApKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY2OjIxIE1peFF1YW50LChmb3JhbGwgdGVtcDpUZW1wUmVhZCAmCiAgKGZvcmFsbCBtaW4gaW4gc2V0IHsxLCAuLi4gLDV9ICYKICAgIChmb3JhbGwgaSBpbiBzZXQgezEsIC4uLiAsNX0gJgogICAgICBtaW4gaW4gc2V0IGluZHMgdGVtcCkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw=


--monitor.vdmsl

-- A temperature monitor
-- For Chapter 4 (Logic)

types

  TempRead = seq of int
  inv temp == len temp = 5

functions

-- the last reading in a sample is greater than the first

  Rising: TempRead -> bool
  Rising(temp) ==
   temp(1) < temp(5);

-- there is a reading in excess of 400 degrees

  OverLimit: TempRead -> bool
  OverLimit(temp) ==
    temp(1) > 400 or temp(2) > 400 or 
    temp(3) > 400 or temp(4) > 400 or 
    temp(5) > 400;

-- alternative formulation using a quantified expression

  OverLimit2: TempRead -> bool
  OverLimit2(temp) ==
    exists i in set inds temp & temp(i) > 400;

-- all readings in a sample exceed 400 degrees

  ContOverLimit: TempRead -> bool
  ContOverLimit(temp) ==
    temp(1) > 400 and temp(2) > 400 and 
    temp(3) > 400 and temp(4) > 400 and 
    temp(5) > 400;

-- alternative formulation using a quantified expression

  ContOverLimit2: TempRead -> bool
  ContOverLimit2(temp) ==
    forall i in set inds temp & temp(i) > 400;

-- detecting whether a reactor can be considered safe

  Safe: TempRead -> bool
  Safe(temp) ==
    temp(3) > 400 => temp(5) < 400;

-- detecting whether an alarm should be raised

  RaiseAlarm(temp: TempRead) alarm : bool
  post not Safe(temp) <=> alarm;

  MixQuant: TempRead -> bool
  MixQuant(temp) ==
    exists min in set {1,...,5} &
       forall i in set {1,...,5} &
          i <> min =>
          temp(i) > temp(min)