-- TCErrors: WARNING:5012:37,1 WARNING:5000:100,3 WARNING:5000:117,1 WARNING:5000:156,3 PROOFOBLIGATION: fDE0IEFTeW5jR3JhcGgsKGZvcmFsbCBhc3luY2c6R3JhcGggJgogIChmb3JhbGwgaWQgaW4gc2V0IChkb20gYXN5bmNnKSAmCiAgICBwcmVfVHJhbnNDbG9zKGFzeW5jZywgaWQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI0IFBhdGhzLCBjaGlsZHJlbiwoZm9yYWxsIGc6QVN5bmNHcmFwaCwgaWQ6SWQgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgaWQgaW4gc2V0IGRvbSBnKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI4IFBhdGhzLChmb3JhbGwgZzpBU3luY0dyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICAobGV0IGNoaWxkcmVuOnNldCBvZiAoSWQpID0gZyhpZCkgaW4KICAgIChub3QgKGNoaWxkcmVuID0ge30pID0+CiAgICAgIChmb3JhbGwgYyBpbiBzZXQgY2hpbGRyZW4gJgogICAgICAgIHByZV9QYXRocyhnLCBjKSkpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDIyIFBhdGhzLChmb3JhbGwgZzpBU3luY0dyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICAobGV0IGNoaWxkcmVuOnNldCBvZiAoSWQpID0gZyhpZCkgaW4KICAgIChub3QgKGNoaWxkcmVuID0ge30pID0+CiAgICAgIChmb3JhbGwgYyBpbiBzZXQgY2hpbGRyZW4gJgogICAgICAgIG1lYXN1cmVUcmFuc0Nsb3MoZywgaWQpID4gbWVhc3VyZVRyYW5zQ2xvcyhnLCBjKSkpKSkKLHJlY3Vyc2l2ZSBmdW5jdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDM1IG1lYXN1cmVUcmFuc0Nsb3MsKGZvcmFsbCBnOkFTeW5jR3JhcGgsIGlkOklkICYKICBwcmVfVHJhbnNDbG9zKGcsIGlkKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ5IExpbmVhclBhdGgsKGZvcmFsbCBnOkdyYXBoLCBpZDpJZCAmCiAgKChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICAgIHByZV9UcmFuc0Nsb3MoZywgaWQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDM5IExpbmVhclBhdGgsIGNoaWxkcmVuLChmb3JhbGwgZzpHcmFwaCwgaWQ6SWQgJiAoKGlkIGluIHNldCAoZG9tIGcpKSBhbmQgKGlkIG5vdCBpbiBzZXQgVHJhbnNDbG9zKGcsIGlkKSkpID0+CiAgaWQgaW4gc2V0IGRvbSBnKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQzIExpbmVhclBhdGgsKGZvcmFsbCBnOkdyYXBoLCBpZDpJZCAmICgoaWQgaW4gc2V0IChkb20gZykpIGFuZCAoaWQgbm90IGluIHNldCBUcmFuc0Nsb3MoZywgaWQpKSkgPT4KICAobGV0IGNoaWxkcmVuOnNldCBvZiAoSWQpID0gZyhpZCkgaW4KICAgIChub3QgKChjYXJkIGNoaWxkcmVuKSA8PiAxKSA9PgogICAgICAoZm9yYWxsIHBhcmVudCBpbiBzZXQgKGRvbSBnKSAmCiAgICAgICAgKChwYXJlbnQgPD4gaWQpID0+CiAgICAgICAgICBwYXJlbnQgaW4gc2V0IGRvbSBnKSkpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ1IExpbmVhclBhdGgsKGZvcmFsbCBnOkdyYXBoLCBpZDpJZCAmICgoaWQgaW4gc2V0IChkb20gZykpIGFuZCAoaWQgbm90IGluIHNldCBUcmFuc0Nsb3MoZywgaWQpKSkgPT4KICAobGV0IGNoaWxkcmVuOnNldCBvZiAoSWQpID0gZyhpZCkgaW4KICAgIChub3QgKCgoY2FyZCBjaGlsZHJlbikgPD4gMSkgb3IgKGV4aXN0cyBbcGFyZW50IGluIHNldCAoZG9tIGcpXSAmICgocGFyZW50IDw+IGlkKSBhbmQgKGNoaWxkcmVuIHN1YnNldCBnKHBhcmVudCkpKSkpID0+CiAgICAgIGV4aXN0cyBjaGlsZCBpbiBzZXQgY2hpbGRyZW4pKSkKLGxldCBiZSBzdCBleGlzdGVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ3IExpbmVhclBhdGgsKGZvcmFsbCBnOkdyYXBoLCBpZDpJZCAmICgoaWQgaW4gc2V0IChkb20gZykpIGFuZCAoaWQgbm90IGluIHNldCBUcmFuc0Nsb3MoZywgaWQpKSkgPT4KICAobGV0IGNoaWxkcmVuOnNldCBvZiAoSWQpID0gZyhpZCkgaW4KICAgIChub3QgKCgoY2FyZCBjaGlsZHJlbikgPD4gMSkgb3IgKGV4aXN0cyBbcGFyZW50IGluIHNldCAoZG9tIGcpXSAmICgocGFyZW50IDw+IGlkKSBhbmQgKGNoaWxkcmVuIHN1YnNldCBnKHBhcmVudCkpKSkpID0+CiAgICAgIChmb3JhbGwgY2hpbGQgaW4gc2V0IGNoaWxkcmVuICYKICAgICAgICBwcmVfTGluZWFyUGF0aChnLCBjaGlsZCkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUzIFRyYW5zQ2xvcywoZm9yYWxsIGc6R3JhcGgsIGlkOklkICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIChmb3JhbGwgYyBpbiBzZXQgZyhpZCkgJgogICAgcHJlX1RyYW5zQ2xvc0F1eChnLCBjLCB7fSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUzIFRyYW5zQ2xvcywoZm9yYWxsIGc6R3JhcGgsIGlkOklkICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIGlkIGluIHNldCBkb20gZykKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDYxIFRyYW5zQ2xvc0F1eCwoZm9yYWxsIGc6R3JhcGgsIGlkOklkLCByZWFjaGVkOnNldCBvZiAoSWQpICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIChub3QgKGlkIGluIHNldCByZWFjaGVkKSA9PgogICAgKGZvcmFsbCBjIGluIHNldCBnKGlkKSAmCiAgICAgIHByZV9UcmFuc0Nsb3NBdXgoZywgYywgKHJlYWNoZWQgdW5pb24ge2lkfSkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU2IFRyYW5zQ2xvc0F1eCwoZm9yYWxsIGc6R3JhcGgsIGlkOklkLCByZWFjaGVkOnNldCBvZiAoSWQpICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIChub3QgKGlkIGluIHNldCByZWFjaGVkKSA9PgogICAgKGZvcmFsbCBjIGluIHNldCBnKGlkKSAmCiAgICAgIG1lYXN1cmVHcmFwaFJlYWNoZWQoZywgaWQsIHJlYWNoZWQpID4gbWVhc3VyZUdyYXBoUmVhY2hlZChnLCBjLCAocmVhY2hlZCB1bmlvbiB7aWR9KSkpKSkKLHJlY3Vyc2l2ZSBmdW5jdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDYyIFRyYW5zQ2xvc0F1eCwoZm9yYWxsIGc6R3JhcGgsIGlkOklkLCByZWFjaGVkOnNldCBvZiAoSWQpICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIChub3QgKGlkIGluIHNldCByZWFjaGVkKSA9PgogICAgaWQgaW4gc2V0IGRvbSBnKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDY2IG1lYXN1cmVHcmFwaFJlYWNoZWQsKGZvcmFsbCBnOkdyYXBoLCByZWFjaGVkOklkICYKICAoKGNhcmQgKGRvbSBnKSkgLSAoY2FyZCByZWFjaGVkKSkgPj0gMCkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDcyIEFzeWNEZXNjZW5kZW50cywoZm9yYWxsIGc6QWN5Y2xpY0dyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICAoZm9yYWxsIGMgaW4gc2V0IGcoaWQpICYKICAgIHByZV9Bc3ljRGVzY2VuZGVudHMoZywgYykpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDcwIEFzeWNEZXNjZW5kZW50cywoZm9yYWxsIGc6QWN5Y2xpY0dyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICAoZm9yYWxsIGMgaW4gc2V0IGcoaWQpICYKICAgIG1lYXN1cmVUcmFuc0Nsb3MoZywgaWQpID4gbWVhc3VyZVRyYW5zQ2xvcyhnLCBjKSkpCixyZWN1cnNpdmUgZnVuY3Rpb24sbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDcyIEFzeWNEZXNjZW5kZW50cywoZm9yYWxsIGc6QWN5Y2xpY0dyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICBpZCBpbiBzZXQgZG9tIGcpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDgxIERlc2NlbmRlbnRzLChmb3JhbGwgZzpHcmFwaCwgaWQ6SWQsIHJlYWNoZWQ6c2V0IG9mIChJZCkgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgKG5vdCAoaWQgaW4gc2V0IHJlYWNoZWQpID0+CiAgICAoZm9yYWxsIGMgaW4gc2V0IGcoaWQpICYKICAgICAgcHJlX0Rlc2NlbmRlbnRzKGcsIGMsIChyZWFjaGVkIHVuaW9uIHtpZH0pKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDc2IERlc2NlbmRlbnRzLChmb3JhbGwgZzpHcmFwaCwgaWQ6SWQsIHJlYWNoZWQ6c2V0IG9mIChJZCkgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgKG5vdCAoaWQgaW4gc2V0IHJlYWNoZWQpID0+CiAgICAoZm9yYWxsIGMgaW4gc2V0IGcoaWQpICYKICAgICAgbWVhc3VyZUdyYXBoUmVhY2hlZChnLCBpZCwgcmVhY2hlZCkgPiBtZWFzdXJlR3JhcGhSZWFjaGVkKGcsIGMsIChyZWFjaGVkIHVuaW9uIHtpZH0pKSkpKQoscmVjdXJzaXZlIGZ1bmN0aW9uLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDgyIERlc2NlbmRlbnRzLChmb3JhbGwgZzpHcmFwaCwgaWQ6SWQsIHJlYWNoZWQ6c2V0IG9mIChJZCkgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgKG5vdCAoaWQgaW4gc2V0IHJlYWNoZWQpID0+CiAgICBpZCBpbiBzZXQgZG9tIGcpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDg4IEFsbERlc2MsKGZvcmFsbCBnOkdyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICAoZm9yYWxsIGMgaW4gc2V0IGcoaWQpICYKICAgIHByZV9UcmFuc0Nsb3NBdXgoZywgYywge30pKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDg4IEFsbERlc2MsKGZvcmFsbCBnOkdyYXBoLCBpZDpJZCAmIChpZCBpbiBzZXQgKGRvbSBnKSkgPT4KICBpZCBpbiBzZXQgZG9tIGcpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDk2IEFjeWNsaWNHcmFwaCwoZm9yYWxsIGFjZzpHcmFwaCAmCiAgKGZvcmFsbCBpZCBpbiBzZXQgKGRvbSBhY2cpICYKICAgIHByZV9BbGxEZXNjKGFjZywgaWQpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEwMCBncmFwaCxmb3JhbGwgbTEsIG0yIGluIHNldCB7ezEgfC0+IHsyLCAzfX0sIHsyIHwtPiB7NH19LCB7MyB8LT4gezV9fSwgezQgfC0+IHs2fX0sIHs1IHwtPiB7Nn19LCB7NiB8LT4ge319fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEwMCBncmFwaCxpbnZfR3JhcGgoezEgfC0+IHsyLCAzfSwgMiB8LT4gezR9LCAzIHwtPiB7NX0sIDQgfC0+IHs2fSwgNSB8LT4gezZ9LCA2IHwtPiB7fX0pCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEyMCBBY3ljbGljTGFiR3JhcGgsKGZvcmFsbCBhY2c6TGFiR3JhcGggJgogIChmb3JhbGwgaWQgaW4gc2V0IChkb20gYWNnKSAmCiAgICBwcmVfQWxsTGFiRGVzYyhhY2csIGlkKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEzMCBBbGxMYWJEZXNjLChmb3JhbGwgZzpMYWJHcmFwaCwgaWQ6Tm9kZUlkICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIChmb3JhbGwgYyBpbiBzZXQgKHJuZyBnKGlkKSkgJgogICAgcHJlX0xhYkRlc2NlbmRlbnRzKGcsIGMsIHt9KSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEzMCBBbGxMYWJEZXNjLChmb3JhbGwgZzpMYWJHcmFwaCwgaWQ6Tm9kZUlkICYgKGlkIGluIHNldCAoZG9tIGcpKSA9PgogIGlkIGluIHNldCBkb20gZykKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEzMyBtZWFzdXJlTGFiR3JhcGhSZWFjaGVkLChmb3JhbGwgZzpMYWJHcmFwaCwgcmVhY2hlZDpJZCAmCiAgKChjYXJkIChkb20gZykpIC0gKGNhcmQgcmVhY2hlZCkpID49IDApCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE0MiBMYWJEZXNjZW5kZW50cywoZm9yYWxsIGc6TGFiR3JhcGgsIGlkOk5vZGVJZCwgcmVhY2hlZDpzZXQgb2YgKE5vZGVJZCkgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgKG5vdCAoaWQgaW4gc2V0IHJlYWNoZWQpID0+CiAgICAoZm9yYWxsIGMgaW4gc2V0IChybmcgZyhpZCkpICYKICAgICAgcHJlX0xhYkRlc2NlbmRlbnRzKGcsIGMsIChyZWFjaGVkIHVuaW9uIHtpZH0pKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDEzNyBMYWJEZXNjZW5kZW50cywoZm9yYWxsIGc6TGFiR3JhcGgsIGlkOk5vZGVJZCwgcmVhY2hlZDpzZXQgb2YgKE5vZGVJZCkgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgKG5vdCAoaWQgaW4gc2V0IHJlYWNoZWQpID0+CiAgICAoZm9yYWxsIGMgaW4gc2V0IChybmcgZyhpZCkpICYKICAgICAgbWVhc3VyZUxhYkdyYXBoUmVhY2hlZChnLCBpZCwgcmVhY2hlZCkgPiBtZWFzdXJlTGFiR3JhcGhSZWFjaGVkKGcsIGMsIChyZWFjaGVkIHVuaW9uIHtpZH0pKSkpKQoscmVjdXJzaXZlIGZ1bmN0aW9uLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE0MyBMYWJEZXNjZW5kZW50cywoZm9yYWxsIGc6TGFiR3JhcGgsIGlkOk5vZGVJZCwgcmVhY2hlZDpzZXQgb2YgKE5vZGVJZCkgJiAoaWQgaW4gc2V0IChkb20gZykpID0+CiAgKG5vdCAoaWQgaW4gc2V0IHJlYWNoZWQpID0+CiAgICBpZCBpbiBzZXQgZG9tIGcpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE0OSBVbmlxdWVBcmNJZHMsIG0sKGZvcmFsbCBnOm1hcCAoTm9kZUlkKSB0byAobWFwIChBcmNJZCkgdG8gKE5vZGVJZCkpICYKICBmb3JhbGwgbTEsIG0yIGluIHNldCB7e25pZCB8LT4gKGRvbSBnKG5pZCkpfSB8IG5pZCBpbiBzZXQgKGRvbSBnKX0gJgogICAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KSkKLG1hcCBzZXQgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE0OSBVbmlxdWVBcmNJZHMsIG0sKGZvcmFsbCBnOm1hcCAoTm9kZUlkKSB0byAobWFwIChBcmNJZCkgdG8gKE5vZGVJZCkpICYKICAoZm9yYWxsIG5pZCBpbiBzZXQgKGRvbSBnKSAmCiAgICBuaWQgaW4gc2V0IGRvbSBnKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE1MiBVbmlxdWVBcmNJZHMsKGZvcmFsbCBnOm1hcCAoTm9kZUlkKSB0byAobWFwIChBcmNJZCkgdG8gKE5vZGVJZCkpICYKICAobGV0IG06bWFwIChOb2RlSWQpIHRvIChzZXQgb2YgKEFyY0lkKSkgPSB7bmlkIHwtPiAoZG9tIGcobmlkKSkgfCBuaWQgaW4gc2V0IChkb20gZyl9IGluCiAgICAoZm9yYWxsIG5pZDEsIG5pZDIgaW4gc2V0IChkb20gbSkgJgogICAgICBuaWQxIGluIHNldCBkb20gbSkpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE1MiBVbmlxdWVBcmNJZHMsKGZvcmFsbCBnOm1hcCAoTm9kZUlkKSB0byAobWFwIChBcmNJZCkgdG8gKE5vZGVJZCkpICYKICAobGV0IG06bWFwIChOb2RlSWQpIHRvIChzZXQgb2YgKEFyY0lkKSkgPSB7bmlkIHwtPiAoZG9tIGcobmlkKSkgfCBuaWQgaW4gc2V0IChkb20gZyl9IGluCiAgICAoZm9yYWxsIG5pZDEsIG5pZDIgaW4gc2V0IChkb20gbSkgJgogICAgICBuaWQyIGluIHNldCBkb20gbSkpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE1NiBsZ3JhcGgsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3sxIHwtPiAyfSwgezIgfC0+IDN9fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE1NiBsZ3JhcGgsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3sxIHwtPiB7MSB8LT4gMiwgMiB8LT4gM319LCB7MiB8LT4gezMgfC0+IDR9fSwgezMgfC0+IHs0IHwtPiA1fX0sIHs0IHwtPiB7NSB8LT4gNn19LCB7NSB8LT4gezYgfC0+IDZ9fSwgezYgfC0+IHt9fX0gJgogIGZvcmFsbCBkMyBpbiBzZXQgZG9tIG0xLCBkNCBpbiBzZXQgZG9tIG0yICYKICAgIGQzID0gZDQgPT4gbTEoZDMpID0gbTIoZDQpCixtYXAgc2VxdWVuY2UgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE1NiBsZ3JhcGgsaW52X0xhYkdyYXBoKHsxIHwtPiB7MSB8LT4gMiwgMiB8LT4gM30sIDIgfC0+IHszIHwtPiA0fSwgMyB8LT4gezQgfC0+IDV9LCA0IHwtPiB7NSB8LT4gNn0sIDUgfC0+IHs2IHwtPiA2fSwgNiB8LT4ge319KQosc3VidHlwZSxudWxsLFVucHJvdmVkfA==


--graphs.vdmsl

types

Graph = map Id to set of Id
inv g == dunion rng g subset dom g;

ASyncGraph = Graph
inv asyncg == 
  forall id in set dom asyncg & 
     id not in set TransClos(asyncg,id);

Path = seq of Id;

Id = nat

functions

Paths: ASyncGraph * Id -> set of Path
Paths(g,id) ==
  let children = g(id)
  in
    if children = {}
    then {[id]}
    else dunion {{[id] ^ p | p in set Paths(g,c)} 
                | c in set children}  
pre id in set dom g
measure measureTransClos;

measureTransClos : ASyncGraph * Id -> nat
measureTransClos(g,id) == 
  card TransClos(g,id);

LinearPath: Graph * Id -> Path
LinearPath(g,id) ==
  let children = g(id)
  in
    if card children <> 1 or 
       exists parent in set dom g & 
          parent <> id and children subset g(parent)
    then [id]
    else let child in set children
         in
           [id] ^ LinearPath(g,child)
pre id in set dom g and
    id not in set TransClos(g,id);
   
TransClos: Graph * Id -> set of Id
TransClos(g,id) ==
  dunion {TransClosAux(g,c,{})| c in set g(id)}
pre id in set dom g;

TransClosAux: Graph * Id * set of Id -> set of Id
TransClosAux(g,id,reached) ==
  if id in set reached
  then {}
  else {id} union
       dunion {TransClosAux(g,c,reached union {id}) 
              | c in set g(id)}
pre id in set dom g
measure measureGraphReached;

measureGraphReached : Graph * Id * set of Id -> nat
measureGraphReached(g,-,reached) ==
  card dom g - card reached;

AsycDescendents: AcyclicGraph * Id -> set of Id
AsycDescendents(g,id) == 
  {id} union dunion {AsycDescendents(g,c) | c in set  g(id)}
pre id in set dom g
measure measureTransClos;

Descendents: Graph * Id * set of Id -> set of Id
Descendents(g,id,reached) ==
  if id in set reached
  then {}
  else {id} union
       dunion {Descendents(g,c,reached union {id}) 
              | c in set g(id)}
pre id in set dom g
measure measureGraphReached;

AllDesc: Graph * Id -> set of Id
AllDesc(g,id) ==
  dunion {TransClosAux(g,c,{})| c in set g(id)}
pre id in set dom g;

types

AcyclicGraph = Graph
inv acg == 
  not exists id in set dom acg & 
     id in set AllDesc(acg,id);

values

  graph : Graph = {1 |-> {2,3},
                   2 |-> {4},
                   3 |-> {5},
                   4 |-> {6},
                   5 |-> {6},
                   6 |-> {}}


--labgraphs.vdmsl

types

LabGraph = map NodeId to (map ArcId to NodeId)
inv g == 
  UniqueArcIds(g) and
  forall m in set rng g & rng m subset dom g;

AcyclicLabGraph = LabGraph
inv acg == 
  not exists id in set dom acg & 
     id in set AllLabDesc(acg,id);

NodeId = nat;

ArcId = nat

functions

AllLabDesc: LabGraph * NodeId -> set of NodeId
AllLabDesc(g,id) ==
  dunion {LabDescendents(g,c,{})| c in set rng g(id)}
pre id in set dom g;

measureLabGraphReached : LabGraph * Id * set of Id -> nat
measureLabGraphReached(g,-,reached) ==
  card dom g - card reached;

LabDescendents: LabGraph * NodeId * set of NodeId -> set of NodeId
LabDescendents(g,id,reached) ==
  if id in set reached
  then {}
  else {id} union
       dunion {LabDescendents(g,c,reached union {id}) 
              | c in set rng g(id)}
pre id in set dom g
measure measureLabGraphReached;

UniqueArcIds: map NodeId to (map ArcId to NodeId) -> bool
UniqueArcIds(g) ==
  let m = {nid |-> dom g(nid) | nid in set dom g}
  in
    forall nid1, nid2 in set dom m &
       nid1 <> nid2 => m(nid1) inter m(nid2) = {}

values

  lgraph : LabGraph = {1 |-> {1 |-> 2,2 |-> 3},
                       2 |-> {3 |-> 4},
                       3 |-> {4 |-> 5},
                       4 |-> {5 |-> 6},
                       5 |-> {6 |-> 6},
                       6 |-> {|->}}