-- TCErrors: WARNING:5000:54,3 WARNING:5000:59,3 WARNING:5000:64,3 WARNING:5000:71,1 PROOFOBLIGATION: fDM5OjUgcmVzcG9uc2VEQixmb3JhbGwgbTEsIG0yIGluIHNldCB7ezxNaXNzaWxlQT4gfC0+IFtta18oPEZsYXJlT25lQT4sIDkwMCksIG1rXyg8RmxhcmVUd29BPiwgNTAwKSwgbWtfKDxEb05vdGhpbmdBPiwgMTAwKSwgbWtfKDxGbGFyZU9uZUE+LCA1MDApXX0sIHs8TWlzc2lsZUI+IHwtPiBbbWtfKDxGbGFyZVR3b0I+LCA1MDApLCBta18oPEZsYXJlVHdvQj4sIDcwMCldfSwgezxNaXNzaWxlQz4gfC0+IFtta18oPEZsYXJlT25lQz4sIDQwMCksIG1rXyg8RG9Ob3RoaW5nQz4sIDEwMCksIG1rXyg8RmxhcmVUd29DPiwgNDAwKSwgbWtfKDxGbGFyZU9uZUM+LCA1MDApXX19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ3OjI1IG1pc3NpbGVQcmlvcml0eSxmb3JhbGwgbTEsIG0yIGluIHNldCB7ezxNaXNzaWxlQT4gfC0+IDF9LCB7PE1pc3NpbGVCPiB8LT4gMn0sIHs8TWlzc2lsZUM+IHwtPiAzfSwgezxOb25lPiB8LT4gMH19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU0OjMwIHRlc3R2YWwxLCgoKChpbnZfQW5nbGUoODgpIGFuZCAoaXNfbmF0KDg4KSkpKSkKYW5kICgoKGludl9BbmdsZSg3MCkgYW5kIChpc19uYXQoNzApKSkpKQphbmQgKCgoaW52X0FuZ2xlKDIyMikgYW5kIChpc19uYXQoMjIyKSkpKSkKYW5kICgoKGludl9BbmdsZSg0NCkgYW5kIChpc19uYXQoNDQpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU5OjMwIHRlc3R2YWwyLCgoKChpbnZfQW5nbGUoMTg4KSBhbmQgKGlzX25hdCgxODgpKSkpKQphbmQgKCgoaW52X0FuZ2xlKDcwKSBhbmQgKGlzX25hdCg3MCkpKSkpCmFuZCAoKChpbnZfQW5nbGUoMikgYW5kIChpc19uYXQoMikpKSkpCmFuZCAoKChpbnZfQW5nbGUoNDQpIGFuZCAoaXNfbmF0KDQ0KSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY0OjMwIHRlc3R2YWwzLCgoKChpbnZfQW5nbGUoMjg4KSBhbmQgKGlzX25hdCgyODgpKSkpKQphbmQgKCgoaW52X0FuZ2xlKDE3MCkgYW5kIChpc19uYXQoMTcwKSkpKSkKYW5kICgoKGludl9BbmdsZSgyMjIpIGFuZCAoaXNfbmF0KDIyMikpKSkpCmFuZCAoKChpbnZfQW5nbGUoNDQpIGFuZCAoaXNfbmF0KDQ0KSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDgwOjM1IENNLCBjdXJNaXMsIGFuZ2xlLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIG1pc3NpbGVJbnB1dHMgPD4gW10pKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDg1OjE0IENNLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIChsZXQgbWtfKGN1ck1pcywgYW5nbGUpOk1pc3NpbGVJbnB1dCA9IChoZCBtaXNzaWxlSW5wdXRzKSwgbWFnaWQ6TWFnSWQgPSBBbmdsZTJNYWdJZChhbmdsZSkgaW4KICAgICAgKG5vdCAobWFnaWQgbm90IGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAoKG1hZ2lkIGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAgIGN1ck1pcyBpbiBzZXQgZG9tIG1pc3NpbGVQcmlvcml0eSkpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDg2OjE0IENNLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIChsZXQgbWtfKGN1ck1pcywgYW5nbGUpOk1pc3NpbGVJbnB1dCA9IChoZCBtaXNzaWxlSW5wdXRzKSwgbWFnaWQ6TWFnSWQgPSBBbmdsZTJNYWdJZChhbmdsZSkgaW4KICAgICAgKG5vdCAobWFnaWQgbm90IGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAoKG1hZ2lkIGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAgIGxhc3RNaXNzaWxlKG1hZ2lkKSBpbiBzZXQgZG9tIG1pc3NpbGVQcmlvcml0eSkpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDg2OjMwIENNLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIChsZXQgbWtfKGN1ck1pcywgYW5nbGUpOk1pc3NpbGVJbnB1dCA9IChoZCBtaXNzaWxlSW5wdXRzKSwgbWFnaWQ6TWFnSWQgPSBBbmdsZTJNYWdJZChhbmdsZSkgaW4KICAgICAgKG5vdCAobWFnaWQgbm90IGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAoKG1hZ2lkIGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAgICgoaXNfKGxhc3RNaXNzaWxlKG1hZ2lkKSwgPE1pc3NpbGVBPikpIG9yCiAgICAgICAgICAoaXNfKGxhc3RNaXNzaWxlKG1hZ2lkKSwgPE1pc3NpbGVCPikpIG9yCiAgICAgICAgICAoaXNfKGxhc3RNaXNzaWxlKG1hZ2lkKSwgPE1pc3NpbGVDPikpIG9yCiAgICAgICAgICAoaXNfKGxhc3RNaXNzaWxlKG1hZ2lkKSwgPE5vbmU+KSkpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDg2OjMwIENNLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIChsZXQgbWtfKGN1ck1pcywgYW5nbGUpOk1pc3NpbGVJbnB1dCA9IChoZCBtaXNzaWxlSW5wdXRzKSwgbWFnaWQ6TWFnSWQgPSBBbmdsZTJNYWdJZChhbmdsZSkgaW4KICAgICAgKG5vdCAobWFnaWQgbm90IGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAoKG1hZ2lkIGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgPT4KICAgICAgICAgIG1hZ2lkIGluIHNldCBkb20gbGFzdE1pc3NpbGUpKSkpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDg5OjM2IENNLCBuZXdPdXRwdXQsKGZvcmFsbCBtaXNzaWxlSW5wdXRzOk1pc3NpbGVJbnB1dHMsIG91dHB1dFNvRmFyOk91dHB1dCwgbGFzdE1pc3NpbGU6bWFwIChNYWdJZCkgdG8gKFtNaXNzaWxlVHlwZV0pLCBjdXJUaW1lOm5hdCAmCiAgKG5vdCAobWlzc2lsZUlucHV0cyA9IFtdKSA9PgogICAgKGxldCBta18oY3VyTWlzLCBhbmdsZSk6TWlzc2lsZUlucHV0ID0gKGhkIG1pc3NpbGVJbnB1dHMpLCBtYWdpZDpNYWdJZCA9IEFuZ2xlMk1hZ0lkKGFuZ2xlKSBpbgogICAgICAoKChtYWdpZCBub3QgaW4gc2V0IChkb20gbGFzdE1pc3NpbGUpKSBvciAoKG1hZ2lkIGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgYW5kIChtaXNzaWxlUHJpb3JpdHkoY3VyTWlzKSA+IG1pc3NpbGVQcmlvcml0eShsYXN0TWlzc2lsZShtYWdpZCkpKSkpID0+CiAgICAgICAgY3VyTWlzIGluIHNldCBkb20gcmVzcG9uc2VEQikpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc1OjEgQ00sKGZvcmFsbCBtaXNzaWxlSW5wdXRzOk1pc3NpbGVJbnB1dHMsIG91dHB1dFNvRmFyOk91dHB1dCwgbGFzdE1pc3NpbGU6bWFwIChNYWdJZCkgdG8gKFtNaXNzaWxlVHlwZV0pLCBjdXJUaW1lOm5hdCAmCiAgKG5vdCAobWlzc2lsZUlucHV0cyA9IFtdKSA9PgogICAgKGxldCBta18oY3VyTWlzLCBhbmdsZSk6TWlzc2lsZUlucHV0ID0gKGhkIG1pc3NpbGVJbnB1dHMpLCBtYWdpZDpNYWdJZCA9IEFuZ2xlMk1hZ0lkKGFuZ2xlKSBpbgogICAgICAoKChtYWdpZCBub3QgaW4gc2V0IChkb20gbGFzdE1pc3NpbGUpKSBvciAoKG1hZ2lkIGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgYW5kIChtaXNzaWxlUHJpb3JpdHkoY3VyTWlzKSA+IG1pc3NpbGVQcmlvcml0eShsYXN0TWlzc2lsZShtYWdpZCkpKSkpID0+CiAgICAgICAgKGxldCBuZXdPdXRwdXQ6T3V0cHV0ID0gSW50ZXJydXB0UGxhbihjdXJUaW1lLCBvdXRwdXRTb0ZhciwgcmVzcG9uc2VEQihjdXJNaXMpLCBtYWdpZCkgaW4KICAgICAgICAgIENNTGVuKG1pc3NpbGVJbnB1dHMsIG91dHB1dFNvRmFyLCBsYXN0TWlzc2lsZSwgY3VyVGltZSkgPiBDTUxlbigodGwgbWlzc2lsZUlucHV0cyksIG5ld091dHB1dCwgKGxhc3RNaXNzaWxlICsrIHttYWdpZCB8LT4gY3VyTWlzfSksIChjdXJUaW1lICsgc3RlcExlbmd0aCkpKSkpKSkKLHJlY3Vyc2l2ZSBmdW5jdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDkxOjI0IENNLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIChsZXQgbWtfKGN1ck1pcywgYW5nbGUpOk1pc3NpbGVJbnB1dCA9IChoZCBtaXNzaWxlSW5wdXRzKSwgbWFnaWQ6TWFnSWQgPSBBbmdsZTJNYWdJZChhbmdsZSkgaW4KICAgICAgKCgobWFnaWQgbm90IGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgb3IgKChtYWdpZCBpbiBzZXQgKGRvbSBsYXN0TWlzc2lsZSkpIGFuZCAobWlzc2lsZVByaW9yaXR5KGN1ck1pcykgPiBtaXNzaWxlUHJpb3JpdHkobGFzdE1pc3NpbGUobWFnaWQpKSkpKSA9PgogICAgICAgIChsZXQgbmV3T3V0cHV0Ok91dHB1dCA9IEludGVycnVwdFBsYW4oY3VyVGltZSwgb3V0cHV0U29GYXIsIHJlc3BvbnNlREIoY3VyTWlzKSwgbWFnaWQpIGluCiAgICAgICAgICBtaXNzaWxlSW5wdXRzIDw+IFtdKSkpKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDc1OjEgQ00sKGZvcmFsbCBtaXNzaWxlSW5wdXRzOk1pc3NpbGVJbnB1dHMsIG91dHB1dFNvRmFyOk91dHB1dCwgbGFzdE1pc3NpbGU6bWFwIChNYWdJZCkgdG8gKFtNaXNzaWxlVHlwZV0pLCBjdXJUaW1lOm5hdCAmCiAgKG5vdCAobWlzc2lsZUlucHV0cyA9IFtdKSA9PgogICAgKGxldCBta18oY3VyTWlzLCBhbmdsZSk6TWlzc2lsZUlucHV0ID0gKGhkIG1pc3NpbGVJbnB1dHMpLCBtYWdpZDpNYWdJZCA9IEFuZ2xlMk1hZ0lkKGFuZ2xlKSBpbgogICAgICAobm90ICgobWFnaWQgbm90IGluIHNldCAoZG9tIGxhc3RNaXNzaWxlKSkgb3IgKChtYWdpZCBpbiBzZXQgKGRvbSBsYXN0TWlzc2lsZSkpIGFuZCAobWlzc2lsZVByaW9yaXR5KGN1ck1pcykgPiBtaXNzaWxlUHJpb3JpdHkobGFzdE1pc3NpbGUobWFnaWQpKSkpKSA9PgogICAgICAgIENNTGVuKG1pc3NpbGVJbnB1dHMsIG91dHB1dFNvRmFyLCBsYXN0TWlzc2lsZSwgY3VyVGltZSkgPiBDTUxlbigodGwgbWlzc2lsZUlucHV0cyksIG91dHB1dFNvRmFyLCBsYXN0TWlzc2lsZSwgKGN1clRpbWUgKyBzdGVwTGVuZ3RoKSkpKSkpCixyZWN1cnNpdmUgZnVuY3Rpb24sbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDk0OjIxIENNLChmb3JhbGwgbWlzc2lsZUlucHV0czpNaXNzaWxlSW5wdXRzLCBvdXRwdXRTb0ZhcjpPdXRwdXQsIGxhc3RNaXNzaWxlOm1hcCAoTWFnSWQpIHRvIChbTWlzc2lsZVR5cGVdKSwgY3VyVGltZTpuYXQgJgogIChub3QgKG1pc3NpbGVJbnB1dHMgPSBbXSkgPT4KICAgIChsZXQgbWtfKGN1ck1pcywgYW5nbGUpOk1pc3NpbGVJbnB1dCA9IChoZCBtaXNzaWxlSW5wdXRzKSwgbWFnaWQ6TWFnSWQgPSBBbmdsZTJNYWdJZChhbmdsZSkgaW4KICAgICAgKG5vdCAoKG1hZ2lkIG5vdCBpbiBzZXQgKGRvbSBsYXN0TWlzc2lsZSkpIG9yICgobWFnaWQgaW4gc2V0IChkb20gbGFzdE1pc3NpbGUpKSBhbmQgKG1pc3NpbGVQcmlvcml0eShjdXJNaXMpID4gbWlzc2lsZVByaW9yaXR5KGxhc3RNaXNzaWxlKG1hZ2lkKSkpKSkgPT4KICAgICAgICBtaXNzaWxlSW5wdXRzIDw+IFtdKSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEwNDo0MSBJbnRlcnJ1cHRQbGFuLChmb3JhbGwgY3VyVGltZTpuYXQsIGV4cE91dHB1dDpPdXRwdXQsIHBsYW46UGxhbiwgbWFnaWQ6TWFnSWQgJgogICgobWFnaWQgaW4gc2V0IChkb20gZXhwT3V0cHV0KSkgPT4KICAgIG1hZ2lkIGluIHNldCBkb20gZXhwT3V0cHV0KSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEwMzozIEludGVycnVwdFBsYW4sKGZvcmFsbCBjdXJUaW1lOm5hdCwgZXhwT3V0cHV0Ok91dHB1dCwgcGxhbjpQbGFuLCBtYWdpZDpNYWdJZCAmCiAgZm9yYWxsIGxkb20xIGluIHNldCBkb20ge21hZ2lkIHwtPiAoKGlmIChtYWdpZCBpbiBzZXQgKGRvbSBleHBPdXRwdXQpKQogIHRoZW4gTGVhdmVQcmVmaXhVbmNoYW5nZWQoZXhwT3V0cHV0KG1hZ2lkKSwgY3VyVGltZSkKICBlbHNlIFtdKSBeIE1ha2VPdXRwdXRGcm9tUGxhbihjdXJUaW1lLCBwbGFuKSl9LCByZG9tMiBpbiBzZXQgZG9tICh7bWFnaWR9IDwtOiBleHBPdXRwdXQpICYKICBsZG9tMSA9IHJkb20yID0+IHttYWdpZCB8LT4gKChpZiAobWFnaWQgaW4gc2V0IChkb20gZXhwT3V0cHV0KSkKICB0aGVuIExlYXZlUHJlZml4VW5jaGFuZ2VkKGV4cE91dHB1dChtYWdpZCksIGN1clRpbWUpCiAgZWxzZSBbXSkgXiBNYWtlT3V0cHV0RnJvbVBsYW4oY3VyVGltZSwgcGxhbikpfShsZG9tMSkgPSAoe21hZ2lkfSA8LTogZXhwT3V0cHV0KShyZG9tMikpCixtYXAgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDExNDo0IExlYXZlUHJlZml4VW5jaGFuZ2VkLChmb3JhbGwgb3V0cHV0X2w6c2VxIG9mIChPdXRwdXRTdGVwKSwgY3VyVGltZTpuYXQgJgogIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgb3V0cHV0X2wpICYgbGV0IG1rXygtLCB0KTpPdXRwdXRTdGVwID0gb3V0cHV0X2woaSkgaW4gKHQgPD0gY3VyVGltZSkgPT4KICAgIGkgaW4gc2V0IGluZHMgb3V0cHV0X2wpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDExNTozMyBMZWF2ZVByZWZpeFVuY2hhbmdlZCwgdCwoZm9yYWxsIG91dHB1dF9sOnNlcSBvZiAoT3V0cHV0U3RlcCksIGN1clRpbWU6bmF0ICYKICAoZm9yYWxsIGkgaW4gc2V0IChpbmRzIG91dHB1dF9sKSAmCiAgICBpIGluIHNldCBpbmRzIG91dHB1dF9sKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEyMDoyNSBNYWtlT3V0cHV0RnJvbVBsYW4sIGZsYXJlLCB0LChmb3JhbGwgY3VyVGltZTpuYXQsIHJlc3BvbnNlOnNlcSBvZiAoUmVzcG9uc2UpICYKICAobGV0IG91dHB1dDpzZXEgb2YgKE91dHB1dFN0ZXApID0gT3V0cHV0QXRUaW1lWmVybyhyZXNwb25zZSkgaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgb3V0cHV0KSAmCiAgICAgIGkgaW4gc2V0IGluZHMgb3V0cHV0KSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEyODozMiBPdXRwdXRBdFRpbWVaZXJvLCBmaXJzdEZsYXJlLChmb3JhbGwgcmVzcG9uc2U6c2VxIG9mIChSZXNwb25zZSkgJgogIChsZXQgYWJzVGltZXM6c2VxIG9mICgoRmxhcmVUeXBlICogbmF0KSkgPSBSZWxhdGl2ZVRvQWJzb2x1dGVUaW1lcyhyZXNwb25zZSkgaW4KICAgIGFic1RpbWVzIDw+IFtdKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEzMDoyNCBPdXRwdXRBdFRpbWVaZXJvLCB0LChmb3JhbGwgcmVzcG9uc2U6c2VxIG9mIChSZXNwb25zZSkgJgogIChsZXQgYWJzVGltZXM6c2VxIG9mICgoRmxhcmVUeXBlICogbmF0KSkgPSBSZWxhdGl2ZVRvQWJzb2x1dGVUaW1lcyhyZXNwb25zZSkgaW4KICAgIChsZXQgbWtfKGZpcnN0RmxhcmUsIC0pOihGbGFyZVR5cGUgKiBuYXQpID0gKGhkIGFic1RpbWVzKSBpbgogICAgICAoZm9yYWxsIGkgaW4gc2V0IHsyLCAuLi4gLChsZW4gYWJzVGltZXMpfSAmCiAgICAgICAgKGkgLSAxKSBpbiBzZXQgaW5kcyBhYnNUaW1lcykpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEzMToyNCBPdXRwdXRBdFRpbWVaZXJvLCBmLChmb3JhbGwgcmVzcG9uc2U6c2VxIG9mIChSZXNwb25zZSkgJgogIChsZXQgYWJzVGltZXM6c2VxIG9mICgoRmxhcmVUeXBlICogbmF0KSkgPSBSZWxhdGl2ZVRvQWJzb2x1dGVUaW1lcyhyZXNwb25zZSkgaW4KICAgIChsZXQgbWtfKGZpcnN0RmxhcmUsIC0pOihGbGFyZVR5cGUgKiBuYXQpID0gKGhkIGFic1RpbWVzKSBpbgogICAgICAoZm9yYWxsIGkgaW4gc2V0IHsyLCAuLi4gLChsZW4gYWJzVGltZXMpfSAmCiAgICAgICAgaSBpbiBzZXQgaW5kcyBhYnNUaW1lcykpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEzOToyNiBSZWxhdGl2ZVRvQWJzb2x1dGVUaW1lcywgZiwgdCwoZm9yYWxsIHRzOnNlcSBvZiAoUmVzcG9uc2UpICYKICAobm90ICh0cyA9IFtdKSA9PgogICAgdHMgPD4gW10pKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEzNDoxIFJlbGF0aXZlVG9BYnNvbHV0ZVRpbWVzLCBucywoZm9yYWxsIHRzOnNlcSBvZiAoUmVzcG9uc2UpICYKICAobm90ICh0cyA9IFtdKSA9PgogICAgUmVzcExlbih0cykgPiBSZXNwTGVuKCh0bCB0cykpKSkKLHJlY3Vyc2l2ZSBmdW5jdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE0MDo0NCBSZWxhdGl2ZVRvQWJzb2x1dGVUaW1lcywgbnMsKGZvcmFsbCB0czpzZXEgb2YgKFJlc3BvbnNlKSAmCiAgKG5vdCAodHMgPSBbXSkgPT4KICAgIHRzIDw+IFtdKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE0MTo0MyBSZWxhdGl2ZVRvQWJzb2x1dGVUaW1lcywgbmYsIG50LChmb3JhbGwgdHM6c2VxIG9mIChSZXNwb25zZSkgJgogIChub3QgKHRzID0gW10pID0+CiAgICAobGV0IG1rXyhmLCB0KTpSZXNwb25zZSA9IChoZCB0cyksIG5zOnNlcSBvZiAoKEZsYXJlVHlwZSAqIG5hdCkpID0gUmVsYXRpdmVUb0Fic29sdXRlVGltZXMoKHRsIHRzKSkgaW4KICAgICAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBucykgJgogICAgICAgIGkgaW4gc2V0IGluZHMgbnMpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA==


--CMflat.vdmsl

\begin{vdm_al}
types

  MissileInputs = seq of MissileInput;

  MissileInput = MissileType * Angle;

  MissileType = <MissileA> | <MissileB> | <MissileC> | <None>;

  Angle = nat
  inv num == num <= 360;

  Output = map MagId to seq of OutputStep;

  MagId = token;

  OutputStep = FlareType * AbsTime;

  Response = FlareType * nat;

  AbsTime = nat;

  FlareType = <FlareOneA>  | <FlareTwoA>  | <FlareOneB> |
              <FlareTwoB>  | <FlareOneC>  | <FlareTwoC> |
              <DoNothingA> | <DoNothingB> | <DoNothingC>;

  Plan = seq of (FlareType * Delay);

  Delay = nat;

values

  responseDB : map MissileType to Plan =
    {<MissileA> |-> [ mk_(<FlareOneA>,900), mk_(<FlareTwoA>,500),
                      mk_(<DoNothingA>,100), mk_(<FlareOneA>,500)],
     <MissileB> |-> [ mk_(<FlareTwoB>,500), mk_(<FlareTwoB>,700)],
     <MissileC> |-> [ mk_(<FlareOneC>,400), mk_(<DoNothingC>,100),
                      mk_(<FlareTwoC>,400), mk_(<FlareOneC>,500)]
    };

  missilePriority : map MissileType to nat
                      = {<MissileA> |-> 1,
                         <MissileB> |-> 2,
                         <MissileC> |-> 3,
                         <None> |-> 0};

  stepLength : nat = 100;

  testval1 : MissileInputs = [mk_(<MissileA>,88),
                              mk_(<MissileB>,70),
                              mk_(<MissileA>,222),
                              mk_(<MissileC>,44)];

  testval2 : MissileInputs = [mk_(<MissileC>,188),
                              mk_(<MissileB>,70),
                              mk_(<MissileA>,2),
                              mk_(<MissileC>,44)];

  testval3 : MissileInputs = [mk_(<MissileA>,288),
                              mk_(<MissileB>,170),
                              mk_(<MissileA>,222),
                              mk_(<MissileC>,44)];

functions

CounterMeasures: MissileInputs -> Output
CounterMeasures(missileInputs) ==
  CM(missileInputs,{|->},{|->},0);

CM: MissileInputs * Output * map MagId to [MissileType] * 
    nat -> Output
CM( missileInputs, outputSoFar, lastMissile, curTime) ==
  if missileInputs = []
  then outputSoFar
  else let mk_(curMis,angle) = hd missileInputs,
           magid = Angle2MagId(angle)
       in
         if magid not in set dom lastMissile or
            (magid in set dom lastMissile and
             missilePriority(curMis) > 
             missilePriority(lastMissile(magid)))
         then let newOutput = 
                     InterruptPlan(curTime,outputSoFar,
                                   responseDB(curMis),
                                   magid)
              in CM(tl missileInputs, newOutput, 
                    lastMissile ++ {magid |-> curMis},
                    curTime + stepLength)
         else CM(tl missileInputs, outputSoFar, 
                 lastMissile,curTime + stepLength)
measure CMLen;

CMLen: MissileInputs * Output * map MagId to [MissileType] * nat -> nat
CMLen(list,-,-,-) == len list;
    
InterruptPlan: nat * Output * Plan * MagId -> Output
InterruptPlan(curTime,expOutput,plan,magid) ==
  {magid |-> (if magid in set dom expOutput
              then LeavePrefixUnchanged(expOutput(magid), 
                                        curTime)
              else []) ^
              MakeOutputFromPlan(curTime, plan)} 
  munion
  ({magid} <-: expOutput);

LeavePrefixUnchanged: seq of OutputStep * nat -> 
                      seq of OutputStep
LeavePrefixUnchanged(output_l, curTime) ==
  [output_l(i) | i in set inds output_l
               & let mk_(-,t) = output_l(i) in t <= curTime];

MakeOutputFromPlan : nat * seq of Response -> seq of OutputStep
MakeOutputFromPlan(curTime, response) ==
  let output = OutputAtTimeZero(response) in
    [let mk_(flare,t) = output(i)
     in
       mk_(flare,t+curTime)
    | i in set inds output];

OutputAtTimeZero : seq of Response -> seq of OutputStep
OutputAtTimeZero(response) ==
  let absTimes = RelativeToAbsoluteTimes(response) in
    let mk_(firstFlare,-) = hd absTimes in
      [mk_(firstFlare,0)] ^
      [ let mk_(-,t) = absTimes(i-1),
            mk_(f,-) = absTimes(i) in
          mk_(f,t) | i in set {2,...,len absTimes}];

RelativeToAbsoluteTimes : seq of Response -> 
                          seq of (FlareType * nat)
RelativeToAbsoluteTimes(ts) ==
  if ts = []
  then []
  else let mk_(f,t) = hd ts,
           ns = RelativeToAbsoluteTimes(tl ts) in
         [mk_(f,t)] ^ [ let mk_(nf, nt) = ns(i)
                        in mk_(nf, nt + t)
                      | i in set inds ns]
measure RespLen;

RespLen: seq of Response -> nat
RespLen(l) ==
  len l;

Angle2MagId: Angle -> MagId
Angle2MagId(angle) ==
  if angle < 90
  then mk_token("Magazine 1")
  elseif angle < 180
  then mk_token("Magazine 2")
  elseif angle < 270
  then mk_token("Magazine 3")
  else mk_token("Magazine 4");
\end{vdm_al}

\begin{rtinfo}[RelativeToAbsoluteTimes]
{vdm.tc}[DefaultMod]
\end{rtinfo}