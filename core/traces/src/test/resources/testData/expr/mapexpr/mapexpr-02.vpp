class Stack

types

public R ::
        a : nat;

  instance variables
    stack : seq of map int to int := [];

  operations

    public
    Reset : () ==> ()
    Reset () ==
      stack := [];

    public
    Pop : () ==> map int to int
    Pop() ==
      def res = hd stack in
        (stack := tl stack;
         return res)
    pre stack <> []
    post stack~ = [RESULT]^stack;

    public Push: map int to int ==> ()
    Push(elem) ==
      stack := stack ^[elem];

    public
    Top : () ==> map int to int
    Top() ==
      return (hd stack);

 
end Stack
class UseStack

instance variables

  s : Stack := new Stack();

traces

  PushBeforePop : s.Reset(); (let x = {7 |-> 8, 9 |-> 5},
                                  y = dom x union rng x union elems [3,3],
                                  z = {e |-> e ** 2 | e in set y}
                              in s.Push(z));
                  s.Pop()
 
end UseStack