class Stack

  instance variables
    stack : seq of int := [];

  operations

    public
    Reset : () ==> ()
    Reset () ==
      stack := [];

    public
    Pop : () ==> int
    Pop() ==
      def res = hd stack in
        (stack := tl stack;
         return res)
    pre stack <> []
    post stack~ = [RESULT]^stack;

    public Push: int ==> ()
    Push(elem) ==
      stack := stack ^[elem];

    public
    Top : () ==> int
    Top() ==
      return (hd stack);

 
end Stack
class UseStack

instance variables

  s : Stack := new Stack();

traces

  PushBeforePop : s.Reset(); s.Push(if (true => false) and nil in set 
                                       {7,'c',<Q>,nil,mk_token(8),"hi",8.7} 
                                    then 78 - 65 div 2
                                    else 66 + 11){1,2}; 
                  s.Push(if ((true <=> true) and 5 <> 8) or false
                         then 8/4
                         else 1234);
                  s.Pop()*
 
end UseStack