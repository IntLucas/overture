{"UseStack|PushBeforePop|8" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Pop()", "s.Pop()", "s.Pop()"], "UseStack|PushBeforePop|7" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Pop()", "s.Pop()", "s.Pop()"], "UseStack|PushBeforePop|6" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Pop()", "s.Pop()"], "UseStack|PushBeforePop|1" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)"], "UseStack|PushBeforePop|5" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Pop()", "s.Pop()"], "UseStack|PushBeforePop|4" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Pop()"], "UseStack|PushBeforePop|3" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Pop()"], "UseStack|PushBeforePop|2" |-> ["s.Reset()", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)", "s.Push(if  true  and  nil  in set {7, 'c', <Q>,  nil , mk_token(8), 8.7} then 78-65 div 2 else 66+11)"]}