{"UseTree|insertionBST|13" |-> ["let n  =1  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.isEmpty()"], "UseTree|insertionBST|14" |-> ["let n  =2  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.isEmpty()"], "UseTree|insertionBST|11" |-> ["let n  =1  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.inorder()"], "UseTree|insertionBST|12" |-> ["let n  =2  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.inorder()"], "UseTree|insertionBST|15" |-> ["let n  =1  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.isEmpty()"], "UseTree|insertionBST|16" |-> ["let n  =2  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.isEmpty()"], "UseTree|insertionBST|10" |-> ["let n  =2  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.inorder()"], "UseTree|insertionBST|8" |-> ["let n  =2  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.depth_first_search()"], "UseTree|insertionBST|9" |-> ["let n  =1  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.inorder()"], "UseTree|insertionBST|4" |-> ["let n  =2  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.breadth_first_search()"], "UseTree|insertionBST|5" |-> ["let n  =1  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.depth_first_search()"], "UseTree|insertionBST|6" |-> ["let n  =2  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.depth_first_search()"], "UseTree|insertionBST|7" |-> ["let n  =1  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.depth_first_search()"], "UseTree|insertionBST|1" |-> ["let n  =1  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.breadth_first_search()"], "UseTree|insertionBST|2" |-> ["let n  =2  in t1.Insert(n)", "let n  =1  in t1.Insert(n)", "t1.breadth_first_search()"], "UseTree|insertionBST|3" |-> ["let n  =1  in t1.Insert(n)", "let n  =2  in t1.Insert(n)", "t1.breadth_first_search()"]}