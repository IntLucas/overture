<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="3" line="499" message="phi_remove: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 499:3&#10;(forall tp:Expressible_type &amp;&#10;  (exists mk_VoidType(t):Expressible_type &amp; tp = mk_VoidType(t)) or (exists mk_TrType(range, fl):Expressible_type &amp; tp = mk_TrType(range, fl)) or (exists mk_IntType(rep, range, fl):Expressible_type &amp; tp = mk_IntType(rep, range, fl)) or (exists mk_Float(range, abse, rele, fl):Expressible_type &amp; tp = mk_Float(range, abse, rele, fl)) or (exists mk_VectorType(lower, upper, tp, fl):Expressible_type &amp; tp = mk_VectorType(lower, upper, tp, fl)) or (exists mk_StructureType(tps, fl):Expressible_type &amp; tp = mk_StructureType(tps, fl)) or (exists mk_UnionType(tps, fl):Expressible_type &amp; tp = mk_UnionType(tps, fl)))&#10;" number="1" object="" resource="newspeakSL" toString="phi_remove: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 499:3&#10;(forall tp:Expressible_type &amp;&#10;  (exists mk_VoidType(t):Expressible_type &amp; tp = mk_VoidType(t)) or (exists mk_TrType(range, fl):Expressible_type &amp; tp = mk_TrType(range, fl)) or (exists mk_IntType(rep, range, fl):Expressible_type &amp; tp = mk_IntType(rep, range, fl)) or (exists mk_Float(range, abse, rele, fl):Expressible_type &amp; tp = mk_Float(range, abse, rele, fl)) or (exists mk_VectorType(lower, upper, tp, fl):Expressible_type &amp; tp = mk_VectorType(lower, upper, tp, fl)) or (exists mk_StructureType(tps, fl):Expressible_type &amp; tp = mk_StructureType(tps, fl)) or (exists mk_UnionType(tps, fl):Expressible_type &amp; tp = mk_UnionType(tps, fl)))&#10;"/>
<po column="7" line="554" message="min: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 554:7&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  exists m in set s)&#10;" number="2" object="" resource="newspeakSL" toString="min: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 554:7&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  exists m in set s)&#10;"/>
<po column="17" line="556" message="min, sm: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 556:17&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  (forall m in set s &amp;&#10;    (not ((card s) = 1) =&gt;&#10;      pre_min((s \ {m})))))&#10;" number="3" object="" resource="newspeakSL" toString="min, sm: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 556:17&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  (forall m in set s &amp;&#10;    (not ((card s) = 1) =&gt;&#10;      pre_min((s \ {m})))))&#10;"/>
<po column="7" line="562" message="max: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 562:7&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  exists m in set s)&#10;" number="4" object="" resource="newspeakSL" toString="max: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 562:7&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  exists m in set s)&#10;"/>
<po column="17" line="564" message="max, sm: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 564:17&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  (forall m in set s &amp;&#10;    (not ((card s) = 1) =&gt;&#10;      pre_max((s \ {m})))))&#10;" number="5" object="" resource="newspeakSL" toString="max, sm: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 564:17&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  (forall m in set s &amp;&#10;    (not ((card s) = 1) =&gt;&#10;      pre_max((s \ {m})))))&#10;"/>
<po column="3" line="570" message="intbinop: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 570:3&#10;(forall x:Int, y:Int, mk_NumOp(op):NumOp &amp;&#10;  op = (&lt;numplus&gt;) or op = (&lt;binaryminus&gt;) or op = (&lt;nummult&gt;) or op = (&lt;numdiv&gt;) or op = (&lt;nummod&gt;) or op = (&lt;nummax&gt;) or op = (&lt;nummin&gt;))&#10;" number="6" object="" resource="newspeakSL" toString="intbinop: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 570:3&#10;(forall x:Int, y:Int, mk_NumOp(op):NumOp &amp;&#10;  op = (&lt;numplus&gt;) or op = (&lt;binaryminus&gt;) or op = (&lt;nummult&gt;) or op = (&lt;numdiv&gt;) or op = (&lt;nummod&gt;) or op = (&lt;nummax&gt;) or op = (&lt;nummin&gt;))&#10;"/>
<po column="11" line="586" message="intplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 586:11&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(abs min(range)), (abs max(range))}))))&#10;" number="7" object="" resource="newspeakSL" toString="intplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 586:11&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(abs min(range)), (abs max(range))}))))&#10;"/>
<po column="20" line="586" message="intplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 586:20&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min(range))))&#10;" number="8" object="" resource="newspeakSL" toString="intplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 586:20&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min(range))))&#10;"/>
<po column="36" line="586" message="intplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 586:36&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max(range))))&#10;" number="9" object="" resource="newspeakSL" toString="intplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 586:36&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max(range))))&#10;"/>
<po column="26" line="588" message="intplus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 588:26&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min({(abs min(range)), (abs max(range))})))))&#10;" number="10" object="" resource="newspeakSL" toString="intplus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 588:26&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min({(abs min(range)), (abs max(range))})))))&#10;"/>
<po column="35" line="588" message="intplus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 588:35&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min(range)))))&#10;" number="11" object="" resource="newspeakSL" toString="intplus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 588:35&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min(range)))))&#10;"/>
<po column="50" line="588" message="intplus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 588:50&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_max(range)))))&#10;" number="12" object="" resource="newspeakSL" toString="intplus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 588:50&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i + j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_max(range)))))&#10;"/>
<po column="11" line="600" message="intbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 600:11&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(abs min(range)), (abs max(range))}))))&#10;" number="13" object="" resource="newspeakSL" toString="intbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 600:11&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(abs min(range)), (abs max(range))}))))&#10;"/>
<po column="20" line="600" message="intbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 600:20&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min(range))))&#10;" number="14" object="" resource="newspeakSL" toString="intbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 600:20&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min(range))))&#10;"/>
<po column="36" line="600" message="intbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 600:36&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max(range))))&#10;" number="15" object="" resource="newspeakSL" toString="intbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 600:36&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max(range))))&#10;"/>
<po column="26" line="602" message="intbinminus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 602:26&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min({(abs min(range)), (abs max(range))})))))&#10;" number="16" object="" resource="newspeakSL" toString="intbinminus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 602:26&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min({(abs min(range)), (abs max(range))})))))&#10;"/>
<po column="35" line="602" message="intbinminus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 602:35&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min(range)))))&#10;" number="17" object="" resource="newspeakSL" toString="intbinminus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 602:35&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_min(range)))))&#10;"/>
<po column="50" line="602" message="intbinminus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 602:50&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_max(range)))))&#10;" number="18" object="" resource="newspeakSL" toString="intbinminus, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 602:50&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (int) = {(i - j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        pre_max(range)))))&#10;"/>
<po column="6" line="612" message="intmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 612:6&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    pre_max({(abs min(range)), (abs max(range))})))&#10;" number="19" object="" resource="newspeakSL" toString="intmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 612:6&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    pre_max({(abs min(range)), (abs max(range))})))&#10;"/>
<po column="15" line="612" message="intmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 612:15&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    pre_min(range)))&#10;" number="20" object="" resource="newspeakSL" toString="intmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 612:15&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    pre_min(range)))&#10;"/>
<po column="31" line="612" message="intmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 612:31&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    pre_max(range)))&#10;" number="21" object="" resource="newspeakSL" toString="intmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 612:31&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    pre_max(range)))&#10;"/>
<po column="21" line="614" message="intmult, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 614:21&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;      pre_min({(abs min(range)), (abs max(range))}))))&#10;" number="22" object="" resource="newspeakSL" toString="intmult, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 614:21&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;      pre_min({(abs min(range)), (abs max(range))}))))&#10;"/>
<po column="30" line="614" message="intmult, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 614:30&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;      pre_min(range))))&#10;" number="23" object="" resource="newspeakSL" toString="intmult, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 614:30&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;      pre_min(range))))&#10;"/>
<po column="45" line="614" message="intmult, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 614:45&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;      pre_max(range))))&#10;" number="24" object="" resource="newspeakSL" toString="intmult, rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 614:45&#10;(forall x:Int, y:Int &amp;&#10;  (let fl:Flavdom = fl_mult(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i * j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;    (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;      pre_max(range))))&#10;"/>
<po column="24" line="625" message="intdiv, range: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 625:24&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;      j &lt;&gt; 0)))&#10;" number="25" object="" resource="newspeakSL" toString="intdiv, range: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 625:24&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;      j &lt;&gt; 0)))&#10;"/>
<po column="11" line="627" message="intdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 627:11&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(abs min(range)), (abs max(range))}))))&#10;" number="26" object="" resource="newspeakSL" toString="intdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 627:11&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(abs min(range)), (abs max(range))}))))&#10;"/>
<po column="20" line="627" message="intdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 627:20&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min(range))))&#10;" number="27" object="" resource="newspeakSL" toString="intdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 627:20&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min(range))))&#10;"/>
<po column="36" line="627" message="intdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 627:36&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max(range))))&#10;" number="28" object="" resource="newspeakSL" toString="intdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 627:36&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max(range))))&#10;"/>
<po column="26" line="631" message="intdiv: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 631:26&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if (exists [r in set range] &amp; ((abs r) &gt;= bytemax))&#10;        then &lt;word&gt;&#10;        else &lt;byte&gt;) in&#10;          (y.val) &lt;&gt; 0)))))&#10;" number="29" object="" resource="newspeakSL" toString="intdiv: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 631:26&#10;(forall x:Int, y:Int &amp;&#10;  (not (0 in set ((y.type).range)) =&gt;&#10;    (let fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)), range:set of (int) = {(i div j) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      (not (max({(abs min(range)), (abs max(range))}) &gt;= maxint) =&gt;&#10;        (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if (exists [r in set range] &amp; ((abs r) &gt;= bytemax))&#10;        then &lt;word&gt;&#10;        else &lt;byte&gt;) in&#10;          (y.val) &lt;&gt; 0)))))&#10;"/>
<po column="21" line="648" message="intmax, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 648:21&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;      pre_max({i, j}))))&#10;" number="30" object="" resource="newspeakSL" toString="intmax, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 648:21&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;      pre_max({i, j}))))&#10;"/>
<po column="15" line="650" message="intmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 650:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {max({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(x.val), (y.val)}))))&#10;" number="31" object="" resource="newspeakSL" toString="intmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 650:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {max({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_max({(x.val), (y.val)}))))&#10;"/>
<po column="49" line="650" message="intmax: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 650:49&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {max({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_(range, set of (int)))))&#10;" number="32" object="" resource="newspeakSL" toString="intmax: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 650:49&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {max({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_(range, set of (int)))))&#10;"/>
<po column="15" line="650" message="intmax: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 650:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {max({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_int(max({(x.val), (y.val)})))))&#10;" number="33" object="" resource="newspeakSL" toString="intmax: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 650:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {max({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_int(max({(x.val), (y.val)})))))&#10;"/>
<po column="21" line="658" message="intmin, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 658:21&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;      pre_min({i, j}))))&#10;" number="34" object="" resource="newspeakSL" toString="intmin, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 658:21&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;      pre_min({i, j}))))&#10;"/>
<po column="15" line="660" message="intmin: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 660:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {min({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min({(x.val), (y.val)}))))&#10;" number="35" object="" resource="newspeakSL" toString="intmin: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 660:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {min({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      pre_min({(x.val), (y.val)}))))&#10;"/>
<po column="49" line="660" message="intmin: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 660:49&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {min({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_(range, set of (int)))))&#10;" number="36" object="" resource="newspeakSL" toString="intmin: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 660:49&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {min({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_(range, set of (int)))))&#10;"/>
<po column="15" line="660" message="intmin: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 660:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {min({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_int(min({(x.val), (y.val)})))))&#10;" number="37" object="" resource="newspeakSL" toString="intmin: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 660:15&#10;(forall x:Int, y:Int &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let rep:(&lt;byte&gt; | &lt;word&gt;) = (if ((((x.type).rep) = &lt;word&gt;) or (((y.type).rep) = &lt;word&gt;))&#10;    then &lt;word&gt;&#10;    else &lt;byte&gt;), range:set of (real) = {min({i, j}) | [i in set ((x.type).range), j in set ((y.type).range)]} in&#10;      is_int(min({(x.val), (y.val)})))))&#10;"/>
<po column="14" line="683" message="intcomp, p: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 683:14&#10;(forall x:Int, y:Int, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall mk_(i, j):(int * int) &amp;&#10;      op = &lt;numgt&gt; or op = &lt;numlt&gt; or op = &lt;numge&gt; or op = &lt;numle&gt;)))&#10;" number="38" object="" resource="newspeakSL" toString="intcomp, p: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 683:14&#10;(forall x:Int, y:Int, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall mk_(i, j):(int * int) &amp;&#10;      op = &lt;numgt&gt; or op = &lt;numlt&gt; or op = &lt;numge&gt; or op = &lt;numle&gt;)))&#10;"/>
<po column="18" line="689" message="intcomp, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 689:18&#10;(forall x:Int, y:Int, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((int * int) -&gt; bool) = (lambda [mk_(i, j):(int * int)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j)&#10;    end)) in&#10;      pre_(p, mk_((x.val), (y.val))))))&#10;" number="39" object="" resource="newspeakSL" toString="intcomp, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 689:18&#10;(forall x:Int, y:Int, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((int * int) -&gt; bool) = (lambda [mk_(i, j):(int * int)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j)&#10;    end)) in&#10;      pre_(p, mk_((x.val), (y.val))))))&#10;"/>
<po column="21" line="690" message="intcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 690:21&#10;(forall x:Int, y:Int, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((int * int) -&gt; bool) = (lambda [mk_(i, j):(int * int)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j)&#10;    end)) in&#10;      (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;        pre_(p, mk_(i, j))))))&#10;" number="40" object="" resource="newspeakSL" toString="intcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 690:21&#10;(forall x:Int, y:Int, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((int * int) -&gt; bool) = (lambda [mk_(i, j):(int * int)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j)&#10;    end)) in&#10;      (forall i in set ((x.type).range), j in set ((y.type).range) &amp;&#10;        pre_(p, mk_(i, j))))))&#10;"/>
<po column="39" line="699" message="float: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:39&#10;(forall z:Int &amp;&#10;  pre_min(((z.type).range)))&#10;" number="41" object="" resource="newspeakSL" toString="float: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:39&#10;(forall z:Int &amp;&#10;  pre_min(((z.type).range)))&#10;"/>
<po column="57" line="699" message="float: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:57&#10;(forall z:Int &amp;&#10;  pre_max(((z.type).range)))&#10;" number="42" object="" resource="newspeakSL" toString="float: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:57&#10;(forall z:Int &amp;&#10;  pre_max(((z.type).range)))&#10;"/>
<po column="39" line="699" message="float: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:39&#10;(forall z:Int &amp;&#10;  is_int(min(((z.type).range))))&#10;" number="43" object="" resource="newspeakSL" toString="float: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:39&#10;(forall z:Int &amp;&#10;  is_int(min(((z.type).range))))&#10;"/>
<po column="57" line="699" message="float: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:57&#10;(forall z:Int &amp;&#10;  is_int(max(((z.type).range))))&#10;" number="44" object="" resource="newspeakSL" toString="float: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 699:57&#10;(forall z:Int &amp;&#10;  is_int(max(((z.type).range))))&#10;"/>
<po column="21" line="723" message="absreal, new_range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 723:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    pre_min({(abs (range.lower)), (abs (range.upper))})))&#10;" number="45" object="" resource="newspeakSL" toString="absreal, new_range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 723:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    pre_min({(abs (range.lower)), (abs (range.upper))})))&#10;"/>
<po column="21" line="724" message="absreal, new_range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 724:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    pre_max({(abs (range.lower)), (abs (range.upper))})))&#10;" number="46" object="" resource="newspeakSL" toString="absreal, new_range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 724:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    pre_max({(abs (range.lower)), (abs (range.upper))})))&#10;"/>
<po column="21" line="723" message="absreal, new_range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 723:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    is_int(min({(abs (range.lower)), (abs (range.upper))}))))&#10;" number="47" object="" resource="newspeakSL" toString="absreal, new_range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 723:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    is_int(min({(abs (range.lower)), (abs (range.upper))}))))&#10;"/>
<po column="21" line="724" message="absreal, new_range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 724:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    is_int(max({(abs (range.lower)), (abs (range.upper))}))))&#10;" number="48" object="" resource="newspeakSL" toString="absreal, new_range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 724:21&#10;(forall r:Real &amp;&#10;  (forall range in set ((r.type).range) &amp;&#10;    is_int(max({(abs (range.lower)), (abs (range.upper))}))))&#10;"/>
<po column="19" line="751" message="realplus, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 751:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]}))))&#10;" number="49" object="" resource="newspeakSL" toString="realplus, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 751:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]}))))&#10;"/>
<po column="19" line="753" message="realplus, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 753:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;" number="50" object="" resource="newspeakSL" toString="realplus, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 753:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;"/>
<po column="20" line="755" message="realplus, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 755:20&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({Xmax, Ymax})))&#10;" number="51" object="" resource="newspeakSL" toString="realplus, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 755:20&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({Xmax, Ymax})))&#10;"/>
<po column="11" line="756" message="realplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 756:11&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) + (yrange.lower)), ((xrange.upper) + (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}))))&#10;" number="52" object="" resource="newspeakSL" toString="realplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 756:11&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) + (yrange.lower)), ((xrange.upper) + (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}))))&#10;"/>
<po column="16" line="756" message="realplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 756:16&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) + (yrange.lower)), ((xrange.upper) + (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      (forall r in set range &amp;&#10;        pre_max({(abs (r.lower)), (abs (r.upper))})))))&#10;" number="53" object="" resource="newspeakSL" toString="realplus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 756:16&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) + (yrange.lower)), ((xrange.upper) + (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      (forall r in set range &amp;&#10;        pre_max({(abs (r.lower)), (abs (r.upper))})))))&#10;"/>
<po column="19" line="771" message="realbinminus, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 771:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]}))))&#10;" number="54" object="" resource="newspeakSL" toString="realbinminus, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 771:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]}))))&#10;"/>
<po column="19" line="773" message="realbinminus, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 773:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;" number="55" object="" resource="newspeakSL" toString="realbinminus, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 773:19&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;"/>
<po column="20" line="775" message="realbinminus, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 775:20&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({Xmax, Ymax})))&#10;" number="56" object="" resource="newspeakSL" toString="realbinminus, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 775:20&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({Xmax, Ymax})))&#10;"/>
<po column="11" line="776" message="realbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 776:11&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) - (yrange.upper)), ((xrange.upper) - (yrange.lower))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}))))&#10;" number="57" object="" resource="newspeakSL" toString="realbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 776:11&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) - (yrange.upper)), ((xrange.upper) - (yrange.lower))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}))))&#10;"/>
<po column="16" line="776" message="realbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 776:16&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) - (yrange.upper)), ((xrange.upper) - (yrange.lower))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      (forall r in set range &amp;&#10;        pre_max({(abs (r.lower)), (abs (r.upper))})))))&#10;" number="58" object="" resource="newspeakSL" toString="realbinminus: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 776:16&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) - (yrange.upper)), ((xrange.upper) - (yrange.lower))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;      (forall r in set range &amp;&#10;        pre_max({(abs (r.lower)), (abs (r.upper))})))))&#10;"/>
<po column="14" line="789" message="realmult, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 789:14&#10;(forall x:Real, y:Real &amp;&#10;  pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})))&#10;" number="59" object="" resource="newspeakSL" toString="realmult, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 789:14&#10;(forall x:Real, y:Real &amp;&#10;  pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})))&#10;"/>
<po column="14" line="791" message="realmult, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 791:14&#10;(forall x:Real, y:Real &amp;&#10;  pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})))&#10;" number="60" object="" resource="newspeakSL" toString="realmult, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 791:14&#10;(forall x:Real, y:Real &amp;&#10;  pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})))&#10;"/>
<po column="15" line="793" message="realmult, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 793:15&#10;(forall x:Real, y:Real &amp;&#10;  pre_max({Xmax, Ymax}))&#10;" number="61" object="" resource="newspeakSL" toString="realmult, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 793:15&#10;(forall x:Real, y:Real &amp;&#10;  pre_max({Xmax, Ymax}))&#10;"/>
<po column="10" line="794" message="realmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 794:10&#10;(forall x:Real, y:Real &amp;&#10;  (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) * (yrange.lower)), ((xrange.upper) * (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;    pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]})))&#10;" number="62" object="" resource="newspeakSL" toString="realmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 794:10&#10;(forall x:Real, y:Real &amp;&#10;  (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) * (yrange.lower)), ((xrange.upper) * (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;    pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]})))&#10;"/>
<po column="15" line="794" message="realmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 794:15&#10;(forall x:Real, y:Real &amp;&#10;  (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) * (yrange.lower)), ((xrange.upper) * (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;    (forall r in set range &amp;&#10;      pre_max({(abs (r.lower)), (abs (r.upper))}))))&#10;" number="63" object="" resource="newspeakSL" toString="realmult: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 794:15&#10;(forall x:Real, y:Real &amp;&#10;  (let range:set of (Floatrng) = {mk_Floatrng(((xrange.lower) * (yrange.lower)), ((xrange.upper) * (yrange.upper))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}) in&#10;    (forall r in set range &amp;&#10;      pre_max({(abs (r.lower)), (abs (r.upper))}))))&#10;"/>
<po column="28" line="806" message="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 806:28&#10;(forall x:Real, y:Real &amp;&#10;  pre_min({(range.lower) | [range in set ((y.type).range)]}))&#10;" number="64" object="" resource="newspeakSL" toString="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 806:28&#10;(forall x:Real, y:Real &amp;&#10;  pre_min({(range.lower) | [range in set ((y.type).range)]}))&#10;"/>
<po column="28" line="808" message="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 808:28&#10;(forall x:Real, y:Real &amp;&#10;  (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) =&gt;&#10;    pre_max({(range.upper) | [range in set ((y.type).range)]})))&#10;" number="65" object="" resource="newspeakSL" toString="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 808:28&#10;(forall x:Real, y:Real &amp;&#10;  (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) =&gt;&#10;    pre_max({(range.upper) | [range in set ((y.type).range)]})))&#10;"/>
<po column="53" line="811" message="realdiv, range: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 811:53&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (forall xrange in set ((x.type).range), yrange in set ((y.type).range) &amp;&#10;      (yrange.upper) &lt;&gt; 0)))&#10;" number="66" object="" resource="newspeakSL" toString="realdiv, range: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 811:53&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (forall xrange in set ((x.type).range), yrange in set ((y.type).range) &amp;&#10;      (yrange.upper) &lt;&gt; 0)))&#10;"/>
<po column="47" line="812" message="realdiv, range: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 812:47&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (forall xrange in set ((x.type).range), yrange in set ((y.type).range) &amp;&#10;      (yrange.lower) &lt;&gt; 0)))&#10;" number="67" object="" resource="newspeakSL" toString="realdiv, range: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 812:47&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (forall xrange in set ((x.type).range), yrange in set ((y.type).range) &amp;&#10;      (yrange.lower) &lt;&gt; 0)))&#10;"/>
<po column="14" line="815" message="realdiv, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 815:14&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]}))))&#10;" number="68" object="" resource="newspeakSL" toString="realdiv, Xmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 815:14&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]}))))&#10;"/>
<po column="14" line="817" message="realdiv, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 817:14&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;" number="69" object="" resource="newspeakSL" toString="realdiv, Ymax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 817:14&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;"/>
<po column="15" line="819" message="realdiv, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 819:15&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_max({Xmax, Ymax})))&#10;" number="70" object="" resource="newspeakSL" toString="realdiv, XYmax: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 819:15&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_max({Xmax, Ymax})))&#10;"/>
<po column="14" line="820" message="realdiv, Ymin: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 820:14&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;" number="71" object="" resource="newspeakSL" toString="realdiv, Ymin: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 820:14&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    pre_min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]}))))&#10;"/>
<po column="11" line="822" message="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 822:11&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}))))&#10;" number="72" object="" resource="newspeakSL" toString="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 822:11&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      pre_max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}))))&#10;"/>
<po column="16" line="822" message="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 822:16&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (forall r in set range &amp;&#10;        pre_max({(abs (r.lower)), (abs (r.upper))})))))&#10;" number="73" object="" resource="newspeakSL" toString="realdiv: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 822:16&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (forall r in set range &amp;&#10;        pre_max({(abs (r.lower)), (abs (r.upper))})))))&#10;"/>
<po column="38" line="825" message="realdiv, As: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 825:38&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (not (max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}) &gt;= maxint) =&gt;&#10;        pre_max({((x.type).relerr), ((y.type).relerr)})))))&#10;" number="74" object="" resource="newspeakSL" toString="realdiv, As: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 825:38&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (not (max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}) &gt;= maxint) =&gt;&#10;        pre_max({((x.type).relerr), ((y.type).relerr)})))))&#10;"/>
<po column="23" line="827" message="realdiv, As: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 827:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (not (max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}) &gt;= maxint) =&gt;&#10;        (Ymin ** 2) &lt;&gt; 0))))&#10;" number="75" object="" resource="newspeakSL" toString="realdiv, As: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 827:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (not (max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}) &gt;= maxint) =&gt;&#10;        (Ymin ** 2) &lt;&gt; 0))))&#10;"/>
<po column="25" line="829" message="realdiv: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 829:25&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (not (max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}) &gt;= maxint) =&gt;&#10;        (let As:real = ((((((Xmax * Ymax) * max({((x.type).relerr), ((y.type).relerr)})) + (Ymax * ((x.type).abserr))) + (Xmax * ((y.type).abserr))) / (Ymin ** 2)) + (epsilon_t * XYmax)), fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)) in&#10;          (y.val) &lt;&gt; 0)))))&#10;" number="76" object="" resource="newspeakSL" toString="realdiv: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 829:25&#10;(forall x:Real, y:Real &amp;&#10;  (not (((((1 - ((y.type).relerr)) * min({(range.lower) | [range in set ((y.type).range)]})) - ((y.type).abserr)) &lt;= 0) and ((((1 + ((y.type).relerr)) * max({(range.upper) | [range in set ((y.type).range)]})) + ((y.type).abserr)) &gt;= 0)) =&gt;&#10;    (let range:set of (Floatrng) = {mk_Floatrng((floor ((xrange.lower) / (yrange.upper))), (floor (0.5 + ((xrange.upper) / (yrange.lower))))) | [xrange in set ((x.type).range), yrange in set ((y.type).range)]}, Xmax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((x.type).range)]})), Ymax:real = max((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})), XYmax:real = max({Xmax, Ymax}), Ymin:real = min((dunion {{(abs (range.lower)), (abs (range.upper))} | [range in set ((y.type).range)]})) in&#10;      (not (max({max({(abs (r.lower)), (abs (r.upper))}) | [r in set range]}) &gt;= maxint) =&gt;&#10;        (let As:real = ((((((Xmax * Ymax) * max({((x.type).relerr), ((y.type).relerr)})) + (Ymax * ((x.type).abserr))) + (Xmax * ((y.type).abserr))) / (Ymin ** 2)) + (epsilon_t * XYmax)), fl:Flavdom = fl_div(((x.type).fl), ((y.type).fl)) in&#10;          (y.val) &lt;&gt; 0)))))&#10;"/>
<po column="18" line="836" message="realmax, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 836:18&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({(x.val), (y.val)})))&#10;" number="77" object="" resource="newspeakSL" toString="realmax, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 836:18&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({(x.val), (y.val)})))&#10;"/>
<po column="21" line="837" message="realmax, abserr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 837:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).abserr), ((y.type).abserr)})))&#10;" number="78" object="" resource="newspeakSL" toString="realmax, abserr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 837:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).abserr), ((y.type).abserr)})))&#10;"/>
<po column="21" line="838" message="realmax, relerr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 838:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).relerr), ((y.type).relerr)})))&#10;" number="79" object="" resource="newspeakSL" toString="realmax, relerr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 838:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).relerr), ((y.type).relerr)})))&#10;"/>
<po column="34" line="839" message="realmax, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 839:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_max({(xr.lower), (yr.lower)}))))&#10;" number="80" object="" resource="newspeakSL" toString="realmax, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 839:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_max({(xr.lower), (yr.lower)}))))&#10;"/>
<po column="23" line="840" message="realmax, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 840:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_max({(xr.upper), (yr.upper)}))))&#10;" number="81" object="" resource="newspeakSL" toString="realmax, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 840:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_max({(xr.upper), (yr.upper)}))))&#10;"/>
<po column="34" line="839" message="realmax, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 839:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(max({(xr.lower), (yr.lower)})))))&#10;" number="82" object="" resource="newspeakSL" toString="realmax, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 839:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(max({(xr.lower), (yr.lower)})))))&#10;"/>
<po column="23" line="840" message="realmax, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 840:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(max({(xr.upper), (yr.upper)})))))&#10;" number="83" object="" resource="newspeakSL" toString="realmax, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 840:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(max({(xr.upper), (yr.upper)})))))&#10;"/>
<po column="18" line="850" message="realmin, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 850:18&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_min({(x.val), (y.val)})))&#10;" number="84" object="" resource="newspeakSL" toString="realmin, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 850:18&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_min({(x.val), (y.val)})))&#10;"/>
<po column="21" line="851" message="realmin, abserr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 851:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).abserr), ((y.type).abserr)})))&#10;" number="85" object="" resource="newspeakSL" toString="realmin, abserr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 851:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).abserr), ((y.type).abserr)})))&#10;"/>
<po column="21" line="852" message="realmin, relerr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 852:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).relerr), ((y.type).relerr)})))&#10;" number="86" object="" resource="newspeakSL" toString="realmin, relerr: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 852:21&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    pre_max({((x.type).relerr), ((y.type).relerr)})))&#10;"/>
<po column="34" line="853" message="realmin, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 853:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_min({(xr.lower), (yr.lower)}))))&#10;" number="87" object="" resource="newspeakSL" toString="realmin, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 853:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_min({(xr.lower), (yr.lower)}))))&#10;"/>
<po column="23" line="854" message="realmin, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 854:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_min({(xr.upper), (yr.upper)}))))&#10;" number="88" object="" resource="newspeakSL" toString="realmin, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 854:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      pre_min({(xr.upper), (yr.upper)}))))&#10;"/>
<po column="34" line="853" message="realmin, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 853:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(min({(xr.lower), (yr.lower)})))))&#10;" number="89" object="" resource="newspeakSL" toString="realmin, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 853:34&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(min({(xr.lower), (yr.lower)})))))&#10;"/>
<po column="23" line="854" message="realmin, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 854:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(min({(xr.upper), (yr.upper)})))))&#10;" number="90" object="" resource="newspeakSL" toString="realmin, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 854:23&#10;(forall x:Real, y:Real &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall xr in set ((x.type).range), yr in set ((y.type).range) &amp;&#10;      is_int(min({(xr.upper), (yr.upper)})))))&#10;"/>
<po column="11" line="879" message="realcomp, p: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 879:11&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall mk_(i, j):(real * real) &amp;&#10;      op = &lt;numgt&gt; or op = &lt;numlt&gt; or op = &lt;numle&gt; or op = &lt;numge&gt;)))&#10;" number="91" object="" resource="newspeakSL" toString="realcomp, p: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 879:11&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (forall mk_(i, j):(real * real) &amp;&#10;      op = &lt;numgt&gt; or op = &lt;numlt&gt; or op = &lt;numle&gt; or op = &lt;numge&gt;)))&#10;"/>
<po column="19" line="891" message="realcomp, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 891:19&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      pre_(p, mk_((x.val), (y.val))))))&#10;" number="92" object="" resource="newspeakSL" toString="realcomp, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 891:19&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      pre_(p, mk_((x.val), (y.val))))))&#10;"/>
<po column="24" line="892" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 892:24&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      pre_max(xrange))))&#10;" number="93" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 892:24&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      pre_max(xrange))))&#10;"/>
<po column="38" line="892" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 892:38&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      pre_min(yrange))))&#10;" number="94" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 892:38&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      pre_min(yrange))))&#10;"/>
<po column="27" line="893" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 893:27&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      ((max(xrange) &lt; min(yrange)) =&gt;&#10;        pre_(p, mk_(max(xrange), min(yrange)))))))&#10;" number="95" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 893:27&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      ((max(xrange) &lt; min(yrange)) =&gt;&#10;        pre_(p, mk_(max(xrange), min(yrange)))))))&#10;"/>
<po column="33" line="893" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 893:33&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      ((max(xrange) &lt; min(yrange)) =&gt;&#10;        pre_max(xrange)))))&#10;" number="96" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 893:33&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      ((max(xrange) &lt; min(yrange)) =&gt;&#10;        pre_max(xrange)))))&#10;"/>
<po column="45" line="893" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 893:45&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      ((max(xrange) &lt; min(yrange)) =&gt;&#10;        pre_min(yrange)))))&#10;" number="97" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 893:45&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      ((max(xrange) &lt; min(yrange)) =&gt;&#10;        pre_min(yrange)))))&#10;"/>
<po column="27" line="895" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 895:27&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      (not (max(xrange) &lt; min(yrange)) =&gt;&#10;        ((min(xrange) &gt; max(yrange)) =&gt;&#10;          pre_(p, mk_(max(yrange), min(xrange))))))))&#10;" number="98" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 895:27&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      (not (max(xrange) &lt; min(yrange)) =&gt;&#10;        ((min(xrange) &gt; max(yrange)) =&gt;&#10;          pre_(p, mk_(max(yrange), min(xrange))))))))&#10;"/>
<po column="33" line="895" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 895:33&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      (not (max(xrange) &lt; min(yrange)) =&gt;&#10;        ((min(xrange) &gt; max(yrange)) =&gt;&#10;          pre_max(yrange))))))&#10;" number="99" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 895:33&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      (not (max(xrange) &lt; min(yrange)) =&gt;&#10;        ((min(xrange) &gt; max(yrange)) =&gt;&#10;          pre_max(yrange))))))&#10;"/>
<po column="45" line="895" message="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 895:45&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      (not (max(xrange) &lt; min(yrange)) =&gt;&#10;        ((min(xrange) &gt; max(yrange)) =&gt;&#10;          pre_min(xrange))))))&#10;" number="100" object="" resource="newspeakSL" toString="realcomp, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 895:45&#10;(forall x:Real, y:Real, op:CompOp &amp;&#10;  (not (((x.type).fl) &lt;&gt; ((y.type).fl)) =&gt;&#10;    (let p:((real * real) -&gt; bool) = (lambda [mk_(i, j):(real * real)] &amp; (cases op :&#10;    case &lt;numgt&gt; -&gt; (i &gt; j),&#10;    case &lt;numlt&gt; -&gt; (i &lt; j),&#10;    case &lt;numle&gt; -&gt; (i &lt;= j),&#10;    case &lt;numge&gt; -&gt; (i &gt;= j)&#10;    end)), xrange:set of (int) = (dunion {{(((1 - ((x.type).relerr)) * (range.lower)) - ((x.type).abserr)), ... ,(((1 + ((x.type).relerr)) * (range.upper)) + ((x.type).abserr))} | [range in set ((x.type).range)]}), yrange:set of (int) = (dunion {{(((1 - ((y.type).relerr)) * (range.lower)) - ((y.type).abserr)), ... ,(((1 + ((y.type).relerr)) * (range.upper)) + ((y.type).abserr))} | [range in set ((y.type).range)]}) in&#10;      (not (max(xrange) &lt; min(yrange)) =&gt;&#10;        ((min(xrange) &gt; max(yrange)) =&gt;&#10;          pre_min(xrange))))))&#10;"/>
<po column="11" line="901" message="inf, m: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 901:11&#10;(forall r:Real &amp;&#10;  pre_min({(range.lower) | [range in set ((r.type).range)]}))&#10;" number="101" object="" resource="newspeakSL" toString="inf, m: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 901:11&#10;(forall r:Real &amp;&#10;  pre_min({(range.lower) | [range in set ((r.type).range)]}))&#10;"/>
<po column="35" line="903" message="inf: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 903:35&#10;(forall r:Real &amp;&#10;  (let m:real = ((min({(range.lower) | [range in set ((r.type).range)]}) * (1 - ((r.type).relerr))) - ((r.type).abserr)) in&#10;    is_int(m)))&#10;" number="102" object="" resource="newspeakSL" toString="inf: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 903:35&#10;(forall r:Real &amp;&#10;  (let m:real = ((min({(range.lower) | [range in set ((r.type).range)]}) * (1 - ((r.type).relerr))) - ((r.type).abserr)) in&#10;    is_int(m)))&#10;"/>
<po column="37" line="903" message="inf: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 903:37&#10;(forall r:Real &amp;&#10;  (let m:real = ((min({(range.lower) | [range in set ((r.type).range)]}) * (1 - ((r.type).relerr))) - ((r.type).abserr)) in&#10;    is_int(m)))&#10;" number="103" object="" resource="newspeakSL" toString="inf: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 903:37&#10;(forall r:Real &amp;&#10;  (let m:real = ((min({(range.lower) | [range in set ((r.type).range)]}) * (1 - ((r.type).relerr))) - ((r.type).abserr)) in&#10;    is_int(m)))&#10;"/>
<po column="11" line="907" message="sup, m: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 907:11&#10;(forall r:Real &amp;&#10;  pre_max({(range.upper) | [range in set ((r.type).range)]}))&#10;" number="104" object="" resource="newspeakSL" toString="sup, m: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 907:11&#10;(forall r:Real &amp;&#10;  pre_max({(range.upper) | [range in set ((r.type).range)]}))&#10;"/>
<po column="35" line="909" message="sup: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 909:35&#10;(forall r:Real &amp;&#10;  (let m:real = ((max({(range.upper) | [range in set ((r.type).range)]}) * (1 + ((r.type).relerr))) + ((r.type).abserr)) in&#10;    is_int(m)))&#10;" number="105" object="" resource="newspeakSL" toString="sup: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 909:35&#10;(forall r:Real &amp;&#10;  (let m:real = ((max({(range.upper) | [range in set ((r.type).range)]}) * (1 + ((r.type).relerr))) + ((r.type).abserr)) in&#10;    is_int(m)))&#10;"/>
<po column="37" line="909" message="sup: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 909:37&#10;(forall r:Real &amp;&#10;  (let m:real = ((max({(range.upper) | [range in set ((r.type).range)]}) * (1 + ((r.type).relerr))) + ((r.type).abserr)) in&#10;    is_int(m)))&#10;" number="106" object="" resource="newspeakSL" toString="sup: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 909:37&#10;(forall r:Real &amp;&#10;  (let m:real = ((max({(range.upper) | [range in set ((r.type).range)]}) * (1 + ((r.type).relerr))) + ((r.type).abserr)) in&#10;    is_int(m)))&#10;"/>
<po column="37" line="919" message="relonly, rel: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 919:37&#10;(forall mk_Real(r, f):Real &amp;&#10;  (not (r = 0) =&gt;&#10;    r &lt;&gt; 0))&#10;" number="107" object="" resource="newspeakSL" toString="relonly, rel: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 919:37&#10;(forall mk_Real(r, f):Real &amp;&#10;  (not (r = 0) =&gt;&#10;    r &lt;&gt; 0))&#10;"/>
<po column="29" line="925" message="abserr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 925:29&#10;(forall r:Real &amp;&#10;  is_int(((r.type).abserr)))&#10;" number="108" object="" resource="newspeakSL" toString="abserr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 925:29&#10;(forall r:Real &amp;&#10;  is_int(((r.type).abserr)))&#10;"/>
<po column="43" line="925" message="abserr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 925:43&#10;(forall r:Real &amp;&#10;  is_int(((r.type).abserr)))&#10;" number="109" object="" resource="newspeakSL" toString="abserr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 925:43&#10;(forall r:Real &amp;&#10;  is_int(((r.type).abserr)))&#10;"/>
<po column="29" line="930" message="relerr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 930:29&#10;(forall r:Real &amp;&#10;  is_int(((r.type).relerr)))&#10;" number="110" object="" resource="newspeakSL" toString="relerr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 930:29&#10;(forall r:Real &amp;&#10;  is_int(((r.type).relerr)))&#10;"/>
<po column="43" line="930" message="relerr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 930:43&#10;(forall r:Real &amp;&#10;  is_int(((r.type).relerr)))&#10;" number="111" object="" resource="newspeakSL" toString="relerr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 930:43&#10;(forall r:Real &amp;&#10;  is_int(((r.type).relerr)))&#10;"/>
<po column="33" line="943" message="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 943:33&#10;(forall v:Component, t:CompType &amp;&#10;  (is_(v, real) =&gt;&#10;    is_(t, Float)))&#10;" number="112" object="" resource="newspeakSL" toString="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 943:33&#10;(forall v:Component, t:CompType &amp;&#10;  (is_(v, real) =&gt;&#10;    is_(t, Float)))&#10;"/>
<po column="32" line="944" message="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 944:32&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (is_(v, bool) =&gt;&#10;      is_(v, bool))))&#10;" number="113" object="" resource="newspeakSL" toString="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 944:32&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (is_(v, bool) =&gt;&#10;      is_(v, bool))))&#10;"/>
<po column="34" line="944" message="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 944:34&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (is_(v, bool) =&gt;&#10;      is_(t, TrType))))&#10;" number="114" object="" resource="newspeakSL" toString="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 944:34&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (is_(v, bool) =&gt;&#10;      is_(t, TrType))))&#10;"/>
<po column="15" line="945" message="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 945:15&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (not is_(v, bool) =&gt;&#10;      is_int(v))))&#10;" number="115" object="" resource="newspeakSL" toString="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 945:15&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (not is_(v, bool) =&gt;&#10;      is_int(v))))&#10;"/>
<po column="17" line="945" message="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 945:17&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (not is_(v, bool) =&gt;&#10;      is_(t, IntType))))&#10;" number="116" object="" resource="newspeakSL" toString="construct_ev: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 945:17&#10;(forall v:Component, t:CompType &amp;&#10;  (not is_(v, real) =&gt;&#10;    (not is_(v, bool) =&gt;&#10;      is_(t, IntType))))&#10;"/>
<po column="45" line="949" message="comp_extract, matches: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 949:45&#10;(forall s:Structure, fl:Flavdom &amp;&#10;  (forall i in set (inds (s.val)) &amp;&#10;    i in set inds ((s.type).tps)))&#10;" number="117" object="" resource="newspeakSL" toString="comp_extract, matches: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 949:45&#10;(forall s:Structure, fl:Flavdom &amp;&#10;  (forall i in set (inds (s.val)) &amp;&#10;    i in set inds ((s.type).tps)))&#10;"/>
<po column="18" line="953" message="comp_extract: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 953:18&#10;(forall s:Structure, fl:Flavdom &amp;&#10;  (let matches:set of (nat1) = {i | [i in set (inds (s.val))] &amp; ((((s.type).tps)(i).fl) = fl)} in&#10;    (not ((card matches) &lt;&gt; 1) =&gt;&#10;      (let {i}:set of (nat1) = matches in&#10;        i in set inds (s.val)))))&#10;" number="118" object="" resource="newspeakSL" toString="comp_extract: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 953:18&#10;(forall s:Structure, fl:Flavdom &amp;&#10;  (let matches:set of (nat1) = {i | [i in set (inds (s.val))] &amp; ((((s.type).tps)(i).fl) = fl)} in&#10;    (not ((card matches) &lt;&gt; 1) =&gt;&#10;      (let {i}:set of (nat1) = matches in&#10;        i in set inds (s.val)))))&#10;"/>
<po column="27" line="953" message="comp_extract: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 953:27&#10;(forall s:Structure, fl:Flavdom &amp;&#10;  (let matches:set of (nat1) = {i | [i in set (inds (s.val))] &amp; ((((s.type).tps)(i).fl) = fl)} in&#10;    (not ((card matches) &lt;&gt; 1) =&gt;&#10;      (let {i}:set of (nat1) = matches in&#10;        i in set inds ((s.type).tps)))))&#10;" number="119" object="" resource="newspeakSL" toString="comp_extract: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 953:27&#10;(forall s:Structure, fl:Flavdom &amp;&#10;  (let matches:set of (nat1) = {i | [i in set (inds (s.val))] &amp; ((((s.type).tps)(i).fl) = fl)} in&#10;    (not ((card matches) &lt;&gt; 1) =&gt;&#10;      (let {i}:set of (nat1) = matches in&#10;        i in set inds ((s.type).tps)))))&#10;"/>
<po column="3" line="961" message="vector_extract: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 961:3&#10;(forall v:Vector, i:int &amp;&#10;  ((i - ((v.type).lower)) + 1) in set inds (v.val))&#10;" number="120" object="" resource="newspeakSL" toString="vector_extract: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 961:3&#10;(forall v:Vector, i:int &amp;&#10;  ((i - ((v.type).lower)) + 1) in set inds (v.val))&#10;"/>
<po column="1" line="959" message="vector_extract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 959:1&#10;(forall v:Vector, i:int &amp;&#10;  ((is_((v.val)(((i - ((v.type).lower)) + 1)), Errvalue)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Int)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Real)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Structure)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Tr)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Union)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Vector)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Void))))&#10;" number="121" object="" resource="newspeakSL" toString="vector_extract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 959:1&#10;(forall v:Vector, i:int &amp;&#10;  ((is_((v.val)(((i - ((v.type).lower)) + 1)), Errvalue)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Int)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Real)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Structure)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Tr)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Union)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Vector)) or&#10;  (is_((v.val)(((i - ((v.type).lower)) + 1)), Void))))&#10;"/>
<po column="1" line="967" message="vector_length: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 967:1&#10;(forall v:VectorType &amp;&#10;  ((((v.type).upper) - ((v.type).lower)) + 1) &gt;= 0)&#10;" number="122" object="" resource="newspeakSL" toString="vector_length: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 967:1&#10;(forall v:VectorType &amp;&#10;  ((((v.type).upper) - ((v.type).lower)) + 1) &gt;= 0)&#10;"/>
<po column="1" line="971" message="vector_flatten: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 971:1&#10;(forall vs:VectorValue &amp;&#10;  ((is_((conc vs), seq1 of (Errvalue))) or&#10;  (is_((conc vs), seq1 of (Int))) or&#10;  (is_((conc vs), seq1 of (Real))) or&#10;  (is_((conc vs), seq1 of (StructValue))) or&#10;  (is_((conc vs), seq1 of (Tr))) or&#10;  (is_((conc vs), seq1 of (VectorValue))) or&#10;  (is_((conc vs), seq1 of (Void)))))&#10;" number="123" object="" resource="newspeakSL" toString="vector_flatten: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 971:1&#10;(forall vs:VectorValue &amp;&#10;  ((is_((conc vs), seq1 of (Errvalue))) or&#10;  (is_((conc vs), seq1 of (Int))) or&#10;  (is_((conc vs), seq1 of (Real))) or&#10;  (is_((conc vs), seq1 of (StructValue))) or&#10;  (is_((conc vs), seq1 of (Tr))) or&#10;  (is_((conc vs), seq1 of (VectorValue))) or&#10;  (is_((conc vs), seq1 of (Void)))))&#10;"/>
<po column="11" line="978" message="vector_sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 978:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="124" object="" resource="newspeakSL" toString="vector_sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 978:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="30" line="979" message="vector_sum, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 979:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="125" object="" resource="newspeakSL" toString="vector_sum, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 979:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="19" line="983" message="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 983:19&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;" number="126" object="" resource="newspeakSL" toString="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 983:19&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;"/>
<po column="24" line="983" message="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 983:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;" number="127" object="" resource="newspeakSL" toString="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 983:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;"/>
<po column="22" line="983" message="vector_sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 983:22&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="128" object="" resource="newspeakSL" toString="vector_sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 983:22&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="18" line="984" message="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 984:18&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;" number="129" object="" resource="newspeakSL" toString="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 984:18&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;"/>
<po column="23" line="984" message="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 984:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;" number="130" object="" resource="newspeakSL" toString="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 984:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;"/>
<po column="21" line="984" message="vector_sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 984:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="131" object="" resource="newspeakSL" toString="vector_sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 984:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_sum((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="1" line="975" message="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 975:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Void))))&#10;" number="132" object="" resource="newspeakSL" toString="vector_sum: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 975:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_sum((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realplus((hd v), s)&#10;  else intplus((hd v), s))), Void))))&#10;"/>
<po column="11" line="989" message="vector_product: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 989:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="133" object="" resource="newspeakSL" toString="vector_product: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 989:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="34" line="990" message="vector_product, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 990:34&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="134" object="" resource="newspeakSL" toString="vector_product, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 990:34&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="19" line="994" message="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 994:19&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;" number="135" object="" resource="newspeakSL" toString="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 994:19&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;"/>
<po column="24" line="994" message="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 994:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;" number="136" object="" resource="newspeakSL" toString="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 994:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;"/>
<po column="22" line="994" message="vector_product: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 994:22&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="137" object="" resource="newspeakSL" toString="vector_product: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 994:22&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="18" line="995" message="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 995:18&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;" number="138" object="" resource="newspeakSL" toString="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 995:18&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;"/>
<po column="23" line="995" message="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 995:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;" number="139" object="" resource="newspeakSL" toString="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 995:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;"/>
<po column="21" line="995" message="vector_product: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 995:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="140" object="" resource="newspeakSL" toString="vector_product: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 995:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_product((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="1" line="986" message="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 986:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Void))))&#10;" number="141" object="" resource="newspeakSL" toString="vector_product: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 986:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_product((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmult((hd v), s)&#10;  else intmult((hd v), s))), Void))))&#10;"/>
<po column="11" line="1001" message="vector_all: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1001:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="142" object="" resource="newspeakSL" toString="vector_all: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1001:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="30" line="1002" message="vector_all, b: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1002:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="143" object="" resource="newspeakSL" toString="vector_all, b: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1002:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="20" line="1005" message="vector_all: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1005:20&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_all((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_((hd v), Tr)))))&#10;" number="144" object="" resource="newspeakSL" toString="vector_all: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1005:20&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_all((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_((hd v), Tr)))))&#10;"/>
<po column="25" line="1005" message="vector_all: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1005:25&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_all((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_(b, Tr)))))&#10;" number="145" object="" resource="newspeakSL" toString="vector_all: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1005:25&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_all((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_(b, Tr)))))&#10;"/>
<po column="23" line="1005" message="vector_all: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1005:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_all((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        v &lt;&gt; []))))&#10;" number="146" object="" resource="newspeakSL" toString="vector_all: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1005:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_all((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        v &lt;&gt; []))))&#10;"/>
<po column="1" line="998" message="vector_all: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 998:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Void))))&#10;" number="147" object="" resource="newspeakSL" toString="vector_all: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 998:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_all((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_and((hd v), b))), Void))))&#10;"/>
<po column="11" line="1010" message="vector_some: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1010:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="148" object="" resource="newspeakSL" toString="vector_some: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1010:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="31" line="1011" message="vector_some, b: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1011:31&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="149" object="" resource="newspeakSL" toString="vector_some, b: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1011:31&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="19" line="1014" message="vector_some: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1014:19&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_some((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_((hd v), Tr)))))&#10;" number="150" object="" resource="newspeakSL" toString="vector_some: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1014:19&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_some((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_((hd v), Tr)))))&#10;"/>
<po column="24" line="1014" message="vector_some: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1014:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_some((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_(b, Tr)))))&#10;" number="151" object="" resource="newspeakSL" toString="vector_some: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1014:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_some((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        is_(b, Tr)))))&#10;"/>
<po column="22" line="1014" message="vector_some: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1014:22&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_some((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        v &lt;&gt; []))))&#10;" number="152" object="" resource="newspeakSL" toString="vector_some: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1014:22&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let b:Expressible_value = vector_some((tl v)) in&#10;      (not (b = &lt;err&gt;) =&gt;&#10;        v &lt;&gt; []))))&#10;"/>
<po column="1" line="1007" message="vector_some: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1007:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Void))))&#10;" number="153" object="" resource="newspeakSL" toString="vector_some: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1007:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let b:Expressible_value = vector_some((tl v)) in (if (b = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else tr_or((hd v), b))), Void))))&#10;"/>
<po column="11" line="1019" message="vector_max: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1019:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="154" object="" resource="newspeakSL" toString="vector_max: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1019:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="30" line="1020" message="vector_max, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1020:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="155" object="" resource="newspeakSL" toString="vector_max, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1020:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="21" line="1024" message="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1024:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;" number="156" object="" resource="newspeakSL" toString="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1024:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;"/>
<po column="26" line="1024" message="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1024:26&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;" number="157" object="" resource="newspeakSL" toString="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1024:26&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;"/>
<po column="24" line="1024" message="vector_max: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1024:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="158" object="" resource="newspeakSL" toString="vector_max: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1024:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="20" line="1025" message="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1025:20&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;" number="159" object="" resource="newspeakSL" toString="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1025:20&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;"/>
<po column="25" line="1025" message="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1025:25&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;" number="160" object="" resource="newspeakSL" toString="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1025:25&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;"/>
<po column="23" line="1025" message="vector_max: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1025:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="161" object="" resource="newspeakSL" toString="vector_max: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1025:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_max((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="1" line="1016" message="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1016:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Void))))&#10;" number="162" object="" resource="newspeakSL" toString="vector_max: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1016:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_max((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmax((hd v), s)&#10;  else intmax((hd v), s))), Void))))&#10;"/>
<po column="11" line="1030" message="vector_min: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1030:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="163" object="" resource="newspeakSL" toString="vector_min: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1030:11&#10;(forall v:VectorValue &amp;&#10;  (((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="30" line="1031" message="vector_min, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1031:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;" number="164" object="" resource="newspeakSL" toString="vector_min, s: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1031:30&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    v &lt;&gt; []))&#10;"/>
<po column="21" line="1035" message="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1035:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;" number="165" object="" resource="newspeakSL" toString="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1035:21&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_((hd v), Real))))))&#10;"/>
<po column="26" line="1035" message="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1035:26&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;" number="166" object="" resource="newspeakSL" toString="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1035:26&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          is_(s, Real))))))&#10;"/>
<po column="24" line="1035" message="vector_min: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1035:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="167" object="" resource="newspeakSL" toString="vector_min: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1035:24&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="20" line="1036" message="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1036:20&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;" number="168" object="" resource="newspeakSL" toString="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1036:20&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_((hd v), Int))))))&#10;"/>
<po column="25" line="1036" message="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1036:25&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;" number="169" object="" resource="newspeakSL" toString="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1036:25&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          is_(s, Int))))))&#10;"/>
<po column="23" line="1036" message="vector_min: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1036:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;" number="170" object="" resource="newspeakSL" toString="vector_min: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1036:23&#10;(forall v:VectorValue &amp;&#10;  (not ((len v) = 1) =&gt;&#10;    (let s:Expressible_value = vector_min((tl v)) in&#10;      (not (s = &lt;err&gt;) =&gt;&#10;        (not is_((hd v), Real) =&gt;&#10;          v &lt;&gt; [])))))&#10;"/>
<po column="1" line="1027" message="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1027:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Void))))&#10;" number="171" object="" resource="newspeakSL" toString="vector_min: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1027:1&#10;(forall v:VectorValue &amp;&#10;  ((is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Errvalue)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Int)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Real)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Structure)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Tr)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Union)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Vector)) or&#10;  (is_((if ((len v) = 1)&#10;  then (hd v)&#10;  else let s:Expressible_value = vector_min((tl v)) in (if (s = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  elseif is_((hd v), Real)&#10;  then realmin((hd v), s)&#10;  else intmin((hd v), s))), Void))))&#10;"/>
<po column="17" line="1048" message="vector_concat: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1048:17&#10;(forall v1:Vector, v2:Vector &amp;&#10;  (let type:Expressible_type = (if tleq(((v1.type).type), ((v2.type).type))&#10;  then ((v2.type).type)&#10;  else ((v1.type).type)), lower:int = ((v1.type).lower), upper:int = (((((v1.type).upper) + ((v2.type).upper)) - ((v2.type).lower)) + 1), fl:Flavdom = ((v1.type).fl), vec:seq of ((Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = ((v1.val) ^ (v2.val)) in&#10;    (let new_type:VectorType = mk_VectorType(lower, upper, type, fl) in&#10;      ((is_(vec, seq1 of (Errvalue))) or&#10;      (is_(vec, seq1 of (Int))) or&#10;      (is_(vec, seq1 of (Real))) or&#10;      (is_(vec, seq1 of (StructValue))) or&#10;      (is_(vec, seq1 of (Tr))) or&#10;      (is_(vec, seq1 of (VectorValue))) or&#10;      (is_(vec, seq1 of (Void)))))))&#10;" number="172" object="" resource="newspeakSL" toString="vector_concat: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1048:17&#10;(forall v1:Vector, v2:Vector &amp;&#10;  (let type:Expressible_type = (if tleq(((v1.type).type), ((v2.type).type))&#10;  then ((v2.type).type)&#10;  else ((v1.type).type)), lower:int = ((v1.type).lower), upper:int = (((((v1.type).upper) + ((v2.type).upper)) - ((v2.type).lower)) + 1), fl:Flavdom = ((v1.type).fl), vec:seq of ((Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = ((v1.val) ^ (v2.val)) in&#10;    (let new_type:VectorType = mk_VectorType(lower, upper, type, fl) in&#10;      ((is_(vec, seq1 of (Errvalue))) or&#10;      (is_(vec, seq1 of (Int))) or&#10;      (is_(vec, seq1 of (Real))) or&#10;      (is_(vec, seq1 of (StructValue))) or&#10;      (is_(vec, seq1 of (Tr))) or&#10;      (is_(vec, seq1 of (VectorValue))) or&#10;      (is_(vec, seq1 of (Void)))))))&#10;"/>
<po column="22" line="1065" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:22&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      is_([const_type((v.val)(i)) | i in set (inds (v.val))], seq1 of (Expressible_type)))))&#10;" number="173" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:22&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      is_([const_type((v.val)(i)) | i in set (inds (v.val))], seq1 of (Expressible_type)))))&#10;"/>
<po column="34" line="1065" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:34&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      (forall i in set (inds (v.val)) &amp;&#10;        ((is_((v.val)(i), Errvalue)) or&#10;        (is_((v.val)(i), Int)) or&#10;        (is_((v.val)(i), Real)) or&#10;        (is_((v.val)(i), Structure)) or&#10;        (is_((v.val)(i), Tr)) or&#10;        (is_((v.val)(i), Union)) or&#10;        (is_((v.val)(i), Vector)) or&#10;        (is_((v.val)(i), Void)))))))&#10;" number="174" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:34&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      (forall i in set (inds (v.val)) &amp;&#10;        ((is_((v.val)(i), Errvalue)) or&#10;        (is_((v.val)(i), Int)) or&#10;        (is_((v.val)(i), Real)) or&#10;        (is_((v.val)(i), Structure)) or&#10;        (is_((v.val)(i), Tr)) or&#10;        (is_((v.val)(i), Union)) or&#10;        (is_((v.val)(i), Vector)) or&#10;        (is_((v.val)(i), Void)))))))&#10;"/>
<po column="34" line="1065" message="const_type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:34&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      (forall i in set (inds (v.val)) &amp;&#10;        i in set inds (v.val)))))&#10;" number="175" object="" resource="newspeakSL" toString="const_type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:34&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      (forall i in set (inds (v.val)) &amp;&#10;        i in set inds (v.val)))))&#10;"/>
<po column="15" line="1065" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:15&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      ((is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), Float)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), IntType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), StructureType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), TrType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), UnionType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), VectorType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), VoidType))))))&#10;" number="176" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1065:15&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (is_(v, Vector) =&gt;&#10;      ((is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), Float)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), IntType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), StructureType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), TrType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), UnionType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), VectorType)) or&#10;      (is_(seqlub([const_type((v.val)(i)) | i in set (inds (v.val))]), VoidType))))))&#10;"/>
<po column="52" line="1067" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:52&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        (forall i in set (inds (v.val)) &amp;&#10;          ((is_((v.val)(i), bool)) or&#10;          (is_((v.val)(i), real) and is_real((v.val)(i)))))))))&#10;" number="177" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:52&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        (forall i in set (inds (v.val)) &amp;&#10;          ((is_((v.val)(i), bool)) or&#10;          (is_((v.val)(i), real) and is_real((v.val)(i)))))))))&#10;"/>
<po column="52" line="1067" message="const_type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:52&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        (forall i in set (inds (v.val)) &amp;&#10;          i in set inds (v.val))))))&#10;" number="178" object="" resource="newspeakSL" toString="const_type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:52&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        (forall i in set (inds (v.val)) &amp;&#10;          i in set inds (v.val))))))&#10;"/>
<po column="61" line="1067" message="const_type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:61&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        (forall i in set (inds (v.val)) &amp;&#10;          i in set inds ((v.type).tps))))))&#10;" number="179" object="" resource="newspeakSL" toString="const_type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:61&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        (forall i in set (inds (v.val)) &amp;&#10;          i in set inds ((v.type).tps))))))&#10;"/>
<po column="27" line="1067" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:27&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        is_([const_type(construct_ev((v.val)(i), ((v.type).tps)(i))) | i in set (inds (v.val))], seq1 of (CompType))))))&#10;" number="180" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1067:27&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (is_(v, Structure) =&gt;&#10;        is_([const_type(construct_ev((v.val)(i), ((v.type).tps)(i))) | i in set (inds (v.val))], seq1 of (CompType))))))&#10;"/>
<po column="21" line="1070" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1070:21&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (is_(v, Union) =&gt;&#10;          ((is_((v.val), Errvalue)) or&#10;          (is_((v.val), Int)) or&#10;          (is_((v.val), Real)) or&#10;          (is_((v.val), Structure)) or&#10;          (is_((v.val), Tr)) or&#10;          (is_((v.val), Union)) or&#10;          (is_((v.val), Vector)) or&#10;          (is_((v.val), Void))))))))&#10;" number="181" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1070:21&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (is_(v, Union) =&gt;&#10;          ((is_((v.val), Errvalue)) or&#10;          (is_((v.val), Int)) or&#10;          (is_((v.val), Real)) or&#10;          (is_((v.val), Structure)) or&#10;          (is_((v.val), Tr)) or&#10;          (is_((v.val), Union)) or&#10;          (is_((v.val), Vector)) or&#10;          (is_((v.val), Void))))))))&#10;"/>
<po column="55" line="1075" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1075:55&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (is_(v, Real) =&gt;&#10;              (not is_((v.val), int) =&gt;&#10;                is_real((v.val))))))))))&#10;" number="182" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1075:55&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (is_(v, Real) =&gt;&#10;              (not is_((v.val), int) =&gt;&#10;                is_real((v.val))))))))))&#10;"/>
<po column="45" line="1074" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1074:45&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (is_(v, Real) =&gt;&#10;              is_int((if is_((v.val), int)&#10;              then (v.val)&#10;              else (floor ((v.val) + 0.5)))))))))))&#10;" number="183" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1074:45&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (is_(v, Real) =&gt;&#10;              is_int((if is_((v.val), int)&#10;              then (v.val)&#10;              else (floor ((v.val) + 0.5)))))))))))&#10;"/>
<po column="32" line="1078" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1078:32&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (not is_(v, Real) =&gt;&#10;              (is_(v, Int) =&gt;&#10;                (is_int((v.val)))&#10;                and &#10;                and is_({(v.val)}, set of (int))))))))))&#10;" number="184" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1078:32&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (not is_(v, Real) =&gt;&#10;              (is_(v, Int) =&gt;&#10;                (is_int((v.val)))&#10;                and &#10;                and is_({(v.val)}, set of (int))))))))))&#10;"/>
<po column="18" line="1079" message="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1079:18&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (not is_(v, Real) =&gt;&#10;              (not is_(v, Int) =&gt;&#10;                (is_((v.val), bool))&#10;                and &#10;                and is_({(v.val)}, set of (bool))))))))))&#10;" number="185" object="" resource="newspeakSL" toString="const_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1079:18&#10;(forall v:Expressible_value &amp;&#10;  (not is_(v, Void) =&gt;&#10;    (not is_(v, Vector) =&gt;&#10;      (not is_(v, Structure) =&gt;&#10;        (not is_(v, Union) =&gt;&#10;          (not (v = &lt;err&gt;) =&gt;&#10;            (not is_(v, Real) =&gt;&#10;              (not is_(v, Int) =&gt;&#10;                (is_((v.val), bool))&#10;                and &#10;                and is_({(v.val)}, set of (bool))))))))))&#10;"/>
<po column="3" line="1090" message="replace_flavour: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1090:3&#10;(forall type:Expressible_type, flav:Flavdom &amp;&#10;  (exists mk_VoidType(fl):Expressible_type &amp; type = mk_VoidType(fl)) or (exists mk_TrType(r, f):Expressible_type &amp; type = mk_TrType(r, f)) or (exists mk_Float(r, a, re, f):Expressible_type &amp; type = mk_Float(r, a, re, f)) or (exists mk_IntType(rep, r, f):Expressible_type &amp; type = mk_IntType(rep, r, f)) or (exists mk_VectorType(l, u, t, f):Expressible_type &amp; type = mk_VectorType(l, u, t, f)) or (exists mk_UnionType(tps, fl):Expressible_type &amp; type = mk_UnionType(tps, fl)) or (exists mk_StructureType(tps, fl):Expressible_type &amp; type = mk_StructureType(tps, fl)))&#10;" number="186" object="" resource="newspeakSL" toString="replace_flavour: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1090:3&#10;(forall type:Expressible_type, flav:Flavdom &amp;&#10;  (exists mk_VoidType(fl):Expressible_type &amp; type = mk_VoidType(fl)) or (exists mk_TrType(r, f):Expressible_type &amp; type = mk_TrType(r, f)) or (exists mk_Float(r, a, re, f):Expressible_type &amp; type = mk_Float(r, a, re, f)) or (exists mk_IntType(rep, r, f):Expressible_type &amp; type = mk_IntType(rep, r, f)) or (exists mk_VectorType(l, u, t, f):Expressible_type &amp; type = mk_VectorType(l, u, t, f)) or (exists mk_UnionType(tps, fl):Expressible_type &amp; type = mk_UnionType(tps, fl)) or (exists mk_StructureType(tps, fl):Expressible_type &amp; type = mk_StructureType(tps, fl)))&#10;"/>
<po column="19" line="1104" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1104:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  ((is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    is_(t2, TrType)))&#10;" number="187" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1104:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  ((is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    is_(t2, TrType)))&#10;"/>
<po column="19" line="1106" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1106:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    ((is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      is_(t1, Float))))&#10;" number="188" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1106:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    ((is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      is_(t1, Float))))&#10;"/>
<po column="22" line="1106" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1106:22&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    ((is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      is_(t2, Float))))&#10;" number="189" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1106:22&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    ((is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      is_(t2, Float))))&#10;"/>
<po column="17" line="1108" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1108:17&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      ((is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        is_(t1, IntType)))))&#10;" number="190" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1108:17&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      ((is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        is_(t1, IntType)))))&#10;"/>
<po column="20" line="1108" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1108:20&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      ((is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        is_(t2, IntType)))))&#10;" number="191" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1108:20&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      ((is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        is_(t2, IntType)))))&#10;"/>
<po column="20" line="1110" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1110:20&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        ((is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          is_(t1, VectorType))))))&#10;" number="192" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1110:20&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        ((is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          is_(t1, VectorType))))))&#10;"/>
<po column="23" line="1110" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1110:23&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        ((is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          is_(t2, VectorType))))))&#10;" number="193" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1110:23&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        ((is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          is_(t2, VectorType))))))&#10;"/>
<po column="19" line="1112" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1112:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          ((is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            is_(t1, StructureType)))))))&#10;" number="194" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1112:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          ((is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            is_(t1, StructureType)))))))&#10;"/>
<po column="22" line="1112" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1112:22&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          ((is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            is_(t2, StructureType)))))))&#10;" number="195" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1112:22&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          ((is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            is_(t2, StructureType)))))))&#10;"/>
<po column="19" line="1114" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1114:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          (not (is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            ((is_(t1, UnionType) and (is_(t2, UnionType) and fleq(t1, t2))) =&gt;&#10;              is_(t1, UnionType))))))))&#10;" number="196" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1114:19&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          (not (is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            ((is_(t1, UnionType) and (is_(t2, UnionType) and fleq(t1, t2))) =&gt;&#10;              is_(t1, UnionType))))))))&#10;"/>
<po column="22" line="1114" message="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1114:22&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          (not (is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            ((is_(t1, UnionType) and (is_(t2, UnionType) and fleq(t1, t2))) =&gt;&#10;              is_(t2, UnionType))))))))&#10;" number="197" object="" resource="newspeakSL" toString="lub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1114:22&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (is_(t1, TrType) and (is_(t2, TrType) and fleq(t1, t2))) =&gt;&#10;    (not (is_(t1, Float) and (is_(t2, Float) and fleq(t1, t2))) =&gt;&#10;      (not (is_(t1, IntType) and (is_(t2, IntType) and fleq(t1, t2))) =&gt;&#10;        (not (is_(t1, VectorType) and (is_(t2, VectorType) and fleq(t1, t2))) =&gt;&#10;          (not (is_(t1, StructureType) and (is_(t2, StructureType) and fleq(t1, t2))) =&gt;&#10;            ((is_(t1, UnionType) and (is_(t2, UnionType) and fleq(t1, t2))) =&gt;&#10;              is_(t2, UnionType))))))))&#10;"/>
<po column="37" line="1126" message="floatlub: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1126:37&#10;(forall t1:Float, t2:Float &amp;&#10;  pre_max({(t1.abserr), (t2.abserr)}))&#10;" number="198" object="" resource="newspeakSL" toString="floatlub: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1126:37&#10;(forall t1:Float, t2:Float &amp;&#10;  pre_max({(t1.abserr), (t2.abserr)}))&#10;"/>
<po column="12" line="1127" message="floatlub: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1127:12&#10;(forall t1:Float, t2:Float &amp;&#10;  pre_max({(t1.relerr), (t2.relerr)}))&#10;" number="199" object="" resource="newspeakSL" toString="floatlub: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1127:12&#10;(forall t1:Float, t2:Float &amp;&#10;  pre_max({(t1.relerr), (t2.relerr)}))&#10;"/>
<po column="40" line="1142" message="vectorlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1142:40&#10;(forall t1:VectorType, t2:VectorType &amp;&#10;  (not (((t1.lower) &lt;&gt; (t2.lower)) or (((t1.upper) &lt;&gt; (t2.upper)) or (lub((t1.type), (t2.type)) = &lt;err&gt;))) =&gt;&#10;    ((is_(lub((t1.type), (t2.type)), Float)) or&#10;    (is_(lub((t1.type), (t2.type)), IntType)) or&#10;    (is_(lub((t1.type), (t2.type)), StructureType)) or&#10;    (is_(lub((t1.type), (t2.type)), TrType)) or&#10;    (is_(lub((t1.type), (t2.type)), UnionType)) or&#10;    (is_(lub((t1.type), (t2.type)), VectorType)) or&#10;    (is_(lub((t1.type), (t2.type)), VoidType)))))&#10;" number="200" object="" resource="newspeakSL" toString="vectorlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1142:40&#10;(forall t1:VectorType, t2:VectorType &amp;&#10;  (not (((t1.lower) &lt;&gt; (t2.lower)) or (((t1.upper) &lt;&gt; (t2.upper)) or (lub((t1.type), (t2.type)) = &lt;err&gt;))) =&gt;&#10;    ((is_(lub((t1.type), (t2.type)), Float)) or&#10;    (is_(lub((t1.type), (t2.type)), IntType)) or&#10;    (is_(lub((t1.type), (t2.type)), StructureType)) or&#10;    (is_(lub((t1.type), (t2.type)), TrType)) or&#10;    (is_(lub((t1.type), (t2.type)), UnionType)) or&#10;    (is_(lub((t1.type), (t2.type)), VectorType)) or&#10;    (is_(lub((t1.type), (t2.type)), VoidType)))))&#10;"/>
<po column="30" line="1150" message="struclub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1150:30&#10;(forall t1:StructureType, t2:StructureType &amp;&#10;  (not ((len (t1.tps)) &lt;&gt; (len (t2.tps))) =&gt;&#10;    (not (exists [i in set (inds (t1.tps))] &amp; (lub((t1.tps)(i), (t2.tps)(i)) = &lt;err&gt;)) =&gt;&#10;      (forall i in set (inds (t1.tps)) &amp;&#10;        i in set inds (t1.tps)))))&#10;" number="201" object="" resource="newspeakSL" toString="struclub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1150:30&#10;(forall t1:StructureType, t2:StructureType &amp;&#10;  (not ((len (t1.tps)) &lt;&gt; (len (t2.tps))) =&gt;&#10;    (not (exists [i in set (inds (t1.tps))] &amp; (lub((t1.tps)(i), (t2.tps)(i)) = &lt;err&gt;)) =&gt;&#10;      (forall i in set (inds (t1.tps)) &amp;&#10;        i in set inds (t1.tps)))))&#10;"/>
<po column="40" line="1150" message="struclub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1150:40&#10;(forall t1:StructureType, t2:StructureType &amp;&#10;  (not ((len (t1.tps)) &lt;&gt; (len (t2.tps))) =&gt;&#10;    (not (exists [i in set (inds (t1.tps))] &amp; (lub((t1.tps)(i), (t2.tps)(i)) = &lt;err&gt;)) =&gt;&#10;      (forall i in set (inds (t1.tps)) &amp;&#10;        i in set inds (t2.tps)))))&#10;" number="202" object="" resource="newspeakSL" toString="struclub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1150:40&#10;(forall t1:StructureType, t2:StructureType &amp;&#10;  (not ((len (t1.tps)) &lt;&gt; (len (t2.tps))) =&gt;&#10;    (not (exists [i in set (inds (t1.tps))] &amp; (lub((t1.tps)(i), (t2.tps)(i)) = &lt;err&gt;)) =&gt;&#10;      (forall i in set (inds (t1.tps)) &amp;&#10;        i in set inds (t2.tps)))))&#10;"/>
<po column="25" line="1150" message="struclub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1150:25&#10;(forall t1:StructureType, t2:StructureType &amp;&#10;  (not ((len (t1.tps)) &lt;&gt; (len (t2.tps))) =&gt;&#10;    (not (exists [i in set (inds (t1.tps))] &amp; (lub((t1.tps)(i), (t2.tps)(i)) = &lt;err&gt;)) =&gt;&#10;      is_([lub((t1.tps)(i), (t2.tps)(i)) | i in set (inds (t1.tps))], seq1 of (CompType)))))&#10;" number="203" object="" resource="newspeakSL" toString="struclub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1150:25&#10;(forall t1:StructureType, t2:StructureType &amp;&#10;  (not ((len (t1.tps)) &lt;&gt; (len (t2.tps))) =&gt;&#10;    (not (exists [i in set (inds (t1.tps))] &amp; (lub((t1.tps)(i), (t2.tps)(i)) = &lt;err&gt;)) =&gt;&#10;      is_([lub((t1.tps)(i), (t2.tps)(i)) | i in set (inds (t1.tps))], seq1 of (CompType)))))&#10;"/>
<po column="26" line="1161" message="unionlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1161:26&#10;(forall t1:UnionType, t2:UnionType &amp;&#10;  (not ((card (t1.tps)) &lt;&gt; (card (t2.tps))) =&gt;&#10;    (let lub:(Errvalue | Expressible_type) = setlub(((t1.tps) union (t2.tps))) in&#10;      (not (lub = &lt;err&gt;) =&gt;&#10;        (is_(lub, UnionType) =&gt;&#10;          is_((lub.tps), set of ((Float | IntType | TrType | VoidType))))))))&#10;" number="204" object="" resource="newspeakSL" toString="unionlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1161:26&#10;(forall t1:UnionType, t2:UnionType &amp;&#10;  (not ((card (t1.tps)) &lt;&gt; (card (t2.tps))) =&gt;&#10;    (let lub:(Errvalue | Expressible_type) = setlub(((t1.tps) union (t2.tps))) in&#10;      (not (lub = &lt;err&gt;) =&gt;&#10;        (is_(lub, UnionType) =&gt;&#10;          is_((lub.tps), set of ((Float | IntType | TrType | VoidType))))))))&#10;"/>
<po column="26" line="1162" message="unionlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1162:26&#10;(forall t1:UnionType, t2:UnionType &amp;&#10;  (not ((card (t1.tps)) &lt;&gt; (card (t2.tps))) =&gt;&#10;    (let lub:(Errvalue | Expressible_type) = setlub(((t1.tps) union (t2.tps))) in&#10;      (not (lub = &lt;err&gt;) =&gt;&#10;        (not is_(lub, UnionType) =&gt;&#10;          ((is_(lub, Float)) or&#10;          (is_(lub, IntType)) or&#10;          (is_(lub, TrType)) or&#10;          (is_(lub, VoidType)))&#10;          and &#10;          and is_({lub}, set of ((Float | IntType | TrType | VoidType))))))))&#10;" number="205" object="" resource="newspeakSL" toString="unionlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1162:26&#10;(forall t1:UnionType, t2:UnionType &amp;&#10;  (not ((card (t1.tps)) &lt;&gt; (card (t2.tps))) =&gt;&#10;    (let lub:(Errvalue | Expressible_type) = setlub(((t1.tps) union (t2.tps))) in&#10;      (not (lub = &lt;err&gt;) =&gt;&#10;        (not is_(lub, UnionType) =&gt;&#10;          ((is_(lub, Float)) or&#10;          (is_(lub, IntType)) or&#10;          (is_(lub, TrType)) or&#10;          (is_(lub, VoidType)))&#10;          and &#10;          and is_({lub}, set of ((Float | IntType | TrType | VoidType))))))))&#10;"/>
<po column="11" line="1167" message="seqlub: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1167:11&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (((len tps) = 1) =&gt;&#10;    tps &lt;&gt; []))&#10;" number="206" object="" resource="newspeakSL" toString="seqlub: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1167:11&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (((len tps) = 1) =&gt;&#10;    tps &lt;&gt; []))&#10;"/>
<po column="12" line="1170" message="seqlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:12&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      ((is_(lub(tps(1), tps(2)), Float)) or&#10;      (is_(lub(tps(1), tps(2)), IntType)) or&#10;      (is_(lub(tps(1), tps(2)), StructureType)) or&#10;      (is_(lub(tps(1), tps(2)), TrType)) or&#10;      (is_(lub(tps(1), tps(2)), UnionType)) or&#10;      (is_(lub(tps(1), tps(2)), VectorType)) or&#10;      (is_(lub(tps(1), tps(2)), VoidType))))))&#10;" number="207" object="" resource="newspeakSL" toString="seqlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:12&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      ((is_(lub(tps(1), tps(2)), Float)) or&#10;      (is_(lub(tps(1), tps(2)), IntType)) or&#10;      (is_(lub(tps(1), tps(2)), StructureType)) or&#10;      (is_(lub(tps(1), tps(2)), TrType)) or&#10;      (is_(lub(tps(1), tps(2)), UnionType)) or&#10;      (is_(lub(tps(1), tps(2)), VectorType)) or&#10;      (is_(lub(tps(1), tps(2)), VoidType))))))&#10;"/>
<po column="31" line="1170" message="seqlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:31&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      ((is_(seqlub((tl tps)), Float)) or&#10;      (is_(seqlub((tl tps)), IntType)) or&#10;      (is_(seqlub((tl tps)), StructureType)) or&#10;      (is_(seqlub((tl tps)), TrType)) or&#10;      (is_(seqlub((tl tps)), UnionType)) or&#10;      (is_(seqlub((tl tps)), VectorType)) or&#10;      (is_(seqlub((tl tps)), VoidType))))))&#10;" number="208" object="" resource="newspeakSL" toString="seqlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:31&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      ((is_(seqlub((tl tps)), Float)) or&#10;      (is_(seqlub((tl tps)), IntType)) or&#10;      (is_(seqlub((tl tps)), StructureType)) or&#10;      (is_(seqlub((tl tps)), TrType)) or&#10;      (is_(seqlub((tl tps)), UnionType)) or&#10;      (is_(seqlub((tl tps)), VectorType)) or&#10;      (is_(seqlub((tl tps)), VoidType))))))&#10;"/>
<po column="16" line="1170" message="seqlub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:16&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      1 in set inds tps)))&#10;" number="209" object="" resource="newspeakSL" toString="seqlub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:16&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      1 in set inds tps)))&#10;"/>
<po column="23" line="1170" message="seqlub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:23&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      2 in set inds tps)))&#10;" number="210" object="" resource="newspeakSL" toString="seqlub: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:23&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      2 in set inds tps)))&#10;"/>
<po column="41" line="1170" message="seqlub: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:41&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      tps &lt;&gt; [])))&#10;" number="211" object="" resource="newspeakSL" toString="seqlub: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1170:41&#10;(forall tps:seq1 of (Expressible_type) &amp;&#10;  (not ((len tps) = 1) =&gt;&#10;    (not (lub(tps(1), tps(2)) = &lt;err&gt;) =&gt;&#10;      tps &lt;&gt; [])))&#10;"/>
<po column="52" line="1190" message="setlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1190:52&#10;(forall s:set of (Expressible_type) &amp;&#10;  ((exists [t1, t2 in set s] &amp; (lub(t1, t2) = &lt;err&gt;)) =&gt;&#10;    ((forall t in set s &amp; (is_(t, TrType) or (is_(t, IntType) or (is_(t, Float) or is_(t, VoidType))))) =&gt;&#10;      (let t1:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', TrType) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, TrType)}, t2:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', IntType) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, IntType)}, t3:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', Float) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, Float)}, t4:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', VoidType) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, VoidType)} in&#10;        (not ((exists [t, t' in set (dunion {t1, t2, t3, t4})] &amp; ((t.fl) = (t'.fl))) or (exists [t in set (dunion {t1, t2, t3}), mk_VoidType(f) in set t4] &amp; ((t.fl) = f))) =&gt;&#10;          is_((((t1 union t2) union t3) union t4), set of ((Float | IntType | TrType | VoidType))))))))&#10;" number="212" object="" resource="newspeakSL" toString="setlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1190:52&#10;(forall s:set of (Expressible_type) &amp;&#10;  ((exists [t1, t2 in set s] &amp; (lub(t1, t2) = &lt;err&gt;)) =&gt;&#10;    ((forall t in set s &amp; (is_(t, TrType) or (is_(t, IntType) or (is_(t, Float) or is_(t, VoidType))))) =&gt;&#10;      (let t1:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', TrType) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, TrType)}, t2:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', IntType) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, IntType)}, t3:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', Float) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, Float)}, t4:set of ((Errvalue | Expressible_type)) = {setlub({t' | [t' in set s] &amp; (is_(t', VoidType) and ((t.fl) = (t'.fl)))}) | [t in set s] &amp; is_(t, VoidType)} in&#10;        (not ((exists [t, t' in set (dunion {t1, t2, t3, t4})] &amp; ((t.fl) = (t'.fl))) or (exists [t in set (dunion {t1, t2, t3}), mk_VoidType(f) in set t4] &amp; ((t.fl) = f))) =&gt;&#10;          is_((((t1 union t2) union t3) union t4), set of ((Float | IntType | TrType | VoidType))))))))&#10;"/>
<po column="12" line="1192" message="setlub: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1192:12&#10;(forall s:set of (Expressible_type) &amp;&#10;  (not (exists [t1, t2 in set s] &amp; (lub(t1, t2) = &lt;err&gt;)) =&gt;&#10;    exists t in set s))&#10;" number="213" object="" resource="newspeakSL" toString="setlub: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1192:12&#10;(forall s:set of (Expressible_type) &amp;&#10;  (not (exists [t1, t2 in set s] &amp; (lub(t1, t2) = &lt;err&gt;)) =&gt;&#10;    exists t in set s))&#10;"/>
<po column="19" line="1195" message="setlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1195:19&#10;(forall s:set of (Expressible_type) &amp;&#10;  (not (exists [t1, t2 in set s] &amp; (lub(t1, t2) = &lt;err&gt;)) =&gt;&#10;    (forall t in set s &amp;&#10;      (not (s = {t}) =&gt;&#10;        ((is_(setlub((s \ {t})), Float)) or&#10;        (is_(setlub((s \ {t})), IntType)) or&#10;        (is_(setlub((s \ {t})), StructureType)) or&#10;        (is_(setlub((s \ {t})), TrType)) or&#10;        (is_(setlub((s \ {t})), UnionType)) or&#10;        (is_(setlub((s \ {t})), VectorType)) or&#10;        (is_(setlub((s \ {t})), VoidType)))))))&#10;" number="214" object="" resource="newspeakSL" toString="setlub: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1195:19&#10;(forall s:set of (Expressible_type) &amp;&#10;  (not (exists [t1, t2 in set s] &amp; (lub(t1, t2) = &lt;err&gt;)) =&gt;&#10;    (forall t in set s &amp;&#10;      (not (s = {t}) =&gt;&#10;        ((is_(setlub((s \ {t})), Float)) or&#10;        (is_(setlub((s \ {t})), IntType)) or&#10;        (is_(setlub((s \ {t})), StructureType)) or&#10;        (is_(setlub((s \ {t})), TrType)) or&#10;        (is_(setlub((s \ {t})), UnionType)) or&#10;        (is_(setlub((s \ {t})), VectorType)) or&#10;        (is_(setlub((s \ {t})), VoidType)))))))&#10;"/>
<po column="30" line="1202" message="gt: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1202:30&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (is_(t2, TrType) =&gt;&#10;        exists z in set (power {0, 1}) &amp; ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z)))))))&#10;" number="215" object="" resource="newspeakSL" toString="gt: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1202:30&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (is_(t2, TrType) =&gt;&#10;        exists z in set (power {0, 1}) &amp; ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z)))))))&#10;"/>
<po column="36" line="1224" message="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1224:36&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  pre_max({(abs max({lower, upper})) | [mk_Floatrng(lower, upper) in set (t2.range)]}))))))))))&#10;" number="216" object="" resource="newspeakSL" toString="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1224:36&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  pre_max({(abs max({lower, upper})) | [mk_Floatrng(lower, upper) in set (t2.range)]}))))))))))&#10;"/>
<po column="46" line="1224" message="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1224:46&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  (forall mk_Floatrng(lower, upper) in set (t2.range) &amp;&#10;                    pre_max({lower, upper})))))))))))&#10;" number="217" object="" resource="newspeakSL" toString="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1224:46&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  (forall mk_Floatrng(lower, upper) in set (t2.range) &amp;&#10;                    pre_max({lower, upper})))))))))))&#10;"/>
<po column="26" line="1226" message="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1226:26&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  pre_max({(abs max({lower, upper})) | [mk_Floatrng(lower, upper) in set (t1.range)]}))))))))))&#10;" number="218" object="" resource="newspeakSL" toString="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1226:26&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  pre_max({(abs max({lower, upper})) | [mk_Floatrng(lower, upper) in set (t1.range)]}))))))))))&#10;"/>
<po column="36" line="1226" message="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1226:36&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  (forall mk_Floatrng(lower, upper) in set (t1.range) &amp;&#10;                    pre_max({lower, upper})))))))))))&#10;" number="219" object="" resource="newspeakSL" toString="gt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1226:36&#10;(forall t1:Expressible_type, t2:Expressible_type &amp;&#10;  (not (lub(t1, t2) = t1) =&gt;&#10;    (fleq(t1, t2) =&gt;&#10;      (not (is_(t2, TrType) and let z in set (power {0, 1}) be st ((true in set (t2.range)) =&gt; (((1 in set z) and (false in set (t2.range))) =&gt; (0 in set z))) in ((is_(t1, Float) and (z subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))) or (is_(t1, IntType) and (z subset (t1.range))))) =&gt;&#10;        (not ((is_(t2, IntType) and (((t2.rep) = &lt;byte&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) or (is_(t1, IntType) and (((t1.rep) = &lt;word&gt;) and ((t2.range) subset (t1.range))))) =&gt;&#10;          (not (is_(t2, IntType) and (((t2.rep) = &lt;word&gt;) and (is_(t1, Float) and ((t2.range) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]}))))) =&gt;&#10;            (is_(t2, Float) =&gt;&#10;              (is_(t1, Float) =&gt;&#10;                (((dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t2.range)]}) subset (dunion {{lower, ... ,upper} | [mk_Floatrng(lower, upper) in set (t1.range)]})) =&gt;&#10;                  (forall mk_Floatrng(lower, upper) in set (t1.range) &amp;&#10;                    pre_max({lower, upper})))))))))))&#10;"/>
<po column="4" line="1247" message="access: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1247:4&#10;(forall l:Location, s:Store &amp;&#10;  l in set dom s)&#10;" number="220" object="" resource="newspeakSL" toString="access: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1247:4&#10;(forall l:Location, s:Store &amp;&#10;  l in set dom s)&#10;"/>
<po column="8" line="1257" message="multi_update: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:8&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    pre_(multi_update((tl ls))((tl vs)), (s ++ {(hd ls) |-&gt; (hd vs)}))))&#10;" number="221" object="" resource="newspeakSL" toString="multi_update: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:8&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    pre_(multi_update((tl ls))((tl vs)), (s ++ {(hd ls) |-&gt; (hd vs)}))))&#10;"/>
<po column="8" line="1257" message="multi_update: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:8&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    pre_(multi_update((tl ls)), (tl vs))))&#10;" number="222" object="" resource="newspeakSL" toString="multi_update: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:8&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    pre_(multi_update((tl ls)), (tl vs))))&#10;"/>
<po column="8" line="1257" message="multi_update: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:8&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    pre_multi_update((tl ls))))&#10;" number="223" object="" resource="newspeakSL" toString="multi_update: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:8&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    pre_multi_update((tl ls))))&#10;"/>
<po column="24" line="1257" message="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:24&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    ls &lt;&gt; []))&#10;" number="224" object="" resource="newspeakSL" toString="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:24&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    ls &lt;&gt; []))&#10;"/>
<po column="31" line="1257" message="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:31&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    vs &lt;&gt; []))&#10;" number="225" object="" resource="newspeakSL" toString="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:31&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    vs &lt;&gt; []))&#10;"/>
<po column="45" line="1257" message="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:45&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    ls &lt;&gt; []))&#10;" number="226" object="" resource="newspeakSL" toString="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:45&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    ls &lt;&gt; []))&#10;"/>
<po column="55" line="1257" message="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:55&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    vs &lt;&gt; []))&#10;" number="227" object="" resource="newspeakSL" toString="multi_update: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1257:55&#10;(forall ls:seq of (Location), vs:seq of (Storable_value), s:Store &amp; ((len ls) = (len vs)) =&gt;&#10;  (not (ls = []) =&gt;&#10;    vs &lt;&gt; []))&#10;"/>
<po column="3" line="1266" message="access_env: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1266:3&#10;(forall i:Id, mk_(m, l):Env &amp;&#10;  i in set dom m)&#10;" number="228" object="" resource="newspeakSL" toString="access_env: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1266:3&#10;(forall i:Id, mk_(m, l):Env &amp;&#10;  i in set dom m)&#10;"/>
<po column="27" line="1280" message="multi_update_env, id, v: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1280:27&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    s &lt;&gt; []))&#10;" number="229" object="" resource="newspeakSL" toString="multi_update_env, id, v: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1280:27&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    s &lt;&gt; []))&#10;"/>
<po column="5" line="1281" message="multi_update_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:5&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      pre_(multi_update_env((tl s)), update_env(id)(v)(e)))))&#10;" number="230" object="" resource="newspeakSL" toString="multi_update_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:5&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      pre_(multi_update_env((tl s)), update_env(id)(v)(e)))))&#10;"/>
<po column="26" line="1281" message="multi_update_env: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:26&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      s &lt;&gt; [])))&#10;" number="231" object="" resource="newspeakSL" toString="multi_update_env: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:26&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      s &lt;&gt; [])))&#10;"/>
<po column="29" line="1281" message="multi_update_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:29&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      pre_(update_env(id)(v), e))))&#10;" number="232" object="" resource="newspeakSL" toString="multi_update_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:29&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      pre_(update_env(id)(v), e))))&#10;"/>
<po column="29" line="1281" message="multi_update_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:29&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      pre_(update_env(id), v))))&#10;" number="233" object="" resource="newspeakSL" toString="multi_update_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1281:29&#10;(forall s:seq of ((Id * Denotable_value)), e:Env &amp;&#10;  (not (s = []) =&gt;&#10;    (let mk_(id, v):(Id * Denotable_value) = (hd s) in&#10;      pre_(update_env(id), v))))&#10;"/>
<po column="28" line="1292" message="instantiate_formals, lubs_eq: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1292:28&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (forall i in set (inds formals) &amp;&#10;      i in set inds formals)))&#10;" number="234" object="" resource="newspeakSL" toString="instantiate_formals, lubs_eq: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1292:28&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (forall i in set (inds formals) &amp;&#10;      i in set inds formals)))&#10;"/>
<po column="45" line="1292" message="instantiate_formals, lubs_eq: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1292:45&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (forall i in set (inds formals) &amp;&#10;      i in set inds params)))&#10;" number="235" object="" resource="newspeakSL" toString="instantiate_formals, lubs_eq: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1292:45&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (forall i in set (inds formals) &amp;&#10;      i in set inds params)))&#10;"/>
<po column="18" line="1293" message="instantiate_formals, lubs_eq: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1293:18&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (forall i in set (inds formals) &amp;&#10;      i in set inds formals)))&#10;" number="236" object="" resource="newspeakSL" toString="instantiate_formals, lubs_eq: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1293:18&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (forall i in set (inds formals) &amp;&#10;      i in set inds formals)))&#10;"/>
<po column="29" line="1296" message="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1296:29&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          i in set inds formals)))))&#10;" number="237" object="" resource="newspeakSL" toString="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1296:29&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          i in set inds formals)))))&#10;"/>
<po column="31" line="1297" message="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1297:31&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (((formals(i).fl) = {}) =&gt;&#10;            i in set inds params))))))&#10;" number="238" object="" resource="newspeakSL" toString="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1297:31&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (((formals(i).fl) = {}) =&gt;&#10;            i in set inds params))))))&#10;"/>
<po column="42" line="1298" message="instantiate_formals, vals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1298:42&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            ((is_((params(i).val), Errvalue)) or&#10;            (is_((params(i).val), Int)) or&#10;            (is_((params(i).val), Real)) or&#10;            (is_((params(i).val), Structure)) or&#10;            (is_((params(i).val), Tr)) or&#10;            (is_((params(i).val), Union)) or&#10;            (is_((params(i).val), Vector)) or&#10;            (is_((params(i).val), Void)))))))))&#10;" number="239" object="" resource="newspeakSL" toString="instantiate_formals, vals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1298:42&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            ((is_((params(i).val), Errvalue)) or&#10;            (is_((params(i).val), Int)) or&#10;            (is_((params(i).val), Real)) or&#10;            (is_((params(i).val), Structure)) or&#10;            (is_((params(i).val), Tr)) or&#10;            (is_((params(i).val), Union)) or&#10;            (is_((params(i).val), Vector)) or&#10;            (is_((params(i).val), Void)))))))))&#10;"/>
<po column="33" line="1299" message="instantiate_formals, vals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1299:33&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            ((is_(replace_flavour((params(i).type), (formals(i).fl)), Float)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), IntType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), StructureType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), TrType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), UnionType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), VectorType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), VoidType)))))))))&#10;" number="240" object="" resource="newspeakSL" toString="instantiate_formals, vals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1299:33&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            ((is_(replace_flavour((params(i).type), (formals(i).fl)), Float)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), IntType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), StructureType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), TrType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), UnionType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), VectorType)) or&#10;            (is_(replace_flavour((params(i).type), (formals(i).fl)), VoidType)))))))))&#10;"/>
<po column="42" line="1298" message="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1298:42&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            i in set inds params))))))&#10;" number="241" object="" resource="newspeakSL" toString="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1298:42&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            i in set inds params))))))&#10;"/>
<po column="49" line="1299" message="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1299:49&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            i in set inds params))))))&#10;" number="242" object="" resource="newspeakSL" toString="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1299:49&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            i in set inds params))))))&#10;"/>
<po column="33" line="1300" message="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1300:33&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            i in set inds formals))))))&#10;" number="243" object="" resource="newspeakSL" toString="instantiate_formals, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1300:33&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (forall i in set (inds params) &amp;&#10;          (not ((formals(i).fl) = {}) =&gt;&#10;            i in set inds formals))))))&#10;"/>
<po column="13" line="1301" message="instantiate_formals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:13&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          pre_(multi_update_env([mk_((formals(i).id), vals(i)) | i in set (inds vals)]), e))))))&#10;" number="244" object="" resource="newspeakSL" toString="instantiate_formals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:13&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          pre_(multi_update_env([mk_((formals(i).id), vals(i)) | i in set (inds vals)]), e))))))&#10;"/>
<po column="30" line="1301" message="instantiate_formals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:30&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          is_([mk_((formals(i).id), vals(i)) | i in set (inds vals)], seq of ((Id * Denotable_value))))))))&#10;" number="245" object="" resource="newspeakSL" toString="instantiate_formals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:30&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          is_([mk_((formals(i).id), vals(i)) | i in set (inds vals)], seq of ((Id * Denotable_value))))))))&#10;"/>
<po column="35" line="1301" message="instantiate_formals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:35&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          (forall i in set (inds vals) &amp;&#10;            i in set inds formals))))))&#10;" number="246" object="" resource="newspeakSL" toString="instantiate_formals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:35&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          (forall i in set (inds vals) &amp;&#10;            i in set inds formals))))))&#10;"/>
<po column="49" line="1301" message="instantiate_formals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:49&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          (forall i in set (inds vals) &amp;&#10;            i in set inds vals))))))&#10;" number="247" object="" resource="newspeakSL" toString="instantiate_formals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1301:49&#10;(forall formals:seq of (Formal_elt), params:Param, e:Env &amp;&#10;  (not ((len formals) &lt;&gt; (len params)) =&gt;&#10;    (let lubs_eq:seq of (bool) = [(lub((formals(i).rep), (params(i).type)) = (formals(i).rep)) | i in set (inds formals)] in&#10;      (not (false in set (elems lubs_eq)) =&gt;&#10;        (let vals:seq of (Expressible_value) = [(if ((formals(i).fl) = {})&#10;        then params(i)&#10;        else widen_type((params(i).val), replace_flavour((params(i).type), (formals(i).fl)))) | i in set (inds params)] in&#10;          (forall i in set (inds vals) &amp;&#10;            i in set inds vals))))))&#10;"/>
<po column="17" line="1318" message="dtplus: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1318:17&#10;(forall ts:seq of (Time) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;" number="248" object="" resource="newspeakSL" toString="dtplus: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1318:17&#10;(forall ts:seq of (Time) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;"/>
<po column="31" line="1318" message="dtplus: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1318:31&#10;(forall ts:seq of (Time) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;" number="249" object="" resource="newspeakSL" toString="dtplus: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1318:31&#10;(forall ts:seq of (Time) &amp;&#10;  (not (ts = []) =&gt;&#10;    ts &lt;&gt; []))&#10;"/>
<po column="7" line="1358" message="choose: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1358:7&#10;(forall tp:Expressible_type &amp;&#10;  exists val:Expressible_value &amp; (lub(const_type(val), tp) = tp))&#10;" number="250" object="" resource="newspeakSL" toString="choose: let be st existence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1358:7&#10;(forall tp:Expressible_type &amp;&#10;  exists val:Expressible_value &amp; (lub(const_type(val), tp) = tp))&#10;"/>
<po column="9" line="1359" message="choose: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1359:9&#10;(forall tp:Expressible_type &amp;&#10;  (forall val:Expressible_value &amp;&#10;    ((is_(const_type(val), Float)) or&#10;    (is_(const_type(val), IntType)) or&#10;    (is_(const_type(val), StructureType)) or&#10;    (is_(const_type(val), TrType)) or&#10;    (is_(const_type(val), UnionType)) or&#10;    (is_(const_type(val), VectorType)) or&#10;    (is_(const_type(val), VoidType)))))&#10;" number="251" object="" resource="newspeakSL" toString="choose: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1359:9&#10;(forall tp:Expressible_type &amp;&#10;  (forall val:Expressible_value &amp;&#10;    ((is_(const_type(val), Float)) or&#10;    (is_(const_type(val), IntType)) or&#10;    (is_(const_type(val), StructureType)) or&#10;    (is_(const_type(val), TrType)) or&#10;    (is_(const_type(val), UnionType)) or&#10;    (is_(const_type(val), VectorType)) or&#10;    (is_(const_type(val), VoidType)))))&#10;"/>
<po column="14" line="1360" message="choose: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1360:14&#10;(forall tp:Expressible_type &amp;&#10;  (forall val:Expressible_value &amp; (lub(const_type(val), tp) = tp) =&gt;&#10;    ((is_(const_type(val), Errvalue)) or&#10;    (is_(const_type(val), Int)) or&#10;    (is_(const_type(val), Real)) or&#10;    (is_(const_type(val), Structure)) or&#10;    (is_(const_type(val), Tr)) or&#10;    (is_(const_type(val), Union)) or&#10;    (is_(const_type(val), Vector)) or&#10;    (is_(const_type(val), Void)))))&#10;" number="252" object="" resource="newspeakSL" toString="choose: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1360:14&#10;(forall tp:Expressible_type &amp;&#10;  (forall val:Expressible_value &amp; (lub(const_type(val), tp) = tp) =&gt;&#10;    ((is_(const_type(val), Errvalue)) or&#10;    (is_(const_type(val), Int)) or&#10;    (is_(const_type(val), Real)) or&#10;    (is_(const_type(val), Structure)) or&#10;    (is_(const_type(val), Tr)) or&#10;    (is_(const_type(val), Union)) or&#10;    (is_(const_type(val), Vector)) or&#10;    (is_(const_type(val), Void)))))&#10;"/>
<po column="3" line="1365" message="eval_Program: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1365:3&#10;(forall mk_Program(expr):Program, l:Location, sto:Store &amp;&#10;  pre_(eval_Expression(expr)(empty_env(l)), mk_PState(sto, zerot)))&#10;" number="253" object="" resource="newspeakSL" toString="eval_Program: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1365:3&#10;(forall mk_Program(expr):Program, l:Location, sto:Store &amp;&#10;  pre_(eval_Expression(expr)(empty_env(l)), mk_PState(sto, zerot)))&#10;"/>
<po column="3" line="1365" message="eval_Program: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1365:3&#10;(forall mk_Program(expr):Program, l:Location, sto:Store &amp;&#10;  pre_(eval_Expression(expr), empty_env(l)))&#10;" number="254" object="" resource="newspeakSL" toString="eval_Program: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1365:3&#10;(forall mk_Program(expr):Program, l:Location, sto:Store &amp;&#10;  pre_(eval_Expression(expr), empty_env(l)))&#10;"/>
<po column="24" line="1370" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1370:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;  let mk_Operation(op) = expr in&#10;    pre_(eval_Operation(expr)(env), ps)))&#10;" number="255" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1370:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;  let mk_Operation(op) = expr in&#10;    pre_(eval_Operation(expr)(env), ps)))&#10;"/>
<po column="24" line="1370" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1370:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;  let mk_Operation(op) = expr in&#10;    pre_(eval_Operation(expr), env)))&#10;" number="256" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1370:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;  let mk_Operation(op) = expr in&#10;    pre_(eval_Operation(expr), env)))&#10;"/>
<po column="39" line="1370" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1370:39&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;  let mk_Operation(op) = expr in&#10;    is_(expr, Operation)))&#10;" number="257" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1370:39&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;  let mk_Operation(op) = expr in&#10;    is_(expr, Operation)))&#10;"/>
<po column="23" line="1371" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1371:23&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;    let mk_InnerLoop(l) = expr in&#10;      pre_(eval_InnerLoop(expr)(env), ps))))&#10;" number="258" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1371:23&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;    let mk_InnerLoop(l) = expr in&#10;      pre_(eval_InnerLoop(expr)(env), ps))))&#10;"/>
<po column="23" line="1371" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1371:23&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;    let mk_InnerLoop(l) = expr in&#10;      pre_(eval_InnerLoop(expr), env))))&#10;" number="259" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1371:23&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;    let mk_InnerLoop(l) = expr in&#10;      pre_(eval_InnerLoop(expr), env))))&#10;"/>
<po column="38" line="1371" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1371:38&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;    let mk_InnerLoop(l) = expr in&#10;      is_(expr, InnerLoop))))&#10;" number="260" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1371:38&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;    let mk_InnerLoop(l) = expr in&#10;      is_(expr, InnerLoop))))&#10;"/>
<po column="24" line="1372" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1372:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;      let mk_Assignment(a) = expr in&#10;        pre_(eval_Assignment(expr)(env), ps)))))&#10;" number="261" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1372:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;      let mk_Assignment(a) = expr in&#10;        pre_(eval_Assignment(expr)(env), ps)))))&#10;"/>
<po column="24" line="1372" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1372:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;      let mk_Assignment(a) = expr in&#10;        pre_(eval_Assignment(expr), env)))))&#10;" number="262" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1372:24&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;      let mk_Assignment(a) = expr in&#10;        pre_(eval_Assignment(expr), env)))))&#10;"/>
<po column="40" line="1372" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1372:40&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;      let mk_Assignment(a) = expr in&#10;        is_(expr, Assignment)))))&#10;" number="263" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1372:40&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;      let mk_Assignment(a) = expr in&#10;        is_(expr, Assignment)))))&#10;"/>
<po column="19" line="1373" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1373:19&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;        let mk_Scope(s) = expr in&#10;          pre_(eval_Scope(expr)(env), ps))))))&#10;" number="264" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1373:19&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;        let mk_Scope(s) = expr in&#10;          pre_(eval_Scope(expr)(env), ps))))))&#10;"/>
<po column="19" line="1373" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1373:19&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;        let mk_Scope(s) = expr in&#10;          pre_(eval_Scope(expr), env))))))&#10;" number="265" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1373:19&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;        let mk_Scope(s) = expr in&#10;          pre_(eval_Scope(expr), env))))))&#10;"/>
<po column="30" line="1373" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1373:30&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;        let mk_Scope(s) = expr in&#10;          is_(expr, Scope))))))&#10;" number="266" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1373:30&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;        let mk_Scope(s) = expr in&#10;          is_(expr, Scope))))))&#10;"/>
<po column="30" line="1374" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1374:30&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;          let mk_GuardedScope(d, i, o) = expr in&#10;            pre_(eval_GuardedScope(expr)(env), ps)))))))&#10;" number="267" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1374:30&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;          let mk_GuardedScope(d, i, o) = expr in&#10;            pre_(eval_GuardedScope(expr)(env), ps)))))))&#10;"/>
<po column="30" line="1374" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1374:30&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;          let mk_GuardedScope(d, i, o) = expr in&#10;            pre_(eval_GuardedScope(expr), env)))))))&#10;" number="268" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1374:30&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;          let mk_GuardedScope(d, i, o) = expr in&#10;            pre_(eval_GuardedScope(expr), env)))))))&#10;"/>
<po column="48" line="1374" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1374:48&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;          let mk_GuardedScope(d, i, o) = expr in&#10;            is_(expr, GuardedScope)))))))&#10;" number="269" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1374:48&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;          let mk_GuardedScope(d, i, o) = expr in&#10;            is_(expr, GuardedScope)))))))&#10;"/>
<po column="28" line="1375" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1375:28&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;            let mk_Assertion(exp, tp) = expr in&#10;              pre_(eval_Assertion(expr)(env), ps))))))))&#10;" number="270" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1375:28&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;            let mk_Assertion(exp, tp) = expr in&#10;              pre_(eval_Assertion(expr)(env), ps))))))))&#10;"/>
<po column="28" line="1375" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1375:28&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;            let mk_Assertion(exp, tp) = expr in&#10;              pre_(eval_Assertion(expr), env))))))))&#10;" number="271" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1375:28&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;            let mk_Assertion(exp, tp) = expr in&#10;              pre_(eval_Assertion(expr), env))))))))&#10;"/>
<po column="43" line="1375" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1375:43&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;            let mk_Assertion(exp, tp) = expr in&#10;              is_(expr, Assertion))))))))&#10;" number="272" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1375:43&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;            let mk_Assertion(exp, tp) = expr in&#10;              is_(expr, Assertion))))))))&#10;"/>
<po column="29" line="1376" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1376:29&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (not exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;              (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_TimedExpression(t) = expr =&gt;&#10;              let mk_TimedExpression(t) = expr in&#10;                pre_(eval_TimedExpression(expr)(env), ps)))))))))&#10;" number="273" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1376:29&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (not exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;              (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_TimedExpression(t) = expr =&gt;&#10;              let mk_TimedExpression(t) = expr in&#10;                pre_(eval_TimedExpression(expr)(env), ps)))))))))&#10;"/>
<po column="29" line="1376" message="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1376:29&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (not exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;              (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_TimedExpression(t) = expr =&gt;&#10;              let mk_TimedExpression(t) = expr in&#10;                pre_(eval_TimedExpression(expr), env)))))))))&#10;" number="274" object="" resource="newspeakSL" toString="eval_Expression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1376:29&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (not exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;              (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_TimedExpression(t) = expr =&gt;&#10;              let mk_TimedExpression(t) = expr in&#10;                pre_(eval_TimedExpression(expr), env)))))))))&#10;"/>
<po column="50" line="1376" message="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1376:50&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (not exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;              (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_TimedExpression(t) = expr =&gt;&#10;              let mk_TimedExpression(t) = expr in&#10;                is_(expr, TimedExpression)))))))))&#10;" number="275" object="" resource="newspeakSL" toString="eval_Expression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1376:50&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (not exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Operation(op) = expr =&gt;&#10;    (not exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_InnerLoop(l) = expr =&gt;&#10;      (not exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assignment(a) = expr =&gt;&#10;        (not exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Scope(s) = expr =&gt;&#10;          (not exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_GuardedScope(d, i, o) = expr =&gt;&#10;            (not exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_Assertion(exp, tp) = expr =&gt;&#10;              (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; mk_TimedExpression(t) = expr =&gt;&#10;              let mk_TimedExpression(t) = expr in&#10;                is_(expr, TimedExpression)))))))))&#10;"/>
<po column="3" line="1369" message="eval_Expression: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1369:3&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Operation(op)) or (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_InnerLoop(l)) or (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Assignment(a)) or (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Scope(s)) or (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_GuardedScope(d, i, o)) or (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Assertion(exp, tp)) or (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_TimedExpression(t)))&#10;" number="276" object="" resource="newspeakSL" toString="eval_Expression: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1369:3&#10;(forall mk_Expression(expr):Expression, env:Env, ps:PState &amp;&#10;  (exists mk_Operation(op):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Operation(op)) or (exists mk_InnerLoop(l):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_InnerLoop(l)) or (exists mk_Assignment(a):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Assignment(a)) or (exists mk_Scope(s):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Scope(s)) or (exists mk_GuardedScope(d, i, o):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_GuardedScope(d, i, o)) or (exists mk_Assertion(exp, tp):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_Assertion(exp, tp)) or (exists mk_TimedExpression(t):(Assertion | Assignment | GuardedScope | InnerLoop | Operation | Scope | TimedExpression) &amp; expr = mk_TimedExpression(t)))&#10;"/>
<po column="28" line="1382" message="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1382:28&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;  let mk_MonOperation(mo) = op in&#10;    pre_(eval_MonOperation(op)(e), ps)))&#10;" number="277" object="" resource="newspeakSL" toString="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1382:28&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;  let mk_MonOperation(mo) = op in&#10;    pre_(eval_MonOperation(op)(e), ps)))&#10;"/>
<po column="28" line="1382" message="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1382:28&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;  let mk_MonOperation(mo) = op in&#10;    pre_(eval_MonOperation(op), e)))&#10;" number="278" object="" resource="newspeakSL" toString="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1382:28&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;  let mk_MonOperation(mo) = op in&#10;    pre_(eval_MonOperation(op), e)))&#10;"/>
<po column="46" line="1382" message="eval_Operation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1382:46&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;  let mk_MonOperation(mo) = op in&#10;    is_(op, MonOperation)))&#10;" number="279" object="" resource="newspeakSL" toString="eval_Operation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1382:46&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;  let mk_MonOperation(mo) = op in&#10;    is_(op, MonOperation)))&#10;"/>
<po column="35" line="1383" message="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1383:35&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;    (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; mk_BinaryOperation(l, bo, r) = op =&gt;&#10;    let mk_BinaryOperation(l, bo, r) = op in&#10;      pre_(eval_BinaryOperation(op)(e), ps))))&#10;" number="280" object="" resource="newspeakSL" toString="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1383:35&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;    (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; mk_BinaryOperation(l, bo, r) = op =&gt;&#10;    let mk_BinaryOperation(l, bo, r) = op in&#10;      pre_(eval_BinaryOperation(op)(e), ps))))&#10;"/>
<po column="35" line="1383" message="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1383:35&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;    (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; mk_BinaryOperation(l, bo, r) = op =&gt;&#10;    let mk_BinaryOperation(l, bo, r) = op in&#10;      pre_(eval_BinaryOperation(op), e))))&#10;" number="281" object="" resource="newspeakSL" toString="eval_Operation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1383:35&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;    (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; mk_BinaryOperation(l, bo, r) = op =&gt;&#10;    let mk_BinaryOperation(l, bo, r) = op in&#10;      pre_(eval_BinaryOperation(op), e))))&#10;"/>
<po column="56" line="1383" message="eval_Operation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1383:56&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;    (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; mk_BinaryOperation(l, bo, r) = op =&gt;&#10;    let mk_BinaryOperation(l, bo, r) = op in&#10;      is_(op, BinaryOperation))))&#10;" number="282" object="" resource="newspeakSL" toString="eval_Operation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1383:56&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; mk_MonOperation(mo) = op =&gt;&#10;    (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; mk_BinaryOperation(l, bo, r) = op =&gt;&#10;    let mk_BinaryOperation(l, bo, r) = op in&#10;      is_(op, BinaryOperation))))&#10;"/>
<po column="3" line="1381" message="eval_Operation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1381:3&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; op = mk_MonOperation(mo)) or (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; op = mk_BinaryOperation(l, bo, r)))&#10;" number="283" object="" resource="newspeakSL" toString="eval_Operation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1381:3&#10;(forall mk_Operation(op):Operation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOperation(mo):(BinaryOperation | MonOperation) &amp; op = mk_MonOperation(mo)) or (exists mk_BinaryOperation(l, bo, r):(BinaryOperation | MonOperation) &amp; op = mk_BinaryOperation(l, bo, r)))&#10;"/>
<po column="12" line="1390" message="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1390:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;  let mk_MonOpMonOperand(opr, opnd) = mo in&#10;    pre_(eval_MonOpMonOperand(mk_MonOpMonOperand(opr, opnd))(e), ps)))&#10;" number="284" object="" resource="newspeakSL" toString="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1390:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;  let mk_MonOpMonOperand(opr, opnd) = mo in&#10;    pre_(eval_MonOpMonOperand(mk_MonOpMonOperand(opr, opnd))(e), ps)))&#10;"/>
<po column="12" line="1390" message="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1390:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;  let mk_MonOpMonOperand(opr, opnd) = mo in&#10;    pre_(eval_MonOpMonOperand(mk_MonOpMonOperand(opr, opnd)), e)))&#10;" number="285" object="" resource="newspeakSL" toString="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1390:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;  let mk_MonOpMonOperand(opr, opnd) = mo in&#10;    pre_(eval_MonOpMonOperand(mk_MonOpMonOperand(opr, opnd)), e)))&#10;"/>
<po column="12" line="1392" message="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1392:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;    let mk_VectorOperation(v, m, op) = mo in&#10;      pre_(eval_VectorOperation(mk_VectorOperation(v, m, op))(e), ps))))&#10;" number="286" object="" resource="newspeakSL" toString="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1392:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;    let mk_VectorOperation(v, m, op) = mo in&#10;      pre_(eval_VectorOperation(mk_VectorOperation(v, m, op))(e), ps))))&#10;"/>
<po column="12" line="1392" message="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1392:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;    let mk_VectorOperation(v, m, op) = mo in&#10;      pre_(eval_VectorOperation(mk_VectorOperation(v, m, op)), e))))&#10;" number="287" object="" resource="newspeakSL" toString="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1392:12&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;    let mk_VectorOperation(v, m, op) = mo in&#10;      pre_(eval_VectorOperation(mk_VectorOperation(v, m, op)), e))))&#10;"/>
<po column="20" line="1393" message="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1393:20&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (not exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;      (exists mk_Value(v):(MonOpMonOperand | Value | VectorOperation) &amp; mk_Value(v) = mo =&gt;&#10;      let mk_Value(v) = mo in&#10;        pre_(eval_Value(mk_Value(v))(e), ps)))))&#10;" number="288" object="" resource="newspeakSL" toString="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1393:20&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (not exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;      (exists mk_Value(v):(MonOpMonOperand | Value | VectorOperation) &amp; mk_Value(v) = mo =&gt;&#10;      let mk_Value(v) = mo in&#10;        pre_(eval_Value(mk_Value(v))(e), ps)))))&#10;"/>
<po column="20" line="1393" message="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1393:20&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (not exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;      (exists mk_Value(v):(MonOpMonOperand | Value | VectorOperation) &amp; mk_Value(v) = mo =&gt;&#10;      let mk_Value(v) = mo in&#10;        pre_(eval_Value(mk_Value(v)), e)))))&#10;" number="289" object="" resource="newspeakSL" toString="eval_MonOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1393:20&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (not exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mk_MonOpMonOperand(opr, opnd) = mo =&gt;&#10;    (not exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mk_VectorOperation(v, m, op) = mo =&gt;&#10;      (exists mk_Value(v):(MonOpMonOperand | Value | VectorOperation) &amp; mk_Value(v) = mo =&gt;&#10;      let mk_Value(v) = mo in&#10;        pre_(eval_Value(mk_Value(v)), e)))))&#10;"/>
<po column="3" line="1388" message="eval_MonOperation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1388:3&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mo = mk_MonOpMonOperand(opr, opnd)) or (exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mo = mk_VectorOperation(v, m, op)) or (exists mk_Value(v):(MonOpMonOperand | Value | VectorOperation) &amp; mo = mk_Value(v)))&#10;" number="290" object="" resource="newspeakSL" toString="eval_MonOperation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1388:3&#10;(forall mk_MonOperation(mo):MonOperation, e:Env, ps:PState &amp;&#10;  (exists mk_MonOpMonOperand(opr, opnd):(MonOpMonOperand | Value | VectorOperation) &amp; mo = mk_MonOpMonOperand(opr, opnd)) or (exists mk_VectorOperation(v, m, op):(MonOpMonOperand | Value | VectorOperation) &amp; mo = mk_VectorOperation(v, m, op)) or (exists mk_Value(v):(MonOpMonOperand | Value | VectorOperation) &amp; mo = mk_Value(v)))&#10;"/>
<po column="11" line="1398" message="eval_MonOpMonOperand, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1398:11&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(opnd)(e), ps))&#10;" number="291" object="" resource="newspeakSL" toString="eval_MonOpMonOperand, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1398:11&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(opnd)(e), ps))&#10;"/>
<po column="11" line="1398" message="eval_MonOpMonOperand, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1398:11&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(opnd), e))&#10;" number="292" object="" resource="newspeakSL" toString="eval_MonOpMonOperand, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1398:11&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(opnd), e))&#10;"/>
<po column="32" line="1405" message="eval_MonOpMonOperand: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1405:32&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(opnd)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (not &lt;numabs&gt; = opr =&gt;&#10;        (not &lt;unaryminus&gt; = opr =&gt;&#10;          (not &lt;not&gt; = opr =&gt;&#10;            (exists mk_CompileTimeOp(o):MonOp &amp; mk_CompileTimeOp(o) = opr =&gt;&#10;            let mk_CompileTimeOp(o) = opr in&#10;              pre_(eval_CompileTimeOp(opr), x))))))))&#10;" number="293" object="" resource="newspeakSL" toString="eval_MonOpMonOperand: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1405:32&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(opnd)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (not &lt;numabs&gt; = opr =&gt;&#10;        (not &lt;unaryminus&gt; = opr =&gt;&#10;          (not &lt;not&gt; = opr =&gt;&#10;            (exists mk_CompileTimeOp(o):MonOp &amp; mk_CompileTimeOp(o) = opr =&gt;&#10;            let mk_CompileTimeOp(o) = opr in&#10;              pre_(eval_CompileTimeOp(opr), x))))))))&#10;"/>
<po column="51" line="1405" message="eval_MonOpMonOperand: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1405:51&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(opnd)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (not &lt;numabs&gt; = opr =&gt;&#10;        (not &lt;unaryminus&gt; = opr =&gt;&#10;          (not &lt;not&gt; = opr =&gt;&#10;            (exists mk_CompileTimeOp(o):MonOp &amp; mk_CompileTimeOp(o) = opr =&gt;&#10;            let mk_CompileTimeOp(o) = opr in&#10;              is_(opr, CompileTimeOp))))))))&#10;" number="294" object="" resource="newspeakSL" toString="eval_MonOpMonOperand: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1405:51&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(opnd)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (not &lt;numabs&gt; = opr =&gt;&#10;        (not &lt;unaryminus&gt; = opr =&gt;&#10;          (not &lt;not&gt; = opr =&gt;&#10;            (exists mk_CompileTimeOp(o):MonOp &amp; mk_CompileTimeOp(o) = opr =&gt;&#10;            let mk_CompileTimeOp(o) = opr in&#10;              is_(opr, CompileTimeOp))))))))&#10;"/>
<po column="8" line="1401" message="eval_MonOpMonOperand: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1401:8&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(opnd)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      opr = &lt;numabs&gt; or opr = &lt;unaryminus&gt; or opr = &lt;not&gt; or (exists mk_CompileTimeOp(o):MonOp &amp; opr = mk_CompileTimeOp(o)) or opr = &lt;discard&gt; or opr = &lt;round&gt; or opr = &lt;odd&gt; or opr = &lt;float&gt; or opr = &lt;mantissa&gt; or opr = &lt;exponent&gt;)))&#10;" number="295" object="" resource="newspeakSL" toString="eval_MonOpMonOperand: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1401:8&#10;(forall mk_MonOpMonOperand(opr, opnd):MonOpMonOperand, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(opnd)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      opr = &lt;numabs&gt; or opr = &lt;unaryminus&gt; or opr = &lt;not&gt; or (exists mk_CompileTimeOp(o):MonOp &amp; opr = mk_CompileTimeOp(o)) or opr = &lt;discard&gt; or opr = &lt;round&gt; or opr = &lt;odd&gt; or opr = &lt;float&gt; or opr = &lt;mantissa&gt; or opr = &lt;exponent&gt;)))&#10;"/>
<po column="28" line="1419" message="eval_Abs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1419:28&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not is_(val, Real) =&gt;&#10;    (is_(val, Int) =&gt;&#10;      is_(val, Int))))&#10;" number="296" object="" resource="newspeakSL" toString="eval_Abs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1419:28&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not is_(val, Real) =&gt;&#10;    (is_(val, Int) =&gt;&#10;      is_(val, Int))))&#10;"/>
<po column="33" line="1427" message="eval_MonMinus: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1427:33&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not is_(val, Real) =&gt;&#10;    (is_(val, Int) =&gt;&#10;      is_(val, Int))))&#10;" number="297" object="" resource="newspeakSL" toString="eval_MonMinus: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1427:33&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not is_(val, Real) =&gt;&#10;    (is_(val, Int) =&gt;&#10;      is_(val, Int))))&#10;"/>
<po column="8" line="1440" message="eval_CompileTimeOp: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1440:8&#10;(forall mk_CompileTimeOp(op):CompileTimeOp, mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not (not is_(val, Real)) =&gt;&#10;    op = &lt;inf&gt; or op = &lt;sup&gt; or op = &lt;absonly&gt; or op = &lt;relonly&gt; or op = &lt;abserr&gt; or op = &lt;relerr&gt;))&#10;" number="298" object="" resource="newspeakSL" toString="eval_CompileTimeOp: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1440:8&#10;(forall mk_CompileTimeOp(op):CompileTimeOp, mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not (not is_(val, Real)) =&gt;&#10;    op = &lt;inf&gt; or op = &lt;sup&gt; or op = &lt;absonly&gt; or op = &lt;relonly&gt; or op = &lt;abserr&gt; or op = &lt;relerr&gt;))&#10;"/>
<po column="25" line="1477" message="eval_Odd: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1477:25&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not (not is_(val, Real)) =&gt;&#10;    is_(val, Int)))&#10;" number="299" object="" resource="newspeakSL" toString="eval_Odd: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1477:25&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not (not is_(val, Real)) =&gt;&#10;    is_(val, Int)))&#10;"/>
<po column="27" line="1483" message="eval_Float: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1483:27&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not (not is_(val, Real)) =&gt;&#10;    is_(val, Int)))&#10;" number="300" object="" resource="newspeakSL" toString="eval_Float: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1483:27&#10;(forall mk_EST_value(val, sto, time):EST_value &amp;&#10;  (not (not is_(val, Real)) =&gt;&#10;    is_(val, Int)))&#10;"/>
<po column="11" line="1487" message="eval_VectorOperation, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1487:11&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(mo)(e), ps))&#10;" number="301" object="" resource="newspeakSL" toString="eval_VectorOperation, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1487:11&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(mo)(e), ps))&#10;"/>
<po column="11" line="1487" message="eval_VectorOperation, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1487:11&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(mo), e))&#10;" number="302" object="" resource="newspeakSL" toString="eval_VectorOperation, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1487:11&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(mo), e))&#10;"/>
<po column="21" line="1491" message="eval_VectorOperation, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1491:21&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (not (mult = nil) =&gt;&#10;        pre_(eval_VectorMult(mu(x, sto |-&gt; (ps.sto)))(mult), e)))))&#10;" number="303" object="" resource="newspeakSL" toString="eval_VectorOperation, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1491:21&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (not (mult = nil) =&gt;&#10;        pre_(eval_VectorMult(mu(x, sto |-&gt; (ps.sto)))(mult), e)))))&#10;"/>
<po column="21" line="1491" message="eval_VectorOperation, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1491:21&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (not (mult = nil) =&gt;&#10;        pre_(eval_VectorMult(mu(x, sto |-&gt; (ps.sto))), mult)))))&#10;" number="304" object="" resource="newspeakSL" toString="eval_VectorOperation, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1491:21&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (not (mult = nil) =&gt;&#10;        pre_(eval_VectorMult(mu(x, sto |-&gt; (ps.sto))), mult)))))&#10;"/>
<po column="59" line="1491" message="eval_VectorOperation, v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1491:59&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (not (mult = nil) =&gt;&#10;        is_(mult, Multiple)))))&#10;" number="305" object="" resource="newspeakSL" toString="eval_VectorOperation, v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1491:59&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (not (mult = nil) =&gt;&#10;        is_(mult, Multiple)))))&#10;"/>
<po column="13" line="1494" message="eval_VectorOperation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1494:13&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (let v:EST_value = (if (mult = nil)&#10;      then x&#10;      else eval_VectorMult(mu(x, sto |-&gt; (ps.sto)))(mult)(e)) in&#10;        (not ((v.val) = &lt;err&gt;) =&gt;&#10;          vo = &lt;sum&gt; or vo = &lt;product&gt; or vo = &lt;vecmax&gt; or vo = &lt;vecmin&gt; or vo = &lt;all&gt; or vo = &lt;some&gt; or vo = &lt;flatten&gt;)))))&#10;" number="306" object="" resource="newspeakSL" toString="eval_VectorOperation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1494:13&#10;(forall mk_VectorOperation(vo, mo, mult):VectorOperation, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_MonOperation(mo)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (let v:EST_value = (if (mult = nil)&#10;      then x&#10;      else eval_VectorMult(mu(x, sto |-&gt; (ps.sto)))(mult)(e)) in&#10;        (not ((v.val) = &lt;err&gt;) =&gt;&#10;          vo = &lt;sum&gt; or vo = &lt;product&gt; or vo = &lt;vecmax&gt; or vo = &lt;vecmin&gt; or vo = &lt;all&gt; or vo = &lt;some&gt; or vo = &lt;flatten&gt;)))))&#10;"/>
<po column="7" line="1508" message="eval_VectorMult, val, type: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1508:7&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  exists mk_Vector(val, type):Expressible_value &amp; mk_Vector(val, type) = est_val)&#10;" number="307" object="" resource="newspeakSL" toString="eval_VectorMult, val, type: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1508:7&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  exists mk_Vector(val, type):Expressible_value &amp; mk_Vector(val, type) = est_val)&#10;"/>
<po column="29" line="1508" message="eval_VectorMult, val, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1508:29&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  is_(est_val, Vector))&#10;" number="308" object="" resource="newspeakSL" toString="eval_VectorMult, val, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1508:29&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  is_(est_val, Vector))&#10;"/>
<po column="12" line="1509" message="eval_VectorMult, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1509:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    pre_(eval_Operation(op)(e), mk_PState(sto, time))))&#10;" number="309" object="" resource="newspeakSL" toString="eval_VectorMult, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1509:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    pre_(eval_Operation(op)(e), mk_PState(sto, time))))&#10;"/>
<po column="12" line="1509" message="eval_VectorMult, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1509:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    pre_(eval_Operation(op), e)))&#10;" number="310" object="" resource="newspeakSL" toString="eval_VectorMult, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1509:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    pre_(eval_Operation(op), e)))&#10;"/>
<po column="12" line="1510" message="eval_VectorMult, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1510:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      pre_(eval_Operation(to_p)(e), mk_PState(sto, (b1.time))))))&#10;" number="311" object="" resource="newspeakSL" toString="eval_VectorMult, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1510:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      pre_(eval_Operation(to_p)(e), mk_PState(sto, (b1.time))))))&#10;"/>
<po column="12" line="1510" message="eval_VectorMult, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1510:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      pre_(eval_Operation(to_p), e))))&#10;" number="312" object="" resource="newspeakSL" toString="eval_VectorMult, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1510:12&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      pre_(eval_Operation(to_p), e))))&#10;"/>
<po column="20" line="1515" message="eval_VectorMult, lower: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1515:20&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            pre_min({((b1.val).val), ((b2.val).val)})))))))&#10;" number="313" object="" resource="newspeakSL" toString="eval_VectorMult, lower: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1515:20&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            pre_min({((b1.val).val), ((b2.val).val)})))))))&#10;"/>
<po column="24" line="1515" message="eval_VectorMult, lower: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1515:24&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (is_real(((b1.val).val)))&#10;            and (is_real(((b2.val).val)))&#10;            and &#10;            and is_({((b1.val).val), ((b2.val).val)}, set of (real))))))))&#10;" number="314" object="" resource="newspeakSL" toString="eval_VectorMult, lower: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1515:24&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (is_real(((b1.val).val)))&#10;            and (is_real(((b2.val).val)))&#10;            and &#10;            and is_({((b1.val).val), ((b2.val).val)}, set of (real))))))))&#10;"/>
<po column="20" line="1516" message="eval_VectorMult, upper: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1516:20&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            pre_max({((b1.val).val), ((b2.val).val)})))))))&#10;" number="315" object="" resource="newspeakSL" toString="eval_VectorMult, upper: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1516:20&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            pre_max({((b1.val).val), ((b2.val).val)})))))))&#10;"/>
<po column="24" line="1516" message="eval_VectorMult, upper: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1516:24&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (is_real(((b1.val).val)))&#10;            and (is_real(((b2.val).val)))&#10;            and &#10;            and is_({((b1.val).val), ((b2.val).val)}, set of (real))))))))&#10;" number="316" object="" resource="newspeakSL" toString="eval_VectorMult, upper: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1516:24&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (is_real(((b1.val).val)))&#10;            and (is_real(((b2.val).val)))&#10;            and &#10;            and is_({((b1.val).val), ((b2.val).val)}, set of (real))))))))&#10;"/>
<po column="43" line="1519" message="eval_VectorMult, new_val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1519:43&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(lower)))))))))&#10;" number="317" object="" resource="newspeakSL" toString="eval_VectorMult, new_val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1519:43&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(lower)))))))))&#10;"/>
<po column="49" line="1519" message="eval_VectorMult, new_val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1519:49&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(upper)))))))))&#10;" number="318" object="" resource="newspeakSL" toString="eval_VectorMult, new_val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1519:49&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(upper)))))))))&#10;"/>
<po column="42" line="1520" message="eval_VectorMult, new_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1520:42&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(lower)))))))))&#10;" number="319" object="" resource="newspeakSL" toString="eval_VectorMult, new_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1520:42&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(lower)))))))))&#10;"/>
<po column="48" line="1520" message="eval_VectorMult, new_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1520:48&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(upper)))))))))&#10;" number="320" object="" resource="newspeakSL" toString="eval_VectorMult, new_type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1520:48&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                is_int(upper)))))))))&#10;"/>
<po column="65" line="1522" message="eval_VectorMult, new_t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1522:65&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                (let new_val:VectorValue = vector_subv(val, lower, upper), new_type:VectorType = mk_VectorType(lower, upper, (type.type), (type.fl)) in&#10;                  is_int((upper - lower)))))))))))&#10;" number="321" object="" resource="newspeakSL" toString="eval_VectorMult, new_t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1522:65&#10;(forall mk_EST_value(est_val, sto, time):EST_value, mk_Multiple(op, to_p):Multiple, e:Env &amp;&#10;  (let mk_Vector(val, type):Expressible_value = est_val in&#10;    (let b1:EST_value = eval_Operation(op)(e)(mk_PState(sto, time)) in&#10;      (let b2:EST_value = eval_Operation(to_p)(e)(mk_PState(sto, (b1.time))) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (((card (((b1.val).type).range)) &lt;&gt; 1) or ((card (((b2.val).type).range)) &lt;&gt; 1)) =&gt;&#10;            (let lower:real = min({((b1.val).val), ((b2.val).val)}), upper:real = max({((b1.val).val), ((b2.val).val)}) in&#10;              (not ((lower &lt; (type.lower)) or ((type.upper) &lt; upper)) =&gt;&#10;                (let new_val:VectorValue = vector_subv(val, lower, upper), new_type:VectorType = mk_VectorType(lower, upper, (type.type), (type.fl)) in&#10;                  is_int((upper - lower)))))))))))&#10;"/>
<po column="22" line="1587" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1587:22&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;    let mk_NumOp(opr) = op in&#10;      pre_(eval_NumOp(bo)(e), ps))))&#10;" number="322" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1587:22&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;    let mk_NumOp(opr) = op in&#10;      pre_(eval_NumOp(bo)(e), ps))))&#10;"/>
<po column="22" line="1587" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1587:22&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;    let mk_NumOp(opr) = op in&#10;      pre_(eval_NumOp(bo), e))))&#10;" number="323" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1587:22&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;    let mk_NumOp(opr) = op in&#10;      pre_(eval_NumOp(bo), e))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (&lt;numgt&gt; = op =&gt; &#10;        pre_(eval_CompOp(bo)(e), ps)))))&#10;" number="324" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (&lt;numgt&gt; = op =&gt; &#10;        pre_(eval_CompOp(bo)(e), ps)))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (&lt;numgt&gt; = op =&gt; &#10;        pre_(eval_CompOp(bo), e)))))&#10;" number="325" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (&lt;numgt&gt; = op =&gt; &#10;        pre_(eval_CompOp(bo), e)))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (&lt;numlt&gt; = op =&gt; &#10;          pre_(eval_CompOp(bo)(e), ps))))))&#10;" number="326" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (&lt;numlt&gt; = op =&gt; &#10;          pre_(eval_CompOp(bo)(e), ps))))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (&lt;numlt&gt; = op =&gt; &#10;          pre_(eval_CompOp(bo), e))))))&#10;" number="327" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (&lt;numlt&gt; = op =&gt; &#10;          pre_(eval_CompOp(bo), e))))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (&lt;numge&gt; = op =&gt; &#10;            pre_(eval_CompOp(bo)(e), ps)))))))&#10;" number="328" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (&lt;numge&gt; = op =&gt; &#10;            pre_(eval_CompOp(bo)(e), ps)))))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (&lt;numge&gt; = op =&gt; &#10;            pre_(eval_CompOp(bo), e)))))))&#10;" number="329" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (&lt;numge&gt; = op =&gt; &#10;            pre_(eval_CompOp(bo), e)))))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (&lt;numle&gt; = op =&gt; &#10;              pre_(eval_CompOp(bo)(e), ps))))))))&#10;" number="330" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (&lt;numle&gt; = op =&gt; &#10;              pre_(eval_CompOp(bo)(e), ps))))))))&#10;"/>
<po column="40" line="1588" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (&lt;numle&gt; = op =&gt; &#10;              pre_(eval_CompOp(bo), e))))))))&#10;" number="331" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1588:40&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (&lt;numle&gt; = op =&gt; &#10;              pre_(eval_CompOp(bo), e))))))))&#10;"/>
<po column="19" line="1589" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (&lt;and&gt; = op =&gt; &#10;                pre_(eval_BoolOp(bo)(e), ps)))))))))&#10;" number="332" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (&lt;and&gt; = op =&gt; &#10;                pre_(eval_BoolOp(bo)(e), ps)))))))))&#10;"/>
<po column="19" line="1589" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (&lt;and&gt; = op =&gt; &#10;                pre_(eval_BoolOp(bo), e)))))))))&#10;" number="333" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (&lt;and&gt; = op =&gt; &#10;                pre_(eval_BoolOp(bo), e)))))))))&#10;"/>
<po column="19" line="1589" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (&lt;or&gt; = op =&gt; &#10;                  pre_(eval_BoolOp(bo)(e), ps))))))))))&#10;" number="334" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (&lt;or&gt; = op =&gt; &#10;                  pre_(eval_BoolOp(bo)(e), ps))))))))))&#10;"/>
<po column="19" line="1589" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (&lt;or&gt; = op =&gt; &#10;                  pre_(eval_BoolOp(bo), e))))))))))&#10;" number="335" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1589:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (&lt;or&gt; = op =&gt; &#10;                  pre_(eval_BoolOp(bo), e))))))))))&#10;"/>
<po column="19" line="1590" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (&lt;EQ&gt; = op =&gt; &#10;                    pre_(eval_EqOp(bo)(e), ps)))))))))))&#10;" number="336" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (&lt;EQ&gt; = op =&gt; &#10;                    pre_(eval_EqOp(bo)(e), ps)))))))))))&#10;"/>
<po column="19" line="1590" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (&lt;EQ&gt; = op =&gt; &#10;                    pre_(eval_EqOp(bo), e)))))))))))&#10;" number="337" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (&lt;EQ&gt; = op =&gt; &#10;                    pre_(eval_EqOp(bo), e)))))))))))&#10;"/>
<po column="19" line="1590" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (&lt;NEQ&gt; = op =&gt; &#10;                      pre_(eval_EqOp(bo)(e), ps))))))))))))&#10;" number="338" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (&lt;NEQ&gt; = op =&gt; &#10;                      pre_(eval_EqOp(bo)(e), ps))))))))))))&#10;"/>
<po column="19" line="1590" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (&lt;NEQ&gt; = op =&gt; &#10;                      pre_(eval_EqOp(bo), e))))))))))))&#10;" number="339" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1590:19&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (&lt;NEQ&gt; = op =&gt; &#10;                      pre_(eval_EqOp(bo), e))))))))))))&#10;"/>
<po column="17" line="1591" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1591:17&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (not &lt;NEQ&gt; = op =&gt;&#10;                      (&lt;concat&gt; = op =&gt; &#10;                        pre_(eval_Concat(bo)(e), ps)))))))))))))&#10;" number="340" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1591:17&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (not &lt;NEQ&gt; = op =&gt;&#10;                      (&lt;concat&gt; = op =&gt; &#10;                        pre_(eval_Concat(bo)(e), ps)))))))))))))&#10;"/>
<po column="17" line="1591" message="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1591:17&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (not &lt;NEQ&gt; = op =&gt;&#10;                      (&lt;concat&gt; = op =&gt; &#10;                        pre_(eval_Concat(bo), e)))))))))))))&#10;" number="341" object="" resource="newspeakSL" toString="eval_BinaryOperation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1591:17&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (not exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(opr) = op =&gt;&#10;      (not &lt;numgt&gt; = op =&gt;&#10;        (not &lt;numlt&gt; = op =&gt;&#10;          (not &lt;numge&gt; = op =&gt;&#10;            (not &lt;numle&gt; = op =&gt;&#10;              (not &lt;and&gt; = op =&gt;&#10;                (not &lt;or&gt; = op =&gt;&#10;                  (not &lt;EQ&gt; = op =&gt;&#10;                    (not &lt;NEQ&gt; = op =&gt;&#10;                      (&lt;concat&gt; = op =&gt; &#10;                        pre_(eval_Concat(bo), e)))))))))))))&#10;"/>
<po column="3" line="1586" message="eval_BinaryOperation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1586:3&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; op = mk_NumOp(opr)) or op = &lt;numgt&gt; or op = &lt;numlt&gt; or op = &lt;numge&gt; or op = &lt;numle&gt; or op = &lt;and&gt; or op = &lt;or&gt; or op = &lt;EQ&gt; or op = &lt;NEQ&gt; or op = &lt;concat&gt;))&#10;" number="342" object="" resource="newspeakSL" toString="eval_BinaryOperation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1586:3&#10;(forall bo:BinaryOperation, e:Env, ps:PState &amp;&#10;  (let mk_BinaryOp(op):BinaryOp = (bo.opr) in&#10;    (exists mk_NumOp(opr):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; op = mk_NumOp(opr)) or op = &lt;numgt&gt; or op = &lt;numlt&gt; or op = &lt;numge&gt; or op = &lt;numle&gt; or op = &lt;and&gt; or op = &lt;or&gt; or op = &lt;EQ&gt; or op = &lt;NEQ&gt; or op = &lt;concat&gt;))&#10;"/>
<po column="12" line="1596" message="eval_NumOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1596:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;" number="343" object="" resource="newspeakSL" toString="eval_NumOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1596:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;"/>
<po column="12" line="1596" message="eval_NumOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1596:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;" number="344" object="" resource="newspeakSL" toString="eval_NumOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1596:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;"/>
<po column="12" line="1597" message="eval_NumOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1597:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;" number="345" object="" resource="newspeakSL" toString="eval_NumOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1597:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;"/>
<po column="12" line="1597" message="eval_NumOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1597:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;" number="346" object="" resource="newspeakSL" toString="eval_NumOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1597:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;"/>
<po column="31" line="1619" message="eval_NumOp, f: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1619:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not exists mk_NumOp(op):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(op) = opr =&gt;&#10;        (&lt;replaceflav&gt; = opr =&gt; &#10;          ((((a2.val) &lt;&gt; &lt;err&gt;) and is_((a2.val), Void)) =&gt;&#10;            exists mk_VoidType(f):(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) &amp; mk_VoidType(f) = ((a2.val).type)))))))&#10;" number="347" object="" resource="newspeakSL" toString="eval_NumOp, f: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1619:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not exists mk_NumOp(op):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(op) = opr =&gt;&#10;        (&lt;replaceflav&gt; = opr =&gt; &#10;          ((((a2.val) &lt;&gt; &lt;err&gt;) and is_((a2.val), Void)) =&gt;&#10;            exists mk_VoidType(f):(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) &amp; mk_VoidType(f) = ((a2.val).type)))))))&#10;"/>
<po column="48" line="1619" message="eval_NumOp, f: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1619:48&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not exists mk_NumOp(op):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(op) = opr =&gt;&#10;        (&lt;replaceflav&gt; = opr =&gt; &#10;          ((((a2.val) &lt;&gt; &lt;err&gt;) and is_((a2.val), Void)) =&gt;&#10;            is_(((a2.val).type), VoidType)))))))&#10;" number="348" object="" resource="newspeakSL" toString="eval_NumOp, f: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1619:48&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not exists mk_NumOp(op):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(op) = opr =&gt;&#10;        (&lt;replaceflav&gt; = opr =&gt; &#10;          ((((a2.val) &lt;&gt; &lt;err&gt;) and is_((a2.val), Void)) =&gt;&#10;            is_(((a2.val).type), VoidType)))))))&#10;"/>
<po column="31" line="1621" message="eval_NumOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1621:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not exists mk_NumOp(op):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(op) = opr =&gt;&#10;        (&lt;replaceflav&gt; = opr =&gt; &#10;          ((((a2.val) &lt;&gt; &lt;err&gt;) and is_((a2.val), Void)) =&gt;&#10;            (let mk_VoidType(f):(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((a2.val).type) in&#10;              (is_(replace_flavour(((a1.val).type), f), Float)) or&#10;              (is_(replace_flavour(((a1.val).type), f), IntType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), StructureType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), TrType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), UnionType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), VectorType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), VoidType)))))))))&#10;" number="349" object="" resource="newspeakSL" toString="eval_NumOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1621:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not exists mk_NumOp(op):(&lt;replaceflav&gt; | BoolOp | CompOp | EqOp | NumOp | VecBinOp) &amp; mk_NumOp(op) = opr =&gt;&#10;        (&lt;replaceflav&gt; = opr =&gt; &#10;          ((((a2.val) &lt;&gt; &lt;err&gt;) and is_((a2.val), Void)) =&gt;&#10;            (let mk_VoidType(f):(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((a2.val).type) in&#10;              (is_(replace_flavour(((a1.val).type), f), Float)) or&#10;              (is_(replace_flavour(((a1.val).type), f), IntType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), StructureType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), TrType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), UnionType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), VectorType)) or&#10;              (is_(replace_flavour(((a1.val).type), f), VoidType)))))))))&#10;"/>
<po column="12" line="1629" message="eval_CompOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1629:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;" number="350" object="" resource="newspeakSL" toString="eval_CompOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1629:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;"/>
<po column="12" line="1629" message="eval_CompOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1629:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;" number="351" object="" resource="newspeakSL" toString="eval_CompOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1629:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;"/>
<po column="12" line="1630" message="eval_CompOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1630:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;" number="352" object="" resource="newspeakSL" toString="eval_CompOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1630:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;"/>
<po column="12" line="1630" message="eval_CompOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1630:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;" number="353" object="" resource="newspeakSL" toString="eval_CompOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1630:12&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;"/>
<po column="29" line="1632" message="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1632:29&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        is_((a1.val), Int)))))&#10;" number="354" object="" resource="newspeakSL" toString="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1632:29&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        is_((a1.val), Int)))))&#10;"/>
<po column="36" line="1632" message="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1632:36&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        is_((a2.val), Int)))))&#10;" number="355" object="" resource="newspeakSL" toString="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1632:36&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        is_((a2.val), Int)))))&#10;"/>
<po column="43" line="1632" message="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1632:43&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_(opr, &lt;numge&gt;)) or&#10;        (is_(opr, &lt;numgt&gt;)) or&#10;        (is_(opr, &lt;numle&gt;)) or&#10;        (is_(opr, &lt;numlt&gt;)))))))&#10;" number="356" object="" resource="newspeakSL" toString="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1632:43&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_(opr, &lt;numge&gt;)) or&#10;        (is_(opr, &lt;numgt&gt;)) or&#10;        (is_(opr, &lt;numle&gt;)) or&#10;        (is_(opr, &lt;numlt&gt;)))))))&#10;"/>
<po column="30" line="1635" message="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1635:30&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a1.val), Real))))))&#10;" number="357" object="" resource="newspeakSL" toString="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1635:30&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a1.val), Real))))))&#10;"/>
<po column="37" line="1635" message="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1635:37&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a2.val), Real))))))&#10;" number="358" object="" resource="newspeakSL" toString="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1635:37&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a2.val), Real))))))&#10;"/>
<po column="44" line="1635" message="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1635:44&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_(opr, &lt;numge&gt;)) or&#10;          (is_(opr, &lt;numgt&gt;)) or&#10;          (is_(opr, &lt;numle&gt;)) or&#10;          (is_(opr, &lt;numlt&gt;))))))))&#10;" number="359" object="" resource="newspeakSL" toString="eval_CompOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1635:44&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(opr), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_(opr, &lt;numge&gt;)) or&#10;          (is_(opr, &lt;numgt&gt;)) or&#10;          (is_(opr, &lt;numle&gt;)) or&#10;          (is_(opr, &lt;numlt&gt;))))))))&#10;"/>
<po column="14" line="1641" message="eval_EqOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1641:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;" number="360" object="" resource="newspeakSL" toString="eval_EqOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1641:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;"/>
<po column="14" line="1641" message="eval_EqOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1641:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;" number="361" object="" resource="newspeakSL" toString="eval_EqOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1641:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;"/>
<po column="14" line="1642" message="eval_EqOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1642:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;" number="362" object="" resource="newspeakSL" toString="eval_EqOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1642:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;"/>
<po column="14" line="1642" message="eval_EqOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1642:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;" number="363" object="" resource="newspeakSL" toString="eval_EqOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1642:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;"/>
<po column="29" line="1644" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1644:29&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        is_((a1.val), Tr)))))&#10;" number="364" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1644:29&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        is_((a1.val), Tr)))))&#10;"/>
<po column="36" line="1644" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1644:36&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        is_((a2.val), Tr)))))&#10;" number="365" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1644:36&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        is_((a2.val), Tr)))))&#10;"/>
<po column="43" line="1644" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1644:43&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_(op, &lt;EQ&gt;)) or&#10;        (is_(op, &lt;NEQ&gt;)))))))&#10;" number="366" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1644:43&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      ((is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_(op, &lt;EQ&gt;)) or&#10;        (is_(op, &lt;NEQ&gt;)))))))&#10;"/>
<po column="31" line="1647" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1647:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a1.val), Real))))))&#10;" number="367" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1647:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a1.val), Real))))))&#10;"/>
<po column="38" line="1647" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1647:38&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a2.val), Real))))))&#10;" number="368" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1647:38&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          is_((a2.val), Real))))))&#10;"/>
<po column="45" line="1647" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1647:45&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_(op, &lt;EQ&gt;)) or&#10;          (is_(op, &lt;NEQ&gt;))))))))&#10;" number="369" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1647:45&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        ((is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_(op, &lt;EQ&gt;)) or&#10;          (is_(op, &lt;NEQ&gt;))))))))&#10;"/>
<po column="30" line="1650" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1650:30&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            is_((a1.val), Int)))))))&#10;" number="370" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1650:30&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            is_((a1.val), Int)))))))&#10;"/>
<po column="37" line="1650" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1650:37&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            is_((a2.val), Int)))))))&#10;" number="371" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1650:37&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            is_((a2.val), Int)))))))&#10;"/>
<po column="44" line="1650" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1650:44&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_(op, &lt;EQ&gt;)) or&#10;            (is_(op, &lt;NEQ&gt;)))))))))&#10;" number="372" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1650:44&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          ((is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_(op, &lt;EQ&gt;)) or&#10;            (is_(op, &lt;NEQ&gt;)))))))))&#10;"/>
<po column="31" line="1653" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1653:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_((a1.val), Void) and is_((a2.val), Void)) =&gt;&#10;              is_((a1.val), Void))))))))&#10;" number="373" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1653:31&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_((a1.val), Void) and is_((a2.val), Void)) =&gt;&#10;              is_((a1.val), Void))))))))&#10;"/>
<po column="38" line="1653" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1653:38&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_((a1.val), Void) and is_((a2.val), Void)) =&gt;&#10;              is_((a2.val), Void))))))))&#10;" number="374" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1653:38&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_((a1.val), Void) and is_((a2.val), Void)) =&gt;&#10;              is_((a2.val), Void))))))))&#10;"/>
<po column="45" line="1653" message="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1653:45&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_((a1.val), Void) and is_((a2.val), Void)) =&gt;&#10;              ((is_(op, &lt;EQ&gt;)) or&#10;              (is_(op, &lt;NEQ&gt;))))))))))&#10;" number="375" object="" resource="newspeakSL" toString="eval_EqOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1653:45&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (is_((a1.val), Tr) and is_((a2.val), Tr)) =&gt;&#10;        (not (is_((a1.val), Real) and is_((a2.val), Real)) =&gt;&#10;          (not (is_((a1.val), Int) and is_((a2.val), Int)) =&gt;&#10;            ((is_((a1.val), Void) and is_((a2.val), Void)) =&gt;&#10;              ((is_(op, &lt;EQ&gt;)) or&#10;              (is_(op, &lt;NEQ&gt;))))))))))&#10;"/>
<po column="14" line="1659" message="eval_BoolOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1659:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;" number="376" object="" resource="newspeakSL" toString="eval_BoolOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1659:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;"/>
<po column="14" line="1659" message="eval_BoolOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1659:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;" number="377" object="" resource="newspeakSL" toString="eval_BoolOp, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1659:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;"/>
<po column="14" line="1660" message="eval_BoolOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1660:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;" number="378" object="" resource="newspeakSL" toString="eval_BoolOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1660:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;"/>
<po column="14" line="1660" message="eval_BoolOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1660:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;" number="379" object="" resource="newspeakSL" toString="eval_BoolOp, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1660:14&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;"/>
<po column="41" line="1664" message="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1664:41&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (&lt;and&gt; = op =&gt; &#10;          is_((a1.val), Tr))))))&#10;" number="380" object="" resource="newspeakSL" toString="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1664:41&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (&lt;and&gt; = op =&gt; &#10;          is_((a1.val), Tr))))))&#10;"/>
<po column="48" line="1664" message="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1664:48&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (&lt;and&gt; = op =&gt; &#10;          is_((a2.val), Tr))))))&#10;" number="381" object="" resource="newspeakSL" toString="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1664:48&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (&lt;and&gt; = op =&gt; &#10;          is_((a2.val), Tr))))))&#10;"/>
<po column="39" line="1666" message="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1666:39&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (not &lt;and&gt; = op =&gt;&#10;          (&lt;or&gt; = op =&gt; &#10;            is_((a1.val), Tr)))))))&#10;" number="382" object="" resource="newspeakSL" toString="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1666:39&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (not &lt;and&gt; = op =&gt;&#10;          (&lt;or&gt; = op =&gt; &#10;            is_((a1.val), Tr)))))))&#10;"/>
<po column="46" line="1666" message="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1666:46&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (not &lt;and&gt; = op =&gt;&#10;          (&lt;or&gt; = op =&gt; &#10;            is_((a2.val), Tr)))))))&#10;" number="383" object="" resource="newspeakSL" toString="eval_BoolOp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1666:46&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        (not &lt;and&gt; = op =&gt;&#10;          (&lt;or&gt; = op =&gt; &#10;            is_((a2.val), Tr)))))))&#10;"/>
<po column="10" line="1663" message="eval_BoolOp: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1663:10&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        op = &lt;and&gt; or op = &lt;or&gt;))))&#10;" number="384" object="" resource="newspeakSL" toString="eval_BoolOp: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1663:10&#10;(forall mk_BinaryOperation(left, mk_BinaryOp(op), right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a2.val), Tr) and is_((a2.val), Tr))) =&gt;&#10;        op = &lt;and&gt; or op = &lt;or&gt;))))&#10;"/>
<po column="14" line="1672" message="eval_Concat, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1672:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;" number="385" object="" resource="newspeakSL" toString="eval_Concat, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1672:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left)(e), ps))&#10;"/>
<po column="14" line="1672" message="eval_Concat, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1672:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;" number="386" object="" resource="newspeakSL" toString="eval_Concat, a1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1672:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  pre_(eval_MonOperation(left), e))&#10;"/>
<po column="14" line="1673" message="eval_Concat, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1673:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;" number="387" object="" resource="newspeakSL" toString="eval_Concat, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1673:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right)(e), mu(ps, time |-&gt; (a1.time)))))&#10;"/>
<po column="14" line="1673" message="eval_Concat, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1673:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;" number="388" object="" resource="newspeakSL" toString="eval_Concat, a2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1673:14&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    pre_(eval_MonOperation(right), e)))&#10;"/>
<po column="38" line="1679" message="eval_Concat, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1679:38&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_((a1.val), Vector))))))&#10;" number="389" object="" resource="newspeakSL" toString="eval_Concat, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1679:38&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_((a1.val), Vector))))))&#10;"/>
<po column="45" line="1679" message="eval_Concat, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1679:45&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_((a2.val), Vector))))))&#10;" number="390" object="" resource="newspeakSL" toString="eval_Concat, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1679:45&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_((a2.val), Vector))))))&#10;"/>
<po column="50" line="1681" message="eval_Concat, new_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1681:50&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_(((a1.val).type), VectorType))))))&#10;" number="391" object="" resource="newspeakSL" toString="eval_Concat, new_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1681:50&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_(((a1.val).type), VectorType))))))&#10;"/>
<po column="50" line="1682" message="eval_Concat, new_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1682:50&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_(((a2.val).type), VectorType))))))&#10;" number="392" object="" resource="newspeakSL" toString="eval_Concat, new_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1682:50&#10;(forall mk_BinaryOperation(left, op, right):BinaryOperation, e:Env, ps:PState &amp;&#10;  (let a1:EST_value = eval_MonOperation(left)(e)(ps) in&#10;    (let a2:EST_value = eval_MonOperation(right)(e)(mu(ps, time |-&gt; (a1.time))) in&#10;      (not (not (is_((a1.val), Vector) and is_((a2.val), Vector))) =&gt;&#10;        (not (not (tleq((((a1.val).type).type), (((a2.val).type).type)) or tleq((((a2.val).type).type), (((a1.val).type).type)))) =&gt;&#10;          is_(((a2.val).type), VectorType))))))&#10;"/>
<po column="28" line="1688" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1688:28&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;  let mk_ConstantValue(c) = val in&#10;    pre_(eval_ConstantValue(mk_ConstantValue(c)), ps)))&#10;" number="393" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1688:28&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;  let mk_ConstantValue(c) = val in&#10;    pre_(eval_ConstantValue(mk_ConstantValue(c)), ps)))&#10;"/>
<po column="25" line="1689" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1689:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;    let mk_NamedValue(n) = val in&#10;      pre_(eval_NamedValue(mk_NamedValue(n))(e), ps))))&#10;" number="394" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1689:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;    let mk_NamedValue(n) = val in&#10;      pre_(eval_NamedValue(mk_NamedValue(n))(e), ps))))&#10;"/>
<po column="25" line="1689" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1689:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;    let mk_NamedValue(n) = val in&#10;      pre_(eval_NamedValue(mk_NamedValue(n)), e))))&#10;" number="395" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1689:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;    let mk_NamedValue(n) = val in&#10;      pre_(eval_NamedValue(mk_NamedValue(n)), e))))&#10;"/>
<po column="24" line="1690" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1690:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;      let mk_VectorVal(v) = val in&#10;        pre_(eval_VectorVal(mk_VectorVal(v))(e), ps)))))&#10;" number="396" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1690:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;      let mk_VectorVal(v) = val in&#10;        pre_(eval_VectorVal(mk_VectorVal(v))(e), ps)))))&#10;"/>
<po column="24" line="1690" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1690:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;      let mk_VectorVal(v) = val in&#10;        pre_(eval_VectorVal(mk_VectorVal(v)), e)))))&#10;" number="397" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1690:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;      let mk_VectorVal(v) = val in&#10;        pre_(eval_VectorVal(mk_VectorVal(v)), e)))))&#10;"/>
<po column="29" line="1691" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1691:29&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;        let mk_StructureValue(s) = val in&#10;          pre_(eval_StructureValue(mk_StructureValue(s))(e), ps))))))&#10;" number="398" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1691:29&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;        let mk_StructureValue(s) = val in&#10;          pre_(eval_StructureValue(mk_StructureValue(s))(e), ps))))))&#10;"/>
<po column="29" line="1691" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1691:29&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;        let mk_StructureValue(s) = val in&#10;          pre_(eval_StructureValue(mk_StructureValue(s)), e))))))&#10;" number="399" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1691:29&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;        let mk_StructureValue(s) = val in&#10;          pre_(eval_StructureValue(mk_StructureValue(s)), e))))))&#10;"/>
<po column="23" line="1692" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1692:23&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;          let mk_Sequence(s) = val in&#10;            pre_(eval_Sequence(mk_Sequence(s))(e), ps)))))))&#10;" number="400" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1692:23&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;          let mk_Sequence(s) = val in&#10;            pre_(eval_Sequence(mk_Sequence(s))(e), ps)))))))&#10;"/>
<po column="23" line="1692" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1692:23&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;          let mk_Sequence(s) = val in&#10;            pre_(eval_Sequence(mk_Sequence(s)), e)))))))&#10;" number="401" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1692:23&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;          let mk_Sequence(s) = val in&#10;            pre_(eval_Sequence(mk_Sequence(s)), e)))))))&#10;"/>
<po column="25" line="1693" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1693:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;            let mk_Call(id, acts) = val in&#10;              pre_(eval_Call(mk_Call(id, acts))(e), ps))))))))&#10;" number="402" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1693:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;            let mk_Call(id, acts) = val in&#10;              pre_(eval_Call(mk_Call(id, acts))(e), ps))))))))&#10;"/>
<po column="25" line="1693" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1693:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;            let mk_Call(id, acts) = val in&#10;              pre_(eval_Call(mk_Call(id, acts)), e))))))))&#10;" number="403" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1693:25&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;            let mk_Call(id, acts) = val in&#10;              pre_(eval_Call(mk_Call(id, acts)), e))))))))&#10;"/>
<po column="26" line="1694" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1694:26&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;              let mk_Conditional(c) = val in&#10;                pre_(eval_Conditional(val)(e), ps)))))))))&#10;" number="404" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1694:26&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;              let mk_Conditional(c) = val in&#10;                pre_(eval_Conditional(val)(e), ps)))))))))&#10;"/>
<po column="26" line="1694" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1694:26&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;              let mk_Conditional(c) = val in&#10;                pre_(eval_Conditional(val), e)))))))))&#10;" number="405" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1694:26&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;              let mk_Conditional(c) = val in&#10;                pre_(eval_Conditional(val), e)))))))))&#10;"/>
<po column="43" line="1694" message="eval_Value: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1694:43&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;              let mk_Conditional(c) = val in&#10;                is_(val, Conditional)))))))))&#10;" number="406" object="" resource="newspeakSL" toString="eval_Value: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1694:43&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;              let mk_Conditional(c) = val in&#10;                is_(val, Conditional)))))))))&#10;"/>
<po column="27" line="1695" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1695:27&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                let mk_Widening(exp, t) = val in&#10;                  pre_(eval_Widening(val)(e), ps))))))))))&#10;" number="407" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1695:27&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                let mk_Widening(exp, t) = val in&#10;                  pre_(eval_Widening(val)(e), ps))))))))))&#10;"/>
<po column="27" line="1695" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1695:27&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                let mk_Widening(exp, t) = val in&#10;                  pre_(eval_Widening(val), e))))))))))&#10;" number="408" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1695:27&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                let mk_Widening(exp, t) = val in&#10;                  pre_(eval_Widening(val), e))))))))))&#10;"/>
<po column="41" line="1695" message="eval_Value: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1695:41&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                let mk_Widening(exp, t) = val in&#10;                  is_(val, Widening))))))))))&#10;" number="409" object="" resource="newspeakSL" toString="eval_Value: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1695:41&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                let mk_Widening(exp, t) = val in&#10;                  is_(val, Widening))))))))))&#10;"/>
<po column="24" line="1696" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1696:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (not exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                  (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_OuterLoop(l) = val =&gt;&#10;                  let mk_OuterLoop(l) = val in&#10;                    pre_(eval_OuterLoop(val)(e), ps)))))))))))&#10;" number="410" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1696:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (not exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                  (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_OuterLoop(l) = val =&gt;&#10;                  let mk_OuterLoop(l) = val in&#10;                    pre_(eval_OuterLoop(val)(e), ps)))))))))))&#10;"/>
<po column="24" line="1696" message="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1696:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (not exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                  (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_OuterLoop(l) = val =&gt;&#10;                  let mk_OuterLoop(l) = val in&#10;                    pre_(eval_OuterLoop(val), e)))))))))))&#10;" number="411" object="" resource="newspeakSL" toString="eval_Value: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1696:24&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (not exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                  (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_OuterLoop(l) = val =&gt;&#10;                  let mk_OuterLoop(l) = val in&#10;                    pre_(eval_OuterLoop(val), e)))))))))))&#10;"/>
<po column="39" line="1696" message="eval_Value: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1696:39&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (not exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                  (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_OuterLoop(l) = val =&gt;&#10;                  let mk_OuterLoop(l) = val in&#10;                    is_(val, OuterLoop)))))))))))&#10;" number="412" object="" resource="newspeakSL" toString="eval_Value: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1696:39&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (not exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_ConstantValue(c) = val =&gt;&#10;    (not exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_NamedValue(n) = val =&gt;&#10;      (not exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_VectorVal(v) = val =&gt;&#10;        (not exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_StructureValue(s) = val =&gt;&#10;          (not exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Sequence(s) = val =&gt;&#10;            (not exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Call(id, acts) = val =&gt;&#10;              (not exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Conditional(c) = val =&gt;&#10;                (not exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_Widening(exp, t) = val =&gt;&#10;                  (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; mk_OuterLoop(l) = val =&gt;&#10;                  let mk_OuterLoop(l) = val in&#10;                    is_(val, OuterLoop)))))))))))&#10;"/>
<po column="3" line="1687" message="eval_Value: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1687:3&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_ConstantValue(c)) or (exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_NamedValue(n)) or (exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_VectorVal(v)) or (exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_StructureValue(s)) or (exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Sequence(s)) or (exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Call(id, acts)) or (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Conditional(c)) or (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Widening(exp, t)) or (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_OuterLoop(l)))&#10;" number="413" object="" resource="newspeakSL" toString="eval_Value: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1687:3&#10;(forall mk_Value(val):Value, e:Env, ps:PState &amp;&#10;  (exists mk_ConstantValue(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_ConstantValue(c)) or (exists mk_NamedValue(n):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_NamedValue(n)) or (exists mk_VectorVal(v):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_VectorVal(v)) or (exists mk_StructureValue(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_StructureValue(s)) or (exists mk_Sequence(s):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Sequence(s)) or (exists mk_Call(id, acts):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Call(id, acts)) or (exists mk_Conditional(c):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Conditional(c)) or (exists mk_Widening(exp, t):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_Widening(exp, t)) or (exists mk_OuterLoop(l):(Call | Conditional | ConstantValue | NamedValue | OuterLoop | Sequence | StructureValue | VectorVal | Widening) &amp; val = mk_OuterLoop(l)))&#10;"/>
<po column="63" line="1706" message="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1706:63&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;    let mk_FloatingDenotation(r) = cv in&#10;      is_int((if is_(r, int)&#10;      then r&#10;      else (floor (r + 0.5)))))))&#10;" number="414" object="" resource="newspeakSL" toString="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1706:63&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;    let mk_FloatingDenotation(r) = cv in&#10;      is_int((if is_(r, int)&#10;      then r&#10;      else (floor (r + 0.5)))))))&#10;"/>
<po column="46" line="1715" message="eval_ConstantValue: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1715:46&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            (forall i in set (inds s) &amp;&#10;              i in set inds s)))))))&#10;" number="415" object="" resource="newspeakSL" toString="eval_ConstantValue: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1715:46&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            (forall i in set (inds s) &amp;&#10;              i in set inds s)))))))&#10;"/>
<po column="65" line="1716" message="eval_ConstantValue: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1716:65&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            (forall i in set (inds s) &amp;&#10;              i in set inds s)))))))&#10;" number="416" object="" resource="newspeakSL" toString="eval_ConstantValue: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1716:65&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            (forall i in set (inds s) &amp;&#10;              i in set inds s)))))))&#10;"/>
<po column="52" line="1718" message="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1718:52&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            is_([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)], seq1 of (Expressible_type))))))))&#10;" number="417" object="" resource="newspeakSL" toString="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1718:52&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            is_([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)], seq1 of (Expressible_type))))))))&#10;"/>
<po column="28" line="1719" message="eval_ConstantValue: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1719:28&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            (forall i in set (inds s) &amp;&#10;              i in set inds s)))))))&#10;" number="418" object="" resource="newspeakSL" toString="eval_ConstantValue: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1719:28&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            (forall i in set (inds s) &amp;&#10;              i in set inds s)))))))&#10;"/>
<po column="45" line="1718" message="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1718:45&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            ((is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), Float)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), IntType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), StructureType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), TrType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), UnionType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), VectorType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), VoidType)))))))))&#10;" number="419" object="" resource="newspeakSL" toString="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1718:45&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            ((is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), Float)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), IntType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), StructureType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), TrType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), UnionType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), VectorType)) or&#10;            (is_(seqlub([mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {}) | i in set (inds s)]), VoidType)))))))))&#10;"/>
<po column="32" line="1715" message="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1715:32&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            ((is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Errvalue))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Int))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Real))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (StructValue))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Tr))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (VectorValue))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Void))))))))))&#10;" number="420" object="" resource="newspeakSL" toString="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1715:32&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;          let mk_Ascii_string(s) = cv in&#10;            ((is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Errvalue))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Int))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Real))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (StructValue))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Tr))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (VectorValue))) or&#10;            (is_([mk_Int(ascii(s(i)), mk_IntType(&lt;byte&gt;, {ascii(s(i))}, {})) | i in set (inds s)], seq1 of (Void))))))))))&#10;"/>
<po column="59" line="1721" message="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1721:59&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (not exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;            (exists mk_Flavouring(fl):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Flavouring(fl) = cv =&gt;&#10;            let mk_Flavouring(fl) = cv in&#10;              is_(cv, Flavouring))))))))&#10;" number="421" object="" resource="newspeakSL" toString="eval_ConstantValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1721:59&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (not exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_IntegerDenotation(z) = cv =&gt;&#10;    (not exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_FloatingDenotation(r) = cv =&gt;&#10;      (not exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_BooleanDenotation(b) = cv =&gt;&#10;        (not exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_Char(c) = cv =&gt;&#10;          (not exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Ascii_string(s) = cv =&gt;&#10;            (exists mk_Flavouring(fl):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; mk_Flavouring(fl) = cv =&gt;&#10;            let mk_Flavouring(fl) = cv in&#10;              is_(cv, Flavouring))))))))&#10;"/>
<po column="3" line="1701" message="eval_ConstantValue: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1701:3&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_IntegerDenotation(z)) or (exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_FloatingDenotation(r)) or (exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_BooleanDenotation(b)) or (exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_Ascii_Char(c)) or (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_Ascii_string(s)) or (exists mk_Flavouring(fl):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_Flavouring(fl)) or cv = &lt;skip&gt;)&#10;" number="422" object="" resource="newspeakSL" toString="eval_ConstantValue: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1701:3&#10;(forall mk_ConstantValue(cv):ConstantValue, ps:PState &amp;&#10;  (exists mk_IntegerDenotation(z):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_IntegerDenotation(z)) or (exists mk_FloatingDenotation(r):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_FloatingDenotation(r)) or (exists mk_BooleanDenotation(b):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_BooleanDenotation(b)) or (exists mk_Ascii_Char(c):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_Ascii_Char(c)) or (exists mk_Ascii_string(s):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_Ascii_string(s)) or (exists mk_Flavouring(fl):(&lt;skip&gt; | Ascii_Char | Ascii_string | BooleanDenotation | Flavouring | FloatingDenotation | IntegerDenotation) &amp; cv = mk_Flavouring(fl)) or cv = &lt;skip&gt;)&#10;"/>
<po column="32" line="1729" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1729:32&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;  let mk_FlavourExtract(n, fl) = nv in&#10;    pre_(eval_FlavourExtract(nv)(e), ps)))&#10;" number="423" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1729:32&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;  let mk_FlavourExtract(n, fl) = nv in&#10;    pre_(eval_FlavourExtract(nv)(e), ps)))&#10;"/>
<po column="32" line="1729" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1729:32&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;  let mk_FlavourExtract(n, fl) = nv in&#10;    pre_(eval_FlavourExtract(nv), e)))&#10;" number="424" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1729:32&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;  let mk_FlavourExtract(n, fl) = nv in&#10;    pre_(eval_FlavourExtract(nv), e)))&#10;"/>
<po column="52" line="1729" message="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1729:52&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;  let mk_FlavourExtract(n, fl) = nv in&#10;    is_(nv, FlavourExtract)))&#10;" number="425" object="" resource="newspeakSL" toString="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1729:52&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;  let mk_FlavourExtract(n, fl) = nv in&#10;    is_(nv, FlavourExtract)))&#10;"/>
<po column="30" line="1730" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1730:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;    let mk_FlavourStrip(n, fl) = nv in&#10;      pre_(eval_FlavourStrip(nv)(e), ps))))&#10;" number="426" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1730:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;    let mk_FlavourStrip(n, fl) = nv in&#10;      pre_(eval_FlavourStrip(nv)(e), ps))))&#10;"/>
<po column="30" line="1730" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1730:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;    let mk_FlavourStrip(n, fl) = nv in&#10;      pre_(eval_FlavourStrip(nv), e))))&#10;" number="427" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1730:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;    let mk_FlavourStrip(n, fl) = nv in&#10;      pre_(eval_FlavourStrip(nv), e))))&#10;"/>
<po column="48" line="1730" message="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1730:48&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;    let mk_FlavourStrip(n, fl) = nv in&#10;      is_(nv, FlavourStrip))))&#10;" number="428" object="" resource="newspeakSL" toString="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1730:48&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;    let mk_FlavourStrip(n, fl) = nv in&#10;      is_(nv, FlavourStrip))))&#10;"/>
<po column="30" line="1731" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1731:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;      let mk_VectorExtract(n, i) = nv in&#10;        pre_(eval_VectorExtract(nv)(e), ps)))))&#10;" number="429" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1731:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;      let mk_VectorExtract(n, i) = nv in&#10;        pre_(eval_VectorExtract(nv)(e), ps)))))&#10;"/>
<po column="30" line="1731" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1731:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;      let mk_VectorExtract(n, i) = nv in&#10;        pre_(eval_VectorExtract(nv), e)))))&#10;" number="430" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1731:30&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;      let mk_VectorExtract(n, i) = nv in&#10;        pre_(eval_VectorExtract(nv), e)))))&#10;"/>
<po column="49" line="1731" message="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1731:49&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;      let mk_VectorExtract(n, i) = nv in&#10;        is_(nv, VectorExtract)))))&#10;" number="431" object="" resource="newspeakSL" toString="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1731:49&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;      let mk_VectorExtract(n, i) = nv in&#10;        is_(nv, VectorExtract)))))&#10;"/>
<po column="33" line="1732" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1732:33&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;        let mk_VectorTrimming(n, t, i) = nv in&#10;          pre_(eval_VectorTrimming(nv)(e), ps))))))&#10;" number="432" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1732:33&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;        let mk_VectorTrimming(n, t, i) = nv in&#10;          pre_(eval_VectorTrimming(nv)(e), ps))))))&#10;"/>
<po column="33" line="1732" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1732:33&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;        let mk_VectorTrimming(n, t, i) = nv in&#10;          pre_(eval_VectorTrimming(nv), e))))))&#10;" number="433" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1732:33&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;        let mk_VectorTrimming(n, t, i) = nv in&#10;          pre_(eval_VectorTrimming(nv), e))))))&#10;"/>
<po column="53" line="1732" message="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1732:53&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;        let mk_VectorTrimming(n, t, i) = nv in&#10;          is_(nv, VectorTrimming))))))&#10;" number="434" object="" resource="newspeakSL" toString="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1732:53&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;        let mk_VectorTrimming(n, t, i) = nv in&#10;          is_(nv, VectorTrimming))))))&#10;"/>
<po column="15" line="1733" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1733:15&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (not exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;          pre_(eval_Identifier(nv)(e), ps))))))&#10;" number="435" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1733:15&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (not exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;          pre_(eval_Identifier(nv)(e), ps))))))&#10;"/>
<po column="15" line="1733" message="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1733:15&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (not exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;          pre_(eval_Identifier(nv), e))))))&#10;" number="436" object="" resource="newspeakSL" toString="eval_NamedValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1733:15&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (not exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;          pre_(eval_Identifier(nv), e))))))&#10;"/>
<po column="31" line="1733" message="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1733:31&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (not exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;          (is_(nv, token)))))))&#10;" number="437" object="" resource="newspeakSL" toString="eval_NamedValue: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1733:31&#10;(forall mk_NamedValue(nv):NamedValue, e:Env, ps:PState &amp;&#10;  (not exists mk_FlavourExtract(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourExtract(n, fl) = nv =&gt;&#10;    (not exists mk_FlavourStrip(n, fl):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_FlavourStrip(n, fl) = nv =&gt;&#10;      (not exists mk_VectorExtract(n, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorExtract(n, i) = nv =&gt;&#10;        (not exists mk_VectorTrimming(n, t, i):(FlavourExtract | FlavourStrip | Id | VectorExtract | VectorTrimming) &amp; mk_VectorTrimming(n, t, i) = nv =&gt;&#10;          (is_(nv, token)))))))&#10;"/>
<po column="32" line="1742" message="eval_Identifier, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1742:32&#10;(forall id:Id, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  ((id in set (dom m)) =&gt;&#10;    (exists mk_Location(l):Denotable_value &amp; mk_Location(l) = access_env(id)(mk_(m, l)) =&gt;&#10;    let mk_Location(l) = access_env(id)(mk_(m, l)) in&#10;      pre_(access(mk_Location(l)), sto))))&#10;" number="438" object="" resource="newspeakSL" toString="eval_Identifier, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1742:32&#10;(forall id:Id, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  ((id in set (dom m)) =&gt;&#10;    (exists mk_Location(l):Denotable_value &amp; mk_Location(l) = access_env(id)(mk_(m, l)) =&gt;&#10;    let mk_Location(l) = access_env(id)(mk_(m, l)) in&#10;      pre_(access(mk_Location(l)), sto))))&#10;"/>
<po column="8" line="1740" message="eval_Identifier: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1740:8&#10;(forall id:Id, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  ((id in set (dom m)) =&gt;&#10;    (exists mk_Location(l):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Location(l)) or (exists mk_Storable_value(v):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Storable_value(v))))&#10;" number="439" object="" resource="newspeakSL" toString="eval_Identifier: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1740:8&#10;(forall id:Id, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  ((id in set (dom m)) =&gt;&#10;    (exists mk_Location(l):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Location(l)) or (exists mk_Storable_value(v):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Storable_value(v))))&#10;"/>
<po column="11" line="1750" message="eval_FlavourExtract, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1750:11&#10;(forall mk_FlavourExtract(nv, fl):FlavourExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv)(e), ps))&#10;" number="440" object="" resource="newspeakSL" toString="eval_FlavourExtract, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1750:11&#10;(forall mk_FlavourExtract(nv, fl):FlavourExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv)(e), ps))&#10;"/>
<po column="11" line="1750" message="eval_FlavourExtract, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1750:11&#10;(forall mk_FlavourExtract(nv, fl):FlavourExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv), e))&#10;" number="441" object="" resource="newspeakSL" toString="eval_FlavourExtract, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1750:11&#10;(forall mk_FlavourExtract(nv, fl):FlavourExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv), e))&#10;"/>
<po column="34" line="1754" message="eval_FlavourExtract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1754:34&#10;(forall mk_FlavourExtract(nv, fl):FlavourExtract, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      is_((n.val), Structure))))&#10;" number="442" object="" resource="newspeakSL" toString="eval_FlavourExtract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1754:34&#10;(forall mk_FlavourExtract(nv, fl):FlavourExtract, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      is_((n.val), Structure))))&#10;"/>
<po column="25" line="1761" message="eval_Flavouring: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1761:25&#10;(forall mk_Flavouring(fls):Flavouring &amp;&#10;  (not (fls = []) =&gt;&#10;    fls &lt;&gt; []))&#10;" number="443" object="" resource="newspeakSL" toString="eval_Flavouring: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1761:25&#10;(forall mk_Flavouring(fls):Flavouring &amp;&#10;  (not (fls = []) =&gt;&#10;    fls &lt;&gt; []))&#10;"/>
<po column="70" line="1761" message="eval_Flavouring: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1761:70&#10;(forall mk_Flavouring(fls):Flavouring &amp;&#10;  (not (fls = []) =&gt;&#10;    fls &lt;&gt; []))&#10;" number="444" object="" resource="newspeakSL" toString="eval_Flavouring: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1761:70&#10;(forall mk_Flavouring(fls):Flavouring &amp;&#10;  (not (fls = []) =&gt;&#10;    fls &lt;&gt; []))&#10;"/>
<po column="18" line="1765" message="eval_Flavour: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1765:18&#10;(forall mk_Flavour(name, index):Flavour &amp;&#10;  is_rat(index))&#10;" number="445" object="" resource="newspeakSL" toString="eval_Flavour: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1765:18&#10;(forall mk_Flavour(name, index):Flavour &amp;&#10;  is_rat(index))&#10;"/>
<po column="11" line="1769" message="eval_FlavourStrip, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1769:11&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv)(e), ps))&#10;" number="446" object="" resource="newspeakSL" toString="eval_FlavourStrip, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1769:11&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv)(e), ps))&#10;"/>
<po column="11" line="1769" message="eval_FlavourStrip, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1769:11&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv), e))&#10;" number="447" object="" resource="newspeakSL" toString="eval_FlavourStrip, n: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1769:11&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(nv), e))&#10;"/>
<po column="30" line="1773" message="eval_FlavourStrip, n': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1773:30&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      is_((n.val), Structure))))&#10;" number="448" object="" resource="newspeakSL" toString="eval_FlavourStrip, n': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1773:30&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      is_((n.val), Structure))))&#10;"/>
<po column="55" line="1774" message="eval_FlavourStrip, n'': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1774:55&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      (let n':Expressible_value = comp_extract((n.val), f) in&#10;        is_(((n'.type).tps), seq1 of (CompType))))))&#10;" number="449" object="" resource="newspeakSL" toString="eval_FlavourStrip, n'': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1774:55&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      (let n':Expressible_value = comp_extract((n.val), f) in&#10;        is_(((n'.type).tps), seq1 of (CompType))))))&#10;"/>
<po column="31" line="1774" message="eval_FlavourStrip, n'': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1774:31&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      (let n':Expressible_value = comp_extract((n.val), f) in&#10;        (is_((n'.val), seq1 of (Component)))))))&#10;" number="450" object="" resource="newspeakSL" toString="eval_FlavourStrip, n'': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1774:31&#10;(forall mk_FlavourStrip(nv, fl):FlavourStrip, e:Env, ps:PState &amp;&#10;  (let n:EST_value = eval_NamedValue(nv)(e)(ps), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (not is_((n.val), Structure)) =&gt;&#10;      (let n':Expressible_value = comp_extract((n.val), f) in&#10;        (is_((n'.val), seq1 of (Component)))))))&#10;"/>
<po column="11" line="1779" message="eval_VectorExtract, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1779:11&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(n)(e), ps))&#10;" number="451" object="" resource="newspeakSL" toString="eval_VectorExtract, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1779:11&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(n)(e), ps))&#10;"/>
<po column="11" line="1779" message="eval_VectorExtract, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1779:11&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(n), e))&#10;" number="452" object="" resource="newspeakSL" toString="eval_VectorExtract, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1779:11&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(n), e))&#10;"/>
<po column="20" line="1782" message="eval_VectorExtract, index: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1782:20&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      pre_(eval_Operation(i)(e), mu(ps, time |-&gt; (x.time))))))&#10;" number="453" object="" resource="newspeakSL" toString="eval_VectorExtract, index: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1782:20&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      pre_(eval_Operation(i)(e), mu(ps, time |-&gt; (x.time))))))&#10;"/>
<po column="20" line="1782" message="eval_VectorExtract, index: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1782:20&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      pre_(eval_Operation(i), e))))&#10;" number="454" object="" resource="newspeakSL" toString="eval_VectorExtract, index: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1782:20&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      pre_(eval_Operation(i), e))))&#10;"/>
<po column="41" line="1789" message="eval_VectorExtract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1789:41&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (let index:EST_value = eval_Operation(i)(e)(mu(ps, time |-&gt; (x.time))), length:int = (((((x.val).type).upper) - (((x.val).type).lower)) + 1) in&#10;        (not (not is_((index.val), Int)) =&gt;&#10;          (not (not ((((index.val).type).range) subset {(((x.val).type).lower), ... ,(((x.val).type).upper)})) =&gt;&#10;            is_((x.val), Vector)))))))&#10;" number="455" object="" resource="newspeakSL" toString="eval_VectorExtract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1789:41&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (let index:EST_value = eval_Operation(i)(e)(mu(ps, time |-&gt; (x.time))), length:int = (((((x.val).type).upper) - (((x.val).type).lower)) + 1) in&#10;        (not (not is_((index.val), Int)) =&gt;&#10;          (not (not ((((index.val).type).range) subset {(((x.val).type).lower), ... ,(((x.val).type).upper)})) =&gt;&#10;            is_((x.val), Vector)))))))&#10;"/>
<po column="47" line="1789" message="eval_VectorExtract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1789:47&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (let index:EST_value = eval_Operation(i)(e)(mu(ps, time |-&gt; (x.time))), length:int = (((((x.val).type).upper) - (((x.val).type).lower)) + 1) in&#10;        (not (not is_((index.val), Int)) =&gt;&#10;          (not (not ((((index.val).type).range) subset {(((x.val).type).lower), ... ,(((x.val).type).upper)})) =&gt;&#10;            is_int(((index.val).val))))))))&#10;" number="456" object="" resource="newspeakSL" toString="eval_VectorExtract: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1789:47&#10;(forall mk_VectorExtract(n, i):VectorExtract, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_NamedValue(n)(e)(ps) in&#10;    (not (not is_((x.val), Vector)) =&gt;&#10;      (let index:EST_value = eval_Operation(i)(e)(mu(ps, time |-&gt; (x.time))), length:int = (((((x.val).type).upper) - (((x.val).type).lower)) + 1) in&#10;        (not (not is_((index.val), Int)) =&gt;&#10;          (not (not ((((index.val).type).range) subset {(((x.val).type).lower), ... ,(((x.val).type).upper)})) =&gt;&#10;            is_int(((index.val).val))))))))&#10;"/>
<po column="13" line="1796" message="eval_VectorTrimming, vec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1796:13&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(name)(e), ps))&#10;" number="457" object="" resource="newspeakSL" toString="eval_VectorTrimming, vec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1796:13&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(name)(e), ps))&#10;"/>
<po column="13" line="1796" message="eval_VectorTrimming, vec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1796:13&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(name), e))&#10;" number="458" object="" resource="newspeakSL" toString="eval_VectorTrimming, vec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1796:13&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  pre_(eval_NamedValue(name), e))&#10;"/>
<po column="16" line="1800" message="eval_VectorTrimming, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1800:16&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      pre_(eval_CompileTimeValue(ctv), e))))&#10;" number="459" object="" resource="newspeakSL" toString="eval_VectorTrimming, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1800:16&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      pre_(eval_CompileTimeValue(ctv), e))))&#10;"/>
<po column="31" line="1805" message="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1805:31&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val)) =&gt;&#10;              i in set inds ((vec.val).val))))))))&#10;" number="460" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1805:31&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val)) =&gt;&#10;              i in set inds ((vec.val).val))))))))&#10;"/>
<po column="34" line="1806" message="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1806:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp;&#10;              is_real(((vec.val).val)(i)))))))))&#10;" number="461" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1806:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp;&#10;              is_real(((vec.val).val)(i)))))))))&#10;"/>
<po column="52" line="1806" message="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1806:52&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp;&#10;              is_real(((v.val).val)))))))))&#10;" number="462" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1806:52&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp;&#10;              is_real(((v.val).val)))))))))&#10;"/>
<po column="34" line="1806" message="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1806:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp;&#10;              i in set inds ((vec.val).val))))))))&#10;" number="463" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1806:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (&lt;gtvalue&gt; = to_p =&gt; &#10;            (forall i in set (inds ((vec.val).val)) &amp;&#10;              i in set inds ((vec.val).val))))))))&#10;"/>
<po column="31" line="1808" message="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1808:31&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val)) =&gt;&#10;                i in set inds ((vec.val).val)))))))))&#10;" number="464" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1808:31&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val)) =&gt;&#10;                i in set inds ((vec.val).val)))))))))&#10;"/>
<po column="34" line="1809" message="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1809:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp;&#10;                is_real(((vec.val).val)(i))))))))))&#10;" number="465" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1809:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp;&#10;                is_real(((vec.val).val)(i))))))))))&#10;"/>
<po column="52" line="1809" message="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1809:52&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp;&#10;                is_real(((v.val).val))))))))))&#10;" number="466" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1809:52&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp;&#10;                is_real(((v.val).val))))))))))&#10;"/>
<po column="34" line="1809" message="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1809:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp;&#10;                i in set inds ((vec.val).val)))))))))&#10;" number="467" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1809:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (&lt;ltvalue&gt; = to_p =&gt; &#10;              (forall i in set (inds ((vec.val).val)) &amp;&#10;                i in set inds ((vec.val).val)))))))))&#10;"/>
<po column="31" line="1811" message="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1811:31&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (not &lt;ltvalue&gt; = to_p =&gt;&#10;              (&lt;atvalue&gt; = to_p =&gt; &#10;                (forall i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val)) =&gt;&#10;                  i in set inds ((vec.val).val))))))))))&#10;" number="468" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1811:31&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (not &lt;ltvalue&gt; = to_p =&gt;&#10;              (&lt;atvalue&gt; = to_p =&gt; &#10;                (forall i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val)) =&gt;&#10;                  i in set inds ((vec.val).val))))))))))&#10;"/>
<po column="34" line="1812" message="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1812:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (not &lt;ltvalue&gt; = to_p =&gt;&#10;              (&lt;atvalue&gt; = to_p =&gt; &#10;                (forall i in set (inds ((vec.val).val)) &amp;&#10;                  i in set inds ((vec.val).val))))))))))&#10;" number="469" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1812:34&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (not &lt;gtvalue&gt; = to_p =&gt;&#10;            (not &lt;ltvalue&gt; = to_p =&gt;&#10;              (&lt;atvalue&gt; = to_p =&gt; &#10;                (forall i in set (inds ((vec.val).val)) &amp;&#10;                  i in set inds ((vec.val).val))))))))))&#10;"/>
<po column="25" line="1803" message="eval_VectorTrimming, new_v: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1803:25&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          to_p = &lt;gtvalue&gt; or to_p = &lt;ltvalue&gt; or to_p = &lt;atvalue&gt;)))))&#10;" number="470" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_v: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1803:25&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          to_p = &lt;gtvalue&gt; or to_p = &lt;ltvalue&gt; or to_p = &lt;atvalue&gt;)))))&#10;"/>
<po column="32" line="1818" message="eval_VectorTrimming, new_t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1818:32&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              is_([const_type(new_v(i)) | i in set (inds new_v)], seq1 of (Expressible_type)))))))))&#10;" number="471" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1818:32&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              is_([const_type(new_v(i)) | i in set (inds new_v)], seq1 of (Expressible_type)))))))))&#10;"/>
<po column="44" line="1818" message="eval_VectorTrimming, new_t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1818:44&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (forall i in set (inds new_v) &amp;&#10;                ((is_(new_v(i), Errvalue)) or&#10;                (is_(new_v(i), Int)) or&#10;                (is_(new_v(i), Real)) or&#10;                (is_(new_v(i), Structure)) or&#10;                (is_(new_v(i), Tr)) or&#10;                (is_(new_v(i), Union)) or&#10;                (is_(new_v(i), Vector)) or&#10;                (is_(new_v(i), Void)))))))))))&#10;" number="472" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1818:44&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (forall i in set (inds new_v) &amp;&#10;                ((is_(new_v(i), Errvalue)) or&#10;                (is_(new_v(i), Int)) or&#10;                (is_(new_v(i), Real)) or&#10;                (is_(new_v(i), Structure)) or&#10;                (is_(new_v(i), Tr)) or&#10;                (is_(new_v(i), Union)) or&#10;                (is_(new_v(i), Vector)) or&#10;                (is_(new_v(i), Void)))))))))))&#10;"/>
<po column="44" line="1818" message="eval_VectorTrimming, new_t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1818:44&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (forall i in set (inds new_v) &amp;&#10;                i in set inds new_v))))))))&#10;" number="473" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1818:44&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (forall i in set (inds new_v) &amp;&#10;                i in set inds new_v))))))))&#10;"/>
<po column="74" line="1820" message="eval_VectorTrimming, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1820:74&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (let new_l:int = (((vec.val).type).lower), new_u:int = (((((vec.val).type).lower) + (len new_v)) - 1), new_t:(Errvalue | Expressible_type) = seqlub([const_type(new_v(i)) | i in set (inds new_v)]), new_fl:Flavdom = (((vec.val).type).fl) in&#10;                ((is_(new_t, Float)) or&#10;                (is_(new_t, IntType)) or&#10;                (is_(new_t, StructureType)) or&#10;                (is_(new_t, TrType)) or&#10;                (is_(new_t, UnionType)) or&#10;                (is_(new_t, VectorType)) or&#10;                (is_(new_t, VoidType)))))))))))&#10;" number="474" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1820:74&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (let new_l:int = (((vec.val).type).lower), new_u:int = (((((vec.val).type).lower) + (len new_v)) - 1), new_t:(Errvalue | Expressible_type) = seqlub([const_type(new_v(i)) | i in set (inds new_v)]), new_fl:Flavdom = (((vec.val).type).fl) in&#10;                ((is_(new_t, Float)) or&#10;                (is_(new_t, IntType)) or&#10;                (is_(new_t, StructureType)) or&#10;                (is_(new_t, TrType)) or&#10;                (is_(new_t, UnionType)) or&#10;                (is_(new_t, VectorType)) or&#10;                (is_(new_t, VoidType)))))))))))&#10;"/>
<po column="42" line="1820" message="eval_VectorTrimming, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1820:42&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (let new_l:int = (((vec.val).type).lower), new_u:int = (((((vec.val).type).lower) + (len new_v)) - 1), new_t:(Errvalue | Expressible_type) = seqlub([const_type(new_v(i)) | i in set (inds new_v)]), new_fl:Flavdom = (((vec.val).type).fl) in&#10;                ((is_(new_v, seq1 of (Errvalue))) or&#10;                (is_(new_v, seq1 of (Int))) or&#10;                (is_(new_v, seq1 of (Real))) or&#10;                (is_(new_v, seq1 of (StructValue))) or&#10;                (is_(new_v, seq1 of (Tr))) or&#10;                (is_(new_v, seq1 of (VectorValue))) or&#10;                (is_(new_v, seq1 of (Void))))))))))))&#10;" number="475" object="" resource="newspeakSL" toString="eval_VectorTrimming, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1820:42&#10;(forall mk_VectorTrimming(name, to_p, ctv):VectorTrimming, e:Env, ps:PState &amp;&#10;  (let vec:EST_value = eval_NamedValue(name)(e)(ps) in&#10;    (not ((not is_((vec.val), Vector)) or (is_((vec.val), Vector) and (not (is_((((vec.val).type).type), Float) or is_((((vec.val).type).type), IntType))))) =&gt;&#10;      (let v:EST_value = eval_CompileTimeValue(ctv)(e) in&#10;        (not (not (is_((v.val), Real) or is_((v.val), Int))) =&gt;&#10;          (let new_v:seq of ((Component | Errvalue | Int | Real | StructValue | Tr | VectorValue | Void)) = (cases to_p :&#10;          case &lt;gtvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &gt;= ((v.val).val))],&#10;          case &lt;ltvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) &lt;= ((v.val).val))],&#10;          case &lt;atvalue&gt; -&gt; [((vec.val).val)(i) | i in set (inds ((vec.val).val)) &amp; (((vec.val).val)(i) = ((v.val).val))]&#10;          end) in&#10;            (not (new_v = []) =&gt;&#10;              (let new_l:int = (((vec.val).type).lower), new_u:int = (((((vec.val).type).lower) + (len new_v)) - 1), new_t:(Errvalue | Expressible_type) = seqlub([const_type(new_v(i)) | i in set (inds new_v)]), new_fl:Flavdom = (((vec.val).type).fl) in&#10;                ((is_(new_v, seq1 of (Errvalue))) or&#10;                (is_(new_v, seq1 of (Int))) or&#10;                (is_(new_v, seq1 of (Real))) or&#10;                (is_(new_v, seq1 of (StructValue))) or&#10;                (is_(new_v, seq1 of (Tr))) or&#10;                (is_(new_v, seq1 of (VectorValue))) or&#10;                (is_(new_v, seq1 of (Void))))))))))))&#10;"/>
<po column="50" line="1828" message="eval_CompileTimeValue, locs: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1828:50&#10;(forall mk_CompileTimeValue(op):CompileTimeValue, mk_(m, l):Env &amp;&#10;  (forall id in set (dom m) &amp;&#10;    id in set dom m))&#10;" number="476" object="" resource="newspeakSL" toString="eval_CompileTimeValue, locs: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1828:50&#10;(forall mk_CompileTimeValue(op):CompileTimeValue, mk_(m, l):Env &amp;&#10;  (forall id in set (dom m) &amp;&#10;    id in set dom m))&#10;"/>
<po column="7" line="1831" message="eval_CompileTimeValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1831:7&#10;(forall mk_CompileTimeValue(op):CompileTimeValue, mk_(m, l):Env &amp;&#10;  (let locs:set of (Id) = {id | [id in set (dom m)] &amp; is_(m(id), Location)} in&#10;    (let new_m:map (Id) to (Denotable_value) = (locs &lt;-: m) in&#10;      (let new_env:(map (Id) to (Denotable_value) * Location) = mk_(new_m, l) in&#10;        pre_(eval_Operation(op)(new_env), mk_PState({}, zerot))))))&#10;" number="477" object="" resource="newspeakSL" toString="eval_CompileTimeValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1831:7&#10;(forall mk_CompileTimeValue(op):CompileTimeValue, mk_(m, l):Env &amp;&#10;  (let locs:set of (Id) = {id | [id in set (dom m)] &amp; is_(m(id), Location)} in&#10;    (let new_m:map (Id) to (Denotable_value) = (locs &lt;-: m) in&#10;      (let new_env:(map (Id) to (Denotable_value) * Location) = mk_(new_m, l) in&#10;        pre_(eval_Operation(op)(new_env), mk_PState({}, zerot))))))&#10;"/>
<po column="7" line="1831" message="eval_CompileTimeValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1831:7&#10;(forall mk_CompileTimeValue(op):CompileTimeValue, mk_(m, l):Env &amp;&#10;  (let locs:set of (Id) = {id | [id in set (dom m)] &amp; is_(m(id), Location)} in&#10;    (let new_m:map (Id) to (Denotable_value) = (locs &lt;-: m) in&#10;      (let new_env:(map (Id) to (Denotable_value) * Location) = mk_(new_m, l) in&#10;        pre_(eval_Operation(op), new_env)))))&#10;" number="478" object="" resource="newspeakSL" toString="eval_CompileTimeValue: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1831:7&#10;(forall mk_CompileTimeValue(op):CompileTimeValue, mk_(m, l):Env &amp;&#10;  (let locs:set of (Id) = {id | [id in set (dom m)] &amp; is_(m(id), Location)} in&#10;    (let new_m:map (Id) to (Denotable_value) = (locs &lt;-: m) in&#10;      (let new_env:(map (Id) to (Denotable_value) * Location) = mk_(new_m, l) in&#10;        pre_(eval_Operation(op), new_env)))))&#10;"/>
<po column="16" line="1835" message="eval_VectorVal, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1835:16&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i))(e), mk_PState((ps.sto), zerot))))&#10;" number="479" object="" resource="newspeakSL" toString="eval_VectorVal, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1835:16&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i))(e), mk_PState((ps.sto), zerot))))&#10;"/>
<po column="16" line="1835" message="eval_VectorVal, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1835:16&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i)), e)))&#10;" number="480" object="" resource="newspeakSL" toString="eval_VectorVal, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1835:16&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i)), e)))&#10;"/>
<po column="31" line="1835" message="eval_VectorVal, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1835:31&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    i in set inds ops))&#10;" number="481" object="" resource="newspeakSL" toString="eval_VectorVal, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1835:31&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    i in set inds ops))&#10;"/>
<po column="15" line="1837" message="eval_VectorVal, val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1837:15&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (forall i in set (inds vals) &amp;&#10;      i in set inds vals)))&#10;" number="482" object="" resource="newspeakSL" toString="eval_VectorVal, val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1837:15&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (forall i in set (inds vals) &amp;&#10;      i in set inds vals)))&#10;"/>
<po column="22" line="1838" message="eval_VectorVal, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1838:22&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (forall i in set (inds vals) &amp;&#10;      i in set inds vals)))&#10;" number="483" object="" resource="newspeakSL" toString="eval_VectorVal, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1838:22&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (forall i in set (inds vals) &amp;&#10;      i in set inds vals)))&#10;"/>
<po column="26" line="1841" message="eval_VectorVal, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1841:26&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        is_([(val(i).type) | i in set (inds val)], seq1 of (Expressible_type))))))&#10;" number="484" object="" resource="newspeakSL" toString="eval_VectorVal, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1841:26&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        is_([(val(i).type) | i in set (inds val)], seq1 of (Expressible_type))))))&#10;"/>
<po column="27" line="1841" message="eval_VectorVal, type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1841:27&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        (forall i in set (inds val) &amp;&#10;          i in set inds val)))))&#10;" number="485" object="" resource="newspeakSL" toString="eval_VectorVal, type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1841:27&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        (forall i in set (inds val) &amp;&#10;          i in set inds val)))))&#10;"/>
<po column="47" line="1844" message="eval_VectorVal, tp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1844:47&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        (let type:(Errvalue | Expressible_type) = seqlub([(val(i).type) | i in set (inds val)]) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            ((is_(type, Float)) or&#10;            (is_(type, IntType)) or&#10;            (is_(type, StructureType)) or&#10;            (is_(type, TrType)) or&#10;            (is_(type, UnionType)) or&#10;            (is_(type, VectorType)) or&#10;            (is_(type, VoidType)))))))))&#10;" number="486" object="" resource="newspeakSL" toString="eval_VectorVal, tp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1844:47&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        (let type:(Errvalue | Expressible_type) = seqlub([(val(i).type) | i in set (inds val)]) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            ((is_(type, Float)) or&#10;            (is_(type, IntType)) or&#10;            (is_(type, StructureType)) or&#10;            (is_(type, TrType)) or&#10;            (is_(type, UnionType)) or&#10;            (is_(type, VectorType)) or&#10;            (is_(type, VoidType)))))))))&#10;"/>
<po column="31" line="1845" message="eval_VectorVal, x: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1845:31&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        (let type:(Errvalue | Expressible_type) = seqlub([(val(i).type) | i in set (inds val)]) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            (let tp:VectorType = mk_VectorType(1, (len val), type, {}) in&#10;              ((is_(val, seq1 of (Errvalue))) or&#10;              (is_(val, seq1 of (Int))) or&#10;              (is_(val, seq1 of (Real))) or&#10;              (is_(val, seq1 of (StructValue))) or&#10;              (is_(val, seq1 of (Tr))) or&#10;              (is_(val, seq1 of (VectorValue))) or&#10;              (is_(val, seq1 of (Void)))))))))))&#10;" number="487" object="" resource="newspeakSL" toString="eval_VectorVal, x: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1845:31&#10;(forall mk_VectorVal(ops):VectorVal, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (let val:seq of (Expressible_value) = [(vals(i).val) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]) in&#10;      (not (&lt;err&gt; in set (elems val)) =&gt;&#10;        (let type:(Errvalue | Expressible_type) = seqlub([(val(i).type) | i in set (inds val)]) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            (let tp:VectorType = mk_VectorType(1, (len val), type, {}) in&#10;              ((is_(val, seq1 of (Errvalue))) or&#10;              (is_(val, seq1 of (Int))) or&#10;              (is_(val, seq1 of (Real))) or&#10;              (is_(val, seq1 of (StructValue))) or&#10;              (is_(val, seq1 of (Tr))) or&#10;              (is_(val, seq1 of (VectorValue))) or&#10;              (is_(val, seq1 of (Void)))))))))))&#10;"/>
<po column="16" line="1850" message="eval_StructureValue, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1850:16&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i))(e), mk_PState((ps.sto), zerot))))&#10;" number="488" object="" resource="newspeakSL" toString="eval_StructureValue, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1850:16&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i))(e), mk_PState((ps.sto), zerot))))&#10;"/>
<po column="16" line="1850" message="eval_StructureValue, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1850:16&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i)), e)))&#10;" number="489" object="" resource="newspeakSL" toString="eval_StructureValue, vals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1850:16&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    pre_(eval_Operation(ops(i)), e)))&#10;"/>
<po column="31" line="1850" message="eval_StructureValue, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1850:31&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    i in set inds ops))&#10;" number="490" object="" resource="newspeakSL" toString="eval_StructureValue, vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1850:31&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (forall i in set (inds ops) &amp;&#10;    i in set inds ops))&#10;"/>
<po column="19" line="1857" message="eval_StructureValue, tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1857:19&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (forall i in set (inds vals) &amp;&#10;          i in set inds vals)))))&#10;" number="491" object="" resource="newspeakSL" toString="eval_StructureValue, tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1857:19&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (forall i in set (inds vals) &amp;&#10;          i in set inds vals)))))&#10;"/>
<po column="27" line="1858" message="eval_StructureValue, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1858:27&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (forall i in set (inds vals) &amp;&#10;          i in set inds vals)))))&#10;" number="492" object="" resource="newspeakSL" toString="eval_StructureValue, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1858:27&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (forall i in set (inds vals) &amp;&#10;          i in set inds vals)))))&#10;"/>
<po column="21" line="1859" message="eval_StructureValue, comps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1859:21&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (forall i in set (inds vals) &amp;&#10;          i in set inds vals)))))&#10;" number="493" object="" resource="newspeakSL" toString="eval_StructureValue, comps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1859:21&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (forall i in set (inds vals) &amp;&#10;          i in set inds vals)))))&#10;"/>
<po column="36" line="1860" message="eval_StructureValue, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1860:36&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (let tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [((vals(i).val).type) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]), comps:seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) = [((vals(i).val).val) | i in set (inds vals)] in&#10;          is_(tps, seq1 of (CompType)))))))&#10;" number="494" object="" resource="newspeakSL" toString="eval_StructureValue, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1860:36&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (let tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [((vals(i).val).type) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]), comps:seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) = [((vals(i).val).val) | i in set (inds vals)] in&#10;          is_(tps, seq1 of (CompType)))))))&#10;"/>
<po column="31" line="1861" message="eval_StructureValue, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1861:31&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (let tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [((vals(i).val).type) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]), comps:seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) = [((vals(i).val).val) | i in set (inds vals)] in&#10;          (let type:StructureType = mk_StructureType(tps, {}) in&#10;            (is_(comps, seq1 of (Component)))))))))&#10;" number="495" object="" resource="newspeakSL" toString="eval_StructureValue, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1861:31&#10;(forall mk_StructureValue(ops):StructureValue, e:Env, ps:PState &amp;&#10;  (let vals:seq of (EST_value) = [eval_Operation(ops(i))(e)(mk_PState((ps.sto), zerot)) | i in set (inds ops)] in&#10;    (not (exists [val in set (elems vals)] &amp; (not (is_((val.val), Tr) or (is_((val.val), Int) or is_((val.val), Real))))) =&gt;&#10;      (not (exists [v1, v2 in set (elems vals)] &amp; fleq(((v1.val).type), ((v2.val).type))) =&gt;&#10;        (let tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [((vals(i).val).type) | i in set (inds vals)], time:Time = dtplus([(vals(i).time) | i in set (inds vals)]), comps:seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) = [((vals(i).val).val) | i in set (inds vals)] in&#10;          (let type:StructureType = mk_StructureType(tps, {}) in&#10;            (is_(comps, seq1 of (Component)))))))))&#10;"/>
<po column="11" line="1866" message="eval_Sequence, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1866:11&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression((hd exprs))(e), ps))&#10;" number="496" object="" resource="newspeakSL" toString="eval_Sequence, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1866:11&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression((hd exprs))(e), ps))&#10;"/>
<po column="11" line="1866" message="eval_Sequence, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1866:11&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression((hd exprs)), e))&#10;" number="497" object="" resource="newspeakSL" toString="eval_Sequence, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1866:11&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression((hd exprs)), e))&#10;"/>
<po column="30" line="1866" message="eval_Sequence, x: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1866:30&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  exprs &lt;&gt; [])&#10;" number="498" object="" resource="newspeakSL" toString="eval_Sequence, x: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1866:30&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  exprs &lt;&gt; [])&#10;"/>
<po column="8" line="1870" message="eval_Sequence: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1870:8&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression((hd exprs))(e)(ps) in&#10;    (not ((len exprs) = 1) =&gt;&#10;      (is_((x.val), Void) =&gt;&#10;        pre_(eval_Sequence(mk_Sequence((tl exprs)))(e), mk_PState((x.sto), (x.time)))))))&#10;" number="499" object="" resource="newspeakSL" toString="eval_Sequence: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1870:8&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression((hd exprs))(e)(ps) in&#10;    (not ((len exprs) = 1) =&gt;&#10;      (is_((x.val), Void) =&gt;&#10;        pre_(eval_Sequence(mk_Sequence((tl exprs)))(e), mk_PState((x.sto), (x.time)))))))&#10;"/>
<po column="8" line="1870" message="eval_Sequence: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1870:8&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression((hd exprs))(e)(ps) in&#10;    (not ((len exprs) = 1) =&gt;&#10;      (is_((x.val), Void) =&gt;&#10;        pre_(eval_Sequence(mk_Sequence((tl exprs))), e)))))&#10;" number="500" object="" resource="newspeakSL" toString="eval_Sequence: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1870:8&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression((hd exprs))(e)(ps) in&#10;    (not ((len exprs) = 1) =&gt;&#10;      (is_((x.val), Void) =&gt;&#10;        pre_(eval_Sequence(mk_Sequence((tl exprs))), e)))))&#10;"/>
<po column="37" line="1870" message="eval_Sequence: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1870:37&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression((hd exprs))(e)(ps) in&#10;    (not ((len exprs) = 1) =&gt;&#10;      (is_((x.val), Void) =&gt;&#10;        exprs &lt;&gt; []))))&#10;" number="501" object="" resource="newspeakSL" toString="eval_Sequence: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1870:37&#10;(forall mk_Sequence(exprs):Sequence, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression((hd exprs))(e)(ps) in&#10;    (not ((len exprs) = 1) =&gt;&#10;      (is_((x.val), Void) =&gt;&#10;        exprs &lt;&gt; []))))&#10;"/>
<po column="17" line="1877" message="eval_Call, pp: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1877:17&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    pre_(access_env(id), mk_(m, l))))&#10;" number="502" object="" resource="newspeakSL" toString="eval_Call, pp: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1877:17&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    pre_(access_env(id), mk_(m, l))))&#10;"/>
<po column="17" line="1880" message="eval_Call, p: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1880:17&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        exists mk_Proc(p):Denotable_value &amp; mk_Proc(p) = pp))))&#10;" number="503" object="" resource="newspeakSL" toString="eval_Call, p: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1880:17&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        exists mk_Proc(p):Denotable_value &amp; mk_Proc(p) = pp))))&#10;"/>
<po column="30" line="1880" message="eval_Call, p: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1880:30&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        is_(pp, Proc)))))&#10;" number="504" object="" resource="newspeakSL" toString="eval_Call, p: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1880:30&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        is_(pp, Proc)))))&#10;"/>
<po column="27" line="1881" message="eval_Call, params: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1881:27&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          pre_(eval_Acts(acts)(mk_(m, l)), mk_PState(sto, time)))))))&#10;" number="505" object="" resource="newspeakSL" toString="eval_Call, params: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1881:27&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          pre_(eval_Acts(acts)(mk_(m, l)), mk_PState(sto, time)))))))&#10;"/>
<po column="27" line="1881" message="eval_Call, params: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1881:27&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          pre_(eval_Acts(acts), mk_(m, l)))))))&#10;" number="506" object="" resource="newspeakSL" toString="eval_Call, params: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1881:27&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          pre_(eval_Acts(acts), mk_(m, l)))))))&#10;"/>
<po column="20" line="1885" message="eval_Call: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1885:20&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              pre_(p([(params(i).val) | i in set (inds params)]), mk_PState(sto, (params((len params)).time))))))))))&#10;" number="507" object="" resource="newspeakSL" toString="eval_Call: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1885:20&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              pre_(p([(params(i).val) | i in set (inds params)]), mk_PState(sto, (params((len params)).time))))))))))&#10;"/>
<po column="20" line="1885" message="eval_Call: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1885:20&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              pre_(p, [(params(i).val) | i in set (inds params)]))))))))&#10;" number="508" object="" resource="newspeakSL" toString="eval_Call: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1885:20&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              pre_(p, [(params(i).val) | i in set (inds params)]))))))))&#10;"/>
<po column="23" line="1885" message="eval_Call: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1885:23&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              (forall i in set (inds params) &amp;&#10;                i in set inds params))))))))&#10;" number="509" object="" resource="newspeakSL" toString="eval_Call: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1885:23&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              (forall i in set (inds params) &amp;&#10;                i in set inds params))))))))&#10;"/>
<po column="37" line="1886" message="eval_Call: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1886:37&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              (len params) in set inds params)))))))&#10;" number="510" object="" resource="newspeakSL" toString="eval_Call: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1886:37&#10;(forall mk_Call(id, acts):Call, mk_(m, l):Env, mk_PState(sto, time):PState &amp;&#10;  (not (id not in set (dom m)) =&gt;&#10;    (let pp:Denotable_value = access_env(id)(mk_(m, l)) in&#10;      (not (not is_(pp, Proc)) =&gt;&#10;        (let mk_Proc(p):Denotable_value = pp in&#10;          (let params:seq of (EST_value) = eval_Acts(acts)(mk_(m, l))(mk_PState(sto, time)) in&#10;            (not (&lt;err&gt; in set {(x.val) | [x in set (elems params)]}) =&gt;&#10;              (len params) in set inds params)))))))&#10;"/>
<po column="16" line="1892" message="eval_Acts, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1892:16&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    pre_(eval_Operation((hd ops))(e), ps)))&#10;" number="511" object="" resource="newspeakSL" toString="eval_Acts, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1892:16&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    pre_(eval_Operation((hd ops))(e), ps)))&#10;"/>
<po column="16" line="1892" message="eval_Acts, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1892:16&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    pre_(eval_Operation((hd ops)), e)))&#10;" number="512" object="" resource="newspeakSL" toString="eval_Acts, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1892:16&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    pre_(eval_Operation((hd ops)), e)))&#10;"/>
<po column="34" line="1892" message="eval_Acts, x: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1892:34&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    ops &lt;&gt; []))&#10;" number="513" object="" resource="newspeakSL" toString="eval_Acts, x: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1892:34&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    ops &lt;&gt; []))&#10;"/>
<po column="12" line="1893" message="eval_Acts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1893:12&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    (let x:EST_value = eval_Operation((hd ops))(e)(ps) in&#10;      pre_(eval_Acts((tl ops))(e), mk_PState((ps.sto), (x.time))))))&#10;" number="514" object="" resource="newspeakSL" toString="eval_Acts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1893:12&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    (let x:EST_value = eval_Operation((hd ops))(e)(ps) in&#10;      pre_(eval_Acts((tl ops))(e), mk_PState((ps.sto), (x.time))))))&#10;"/>
<po column="12" line="1893" message="eval_Acts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1893:12&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    (let x:EST_value = eval_Operation((hd ops))(e)(ps) in&#10;      pre_(eval_Acts((tl ops)), e))))&#10;" number="515" object="" resource="newspeakSL" toString="eval_Acts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1893:12&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    (let x:EST_value = eval_Operation((hd ops))(e)(ps) in&#10;      pre_(eval_Acts((tl ops)), e))))&#10;"/>
<po column="25" line="1893" message="eval_Acts: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1893:25&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    (let x:EST_value = eval_Operation((hd ops))(e)(ps) in&#10;      ops &lt;&gt; [])))&#10;" number="516" object="" resource="newspeakSL" toString="eval_Acts: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1893:25&#10;(forall ops:seq of (Operation), e:Env, ps:PState &amp;&#10;  (not (ops = []) =&gt;&#10;    (let x:EST_value = eval_Operation((hd ops))(e)(ps) in&#10;      ops &lt;&gt; [])))&#10;"/>
<po column="11" line="1897" message="eval_Widening, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1897:11&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="517" object="" resource="newspeakSL" toString="eval_Widening, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1897:11&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="1897" message="eval_Widening, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1897:11&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="518" object="" resource="newspeakSL" toString="eval_Widening, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1897:11&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="17" line="1901" message="eval_Widening, dt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1901:17&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_Type(dest_type), e))))&#10;" number="519" object="" resource="newspeakSL" toString="eval_Widening, dt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1901:17&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_Type(dest_type), e))))&#10;"/>
<po column="34" line="1904" message="eval_Widening, dt': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1904:34&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let xt:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type), dt:(Errvalue | Expressible_type) = eval_Type(dest_type)(e) in&#10;        (not (dt = &lt;err&gt;) =&gt;&#10;          ((is_(dt, Float)) or&#10;          (is_(dt, IntType)) or&#10;          (is_(dt, StructureType)) or&#10;          (is_(dt, TrType)) or&#10;          (is_(dt, UnionType)) or&#10;          (is_(dt, VectorType)) or&#10;          (is_(dt, VoidType))))))))&#10;" number="520" object="" resource="newspeakSL" toString="eval_Widening, dt': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1904:34&#10;(forall mk_Widening(expr, dest_type):Widening, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let xt:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type), dt:(Errvalue | Expressible_type) = eval_Type(dest_type)(e) in&#10;        (not (dt = &lt;err&gt;) =&gt;&#10;          ((is_(dt, Float)) or&#10;          (is_(dt, IntType)) or&#10;          (is_(dt, StructureType)) or&#10;          (is_(dt, TrType)) or&#10;          (is_(dt, UnionType)) or&#10;          (is_(dt, VectorType)) or&#10;          (is_(dt, VoidType))))))))&#10;"/>
<po column="28" line="1912" message="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1912:28&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;  let mk_PrimitiveType(p) = tp in&#10;    pre_(eval_PrimitiveType(tp), e)))&#10;" number="521" object="" resource="newspeakSL" toString="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1912:28&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;  let mk_PrimitiveType(p) = tp in&#10;    pre_(eval_PrimitiveType(tp), e)))&#10;"/>
<po column="47" line="1912" message="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1912:47&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;  let mk_PrimitiveType(p) = tp in&#10;    is_(tp, PrimitiveType)))&#10;" number="522" object="" resource="newspeakSL" toString="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1912:47&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;  let mk_PrimitiveType(p) = tp in&#10;    is_(tp, PrimitiveType)))&#10;"/>
<po column="30" line="1913" message="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1913:30&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;    let mk_VecType(range, tpe) = tp in&#10;      pre_(eval_VecType(tp), e))))&#10;" number="523" object="" resource="newspeakSL" toString="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1913:30&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;    let mk_VecType(range, tpe) = tp in&#10;      pre_(eval_VecType(tp), e))))&#10;"/>
<po column="43" line="1913" message="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1913:43&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;    let mk_VecType(range, tpe) = tp in&#10;      is_(tp, VecType))))&#10;" number="524" object="" resource="newspeakSL" toString="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1913:43&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;    let mk_VecType(range, tpe) = tp in&#10;      is_(tp, VecType))))&#10;"/>
<po column="26" line="1914" message="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1914:26&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;      let mk_StrucType(tps) = tp in&#10;        pre_(eval_StrucType(tp), e)))))&#10;" number="525" object="" resource="newspeakSL" toString="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1914:26&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;      let mk_StrucType(tps) = tp in&#10;        pre_(eval_StrucType(tp), e)))))&#10;"/>
<po column="41" line="1914" message="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1914:41&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;      let mk_StrucType(tps) = tp in&#10;        is_(tp, StrucType)))))&#10;" number="526" object="" resource="newspeakSL" toString="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1914:41&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;      let mk_StrucType(tps) = tp in&#10;        is_(tp, StrucType)))))&#10;"/>
<po column="33" line="1915" message="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1915:33&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;        let mk_FlavouredType(fl, tpe) = tp in&#10;          pre_(eval_FlavouredType(tp), e))))))&#10;" number="527" object="" resource="newspeakSL" toString="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1915:33&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;        let mk_FlavouredType(fl, tpe) = tp in&#10;          pre_(eval_FlavouredType(tp), e))))))&#10;"/>
<po column="52" line="1915" message="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1915:52&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;        let mk_FlavouredType(fl, tpe) = tp in&#10;          is_(tp, FlavouredType))))))&#10;" number="528" object="" resource="newspeakSL" toString="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1915:52&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;        let mk_FlavouredType(fl, tpe) = tp in&#10;          is_(tp, FlavouredType))))))&#10;"/>
<po column="24" line="1916" message="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1916:24&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;          let mk_UnionTp(tps) = tp in&#10;            pre_(eval_UnionTp(tp), e)))))))&#10;" number="529" object="" resource="newspeakSL" toString="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1916:24&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;          let mk_UnionTp(tps) = tp in&#10;            pre_(eval_UnionTp(tp), e)))))))&#10;"/>
<po column="37" line="1916" message="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1916:37&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;          let mk_UnionTp(tps) = tp in&#10;            is_(tp, UnionTp)))))))&#10;" number="530" object="" resource="newspeakSL" toString="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1916:37&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;          let mk_UnionTp(tps) = tp in&#10;            is_(tp, UnionTp)))))))&#10;"/>
<po column="24" line="1917" message="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1917:24&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (not exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;            (exists mk_TypeName(id):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_TypeName(id) = tp =&gt;&#10;            let mk_TypeName(id) = tp in&#10;              pre_(eval_TypeName(tp), e))))))))&#10;" number="531" object="" resource="newspeakSL" toString="eval_Type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1917:24&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (not exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;            (exists mk_TypeName(id):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_TypeName(id) = tp =&gt;&#10;            let mk_TypeName(id) = tp in&#10;              pre_(eval_TypeName(tp), e))))))))&#10;"/>
<po column="38" line="1917" message="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1917:38&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (not exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;            (exists mk_TypeName(id):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_TypeName(id) = tp =&gt;&#10;            let mk_TypeName(id) = tp in&#10;              is_(tp, TypeName))))))))&#10;" number="532" object="" resource="newspeakSL" toString="eval_Type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1917:38&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (not exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_PrimitiveType(p) = tp =&gt;&#10;    (not exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_VecType(range, tpe) = tp =&gt;&#10;      (not exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_StrucType(tps) = tp =&gt;&#10;        (not exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_FlavouredType(fl, tpe) = tp =&gt;&#10;          (not exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_UnionTp(tps) = tp =&gt;&#10;            (exists mk_TypeName(id):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; mk_TypeName(id) = tp =&gt;&#10;            let mk_TypeName(id) = tp in&#10;              is_(tp, TypeName))))))))&#10;"/>
<po column="3" line="1911" message="eval_Type: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1911:3&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_PrimitiveType(p)) or (exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_VecType(range, tpe)) or (exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_StrucType(tps)) or (exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_FlavouredType(fl, tpe)) or (exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_UnionTp(tps)) or (exists mk_TypeName(id):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_TypeName(id)))&#10;" number="533" object="" resource="newspeakSL" toString="eval_Type: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1911:3&#10;(forall mk_Type(tp):Type, e:Env &amp;&#10;  (exists mk_PrimitiveType(p):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_PrimitiveType(p)) or (exists mk_VecType(range, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_VecType(range, tpe)) or (exists mk_StrucType(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_StrucType(tps)) or (exists mk_FlavouredType(fl, tpe):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_FlavouredType(fl, tpe)) or (exists mk_UnionTp(tps):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_UnionTp(tps)) or (exists mk_TypeName(id):(FlavouredType | PrimitiveType | StrucType | TypeName | UnionTp | VecType) &amp; tp = mk_TypeName(id)))&#10;"/>
<po column="8" line="1923" message="eval_PrimitiveType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1923:8&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (is_(pt, Number) =&gt;&#10;    pre_(eval_Number(pt), e)))&#10;" number="534" object="" resource="newspeakSL" toString="eval_PrimitiveType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1923:8&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (is_(pt, Number) =&gt;&#10;    pre_(eval_Number(pt), e)))&#10;"/>
<po column="8" line="1925" message="eval_PrimitiveType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1925:8&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (is_(pt, FloatType) =&gt;&#10;      pre_(eval_FloatType(pt), e))))&#10;" number="535" object="" resource="newspeakSL" toString="eval_PrimitiveType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1925:8&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (is_(pt, FloatType) =&gt;&#10;      pre_(eval_FloatType(pt), e))))&#10;"/>
<po column="23" line="1925" message="eval_PrimitiveType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1925:23&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (is_(pt, FloatType) =&gt;&#10;      is_(pt, FloatType))))&#10;" number="536" object="" resource="newspeakSL" toString="eval_PrimitiveType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1925:23&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (is_(pt, FloatType) =&gt;&#10;      is_(pt, FloatType))))&#10;"/>
<po column="8" line="1926" message="eval_PrimitiveType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1926:8&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (not is_(pt, FloatType) =&gt;&#10;      pre_(eval_VoidValType(pt), e))))&#10;" number="537" object="" resource="newspeakSL" toString="eval_PrimitiveType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1926:8&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (not is_(pt, FloatType) =&gt;&#10;      pre_(eval_VoidValType(pt), e))))&#10;"/>
<po column="25" line="1926" message="eval_PrimitiveType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1926:25&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (not is_(pt, FloatType) =&gt;&#10;      (is_(pt, Flavouring)))))&#10;" number="538" object="" resource="newspeakSL" toString="eval_PrimitiveType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1926:25&#10;(forall mk_PrimitiveType(pt):PrimitiveType, e:Env &amp;&#10;  (not is_(pt, Number) =&gt;&#10;    (not is_(pt, FloatType) =&gt;&#10;      (is_(pt, Flavouring)))))&#10;"/>
<po column="18" line="1930" message="eval_Number, ranges: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1930:18&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (forall r in set (elems range) &amp;&#10;    pre_(eval_Range(r), e)))&#10;" number="539" object="" resource="newspeakSL" toString="eval_Number, ranges: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1930:18&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (forall r in set (elems range) &amp;&#10;    pre_(eval_Range(r), e)))&#10;"/>
<po column="21" line="1936" message="eval_Number, m: map sequence compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1936:21&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          forall m1, m2 in set {{0 |-&gt; false}, {1 |-&gt; true}} &amp;&#10;            forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;              d3 = d4 =&gt; m1(d3) = m2(d4))))))&#10;" number="540" object="" resource="newspeakSL" toString="eval_Number, m: map sequence compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1936:21&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          forall m1, m2 in set {{0 |-&gt; false}, {1 |-&gt; true}} &amp;&#10;            forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;              d3 = d4 =&gt; m1(d3) = m2(d4))))))&#10;"/>
<po column="24" line="1937" message="eval_Number: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1937:24&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (let m:map (nat) to (bool) = {0 |-&gt; false, 1 |-&gt; true} in&#10;            (forall v in set (dunion ranges) &amp;&#10;              v in set dom m)))))))&#10;" number="541" object="" resource="newspeakSL" toString="eval_Number: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1937:24&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (let m:map (nat) to (bool) = {0 |-&gt; false, 1 |-&gt; true} in&#10;            (forall v in set (dunion ranges) &amp;&#10;              v in set dom m)))))))&#10;"/>
<po column="26" line="1937" message="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1937:26&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (let m:map (nat) to (bool) = {0 |-&gt; false, 1 |-&gt; true} in&#10;            (forall v in set (dunion ranges) &amp;&#10;              v &gt;= 0)))))))&#10;" number="542" object="" resource="newspeakSL" toString="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1937:26&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (let m:map (nat) to (bool) = {0 |-&gt; false, 1 |-&gt; true} in&#10;            (forall v in set (dunion ranges) &amp;&#10;              v &gt;= 0)))))))&#10;"/>
<po column="24" line="1941" message="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1941:24&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            (is_(rep, &lt;byte&gt;)) or&#10;            (is_(rep, &lt;word&gt;))))))))&#10;" number="543" object="" resource="newspeakSL" toString="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1941:24&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            (is_(rep, &lt;byte&gt;)) or&#10;            (is_(rep, &lt;word&gt;))))))))&#10;"/>
<po column="28" line="1941" message="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1941:28&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            is_((dunion ranges), set of (int))))))))&#10;" number="544" object="" resource="newspeakSL" toString="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1941:28&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            is_((dunion ranges), set of (int))))))))&#10;"/>
<po column="19" line="1944" message="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1944:19&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            (is_(rep, &lt;byte&gt;)) or&#10;            (is_(rep, &lt;word&gt;))))))))&#10;" number="545" object="" resource="newspeakSL" toString="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1944:19&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            (is_(rep, &lt;byte&gt;)) or&#10;            (is_(rep, &lt;word&gt;))))))))&#10;"/>
<po column="23" line="1944" message="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1944:23&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            is_((dunion ranges), set of (int))))))))&#10;" number="546" object="" resource="newspeakSL" toString="eval_Number: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1944:23&#10;(forall mk_Number(rep, range):Number, e:Env &amp;&#10;  (let ranges:set of ((Errvalue | set of (int))) = {eval_Range(r)(e) | [r in set (elems range)]} in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            is_((dunion ranges), set of (int))))))))&#10;"/>
<po column="36" line="1949" message="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1949:36&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    ((lower &lt;&gt; nil) =&gt;&#10;      pre_(eval_CompileTimeValue(lower), e))))&#10;" number="547" object="" resource="newspeakSL" toString="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1949:36&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    ((lower &lt;&gt; nil) =&gt;&#10;      pre_(eval_CompileTimeValue(lower), e))))&#10;"/>
<po column="58" line="1949" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1949:58&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    ((lower &lt;&gt; nil) =&gt;&#10;      is_(lower, CompileTimeValue))))&#10;" number="548" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1949:58&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    ((lower &lt;&gt; nil) =&gt;&#10;      is_(lower, CompileTimeValue))))&#10;"/>
<po column="36" line="1950" message="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1950:36&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    (not ((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) =&gt;&#10;      ((upper &lt;&gt; nil) =&gt;&#10;        pre_(eval_CompileTimeValue(upper), e)))))&#10;" number="549" object="" resource="newspeakSL" toString="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1950:36&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    (not ((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) =&gt;&#10;      ((upper &lt;&gt; nil) =&gt;&#10;        pre_(eval_CompileTimeValue(upper), e)))))&#10;"/>
<po column="58" line="1950" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1950:58&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    (not ((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) =&gt;&#10;      ((upper &lt;&gt; nil) =&gt;&#10;        is_(upper, CompileTimeValue)))))&#10;" number="550" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1950:58&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not ((lower = nil) and (upper = nil)) =&gt;&#10;    (not ((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) =&gt;&#10;      ((upper &lt;&gt; nil) =&gt;&#10;        is_(upper, CompileTimeValue)))))&#10;"/>
<po column="8" line="1953" message="eval_Range: finite set obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:8&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      exists finmap1:map nat to (int) &amp;&#10;        forall x:int &amp;&#10;          ((0 &lt;= x) and (x &lt;= ((eval_CompileTimeValue(upper)(e).val).val))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = x)))&#10;" number="551" object="" resource="newspeakSL" toString="eval_Range: finite set obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:8&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      exists finmap1:map nat to (int) &amp;&#10;        forall x:int &amp;&#10;          ((0 &lt;= x) and (x &lt;= ((eval_CompileTimeValue(upper)(e).val).val))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = x)))&#10;"/>
<po column="40" line="1953" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:40&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      (forall x:int &amp;&#10;        ((0 &lt;= x) =&gt;&#10;          is_real(((eval_CompileTimeValue(upper)(e).val).val)))))))&#10;" number="552" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:40&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      (forall x:int &amp;&#10;        ((0 &lt;= x) =&gt;&#10;          is_real(((eval_CompileTimeValue(upper)(e).val).val)))))))&#10;"/>
<po column="40" line="1953" message="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:40&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      (forall x:int &amp;&#10;        ((0 &lt;= x) =&gt;&#10;          pre_(eval_CompileTimeValue(upper), e))))))&#10;" number="553" object="" resource="newspeakSL" toString="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:40&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      (forall x:int &amp;&#10;        ((0 &lt;= x) =&gt;&#10;          pre_(eval_CompileTimeValue(upper), e))))))&#10;"/>
<po column="62" line="1953" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:62&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      (forall x:int &amp;&#10;        ((0 &lt;= x) =&gt;&#10;          is_(upper, CompileTimeValue))))))&#10;" number="554" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1953:62&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    ((lower = nil) =&gt;&#10;      (forall x:int &amp;&#10;        ((0 &lt;= x) =&gt;&#10;          is_(upper, CompileTimeValue))))))&#10;"/>
<po column="8" line="1955" message="eval_Range: finite set obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:8&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        exists finmap1:map nat to (int) &amp;&#10;          forall x:int &amp;&#10;            ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) and (x &lt;= maxint)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = x))))&#10;" number="555" object="" resource="newspeakSL" toString="eval_Range: finite set obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:8&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        exists finmap1:map nat to (int) &amp;&#10;          forall x:int &amp;&#10;            ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) and (x &lt;= maxint)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = x))))&#10;"/>
<po column="24" line="1955" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_real(((eval_CompileTimeValue(lower)(e).val).val)))))))&#10;" number="556" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_real(((eval_CompileTimeValue(lower)(e).val).val)))))))&#10;"/>
<po column="24" line="1955" message="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          pre_(eval_CompileTimeValue(lower), e))))))&#10;" number="557" object="" resource="newspeakSL" toString="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          pre_(eval_CompileTimeValue(lower), e))))))&#10;"/>
<po column="46" line="1955" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:46&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_(lower, CompileTimeValue))))))&#10;" number="558" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1955:46&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      ((upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_(lower, CompileTimeValue))))))&#10;"/>
<po column="8" line="1957" message="eval_Range: finite set obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:8&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        exists finmap1:map nat to (int) &amp;&#10;          forall x:int &amp;&#10;            ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) and (x &lt;= ((eval_CompileTimeValue(upper)(e).val).val))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = x))))&#10;" number="559" object="" resource="newspeakSL" toString="eval_Range: finite set obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:8&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        exists finmap1:map nat to (int) &amp;&#10;          forall x:int &amp;&#10;            ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) and (x &lt;= ((eval_CompileTimeValue(upper)(e).val).val))) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = x))))&#10;"/>
<po column="24" line="1957" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_real(((eval_CompileTimeValue(lower)(e).val).val)))))))&#10;" number="560" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_real(((eval_CompileTimeValue(lower)(e).val).val)))))))&#10;"/>
<po column="24" line="1957" message="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          pre_(eval_CompileTimeValue(lower), e))))))&#10;" number="561" object="" resource="newspeakSL" toString="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:24&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          pre_(eval_CompileTimeValue(lower), e))))))&#10;"/>
<po column="46" line="1957" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:46&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_(lower, CompileTimeValue))))))&#10;" number="562" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1957:46&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          is_(lower, CompileTimeValue))))))&#10;"/>
<po column="29" line="1958" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1958:29&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) =&gt;&#10;            is_real(((eval_CompileTimeValue(upper)(e).val).val))))))))&#10;" number="563" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1958:29&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) =&gt;&#10;            is_real(((eval_CompileTimeValue(upper)(e).val).val))))))))&#10;"/>
<po column="29" line="1958" message="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1958:29&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) =&gt;&#10;            pre_(eval_CompileTimeValue(upper), e)))))))&#10;" number="564" object="" resource="newspeakSL" toString="eval_Range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1958:29&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) =&gt;&#10;            pre_(eval_CompileTimeValue(upper), e)))))))&#10;"/>
<po column="51" line="1958" message="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1958:51&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) =&gt;&#10;            is_(upper, CompileTimeValue)))))))&#10;" number="565" object="" resource="newspeakSL" toString="eval_Range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1958:51&#10;(forall mk_Range(lower, upper):Range, e:Env &amp;&#10;  (not (((lower = nil) and (upper = nil)) or (((lower &lt;&gt; nil) and (not is_((eval_CompileTimeValue(lower)(e).val), Int))) or ((upper &lt;&gt; nil) and (not is_((eval_CompileTimeValue(upper)(e).val), Int))))) =&gt;&#10;    (not (lower = nil) =&gt;&#10;      (not (upper = nil) =&gt;&#10;        (forall x:int &amp;&#10;          ((((eval_CompileTimeValue(lower)(e).val).val) &lt;= x) =&gt;&#10;            is_(upper, CompileTimeValue)))))))&#10;"/>
<po column="43" line="1963" message="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1963:43&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not ((abserr = nil) and (relerr = nil)) =&gt;&#10;    (forall range in set (elems ranges) &amp;&#10;      pre_(eval_Range(range), e))))&#10;" number="566" object="" resource="newspeakSL" toString="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1963:43&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not ((abserr = nil) and (relerr = nil)) =&gt;&#10;    (forall range in set (elems ranges) &amp;&#10;      pre_(eval_Range(range), e))))&#10;"/>
<po column="25" line="1967" message="eval_FloatType, abse: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1967:25&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (abserr = nil) =&gt;&#10;      pre_(eval_CompileTimeValue(abserr), e))))&#10;" number="567" object="" resource="newspeakSL" toString="eval_FloatType, abse: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1967:25&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (abserr = nil) =&gt;&#10;      pre_(eval_CompileTimeValue(abserr), e))))&#10;"/>
<po column="47" line="1967" message="eval_FloatType, abse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1967:47&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (abserr = nil) =&gt;&#10;      is_(abserr, CompileTimeValue))))&#10;" number="568" object="" resource="newspeakSL" toString="eval_FloatType, abse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1967:47&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (abserr = nil) =&gt;&#10;      is_(abserr, CompileTimeValue))))&#10;"/>
<po column="25" line="1970" message="eval_FloatType, rele: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1970:25&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (relerr = nil) =&gt;&#10;      pre_(eval_CompileTimeValue(relerr), e))))&#10;" number="569" object="" resource="newspeakSL" toString="eval_FloatType, rele: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1970:25&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (relerr = nil) =&gt;&#10;      pre_(eval_CompileTimeValue(relerr), e))))&#10;"/>
<po column="47" line="1970" message="eval_FloatType, rele: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1970:47&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (relerr = nil) =&gt;&#10;      is_(relerr, CompileTimeValue))))&#10;" number="570" object="" resource="newspeakSL" toString="eval_FloatType, rele: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1970:47&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (not (relerr = nil) =&gt;&#10;      is_(relerr, CompileTimeValue))))&#10;"/>
<po column="35" line="1973" message="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_min(eval_Range(range)(e)))))))&#10;" number="571" object="" resource="newspeakSL" toString="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_min(eval_Range(range)(e)))))))&#10;"/>
<po column="39" line="1973" message="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_(eval_Range(range)(e), set of (real)))))))&#10;" number="572" object="" resource="newspeakSL" toString="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_(eval_Range(range)(e), set of (real)))))))&#10;"/>
<po column="39" line="1973" message="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_(eval_Range(range), e))))))&#10;" number="573" object="" resource="newspeakSL" toString="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_(eval_Range(range), e))))))&#10;"/>
<po column="35" line="1974" message="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_max(eval_Range(range)(e)))))))&#10;" number="574" object="" resource="newspeakSL" toString="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_max(eval_Range(range)(e)))))))&#10;"/>
<po column="39" line="1974" message="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_(eval_Range(range)(e), set of (real)))))))&#10;" number="575" object="" resource="newspeakSL" toString="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_(eval_Range(range)(e), set of (real)))))))&#10;"/>
<po column="39" line="1974" message="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_(eval_Range(range), e))))))&#10;" number="576" object="" resource="newspeakSL" toString="eval_FloatType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:39&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          pre_(eval_Range(range), e))))))&#10;"/>
<po column="35" line="1973" message="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_int(min(eval_Range(range)(e))))))))&#10;" number="577" object="" resource="newspeakSL" toString="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1973:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_int(min(eval_Range(range)(e))))))))&#10;"/>
<po column="35" line="1974" message="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_int(max(eval_Range(range)(e))))))))&#10;" number="578" object="" resource="newspeakSL" toString="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1974:35&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        (forall range in set (elems ranges) &amp;&#10;          is_int(max(eval_Range(range)(e))))))))&#10;"/>
<po column="47" line="1975" message="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1975:47&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        is_real((abse.val))))))&#10;" number="579" object="" resource="newspeakSL" toString="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1975:47&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        is_real((abse.val))))))&#10;"/>
<po column="56" line="1975" message="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1975:56&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        is_real((rele.val))))))&#10;" number="580" object="" resource="newspeakSL" toString="eval_FloatType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1975:56&#10;(forall mk_FloatType(ranges, abserr, relerr):FloatType, e:Env &amp;&#10;  (not (((abserr = nil) and (relerr = nil)) or (exists [range in set (elems ranges)] &amp; (eval_Range(range)(e) = &lt;err&gt;))) =&gt;&#10;    (let abse:(Expressible_value | Real) = (if (abserr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(abserr)(e).val)), rele:(Expressible_value | Real) = (if (relerr = nil)&#10;    then mk_Real(0, mk_Float({mk_Floatrng(0, 0)}, 0, 0, {}))&#10;    else (eval_CompileTimeValue(relerr)(e).val)) in&#10;      (not (not (is_(abse, Real) and is_(rele, Real))) =&gt;&#10;        is_real((rele.val))))))&#10;"/>
<po column="16" line="1983" message="eval_StrucType, typs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1983:16&#10;(forall mk_StrucType(tps):StrucType, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    pre_(eval_Type(tps(i)), e)))&#10;" number="581" object="" resource="newspeakSL" toString="eval_StrucType, typs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1983:16&#10;(forall mk_StrucType(tps):StrucType, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    pre_(eval_Type(tps(i)), e)))&#10;"/>
<po column="26" line="1983" message="eval_StrucType, typs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1983:26&#10;(forall mk_StrucType(tps):StrucType, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    i in set inds tps))&#10;" number="582" object="" resource="newspeakSL" toString="eval_StrucType, typs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1983:26&#10;(forall mk_StrucType(tps):StrucType, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    i in set inds tps))&#10;"/>
<po column="25" line="1990" message="eval_StrucType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1990:25&#10;(forall mk_StrucType(tps):StrucType, e:Env &amp;&#10;  (let typs:seq of ((Errvalue | Expressible_type)) = [eval_Type(tps(i))(e) | i in set (inds tps)] in&#10;    (not (exists [tp in set (elems typs)] &amp; (not (is_(tp, TrType) or (is_(tp, Float) or is_(tp, IntType))))) =&gt;&#10;      (not (exists [tp1, tp2 in set (elems typs)] &amp; ((tp1 &lt;&gt; tp2) and ((tp1.fl) = (tp2.fl)))) =&gt;&#10;        is_(typs, seq1 of (CompType))))))&#10;" number="583" object="" resource="newspeakSL" toString="eval_StrucType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1990:25&#10;(forall mk_StrucType(tps):StrucType, e:Env &amp;&#10;  (let typs:seq of ((Errvalue | Expressible_type)) = [eval_Type(tps(i))(e) | i in set (inds tps)] in&#10;    (not (exists [tp in set (elems typs)] &amp; (not (is_(tp, TrType) or (is_(tp, Float) or is_(tp, IntType))))) =&gt;&#10;      (not (exists [tp1, tp2 in set (elems typs)] &amp; ((tp1 &lt;&gt; tp2) and ((tp1.fl) = (tp2.fl)))) =&gt;&#10;        is_(typs, seq1 of (CompType))))))&#10;"/>
<po column="13" line="1994" message="eval_VecType, typ: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1994:13&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    pre_(eval_Type(tp), e)))&#10;" number="584" object="" resource="newspeakSL" toString="eval_VecType, typ: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1994:13&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    pre_(eval_Type(tp), e)))&#10;"/>
<po column="16" line="1995" message="eval_VecType, nrange: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1995:16&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    pre_(eval_Range(range), e)))&#10;" number="585" object="" resource="newspeakSL" toString="eval_VecType, nrange: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1995:16&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    pre_(eval_Range(range), e)))&#10;"/>
<po column="22" line="1998" message="eval_VecType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:22&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        pre_min(nrange)))))&#10;" number="586" object="" resource="newspeakSL" toString="eval_VecType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:22&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        pre_min(nrange)))))&#10;"/>
<po column="26" line="1998" message="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:26&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_(nrange, set of (real))))))&#10;" number="587" object="" resource="newspeakSL" toString="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:26&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_(nrange, set of (real))))))&#10;"/>
<po column="34" line="1998" message="eval_VecType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:34&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        pre_max(nrange)))))&#10;" number="588" object="" resource="newspeakSL" toString="eval_VecType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:34&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        pre_max(nrange)))))&#10;"/>
<po column="38" line="1998" message="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:38&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_(nrange, set of (real))))))&#10;" number="589" object="" resource="newspeakSL" toString="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:38&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_(nrange, set of (real))))))&#10;"/>
<po column="22" line="1998" message="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:22&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_int(min(nrange))))))&#10;" number="590" object="" resource="newspeakSL" toString="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:22&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_int(min(nrange))))))&#10;"/>
<po column="34" line="1998" message="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:34&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_int(max(nrange))))))&#10;" number="591" object="" resource="newspeakSL" toString="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:34&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        is_int(max(nrange))))))&#10;"/>
<po column="46" line="1998" message="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:46&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        ((is_(typ, Float)) or&#10;        (is_(typ, IntType)) or&#10;        (is_(typ, StructureType)) or&#10;        (is_(typ, TrType)) or&#10;        (is_(typ, UnionType)) or&#10;        (is_(typ, VectorType)) or&#10;        (is_(typ, VoidType)))))))&#10;" number="592" object="" resource="newspeakSL" toString="eval_VecType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 1998:46&#10;(forall mk_VecType(range, tp):VecType &amp;&#10;  (forall e:(unresolved DEFAULT`Env) &amp;&#10;    (let typ:(Errvalue | Expressible_type) = eval_Type(tp)(e), nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;      (not ((typ = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;        ((is_(typ, Float)) or&#10;        (is_(typ, IntType)) or&#10;        (is_(typ, StructureType)) or&#10;        (is_(typ, TrType)) or&#10;        (is_(typ, UnionType)) or&#10;        (is_(typ, VectorType)) or&#10;        (is_(typ, VoidType)))))))&#10;"/>
<po column="13" line="2003" message="eval_FlavouredType, typ: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2003:13&#10;(forall mk_FlavouredType(fl, tp):FlavouredType, e:Env &amp;&#10;  pre_(eval_Type(tp), e))&#10;" number="593" object="" resource="newspeakSL" toString="eval_FlavouredType, typ: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2003:13&#10;(forall mk_FlavouredType(fl, tp):FlavouredType, e:Env &amp;&#10;  pre_(eval_Type(tp), e))&#10;"/>
<po column="10" line="2006" message="eval_FlavouredType: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2006:10&#10;(forall mk_FlavouredType(fl, tp):FlavouredType, e:Env &amp;&#10;  (let flavour:Flavdom = eval_Flavouring(fl), typ:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (typ = &lt;err&gt;) =&gt;&#10;      (exists mk_VoidType(t):(Errvalue | Expressible_type) &amp; typ = mk_VoidType(t)) or (exists mk_TrType(range, fl):(Errvalue | Expressible_type) &amp; typ = mk_TrType(range, fl)) or (exists mk_IntType(rep, range, fl):(Errvalue | Expressible_type) &amp; typ = mk_IntType(rep, range, fl)) or (exists mk_Float(range, abse, rele, fl):(Errvalue | Expressible_type) &amp; typ = mk_Float(range, abse, rele, fl)) or (exists mk_VectorType(lower, upper, tp, fl):(Errvalue | Expressible_type) &amp; typ = mk_VectorType(lower, upper, tp, fl)) or (exists mk_StructureType(tps, fl):(Errvalue | Expressible_type) &amp; typ = mk_StructureType(tps, fl)) or (exists mk_UnionType(tps, fl):(Errvalue | Expressible_type) &amp; typ = mk_UnionType(tps, fl)))))&#10;" number="594" object="" resource="newspeakSL" toString="eval_FlavouredType: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2006:10&#10;(forall mk_FlavouredType(fl, tp):FlavouredType, e:Env &amp;&#10;  (let flavour:Flavdom = eval_Flavouring(fl), typ:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (typ = &lt;err&gt;) =&gt;&#10;      (exists mk_VoidType(t):(Errvalue | Expressible_type) &amp; typ = mk_VoidType(t)) or (exists mk_TrType(range, fl):(Errvalue | Expressible_type) &amp; typ = mk_TrType(range, fl)) or (exists mk_IntType(rep, range, fl):(Errvalue | Expressible_type) &amp; typ = mk_IntType(rep, range, fl)) or (exists mk_Float(range, abse, rele, fl):(Errvalue | Expressible_type) &amp; typ = mk_Float(range, abse, rele, fl)) or (exists mk_VectorType(lower, upper, tp, fl):(Errvalue | Expressible_type) &amp; typ = mk_VectorType(lower, upper, tp, fl)) or (exists mk_StructureType(tps, fl):(Errvalue | Expressible_type) &amp; typ = mk_StructureType(tps, fl)) or (exists mk_UnionType(tps, fl):(Errvalue | Expressible_type) &amp; typ = mk_UnionType(tps, fl)))))&#10;"/>
<po column="15" line="2019" message="eval_UnionTp, typs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2019:15&#10;(forall mk_UnionTp(tps):UnionTp, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    pre_(eval_Type(tps(i)), e)))&#10;" number="595" object="" resource="newspeakSL" toString="eval_UnionTp, typs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2019:15&#10;(forall mk_UnionTp(tps):UnionTp, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    pre_(eval_Type(tps(i)), e)))&#10;"/>
<po column="25" line="2019" message="eval_UnionTp, typs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2019:25&#10;(forall mk_UnionTp(tps):UnionTp, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    i in set inds tps))&#10;" number="596" object="" resource="newspeakSL" toString="eval_UnionTp, typs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2019:25&#10;(forall mk_UnionTp(tps):UnionTp, e:Env &amp;&#10;  (forall i in set (inds tps) &amp;&#10;    i in set inds tps))&#10;"/>
<po column="21" line="2025" message="eval_UnionTp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2025:21&#10;(forall mk_UnionTp(tps):UnionTp, e:Env &amp;&#10;  (let typs:set of ((Errvalue | Expressible_type)) = {eval_Type(tps(i))(e) | [i in set (inds tps)]} in&#10;    (not (exists [tp in set typs] &amp; (not (is_(tp, IntType) or (is_(tp, Float) or (is_(tp, TrType) or is_(tp, VoidType)))))) =&gt;&#10;      (not (exists [t1, t2 in set typs] &amp; fleq(t1, t2)) =&gt;&#10;        is_(typs, set of ((Float | IntType | TrType | VoidType)))))))&#10;" number="597" object="" resource="newspeakSL" toString="eval_UnionTp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2025:21&#10;(forall mk_UnionTp(tps):UnionTp, e:Env &amp;&#10;  (let typs:set of ((Errvalue | Expressible_type)) = {eval_Type(tps(i))(e) | [i in set (inds tps)]} in&#10;    (not (exists [tp in set typs] &amp; (not (is_(tp, IntType) or (is_(tp, Float) or (is_(tp, TrType) or is_(tp, VoidType)))))) =&gt;&#10;      (not (exists [t1, t2 in set typs] &amp; fleq(t1, t2)) =&gt;&#10;        is_(typs, set of ((Float | IntType | TrType | VoidType)))))))&#10;"/>
<po column="8" line="2030" message="eval_TypeName: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2030:8&#10;(forall mk_TypeName(id):TypeName, mk_(m, l):Env &amp;&#10;  ((id in set (dom m)) =&gt;&#10;    (exists mk_Location(l):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Location(l)) or (exists mk_Storable_value(v):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Storable_value(v)) or (exists mk_Proc(p):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Proc(p)) or access_env(id)(mk_(m, l)) = &lt;err&gt; or (exists t:Denotable_value &amp; access_env(id)(mk_(m, l)) = t)))&#10;" number="598" object="" resource="newspeakSL" toString="eval_TypeName: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2030:8&#10;(forall mk_TypeName(id):TypeName, mk_(m, l):Env &amp;&#10;  ((id in set (dom m)) =&gt;&#10;    (exists mk_Location(l):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Location(l)) or (exists mk_Storable_value(v):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Storable_value(v)) or (exists mk_Proc(p):Denotable_value &amp; access_env(id)(mk_(m, l)) = mk_Proc(p)) or access_env(id)(mk_(m, l)) = &lt;err&gt; or (exists t:Denotable_value &amp; access_env(id)(mk_(m, l)) = t)))&#10;"/>
<po column="1" line="2027" message="eval_TypeName: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2027:1&#10;(forall mk_TypeName(id):TypeName, mk_(m, l):Env &amp;&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), Errvalue)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), Expressible_type) and ((is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), Float)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), IntType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), StructureType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), TrType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), UnionType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), VectorType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), VoidType)))))&#10;" number="599" object="" resource="newspeakSL" toString="eval_TypeName: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2027:1&#10;(forall mk_TypeName(id):TypeName, mk_(m, l):Env &amp;&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), Errvalue)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), Expressible_type) and ((is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), Float)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), IntType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), StructureType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), TrType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), UnionType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), VectorType)) or&#10;  (is_((if (id in set (dom m))&#10;  then (cases access_env(id)(mk_(m, l)) :&#10;  case mk_Location(l) -&gt; &lt;err&gt;,&#10;  case mk_Storable_value(v) -&gt; &lt;err&gt;,&#10;  case mk_Proc(p) -&gt; &lt;err&gt;,&#10;  case &lt;err&gt; -&gt; &lt;err&gt;,&#10;  case t -&gt; t&#10;  end)&#10;  else &lt;err&gt;), VoidType)))))&#10;"/>
<po column="8" line="2041" message="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2041:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (is_(s, SimpleScope) =&gt;&#10;    pre_(eval_SimpleScope(s)(e), ps)))&#10;" number="600" object="" resource="newspeakSL" toString="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2041:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (is_(s, SimpleScope) =&gt;&#10;    pre_(eval_SimpleScope(s)(e), ps)))&#10;"/>
<po column="8" line="2041" message="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2041:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (is_(s, SimpleScope) =&gt;&#10;    pre_(eval_SimpleScope(s), e)))&#10;" number="601" object="" resource="newspeakSL" toString="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2041:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (is_(s, SimpleScope) =&gt;&#10;    pre_(eval_SimpleScope(s), e)))&#10;"/>
<po column="8" line="2042" message="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2042:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (not is_(s, SimpleScope) =&gt;&#10;    pre_(eval_PackageScope(s)(e), ps)))&#10;" number="602" object="" resource="newspeakSL" toString="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2042:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (not is_(s, SimpleScope) =&gt;&#10;    pre_(eval_PackageScope(s)(e), ps)))&#10;"/>
<po column="8" line="2042" message="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2042:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (not is_(s, SimpleScope) =&gt;&#10;    pre_(eval_PackageScope(s), e)))&#10;" number="603" object="" resource="newspeakSL" toString="eval_Scope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2042:8&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (not is_(s, SimpleScope) =&gt;&#10;    pre_(eval_PackageScope(s), e)))&#10;"/>
<po column="26" line="2042" message="eval_Scope: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2042:26&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (not is_(s, SimpleScope) =&gt;&#10;    is_(s, PackageScope)))&#10;" number="604" object="" resource="newspeakSL" toString="eval_Scope: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2042:26&#10;(forall mk_Scope(s):Scope, e:Env, ps:PState &amp;&#10;  (not is_(s, SimpleScope) =&gt;&#10;    is_(s, PackageScope)))&#10;"/>
<po column="20" line="2047" message="eval_SimpleScope, new_env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2047:20&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    pre_(eval_Decls(decls), old_env_st)))&#10;" number="605" object="" resource="newspeakSL" toString="eval_SimpleScope, new_env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2047:20&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    pre_(eval_Decls(decls), old_env_st)))&#10;"/>
<po column="12" line="2050" message="eval_SimpleScope, new_env, new_sto: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2050:12&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        exists mk_(new_env, new_sto):EnvState &amp; mk_(new_env, new_sto) = new_env_st))))&#10;" number="606" object="" resource="newspeakSL" toString="eval_SimpleScope, new_env, new_sto: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2050:12&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        exists mk_(new_env, new_sto):EnvState &amp; mk_(new_env, new_sto) = new_env_st))))&#10;"/>
<po column="35" line="2050" message="eval_SimpleScope, new_env, new_sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2050:35&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        is_(new_env_st, (Env * PState))))))&#10;" number="607" object="" resource="newspeakSL" toString="eval_SimpleScope, new_env, new_sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2050:35&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        is_(new_env_st, (Env * PState))))))&#10;"/>
<po column="8" line="2051" message="eval_SimpleScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2051:8&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(new_env, new_sto):EnvState = new_env_st in&#10;          pre_(eval_Expression(expr)(new_env), new_sto))))))&#10;" number="608" object="" resource="newspeakSL" toString="eval_SimpleScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2051:8&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(new_env, new_sto):EnvState = new_env_st in&#10;          pre_(eval_Expression(expr)(new_env), new_sto))))))&#10;"/>
<po column="8" line="2051" message="eval_SimpleScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2051:8&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(new_env, new_sto):EnvState = new_env_st in&#10;          pre_(eval_Expression(expr), new_env))))))&#10;" number="609" object="" resource="newspeakSL" toString="eval_SimpleScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2051:8&#10;(forall mk_SimpleScope(decls, expr):SimpleScope, e:Env, ps:PState &amp;&#10;  (let old_env_st:(Env * PState) = mk_(e, ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(old_env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(new_env, new_sto):EnvState = new_env_st in&#10;          pre_(eval_Expression(expr), new_env))))))&#10;"/>
<po column="8" line="2059" message="eval_Decls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:8&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      pre_(eval_Decls((tl decls)), eval_Declaration((hd decls))(env_st)))))&#10;" number="610" object="" resource="newspeakSL" toString="eval_Decls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:8&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      pre_(eval_Decls((tl decls)), eval_Declaration((hd decls))(env_st)))))&#10;"/>
<po column="22" line="2059" message="eval_Decls: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:22&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      decls &lt;&gt; [])))&#10;" number="611" object="" resource="newspeakSL" toString="eval_Decls: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:22&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      decls &lt;&gt; [])))&#10;"/>
<po column="29" line="2059" message="eval_Decls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:29&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      pre_(eval_Declaration((hd decls)), env_st))))&#10;" number="612" object="" resource="newspeakSL" toString="eval_Decls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:29&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      pre_(eval_Declaration((hd decls)), env_st))))&#10;"/>
<po column="49" line="2059" message="eval_Decls: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:49&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      decls &lt;&gt; [])))&#10;" number="613" object="" resource="newspeakSL" toString="eval_Decls: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2059:49&#10;(forall decls:seq of (Declaration), env_st:EnvState &amp;&#10;  (not (env_st = &lt;err&gt;) =&gt;&#10;    (not (decls = []) =&gt;&#10;      decls &lt;&gt; [])))&#10;"/>
<po column="29" line="2064" message="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2064:29&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;  let mk_ImportDecl(id, tp) = decl in&#10;    pre_(eval_ImportDecl(decl), env_st)))&#10;" number="614" object="" resource="newspeakSL" toString="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2064:29&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;  let mk_ImportDecl(id, tp) = decl in&#10;    pre_(eval_ImportDecl(decl), env_st)))&#10;"/>
<po column="45" line="2064" message="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2064:45&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;  let mk_ImportDecl(id, tp) = decl in&#10;    is_(decl, ImportDecl)))&#10;" number="615" object="" resource="newspeakSL" toString="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2064:45&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;  let mk_ImportDecl(id, tp) = decl in&#10;    is_(decl, ImportDecl)))&#10;"/>
<po column="31" line="2065" message="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2065:31&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;    let mk_ExportDecl(id, expr) = decl in&#10;      pre_(eval_ExportDecl(decl), env_st))))&#10;" number="616" object="" resource="newspeakSL" toString="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2065:31&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;    let mk_ExportDecl(id, expr) = decl in&#10;      pre_(eval_ExportDecl(decl), env_st))))&#10;"/>
<po column="47" line="2065" message="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2065:47&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;    let mk_ExportDecl(id, expr) = decl in&#10;      is_(decl, ExportDecl))))&#10;" number="617" object="" resource="newspeakSL" toString="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2065:47&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;    let mk_ExportDecl(id, expr) = decl in&#10;      is_(decl, ExportDecl))))&#10;"/>
<po column="22" line="2066" message="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2066:22&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;      let mk_LetDecl(l) = decl in&#10;        pre_(eval_LetDecl(decl), env_st)))))&#10;" number="618" object="" resource="newspeakSL" toString="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2066:22&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;      let mk_LetDecl(l) = decl in&#10;        pre_(eval_LetDecl(decl), env_st)))))&#10;"/>
<po column="35" line="2066" message="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2066:35&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;      let mk_LetDecl(l) = decl in&#10;        is_(decl, LetDecl)))))&#10;" number="619" object="" resource="newspeakSL" toString="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2066:35&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;      let mk_LetDecl(l) = decl in&#10;        is_(decl, LetDecl)))))&#10;"/>
<po column="28" line="2067" message="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2067:28&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;        let mk_VarDecl(id, expr) = decl in&#10;          pre_(eval_VarDecl(decl), env_st))))))&#10;" number="620" object="" resource="newspeakSL" toString="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2067:28&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;        let mk_VarDecl(id, expr) = decl in&#10;          pre_(eval_VarDecl(decl), env_st))))))&#10;"/>
<po column="41" line="2067" message="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2067:41&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;        let mk_VarDecl(id, expr) = decl in&#10;          is_(decl, VarDecl))))))&#10;" number="621" object="" resource="newspeakSL" toString="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2067:41&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;        let mk_VarDecl(id, expr) = decl in&#10;          is_(decl, VarDecl))))))&#10;"/>
<po column="32" line="2068" message="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2068:32&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;          let mk_ProcDec(nls, ph, expr) = decl in&#10;            pre_(eval_ProcDec(decl), env_st)))))))&#10;" number="622" object="" resource="newspeakSL" toString="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2068:32&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;          let mk_ProcDec(nls, ph, expr) = decl in&#10;            pre_(eval_ProcDec(decl), env_st)))))))&#10;"/>
<po column="45" line="2068" message="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2068:45&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;          let mk_ProcDec(nls, ph, expr) = decl in&#10;            is_(decl, ProcDec)))))))&#10;" number="623" object="" resource="newspeakSL" toString="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2068:45&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;          let mk_ProcDec(nls, ph, expr) = decl in&#10;            is_(decl, ProcDec)))))))&#10;"/>
<po column="28" line="2069" message="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2069:28&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (not exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;            (exists mk_TypeDec(id, type):Declaration &amp; mk_TypeDec(id, type) = decl =&gt;&#10;            let mk_TypeDec(id, type) = decl in&#10;              pre_(eval_TypeDec(decl), env_st))))))))&#10;" number="624" object="" resource="newspeakSL" toString="eval_Declaration: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2069:28&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (not exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;            (exists mk_TypeDec(id, type):Declaration &amp; mk_TypeDec(id, type) = decl =&gt;&#10;            let mk_TypeDec(id, type) = decl in&#10;              pre_(eval_TypeDec(decl), env_st))))))))&#10;"/>
<po column="41" line="2069" message="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2069:41&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (not exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;            (exists mk_TypeDec(id, type):Declaration &amp; mk_TypeDec(id, type) = decl =&gt;&#10;            let mk_TypeDec(id, type) = decl in&#10;              is_(decl, TypeDec))))))))&#10;" number="625" object="" resource="newspeakSL" toString="eval_Declaration: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2069:41&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (not exists mk_ImportDecl(id, tp):Declaration &amp; mk_ImportDecl(id, tp) = decl =&gt;&#10;    (not exists mk_ExportDecl(id, expr):Declaration &amp; mk_ExportDecl(id, expr) = decl =&gt;&#10;      (not exists mk_LetDecl(l):Declaration &amp; mk_LetDecl(l) = decl =&gt;&#10;        (not exists mk_VarDecl(id, expr):Declaration &amp; mk_VarDecl(id, expr) = decl =&gt;&#10;          (not exists mk_ProcDec(nls, ph, expr):Declaration &amp; mk_ProcDec(nls, ph, expr) = decl =&gt;&#10;            (exists mk_TypeDec(id, type):Declaration &amp; mk_TypeDec(id, type) = decl =&gt;&#10;            let mk_TypeDec(id, type) = decl in&#10;              is_(decl, TypeDec))))))))&#10;"/>
<po column="3" line="2063" message="eval_Declaration: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2063:3&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (exists mk_ImportDecl(id, tp):Declaration &amp; decl = mk_ImportDecl(id, tp)) or (exists mk_ExportDecl(id, expr):Declaration &amp; decl = mk_ExportDecl(id, expr)) or (exists mk_LetDecl(l):Declaration &amp; decl = mk_LetDecl(l)) or (exists mk_VarDecl(id, expr):Declaration &amp; decl = mk_VarDecl(id, expr)) or (exists mk_ProcDec(nls, ph, expr):Declaration &amp; decl = mk_ProcDec(nls, ph, expr)) or (exists mk_TypeDec(id, type):Declaration &amp; decl = mk_TypeDec(id, type)))&#10;" number="626" object="" resource="newspeakSL" toString="eval_Declaration: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2063:3&#10;(forall decl:Declaration, env_st:EnvState &amp;&#10;  (exists mk_ImportDecl(id, tp):Declaration &amp; decl = mk_ImportDecl(id, tp)) or (exists mk_ExportDecl(id, expr):Declaration &amp; decl = mk_ExportDecl(id, expr)) or (exists mk_LetDecl(l):Declaration &amp; decl = mk_LetDecl(l)) or (exists mk_VarDecl(id, expr):Declaration &amp; decl = mk_VarDecl(id, expr)) or (exists mk_ProcDec(nls, ph, expr):Declaration &amp; decl = mk_ProcDec(nls, ph, expr)) or (exists mk_TypeDec(id, type):Declaration &amp; decl = mk_TypeDec(id, type)))&#10;"/>
<po column="14" line="2074" message="eval_ImportDecl, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2074:14&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Type(tp), e))&#10;" number="627" object="" resource="newspeakSL" toString="eval_ImportDecl, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2074:14&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Type(tp), e))&#10;"/>
<po column="25" line="2077" message="eval_ImportDecl, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2077:25&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      ((is_(type, Float)) or&#10;      (is_(type, IntType)) or&#10;      (is_(type, StructureType)) or&#10;      (is_(type, TrType)) or&#10;      (is_(type, UnionType)) or&#10;      (is_(type, VectorType)) or&#10;      (is_(type, VoidType))))))&#10;" number="628" object="" resource="newspeakSL" toString="eval_ImportDecl, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2077:25&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      ((is_(type, Float)) or&#10;      (is_(type, IntType)) or&#10;      (is_(type, StructureType)) or&#10;      (is_(type, TrType)) or&#10;      (is_(type, UnionType)) or&#10;      (is_(type, VectorType)) or&#10;      (is_(type, VoidType))))))&#10;"/>
<po column="19" line="2079" message="eval_ImportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2079:19&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id)(l), n_e)))))&#10;" number="629" object="" resource="newspeakSL" toString="eval_ImportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2079:19&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id)(l), n_e)))))&#10;"/>
<po column="19" line="2079" message="eval_ImportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2079:19&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id), l)))))&#10;" number="630" object="" resource="newspeakSL" toString="eval_ImportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2079:19&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id), l)))))&#10;"/>
<po column="18" line="2080" message="eval_ImportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2080:18&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l)(mk_Storable_value(val)), (ps.sto))))))&#10;" number="631" object="" resource="newspeakSL" toString="eval_ImportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2080:18&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l)(mk_Storable_value(val)), (ps.sto))))))&#10;"/>
<po column="18" line="2080" message="eval_ImportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2080:18&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l), mk_Storable_value(val))))))&#10;" number="632" object="" resource="newspeakSL" toString="eval_ImportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2080:18&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l), mk_Storable_value(val))))))&#10;"/>
<po column="46" line="2080" message="eval_ImportDecl, sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2080:46&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        (is_(val, Int)) or&#10;        (is_(val, Real)) or&#10;        (is_(val, Structure)) or&#10;        (is_(val, Tr)) or&#10;        (is_(val, Union)) or&#10;        (is_(val, Vector)) or&#10;        (is_(val, Void))))))&#10;" number="633" object="" resource="newspeakSL" toString="eval_ImportDecl, sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2080:46&#10;(forall mk_ImportDecl(id, tp):ImportDecl, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      (let val:Expressible_value = choose(type), mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        (is_(val, Int)) or&#10;        (is_(val, Real)) or&#10;        (is_(val, Structure)) or&#10;        (is_(val, Tr)) or&#10;        (is_(val, Union)) or&#10;        (is_(val, Vector)) or&#10;        (is_(val, Void))))))&#10;"/>
<po column="11" line="2086" message="eval_ExportDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2086:11&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="634" object="" resource="newspeakSL" toString="eval_ExportDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2086:11&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2086" message="eval_ExportDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2086:11&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="635" object="" resource="newspeakSL" toString="eval_ExportDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2086:11&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="19" line="2090" message="eval_ExportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2090:19&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id)(l), n_e)))))&#10;" number="636" object="" resource="newspeakSL" toString="eval_ExportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2090:19&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id)(l), n_e)))))&#10;"/>
<po column="19" line="2090" message="eval_ExportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2090:19&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id), l)))))&#10;" number="637" object="" resource="newspeakSL" toString="eval_ExportDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2090:19&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id), l)))))&#10;"/>
<po column="18" line="2091" message="eval_ExportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2091:18&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l)(mk_Storable_value((x.val))), (ps.sto))))))&#10;" number="638" object="" resource="newspeakSL" toString="eval_ExportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2091:18&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l)(mk_Storable_value((x.val))), (ps.sto))))))&#10;"/>
<po column="18" line="2091" message="eval_ExportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2091:18&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l), mk_Storable_value((x.val)))))))&#10;" number="639" object="" resource="newspeakSL" toString="eval_ExportDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2091:18&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l), mk_Storable_value((x.val)))))))&#10;"/>
<po column="46" line="2091" message="eval_ExportDecl, sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2091:46&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        (is_((x.val), Int)) or&#10;        (is_((x.val), Real)) or&#10;        (is_((x.val), Structure)) or&#10;        (is_((x.val), Tr)) or&#10;        (is_((x.val), Union)) or&#10;        (is_((x.val), Vector)) or&#10;        (is_((x.val), Void))))))&#10;" number="640" object="" resource="newspeakSL" toString="eval_ExportDecl, sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2091:46&#10;(forall mk_ExportDecl(id, expr):ExportDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        (is_((x.val), Int)) or&#10;        (is_((x.val), Real)) or&#10;        (is_((x.val), Structure)) or&#10;        (is_((x.val), Tr)) or&#10;        (is_((x.val), Union)) or&#10;        (is_((x.val), Vector)) or&#10;        (is_((x.val), Void))))))&#10;"/>
<po column="8" line="2098" message="eval_LetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2098:8&#10;(forall mk_LetDecl(decl):LetDecl, es:EnvState &amp;&#10;  (is_(decl, SimpleLetDecl) =&gt;&#10;    pre_(eval_SimpleLetDecl(decl), es)))&#10;" number="641" object="" resource="newspeakSL" toString="eval_LetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2098:8&#10;(forall mk_LetDecl(decl):LetDecl, es:EnvState &amp;&#10;  (is_(decl, SimpleLetDecl) =&gt;&#10;    pre_(eval_SimpleLetDecl(decl), es)))&#10;"/>
<po column="8" line="2099" message="eval_LetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2099:8&#10;(forall mk_LetDecl(decl):LetDecl, es:EnvState &amp;&#10;  (not is_(decl, SimpleLetDecl) =&gt;&#10;    pre_(eval_StrucLetDecl(decl), es)))&#10;" number="642" object="" resource="newspeakSL" toString="eval_LetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2099:8&#10;(forall mk_LetDecl(decl):LetDecl, es:EnvState &amp;&#10;  (not is_(decl, SimpleLetDecl) =&gt;&#10;    pre_(eval_StrucLetDecl(decl), es)))&#10;"/>
<po column="26" line="2099" message="eval_LetDecl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2099:26&#10;(forall mk_LetDecl(decl):LetDecl, es:EnvState &amp;&#10;  (not is_(decl, SimpleLetDecl) =&gt;&#10;    is_(decl, StrucLetDecl)))&#10;" number="643" object="" resource="newspeakSL" toString="eval_LetDecl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2099:26&#10;(forall mk_LetDecl(decl):LetDecl, es:EnvState &amp;&#10;  (not is_(decl, SimpleLetDecl) =&gt;&#10;    is_(decl, StrucLetDecl)))&#10;"/>
<po column="11" line="2103" message="eval_SimpleLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2103:11&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="644" object="" resource="newspeakSL" toString="eval_SimpleLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2103:11&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2103" message="eval_SimpleLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2103:11&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="645" object="" resource="newspeakSL" toString="eval_SimpleLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2103:11&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="13" line="2106" message="eval_SimpleLetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2106:13&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id)((x.val)), e))))&#10;" number="646" object="" resource="newspeakSL" toString="eval_SimpleLetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2106:13&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id)((x.val)), e))))&#10;"/>
<po column="13" line="2106" message="eval_SimpleLetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2106:13&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id), (x.val)))))&#10;" number="647" object="" resource="newspeakSL" toString="eval_SimpleLetDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2106:13&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id), (x.val)))))&#10;"/>
<po column="28" line="2106" message="eval_SimpleLetDecl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2106:28&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      ((is_((x.val), Errvalue))))))&#10;" number="648" object="" resource="newspeakSL" toString="eval_SimpleLetDecl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2106:28&#10;(forall mk_SimpleLetDecl(id, expr):SimpleLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      ((is_((x.val), Errvalue))))))&#10;"/>
<po column="11" line="2111" message="eval_StrucLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2111:11&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="649" object="" resource="newspeakSL" toString="eval_StrucLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2111:11&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2111" message="eval_StrucLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2111:11&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="650" object="" resource="newspeakSL" toString="eval_StrucLetDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2111:11&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="28" line="2116" message="eval_StrucLetDecl, id_vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2116:28&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          i in set inds ids)))))&#10;" number="651" object="" resource="newspeakSL" toString="eval_StrucLetDecl, id_vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2116:28&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          i in set inds ids)))))&#10;"/>
<po column="40" line="2117" message="eval_StrucLetDecl, id_vals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2117:40&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          ((is_(((x.val).val)(i), bool)) or&#10;          (is_(((x.val).val)(i), real) and is_real(((x.val).val)(i)))))))))&#10;" number="652" object="" resource="newspeakSL" toString="eval_StrucLetDecl, id_vals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2117:40&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          ((is_(((x.val).val)(i), bool)) or&#10;          (is_(((x.val).val)(i), real) and is_real(((x.val).val)(i)))))))))&#10;"/>
<po column="40" line="2117" message="eval_StrucLetDecl, id_vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2117:40&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          i in set inds ((x.val).val))))))&#10;" number="653" object="" resource="newspeakSL" toString="eval_StrucLetDecl, id_vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2117:40&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          i in set inds ((x.val).val))))))&#10;"/>
<po column="53" line="2117" message="eval_StrucLetDecl, id_vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2117:53&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          i in set inds (((x.val).type).tps))))))&#10;" number="654" object="" resource="newspeakSL" toString="eval_StrucLetDecl, id_vals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2117:53&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (forall i in set (inds ids) &amp;&#10;          i in set inds (((x.val).type).tps))))))&#10;"/>
<po column="22" line="2119" message="eval_StrucLetDecl, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2119:22&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (let id_vals:seq of ((Id * Expressible_value)) = [mk_(ids(i), construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ids)] in&#10;          pre_(multi_update_env(id_vals), e))))))&#10;" number="655" object="" resource="newspeakSL" toString="eval_StrucLetDecl, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2119:22&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (let id_vals:seq of ((Id * Expressible_value)) = [mk_(ids(i), construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ids)] in&#10;          pre_(multi_update_env(id_vals), e))))))&#10;"/>
<po column="39" line="2119" message="eval_StrucLetDecl, new_env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2119:39&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (let id_vals:seq of ((Id * Expressible_value)) = [mk_(ids(i), construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ids)] in&#10;          is_(id_vals, seq of ((Id * Denotable_value))))))))&#10;" number="656" object="" resource="newspeakSL" toString="eval_StrucLetDecl, new_env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2119:39&#10;(forall mk_StrucLetDecl(ids, expr):StrucLetDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not (not is_((x.val), Structure)) =&gt;&#10;      (not ((len ids) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;        (let id_vals:seq of ((Id * Expressible_value)) = [mk_(ids(i), construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ids)] in&#10;          is_(id_vals, seq of ((Id * Denotable_value))))))))&#10;"/>
<po column="11" line="2124" message="eval_VarDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2124:11&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="657" object="" resource="newspeakSL" toString="eval_VarDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2124:11&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2124" message="eval_VarDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2124:11&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="658" object="" resource="newspeakSL" toString="eval_VarDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2124:11&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="19" line="2128" message="eval_VarDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2128:19&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id)(l), n_e)))))&#10;" number="659" object="" resource="newspeakSL" toString="eval_VarDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2128:19&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id)(l), n_e)))))&#10;"/>
<po column="19" line="2128" message="eval_VarDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2128:19&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id), l)))))&#10;" number="660" object="" resource="newspeakSL" toString="eval_VarDecl, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2128:19&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update_env(id), l)))))&#10;"/>
<po column="18" line="2129" message="eval_VarDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2129:18&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l)(mk_Storable_value((x.val))), (ps.sto))))))&#10;" number="661" object="" resource="newspeakSL" toString="eval_VarDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2129:18&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l)(mk_Storable_value((x.val))), (ps.sto))))))&#10;"/>
<po column="18" line="2129" message="eval_VarDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2129:18&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l), mk_Storable_value((x.val)))))))&#10;" number="662" object="" resource="newspeakSL" toString="eval_VarDecl, sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2129:18&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        pre_(update(l), mk_Storable_value((x.val)))))))&#10;"/>
<po column="46" line="2129" message="eval_VarDecl, sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2129:46&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        (is_((x.val), Int)) or&#10;        (is_((x.val), Real)) or&#10;        (is_((x.val), Structure)) or&#10;        (is_((x.val), Tr)) or&#10;        (is_((x.val), Union)) or&#10;        (is_((x.val), Vector)) or&#10;        (is_((x.val), Void))))))&#10;" number="663" object="" resource="newspeakSL" toString="eval_VarDecl, sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2129:46&#10;(forall mk_VarDecl(id, expr):VarDecl, mk_(e, ps):EnvState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let mk_(l, n_e):(Location * Env) = reserve_locn(e) in&#10;        (is_((x.val), Int)) or&#10;        (is_((x.val), Real)) or&#10;        (is_((x.val), Structure)) or&#10;        (is_((x.val), Tr)) or&#10;        (is_((x.val), Union)) or&#10;        (is_((x.val), Vector)) or&#10;        (is_((x.val), Void))))))&#10;"/>
<po column="16" line="2135" message="eval_ProcDec, env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2135:16&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_NonLocals(nls)(e), ps))&#10;" number="664" object="" resource="newspeakSL" toString="eval_ProcDec, env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2135:16&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_NonLocals(nls)(e), ps))&#10;"/>
<po column="16" line="2135" message="eval_ProcDec, env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2135:16&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_NonLocals(nls), e))&#10;" number="665" object="" resource="newspeakSL" toString="eval_ProcDec, env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2135:16&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_NonLocals(nls), e))&#10;"/>
<po column="31" line="2135" message="eval_ProcDec, env_st: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2135:31&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  is_(nls, NonLocals))&#10;" number="666" object="" resource="newspeakSL" toString="eval_ProcDec, env_st: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2135:31&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  is_(nls, NonLocals))&#10;"/>
<po column="12" line="2139" message="eval_ProcDec, ne, ns: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2139:12&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      exists mk_(ne, ns):EnvState &amp; mk_(ne, ns) = env_st)))&#10;" number="667" object="" resource="newspeakSL" toString="eval_ProcDec, ne, ns: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2139:12&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      exists mk_(ne, ns):EnvState &amp; mk_(ne, ns) = env_st)))&#10;"/>
<po column="25" line="2139" message="eval_ProcDec, ne, ns: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2139:25&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      is_(env_st, (Env * PState)))))&#10;" number="668" object="" resource="newspeakSL" toString="eval_ProcDec, ne, ns: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2139:25&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      is_(env_st, (Env * PState)))))&#10;"/>
<po column="18" line="2140" message="eval_ProcDec, fls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2140:18&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        pre_(eval_Formals(formals), e)))))&#10;" number="669" object="" resource="newspeakSL" toString="eval_ProcDec, fls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2140:18&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        pre_(eval_Formals(formals), e)))))&#10;"/>
<po column="33" line="2143" message="eval_ProcDec, pr, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2143:33&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            pre_(instantiate_formals(fls)(a), ne)))))))&#10;" number="670" object="" resource="newspeakSL" toString="eval_ProcDec, pr, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2143:33&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            pre_(instantiate_formals(fls)(a), ne)))))))&#10;"/>
<po column="33" line="2143" message="eval_ProcDec, pr, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2143:33&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            pre_(instantiate_formals(fls), a)))))))&#10;" number="671" object="" resource="newspeakSL" toString="eval_ProcDec, pr, nn_e: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2143:33&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            pre_(instantiate_formals(fls), a)))))))&#10;"/>
<po column="37" line="2147" message="eval_ProcDec, pr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2147:37&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            (let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in&#10;              (forall nps:(unresolved DEFAULT`PState) &amp;&#10;                (not (nn_e = &lt;err&gt;) =&gt;&#10;                  pre_(eval_Expression(expr)(nn_e), nps))))))))))&#10;" number="672" object="" resource="newspeakSL" toString="eval_ProcDec, pr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2147:37&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            (let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in&#10;              (forall nps:(unresolved DEFAULT`PState) &amp;&#10;                (not (nn_e = &lt;err&gt;) =&gt;&#10;                  pre_(eval_Expression(expr)(nn_e), nps))))))))))&#10;"/>
<po column="37" line="2147" message="eval_ProcDec, pr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2147:37&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            (let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in&#10;              (forall nps:(unresolved DEFAULT`PState) &amp;&#10;                (not (nn_e = &lt;err&gt;) =&gt;&#10;                  pre_(eval_Expression(expr), nn_e))))))))))&#10;" number="673" object="" resource="newspeakSL" toString="eval_ProcDec, pr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2147:37&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            (let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in&#10;              (forall nps:(unresolved DEFAULT`PState) &amp;&#10;                (not (nn_e = &lt;err&gt;) =&gt;&#10;                  pre_(eval_Expression(expr), nn_e))))))))))&#10;"/>
<po column="59" line="2147" message="eval_ProcDec, pr, x: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2147:59&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            (let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in&#10;              (forall nps:(unresolved DEFAULT`PState) &amp;&#10;                (not (nn_e = &lt;err&gt;) =&gt;&#10;                  (is_(nn_e, (map (Id) to (Denotable_value) * Location))))))))))))&#10;" number="674" object="" resource="newspeakSL" toString="eval_ProcDec, pr, x: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2147:59&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (forall a:(unresolved DEFAULT`Param) &amp;&#10;            (let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in&#10;              (forall nps:(unresolved DEFAULT`PState) &amp;&#10;                (not (nn_e = &lt;err&gt;) =&gt;&#10;                  (is_(nn_e, (map (Id) to (Denotable_value) * Location))))))))))))&#10;"/>
<po column="12" line="2154" message="eval_ProcDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2154:12&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (let pr:Proc = mk_Proc((lambda [a:(unresolved DEFAULT`Param)] &amp; let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in (lambda [nps:(unresolved DEFAULT`PState)] &amp; (if (nn_e = &lt;err&gt;)&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else let x:EST_value = eval_Expression(expr)(nn_e)(nps) in (if (((x.val) &lt;&gt; &lt;err&gt;) and ((is_((x.val), Void) and (((x.val).type) = mk_VoidType({Phi}))) or ((not is_((x.val), Void)) and ((((x.val).type).fl) = {Phi}))))&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else x))))) in&#10;            pre_(update_env(id)(pr), e)))))))&#10;" number="675" object="" resource="newspeakSL" toString="eval_ProcDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2154:12&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (let pr:Proc = mk_Proc((lambda [a:(unresolved DEFAULT`Param)] &amp; let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in (lambda [nps:(unresolved DEFAULT`PState)] &amp; (if (nn_e = &lt;err&gt;)&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else let x:EST_value = eval_Expression(expr)(nn_e)(nps) in (if (((x.val) &lt;&gt; &lt;err&gt;) and ((is_((x.val), Void) and (((x.val).type) = mk_VoidType({Phi}))) or ((not is_((x.val), Void)) and ((((x.val).type).fl) = {Phi}))))&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else x))))) in&#10;            pre_(update_env(id)(pr), e)))))))&#10;"/>
<po column="12" line="2154" message="eval_ProcDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2154:12&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (let pr:Proc = mk_Proc((lambda [a:(unresolved DEFAULT`Param)] &amp; let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in (lambda [nps:(unresolved DEFAULT`PState)] &amp; (if (nn_e = &lt;err&gt;)&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else let x:EST_value = eval_Expression(expr)(nn_e)(nps) in (if (((x.val) &lt;&gt; &lt;err&gt;) and ((is_((x.val), Void) and (((x.val).type) = mk_VoidType({Phi}))) or ((not is_((x.val), Void)) and ((((x.val).type).fl) = {Phi}))))&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else x))))) in&#10;            pre_(update_env(id), pr)))))))&#10;" number="676" object="" resource="newspeakSL" toString="eval_ProcDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2154:12&#10;(forall mk_ProcDec(nls, ph, expr):ProcDec, mk_(e, ps):EnvState &amp;&#10;  (let env_st:EnvState = eval_NonLocals(nls)(e)(ps) in&#10;    (not (env_st = &lt;err&gt;) =&gt;&#10;      (let mk_ProcHeading(id, formals):ProcHeading = ph, mk_(ne, ns):EnvState = env_st in&#10;        (let fls:seq of (Formal_elt) = eval_Formals(formals)(e) in&#10;          (let pr:Proc = mk_Proc((lambda [a:(unresolved DEFAULT`Param)] &amp; let nn_e:(Env | Errvalue) = instantiate_formals(fls)(a)(ne) in (lambda [nps:(unresolved DEFAULT`PState)] &amp; (if (nn_e = &lt;err&gt;)&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else let x:EST_value = eval_Expression(expr)(nn_e)(nps) in (if (((x.val) &lt;&gt; &lt;err&gt;) and ((is_((x.val), Void) and (((x.val).type) = mk_VoidType({Phi}))) or ((not is_((x.val), Void)) and ((((x.val).type).fl) = {Phi}))))&#10;          then mk_EST_value(&lt;err&gt;, (nps.sto), zerot)&#10;          else x))))) in&#10;            pre_(update_env(id), pr)))))))&#10;"/>
<po column="8" line="2161" message="eval_NonLocals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2161:8&#10;(forall mk_NonLocals(ids, decls):NonLocals, mk_(m, l):Env, ps:PState &amp;&#10;  (let ids_map:(map (?) to (?) | map (Id) to (Denotable_value)) = (if (ids = nil)&#10;  then {}&#10;  else ((elems ids) &lt;: m)) in&#10;    (not (decls = nil) =&gt;&#10;      pre_(eval_Decls(decls), mk_(mk_(ids_map, l), ps)))))&#10;" number="677" object="" resource="newspeakSL" toString="eval_NonLocals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2161:8&#10;(forall mk_NonLocals(ids, decls):NonLocals, mk_(m, l):Env, ps:PState &amp;&#10;  (let ids_map:(map (?) to (?) | map (Id) to (Denotable_value)) = (if (ids = nil)&#10;  then {}&#10;  else ((elems ids) &lt;: m)) in&#10;    (not (decls = nil) =&gt;&#10;      pre_(eval_Decls(decls), mk_(mk_(ids_map, l), ps)))))&#10;"/>
<po column="19" line="2161" message="eval_NonLocals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2161:19&#10;(forall mk_NonLocals(ids, decls):NonLocals, mk_(m, l):Env, ps:PState &amp;&#10;  (let ids_map:(map (?) to (?) | map (Id) to (Denotable_value)) = (if (ids = nil)&#10;  then {}&#10;  else ((elems ids) &lt;: m)) in&#10;    (not (decls = nil) =&gt;&#10;      is_(decls, seq of (Declaration)))))&#10;" number="678" object="" resource="newspeakSL" toString="eval_NonLocals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2161:19&#10;(forall mk_NonLocals(ids, decls):NonLocals, mk_(m, l):Env, ps:PState &amp;&#10;  (let ids_map:(map (?) to (?) | map (Id) to (Denotable_value)) = (if (ids = nil)&#10;  then {}&#10;  else ((elems ids) &lt;: m)) in&#10;    (not (decls = nil) =&gt;&#10;      is_(decls, seq of (Declaration)))))&#10;"/>
<po column="4" line="2165" message="eval_Formals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2165:4&#10;(forall fls:seq of (Formal), e:Env &amp;&#10;  (forall i in set (inds fls) &amp;&#10;    pre_(eval_Formal(fls(i)), e)))&#10;" number="679" object="" resource="newspeakSL" toString="eval_Formals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2165:4&#10;(forall fls:seq of (Formal), e:Env &amp;&#10;  (forall i in set (inds fls) &amp;&#10;    pre_(eval_Formal(fls(i)), e)))&#10;"/>
<po column="16" line="2165" message="eval_Formals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2165:16&#10;(forall fls:seq of (Formal), e:Env &amp;&#10;  (forall i in set (inds fls) &amp;&#10;    i in set inds fls))&#10;" number="680" object="" resource="newspeakSL" toString="eval_Formals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2165:16&#10;(forall fls:seq of (Formal), e:Env &amp;&#10;  (forall i in set (inds fls) &amp;&#10;    i in set inds fls))&#10;"/>
<po column="15" line="2169" message="eval_Formal, n_rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2169:15&#10;(forall mk_Formal(id, rep, fl):Formal, e:Env &amp;&#10;  pre_(eval_Representation(rep), e))&#10;" number="681" object="" resource="newspeakSL" toString="eval_Formal, n_rep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2169:15&#10;(forall mk_Formal(id, rep, fl):Formal, e:Env &amp;&#10;  pre_(eval_Representation(rep), e))&#10;"/>
<po column="20" line="2171" message="eval_Formal: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2171:20&#10;(forall mk_Formal(id, rep, fl):Formal, e:Env &amp;&#10;  (let n_rep:(Errvalue | Expressible_type) = eval_Representation(rep)(e), n_fl:Flavdom = eval_Flavouring(fl) in&#10;    ((is_(n_rep, Float)) or&#10;    (is_(n_rep, IntType)) or&#10;    (is_(n_rep, StructureType)) or&#10;    (is_(n_rep, TrType)) or&#10;    (is_(n_rep, UnionType)) or&#10;    (is_(n_rep, VectorType)) or&#10;    (is_(n_rep, VoidType)))))&#10;" number="682" object="" resource="newspeakSL" toString="eval_Formal: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2171:20&#10;(forall mk_Formal(id, rep, fl):Formal, e:Env &amp;&#10;  (let n_rep:(Errvalue | Expressible_type) = eval_Representation(rep)(e), n_fl:Flavdom = eval_Flavouring(fl) in&#10;    ((is_(n_rep, Float)) or&#10;    (is_(n_rep, IntType)) or&#10;    (is_(n_rep, StructureType)) or&#10;    (is_(n_rep, TrType)) or&#10;    (is_(n_rep, UnionType)) or&#10;    (is_(n_rep, VectorType)) or&#10;    (is_(n_rep, VoidType)))))&#10;"/>
<po column="27" line="2176" message="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2176:27&#10;(forall rep:Representation, e:Env &amp;&#10;  (exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;  let mk_PrimitiveRep(p) = rep in&#10;    pre_(eval_PrimitiveRep(rep), e)))&#10;" number="683" object="" resource="newspeakSL" toString="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2176:27&#10;(forall rep:Representation, e:Env &amp;&#10;  (exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;  let mk_PrimitiveRep(p) = rep in&#10;    pre_(eval_PrimitiveRep(rep), e)))&#10;"/>
<po column="45" line="2176" message="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2176:45&#10;(forall rep:Representation, e:Env &amp;&#10;  (exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;  let mk_PrimitiveRep(p) = rep in&#10;    is_(rep, PrimitiveRep)))&#10;" number="684" object="" resource="newspeakSL" toString="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2176:45&#10;(forall rep:Representation, e:Env &amp;&#10;  (exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;  let mk_PrimitiveRep(p) = rep in&#10;    is_(rep, PrimitiveRep)))&#10;"/>
<po column="24" line="2177" message="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2177:24&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;    let mk_StrucRep(rs) = rep in&#10;      pre_(eval_StrucRep(rep), e))))&#10;" number="685" object="" resource="newspeakSL" toString="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2177:24&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;    let mk_StrucRep(rs) = rep in&#10;      pre_(eval_StrucRep(rep), e))))&#10;"/>
<po column="38" line="2177" message="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2177:38&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;    let mk_StrucRep(rs) = rep in&#10;      is_(rep, StrucRep))))&#10;" number="686" object="" resource="newspeakSL" toString="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2177:38&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;    let mk_StrucRep(rs) = rep in&#10;      is_(rep, StrucRep))))&#10;"/>
<po column="27" line="2178" message="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2178:27&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;      let mk_VecRep(range, r) = rep in&#10;        pre_(eval_VecRep(rep), e)))))&#10;" number="687" object="" resource="newspeakSL" toString="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2178:27&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;      let mk_VecRep(range, r) = rep in&#10;        pre_(eval_VecRep(rep), e)))))&#10;"/>
<po column="39" line="2178" message="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2178:39&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;      let mk_VecRep(range, r) = rep in&#10;        is_(rep, VecRep)))))&#10;" number="688" object="" resource="newspeakSL" toString="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2178:39&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;      let mk_VecRep(range, r) = rep in&#10;        is_(rep, VecRep)))))&#10;"/>
<po column="24" line="2179" message="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2179:24&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;        let mk_UnionRep(rs) = rep in&#10;          pre_(eval_UnionRep(rep), e))))))&#10;" number="689" object="" resource="newspeakSL" toString="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2179:24&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;        let mk_UnionRep(rs) = rep in&#10;          pre_(eval_UnionRep(rep), e))))))&#10;"/>
<po column="38" line="2179" message="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2179:38&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;        let mk_UnionRep(rs) = rep in&#10;          is_(rep, UnionRep))))))&#10;" number="690" object="" resource="newspeakSL" toString="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2179:38&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;        let mk_UnionRep(rs) = rep in&#10;          is_(rep, UnionRep))))))&#10;"/>
<po column="29" line="2180" message="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2180:29&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;          let mk_FlavouredRep(f, r) = rep in&#10;            pre_(eval_FlavouredRep(rep), e)))))))&#10;" number="691" object="" resource="newspeakSL" toString="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2180:29&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;          let mk_FlavouredRep(f, r) = rep in&#10;            pre_(eval_FlavouredRep(rep), e)))))))&#10;"/>
<po column="47" line="2180" message="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2180:47&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;          let mk_FlavouredRep(f, r) = rep in&#10;            is_(rep, FlavouredRep)))))))&#10;" number="692" object="" resource="newspeakSL" toString="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2180:47&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;          let mk_FlavouredRep(f, r) = rep in&#10;            is_(rep, FlavouredRep)))))))&#10;"/>
<po column="19" line="2181" message="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2181:19&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (not exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;            (exists mk_Type(t):Representation &amp; mk_Type(t) = rep =&gt;&#10;            let mk_Type(t) = rep in&#10;              pre_(eval_Type(rep), e))))))))&#10;" number="693" object="" resource="newspeakSL" toString="eval_Representation: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2181:19&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (not exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;            (exists mk_Type(t):Representation &amp; mk_Type(t) = rep =&gt;&#10;            let mk_Type(t) = rep in&#10;              pre_(eval_Type(rep), e))))))))&#10;"/>
<po column="29" line="2181" message="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2181:29&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (not exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;            (exists mk_Type(t):Representation &amp; mk_Type(t) = rep =&gt;&#10;            let mk_Type(t) = rep in&#10;              is_(rep, Type))))))))&#10;" number="694" object="" resource="newspeakSL" toString="eval_Representation: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2181:29&#10;(forall rep:Representation, e:Env &amp;&#10;  (not exists mk_PrimitiveRep(p):Representation &amp; mk_PrimitiveRep(p) = rep =&gt;&#10;    (not exists mk_StrucRep(rs):Representation &amp; mk_StrucRep(rs) = rep =&gt;&#10;      (not exists mk_VecRep(range, r):Representation &amp; mk_VecRep(range, r) = rep =&gt;&#10;        (not exists mk_UnionRep(rs):Representation &amp; mk_UnionRep(rs) = rep =&gt;&#10;          (not exists mk_FlavouredRep(f, r):Representation &amp; mk_FlavouredRep(f, r) = rep =&gt;&#10;            (exists mk_Type(t):Representation &amp; mk_Type(t) = rep =&gt;&#10;            let mk_Type(t) = rep in&#10;              is_(rep, Type))))))))&#10;"/>
<po column="3" line="2175" message="eval_Representation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2175:3&#10;(forall rep:Representation, e:Env &amp;&#10;  (exists mk_PrimitiveRep(p):Representation &amp; rep = mk_PrimitiveRep(p)) or (exists mk_StrucRep(rs):Representation &amp; rep = mk_StrucRep(rs)) or (exists mk_VecRep(range, r):Representation &amp; rep = mk_VecRep(range, r)) or (exists mk_UnionRep(rs):Representation &amp; rep = mk_UnionRep(rs)) or (exists mk_FlavouredRep(f, r):Representation &amp; rep = mk_FlavouredRep(f, r)) or (exists mk_Type(t):Representation &amp; rep = mk_Type(t)))&#10;" number="695" object="" resource="newspeakSL" toString="eval_Representation: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2175:3&#10;(forall rep:Representation, e:Env &amp;&#10;  (exists mk_PrimitiveRep(p):Representation &amp; rep = mk_PrimitiveRep(p)) or (exists mk_StrucRep(rs):Representation &amp; rep = mk_StrucRep(rs)) or (exists mk_VecRep(range, r):Representation &amp; rep = mk_VecRep(range, r)) or (exists mk_UnionRep(rs):Representation &amp; rep = mk_UnionRep(rs)) or (exists mk_FlavouredRep(f, r):Representation &amp; rep = mk_FlavouredRep(f, r)) or (exists mk_Type(t):Representation &amp; rep = mk_Type(t)))&#10;"/>
<po column="8" line="2187" message="eval_PrimitiveRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2187:8&#10;(forall mk_PrimitiveRep(rep):PrimitiveRep, e:Env &amp;&#10;  (is_(rep, NumRep) =&gt;&#10;    pre_(eval_NumRep(rep), e)))&#10;" number="696" object="" resource="newspeakSL" toString="eval_PrimitiveRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2187:8&#10;(forall mk_PrimitiveRep(rep):PrimitiveRep, e:Env &amp;&#10;  (is_(rep, NumRep) =&gt;&#10;    pre_(eval_NumRep(rep), e)))&#10;"/>
<po column="8" line="2188" message="eval_PrimitiveRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2188:8&#10;(forall mk_PrimitiveRep(rep):PrimitiveRep, e:Env &amp;&#10;  (not is_(rep, NumRep) =&gt;&#10;    pre_(eval_FloatRep(rep), e)))&#10;" number="697" object="" resource="newspeakSL" toString="eval_PrimitiveRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2188:8&#10;(forall mk_PrimitiveRep(rep):PrimitiveRep, e:Env &amp;&#10;  (not is_(rep, NumRep) =&gt;&#10;    pre_(eval_FloatRep(rep), e)))&#10;"/>
<po column="22" line="2188" message="eval_PrimitiveRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2188:22&#10;(forall mk_PrimitiveRep(rep):PrimitiveRep, e:Env &amp;&#10;  (not is_(rep, NumRep) =&gt;&#10;    is_(rep, FloatRep)))&#10;" number="698" object="" resource="newspeakSL" toString="eval_PrimitiveRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2188:22&#10;(forall mk_PrimitiveRep(rep):PrimitiveRep, e:Env &amp;&#10;  (not is_(rep, NumRep) =&gt;&#10;    is_(rep, FloatRep)))&#10;"/>
<po column="22" line="2193" message="eval_NumRep, ranges: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2193:22&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (not (range = nil) =&gt;&#10;    (forall r in set (elems range) &amp;&#10;      pre_(eval_Range(r), e))))&#10;" number="699" object="" resource="newspeakSL" toString="eval_NumRep, ranges: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2193:22&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (not (range = nil) =&gt;&#10;    (forall r in set (elems range) &amp;&#10;      pre_(eval_Range(r), e))))&#10;"/>
<po column="30" line="2200" message="eval_NumRep, rngs: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2200:30&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (not (range = nil) =&gt;&#10;            (forall r in set (dunion ranges) &amp;&#10;              r in set dom {0 |-&gt; false, 1 |-&gt; true})))))))&#10;" number="700" object="" resource="newspeakSL" toString="eval_NumRep, rngs: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2200:30&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (not (range = nil) =&gt;&#10;            (forall r in set (dunion ranges) &amp;&#10;              r in set dom {0 |-&gt; false, 1 |-&gt; true})))))))&#10;"/>
<po column="56" line="2200" message="eval_NumRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2200:56&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (not (range = nil) =&gt;&#10;            (forall r in set (dunion ranges) &amp;&#10;              is_nat(r))))))))&#10;" number="701" object="" resource="newspeakSL" toString="eval_NumRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2200:56&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (not (range = nil) =&gt;&#10;            (forall r in set (dunion ranges) &amp;&#10;              is_nat(r))))))))&#10;"/>
<po column="30" line="2200" message="eval_NumRep, rngs: map sequence compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2200:30&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (not (range = nil) =&gt;&#10;            (forall r in set (dunion ranges) &amp;&#10;              forall m1, m2 in set {{0 |-&gt; false}, {1 |-&gt; true}} &amp;&#10;                forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;                  d3 = d4 =&gt; m1(d3) = m2(d4))))))))&#10;" number="702" object="" resource="newspeakSL" toString="eval_NumRep, rngs: map sequence compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2200:30&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      ((rep = &lt;bit&gt;) =&gt;&#10;        (not (exists [v in set (dunion ranges)] &amp; (v not in set {0, 1})) =&gt;&#10;          (not (range = nil) =&gt;&#10;            (forall r in set (dunion ranges) &amp;&#10;              forall m1, m2 in set {{0 |-&gt; false}, {1 |-&gt; true}} &amp;&#10;                forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;                  d3 = d4 =&gt; m1(d3) = m2(d4))))))))&#10;"/>
<po column="44" line="2204" message="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2204:44&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (forall v in set (dunion ranges) &amp;&#10;            is_real((abs v))))))))&#10;" number="703" object="" resource="newspeakSL" toString="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2204:44&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (forall v in set (dunion ranges) &amp;&#10;            is_real((abs v))))))))&#10;"/>
<po column="25" line="2208" message="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2208:25&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-bytemax, ... ,bytemax}&#10;            else (dunion ranges)) in&#10;              (is_(rep, &lt;byte&gt;)) or&#10;              (is_(rep, &lt;word&gt;)))))))))&#10;" number="704" object="" resource="newspeakSL" toString="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2208:25&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-bytemax, ... ,bytemax}&#10;            else (dunion ranges)) in&#10;              (is_(rep, &lt;byte&gt;)) or&#10;              (is_(rep, &lt;word&gt;)))))))))&#10;"/>
<po column="29" line="2208" message="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2208:29&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-bytemax, ... ,bytemax}&#10;            else (dunion ranges)) in&#10;              is_(rngs, set of (int)))))))))&#10;" number="705" object="" resource="newspeakSL" toString="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2208:29&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        ((rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; bytemax)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-bytemax, ... ,bytemax}&#10;            else (dunion ranges)) in&#10;              is_(rngs, set of (int)))))))))&#10;"/>
<po column="20" line="2213" message="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2213:20&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-maxint, ... ,maxint}&#10;            else (dunion ranges)) in&#10;              (is_(rep, &lt;byte&gt;)) or&#10;              (is_(rep, &lt;word&gt;)))))))))&#10;" number="706" object="" resource="newspeakSL" toString="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2213:20&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-maxint, ... ,maxint}&#10;            else (dunion ranges)) in&#10;              (is_(rep, &lt;byte&gt;)) or&#10;              (is_(rep, &lt;word&gt;)))))))))&#10;"/>
<po column="24" line="2213" message="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2213:24&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-maxint, ... ,maxint}&#10;            else (dunion ranges)) in&#10;              is_(rngs, set of (int)))))))))&#10;" number="707" object="" resource="newspeakSL" toString="eval_NumRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2213:24&#10;(forall mk_NumRep(rep, range):NumRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}) in&#10;    (not (&lt;err&gt; in set ranges) =&gt;&#10;      (not (rep = &lt;bit&gt;) =&gt;&#10;        (not (rep = &lt;byte&gt;) =&gt;&#10;          (not (exists [v in set (dunion ranges)] &amp; ((abs v) &gt; maxint)) =&gt;&#10;            (let rngs:(? | Errvalue | set of (int)) = (if (range = nil)&#10;            then {-maxint, ... ,maxint}&#10;            else (dunion ranges)) in&#10;              is_(rngs, set of (int)))))))))&#10;"/>
<po column="22" line="2218" message="eval_FloatRep, ranges: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2218:22&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (range = nil) =&gt;&#10;    (forall r in set (elems range) &amp;&#10;      pre_(eval_Range(r), e))))&#10;" number="708" object="" resource="newspeakSL" toString="eval_FloatRep, ranges: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2218:22&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (range = nil) =&gt;&#10;    (forall r in set (elems range) &amp;&#10;      pre_(eval_Range(r), e))))&#10;"/>
<po column="21" line="2222" message="eval_FloatRep, abse: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2222:21&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (abserr = nil) =&gt;&#10;    pre_(eval_CompileTimeValue(abserr), e)))&#10;" number="709" object="" resource="newspeakSL" toString="eval_FloatRep, abse: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2222:21&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (abserr = nil) =&gt;&#10;    pre_(eval_CompileTimeValue(abserr), e)))&#10;"/>
<po column="43" line="2222" message="eval_FloatRep, abse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2222:43&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (abserr = nil) =&gt;&#10;    is_(abserr, CompileTimeValue)))&#10;" number="710" object="" resource="newspeakSL" toString="eval_FloatRep, abse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2222:43&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (abserr = nil) =&gt;&#10;    is_(abserr, CompileTimeValue)))&#10;"/>
<po column="21" line="2226" message="eval_FloatRep, rele: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2226:21&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (relerr = nil) =&gt;&#10;    pre_(eval_CompileTimeValue(relerr), e)))&#10;" number="711" object="" resource="newspeakSL" toString="eval_FloatRep, rele: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2226:21&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (relerr = nil) =&gt;&#10;    pre_(eval_CompileTimeValue(relerr), e)))&#10;"/>
<po column="43" line="2226" message="eval_FloatRep, rele: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2226:43&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (relerr = nil) =&gt;&#10;    is_(relerr, CompileTimeValue)))&#10;" number="712" object="" resource="newspeakSL" toString="eval_FloatRep, rele: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2226:43&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (not (relerr = nil) =&gt;&#10;    is_(relerr, CompileTimeValue)))&#10;"/>
<po column="37" line="2231" message="eval_FloatRep, rngs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:37&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          pre_min(r))))))&#10;" number="713" object="" resource="newspeakSL" toString="eval_FloatRep, rngs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:37&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          pre_min(r))))))&#10;"/>
<po column="41" line="2231" message="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:41&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_(r, set of (real)))))))&#10;" number="714" object="" resource="newspeakSL" toString="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:41&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_(r, set of (real)))))))&#10;"/>
<po column="44" line="2231" message="eval_FloatRep, rngs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:44&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          pre_max(r))))))&#10;" number="715" object="" resource="newspeakSL" toString="eval_FloatRep, rngs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:44&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          pre_max(r))))))&#10;"/>
<po column="48" line="2231" message="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:48&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_(r, set of (real)))))))&#10;" number="716" object="" resource="newspeakSL" toString="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:48&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_(r, set of (real)))))))&#10;"/>
<po column="37" line="2231" message="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:37&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_int(min(r)))))))&#10;" number="717" object="" resource="newspeakSL" toString="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:37&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_int(min(r)))))))&#10;"/>
<po column="44" line="2231" message="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:44&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_int(max(r)))))))&#10;" number="718" object="" resource="newspeakSL" toString="eval_FloatRep, rngs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2231:44&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (not (range = nil) =&gt;&#10;        (forall r in set ranges &amp;&#10;          is_int(max(r)))))))&#10;"/>
<po column="23" line="2232" message="eval_FloatRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2232:23&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (let rngs:set of (Floatrng) = (if (range = nil)&#10;      then {mk_Floatrng(-(beta ** maxint), (beta ** maxint))}&#10;      else {mk_Floatrng(min(r), max(r)) | [r in set ranges]}) in&#10;        is_real(((abse.val).val))))))&#10;" number="719" object="" resource="newspeakSL" toString="eval_FloatRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2232:23&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (let rngs:set of (Floatrng) = (if (range = nil)&#10;      then {mk_Floatrng(-(beta ** maxint), (beta ** maxint))}&#10;      else {mk_Floatrng(min(r), max(r)) | [r in set ranges]}) in&#10;        is_real(((abse.val).val))))))&#10;"/>
<po column="36" line="2232" message="eval_FloatRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2232:36&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (let rngs:set of (Floatrng) = (if (range = nil)&#10;      then {mk_Floatrng(-(beta ** maxint), (beta ** maxint))}&#10;      else {mk_Floatrng(min(r), max(r)) | [r in set ranges]}) in&#10;        is_real(((rele.val).val))))))&#10;" number="720" object="" resource="newspeakSL" toString="eval_FloatRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2232:36&#10;(forall mk_FloatRep(range, abserr, relerr):FloatRep, e:Env &amp;&#10;  (let ranges:(set of ((Errvalue | set of (int))) | {}) = (if (range = nil)&#10;  then {}&#10;  else {eval_Range(r)(e) | [r in set (elems range)]}), abse:(EST_value | Real) = (if (abserr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(abserr)(e)), rele:(EST_value | Real) = (if (relerr = nil)&#10;  then mk_Real(maxint, mk_Float({mk_Floatrng(maxint, maxint)}, 0, 0, {}))&#10;  else eval_CompileTimeValue(relerr)(e)) in&#10;    (not ((not (is_((abse.val), Real) and is_((rele.val), Real))) or (&lt;err&gt; in set ranges)) =&gt;&#10;      (let rngs:set of (Floatrng) = (if (range = nil)&#10;      then {mk_Floatrng(-(beta ** maxint), (beta ** maxint))}&#10;      else {mk_Floatrng(min(r), max(r)) | [r in set ranges]}) in&#10;        is_real(((rele.val).val))))))&#10;"/>
<po column="15" line="2236" message="eval_StrucRep, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2236:15&#10;(forall mk_StrucRep(reps):StrucRep, e:Env &amp;&#10;  (forall i in set (inds reps) &amp;&#10;    pre_(eval_Representation(reps(i)), e)))&#10;" number="721" object="" resource="newspeakSL" toString="eval_StrucRep, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2236:15&#10;(forall mk_StrucRep(reps):StrucRep, e:Env &amp;&#10;  (forall i in set (inds reps) &amp;&#10;    pre_(eval_Representation(reps(i)), e)))&#10;"/>
<po column="35" line="2236" message="eval_StrucRep, tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2236:35&#10;(forall mk_StrucRep(reps):StrucRep, e:Env &amp;&#10;  (forall i in set (inds reps) &amp;&#10;    i in set inds reps))&#10;" number="722" object="" resource="newspeakSL" toString="eval_StrucRep, tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2236:35&#10;(forall mk_StrucRep(reps):StrucRep, e:Env &amp;&#10;  (forall i in set (inds reps) &amp;&#10;    i in set inds reps))&#10;"/>
<po column="25" line="2242" message="eval_StrucRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2242:25&#10;(forall mk_StrucRep(reps):StrucRep, e:Env &amp;&#10;  (let tps:seq of ((Errvalue | Expressible_type)) = [eval_Representation(reps(i))(e) | i in set (inds reps)] in&#10;    (not (exists [tp in set (elems tps)] &amp; (not (is_(tp, TrType) or (is_(tp, Float) or is_(tp, IntType))))) =&gt;&#10;      (not (exists [tp1, tp2 in set (elems tps)] &amp; fleq(tp1, tp2)) =&gt;&#10;        is_(tps, seq1 of (CompType))))))&#10;" number="723" object="" resource="newspeakSL" toString="eval_StrucRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2242:25&#10;(forall mk_StrucRep(reps):StrucRep, e:Env &amp;&#10;  (let tps:seq of ((Errvalue | Expressible_type)) = [eval_Representation(reps(i))(e) | i in set (inds reps)] in&#10;    (not (exists [tp in set (elems tps)] &amp; (not (is_(tp, TrType) or (is_(tp, Float) or is_(tp, IntType))))) =&gt;&#10;      (not (exists [tp1, tp2 in set (elems tps)] &amp; fleq(tp1, tp2)) =&gt;&#10;        is_(tps, seq1 of (CompType))))))&#10;"/>
<po column="16" line="2246" message="eval_VecRep, nrange: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2246:16&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  pre_(eval_Range(range), e))&#10;" number="724" object="" resource="newspeakSL" toString="eval_VecRep, nrange: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2246:16&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  pre_(eval_Range(range), e))&#10;"/>
<po column="14" line="2247" message="eval_VecRep, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2247:14&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  pre_(eval_Representation(rep), e))&#10;" number="725" object="" resource="newspeakSL" toString="eval_VecRep, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2247:14&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  pre_(eval_Representation(rep), e))&#10;"/>
<po column="22" line="2250" message="eval_VecRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:22&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      pre_min(nrange))))&#10;" number="726" object="" resource="newspeakSL" toString="eval_VecRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:22&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      pre_min(nrange))))&#10;"/>
<po column="26" line="2250" message="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:26&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_(nrange, set of (real)))))&#10;" number="727" object="" resource="newspeakSL" toString="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:26&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_(nrange, set of (real)))))&#10;"/>
<po column="34" line="2250" message="eval_VecRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:34&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      pre_max(nrange))))&#10;" number="728" object="" resource="newspeakSL" toString="eval_VecRep: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:34&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      pre_max(nrange))))&#10;"/>
<po column="38" line="2250" message="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:38&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_(nrange, set of (real)))))&#10;" number="729" object="" resource="newspeakSL" toString="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:38&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_(nrange, set of (real)))))&#10;"/>
<po column="22" line="2250" message="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:22&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_int(min(nrange)))))&#10;" number="730" object="" resource="newspeakSL" toString="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:22&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_int(min(nrange)))))&#10;"/>
<po column="34" line="2250" message="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:34&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_int(max(nrange)))))&#10;" number="731" object="" resource="newspeakSL" toString="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:34&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      is_int(max(nrange)))))&#10;"/>
<po column="46" line="2250" message="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:46&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      ((is_(type, Float)) or&#10;      (is_(type, IntType)) or&#10;      (is_(type, StructureType)) or&#10;      (is_(type, TrType)) or&#10;      (is_(type, UnionType)) or&#10;      (is_(type, VectorType)) or&#10;      (is_(type, VoidType))))))&#10;" number="732" object="" resource="newspeakSL" toString="eval_VecRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2250:46&#10;(forall mk_VecRep(range, rep):VecRep, e:Env &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e), type:(Errvalue | Expressible_type) = eval_Representation(rep)(e) in&#10;    (not ((type = &lt;err&gt;) or (nrange = &lt;err&gt;)) =&gt;&#10;      ((is_(type, Float)) or&#10;      (is_(type, IntType)) or&#10;      (is_(type, StructureType)) or&#10;      (is_(type, TrType)) or&#10;      (is_(type, UnionType)) or&#10;      (is_(type, VectorType)) or&#10;      (is_(type, VoidType))))))&#10;"/>
<po column="14" line="2254" message="eval_UnionRep, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2254:14&#10;(forall mk_UnionRep(reps):UnionRep, e:Env &amp;&#10;  (forall rep in set (elems reps) &amp;&#10;    pre_(eval_Representation(rep), e)))&#10;" number="733" object="" resource="newspeakSL" toString="eval_UnionRep, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2254:14&#10;(forall mk_UnionRep(reps):UnionRep, e:Env &amp;&#10;  (forall rep in set (elems reps) &amp;&#10;    pre_(eval_Representation(rep), e)))&#10;"/>
<po column="21" line="2260" message="eval_UnionRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2260:21&#10;(forall mk_UnionRep(reps):UnionRep, e:Env &amp;&#10;  (let tps:set of ((Errvalue | Expressible_type)) = {eval_Representation(rep)(e) | [rep in set (elems reps)]} in&#10;    (not (exists [tp in set tps] &amp; (not (is_(tp, IntType) or (is_(tp, Float) or (is_(tp, TrType) or is_(tp, VoidType)))))) =&gt;&#10;      (not (exists [tp1, tp2 in set tps] &amp; fleq(tp1, tp2)) =&gt;&#10;        is_(tps, set of ((Float | IntType | TrType | VoidType)))))))&#10;" number="734" object="" resource="newspeakSL" toString="eval_UnionRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2260:21&#10;(forall mk_UnionRep(reps):UnionRep, e:Env &amp;&#10;  (let tps:set of ((Errvalue | Expressible_type)) = {eval_Representation(rep)(e) | [rep in set (elems reps)]} in&#10;    (not (exists [tp in set tps] &amp; (not (is_(tp, IntType) or (is_(tp, Float) or (is_(tp, TrType) or is_(tp, VoidType)))))) =&gt;&#10;      (not (exists [tp1, tp2 in set tps] &amp; fleq(tp1, tp2)) =&gt;&#10;        is_(tps, set of ((Float | IntType | TrType | VoidType)))))))&#10;"/>
<po column="14" line="2264" message="eval_FlavouredRep, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2264:14&#10;(forall mk_FlavouredRep(fl, rep):FlavouredRep, e:Env &amp;&#10;  pre_(eval_Representation(rep), e))&#10;" number="735" object="" resource="newspeakSL" toString="eval_FlavouredRep, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2264:14&#10;(forall mk_FlavouredRep(fl, rep):FlavouredRep, e:Env &amp;&#10;  pre_(eval_Representation(rep), e))&#10;"/>
<po column="24" line="2268" message="eval_FlavouredRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2268:24&#10;(forall mk_FlavouredRep(fl, rep):FlavouredRep, e:Env &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Representation(rep)(e), flav:Flavdom = eval_Flavouring(fl) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      ((is_(type, Float)) or&#10;      (is_(type, IntType)) or&#10;      (is_(type, StructureType)) or&#10;      (is_(type, TrType)) or&#10;      (is_(type, UnionType)) or&#10;      (is_(type, VectorType)) or&#10;      (is_(type, VoidType))))))&#10;" number="736" object="" resource="newspeakSL" toString="eval_FlavouredRep: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2268:24&#10;(forall mk_FlavouredRep(fl, rep):FlavouredRep, e:Env &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Representation(rep)(e), flav:Flavdom = eval_Flavouring(fl) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      ((is_(type, Float)) or&#10;      (is_(type, IntType)) or&#10;      (is_(type, StructureType)) or&#10;      (is_(type, TrType)) or&#10;      (is_(type, UnionType)) or&#10;      (is_(type, VectorType)) or&#10;      (is_(type, VoidType))))))&#10;"/>
<po column="14" line="2272" message="eval_TypeDec, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2272:14&#10;(forall mk_TypeDec(id, tp):TypeDec, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Type(tp), e))&#10;" number="737" object="" resource="newspeakSL" toString="eval_TypeDec, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2272:14&#10;(forall mk_TypeDec(id, tp):TypeDec, mk_(e, ps):EnvState &amp;&#10;  pre_(eval_Type(tp), e))&#10;"/>
<po column="12" line="2275" message="eval_TypeDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2275:12&#10;(forall mk_TypeDec(id, tp):TypeDec, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id)(type), e))))&#10;" number="738" object="" resource="newspeakSL" toString="eval_TypeDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2275:12&#10;(forall mk_TypeDec(id, tp):TypeDec, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id)(type), e))))&#10;"/>
<po column="12" line="2275" message="eval_TypeDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2275:12&#10;(forall mk_TypeDec(id, tp):TypeDec, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id), type))))&#10;" number="739" object="" resource="newspeakSL" toString="eval_TypeDec: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2275:12&#10;(forall mk_TypeDec(id, tp):TypeDec, mk_(e, ps):EnvState &amp;&#10;  (let type:(Errvalue | Expressible_type) = eval_Type(tp)(e) in&#10;    (not (type = &lt;err&gt;) =&gt;&#10;      pre_(update_env(id), type))))&#10;"/>
<po column="20" line="2280" message="eval_PackageScope, new_env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2280:20&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    pre_(eval_Decls(decls), env_st)))&#10;" number="740" object="" resource="newspeakSL" toString="eval_PackageScope, new_env_st: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2280:20&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    pre_(eval_Decls(decls), env_st)))&#10;"/>
<po column="12" line="2283" message="eval_PackageScope, nm, nl, nps: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2283:12&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        exists mk_(mk_(nm, nl), nps):EnvState &amp; mk_(mk_(nm, nl), nps) = new_env_st))))&#10;" number="741" object="" resource="newspeakSL" toString="eval_PackageScope, nm, nl, nps: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2283:12&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        exists mk_(mk_(nm, nl), nps):EnvState &amp; mk_(mk_(nm, nl), nps) = new_env_st))))&#10;"/>
<po column="34" line="2283" message="eval_PackageScope, nm, nl, nps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2283:34&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        is_(new_env_st, (Env * PState))))))&#10;" number="742" object="" resource="newspeakSL" toString="eval_PackageScope, nm, nl, nps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2283:34&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        is_(new_env_st, (Env * PState))))))&#10;"/>
<po column="13" line="2287" message="eval_PackageScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2287:13&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(mk_(nm, nl), nps):EnvState = new_env_st in&#10;          (not (not ((elems ids) subset ((dom nm) \ (dom m)))) =&gt;&#10;            (let ne:(map (Id) to (Denotable_value) * Location) = mk_((((elems ids) union (dom m)) &lt;: nm), nl) in&#10;              pre_(eval_Expression(expr)(ne), nps))))))))&#10;" number="743" object="" resource="newspeakSL" toString="eval_PackageScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2287:13&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(mk_(nm, nl), nps):EnvState = new_env_st in&#10;          (not (not ((elems ids) subset ((dom nm) \ (dom m)))) =&gt;&#10;            (let ne:(map (Id) to (Denotable_value) * Location) = mk_((((elems ids) union (dom m)) &lt;: nm), nl) in&#10;              pre_(eval_Expression(expr)(ne), nps))))))))&#10;"/>
<po column="13" line="2287" message="eval_PackageScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2287:13&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(mk_(nm, nl), nps):EnvState = new_env_st in&#10;          (not (not ((elems ids) subset ((dom nm) \ (dom m)))) =&gt;&#10;            (let ne:(map (Id) to (Denotable_value) * Location) = mk_((((elems ids) union (dom m)) &lt;: nm), nl) in&#10;              pre_(eval_Expression(expr), ne))))))))&#10;" number="744" object="" resource="newspeakSL" toString="eval_PackageScope: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2287:13&#10;(forall mk_PackageScope(ids, decls, expr):PackageScope, mk_(m, l):Env, ps:PState &amp;&#10;  (let env_st:((map (Id) to (Denotable_value) * Location) * PState) = mk_(mk_(m, l), ps) in&#10;    (let new_env_st:EnvState = eval_Decls(decls)(env_st) in&#10;      (not (new_env_st = &lt;err&gt;) =&gt;&#10;        (let mk_(mk_(nm, nl), nps):EnvState = new_env_st in&#10;          (not (not ((elems ids) subset ((dom nm) \ (dom m)))) =&gt;&#10;            (let ne:(map (Id) to (Denotable_value) * Location) = mk_((((elems ids) union (dom m)) &lt;: nm), nl) in&#10;              pre_(eval_Expression(expr), ne))))))))&#10;"/>
<po column="16" line="2291" message="eval_GuardedScope, g_decl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2291:16&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDeclarations(decls)(true)(e), ps))&#10;" number="745" object="" resource="newspeakSL" toString="eval_GuardedScope, g_decl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2291:16&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDeclarations(decls)(true)(e), ps))&#10;"/>
<po column="16" line="2291" message="eval_GuardedScope, g_decl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2291:16&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDeclarations(decls)(true), e))&#10;" number="746" object="" resource="newspeakSL" toString="eval_GuardedScope, g_decl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2291:16&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDeclarations(decls)(true), e))&#10;"/>
<po column="16" line="2291" message="eval_GuardedScope, g_decl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2291:16&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDeclarations(decls), true))&#10;" number="747" object="" resource="newspeakSL" toString="eval_GuardedScope, g_decl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2291:16&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDeclarations(decls), true))&#10;"/>
<po column="12" line="2294" message="eval_GuardedScope, ne, nps, val: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2294:12&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      exists mk_(ne, nps, val):((Env * PState * bool) | Errvalue) &amp; mk_(ne, nps, val) = g_decl)))&#10;" number="748" object="" resource="newspeakSL" toString="eval_GuardedScope, ne, nps, val: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2294:12&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      exists mk_(ne, nps, val):((Env * PState * bool) | Errvalue) &amp; mk_(ne, nps, val) = g_decl)))&#10;"/>
<po column="30" line="2294" message="eval_GuardedScope, ne, nps, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2294:30&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      is_(g_decl, (Env * PState * bool)))))&#10;" number="749" object="" resource="newspeakSL" toString="eval_GuardedScope, ne, nps, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2294:30&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      is_(g_decl, (Env * PState * bool)))))&#10;"/>
<po column="21" line="2295" message="eval_GuardedScope, in_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2295:21&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(incl)(ne), nps)))))&#10;" number="750" object="" resource="newspeakSL" toString="eval_GuardedScope, in_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2295:21&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(incl)(ne), nps)))))&#10;"/>
<po column="21" line="2295" message="eval_GuardedScope, in_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2295:21&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(incl), ne)))))&#10;" number="751" object="" resource="newspeakSL" toString="eval_GuardedScope, in_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2295:21&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(incl), ne)))))&#10;"/>
<po column="22" line="2296" message="eval_GuardedScope, out_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2296:22&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(outcl)(ne), nps)))))&#10;" number="752" object="" resource="newspeakSL" toString="eval_GuardedScope, out_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2296:22&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(outcl)(ne), nps)))))&#10;"/>
<po column="22" line="2296" message="eval_GuardedScope, out_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2296:22&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(outcl), ne)))))&#10;" number="753" object="" resource="newspeakSL" toString="eval_GuardedScope, out_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2296:22&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        pre_(eval_Sequence(outcl), ne)))))&#10;"/>
<po column="58" line="2303" message="eval_GuardedScope: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2303:58&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        (let in_val:EST_value = eval_Sequence(incl)(ne)(nps), out_val:EST_value = eval_Sequence(outcl)(ne)(nps) in&#10;          (not (((in_val.val) = &lt;err&gt;) or ((out_val.val) = &lt;err&gt;)) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = setlub({((in_val.val).type), ((out_val.val).type)}) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (val =&gt;&#10;                  ((is_(type, Float)) or&#10;                  (is_(type, IntType)) or&#10;                  (is_(type, StructureType)) or&#10;                  (is_(type, TrType)) or&#10;                  (is_(type, UnionType)) or&#10;                  (is_(type, VectorType)) or&#10;                  (is_(type, VoidType))))))))))))&#10;" number="754" object="" resource="newspeakSL" toString="eval_GuardedScope: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2303:58&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        (let in_val:EST_value = eval_Sequence(incl)(ne)(nps), out_val:EST_value = eval_Sequence(outcl)(ne)(nps) in&#10;          (not (((in_val.val) = &lt;err&gt;) or ((out_val.val) = &lt;err&gt;)) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = setlub({((in_val.val).type), ((out_val.val).type)}) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (val =&gt;&#10;                  ((is_(type, Float)) or&#10;                  (is_(type, IntType)) or&#10;                  (is_(type, StructureType)) or&#10;                  (is_(type, TrType)) or&#10;                  (is_(type, UnionType)) or&#10;                  (is_(type, VectorType)) or&#10;                  (is_(type, VoidType))))))))))))&#10;"/>
<po column="59" line="2305" message="eval_GuardedScope: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2305:59&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        (let in_val:EST_value = eval_Sequence(incl)(ne)(nps), out_val:EST_value = eval_Sequence(outcl)(ne)(nps) in&#10;          (not (((in_val.val) = &lt;err&gt;) or ((out_val.val) = &lt;err&gt;)) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = setlub({((in_val.val).type), ((out_val.val).type)}) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (not val =&gt;&#10;                  ((is_(type, Float)) or&#10;                  (is_(type, IntType)) or&#10;                  (is_(type, StructureType)) or&#10;                  (is_(type, TrType)) or&#10;                  (is_(type, UnionType)) or&#10;                  (is_(type, VectorType)) or&#10;                  (is_(type, VoidType))))))))))))&#10;" number="755" object="" resource="newspeakSL" toString="eval_GuardedScope: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2305:59&#10;(forall mk_GuardedScope(decls, incl, outcl):GuardedScope, e:Env, ps:PState &amp;&#10;  (let g_decl:((Env * PState * bool) | Errvalue) = eval_GuardedDeclarations(decls)(true)(e)(ps) in&#10;    (not (g_decl = &lt;err&gt;) =&gt;&#10;      (let mk_(ne, nps, val):((Env * PState * bool) | Errvalue) = g_decl in&#10;        (let in_val:EST_value = eval_Sequence(incl)(ne)(nps), out_val:EST_value = eval_Sequence(outcl)(ne)(nps) in&#10;          (not (((in_val.val) = &lt;err&gt;) or ((out_val.val) = &lt;err&gt;)) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = setlub({((in_val.val).type), ((out_val.val).type)}) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (not val =&gt;&#10;                  ((is_(type, Float)) or&#10;                  (is_(type, IntType)) or&#10;                  (is_(type, StructureType)) or&#10;                  (is_(type, TrType)) or&#10;                  (is_(type, UnionType)) or&#10;                  (is_(type, VectorType)) or&#10;                  (is_(type, VoidType))))))))))))&#10;"/>
<po column="14" line="2311" message="eval_GuardedDeclarations, gdcl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2311:14&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDecl((hd decls))(e), ps))&#10;" number="756" object="" resource="newspeakSL" toString="eval_GuardedDeclarations, gdcl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2311:14&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDecl((hd decls))(e), ps))&#10;"/>
<po column="14" line="2311" message="eval_GuardedDeclarations, gdcl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2311:14&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDecl((hd decls)), e))&#10;" number="757" object="" resource="newspeakSL" toString="eval_GuardedDeclarations, gdcl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2311:14&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  pre_(eval_GuardedDecl((hd decls)), e))&#10;"/>
<po column="34" line="2311" message="eval_GuardedDeclarations, gdcl: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2311:34&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  decls &lt;&gt; [])&#10;" number="758" object="" resource="newspeakSL" toString="eval_GuardedDeclarations, gdcl: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2311:34&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  decls &lt;&gt; [])&#10;"/>
<po column="12" line="2316" message="eval_GuardedDeclarations, ne, nps, tr: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2316:12&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        exists mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) &amp; mk_(ne, nps, tr) = gdcl))))&#10;" number="759" object="" resource="newspeakSL" toString="eval_GuardedDeclarations, ne, nps, tr: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2316:12&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        exists mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) &amp; mk_(ne, nps, tr) = gdcl))))&#10;"/>
<po column="29" line="2316" message="eval_GuardedDeclarations, ne, nps, tr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2316:29&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        is_(gdcl, (Env * PState * bool))))))&#10;" number="760" object="" resource="newspeakSL" toString="eval_GuardedDeclarations, ne, nps, tr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2316:29&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        is_(gdcl, (Env * PState * bool))))))&#10;"/>
<po column="8" line="2317" message="eval_GuardedDeclarations: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:8&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          pre_(eval_GuardedDeclarations((tl decls))((b and tr))(ne), nps))))))&#10;" number="761" object="" resource="newspeakSL" toString="eval_GuardedDeclarations: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:8&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          pre_(eval_GuardedDeclarations((tl decls))((b and tr))(ne), nps))))))&#10;"/>
<po column="8" line="2317" message="eval_GuardedDeclarations: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:8&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          pre_(eval_GuardedDeclarations((tl decls))((b and tr)), ne))))))&#10;" number="762" object="" resource="newspeakSL" toString="eval_GuardedDeclarations: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:8&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          pre_(eval_GuardedDeclarations((tl decls))((b and tr)), ne))))))&#10;"/>
<po column="8" line="2317" message="eval_GuardedDeclarations: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:8&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          pre_(eval_GuardedDeclarations((tl decls)), (b and tr)))))))&#10;" number="763" object="" resource="newspeakSL" toString="eval_GuardedDeclarations: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:8&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          pre_(eval_GuardedDeclarations((tl decls)), (b and tr)))))))&#10;"/>
<po column="36" line="2317" message="eval_GuardedDeclarations: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:36&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          decls &lt;&gt; [])))))&#10;" number="764" object="" resource="newspeakSL" toString="eval_GuardedDeclarations: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2317:36&#10;(forall decls:seq1 of (GuardedDeclaration), b:bool, e:Env, ps:PState &amp;&#10;  (let gdcl:((Env * PState * bool) | Errvalue) = eval_GuardedDecl((hd decls))(e)(ps) in&#10;    (not ((len decls) = 1) =&gt;&#10;      (not (gdcl = &lt;err&gt;) =&gt;&#10;        (let mk_(ne, nps, tr):((Env * PState * bool) | Errvalue) = gdcl in&#10;          decls &lt;&gt; [])))))&#10;"/>
<po column="8" line="2323" message="eval_GuardedDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2323:8&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (is_(decl, WhereDecl) =&gt;&#10;    pre_(eval_WhereDecl(decl)(e), ps)))&#10;" number="765" object="" resource="newspeakSL" toString="eval_GuardedDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2323:8&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (is_(decl, WhereDecl) =&gt;&#10;    pre_(eval_WhereDecl(decl)(e), ps)))&#10;"/>
<po column="8" line="2323" message="eval_GuardedDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2323:8&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (is_(decl, WhereDecl) =&gt;&#10;    pre_(eval_WhereDecl(decl), e)))&#10;" number="766" object="" resource="newspeakSL" toString="eval_GuardedDecl: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2323:8&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (is_(decl, WhereDecl) =&gt;&#10;    pre_(eval_WhereDecl(decl), e)))&#10;"/>
<po column="16" line="2324" message="eval_GuardedDecl, d: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2324:16&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    pre_(eval_Declaration(decl), mk_(e, ps))))&#10;" number="767" object="" resource="newspeakSL" toString="eval_GuardedDecl, d: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2324:16&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    pre_(eval_Declaration(decl), mk_(e, ps))))&#10;"/>
<po column="33" line="2324" message="eval_GuardedDecl, d: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2324:33&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    ((is_(decl, ExportDecl)) or&#10;    (is_(decl, ImportDecl)) or&#10;    (is_(decl, LetDecl)) or&#10;    (is_(decl, ProcDec)) or&#10;    (is_(decl, TypeDec)) or&#10;    (is_(decl, VarDecl)))))&#10;" number="768" object="" resource="newspeakSL" toString="eval_GuardedDecl, d: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2324:33&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    ((is_(decl, ExportDecl)) or&#10;    (is_(decl, ImportDecl)) or&#10;    (is_(decl, LetDecl)) or&#10;    (is_(decl, ProcDec)) or&#10;    (is_(decl, TypeDec)) or&#10;    (is_(decl, VarDecl)))))&#10;"/>
<po column="17" line="2327" message="eval_GuardedDecl, ne, nps: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2327:17&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    (let d:EnvState = eval_Declaration(decl)(mk_(e, ps)) in&#10;      (not (d = &lt;err&gt;) =&gt;&#10;        exists mk_(ne, nps):EnvState &amp; mk_(ne, nps) = d))))&#10;" number="769" object="" resource="newspeakSL" toString="eval_GuardedDecl, ne, nps: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2327:17&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    (let d:EnvState = eval_Declaration(decl)(mk_(e, ps)) in&#10;      (not (d = &lt;err&gt;) =&gt;&#10;        exists mk_(ne, nps):EnvState &amp; mk_(ne, nps) = d))))&#10;"/>
<po column="31" line="2327" message="eval_GuardedDecl, ne, nps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2327:31&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    (let d:EnvState = eval_Declaration(decl)(mk_(e, ps)) in&#10;      (not (d = &lt;err&gt;) =&gt;&#10;        is_(d, (Env * PState))))))&#10;" number="770" object="" resource="newspeakSL" toString="eval_GuardedDecl, ne, nps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2327:31&#10;(forall decl:GuardedDeclaration, e:Env, ps:PState &amp;&#10;  (not is_(decl, WhereDecl) =&gt;&#10;    (let d:EnvState = eval_Declaration(decl)(mk_(e, ps)) in&#10;      (not (d = &lt;err&gt;) =&gt;&#10;        is_(d, (Env * PState))))))&#10;"/>
<po column="11" line="2332" message="eval_WhereDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2332:11&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="771" object="" resource="newspeakSL" toString="eval_WhereDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2332:11&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2332" message="eval_WhereDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2332:11&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="772" object="" resource="newspeakSL" toString="eval_WhereDecl, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2332:11&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="16" line="2335" message="eval_WhereDecl, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2335:16&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(type)(((x.val).type)), e))))&#10;" number="773" object="" resource="newspeakSL" toString="eval_WhereDecl, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2335:16&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(type)(((x.val).type)), e))))&#10;"/>
<po column="16" line="2335" message="eval_WhereDecl, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2335:16&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(type), ((x.val).type)))))&#10;" number="774" object="" resource="newspeakSL" toString="eval_WhereDecl, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2335:16&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(type), ((x.val).type)))))&#10;"/>
<po column="34" line="2340" message="eval_WhereDecl, env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:34&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            pre_(update_env(id)((x.val)), e)))))))&#10;" number="775" object="" resource="newspeakSL" toString="eval_WhereDecl, env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:34&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            pre_(update_env(id)((x.val)), e)))))))&#10;"/>
<po column="34" line="2340" message="eval_WhereDecl, env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:34&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            pre_(update_env(id), (x.val))))))))&#10;" number="776" object="" resource="newspeakSL" toString="eval_WhereDecl, env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:34&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            pre_(update_env(id), (x.val))))))))&#10;"/>
<po column="49" line="2340" message="eval_WhereDecl, env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:49&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            ((is_((x.val), Errvalue)))))))))&#10;" number="777" object="" resource="newspeakSL" toString="eval_WhereDecl, env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:49&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            ((is_((x.val), Errvalue)))))))))&#10;"/>
<po column="45" line="2340" message="eval_WhereDecl, env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:45&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            (is_(id, token))))))))&#10;" number="778" object="" resource="newspeakSL" toString="eval_WhereDecl, env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2340:45&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (not (id = nil) =&gt;&#10;            (is_(id, token))))))))&#10;"/>
<po column="45" line="2344" message="eval_WhereDecl, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2344:45&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (let env:Env = (if (id = nil)&#10;          then e&#10;          else update_env(id)((x.val))(e)) in&#10;            (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;              (not &lt;err&gt; = xt =&gt;&#10;                ((is_(t, Float)) or&#10;                (is_(t, IntType)) or&#10;                (is_(t, StructureType)) or&#10;                (is_(t, TrType)) or&#10;                (is_(t, UnionType)) or&#10;                (is_(t, VectorType)) or&#10;                (is_(t, VoidType)))))))))))&#10;" number="779" object="" resource="newspeakSL" toString="eval_WhereDecl, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2344:45&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (let env:Env = (if (id = nil)&#10;          then e&#10;          else update_env(id)((x.val))(e)) in&#10;            (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;              (not &lt;err&gt; = xt =&gt;&#10;                ((is_(t, Float)) or&#10;                (is_(t, IntType)) or&#10;                (is_(t, StructureType)) or&#10;                (is_(t, TrType)) or&#10;                (is_(t, UnionType)) or&#10;                (is_(t, VectorType)) or&#10;                (is_(t, VoidType)))))))))))&#10;"/>
<po column="47" line="2344" message="eval_WhereDecl, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2344:47&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (let env:Env = (if (id = nil)&#10;          then e&#10;          else update_env(id)((x.val))(e)) in&#10;            (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;              (not &lt;err&gt; = xt =&gt;&#10;                ((is_(xt, Float)) or&#10;                (is_(xt, IntType)) or&#10;                (is_(xt, StructureType)) or&#10;                (is_(xt, TrType)) or&#10;                (is_(xt, UnionType)) or&#10;                (is_(xt, VectorType)) or&#10;                (is_(xt, VoidType)))))))))))&#10;" number="780" object="" resource="newspeakSL" toString="eval_WhereDecl, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2344:47&#10;(forall mk_WhereDecl(type, expr, id):WhereDecl, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let t:(Errvalue | Expressible_type) = eval_SkeletonType(type)(((x.val).type))(e) in&#10;        (not &lt;err&gt; = t =&gt;&#10;          (let env:Env = (if (id = nil)&#10;          then e&#10;          else update_env(id)((x.val))(e)) in&#10;            (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;              (not &lt;err&gt; = xt =&gt;&#10;                ((is_(xt, Float)) or&#10;                (is_(xt, IntType)) or&#10;                (is_(xt, StructureType)) or&#10;                (is_(xt, TrType)) or&#10;                (is_(xt, UnionType)) or&#10;                (is_(xt, VectorType)) or&#10;                (is_(xt, VoidType)))))))))))&#10;"/>
<po column="11" line="2351" message="eval_Assertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2351:11&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="781" object="" resource="newspeakSL" toString="eval_Assertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2351:11&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2351" message="eval_Assertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2351:11&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="782" object="" resource="newspeakSL" toString="eval_Assertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2351:11&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="19" line="2354" message="eval_Assertion, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2354:19&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(tp)(((x.val).type)), e))))&#10;" number="783" object="" resource="newspeakSL" toString="eval_Assertion, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2354:19&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(tp)(((x.val).type)), e))))&#10;"/>
<po column="19" line="2354" message="eval_Assertion, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2354:19&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(tp), ((x.val).type)))))&#10;" number="784" object="" resource="newspeakSL" toString="eval_Assertion, type: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2354:19&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      pre_(eval_SkeletonType(tp), ((x.val).type)))))&#10;"/>
<po column="30" line="2361" message="eval_Assertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2361:30&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              ((is_(type, Float)) or&#10;              (is_(type, IntType)) or&#10;              (is_(type, StructureType)) or&#10;              (is_(type, TrType)) or&#10;              (is_(type, UnionType)) or&#10;              (is_(type, VectorType)) or&#10;              (is_(type, VoidType))))))))))&#10;" number="785" object="" resource="newspeakSL" toString="eval_Assertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2361:30&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              ((is_(type, Float)) or&#10;              (is_(type, IntType)) or&#10;              (is_(type, StructureType)) or&#10;              (is_(type, TrType)) or&#10;              (is_(type, UnionType)) or&#10;              (is_(type, VectorType)) or&#10;              (is_(type, VoidType))))))))))&#10;"/>
<po column="56" line="2361" message="eval_Assertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2361:56&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              (tleq(type, ((x.val).type)) =&gt;&#10;                ((is_(xt, Float)) or&#10;                (is_(xt, IntType)) or&#10;                (is_(xt, StructureType)) or&#10;                (is_(xt, TrType)) or&#10;                (is_(xt, UnionType)) or&#10;                (is_(xt, VectorType)) or&#10;                (is_(xt, VoidType)))))))))))&#10;" number="786" object="" resource="newspeakSL" toString="eval_Assertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2361:56&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              (tleq(type, ((x.val).type)) =&gt;&#10;                ((is_(xt, Float)) or&#10;                (is_(xt, IntType)) or&#10;                (is_(xt, StructureType)) or&#10;                (is_(xt, TrType)) or&#10;                (is_(xt, UnionType)) or&#10;                (is_(xt, VectorType)) or&#10;                (is_(xt, VoidType)))))))))))&#10;"/>
<po column="59" line="2361" message="eval_Assertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2361:59&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              (tleq(type, ((x.val).type)) =&gt;&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;" number="787" object="" resource="newspeakSL" toString="eval_Assertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2361:59&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              (tleq(type, ((x.val).type)) =&gt;&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;"/>
<po column="61" line="2363" message="eval_Assertion, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2363:61&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              (not (not (tleq(type, ((x.val).type)) and tleq(xt, type))) =&gt;&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;" number="788" object="" resource="newspeakSL" toString="eval_Assertion, val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2363:61&#10;(forall mk_Assertion(expr, tp):Assertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type:(Errvalue | Expressible_type) = eval_SkeletonType(tp)(((x.val).type))(e) in&#10;        (not (type = &lt;err&gt;) =&gt;&#10;          (let xt:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;            (not &lt;err&gt; = xt =&gt;&#10;              (not (not (tleq(type, ((x.val).type)) and tleq(xt, type))) =&gt;&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;"/>
<po column="8" line="2371" message="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2371:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (is_(cond, IfThenOnly) =&gt;&#10;    pre_(eval_IfThenOnly(cond)(e), ps)))&#10;" number="789" object="" resource="newspeakSL" toString="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2371:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (is_(cond, IfThenOnly) =&gt;&#10;    pre_(eval_IfThenOnly(cond)(e), ps)))&#10;"/>
<po column="8" line="2371" message="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2371:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (is_(cond, IfThenOnly) =&gt;&#10;    pre_(eval_IfThenOnly(cond), e)))&#10;" number="790" object="" resource="newspeakSL" toString="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2371:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (is_(cond, IfThenOnly) =&gt;&#10;    pre_(eval_IfThenOnly(cond), e)))&#10;"/>
<po column="8" line="2373" message="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2373:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_IfThenElse(cond)(e), ps))))&#10;" number="791" object="" resource="newspeakSL" toString="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2373:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_IfThenElse(cond)(e), ps))))&#10;"/>
<po column="8" line="2373" message="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2373:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_IfThenElse(cond), e))))&#10;" number="792" object="" resource="newspeakSL" toString="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2373:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_IfThenElse(cond), e))))&#10;"/>
<po column="24" line="2373" message="eval_Conditional: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2373:24&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (is_(cond, IfThenElse) =&gt;&#10;      is_(cond, IfThenElse))))&#10;" number="793" object="" resource="newspeakSL" toString="eval_Conditional: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2373:24&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (is_(cond, IfThenElse) =&gt;&#10;      is_(cond, IfThenElse))))&#10;"/>
<po column="8" line="2374" message="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2374:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (not is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_CaseExpr(cond)(e), ps))))&#10;" number="794" object="" resource="newspeakSL" toString="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2374:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (not is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_CaseExpr(cond)(e), ps))))&#10;"/>
<po column="8" line="2374" message="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2374:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (not is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_CaseExpr(cond), e))))&#10;" number="795" object="" resource="newspeakSL" toString="eval_Conditional: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2374:8&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (not is_(cond, IfThenElse) =&gt;&#10;      pre_(eval_CaseExpr(cond), e))))&#10;"/>
<po column="22" line="2374" message="eval_Conditional: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2374:22&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (not is_(cond, IfThenElse) =&gt;&#10;      is_(cond, CaseExpr))))&#10;" number="796" object="" resource="newspeakSL" toString="eval_Conditional: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2374:22&#10;(forall mk_Conditional(cond):Conditional, e:Env, ps:PState &amp;&#10;  (not is_(cond, IfThenOnly) =&gt;&#10;    (not is_(cond, IfThenElse) =&gt;&#10;      is_(cond, CaseExpr))))&#10;"/>
<po column="14" line="2378" message="eval_IfThenOnly, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2378:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop)(e), ps))&#10;" number="797" object="" resource="newspeakSL" toString="eval_IfThenOnly, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2378:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop)(e), ps))&#10;"/>
<po column="14" line="2378" message="eval_IfThenOnly, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2378:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop), e))&#10;" number="798" object="" resource="newspeakSL" toString="eval_IfThenOnly, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2378:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop), e))&#10;"/>
<po column="14" line="2379" message="eval_IfThenOnly, aseq: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2379:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(action)(e), mu(ps, time |-&gt; tplus((cond.time), t_if))))&#10;" number="799" object="" resource="newspeakSL" toString="eval_IfThenOnly, aseq: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2379:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(action)(e), mu(ps, time |-&gt; tplus((cond.time), t_if))))&#10;"/>
<po column="14" line="2379" message="eval_IfThenOnly, aseq: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2379:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(action), e))&#10;" number="800" object="" resource="newspeakSL" toString="eval_IfThenOnly, aseq: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2379:14&#10;(forall mk_IfThenOnly(prop, action):IfThenOnly, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(action), e))&#10;"/>
<po column="14" line="2390" message="eval_IfThenElse, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2390:14&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop)(e), ps))&#10;" number="801" object="" resource="newspeakSL" toString="eval_IfThenElse, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2390:14&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop)(e), ps))&#10;"/>
<po column="14" line="2390" message="eval_IfThenElse, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2390:14&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop), e))&#10;" number="802" object="" resource="newspeakSL" toString="eval_IfThenElse, cond: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2390:14&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(prop), e))&#10;"/>
<po column="21" line="2393" message="eval_IfThenElse, then_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2393:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(thenaction)(e), ps))))&#10;" number="803" object="" resource="newspeakSL" toString="eval_IfThenElse, then_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2393:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(thenaction)(e), ps))))&#10;"/>
<po column="21" line="2393" message="eval_IfThenElse, then_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2393:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(thenaction), e))))&#10;" number="804" object="" resource="newspeakSL" toString="eval_IfThenElse, then_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2393:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(thenaction), e))))&#10;"/>
<po column="21" line="2394" message="eval_IfThenElse, else_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2394:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(elseaction)(e), ps))))&#10;" number="805" object="" resource="newspeakSL" toString="eval_IfThenElse, else_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2394:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(elseaction)(e), ps))))&#10;"/>
<po column="21" line="2394" message="eval_IfThenElse, else_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2394:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(elseaction), e))))&#10;" number="806" object="" resource="newspeakSL" toString="eval_IfThenElse, else_x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2394:21&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      pre_(eval_Sequence(elseaction), e))))&#10;"/>
<po column="54" line="2399" message="eval_IfThenElse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2399:54&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      (let then_x:EST_value = eval_Sequence(thenaction)(e)(ps), else_x:EST_value = eval_Sequence(elseaction)(e)(ps) in&#10;        (let type:(Errvalue | Expressible_type) = lub(((then_x.val).type), ((else_x.val).type)) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            (((cond.val).val) =&gt;&#10;              ((is_(type, Float)) or&#10;              (is_(type, IntType)) or&#10;              (is_(type, StructureType)) or&#10;              (is_(type, TrType)) or&#10;              (is_(type, UnionType)) or&#10;              (is_(type, VectorType)) or&#10;              (is_(type, VoidType))))))))))&#10;" number="807" object="" resource="newspeakSL" toString="eval_IfThenElse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2399:54&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      (let then_x:EST_value = eval_Sequence(thenaction)(e)(ps), else_x:EST_value = eval_Sequence(elseaction)(e)(ps) in&#10;        (let type:(Errvalue | Expressible_type) = lub(((then_x.val).type), ((else_x.val).type)) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            (((cond.val).val) =&gt;&#10;              ((is_(type, Float)) or&#10;              (is_(type, IntType)) or&#10;              (is_(type, StructureType)) or&#10;              (is_(type, TrType)) or&#10;              (is_(type, UnionType)) or&#10;              (is_(type, VectorType)) or&#10;              (is_(type, VoidType))))))))))&#10;"/>
<po column="54" line="2401" message="eval_IfThenElse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2401:54&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      (let then_x:EST_value = eval_Sequence(thenaction)(e)(ps), else_x:EST_value = eval_Sequence(elseaction)(e)(ps) in&#10;        (let type:(Errvalue | Expressible_type) = lub(((then_x.val).type), ((else_x.val).type)) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            (not ((cond.val).val) =&gt;&#10;              ((is_(type, Float)) or&#10;              (is_(type, IntType)) or&#10;              (is_(type, StructureType)) or&#10;              (is_(type, TrType)) or&#10;              (is_(type, UnionType)) or&#10;              (is_(type, VectorType)) or&#10;              (is_(type, VoidType))))))))))&#10;" number="808" object="" resource="newspeakSL" toString="eval_IfThenElse: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2401:54&#10;(forall mk_IfThenElse(prop, thenaction, elseaction):IfThenElse, e:Env, ps:PState &amp;&#10;  (let cond:EST_value = eval_Expression(prop)(e)(ps) in&#10;    (not (not is_((cond.val), Tr)) =&gt;&#10;      (let then_x:EST_value = eval_Sequence(thenaction)(e)(ps), else_x:EST_value = eval_Sequence(elseaction)(e)(ps) in&#10;        (let type:(Errvalue | Expressible_type) = lub(((then_x.val).type), ((else_x.val).type)) in&#10;          (not (type = &lt;err&gt;) =&gt;&#10;            (not ((cond.val).val) =&gt;&#10;              ((is_(type, Float)) or&#10;              (is_(type, IntType)) or&#10;              (is_(type, StructureType)) or&#10;              (is_(type, TrType)) or&#10;              (is_(type, UnionType)) or&#10;              (is_(type, VectorType)) or&#10;              (is_(type, VoidType))))))))))&#10;"/>
<po column="11" line="2406" message="eval_CaseExpr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2406:11&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;" number="809" object="" resource="newspeakSL" toString="eval_CaseExpr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2406:11&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), ps))&#10;"/>
<po column="11" line="2406" message="eval_CaseExpr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2406:11&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="810" object="" resource="newspeakSL" toString="eval_CaseExpr, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2406:11&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="17" line="2410" message="eval_CaseExpr, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2410:17&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        pre_(eval_Limbs(limbs)((x.val))(e), mu(ps, time |-&gt; (x.time)))))))&#10;" number="811" object="" resource="newspeakSL" toString="eval_CaseExpr, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2410:17&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        pre_(eval_Limbs(limbs)((x.val))(e), mu(ps, time |-&gt; (x.time)))))))&#10;"/>
<po column="17" line="2410" message="eval_CaseExpr, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2410:17&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        pre_(eval_Limbs(limbs)((x.val)), e)))))&#10;" number="812" object="" resource="newspeakSL" toString="eval_CaseExpr, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2410:17&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        pre_(eval_Limbs(limbs)((x.val)), e)))))&#10;"/>
<po column="17" line="2410" message="eval_CaseExpr, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2410:17&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        pre_(eval_Limbs(limbs), (x.val))))))&#10;" number="813" object="" resource="newspeakSL" toString="eval_CaseExpr, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2410:17&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        pre_(eval_Limbs(limbs), (x.val))))))&#10;"/>
<po column="37" line="2413" message="eval_CaseExpr, os, t, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2413:37&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (len ls) in set inds ls))))))&#10;" number="814" object="" resource="newspeakSL" toString="eval_CaseExpr, os, t, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2413:37&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (len ls) in set inds ls))))))&#10;"/>
<po column="34" line="2414" message="eval_CaseExpr, os: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2414:34&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in&#10;              pre_(eval_Sequence(outlimb)(e), mu(ps, time |-&gt; (v.time))))))))))&#10;" number="815" object="" resource="newspeakSL" toString="eval_CaseExpr, os: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2414:34&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in&#10;              pre_(eval_Sequence(outlimb)(e), mu(ps, time |-&gt; (v.time))))))))))&#10;"/>
<po column="34" line="2414" message="eval_CaseExpr, os: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2414:34&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in&#10;              pre_(eval_Sequence(outlimb), e))))))))&#10;" number="816" object="" resource="newspeakSL" toString="eval_CaseExpr, os: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2414:34&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in&#10;              pre_(eval_Sequence(outlimb), e))))))))&#10;"/>
<po column="48" line="2414" message="eval_CaseExpr, os: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2414:48&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in&#10;              is_(outlimb, Sequence))))))))&#10;" number="817" object="" resource="newspeakSL" toString="eval_CaseExpr, os: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2414:48&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (not (outlimb = nil) =&gt;&#10;            (let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in&#10;              is_(outlimb, Sequence))))))))&#10;"/>
<po column="36" line="2424" message="eval_CaseExpr, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2424:36&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      is_({((v.val).type) | [mk_(t, v) in set (elems pats)]}, set of (Expressible_type)))))))))))))&#10;" number="818" object="" resource="newspeakSL" toString="eval_CaseExpr, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2424:36&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      is_({((v.val).type) | [mk_(t, v) in set (elems pats)]}, set of (Expressible_type)))))))))))))&#10;"/>
<po column="38" line="2429" message="eval_CaseExpr, matches: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2429:38&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (forall i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t) =&gt;&#10;                              i in set inds pats)))))))))))))))&#10;" number="819" object="" resource="newspeakSL" toString="eval_CaseExpr, matches: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2429:38&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (forall i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t) =&gt;&#10;                              i in set inds pats)))))))))))))))&#10;"/>
<po column="54" line="2430" message="eval_CaseExpr, matches, t, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2430:54&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (forall i in set (inds pats) &amp;&#10;                              i in set inds pats)))))))))))))))&#10;" number="820" object="" resource="newspeakSL" toString="eval_CaseExpr, matches, t, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2430:54&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (forall i in set (inds pats) &amp;&#10;                              i in set inds pats)))))))))))))))&#10;"/>
<po column="43" line="2431" message="eval_CaseExpr, matches: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2431:43&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (forall i in set (inds pats) &amp;&#10;                              (let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in&#10;                                ((is_(x_type, Float)) or&#10;                                (is_(x_type, IntType)) or&#10;                                (is_(x_type, StructureType)) or&#10;                                (is_(x_type, TrType)) or&#10;                                (is_(x_type, UnionType)) or&#10;                                (is_(x_type, VectorType)) or&#10;                                (is_(x_type, VoidType)))))))))))))))))))&#10;" number="821" object="" resource="newspeakSL" toString="eval_CaseExpr, matches: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2431:43&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (forall i in set (inds pats) &amp;&#10;                              (let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in&#10;                                ((is_(x_type, Float)) or&#10;                                (is_(x_type, IntType)) or&#10;                                (is_(x_type, StructureType)) or&#10;                                (is_(x_type, TrType)) or&#10;                                (is_(x_type, UnionType)) or&#10;                                (is_(x_type, VectorType)) or&#10;                                (is_(x_type, VoidType)))))))))))))))))))&#10;"/>
<po column="43" line="2432" message="eval_CaseExpr, mt, mv: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2432:43&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              matches &lt;&gt; [])))))))))))))))&#10;" number="822" object="" resource="newspeakSL" toString="eval_CaseExpr, mt, mv: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2432:43&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              matches &lt;&gt; [])))))))))))))))&#10;"/>
<po column="35" line="2434" message="eval_CaseExpr, time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2434:35&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                ((is_((mv.time), (nat * nat))))))))))))))))))))&#10;" number="823" object="" resource="newspeakSL" toString="eval_CaseExpr, time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2434:35&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                ((is_((mv.time), (nat * nat))))))))))))))))))))&#10;"/>
<po column="47" line="2435" message="eval_CaseExpr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2435:47&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                (let time:Time = dtplus([(mv.time), t_const_type, t_widen_type]) in&#10;                                  ((is_((mv.val), Errvalue)) or&#10;                                  (is_((mv.val), Int)) or&#10;                                  (is_((mv.val), Real)) or&#10;                                  (is_((mv.val), Structure)) or&#10;                                  (is_((mv.val), Tr)) or&#10;                                  (is_((mv.val), Union)) or&#10;                                  (is_((mv.val), Vector)) or&#10;                                  (is_((mv.val), Void))))))))))))))))))))&#10;" number="824" object="" resource="newspeakSL" toString="eval_CaseExpr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2435:47&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                (let time:Time = dtplus([(mv.time), t_const_type, t_widen_type]) in&#10;                                  ((is_((mv.val), Errvalue)) or&#10;                                  (is_((mv.val), Int)) or&#10;                                  (is_((mv.val), Real)) or&#10;                                  (is_((mv.val), Structure)) or&#10;                                  (is_((mv.val), Tr)) or&#10;                                  (is_((mv.val), Union)) or&#10;                                  (is_((mv.val), Vector)) or&#10;                                  (is_((mv.val), Void))))))))))))))))))))&#10;"/>
<po column="54" line="2435" message="eval_CaseExpr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2435:54&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                (let time:Time = dtplus([(mv.time), t_const_type, t_widen_type]) in&#10;                                  ((is_(type, Float)) or&#10;                                  (is_(type, IntType)) or&#10;                                  (is_(type, StructureType)) or&#10;                                  (is_(type, TrType)) or&#10;                                  (is_(type, UnionType)) or&#10;                                  (is_(type, VectorType)) or&#10;                                  (is_(type, VoidType))))))))))))))))))))&#10;" number="825" object="" resource="newspeakSL" toString="eval_CaseExpr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2435:54&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                (let time:Time = dtplus([(mv.time), t_const_type, t_widen_type]) in&#10;                                  ((is_(type, Float)) or&#10;                                  (is_(type, IntType)) or&#10;                                  (is_(type, StructureType)) or&#10;                                  (is_(type, TrType)) or&#10;                                  (is_(type, UnionType)) or&#10;                                  (is_(type, VectorType)) or&#10;                                  (is_(type, VoidType))))))))))))))))))))&#10;"/>
<po column="60" line="2435" message="eval_CaseExpr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2435:60&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                (let time:Time = dtplus([(mv.time), t_const_type, t_widen_type]) in&#10;                                  (is_((mv.sto), map (Location) to (Storable_value))))))))))))))))))))&#10;" number="826" object="" resource="newspeakSL" toString="eval_CaseExpr: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2435:60&#10;(forall mk_CaseExpr(expr, limbs, outlimb):CaseExpr, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;    (not ((x.val) = &lt;err&gt;) =&gt;&#10;      (let type_x:(Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) = ((x.val).type) in&#10;        (let ls:seq1 of ((Expressible_type * EST_value)) = eval_Limbs(limbs)((x.val))(e)(mu(ps, time |-&gt; (x.time))) in&#10;          (let os:([] | seq1 of (((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value))) = (if (outlimb = nil)&#10;          then []&#10;          else let mk_(t, v):(Expressible_type * EST_value) = ls((len ls)) in [mk_(type_x, eval_Sequence(outlimb)(e)(mu(ps, time |-&gt; (v.time))))]) in&#10;            (let pats:seq1 of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = (ls ^ os) in&#10;              (not (exists [mk_(t, v) in set (elems pats)] &amp; ((v.val) = &lt;err&gt;)) =&gt;&#10;                (let patlub:(Errvalue | Expressible_type) = setlub({t | [mk_(t, v) in set (elems pats)]}) in&#10;                  (not (patlub = &lt;err&gt;) =&gt;&#10;                    (not (lub(type_x, patlub) &lt;&gt; patlub) =&gt;&#10;                      (let type:(Errvalue | Expressible_type) = setlub({((v.val).type) | [mk_(t, v) in set (elems pats)]}) in&#10;                        (not (type = &lt;err&gt;) =&gt;&#10;                          (let x_type:(Errvalue | Expressible_type) = const_type((x.val)) in&#10;                            (let matches:seq of ((((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?)) = [pats(i) | i in set (inds pats) &amp; let mk_(t, v):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = pats(i) in (lub(x_type, t) = t)] in&#10;                              (let mk_(mt, mv):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * EST_value) | (Expressible_type * EST_value) | ?) = (hd matches) in&#10;                                (let time:Time = dtplus([(mv.time), t_const_type, t_widen_type]) in&#10;                                  (is_((mv.sto), map (Location) to (Storable_value))))))))))))))))))))&#10;"/>
<po column="18" line="2440" message="eval_Limbs, t, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:18&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Limb((hd limbs))(x)(e), ps))&#10;" number="827" object="" resource="newspeakSL" toString="eval_Limbs, t, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:18&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Limb((hd limbs))(x)(e), ps))&#10;"/>
<po column="18" line="2440" message="eval_Limbs, t, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:18&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Limb((hd limbs))(x), e))&#10;" number="828" object="" resource="newspeakSL" toString="eval_Limbs, t, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:18&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Limb((hd limbs))(x), e))&#10;"/>
<po column="18" line="2440" message="eval_Limbs, t, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:18&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Limb((hd limbs)), x))&#10;" number="829" object="" resource="newspeakSL" toString="eval_Limbs, t, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:18&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Limb((hd limbs)), x))&#10;"/>
<po column="31" line="2440" message="eval_Limbs, t, v: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:31&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  limbs &lt;&gt; [])&#10;" number="830" object="" resource="newspeakSL" toString="eval_Limbs, t, v: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2440:31&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  limbs &lt;&gt; [])&#10;"/>
<po column="20" line="2443" message="eval_Limbs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:20&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      pre_(eval_Limbs((tl limbs))(x)(e), mu(ps, time |-&gt; (v.time))))))&#10;" number="831" object="" resource="newspeakSL" toString="eval_Limbs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:20&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      pre_(eval_Limbs((tl limbs))(x)(e), mu(ps, time |-&gt; (v.time))))))&#10;"/>
<po column="20" line="2443" message="eval_Limbs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:20&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      pre_(eval_Limbs((tl limbs))(x), e))))&#10;" number="832" object="" resource="newspeakSL" toString="eval_Limbs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:20&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      pre_(eval_Limbs((tl limbs))(x), e))))&#10;"/>
<po column="20" line="2443" message="eval_Limbs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:20&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      pre_(eval_Limbs((tl limbs)), x))))&#10;" number="833" object="" resource="newspeakSL" toString="eval_Limbs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:20&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      pre_(eval_Limbs((tl limbs)), x))))&#10;"/>
<po column="34" line="2443" message="eval_Limbs: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:34&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      limbs &lt;&gt; [])))&#10;" number="834" object="" resource="newspeakSL" toString="eval_Limbs: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2443:34&#10;(forall limbs:seq1 of (CaseLimb), x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let mk_(t, v):(Expressible_type * EST_value) = eval_Limb((hd limbs))(x)(e)(ps) in&#10;    (not ((len limbs) = 1) =&gt;&#10;      limbs &lt;&gt; [])))&#10;"/>
<po column="11" line="2448" message="eval_Limb, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2448:11&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Tester(test)(x)(e), ps))&#10;" number="835" object="" resource="newspeakSL" toString="eval_Limb, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2448:11&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Tester(test)(x)(e), ps))&#10;"/>
<po column="11" line="2448" message="eval_Limb, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2448:11&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Tester(test)(x), e))&#10;" number="836" object="" resource="newspeakSL" toString="eval_Limb, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2448:11&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Tester(test)(x), e))&#10;"/>
<po column="11" line="2448" message="eval_Limb, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2448:11&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Tester(test), x))&#10;" number="837" object="" resource="newspeakSL" toString="eval_Limb, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2448:11&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_Tester(test), x))&#10;"/>
<po column="12" line="2451" message="eval_Limb, type, env, tm: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2451:12&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      exists mk_(type, env, tm):((Expressible_type * Env * Time) | Errvalue) &amp; mk_(type, env, tm) = t)))&#10;" number="838" object="" resource="newspeakSL" toString="eval_Limb, type, env, tm: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2451:12&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      exists mk_(type, env, tm):((Expressible_type * Env * Time) | Errvalue) &amp; mk_(type, env, tm) = t)))&#10;"/>
<po column="31" line="2451" message="eval_Limb, type, env, tm: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2451:31&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      is_(t, (Expressible_type * Env * Time)))))&#10;" number="839" object="" resource="newspeakSL" toString="eval_Limb, type, env, tm: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2451:31&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      is_(t, (Expressible_type * Env * Time)))))&#10;"/>
<po column="18" line="2452" message="eval_Limb, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2452:18&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let mk_(type, env, tm):((Expressible_type * Env * Time) | Errvalue) = t in&#10;        pre_(eval_Sequence(sequ)(env), mu(ps, time |-&gt; tm))))))&#10;" number="840" object="" resource="newspeakSL" toString="eval_Limb, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2452:18&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let mk_(type, env, tm):((Expressible_type * Env * Time) | Errvalue) = t in&#10;        pre_(eval_Sequence(sequ)(env), mu(ps, time |-&gt; tm))))))&#10;"/>
<po column="18" line="2452" message="eval_Limb, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2452:18&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let mk_(type, env, tm):((Expressible_type * Env * Time) | Errvalue) = t in&#10;        pre_(eval_Sequence(sequ), env)))))&#10;" number="841" object="" resource="newspeakSL" toString="eval_Limb, val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2452:18&#10;(forall mk_CaseLimb(test, sequ):CaseLimb, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:((Expressible_type * Env * Time) | Errvalue) = eval_Tester(test)(x)(e)(ps) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let mk_(type, env, tm):((Expressible_type * Env * Time) | Errvalue) = t in&#10;        pre_(eval_Sequence(sequ), env)))))&#10;"/>
<po column="20" line="2465" message="eval_Tester, nt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2465:20&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;  let mk_SkeletonType(t) = tester in&#10;    pre_(eval_SkeletonType(tester)((x.type)), e)))&#10;" number="842" object="" resource="newspeakSL" toString="eval_Tester, nt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2465:20&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;  let mk_SkeletonType(t) = tester in&#10;    pre_(eval_SkeletonType(tester)((x.type)), e)))&#10;"/>
<po column="20" line="2465" message="eval_Tester, nt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2465:20&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;  let mk_SkeletonType(t) = tester in&#10;    pre_(eval_SkeletonType(tester), (x.type))))&#10;" number="843" object="" resource="newspeakSL" toString="eval_Tester, nt: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2465:20&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;  let mk_SkeletonType(t) = tester in&#10;    pre_(eval_SkeletonType(tester), (x.type))))&#10;"/>
<po column="38" line="2465" message="eval_Tester, nt: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2465:38&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;  let mk_SkeletonType(t) = tester in&#10;    is_(tester, SkeletonType)))&#10;" number="844" object="" resource="newspeakSL" toString="eval_Tester, nt: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2465:38&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;  let mk_SkeletonType(t) = tester in&#10;    is_(tester, SkeletonType)))&#10;"/>
<po column="24" line="2469" message="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:24&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      pre_(eval_StrucTest(tester)(x)(e), ps))))&#10;" number="845" object="" resource="newspeakSL" toString="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:24&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      pre_(eval_StrucTest(tester)(x)(e), ps))))&#10;"/>
<po column="24" line="2469" message="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:24&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      pre_(eval_StrucTest(tester)(x), e))))&#10;" number="846" object="" resource="newspeakSL" toString="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:24&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      pre_(eval_StrucTest(tester)(x), e))))&#10;"/>
<po column="24" line="2469" message="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:24&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      pre_(eval_StrucTest(tester), x))))&#10;" number="847" object="" resource="newspeakSL" toString="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:24&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      pre_(eval_StrucTest(tester), x))))&#10;"/>
<po column="39" line="2469" message="eval_Tester: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:39&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      is_(tester, StrucTest))))&#10;" number="848" object="" resource="newspeakSL" toString="eval_Tester: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2469:39&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;    let mk_StrucTest(s) = tester in&#10;      is_(tester, StrucTest))))&#10;"/>
<po column="34" line="2470" message="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:34&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        pre_(eval_NonStrucTest(tester)(x)(e), ps)))))&#10;" number="849" object="" resource="newspeakSL" toString="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:34&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        pre_(eval_NonStrucTest(tester)(x)(e), ps)))))&#10;"/>
<po column="34" line="2470" message="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:34&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        pre_(eval_NonStrucTest(tester)(x), e)))))&#10;" number="850" object="" resource="newspeakSL" toString="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:34&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        pre_(eval_NonStrucTest(tester)(x), e)))))&#10;"/>
<po column="34" line="2470" message="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:34&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        pre_(eval_NonStrucTest(tester), x)))))&#10;" number="851" object="" resource="newspeakSL" toString="eval_Tester: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:34&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        pre_(eval_NonStrucTest(tester), x)))))&#10;"/>
<po column="52" line="2470" message="eval_Tester: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:52&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        is_(tester, NonStrucTest)))))&#10;" number="852" object="" resource="newspeakSL" toString="eval_Tester: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2470:52&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not exists mk_SkeletonType(t):Tester &amp; mk_SkeletonType(t) = tester =&gt;&#10;    (not exists mk_StrucTest(s):Tester &amp; mk_StrucTest(s) = tester =&gt;&#10;      (exists mk_NonStrucTest(id, tp, fl):Tester &amp; mk_NonStrucTest(id, tp, fl) = tester =&gt;&#10;      let mk_NonStrucTest(id, tp, fl) = tester in&#10;        is_(tester, NonStrucTest)))))&#10;"/>
<po column="3" line="2463" message="eval_Tester: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2463:3&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; tester = mk_SkeletonType(t)) or (exists mk_StrucTest(s):Tester &amp; tester = mk_StrucTest(s)) or (exists mk_NonStrucTest(id, tp, fl):Tester &amp; tester = mk_NonStrucTest(id, tp, fl)))&#10;" number="853" object="" resource="newspeakSL" toString="eval_Tester: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2463:3&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (exists mk_SkeletonType(t):Tester &amp; tester = mk_SkeletonType(t)) or (exists mk_StrucTest(s):Tester &amp; tester = mk_StrucTest(s)) or (exists mk_NonStrucTest(id, tp, fl):Tester &amp; tester = mk_NonStrucTest(id, tp, fl)))&#10;"/>
<po column="1" line="2460" message="eval_Tester: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2460:1&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (is_((cases tester :&#10;  case mk_SkeletonType(t) -&gt; let nt:(Errvalue | Expressible_type) = eval_SkeletonType(tester)((x.type))(e) in (if (nt = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(nt, e, (ps.time))),&#10;  case mk_StrucTest(s) -&gt; eval_StrucTest(tester)(x)(e)(ps),&#10;  case mk_NonStrucTest(id, tp, fl) -&gt; eval_NonStrucTest(tester)(x)(e)(ps)&#10;  end), (Expressible_type * Env * Time))) or&#10;  (is_((cases tester :&#10;  case mk_SkeletonType(t) -&gt; let nt:(Errvalue | Expressible_type) = eval_SkeletonType(tester)((x.type))(e) in (if (nt = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(nt, e, (ps.time))),&#10;  case mk_StrucTest(s) -&gt; eval_StrucTest(tester)(x)(e)(ps),&#10;  case mk_NonStrucTest(id, tp, fl) -&gt; eval_NonStrucTest(tester)(x)(e)(ps)&#10;  end), Errvalue)))&#10;" number="854" object="" resource="newspeakSL" toString="eval_Tester: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2460:1&#10;(forall tester:Tester, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (is_((cases tester :&#10;  case mk_SkeletonType(t) -&gt; let nt:(Errvalue | Expressible_type) = eval_SkeletonType(tester)((x.type))(e) in (if (nt = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(nt, e, (ps.time))),&#10;  case mk_StrucTest(s) -&gt; eval_StrucTest(tester)(x)(e)(ps),&#10;  case mk_NonStrucTest(id, tp, fl) -&gt; eval_NonStrucTest(tester)(x)(e)(ps)&#10;  end), (Expressible_type * Env * Time))) or&#10;  (is_((cases tester :&#10;  case mk_SkeletonType(t) -&gt; let nt:(Errvalue | Expressible_type) = eval_SkeletonType(tester)((x.type))(e) in (if (nt = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(nt, e, (ps.time))),&#10;  case mk_StrucTest(s) -&gt; eval_StrucTest(tester)(x)(e)(ps),&#10;  case mk_NonStrucTest(id, tp, fl) -&gt; eval_NonStrucTest(tester)(x)(e)(ps)&#10;  end), Errvalue)))&#10;"/>
<po column="19" line="2478" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2478:19&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;  let mk_Type(t) = skel in&#10;    pre_(eval_Type(skel), e)))&#10;" number="855" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2478:19&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;  let mk_Type(t) = skel in&#10;    pre_(eval_Type(skel), e)))&#10;"/>
<po column="29" line="2478" message="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2478:29&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;  let mk_Type(t) = skel in&#10;    is_(skel, Type)))&#10;" number="856" object="" resource="newspeakSL" toString="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2478:29&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;  let mk_Type(t) = skel in&#10;    is_(skel, Type)))&#10;"/>
<po column="25" line="2479" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2479:25&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;    let mk_NumSkel(r, er) = skel in&#10;      pre_(eval_NumSkel(skel)(t), e))))&#10;" number="857" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2479:25&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;    let mk_NumSkel(r, er) = skel in&#10;      pre_(eval_NumSkel(skel)(t), e))))&#10;"/>
<po column="25" line="2479" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2479:25&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;    let mk_NumSkel(r, er) = skel in&#10;      pre_(eval_NumSkel(skel), t))))&#10;" number="858" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2479:25&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;    let mk_NumSkel(r, er) = skel in&#10;      pre_(eval_NumSkel(skel), t))))&#10;"/>
<po column="38" line="2479" message="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2479:38&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;    let mk_NumSkel(r, er) = skel in&#10;      is_(skel, NumSkel))))&#10;" number="859" object="" resource="newspeakSL" toString="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2479:38&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;    let mk_NumSkel(r, er) = skel in&#10;      is_(skel, NumSkel))))&#10;"/>
<po column="24" line="2480" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2480:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;      let mk_StrucSkel(s) = skel in&#10;        pre_(eval_StrucSkel(skel)(t), e)))))&#10;" number="860" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2480:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;      let mk_StrucSkel(s) = skel in&#10;        pre_(eval_StrucSkel(skel)(t), e)))))&#10;"/>
<po column="24" line="2480" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2480:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;      let mk_StrucSkel(s) = skel in&#10;        pre_(eval_StrucSkel(skel), t)))))&#10;" number="861" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2480:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;      let mk_StrucSkel(s) = skel in&#10;        pre_(eval_StrucSkel(skel), t)))))&#10;"/>
<po column="39" line="2480" message="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2480:39&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;      let mk_StrucSkel(s) = skel in&#10;        is_(skel, StrucSkel)))))&#10;" number="862" object="" resource="newspeakSL" toString="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2480:39&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;      let mk_StrucSkel(s) = skel in&#10;        is_(skel, StrucSkel)))))&#10;"/>
<po column="26" line="2481" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2481:26&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;        let mk_FlavSkel(s, fl) = skel in&#10;          pre_(eval_FlavSkel(skel)(t), e))))))&#10;" number="863" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2481:26&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;        let mk_FlavSkel(s, fl) = skel in&#10;          pre_(eval_FlavSkel(skel)(t), e))))))&#10;"/>
<po column="26" line="2481" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2481:26&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;        let mk_FlavSkel(s, fl) = skel in&#10;          pre_(eval_FlavSkel(skel), t))))))&#10;" number="864" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2481:26&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;        let mk_FlavSkel(s, fl) = skel in&#10;          pre_(eval_FlavSkel(skel), t))))))&#10;"/>
<po column="40" line="2481" message="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2481:40&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;        let mk_FlavSkel(s, fl) = skel in&#10;          is_(skel, FlavSkel))))))&#10;" number="865" object="" resource="newspeakSL" toString="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2481:40&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;        let mk_FlavSkel(s, fl) = skel in&#10;          is_(skel, FlavSkel))))))&#10;"/>
<po column="22" line="2482" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2482:22&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;          let mk_VecSkel(s) = skel in&#10;            pre_(eval_VecSkel(skel)(t), e)))))))&#10;" number="866" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2482:22&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;          let mk_VecSkel(s) = skel in&#10;            pre_(eval_VecSkel(skel)(t), e)))))))&#10;"/>
<po column="22" line="2482" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2482:22&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;          let mk_VecSkel(s) = skel in&#10;            pre_(eval_VecSkel(skel), t)))))))&#10;" number="867" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2482:22&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;          let mk_VecSkel(s) = skel in&#10;            pre_(eval_VecSkel(skel), t)))))))&#10;"/>
<po column="35" line="2482" message="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2482:35&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;          let mk_VecSkel(s) = skel in&#10;            is_(skel, VecSkel)))))))&#10;" number="868" object="" resource="newspeakSL" toString="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2482:35&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;          let mk_VecSkel(s) = skel in&#10;            is_(skel, VecSkel)))))))&#10;"/>
<po column="24" line="2483" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2483:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (not exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;            (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_UnionSkel(s) = skel =&gt;&#10;            let mk_UnionSkel(s) = skel in&#10;              pre_(eval_UnionSkel(skel)(t), e))))))))&#10;" number="869" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2483:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (not exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;            (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_UnionSkel(s) = skel =&gt;&#10;            let mk_UnionSkel(s) = skel in&#10;              pre_(eval_UnionSkel(skel)(t), e))))))))&#10;"/>
<po column="24" line="2483" message="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2483:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (not exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;            (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_UnionSkel(s) = skel =&gt;&#10;            let mk_UnionSkel(s) = skel in&#10;              pre_(eval_UnionSkel(skel), t))))))))&#10;" number="870" object="" resource="newspeakSL" toString="eval_SkeletonType: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2483:24&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (not exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;            (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_UnionSkel(s) = skel =&gt;&#10;            let mk_UnionSkel(s) = skel in&#10;              pre_(eval_UnionSkel(skel), t))))))))&#10;"/>
<po column="39" line="2483" message="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2483:39&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (not exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;            (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_UnionSkel(s) = skel =&gt;&#10;            let mk_UnionSkel(s) = skel in&#10;              is_(skel, UnionSkel))))))))&#10;" number="871" object="" resource="newspeakSL" toString="eval_SkeletonType: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2483:39&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (not exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_Type(t) = skel =&gt;&#10;    (not exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_NumSkel(r, er) = skel =&gt;&#10;      (not exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_StrucSkel(s) = skel =&gt;&#10;        (not exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_FlavSkel(s, fl) = skel =&gt;&#10;          (not exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_VecSkel(s) = skel =&gt;&#10;            (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; mk_UnionSkel(s) = skel =&gt;&#10;            let mk_UnionSkel(s) = skel in&#10;              is_(skel, UnionSkel))))))))&#10;"/>
<po column="3" line="2477" message="eval_SkeletonType: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2477:3&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_Type(t)) or (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_NumSkel(r, er)) or (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_StrucSkel(s)) or (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_FlavSkel(s, fl)) or (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_VecSkel(s)) or (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_UnionSkel(s)))&#10;" number="872" object="" resource="newspeakSL" toString="eval_SkeletonType: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2477:3&#10;(forall mk_SkeletonType(skel):SkeletonType, t:Expressible_type, e:Env &amp;&#10;  (exists mk_Type(t):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_Type(t)) or (exists mk_NumSkel(r, er):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_NumSkel(r, er)) or (exists mk_StrucSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_StrucSkel(s)) or (exists mk_FlavSkel(s, fl):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_FlavSkel(s, fl)) or (exists mk_VecSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_VecSkel(s)) or (exists mk_UnionSkel(s):(FlavSkel | NumSkel | StrucSkel | Type | UnionSkel | VecSkel) &amp; skel = mk_UnionSkel(s)))&#10;"/>
<po column="25" line="2495" message="eval_NumSkel, rngs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2495:25&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (not (ranges = nil) =&gt;&#10;      (forall r in set (elems ranges) &amp;&#10;        pre_(eval_Range(r), e)))))&#10;" number="873" object="" resource="newspeakSL" toString="eval_NumSkel, rngs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2495:25&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (not (ranges = nil) =&gt;&#10;      (forall r in set (elems ranges) &amp;&#10;        pre_(eval_Range(r), e)))))&#10;"/>
<po column="38" line="2502" message="eval_NumSkel: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2502:38&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;        let mk_TrType(range, fl) = x_type in&#10;          (not (not ((dunion rngs) subset {0, 1})) =&gt;&#10;            (forall v in set (dunion rngs) &amp;&#10;              v in set dom {0 |-&gt; false, 1 |-&gt; true})))))))&#10;" number="874" object="" resource="newspeakSL" toString="eval_NumSkel: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2502:38&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;        let mk_TrType(range, fl) = x_type in&#10;          (not (not ((dunion rngs) subset {0, 1})) =&gt;&#10;            (forall v in set (dunion rngs) &amp;&#10;              v in set dom {0 |-&gt; false, 1 |-&gt; true})))))))&#10;"/>
<po column="33" line="2503" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2503:33&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;        let mk_TrType(range, fl) = x_type in&#10;          (not (not ((dunion rngs) subset {0, 1})) =&gt;&#10;            (forall v in set (dunion rngs) &amp;&#10;              is_nat(v))))))))&#10;" number="875" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2503:33&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;        let mk_TrType(range, fl) = x_type in&#10;          (not (not ((dunion rngs) subset {0, 1})) =&gt;&#10;            (forall v in set (dunion rngs) &amp;&#10;              is_nat(v))))))))&#10;"/>
<po column="38" line="2502" message="eval_NumSkel: map sequence compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2502:38&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;        let mk_TrType(range, fl) = x_type in&#10;          (not (not ((dunion rngs) subset {0, 1})) =&gt;&#10;            (forall v in set (dunion rngs) &amp;&#10;              forall m1, m2 in set {{0 |-&gt; false}, {1 |-&gt; true}} &amp;&#10;                forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;                  d3 = d4 =&gt; m1(d3) = m2(d4))))))))&#10;" number="876" object="" resource="newspeakSL" toString="eval_NumSkel: map sequence compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2502:38&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;        let mk_TrType(range, fl) = x_type in&#10;          (not (not ((dunion rngs) subset {0, 1})) =&gt;&#10;            (forall v in set (dunion rngs) &amp;&#10;              forall m1, m2 in set {{0 |-&gt; false}, {1 |-&gt; true}} &amp;&#10;                forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;                  d3 = d4 =&gt; m1(d3) = m2(d4))))))))&#10;"/>
<po column="42" line="2506" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2506:42&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;          let mk_IntType(rep, range, fl) = x_type in&#10;            ((rep = &lt;byte&gt;) =&gt;&#10;              (forall v in set (dunion rngs) &amp;&#10;                is_real((abs v))))))))))&#10;" number="877" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2506:42&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;          let mk_IntType(rep, range, fl) = x_type in&#10;            ((rep = &lt;byte&gt;) =&gt;&#10;              (forall v in set (dunion rngs) &amp;&#10;                is_real((abs v))))))))))&#10;"/>
<po column="56" line="2507" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2507:56&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;          let mk_IntType(rep, range, fl) = x_type in&#10;            (not ((rep = &lt;byte&gt;) and (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= bytemax))) =&gt;&#10;              (forall v in set (dunion rngs) &amp;&#10;                is_real((abs v))))))))))&#10;" number="878" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2507:56&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;          let mk_IntType(rep, range, fl) = x_type in&#10;            (not ((rep = &lt;byte&gt;) and (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= bytemax))) =&gt;&#10;              (forall v in set (dunion rngs) &amp;&#10;                is_real((abs v))))))))))&#10;"/>
<po column="42" line="2509" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2509:42&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;          let mk_IntType(rep, range, fl) = x_type in&#10;            (not (((rep = &lt;byte&gt;) and (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= bytemax))) or (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint))) =&gt;&#10;              is_((dunion rngs), set of (int)))))))))&#10;" number="879" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2509:42&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;          let mk_IntType(rep, range, fl) = x_type in&#10;            (not (((rep = &lt;byte&gt;) and (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= bytemax))) or (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint))) =&gt;&#10;              is_((dunion rngs), set of (int)))))))))&#10;"/>
<po column="55" line="2511" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2511:55&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (forall v in set (dunion rngs) &amp;&#10;                is_real((abs v))))))))))&#10;" number="880" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2511:55&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (forall v in set (dunion rngs) &amp;&#10;                is_real((abs v))))))))))&#10;"/>
<po column="32" line="2519" message="eval_NumSkel, abserr, v1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2519:32&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.abserr) = nil) =&gt;&#10;                  pre_(eval_CompileTimeValue((errors.abserr)), e))))))))))&#10;" number="881" object="" resource="newspeakSL" toString="eval_NumSkel, abserr, v1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2519:32&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.abserr) = nil) =&gt;&#10;                  pre_(eval_CompileTimeValue((errors.abserr)), e))))))))))&#10;"/>
<po column="54" line="2519" message="eval_NumSkel, abserr, v1: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2519:54&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.abserr) = nil) =&gt;&#10;                  is_((errors.abserr), CompileTimeValue))))))))))&#10;" number="882" object="" resource="newspeakSL" toString="eval_NumSkel, abserr, v1: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2519:54&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.abserr) = nil) =&gt;&#10;                  is_((errors.abserr), CompileTimeValue))))))))))&#10;"/>
<po column="32" line="2528" message="eval_NumSkel, relerr, v1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2528:32&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.relerr) = nil) =&gt;&#10;                  pre_(eval_CompileTimeValue((errors.relerr)), e))))))))))&#10;" number="883" object="" resource="newspeakSL" toString="eval_NumSkel, relerr, v1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2528:32&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.relerr) = nil) =&gt;&#10;                  pre_(eval_CompileTimeValue((errors.relerr)), e))))))))))&#10;"/>
<po column="54" line="2528" message="eval_NumSkel, relerr, v1: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2528:54&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.relerr) = nil) =&gt;&#10;                  is_((errors.relerr), CompileTimeValue))))))))))&#10;" number="884" object="" resource="newspeakSL" toString="eval_NumSkel, relerr, v1: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2528:54&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (not ((errors.relerr) = nil) =&gt;&#10;                  is_((errors.relerr), CompileTimeValue))))))))))&#10;"/>
<po column="52" line="2534" message="eval_NumSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:52&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      pre_min(r))))))))))))&#10;" number="885" object="" resource="newspeakSL" toString="eval_NumSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:52&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      pre_min(r))))))))))))&#10;"/>
<po column="56" line="2534" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:56&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_(r, set of (real)))))))))))))&#10;" number="886" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:56&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_(r, set of (real)))))))))))))&#10;"/>
<po column="59" line="2534" message="eval_NumSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:59&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      pre_max(r))))))))))))&#10;" number="887" object="" resource="newspeakSL" toString="eval_NumSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:59&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      pre_max(r))))))))))))&#10;"/>
<po column="63" line="2534" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:63&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_(r, set of (real)))))))))))))&#10;" number="888" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:63&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_(r, set of (real)))))))))))))&#10;"/>
<po column="52" line="2534" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:52&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_int(min(r)))))))))))))&#10;" number="889" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:52&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_int(min(r)))))))))))))&#10;"/>
<po column="59" line="2534" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:59&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_int(max(r)))))))))))))&#10;" number="890" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2534:59&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    (forall r in set rngs &amp;&#10;                      is_int(max(r)))))))))))))&#10;"/>
<po column="48" line="2535" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2535:48&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    is_real(abserr)))))))))))&#10;" number="891" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2535:48&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    is_real(abserr)))))))))))&#10;"/>
<po column="55" line="2535" message="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2535:55&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    is_real(relerr)))))))))))&#10;" number="892" object="" resource="newspeakSL" toString="eval_NumSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2535:55&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (not exists mk_TrType(range, fl):Expressible_type &amp; mk_TrType(range, fl) = x_type =&gt;&#10;          (not exists mk_IntType(rep, range, fl):Expressible_type &amp; mk_IntType(rep, range, fl) = x_type =&gt;&#10;            (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; mk_Float(rs, abse, rele, fl) = x_type =&gt;&#10;            let mk_Float(rs, abse, rele, fl) = x_type in&#10;              (not (exists [v in set (dunion rngs)] &amp; ((abs v) &gt;= maxint)) =&gt;&#10;                (let abserr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.abserr) = nil)&#10;                then abse&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.abserr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))), relerr:(&lt;err&gt; | &lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real) = (if ((errors.relerr) = nil)&#10;                then rele&#10;                else let v1:Expressible_value = (eval_CompileTimeValue((errors.relerr))(e).val) in (if (v1 = &lt;err&gt;)&#10;                then &lt;err&gt;&#10;                else (v1.val))) in&#10;                  (not (not (is_(abserr, real) and is_(relerr, real))) =&gt;&#10;                    is_real(relerr)))))))))))&#10;"/>
<po column="13" line="2498" message="eval_NumSkel: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2498:13&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; x_type = mk_TrType(range, fl)) or (exists mk_IntType(rep, range, fl):Expressible_type &amp; x_type = mk_IntType(rep, range, fl)) or (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; x_type = mk_Float(rs, abse, rele, fl))))))&#10;" number="893" object="" resource="newspeakSL" toString="eval_NumSkel: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2498:13&#10;(forall mk_NumSkel(ranges, errors):NumSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not (is_(x_type, TrType) or (is_(x_type, IntType) or is_(x_type, Float)))) =&gt;&#10;    (let rngs:(set of ((Errvalue | set of (int))) | set of ((set of (Floatrng) | set of (bool) | set of (int))) | set of (set of (int))) = (if (ranges = nil)&#10;    then (if is_(x_type, Float)&#10;    then {{l, ... ,u} | [mk_Floatrng(l, u) in set (x_type.range)]}&#10;    else {(x_type.range)})&#10;    else {eval_Range(r)(e) | [r in set (elems ranges)]}) in&#10;      (not (&lt;err&gt; in set rngs) =&gt;&#10;        (exists mk_TrType(range, fl):Expressible_type &amp; x_type = mk_TrType(range, fl)) or (exists mk_IntType(rep, range, fl):Expressible_type &amp; x_type = mk_IntType(rep, range, fl)) or (exists mk_Float(rs, abse, rele, fl):Expressible_type &amp; x_type = mk_Float(rs, abse, rele, fl))))))&#10;"/>
<po column="20" line="2545" message="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2545:20&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        i in set inds comps))))&#10;" number="894" object="" resource="newspeakSL" toString="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2545:20&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        i in set inds comps))))&#10;"/>
<po column="22" line="2546" message="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2546:22&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        ((comps(i) = &lt;nil&gt;) =&gt;&#10;          i in set inds (x_type.tps))))))&#10;" number="895" object="" resource="newspeakSL" toString="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2546:22&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        ((comps(i) = &lt;nil&gt;) =&gt;&#10;          i in set inds (x_type.tps))))))&#10;"/>
<po column="22" line="2547" message="eval_StrucSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:22&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          pre_(eval_SkeletonType(comps(i))((x_type.tps)(i)), e))))))&#10;" number="896" object="" resource="newspeakSL" toString="eval_StrucSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:22&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          pre_(eval_SkeletonType(comps(i))((x_type.tps)(i)), e))))))&#10;"/>
<po column="22" line="2547" message="eval_StrucSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:22&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          pre_(eval_SkeletonType(comps(i)), (x_type.tps)(i)))))))&#10;" number="897" object="" resource="newspeakSL" toString="eval_StrucSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:22&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          pre_(eval_SkeletonType(comps(i)), (x_type.tps)(i)))))))&#10;"/>
<po column="40" line="2547" message="eval_StrucSkel, t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:40&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          is_(comps(i), SkeletonType))))))&#10;" number="898" object="" resource="newspeakSL" toString="eval_StrucSkel, t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:40&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          is_(comps(i), SkeletonType))))))&#10;"/>
<po column="40" line="2547" message="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:40&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          i in set inds comps)))))&#10;" number="899" object="" resource="newspeakSL" toString="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:40&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          i in set inds comps)))))&#10;"/>
<po column="50" line="2547" message="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:50&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          i in set inds (x_type.tps))))))&#10;" number="900" object="" resource="newspeakSL" toString="eval_StrucSkel, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2547:50&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (forall i in set (inds comps) &amp;&#10;        (not (comps(i) = &lt;nil&gt;) =&gt;&#10;          i in set inds (x_type.tps))))))&#10;"/>
<po column="30" line="2552" message="eval_StrucSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2552:30&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (let t:seq of ((CompType | Errvalue | Expressible_type)) = [(if (comps(i) = &lt;nil&gt;)&#10;      then (x_type.tps)(i)&#10;      else eval_SkeletonType(comps(i))((x_type.tps)(i))(e)) | i in set (inds comps)] in&#10;        (not (exists [tp in set (elems t)] &amp; (not (is_(tp, TrType) or (is_(tp, IntType) or is_(tp, Float))))) =&gt;&#10;          is_(t, seq1 of (CompType)))))))&#10;" number="901" object="" resource="newspeakSL" toString="eval_StrucSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2552:30&#10;(forall mk_StrucSkel(comps):StrucSkel, x_type:Expressible_type, e:Env &amp;&#10;  (not (not is_(x_type, StructureType)) =&gt;&#10;    (not (struc_length(x_type) &lt;&gt; (len comps)) =&gt;&#10;      (let t:seq of ((CompType | Errvalue | Expressible_type)) = [(if (comps(i) = &lt;nil&gt;)&#10;      then (x_type.tps)(i)&#10;      else eval_SkeletonType(comps(i))((x_type.tps)(i))(e)) | i in set (inds comps)] in&#10;        (not (exists [tp in set (elems t)] &amp; (not (is_(tp, TrType) or (is_(tp, IntType) or is_(tp, Float))))) =&gt;&#10;          is_(t, seq1 of (CompType)))))))&#10;"/>
<po column="11" line="2557" message="eval_FlavSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2557:11&#10;(forall mk_FlavSkel(skel, fl):FlavSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel)(x_type), e))&#10;" number="902" object="" resource="newspeakSL" toString="eval_FlavSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2557:11&#10;(forall mk_FlavSkel(skel, fl):FlavSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel)(x_type), e))&#10;"/>
<po column="11" line="2557" message="eval_FlavSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2557:11&#10;(forall mk_FlavSkel(skel, fl):FlavSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel), x_type))&#10;" number="903" object="" resource="newspeakSL" toString="eval_FlavSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2557:11&#10;(forall mk_FlavSkel(skel, fl):FlavSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel), x_type))&#10;"/>
<po column="24" line="2561" message="eval_FlavSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2561:24&#10;(forall mk_FlavSkel(skel, fl):FlavSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)(x_type)(e), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      ((is_(t, Float)) or&#10;      (is_(t, IntType)) or&#10;      (is_(t, StructureType)) or&#10;      (is_(t, TrType)) or&#10;      (is_(t, UnionType)) or&#10;      (is_(t, VectorType)) or&#10;      (is_(t, VoidType))))))&#10;" number="904" object="" resource="newspeakSL" toString="eval_FlavSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2561:24&#10;(forall mk_FlavSkel(skel, fl):FlavSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)(x_type)(e), f:Flavdom = eval_Flavouring(fl) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      ((is_(t, Float)) or&#10;      (is_(t, IntType)) or&#10;      (is_(t, StructureType)) or&#10;      (is_(t, TrType)) or&#10;      (is_(t, UnionType)) or&#10;      (is_(t, VectorType)) or&#10;      (is_(t, VoidType))))))&#10;"/>
<po column="11" line="2566" message="eval_VecSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2566:11&#10;(forall mk_VecSkel(skel):VecSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel)(x_type), e))&#10;" number="905" object="" resource="newspeakSL" toString="eval_VecSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2566:11&#10;(forall mk_VecSkel(skel):VecSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel)(x_type), e))&#10;"/>
<po column="11" line="2566" message="eval_VecSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2566:11&#10;(forall mk_VecSkel(skel):VecSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel), x_type))&#10;" number="906" object="" resource="newspeakSL" toString="eval_VecSkel, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2566:11&#10;(forall mk_VecSkel(skel):VecSkel, x_type:Expressible_type, e:Env &amp;&#10;  pre_(eval_SkeletonType(skel), x_type))&#10;"/>
<po column="56" line="2570" message="eval_VecSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2570:56&#10;(forall mk_VecSkel(skel):VecSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)(x_type)(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (exists mk_VectorType(l, u, tp, fl):Expressible_type &amp; mk_VectorType(l, u, tp, fl) = x_type =&gt;&#10;      let mk_VectorType(l, u, tp, fl) = x_type in&#10;        ((is_(t, Float)) or&#10;        (is_(t, IntType)) or&#10;        (is_(t, StructureType)) or&#10;        (is_(t, TrType)) or&#10;        (is_(t, UnionType)) or&#10;        (is_(t, VectorType)) or&#10;        (is_(t, VoidType)))))))&#10;" number="907" object="" resource="newspeakSL" toString="eval_VecSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2570:56&#10;(forall mk_VecSkel(skel):VecSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)(x_type)(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (exists mk_VectorType(l, u, tp, fl):Expressible_type &amp; mk_VectorType(l, u, tp, fl) = x_type =&gt;&#10;      let mk_VectorType(l, u, tp, fl) = x_type in&#10;        ((is_(t, Float)) or&#10;        (is_(t, IntType)) or&#10;        (is_(t, StructureType)) or&#10;        (is_(t, TrType)) or&#10;        (is_(t, UnionType)) or&#10;        (is_(t, VectorType)) or&#10;        (is_(t, VoidType)))))))&#10;"/>
<po column="13" line="2577" message="eval_UnionSkel, fls: map set compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2577:13&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  forall m1, m2 in set {{skel |-&gt; fl} | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;" number="908" object="" resource="newspeakSL" toString="eval_UnionSkel, fls: map set compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2577:13&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  forall m1, m2 in set {{skel |-&gt; fl} | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} &amp;&#10;    forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;      d3 = d4 =&gt; m1(d3) = m2(d4))&#10;"/>
<po column="13" line="2577" message="eval_UnionSkel, fls: finite map obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2577:13&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  exists finmap1:map nat to (map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom)) &amp;&#10;    forall skel in set (elems skels), fl:Flavdom &amp;&#10;      (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = {skel |-&gt; fl})&#10;" number="909" object="" resource="newspeakSL" toString="eval_UnionSkel, fls: finite map obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2577:13&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  exists finmap1:map nat to (map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom)) &amp;&#10;    forall skel in set (elems skels), fl:Flavdom &amp;&#10;      (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = {skel |-&gt; fl})&#10;"/>
<po column="53" line="2581" message="eval_UnionSkel, fls: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2581:53&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (forall skel in set (elems skels), fl:Flavdom &amp;&#10;    (not exists mk_FlavSkel(skel, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(skel, f) = skel =&gt;&#10;      (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;        is_(skel, Flavouring)))))&#10;" number="910" object="" resource="newspeakSL" toString="eval_UnionSkel, fls: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2581:53&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (forall skel in set (elems skels), fl:Flavdom &amp;&#10;    (not exists mk_FlavSkel(skel, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(skel, f) = skel =&gt;&#10;      (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;        is_(skel, Flavouring)))))&#10;"/>
<po column="25" line="2586" message="eval_UnionSkel, x_fls: map set compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2586:25&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        forall m1, m2 in set {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}} &amp;&#10;          forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;            d3 = d4 =&gt; m1(d3) = m2(d4)))))&#10;" number="911" object="" resource="newspeakSL" toString="eval_UnionSkel, x_fls: map set compatible obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2586:25&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        forall m1, m2 in set {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}} &amp;&#10;          forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;            d3 = d4 =&gt; m1(d3) = m2(d4)))))&#10;"/>
<po column="45" line="2599" message="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2599:45&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel)(tp), e)))))))))&#10;" number="912" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2599:45&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel)(tp), e)))))))))&#10;"/>
<po column="45" line="2599" message="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2599:45&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel), tp)))))))))&#10;" number="913" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2599:45&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel), tp)))))))))&#10;"/>
<po column="59" line="2599" message="eval_UnionSkel, tps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2599:59&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                is_(skel, FlavSkel)))))))))&#10;" number="914" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2599:59&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                is_(skel, FlavSkel)))))))))&#10;"/>
<po column="44" line="2600" message="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2600:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  pre_(eval_FlavouredType(skel), e))))))))))&#10;" number="915" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2600:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  pre_(eval_FlavouredType(skel), e))))))))))&#10;"/>
<po column="63" line="2600" message="eval_UnionSkel, tps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2600:63&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  is_(skel, FlavouredType))))))))))&#10;" number="916" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2600:63&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  is_(skel, FlavouredType))))))))))&#10;"/>
<po column="44" line="2601" message="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2601:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  pre_(eval_VoidValType(skel), e))))))))))&#10;" number="917" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2601:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  pre_(eval_VoidValType(skel), e))))))))))&#10;"/>
<po column="61" line="2601" message="eval_UnionSkel, tps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2601:61&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  (is_(skel, Flavouring)))))))))))&#10;" number="918" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2601:61&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp; (fls(skel) = x_fls(tp)) =&gt;&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  (is_(skel, Flavouring)))))))))))&#10;"/>
<po column="27" line="2603" message="eval_UnionSkel, tps: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2603:27&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp;&#10;              skel in set dom fls)))))))&#10;" number="919" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2603:27&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp;&#10;              skel in set dom fls)))))))&#10;"/>
<po column="39" line="2603" message="eval_UnionSkel, tps: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2603:39&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp;&#10;              tp in set dom x_fls)))))))&#10;" number="920" object="" resource="newspeakSL" toString="eval_UnionSkel, tps: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2603:39&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (forall skel in set (elems skels), tp in set (x_type.tps) &amp;&#10;              tp in set dom x_fls)))))))&#10;"/>
<po column="31" line="2607" message="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2607:31&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (let tps:set of ((Errvalue | Expressible_type)) = {(cases skel :&#10;            case mk_FlavSkel(s, f) -&gt; eval_FlavSkel(skel)(tp)(e),&#10;            case mk_FlavouredType(f, t) -&gt; eval_FlavouredType(skel)(e)others eval_VoidValType(skel)(e)&#10;            end) | [skel in set (elems skels), tp in set (x_type.tps)] &amp; (fls(skel) = x_fls(tp))} in&#10;              (not (exists [tp in set tps] &amp; (not (is_(tp, TrType) or (is_(tp, IntType) or (is_(tp, Float) or is_(tp, VoidType)))))) =&gt;&#10;                is_(tps, set of ((Float | IntType | TrType | VoidType)))))))))))&#10;" number="921" object="" resource="newspeakSL" toString="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2607:31&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (is_(x_type, UnionType) =&gt;&#10;        (let x_fls:(map (Float) to (Flavdom) | map (IntType) to (Flavdom) | map (TrType) to (Flavdom) | map (VoidType) to (Flavdom)) = (merge {{mk_VoidType(f) |-&gt; f | mk_VoidType(f) in set (x_type.tps)}, {mk_IntType(rep, range, fl) |-&gt; fl | mk_IntType(rep, range, fl) in set (x_type.tps)}, {mk_TrType(range, fl) |-&gt; fl | mk_TrType(range, fl) in set (x_type.tps)}, {mk_Float(rs, a, r, fl) |-&gt; fl | mk_Float(rs, a, r, fl) in set (x_type.tps)}}) in&#10;          (not (not ((rng fls) subset (rng x_fls))) =&gt;&#10;            (let tps:set of ((Errvalue | Expressible_type)) = {(cases skel :&#10;            case mk_FlavSkel(s, f) -&gt; eval_FlavSkel(skel)(tp)(e),&#10;            case mk_FlavouredType(f, t) -&gt; eval_FlavouredType(skel)(e)others eval_VoidValType(skel)(e)&#10;            end) | [skel in set (elems skels), tp in set (x_type.tps)] &amp; (fls(skel) = x_fls(tp))} in&#10;              (not (exists [tp in set tps] &amp; (not (is_(tp, TrType) or (is_(tp, IntType) or (is_(tp, Float) or is_(tp, VoidType)))))) =&gt;&#10;                is_(tps, set of ((Float | IntType | TrType | VoidType)))))))))))&#10;"/>
<po column="24" line="2613" message="eval_UnionSkel, skel: unique existence binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2613:24&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            exists1 s in set (elems skels) &amp; (fls(s) = fl)))))))&#10;" number="922" object="" resource="newspeakSL" toString="eval_UnionSkel, skel: unique existence binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2613:24&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            exists1 s in set (elems skels) &amp; (fls(s) = fl)))))))&#10;"/>
<po column="52" line="2613" message="eval_UnionSkel, skel: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2613:52&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (forall s in set (elems skels) &amp;&#10;              s in set dom fls)))))))&#10;" number="923" object="" resource="newspeakSL" toString="eval_UnionSkel, skel: map apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2613:52&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (forall s in set (elems skels) &amp;&#10;              s in set dom fls)))))))&#10;"/>
<po column="44" line="2615" message="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2615:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel)(x_type), e)))))))))&#10;" number="924" object="" resource="newspeakSL" toString="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2615:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel)(x_type), e)))))))))&#10;"/>
<po column="44" line="2615" message="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2615:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel), x_type)))))))))&#10;" number="925" object="" resource="newspeakSL" toString="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2615:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                pre_(eval_FlavSkel(skel), x_type)))))))))&#10;"/>
<po column="58" line="2615" message="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2615:58&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                is_(skel, FlavSkel)))))))))&#10;" number="926" object="" resource="newspeakSL" toString="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2615:58&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;              let mk_FlavSkel(s, f) = skel in&#10;                is_(skel, FlavSkel)))))))))&#10;"/>
<po column="44" line="2616" message="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2616:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  pre_(eval_FlavouredType(skel), e))))))))))&#10;" number="927" object="" resource="newspeakSL" toString="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2616:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  pre_(eval_FlavouredType(skel), e))))))))))&#10;"/>
<po column="63" line="2616" message="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2616:63&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  is_(skel, FlavouredType))))))))))&#10;" number="928" object="" resource="newspeakSL" toString="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2616:63&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                let mk_FlavouredType(f, t) = skel in&#10;                  is_(skel, FlavouredType))))))))))&#10;"/>
<po column="44" line="2617" message="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2617:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  pre_(eval_VoidValType(skel), e))))))))))&#10;" number="929" object="" resource="newspeakSL" toString="eval_UnionSkel: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2617:44&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  pre_(eval_VoidValType(skel), e))))))))))&#10;"/>
<po column="61" line="2617" message="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2617:61&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  (is_(skel, Flavouring)))))))))))&#10;" number="930" object="" resource="newspeakSL" toString="eval_UnionSkel: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2617:61&#10;(forall mk_UnionSkel(skels):UnionSkel, x_type:Expressible_type, e:Env &amp;&#10;  (let fls:map ((FlavSkel | FlavouredType | VoidValType)) to (Flavdom) = {skel |-&gt; fl | skel in set (elems skels), fl:Flavdom &amp; (fl = (cases skel :&#10;  case mk_FlavSkel(skel, f) -&gt; eval_Flavouring(f),&#10;  case mk_FlavouredType(f, t) -&gt; eval_Flavouring(f)others eval_Flavouring(skel)&#10;  end))} in&#10;    (not ((card (dom fls)) &lt;&gt; (card (rng fls))) =&gt;&#10;      (not is_(x_type, UnionType) =&gt;&#10;        (let fl:(Expressible_type | Flavdom) = (if is_(x_type, VoidType)&#10;        then x_type&#10;        else (x_type.fl)) in&#10;          (not (fl not in set (rng fls)) =&gt;&#10;            (let skel:(FlavSkel | FlavouredType | VoidValType) = (iota s in set (elems skels) &amp; (fls(s) = fl)) in&#10;              (not exists mk_FlavSkel(s, f):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavSkel(s, f) = skel =&gt;&#10;                (not exists mk_FlavouredType(f, t):(FlavSkel | FlavouredType | VoidValType) &amp; mk_FlavouredType(f, t) = skel =&gt;&#10;                  (is_(skel, Flavouring)))))))))))&#10;"/>
<po column="11" line="2623" message="eval_NonStrucTest, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2623:11&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_SkeletonType(skel)((x.type)), e))&#10;" number="931" object="" resource="newspeakSL" toString="eval_NonStrucTest, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2623:11&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_SkeletonType(skel)((x.type)), e))&#10;"/>
<po column="11" line="2623" message="eval_NonStrucTest, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2623:11&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_SkeletonType(skel), (x.type)))&#10;" number="932" object="" resource="newspeakSL" toString="eval_NonStrucTest, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2623:11&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  pre_(eval_SkeletonType(skel), (x.type)))&#10;"/>
<po column="38" line="2628" message="eval_NonStrucTest, t': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2628:38&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (not (fl = nil) =&gt;&#10;        ((is_(t, Float)) or&#10;        (is_(t, IntType)) or&#10;        (is_(t, StructureType)) or&#10;        (is_(t, TrType)) or&#10;        (is_(t, UnionType)) or&#10;        (is_(t, VectorType)) or&#10;        (is_(t, VoidType)))))))&#10;" number="933" object="" resource="newspeakSL" toString="eval_NonStrucTest, t': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2628:38&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (not (fl = nil) =&gt;&#10;        ((is_(t, Float)) or&#10;        (is_(t, IntType)) or&#10;        (is_(t, StructureType)) or&#10;        (is_(t, TrType)) or&#10;        (is_(t, UnionType)) or&#10;        (is_(t, VectorType)) or&#10;        (is_(t, VoidType)))))))&#10;"/>
<po column="56" line="2628" message="eval_NonStrucTest, t': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2628:56&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (not (fl = nil) =&gt;&#10;        is_(fl, Flavouring)))))&#10;" number="934" object="" resource="newspeakSL" toString="eval_NonStrucTest, t': subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2628:56&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (not (fl = nil) =&gt;&#10;        is_(fl, Flavouring)))))&#10;"/>
<po column="20" line="2631" message="eval_NonStrucTest: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:20&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          pre_(update_env(id)(x), e))))))&#10;" number="935" object="" resource="newspeakSL" toString="eval_NonStrucTest: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:20&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          pre_(update_env(id)(x), e))))))&#10;"/>
<po column="20" line="2631" message="eval_NonStrucTest: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:20&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          pre_(update_env(id), x))))))&#10;" number="936" object="" resource="newspeakSL" toString="eval_NonStrucTest: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:20&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          pre_(update_env(id), x))))))&#10;"/>
<po column="35" line="2631" message="eval_NonStrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:35&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          ((is_(x, Errvalue))))))))&#10;" number="937" object="" resource="newspeakSL" toString="eval_NonStrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:35&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          ((is_(x, Errvalue))))))))&#10;"/>
<po column="31" line="2631" message="eval_NonStrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:31&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          (is_(id, token)))))))&#10;" number="938" object="" resource="newspeakSL" toString="eval_NonStrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2631:31&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in&#10;    (not (t = &lt;err&gt;) =&gt;&#10;      (let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;      then t&#10;      else replace_flavour(t, eval_Flavouring(fl))) in&#10;        (not (id = nil) =&gt;&#10;          (is_(id, token)))))))&#10;"/>
<po column="1" line="2620" message="eval_NonStrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2620:1&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (is_(let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in (if (t = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;  then t&#10;  else replace_flavour(t, eval_Flavouring(fl))) in (if (id = nil)&#10;  then mk_(t', e, (ps.time))&#10;  else mk_(t', update_env(id)(x)(e), (ps.time)))), (Expressible_type * Env * Time))) or&#10;  (is_(let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in (if (t = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;  then t&#10;  else replace_flavour(t, eval_Flavouring(fl))) in (if (id = nil)&#10;  then mk_(t', e, (ps.time))&#10;  else mk_(t', update_env(id)(x)(e), (ps.time)))), Errvalue)))&#10;" number="939" object="" resource="newspeakSL" toString="eval_NonStrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2620:1&#10;(forall mk_NonStrucTest(id, fl, skel):NonStrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (is_(let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in (if (t = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;  then t&#10;  else replace_flavour(t, eval_Flavouring(fl))) in (if (id = nil)&#10;  then mk_(t', e, (ps.time))&#10;  else mk_(t', update_env(id)(x)(e), (ps.time)))), (Expressible_type * Env * Time))) or&#10;  (is_(let t:(Errvalue | Expressible_type) = eval_SkeletonType(skel)((x.type))(e) in (if (t = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else let t':(Errvalue | Expressible_type) = (if (fl = nil)&#10;  then t&#10;  else replace_flavour(t, eval_Flavouring(fl))) in (if (id = nil)&#10;  then mk_(t', e, (ps.time))&#10;  else mk_(t', update_env(id)(x)(e), (ps.time)))), Errvalue)))&#10;"/>
<po column="32" line="2640" message="eval_StrucTest, xs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2640:32&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (forall i in set (inds (x.val)) &amp;&#10;        ((is_((x.val)(i), bool)) or&#10;        (is_((x.val)(i), real) and is_real((x.val)(i))))))))&#10;" number="940" object="" resource="newspeakSL" toString="eval_StrucTest, xs: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2640:32&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (forall i in set (inds (x.val)) &amp;&#10;        ((is_((x.val)(i), bool)) or&#10;        (is_((x.val)(i), real) and is_real((x.val)(i))))))))&#10;"/>
<po column="32" line="2640" message="eval_StrucTest, xs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2640:32&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (forall i in set (inds (x.val)) &amp;&#10;        i in set inds (x.val)))))&#10;" number="941" object="" resource="newspeakSL" toString="eval_StrucTest, xs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2640:32&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (forall i in set (inds (x.val)) &amp;&#10;        i in set inds (x.val)))))&#10;"/>
<po column="41" line="2640" message="eval_StrucTest, xs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2640:41&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (forall i in set (inds (x.val)) &amp;&#10;        i in set inds ((x.type).tps)))))&#10;" number="942" object="" resource="newspeakSL" toString="eval_StrucTest, xs: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2640:41&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (forall i in set (inds (x.val)) &amp;&#10;        i in set inds ((x.type).tps)))))&#10;"/>
<po column="17" line="2642" message="eval_StrucTest, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2642:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        pre_(eval_Testseq(tests)(xs)(e), ps)))))&#10;" number="943" object="" resource="newspeakSL" toString="eval_StrucTest, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2642:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        pre_(eval_Testseq(tests)(xs)(e), ps)))))&#10;"/>
<po column="17" line="2642" message="eval_StrucTest, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2642:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        pre_(eval_Testseq(tests)(xs), e)))))&#10;" number="944" object="" resource="newspeakSL" toString="eval_StrucTest, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2642:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        pre_(eval_Testseq(tests)(xs), e)))))&#10;"/>
<po column="17" line="2642" message="eval_StrucTest, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2642:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        pre_(eval_Testseq(tests), xs)))))&#10;" number="945" object="" resource="newspeakSL" toString="eval_StrucTest, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2642:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        pre_(eval_Testseq(tests), xs)))))&#10;"/>
<po column="17" line="2645" message="eval_StrucTest, tps, env, time: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2645:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq(tests)(xs)(e)(ps) in&#10;          (not (ts = &lt;err&gt;) =&gt;&#10;            exists mk_(tps, env, time):((seq of (Expressible_type) * Env * Time) | Errvalue) &amp; mk_(tps, env, time) = ts))))))&#10;" number="946" object="" resource="newspeakSL" toString="eval_StrucTest, tps, env, time: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2645:17&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq(tests)(xs)(e)(ps) in&#10;          (not (ts = &lt;err&gt;) =&gt;&#10;            exists mk_(tps, env, time):((seq of (Expressible_type) * Env * Time) | Errvalue) &amp; mk_(tps, env, time) = ts))))))&#10;"/>
<po column="37" line="2645" message="eval_StrucTest, tps, env, time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2645:37&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq(tests)(xs)(e)(ps) in&#10;          (not (ts = &lt;err&gt;) =&gt;&#10;            is_(ts, (seq of (Expressible_type) * Env * Time))))))))&#10;" number="947" object="" resource="newspeakSL" toString="eval_StrucTest, tps, env, time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2645:37&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq(tests)(xs)(e)(ps) in&#10;          (not (ts = &lt;err&gt;) =&gt;&#10;            is_(ts, (seq of (Expressible_type) * Env * Time))))))))&#10;"/>
<po column="34" line="2646" message="eval_StrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2646:34&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq(tests)(xs)(e)(ps) in&#10;          (not (ts = &lt;err&gt;) =&gt;&#10;            (let mk_(tps, env, time):((seq of (Expressible_type) * Env * Time) | Errvalue) = ts in&#10;              is_(tps, seq1 of (CompType)))))))))&#10;" number="948" object="" resource="newspeakSL" toString="eval_StrucTest: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2646:34&#10;(forall mk_StrucTest(tests):StrucTest, x:Expressible_value, e:Env, ps:PState &amp;&#10;  (not (not is_(x, Structure)) =&gt;&#10;    (not (struc_length((x.type)) &lt;&gt; (len tests)) =&gt;&#10;      (let xs:seq of (Expressible_value) = [construct_ev((x.val)(i), ((x.type).tps)(i)) | i in set (inds (x.val))] in&#10;        (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq(tests)(xs)(e)(ps) in&#10;          (not (ts = &lt;err&gt;) =&gt;&#10;            (let mk_(tps, env, time):((seq of (Expressible_type) * Env * Time) | Errvalue) = ts in&#10;              is_(tps, seq1 of (CompType)))))))))&#10;"/>
<po column="22" line="2654" message="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2654:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    tests &lt;&gt; []))&#10;" number="949" object="" resource="newspeakSL" toString="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2654:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    tests &lt;&gt; []))&#10;"/>
<po column="29" line="2655" message="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2655:29&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (((hd tests) = &lt;nil&gt;) =&gt;&#10;      xs &lt;&gt; [])))&#10;" number="950" object="" resource="newspeakSL" toString="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2655:29&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (((hd tests) = &lt;nil&gt;) =&gt;&#10;      xs &lt;&gt; [])))&#10;"/>
<po column="21" line="2656" message="eval_Testseq, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:21&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      pre_(eval_NonStrucTest((hd tests))((hd xs))(e), ps))))&#10;" number="951" object="" resource="newspeakSL" toString="eval_Testseq, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:21&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      pre_(eval_NonStrucTest((hd tests))((hd xs))(e), ps))))&#10;"/>
<po column="21" line="2656" message="eval_Testseq, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:21&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      pre_(eval_NonStrucTest((hd tests))((hd xs)), e))))&#10;" number="952" object="" resource="newspeakSL" toString="eval_Testseq, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:21&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      pre_(eval_NonStrucTest((hd tests))((hd xs)), e))))&#10;"/>
<po column="21" line="2656" message="eval_Testseq, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:21&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      pre_(eval_NonStrucTest((hd tests)), (hd xs)))))&#10;" number="953" object="" resource="newspeakSL" toString="eval_Testseq, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:21&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      pre_(eval_NonStrucTest((hd tests)), (hd xs)))))&#10;"/>
<po column="39" line="2656" message="eval_Testseq, t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:39&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      is_((hd tests), NonStrucTest))))&#10;" number="954" object="" resource="newspeakSL" toString="eval_Testseq, t: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:39&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      is_((hd tests), NonStrucTest))))&#10;"/>
<po column="42" line="2656" message="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:42&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      tests &lt;&gt; [])))&#10;" number="955" object="" resource="newspeakSL" toString="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:42&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      tests &lt;&gt; [])))&#10;"/>
<po column="52" line="2656" message="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:52&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      xs &lt;&gt; [])))&#10;" number="956" object="" resource="newspeakSL" toString="eval_Testseq, t: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2656:52&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (not ((hd tests) = &lt;nil&gt;) =&gt;&#10;      xs &lt;&gt; [])))&#10;"/>
<po column="17" line="2659" message="eval_Testseq, tp, env, time: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2659:17&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        exists mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) &amp; mk_(tp, env, time) = t))))&#10;" number="957" object="" resource="newspeakSL" toString="eval_Testseq, tp, env, time: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2659:17&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        exists mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) &amp; mk_(tp, env, time) = t))))&#10;"/>
<po column="36" line="2659" message="eval_Testseq, tp, env, time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2659:36&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (is_(t, ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time))) or&#10;        (is_(t, (Expressible_type * Env * Time)))))))&#10;" number="958" object="" resource="newspeakSL" toString="eval_Testseq, tp, env, time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2659:36&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (is_(t, ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time))) or&#10;        (is_(t, (Expressible_type * Env * Time)))))))&#10;"/>
<po column="22" line="2660" message="eval_Testseq, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          pre_(eval_Testseq((tl tests))((tl xs))(env), mu(ps, time |-&gt; time)))))))&#10;" number="959" object="" resource="newspeakSL" toString="eval_Testseq, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          pre_(eval_Testseq((tl tests))((tl xs))(env), mu(ps, time |-&gt; time)))))))&#10;"/>
<po column="22" line="2660" message="eval_Testseq, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          pre_(eval_Testseq((tl tests))((tl xs)), env))))))&#10;" number="960" object="" resource="newspeakSL" toString="eval_Testseq, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          pre_(eval_Testseq((tl tests))((tl xs)), env))))))&#10;"/>
<po column="22" line="2660" message="eval_Testseq, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          pre_(eval_Testseq((tl tests)), (tl xs)))))))&#10;" number="961" object="" resource="newspeakSL" toString="eval_Testseq, ts: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          pre_(eval_Testseq((tl tests)), (tl xs)))))))&#10;"/>
<po column="38" line="2660" message="eval_Testseq, ts: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:38&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          tests &lt;&gt; [])))))&#10;" number="962" object="" resource="newspeakSL" toString="eval_Testseq, ts: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:38&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          tests &lt;&gt; [])))))&#10;"/>
<po column="48" line="2660" message="eval_Testseq, ts: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:48&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          xs &lt;&gt; [])))))&#10;" number="963" object="" resource="newspeakSL" toString="eval_Testseq, ts: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2660:48&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          xs &lt;&gt; [])))))&#10;"/>
<po column="22" line="2664" message="eval_Testseq, tps, n_env, n_time: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2664:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq((tl tests))((tl xs))(env)(mu(ps, time |-&gt; time)) in&#10;            (not (ts = &lt;err&gt;) =&gt;&#10;              exists mk_(tps, n_env, n_time):((seq of (Expressible_type) * Env * Time) | Errvalue) &amp; mk_(tps, n_env, n_time) = ts)))))))&#10;" number="964" object="" resource="newspeakSL" toString="eval_Testseq, tps, n_env, n_time: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2664:22&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq((tl tests))((tl xs))(env)(mu(ps, time |-&gt; time)) in&#10;            (not (ts = &lt;err&gt;) =&gt;&#10;              exists mk_(tps, n_env, n_time):((seq of (Expressible_type) * Env * Time) | Errvalue) &amp; mk_(tps, n_env, n_time) = ts)))))))&#10;"/>
<po column="46" line="2664" message="eval_Testseq, tps, n_env, n_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2664:46&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq((tl tests))((tl xs))(env)(mu(ps, time |-&gt; time)) in&#10;            (not (ts = &lt;err&gt;) =&gt;&#10;              is_(ts, (seq of (Expressible_type) * Env * Time)))))))))&#10;" number="965" object="" resource="newspeakSL" toString="eval_Testseq, tps, n_env, n_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2664:46&#10;(forall tests:seq of ((&lt;nil&gt; | NonStrucTest)), xs:seq of (Expressible_value), e:Env, ps:PState &amp;&#10;  (not (tests = []) =&gt;&#10;    (let t:(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = (if ((hd tests) = &lt;nil&gt;)&#10;    then mk_(((hd xs).type), e, (ps.time))&#10;    else eval_NonStrucTest((hd tests))((hd xs))(e)(ps)) in&#10;      (not (t = &lt;err&gt;) =&gt;&#10;        (let mk_(tp, env, time):(((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType) * Env * Time) | (Expressible_type * Env * Time) | Errvalue) = t in&#10;          (let ts:((seq of (Expressible_type) * Env * Time) | Errvalue) = eval_Testseq((tl tests))((tl xs))(env)(mu(ps, time |-&gt; time)) in&#10;            (not (ts = &lt;err&gt;) =&gt;&#10;              is_(ts, (seq of (Expressible_type) * Env * Time)))))))))&#10;"/>
<po column="8" line="2670" message="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2670:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterIntLoop(oul)(e), ps)))&#10;" number="966" object="" resource="newspeakSL" toString="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2670:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterIntLoop(oul)(e), ps)))&#10;"/>
<po column="8" line="2670" message="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2670:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterIntLoop(oul), e)))&#10;" number="967" object="" resource="newspeakSL" toString="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2670:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterIntLoop(oul), e)))&#10;"/>
<po column="8" line="2671" message="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2671:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (not is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterVecLoop(oul)(e), ps)))&#10;" number="968" object="" resource="newspeakSL" toString="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2671:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (not is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterVecLoop(oul)(e), ps)))&#10;"/>
<po column="8" line="2671" message="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2671:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (not is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterVecLoop(oul), e)))&#10;" number="969" object="" resource="newspeakSL" toString="eval_OuterLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2671:8&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (not is_(oul, OuterIntLoop) =&gt;&#10;    pre_(eval_OuterVecLoop(oul), e)))&#10;"/>
<po column="26" line="2671" message="eval_OuterLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2671:26&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (not is_(oul, OuterIntLoop) =&gt;&#10;    is_(oul, OuterVecLoop)))&#10;" number="970" object="" resource="newspeakSL" toString="eval_OuterLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2671:26&#10;(forall mk_OuterLoop(oul):OuterLoop, e:Env, ps:PState &amp;&#10;  (not is_(oul, OuterIntLoop) =&gt;&#10;    is_(oul, OuterVecLoop)))&#10;"/>
<po column="16" line="2675" message="eval_OuterIntLoop, nrange: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2675:16&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_Range(range), e))&#10;" number="971" object="" resource="newspeakSL" toString="eval_OuterIntLoop, nrange: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2675:16&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_Range(range), e))&#10;"/>
<po column="25" line="2678" message="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:25&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e)), mu(ps, time |-&gt; zerot))))))&#10;" number="972" object="" resource="newspeakSL" toString="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:25&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e)), mu(ps, time |-&gt; zerot))))))&#10;"/>
<po column="25" line="2678" message="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:25&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(eval_Sequence(actns), update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))))))&#10;" number="973" object="" resource="newspeakSL" toString="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:25&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(eval_Sequence(actns), update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))))))&#10;"/>
<po column="46" line="2678" message="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:46&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {})))), e)))))&#10;" number="974" object="" resource="newspeakSL" toString="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:46&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {})))), e)))))&#10;"/>
<po column="46" line="2678" message="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:46&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(update_env(id), mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))))))&#10;" number="975" object="" resource="newspeakSL" toString="eval_OuterIntLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2678:46&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (forall i in set nrange &amp;&#10;        pre_(update_env(id), mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))))))&#10;"/>
<po column="30" line="2683" message="eval_OuterIntLoop, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2683:30&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          is_([((vec_elems(i).val).type) | i in set (inds vec_elems)], seq1 of (Expressible_type)))))))&#10;" number="976" object="" resource="newspeakSL" toString="eval_OuterIntLoop, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2683:30&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          is_([((vec_elems(i).val).type) | i in set (inds vec_elems)], seq1 of (Expressible_type)))))))&#10;"/>
<po column="31" line="2683" message="eval_OuterIntLoop, type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2683:31&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (forall i in set (inds vec_elems) &amp;&#10;            i in set inds vec_elems))))))&#10;" number="977" object="" resource="newspeakSL" toString="eval_OuterIntLoop, type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2683:31&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (forall i in set (inds vec_elems) &amp;&#10;            i in set inds vec_elems))))))&#10;"/>
<po column="31" line="2684" message="eval_OuterIntLoop, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2684:31&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (forall i in set (inds vec_elems) &amp;&#10;            i in set inds vec_elems))))))&#10;" number="978" object="" resource="newspeakSL" toString="eval_OuterIntLoop, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2684:31&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (forall i in set (inds vec_elems) &amp;&#10;            i in set inds vec_elems))))))&#10;"/>
<po column="39" line="2689" message="eval_OuterIntLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2689:39&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              ((is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                (forall i in set (inds vec_elems) &amp;&#10;                  i in set inds vec_elems)))))))))&#10;" number="979" object="" resource="newspeakSL" toString="eval_OuterIntLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2689:39&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              ((is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                (forall i in set (inds vec_elems) &amp;&#10;                  i in set inds vec_elems)))))))))&#10;"/>
<po column="39" line="2691" message="eval_OuterIntLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2691:39&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              (not (is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                (forall i in set (inds vec_elems) &amp;&#10;                  i in set inds vec_elems)))))))))&#10;" number="980" object="" resource="newspeakSL" toString="eval_OuterIntLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2691:39&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              (not (is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                (forall i in set (inds vec_elems) &amp;&#10;                  i in set inds vec_elems)))))))))&#10;"/>
<po column="29" line="2694" message="eval_OuterIntLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2694:29&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              (let vec_val:(seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) | seq of (Expressible_value)) = (if (is_(type, StructureType) or is_(type, VectorType))&#10;              then [((vec_elems(i).val).val) | i in set (inds vec_elems)]&#10;              else [(vec_elems(i).val) | i in set (inds vec_elems)]) in&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;" number="981" object="" resource="newspeakSL" toString="eval_OuterIntLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2694:29&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              (let vec_val:(seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) | seq of (Expressible_value)) = (if (is_(type, StructureType) or is_(type, VectorType))&#10;              then [((vec_elems(i).val).val) | i in set (inds vec_elems)]&#10;              else [(vec_elems(i).val) | i in set (inds vec_elems)]) in&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;"/>
<po column="44" line="2693" message="eval_OuterIntLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2693:44&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              (let vec_val:(seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) | seq of (Expressible_value)) = (if (is_(type, StructureType) or is_(type, VectorType))&#10;              then [((vec_elems(i).val).val) | i in set (inds vec_elems)]&#10;              else [(vec_elems(i).val) | i in set (inds vec_elems)]) in&#10;                ((is_(vec_val, seq1 of (Errvalue))) or&#10;                (is_(vec_val, seq1 of (Int))) or&#10;                (is_(vec_val, seq1 of (Real))) or&#10;                (is_(vec_val, seq1 of (StructValue))) or&#10;                (is_(vec_val, seq1 of (Tr))) or&#10;                (is_(vec_val, seq1 of (VectorValue))) or&#10;                (is_(vec_val, seq1 of (Void))))))))))))&#10;" number="982" object="" resource="newspeakSL" toString="eval_OuterIntLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2693:44&#10;(forall mk_OuterIntLoop(mk_OverRange(id, range), actns):OuterIntLoop, e:Env, ps:PState &amp;&#10;  (let nrange:(Errvalue | set of (int)) = eval_Range(range)(e) in&#10;    (not (nrange = &lt;err&gt;) =&gt;&#10;      (let vec_elems:seq of (EST_value) = [eval_Sequence(actns)(update_env(id)(mk_Storable_value(mk_Int(i, mk_IntType(&lt;word&gt;, {i}, {}))))(e))(mu(ps, time |-&gt; zerot)) | i in set nrange] in&#10;        (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;          (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus([(vec_elems(i).time) | i in set (inds vec_elems)]) in&#10;            (not (type = &lt;err&gt;) =&gt;&#10;              (let vec_val:(seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) | seq of (Expressible_value)) = (if (is_(type, StructureType) or is_(type, VectorType))&#10;              then [((vec_elems(i).val).val) | i in set (inds vec_elems)]&#10;              else [(vec_elems(i).val) | i in set (inds vec_elems)]) in&#10;                ((is_(vec_val, seq1 of (Errvalue))) or&#10;                (is_(vec_val, seq1 of (Int))) or&#10;                (is_(vec_val, seq1 of (Real))) or&#10;                (is_(vec_val, seq1 of (StructValue))) or&#10;                (is_(vec_val, seq1 of (Tr))) or&#10;                (is_(vec_val, seq1 of (VectorValue))) or&#10;                (is_(vec_val, seq1 of (Void))))))))))))&#10;"/>
<po column="14" line="2698" message="eval_OuterVecLoop, idvs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2698:14&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs)(e), ps))&#10;" number="983" object="" resource="newspeakSL" toString="eval_OuterVecLoop, idvs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2698:14&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs)(e), ps))&#10;"/>
<po column="14" line="2698" message="eval_OuterVecLoop, idvs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2698:14&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs), e))&#10;" number="984" object="" resource="newspeakSL" toString="eval_OuterVecLoop, idvs: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2698:14&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs), e))&#10;"/>
<po column="47" line="2701" message="eval_OuterVecLoop, time1, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2701:47&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i in set (inds idvs) &amp;&#10;        i in set inds idvs))))&#10;" number="985" object="" resource="newspeakSL" toString="eval_OuterVecLoop, time1, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2701:47&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i in set (inds idvs) &amp;&#10;        i in set inds idvs))))&#10;"/>
<po column="24" line="2704" message="eval_OuterVecLoop, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2704:24&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i:nat &amp;&#10;        pre_(multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;        then []&#10;        else [mk_((ovs.cnt), i)]))), e)))))&#10;" number="986" object="" resource="newspeakSL" toString="eval_OuterVecLoop, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2704:24&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i:nat &amp;&#10;        pre_(multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;        then []&#10;        else [mk_((ovs.cnt), i)]))), e)))))&#10;"/>
<po column="65" line="2706" message="eval_OuterVecLoop, new_env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2706:65&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i:nat &amp;&#10;        is_(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;        then []&#10;        else [mk_((ovs.cnt), i)])), seq of ((Id * Denotable_value)))))))&#10;" number="987" object="" resource="newspeakSL" toString="eval_OuterVecLoop, new_env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2706:65&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i:nat &amp;&#10;        is_(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;        then []&#10;        else [mk_((ovs.cnt), i)])), seq of ((Id * Denotable_value)))))))&#10;"/>
<po column="61" line="2704" message="eval_OuterVecLoop, new_env, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2704:61&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i:nat &amp;&#10;        (forall j in set (inds idvs) &amp;&#10;          j in set inds idvs)))))&#10;" number="988" object="" resource="newspeakSL" toString="eval_OuterVecLoop, new_env, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2704:61&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (forall i:nat &amp;&#10;        (forall j in set (inds idvs) &amp;&#10;          j in set inds idvs)))))&#10;"/>
<po column="25" line="2709" message="eval_OuterVecLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2709:25&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (forall i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val)) &amp;&#10;          pre_(eval_Sequence(actions)(new_env(i)), mu(ps, time |-&gt; zerot)))))))&#10;" number="989" object="" resource="newspeakSL" toString="eval_OuterVecLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2709:25&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (forall i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val)) &amp;&#10;          pre_(eval_Sequence(actions)(new_env(i)), mu(ps, time |-&gt; zerot)))))))&#10;"/>
<po column="25" line="2709" message="eval_OuterVecLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2709:25&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (forall i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val)) &amp;&#10;          pre_(eval_Sequence(actions), new_env(i)))))))&#10;" number="990" object="" resource="newspeakSL" toString="eval_OuterVecLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2709:25&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (forall i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val)) &amp;&#10;          pre_(eval_Sequence(actions), new_env(i)))))))&#10;"/>
<po column="48" line="2709" message="eval_OuterVecLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2709:48&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (forall i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val)) &amp;&#10;          pre_(new_env, i))))))&#10;" number="991" object="" resource="newspeakSL" toString="eval_OuterVecLoop, vec_elems: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2709:48&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (forall i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val)) &amp;&#10;          pre_(new_env, i))))))&#10;"/>
<po column="34" line="2711" message="eval_OuterVecLoop, vec_elems, i1, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2711:34&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        1 in set inds idvs))))&#10;" number="992" object="" resource="newspeakSL" toString="eval_OuterVecLoop, vec_elems, i1, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2711:34&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        1 in set inds idvs))))&#10;"/>
<po column="31" line="2714" message="eval_OuterVecLoop, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2714:31&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            is_([((vec_elems(i).val).type) | i in set (inds vec_elems)], seq1 of (Expressible_type))))))))&#10;" number="993" object="" resource="newspeakSL" toString="eval_OuterVecLoop, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2714:31&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            is_([((vec_elems(i).val).type) | i in set (inds vec_elems)], seq1 of (Expressible_type))))))))&#10;"/>
<po column="32" line="2714" message="eval_OuterVecLoop, type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2714:32&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (forall i in set (inds vec_elems) &amp;&#10;              i in set inds vec_elems)))))))&#10;" number="994" object="" resource="newspeakSL" toString="eval_OuterVecLoop, type: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2714:32&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (forall i in set (inds vec_elems) &amp;&#10;              i in set inds vec_elems)))))))&#10;"/>
<po column="32" line="2716" message="eval_OuterVecLoop, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2716:32&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (forall i in set (inds vec_elems) &amp;&#10;              i in set inds vec_elems)))))))&#10;" number="995" object="" resource="newspeakSL" toString="eval_OuterVecLoop, time: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2716:32&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (forall i in set (inds vec_elems) &amp;&#10;              i in set inds vec_elems)))))))&#10;"/>
<po column="61" line="2720" message="eval_OuterVecLoop, new_tp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2720:61&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;" number="996" object="" resource="newspeakSL" toString="eval_OuterVecLoop, new_tp: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2720:61&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                ((is_(type, Float)) or&#10;                (is_(type, IntType)) or&#10;                (is_(type, StructureType)) or&#10;                (is_(type, TrType)) or&#10;                (is_(type, UnionType)) or&#10;                (is_(type, VectorType)) or&#10;                (is_(type, VoidType)))))))))))&#10;"/>
<po column="39" line="2723" message="eval_OuterVecLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2723:39&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (let new_tp:VectorType = mk_VectorType(1, (len vec_elems), type, {}) in&#10;                  ((is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                    (forall i in set (inds vec_elems) &amp;&#10;                      i in set inds vec_elems)))))))))))&#10;" number="997" object="" resource="newspeakSL" toString="eval_OuterVecLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2723:39&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (let new_tp:VectorType = mk_VectorType(1, (len vec_elems), type, {}) in&#10;                  ((is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                    (forall i in set (inds vec_elems) &amp;&#10;                      i in set inds vec_elems)))))))))))&#10;"/>
<po column="39" line="2725" message="eval_OuterVecLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2725:39&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (let new_tp:VectorType = mk_VectorType(1, (len vec_elems), type, {}) in&#10;                  (not (is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                    (forall i in set (inds vec_elems) &amp;&#10;                      i in set inds vec_elems)))))))))))&#10;" number="998" object="" resource="newspeakSL" toString="eval_OuterVecLoop, vec_val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2725:39&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (let new_tp:VectorType = mk_VectorType(1, (len vec_elems), type, {}) in&#10;                  (not (is_(type, StructureType) or is_(type, VectorType)) =&gt;&#10;                    (forall i in set (inds vec_elems) &amp;&#10;                      i in set inds vec_elems)))))))))))&#10;"/>
<po column="42" line="2727" message="eval_OuterVecLoop, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2727:42&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (let new_tp:VectorType = mk_VectorType(1, (len vec_elems), type, {}) in&#10;                  (let vec_val:(seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) | seq of (Expressible_value)) = (if (is_(type, StructureType) or is_(type, VectorType))&#10;                  then [((vec_elems(i).val).val) | i in set (inds vec_elems)]&#10;                  else [(vec_elems(i).val) | i in set (inds vec_elems)]) in&#10;                    ((is_(vec_val, seq1 of (Errvalue))) or&#10;                    (is_(vec_val, seq1 of (Int))) or&#10;                    (is_(vec_val, seq1 of (Real))) or&#10;                    (is_(vec_val, seq1 of (StructValue))) or&#10;                    (is_(vec_val, seq1 of (Tr))) or&#10;                    (is_(vec_val, seq1 of (VectorValue))) or&#10;                    (is_(vec_val, seq1 of (Void))))))))))))))&#10;" number="999" object="" resource="newspeakSL" toString="eval_OuterVecLoop, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2727:42&#10;(forall mk_OuterVecLoop(ovs, actions):OuterVecLoop, e:Env, ps:PState &amp;&#10;  (let idvs:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (idvs = &lt;err&gt;) =&gt;&#10;      (let time1:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = idvs(i) in t | i in set (inds idvs)]), new_env:(nat -&gt; Env) = (lambda [i:nat] &amp; multi_update_env(([let mk_(id, v, t):(Id * Vector * Time) = idvs(j) in mk_(id, vector_extract(v, i)) | j in set (inds idvs)] ^ (if ((ovs.cnt) = nil)&#10;      then []&#10;      else [mk_((ovs.cnt), i)])))(e)) in&#10;        (let vec_elems:seq of (EST_value) = [eval_Sequence(actions)(new_env(i))(mu(ps, time |-&gt; zerot)) | i in set let mk_(i1, v, t):(Id * Vector * Time) = idvs(1) in (inds (v.val))] in&#10;          (not (&lt;err&gt; in set {(x.val) | [x in set (elems vec_elems)]}) =&gt;&#10;            (let type:(Errvalue | Expressible_type) = seqlub([((vec_elems(i).val).type) | i in set (inds vec_elems)]), time:Time = dtplus(([(vec_elems(i).time) | i in set (inds vec_elems)] ^ [time1])) in&#10;              (not (type = &lt;err&gt;) =&gt;&#10;                (let new_tp:VectorType = mk_VectorType(1, (len vec_elems), type, {}) in&#10;                  (let vec_val:(seq of ((&lt;nil&gt; | StructValue | UnionValue | VectorValue | bool | real)) | seq of (Expressible_value)) = (if (is_(type, StructureType) or is_(type, VectorType))&#10;                  then [((vec_elems(i).val).val) | i in set (inds vec_elems)]&#10;                  else [(vec_elems(i).val) | i in set (inds vec_elems)]) in&#10;                    ((is_(vec_val, seq1 of (Errvalue))) or&#10;                    (is_(vec_val, seq1 of (Int))) or&#10;                    (is_(vec_val, seq1 of (Real))) or&#10;                    (is_(vec_val, seq1 of (StructValue))) or&#10;                    (is_(vec_val, seq1 of (Tr))) or&#10;                    (is_(vec_val, seq1 of (VectorValue))) or&#10;                    (is_(vec_val, seq1 of (Void))))))))))))))&#10;"/>
<po column="47" line="2733" message="eval_OverVectors, indices, id, val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2733:47&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (forall i in set (inds (ovs.ovv)) &amp;&#10;    i in set inds (ovs.ovv)))&#10;" number="1000" object="" resource="newspeakSL" toString="eval_OverVectors, indices, id, val: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2733:47&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (forall i in set (inds (ovs.ovv)) &amp;&#10;    i in set inds (ovs.ovv)))&#10;"/>
<po column="27" line="2734" message="eval_OverVectors, indices, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2734:27&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (forall i in set (inds (ovs.ovv)) &amp;&#10;    (let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in&#10;      pre_(eval_Operation(val)(e), mu(ps, time |-&gt; zerot)))))&#10;" number="1001" object="" resource="newspeakSL" toString="eval_OverVectors, indices, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2734:27&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (forall i in set (inds (ovs.ovv)) &amp;&#10;    (let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in&#10;      pre_(eval_Operation(val)(e), mu(ps, time |-&gt; zerot)))))&#10;"/>
<po column="27" line="2734" message="eval_OverVectors, indices, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2734:27&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (forall i in set (inds (ovs.ovv)) &amp;&#10;    (let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in&#10;      pre_(eval_Operation(val), e))))&#10;" number="1002" object="" resource="newspeakSL" toString="eval_OverVectors, indices, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2734:27&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (forall i in set (inds (ovs.ovv)) &amp;&#10;    (let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in&#10;      pre_(eval_Operation(val), e))))&#10;"/>
<po column="55" line="2736" message="eval_OverVectors, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2736:55&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (let indices:seq of ((Id * Expressible_value * Time)) = [let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in let x:EST_value = eval_Operation(val)(e)(mu(ps, time |-&gt; zerot)) in mk_(id, (x.val), (x.time)) | i in set (inds (ovs.ovv))] in&#10;    (forall i in set (inds indices) &amp;&#10;      i in set inds indices)))&#10;" number="1003" object="" resource="newspeakSL" toString="eval_OverVectors, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2736:55&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (let indices:seq of ((Id * Expressible_value * Time)) = [let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in let x:EST_value = eval_Operation(val)(e)(mu(ps, time |-&gt; zerot)) in mk_(id, (x.val), (x.time)) | i in set (inds (ovs.ovv))] in&#10;    (forall i in set (inds indices) &amp;&#10;      i in set inds indices)))&#10;"/>
<po column="1" line="2730" message="eval_OverVectors: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2730:1&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (is_(let indices:seq of ((Id * Expressible_value * Time)) = [let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in let x:EST_value = eval_Operation(val)(e)(mu(ps, time |-&gt; zerot)) in mk_(id, (x.val), (x.time)) | i in set (inds (ovs.ovv))] in (if (exists [i in set (inds indices)] &amp; let mk_(id, v, t):(Id * Expressible_value * Time) = indices(i) in (not is_(v, Vector)))&#10;  then &lt;err&gt;&#10;  else indices), Errvalue)) or&#10;  (is_(let indices:seq of ((Id * Expressible_value * Time)) = [let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in let x:EST_value = eval_Operation(val)(e)(mu(ps, time |-&gt; zerot)) in mk_(id, (x.val), (x.time)) | i in set (inds (ovs.ovv))] in (if (exists [i in set (inds indices)] &amp; let mk_(id, v, t):(Id * Expressible_value * Time) = indices(i) in (not is_(v, Vector)))&#10;  then &lt;err&gt;&#10;  else indices), seq1 of ((Id * Vector * Time)))))&#10;" number="1004" object="" resource="newspeakSL" toString="eval_OverVectors: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2730:1&#10;(forall ovs:OverVectors, e:Env, ps:PState &amp;&#10;  (is_(let indices:seq of ((Id * Expressible_value * Time)) = [let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in let x:EST_value = eval_Operation(val)(e)(mu(ps, time |-&gt; zerot)) in mk_(id, (x.val), (x.time)) | i in set (inds (ovs.ovv))] in (if (exists [i in set (inds indices)] &amp; let mk_(id, v, t):(Id * Expressible_value * Time) = indices(i) in (not is_(v, Vector)))&#10;  then &lt;err&gt;&#10;  else indices), Errvalue)) or&#10;  (is_(let indices:seq of ((Id * Expressible_value * Time)) = [let mk_OverVector(id, val):OverVector = (ovs.ovv)(i) in let x:EST_value = eval_Operation(val)(e)(mu(ps, time |-&gt; zerot)) in mk_(id, (x.val), (x.time)) | i in set (inds (ovs.ovv))] in (if (exists [i in set (inds indices)] &amp; let mk_(id, v, t):(Id * Expressible_value * Time) = indices(i) in (not is_(v, Vector)))&#10;  then &lt;err&gt;&#10;  else indices), seq1 of ((Id * Vector * Time)))))&#10;"/>
<po column="32" line="2744" message="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2744:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;  let mk_IntLoop(inc, actions) = innerl in&#10;    pre_(eval_IntLoop(innerl)(e), ps)))&#10;" number="1005" object="" resource="newspeakSL" toString="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2744:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;  let mk_IntLoop(inc, actions) = innerl in&#10;    pre_(eval_IntLoop(innerl)(e), ps)))&#10;"/>
<po column="32" line="2744" message="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2744:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;  let mk_IntLoop(inc, actions) = innerl in&#10;    pre_(eval_IntLoop(innerl), e)))&#10;" number="1006" object="" resource="newspeakSL" toString="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2744:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;  let mk_IntLoop(inc, actions) = innerl in&#10;    pre_(eval_IntLoop(innerl), e)))&#10;"/>
<po column="45" line="2744" message="eval_InnerLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2744:45&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;  let mk_IntLoop(inc, actions) = innerl in&#10;    is_(innerl, IntLoop)))&#10;" number="1007" object="" resource="newspeakSL" toString="eval_InnerLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2744:45&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;  let mk_IntLoop(inc, actions) = innerl in&#10;    is_(innerl, IntLoop)))&#10;"/>
<po column="32" line="2745" message="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2745:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;    let mk_VecLoop(ovs, actions) = innerl in&#10;      pre_(eval_VecLoop(innerl)(e), ps))))&#10;" number="1008" object="" resource="newspeakSL" toString="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2745:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;    let mk_VecLoop(ovs, actions) = innerl in&#10;      pre_(eval_VecLoop(innerl)(e), ps))))&#10;"/>
<po column="32" line="2745" message="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2745:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;    let mk_VecLoop(ovs, actions) = innerl in&#10;      pre_(eval_VecLoop(innerl), e))))&#10;" number="1009" object="" resource="newspeakSL" toString="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2745:32&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;    let mk_VecLoop(ovs, actions) = innerl in&#10;      pre_(eval_VecLoop(innerl), e))))&#10;"/>
<po column="45" line="2745" message="eval_InnerLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2745:45&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;    let mk_VecLoop(ovs, actions) = innerl in&#10;      is_(innerl, VecLoop))))&#10;" number="1010" object="" resource="newspeakSL" toString="eval_InnerLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2745:45&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;    let mk_VecLoop(ovs, actions) = innerl in&#10;      is_(innerl, VecLoop))))&#10;"/>
<po column="34" line="2746" message="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2746:34&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (not exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;      (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_TimeLoop(time, actions) = innerl =&gt;&#10;      let mk_TimeLoop(time, actions) = innerl in&#10;        pre_(eval_TimeLoop(innerl)(e), ps)))))&#10;" number="1011" object="" resource="newspeakSL" toString="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2746:34&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (not exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;      (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_TimeLoop(time, actions) = innerl =&gt;&#10;      let mk_TimeLoop(time, actions) = innerl in&#10;        pre_(eval_TimeLoop(innerl)(e), ps)))))&#10;"/>
<po column="34" line="2746" message="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2746:34&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (not exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;      (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_TimeLoop(time, actions) = innerl =&gt;&#10;      let mk_TimeLoop(time, actions) = innerl in&#10;        pre_(eval_TimeLoop(innerl), e)))))&#10;" number="1012" object="" resource="newspeakSL" toString="eval_InnerLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2746:34&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (not exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;      (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_TimeLoop(time, actions) = innerl =&gt;&#10;      let mk_TimeLoop(time, actions) = innerl in&#10;        pre_(eval_TimeLoop(innerl), e)))))&#10;"/>
<po column="48" line="2746" message="eval_InnerLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2746:48&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (not exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;      (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_TimeLoop(time, actions) = innerl =&gt;&#10;      let mk_TimeLoop(time, actions) = innerl in&#10;        is_(innerl, TimeLoop)))))&#10;" number="1013" object="" resource="newspeakSL" toString="eval_InnerLoop: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2746:48&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (not exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_IntLoop(inc, actions) = innerl =&gt;&#10;    (not exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_VecLoop(ovs, actions) = innerl =&gt;&#10;      (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; mk_TimeLoop(time, actions) = innerl =&gt;&#10;      let mk_TimeLoop(time, actions) = innerl in&#10;        is_(innerl, TimeLoop)))))&#10;"/>
<po column="3" line="2743" message="eval_InnerLoop: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2743:3&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; innerl = mk_IntLoop(inc, actions)) or (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; innerl = mk_VecLoop(ovs, actions)) or (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; innerl = mk_TimeLoop(time, actions)))&#10;" number="1014" object="" resource="newspeakSL" toString="eval_InnerLoop: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2743:3&#10;(forall mk_InnerLoop(innerl):InnerLoop, e:Env, ps:PState &amp;&#10;  (exists mk_IntLoop(inc, actions):(IntLoop | TimeLoop | VecLoop) &amp; innerl = mk_IntLoop(inc, actions)) or (exists mk_VecLoop(ovs, actions):(IntLoop | TimeLoop | VecLoop) &amp; innerl = mk_VecLoop(ovs, actions)) or (exists mk_TimeLoop(time, actions):(IntLoop | TimeLoop | VecLoop) &amp; innerl = mk_TimeLoop(time, actions)))&#10;"/>
<po column="15" line="2751" message="eval_IntLoop, idrng: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2751:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_InnerControl(inc)(e), ps))&#10;" number="1015" object="" resource="newspeakSL" toString="eval_IntLoop, idrng: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2751:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_InnerControl(inc)(e), ps))&#10;"/>
<po column="15" line="2751" message="eval_IntLoop, idrng: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2751:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_InnerControl(inc), e))&#10;" number="1016" object="" resource="newspeakSL" toString="eval_IntLoop, idrng: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2751:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_InnerControl(inc), e))&#10;"/>
<po column="12" line="2754" message="eval_IntLoop, id, range: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2754:12&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      exists mk_(id, range):((Id * seq of (int)) | Errvalue) &amp; mk_(id, range) = idrng)))&#10;" number="1017" object="" resource="newspeakSL" toString="eval_IntLoop, id, range: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2754:12&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      exists mk_(id, range):((Id * seq of (int)) | Errvalue) &amp; mk_(id, range) = idrng)))&#10;"/>
<po column="28" line="2754" message="eval_IntLoop, id, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2754:28&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      is_(idrng, (Id * seq of (int))))))&#10;" number="1018" object="" resource="newspeakSL" toString="eval_IntLoop, id, range: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2754:28&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      is_(idrng, (Id * seq of (int))))))&#10;"/>
<po column="29" line="2757" message="eval_IntLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2757:29&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          pre_(update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {})))), e))))))&#10;" number="1019" object="" resource="newspeakSL" toString="eval_IntLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2757:29&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          pre_(update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {})))), e))))))&#10;"/>
<po column="29" line="2757" message="eval_IntLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2757:29&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          pre_(update_env(id), mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {})))))))))&#10;" number="1020" object="" resource="newspeakSL" toString="eval_IntLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2757:29&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          pre_(update_env(id), mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {})))))))))&#10;"/>
<po column="56" line="2758" message="eval_IntLoop, f, new_env: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2758:56&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (x.i) in set inds range)))))&#10;" number="1021" object="" resource="newspeakSL" toString="eval_IntLoop, f, new_env: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2758:56&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (x.i) in set inds range)))))&#10;"/>
<po column="15" line="2760" message="eval_IntLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2760:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let new_env:Env = update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {}))))(e) in&#10;            pre_(eval_SeqIterate(actions)(new_env), x)))))))&#10;" number="1022" object="" resource="newspeakSL" toString="eval_IntLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2760:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let new_env:Env = update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {}))))(e) in&#10;            pre_(eval_SeqIterate(actions)(new_env), x)))))))&#10;"/>
<po column="15" line="2760" message="eval_IntLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2760:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let new_env:Env = update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {}))))(e) in&#10;            pre_(eval_SeqIterate(actions), new_env)))))))&#10;" number="1023" object="" resource="newspeakSL" toString="eval_IntLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2760:15&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let new_env:Env = update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {}))))(e) in&#10;            pre_(eval_SeqIterate(actions), new_env)))))))&#10;"/>
<po column="19" line="2761" message="eval_IntLoop, exi: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2761:19&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (let f:(EST_Iterate -&gt; EST_Iterate) = (lambda [x:(unresolved DEFAULT`EST_Iterate)] &amp; let new_env:Env = update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {}))))(e) in eval_SeqIterate(actions)(new_env)(x)) in&#10;          pre_(NIterate(f, (len range)), mk_EST_Iterate(mk_EST_value(mk_Void(&lt;nil&gt;, mk_VoidType({})), (ps.sto), (ps.time)), 1)))))))&#10;" number="1024" object="" resource="newspeakSL" toString="eval_IntLoop, exi: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2761:19&#10;(forall mk_IntLoop(inc, actions):IntLoop, e:Env, ps:PState &amp;&#10;  (let idrng:((Id * seq of (int)) | Errvalue) = eval_InnerControl(inc)(e)(ps) in&#10;    (not (idrng = &lt;err&gt;) =&gt;&#10;      (let mk_(id, range):((Id * seq of (int)) | Errvalue) = idrng in&#10;        (let f:(EST_Iterate -&gt; EST_Iterate) = (lambda [x:(unresolved DEFAULT`EST_Iterate)] &amp; let new_env:Env = update_env(id)(mk_Storable_value(mk_Int(range((x.i)), mk_IntType(&lt;word&gt;, (elems range), {}))))(e) in eval_SeqIterate(actions)(new_env)(x)) in&#10;          pre_(NIterate(f, (len range)), mk_EST_Iterate(mk_EST_value(mk_Void(&lt;nil&gt;, mk_VoidType({})), (ps.sto), (ps.time)), 1)))))))&#10;"/>
<po column="17" line="2770" message="eval_InnerControl, r: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2770:17&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;  let mk_OverRange(cnt, range) = inc in&#10;    pre_(eval_Range(range), e)))&#10;" number="1025" object="" resource="newspeakSL" toString="eval_InnerControl, r: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2770:17&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;  let mk_OverRange(cnt, range) = inc in&#10;    pre_(eval_Range(range), e)))&#10;"/>
<po column="18" line="2773" message="eval_InnerControl, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2773:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(from_b)(e), ps))))&#10;" number="1026" object="" resource="newspeakSL" toString="eval_InnerControl, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2773:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(from_b)(e), ps))))&#10;"/>
<po column="18" line="2773" message="eval_InnerControl, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2773:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(from_b), e))))&#10;" number="1027" object="" resource="newspeakSL" toString="eval_InnerControl, b1: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2773:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(from_b), e))))&#10;"/>
<po column="18" line="2774" message="eval_InnerControl, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2774:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(to_b)(e), ps))))&#10;" number="1028" object="" resource="newspeakSL" toString="eval_InnerControl, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2774:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(to_b)(e), ps))))&#10;"/>
<po column="18" line="2774" message="eval_InnerControl, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2774:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(to_b), e))))&#10;" number="1029" object="" resource="newspeakSL" toString="eval_InnerControl, b2: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2774:18&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      pre_(eval_Operation(to_b), e))))&#10;"/>
<po column="31" line="2778" message="eval_InnerControl, b3: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2778:31&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          ((inc = nil) =&gt;&#10;            is_real(((b1.val).val))))))))&#10;" number="1030" object="" resource="newspeakSL" toString="eval_InnerControl, b3: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2778:31&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          ((inc = nil) =&gt;&#10;            is_real(((b1.val).val))))))))&#10;"/>
<po column="45" line="2778" message="eval_InnerControl, b3: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2778:45&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          ((inc = nil) =&gt;&#10;            is_real(((b2.val).val))))))))&#10;" number="1031" object="" resource="newspeakSL" toString="eval_InnerControl, b3: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2778:45&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          ((inc = nil) =&gt;&#10;            is_real(((b2.val).val))))))))&#10;"/>
<po column="29" line="2781" message="eval_InnerControl, b3: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2781:29&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (inc = nil) =&gt;&#10;            pre_(eval_Operation(inc)(e), ps)))))))&#10;" number="1032" object="" resource="newspeakSL" toString="eval_InnerControl, b3: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2781:29&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (inc = nil) =&gt;&#10;            pre_(eval_Operation(inc)(e), ps)))))))&#10;"/>
<po column="29" line="2781" message="eval_InnerControl, b3: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2781:29&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (inc = nil) =&gt;&#10;            pre_(eval_Operation(inc), e)))))))&#10;" number="1033" object="" resource="newspeakSL" toString="eval_InnerControl, b3: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2781:29&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (inc = nil) =&gt;&#10;            pre_(eval_Operation(inc), e)))))))&#10;"/>
<po column="44" line="2781" message="eval_InnerControl, b3: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2781:44&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (inc = nil) =&gt;&#10;            is_(inc, Operation)))))))&#10;" number="1034" object="" resource="newspeakSL" toString="eval_InnerControl, b3: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2781:44&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (not (inc = nil) =&gt;&#10;            is_(inc, Operation)))))))&#10;"/>
<po column="65" line="2786" message="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2786:65&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not (not is_((b3.val), Int)) =&gt;&#10;              (is_((b3.val), Int) =&gt;&#10;                (forall v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range) &amp;&#10;                  is_real(v3))))))))))&#10;" number="1035" object="" resource="newspeakSL" toString="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2786:65&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not (not is_((b3.val), Int)) =&gt;&#10;              (is_((b3.val), Int) =&gt;&#10;                (forall v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range) &amp;&#10;                  is_real(v3))))))))))&#10;"/>
<po column="58" line="2786" message="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2786:58&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not (not is_((b3.val), Int)) =&gt;&#10;              (is_((b3.val), Int) =&gt;&#10;                (forall v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range) &amp;&#10;                  is_real(v2))))))))))&#10;" number="1036" object="" resource="newspeakSL" toString="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2786:58&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not (not is_((b3.val), Int)) =&gt;&#10;              (is_((b3.val), Int) =&gt;&#10;                (forall v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range) &amp;&#10;                  is_real(v2))))))))))&#10;"/>
<po column="61" line="2786" message="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2786:61&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not (not is_((b3.val), Int)) =&gt;&#10;              (is_((b3.val), Int) =&gt;&#10;                (forall v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range) &amp;&#10;                  is_real(v1))))))))))&#10;" number="1037" object="" resource="newspeakSL" toString="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2786:61&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not (not is_((b3.val), Int)) =&gt;&#10;              (is_((b3.val), Int) =&gt;&#10;                (forall v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range) &amp;&#10;                  is_real(v1))))))))))&#10;"/>
<po column="29" line="2788" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2788:29&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val)))) =&gt;&#10;                is_real(((b1.val).val))))))))))&#10;" number="1038" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2788:29&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val)))) =&gt;&#10;                is_real(((b1.val).val))))))))))&#10;"/>
<po column="50" line="2788" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2788:50&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val)))) =&gt;&#10;                is_real((b3.val))))))))))&#10;" number="1039" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2788:50&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val)))) =&gt;&#10;                is_real((b3.val))))))))))&#10;"/>
<po column="65" line="2789" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:65&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              is_real((b3.val)))))))))&#10;" number="1040" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:65&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              is_real((b3.val)))))))))&#10;"/>
<po column="42" line="2789" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:42&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              is_real(((b2.val).val)))))))))&#10;" number="1041" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:42&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              is_real(((b2.val).val)))))))))&#10;"/>
<po column="53" line="2789" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:53&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              is_real(((b1.val).val)))))))))&#10;" number="1042" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:53&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              is_real(((b1.val).val)))))))))&#10;"/>
<po column="64" line="2789" message="eval_InnerControl, r: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:64&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (b3.val) &lt;&gt; 0)))))))&#10;" number="1043" object="" resource="newspeakSL" toString="eval_InnerControl, r: non-zero obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2789:64&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (b3.val) &lt;&gt; 0)))))))&#10;"/>
<po column="36" line="2790" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2790:36&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp;&#10;                is_real((b3.val))))))))))&#10;" number="1044" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2790:36&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp;&#10;                is_real((b3.val))))))))))&#10;"/>
<po column="52" line="2790" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2790:52&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp;&#10;                is_real(((b2.val).val))))))))))&#10;" number="1045" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2790:52&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp;&#10;                is_real(((b2.val).val))))))))))&#10;"/>
<po column="65" line="2790" message="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2790:65&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp;&#10;                is_real(((b1.val).val))))))))))&#10;" number="1046" object="" resource="newspeakSL" toString="eval_InnerControl, r: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2790:65&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (not exists mk_OverRange(cnt, range):InnerControl &amp; mk_OverRange(cnt, range) = inc =&gt;&#10;    (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; mk_PartialRange(cnt, from_b, to_b, inc) = inc =&gt;&#10;    let mk_PartialRange(cnt, from_b, to_b, inc) = inc in&#10;      (let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in&#10;        (not (not (is_((b1.val), Int) and is_((b2.val), Int))) =&gt;&#10;          (let b3:(Expressible_value | Int) = (if (inc = nil)&#10;          then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;          then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;          else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;          else (eval_Operation(inc)(e)(ps).val)) in&#10;            (not ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0)))) =&gt;&#10;              (forall alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp;&#10;                is_real(((b1.val).val))))))))))&#10;"/>
<po column="3" line="2768" message="eval_InnerControl: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2768:3&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (exists mk_OverRange(cnt, range):InnerControl &amp; inc = mk_OverRange(cnt, range)) or (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; inc = mk_PartialRange(cnt, from_b, to_b, inc)))&#10;" number="1047" object="" resource="newspeakSL" toString="eval_InnerControl: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2768:3&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (exists mk_OverRange(cnt, range):InnerControl &amp; inc = mk_OverRange(cnt, range)) or (exists mk_PartialRange(cnt, from_b, to_b, inc):InnerControl &amp; inc = mk_PartialRange(cnt, from_b, to_b, inc)))&#10;"/>
<po column="1" line="2765" message="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2765:1&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (is_((cases inc :&#10;  case mk_OverRange(cnt, range) -&gt; let r:(Errvalue | set of (int)) = eval_Range(range)(e) in (if (r = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(cnt, [x | x in set r])),&#10;  case mk_PartialRange(cnt, from_b, to_b, inc) -&gt; let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in (if (not (is_((b1.val), Int) and is_((b2.val), Int)))&#10;  then &lt;err&gt;&#10;  else let b3:(Expressible_value | Int) = (if (inc = nil)&#10;  then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;  then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;  else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;  else (eval_Operation(inc)(e)(ps).val)) in (if ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0))))&#10;  then &lt;err&gt;&#10;  else let r:seq of (real) = [(((b1.val).val) + (alpha * (b3.val))) | alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val))))] in mk_(cnt, r)))&#10;  end), (Id * seq of (int)))) or&#10;  (is_((cases inc :&#10;  case mk_OverRange(cnt, range) -&gt; let r:(Errvalue | set of (int)) = eval_Range(range)(e) in (if (r = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(cnt, [x | x in set r])),&#10;  case mk_PartialRange(cnt, from_b, to_b, inc) -&gt; let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in (if (not (is_((b1.val), Int) and is_((b2.val), Int)))&#10;  then &lt;err&gt;&#10;  else let b3:(Expressible_value | Int) = (if (inc = nil)&#10;  then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;  then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;  else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;  else (eval_Operation(inc)(e)(ps).val)) in (if ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0))))&#10;  then &lt;err&gt;&#10;  else let r:seq of (real) = [(((b1.val).val) + (alpha * (b3.val))) | alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val))))] in mk_(cnt, r)))&#10;  end), Errvalue)))&#10;" number="1048" object="" resource="newspeakSL" toString="eval_InnerControl: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2765:1&#10;(forall inc:InnerControl, e:Env, ps:PState &amp;&#10;  (is_((cases inc :&#10;  case mk_OverRange(cnt, range) -&gt; let r:(Errvalue | set of (int)) = eval_Range(range)(e) in (if (r = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(cnt, [x | x in set r])),&#10;  case mk_PartialRange(cnt, from_b, to_b, inc) -&gt; let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in (if (not (is_((b1.val), Int) and is_((b2.val), Int)))&#10;  then &lt;err&gt;&#10;  else let b3:(Expressible_value | Int) = (if (inc = nil)&#10;  then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;  then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;  else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;  else (eval_Operation(inc)(e)(ps).val)) in (if ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0))))&#10;  then &lt;err&gt;&#10;  else let r:seq of (real) = [(((b1.val).val) + (alpha * (b3.val))) | alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val))))] in mk_(cnt, r)))&#10;  end), (Id * seq of (int)))) or&#10;  (is_((cases inc :&#10;  case mk_OverRange(cnt, range) -&gt; let r:(Errvalue | set of (int)) = eval_Range(range)(e) in (if (r = &lt;err&gt;)&#10;  then &lt;err&gt;&#10;  else mk_(cnt, [x | x in set r])),&#10;  case mk_PartialRange(cnt, from_b, to_b, inc) -&gt; let b1:EST_value = eval_Operation(from_b)(e)(ps), b2:EST_value = eval_Operation(to_b)(e)(ps) in (if (not (is_((b1.val), Int) and is_((b2.val), Int)))&#10;  then &lt;err&gt;&#10;  else let b3:(Expressible_value | Int) = (if (inc = nil)&#10;  then (if (((b1.val).val) &lt;= ((b2.val).val))&#10;  then mk_Int(1, mk_IntType(&lt;byte&gt;, {1, -1}, {}))&#10;  else mk_Int(-1, mk_IntType(&lt;byte&gt;, {1, -1}, {})))&#10;  else (eval_Operation(inc)(e)(ps).val)) in (if ((not is_((b3.val), Int)) or (is_((b3.val), Int) and (exists [v1 in set (((b1.val).type).range), v2 in set (((b2.val).type).range), v3 in set (((b3.val).type).range)] &amp; (((v2 - v1) * v3) &lt; 0))))&#10;  then &lt;err&gt;&#10;  else let r:seq of (real) = [(((b1.val).val) + (alpha * (b3.val))) | alpha in set {0, ... ,(floor (1 + ((((b2.val).val) - ((b1.val).val)) / (b3.val))))} &amp; ((abs (alpha * (b3.val))) &lt;= (abs (((b2.val).val) - ((b1.val).val))))] in mk_(cnt, r)))&#10;  end), Errvalue)))&#10;"/>
<po column="24" line="2798" message="eval_SeqIterate, new_expst: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2798:24&#10;(forall sequ:Sequence, e:Env, exi:EST_Iterate &amp;&#10;  (not (((exi.expst).val) = &lt;err&gt;) =&gt;&#10;    pre_(eval_Sequence(sequ)(e), mk_PState(((exi.expst).sto), ((exi.expst).time)))))&#10;" number="1049" object="" resource="newspeakSL" toString="eval_SeqIterate, new_expst: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2798:24&#10;(forall sequ:Sequence, e:Env, exi:EST_Iterate &amp;&#10;  (not (((exi.expst).val) = &lt;err&gt;) =&gt;&#10;    pre_(eval_Sequence(sequ)(e), mk_PState(((exi.expst).sto), ((exi.expst).time)))))&#10;"/>
<po column="24" line="2798" message="eval_SeqIterate, new_expst: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2798:24&#10;(forall sequ:Sequence, e:Env, exi:EST_Iterate &amp;&#10;  (not (((exi.expst).val) = &lt;err&gt;) =&gt;&#10;    pre_(eval_Sequence(sequ), e)))&#10;" number="1050" object="" resource="newspeakSL" toString="eval_SeqIterate, new_expst: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2798:24&#10;(forall sequ:Sequence, e:Env, exi:EST_Iterate &amp;&#10;  (not (((exi.expst).val) = &lt;err&gt;) =&gt;&#10;    pre_(eval_Sequence(sequ), e)))&#10;"/>
<po column="17" line="2803" message="eval_VecLoop, indices: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2803:17&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs)(e), ps))&#10;" number="1051" object="" resource="newspeakSL" toString="eval_VecLoop, indices: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2803:17&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs)(e), ps))&#10;"/>
<po column="17" line="2803" message="eval_VecLoop, indices: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2803:17&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs), e))&#10;" number="1052" object="" resource="newspeakSL" toString="eval_VecLoop, indices: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2803:17&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_OverVectors(ovs), e))&#10;"/>
<po column="45" line="2806" message="eval_VecLoop, time, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2806:45&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (forall i in set (inds indices) &amp;&#10;        i in set inds indices))))&#10;" number="1053" object="" resource="newspeakSL" toString="eval_VecLoop, time, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2806:45&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (forall i in set (inds indices) &amp;&#10;        i in set inds indices))))&#10;"/>
<po column="24" line="2810" message="eval_VecLoop, f, env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2810:24&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          pre_(multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)]), e))))))&#10;" number="1054" object="" resource="newspeakSL" toString="eval_VecLoop, f, env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2810:24&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          pre_(multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)]), e))))))&#10;"/>
<po column="20" line="2811" message="eval_VecLoop, f, env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2811:20&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          is_([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)], seq of ((Id * Denotable_value))))))))&#10;" number="1055" object="" resource="newspeakSL" toString="eval_VecLoop, f, env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2811:20&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          is_([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)], seq of ((Id * Denotable_value))))))))&#10;"/>
<po column="39" line="2811" message="eval_VecLoop, f, env, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2811:39&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (forall i in set (inds indices) &amp;&#10;            i in set inds indices))))))&#10;" number="1056" object="" resource="newspeakSL" toString="eval_VecLoop, f, env, id, v, t: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2811:39&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (forall i in set (inds indices) &amp;&#10;            i in set inds indices))))))&#10;"/>
<po column="27" line="2816" message="eval_VecLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2816:27&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (not ((ovs.cnt) = nil) =&gt;&#10;              pre_(update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {})))), env))))))))&#10;" number="1057" object="" resource="newspeakSL" toString="eval_VecLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2816:27&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (not ((ovs.cnt) = nil) =&gt;&#10;              pre_(update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {})))), env))))))))&#10;"/>
<po column="27" line="2816" message="eval_VecLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2816:27&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (not ((ovs.cnt) = nil) =&gt;&#10;              pre_(update_env((ovs.cnt)), mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {})))))))))))&#10;" number="1058" object="" resource="newspeakSL" toString="eval_VecLoop, f, new_env: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2816:27&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (not ((ovs.cnt) = nil) =&gt;&#10;              pre_(update_env((ovs.cnt)), mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {})))))))))))&#10;"/>
<po column="38" line="2816" message="eval_VecLoop, f, new_env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2816:38&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (not ((ovs.cnt) = nil) =&gt;&#10;              (is_((ovs.cnt), token)))))))))&#10;" number="1059" object="" resource="newspeakSL" toString="eval_VecLoop, f, new_env: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2816:38&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (not ((ovs.cnt) = nil) =&gt;&#10;              (is_((ovs.cnt), token)))))))))&#10;"/>
<po column="14" line="2818" message="eval_VecLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2818:14&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (let new_env:Env = (if ((ovs.cnt) = nil)&#10;            then env&#10;            else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in&#10;              pre_(eval_SeqIterate(actions)(new_env), mu(x, expst |-&gt; new_expst)))))))))&#10;" number="1060" object="" resource="newspeakSL" toString="eval_VecLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2818:14&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (let new_env:Env = (if ((ovs.cnt) = nil)&#10;            then env&#10;            else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in&#10;              pre_(eval_SeqIterate(actions)(new_env), mu(x, expst |-&gt; new_expst)))))))))&#10;"/>
<po column="14" line="2818" message="eval_VecLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2818:14&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (let new_env:Env = (if ((ovs.cnt) = nil)&#10;            then env&#10;            else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in&#10;              pre_(eval_SeqIterate(actions), new_env))))))))&#10;" number="1061" object="" resource="newspeakSL" toString="eval_VecLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2818:14&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (forall x:(unresolved DEFAULT`EST_Iterate) &amp;&#10;          (let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in&#10;            (let new_env:Env = (if ((ovs.cnt) = nil)&#10;            then env&#10;            else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in&#10;              pre_(eval_SeqIterate(actions), new_env))))))))&#10;"/>
<po column="25" line="2819" message="eval_VecLoop, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2819:25&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (let f:(EST_Iterate -&gt; EST_Iterate) = (lambda [x:(unresolved DEFAULT`EST_Iterate)] &amp; let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in let new_env:Env = (if ((ovs.cnt) = nil)&#10;        then env&#10;        else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in eval_SeqIterate(actions)(new_env)(mu(x, expst |-&gt; new_expst))) in&#10;          1 in set inds indices)))))&#10;" number="1062" object="" resource="newspeakSL" toString="eval_VecLoop, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2819:25&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (let f:(EST_Iterate -&gt; EST_Iterate) = (lambda [x:(unresolved DEFAULT`EST_Iterate)] &amp; let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in let new_env:Env = (if ((ovs.cnt) = nil)&#10;        then env&#10;        else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in eval_SeqIterate(actions)(new_env)(mu(x, expst |-&gt; new_expst))) in&#10;          1 in set inds indices)))))&#10;"/>
<po column="19" line="2820" message="eval_VecLoop, exi: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2820:19&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (let f:(EST_Iterate -&gt; EST_Iterate) = (lambda [x:(unresolved DEFAULT`EST_Iterate)] &amp; let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in let new_env:Env = (if ((ovs.cnt) = nil)&#10;        then env&#10;        else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in eval_SeqIterate(actions)(new_env)(mu(x, expst |-&gt; new_expst))) in&#10;          (let mk_(-, v, -):(Id * Vector * Time) = indices(1) in&#10;            pre_(NIterate(f, (len (v.val))), mk_EST_Iterate(mk_EST_value(mk_Void(&lt;nil&gt;, mk_VoidType({})), (ps.sto), tplus((ps.time), time)), 1))))))))&#10;" number="1063" object="" resource="newspeakSL" toString="eval_VecLoop, exi: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2820:19&#10;(forall mk_VecLoop(ovs, actions):VecLoop, e:Env, ps:PState &amp;&#10;  (let indices:(Errvalue | seq1 of ((Id * Vector * Time))) = eval_OverVectors(ovs)(e)(ps) in&#10;    (not (indices = &lt;err&gt;) =&gt;&#10;      (let time:Time = dtplus([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in t | i in set (inds indices)]) in&#10;        (let f:(EST_Iterate -&gt; EST_Iterate) = (lambda [x:(unresolved DEFAULT`EST_Iterate)] &amp; let env:Env = multi_update_env([let mk_(id, v, t):(Id * Vector * Time) = indices(i) in mk_(id, vector_extract(v, (x.i))) | i in set (inds indices)])(e), new_expst:EST_value = mu((x.expst), time |-&gt; ((x.expst).time)) in let new_env:Env = (if ((ovs.cnt) = nil)&#10;        then env&#10;        else update_env((ovs.cnt))(mk_Storable_value(mk_Int((x.i), mk_IntType(&lt;word&gt;, {(x.i)}, {}))))(env)) in eval_SeqIterate(actions)(new_env)(mu(x, expst |-&gt; new_expst))) in&#10;          (let mk_(-, v, -):(Id * Vector * Time) = indices(1) in&#10;            pre_(NIterate(f, (len (v.val))), mk_EST_Iterate(mk_EST_value(mk_Void(&lt;nil&gt;, mk_VoidType({})), (ps.sto), tplus((ps.time), time)), 1))))))))&#10;"/>
<po column="11" line="2828" message="eval_TimeLoop, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2828:11&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_TimeInterval(time), e))&#10;" number="1064" object="" resource="newspeakSL" toString="eval_TimeLoop, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2828:11&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_TimeInterval(time), e))&#10;"/>
<po column="11" line="2829" message="eval_TimeLoop, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2829:11&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(actions)(e), mu(ps, time |-&gt; zerot)))&#10;" number="1065" object="" resource="newspeakSL" toString="eval_TimeLoop, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2829:11&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(actions)(e), mu(ps, time |-&gt; zerot)))&#10;"/>
<po column="11" line="2829" message="eval_TimeLoop, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2829:11&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(actions), e))&#10;" number="1066" object="" resource="newspeakSL" toString="eval_TimeLoop, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2829:11&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  pre_(eval_Sequence(actions), e))&#10;"/>
<po column="18" line="2833" message="eval_TimeLoop, its: unique existence binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2833:18&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        exists1 n:nat &amp; (timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t) and (not timeleq(dtplus([(x.time) | i in set {1, ... ,(n + 1)}]), t)))))))&#10;" number="1067" object="" resource="newspeakSL" toString="eval_TimeLoop, its: unique existence binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2833:18&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        exists1 n:nat &amp; (timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t) and (not timeleq(dtplus([(x.time) | i in set {1, ... ,(n + 1)}]), t)))))))&#10;"/>
<po column="65" line="2834" message="eval_TimeLoop, its: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2834:65&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall n:nat &amp;&#10;          (is_(t, (nat * nat))))))))&#10;" number="1068" object="" resource="newspeakSL" toString="eval_TimeLoop, its: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2834:65&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall n:nat &amp;&#10;          (is_(t, (nat * nat))))))))&#10;"/>
<po column="72" line="2835" message="eval_TimeLoop, its: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2835:72&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall n:nat &amp;&#10;          (timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t) =&gt;&#10;            (is_(t, (nat * nat)))))))))&#10;" number="1069" object="" resource="newspeakSL" toString="eval_TimeLoop, its: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2835:72&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall n:nat &amp;&#10;          (timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t) =&gt;&#10;            (is_(t, (nat * nat)))))))))&#10;"/>
<po column="14" line="2837" message="eval_TimeLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2837:14&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall exs:(unresolved DEFAULT`EST_value) &amp;&#10;          pre_(eval_Sequence(actions)(e), mk_PState((exs.sto), (exs.time))))))))&#10;" number="1070" object="" resource="newspeakSL" toString="eval_TimeLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2837:14&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall exs:(unresolved DEFAULT`EST_value) &amp;&#10;          pre_(eval_Sequence(actions)(e), mk_PState((exs.sto), (exs.time))))))))&#10;"/>
<po column="14" line="2837" message="eval_TimeLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2837:14&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall exs:(unresolved DEFAULT`EST_value) &amp;&#10;          pre_(eval_Sequence(actions), e))))))&#10;" number="1071" object="" resource="newspeakSL" toString="eval_TimeLoop, f: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2837:14&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (forall exs:(unresolved DEFAULT`EST_value) &amp;&#10;          pre_(eval_Sequence(actions), e))))))&#10;"/>
<po column="13" line="2838" message="eval_TimeLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2838:13&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (let its:nat = (iota n:nat &amp; (timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t) and (not timeleq(dtplus([(x.time) | i in set {1, ... ,(n + 1)}]), t)))), f:(EST_value -&gt; EST_value) = (lambda [exs:(unresolved DEFAULT`EST_value)] &amp; eval_Sequence(actions)(e)(mk_PState((exs.sto), (exs.time)))) in&#10;          pre_(Iterate(f, its), mk_EST_value(mk_Void(&lt;nil&gt;, mk_VoidType({})), (ps.sto), (ps.time))))))))&#10;" number="1072" object="" resource="newspeakSL" toString="eval_TimeLoop: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2838:13&#10;(forall mk_TimeLoop(time, actions):TimeLoop, e:Env, ps:PState &amp;&#10;  (let t:(Errvalue | Time) = eval_TimeInterval(time)(e), x:EST_value = eval_Sequence(actions)(e)(mu(ps, time |-&gt; zerot)) in&#10;    (not ((t = &lt;err&gt;) or ((x.val) = &lt;err&gt;)) =&gt;&#10;      ((exists [n:nat] &amp; timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t)) =&gt;&#10;        (let its:nat = (iota n:nat &amp; (timeleq(dtplus([(x.time) | i in set {1, ... ,n}]), t) and (not timeleq(dtplus([(x.time) | i in set {1, ... ,(n + 1)}]), t)))), f:(EST_value -&gt; EST_value) = (lambda [exs:(unresolved DEFAULT`EST_value)] &amp; eval_Sequence(actions)(e)(mk_PState((exs.sto), (exs.time)))) in&#10;          pre_(Iterate(f, its), mk_EST_value(mk_Void(&lt;nil&gt;, mk_VoidType({})), (ps.sto), (ps.time))))))))&#10;"/>
<po column="29" line="2845" message="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2845:29&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;  let mk_NvAssignment(d, e) = ass in&#10;    pre_(eval_NvAssignment(ass)(env), ps)))&#10;" number="1073" object="" resource="newspeakSL" toString="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2845:29&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;  let mk_NvAssignment(d, e) = ass in&#10;    pre_(eval_NvAssignment(ass)(env), ps)))&#10;"/>
<po column="29" line="2845" message="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2845:29&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;  let mk_NvAssignment(d, e) = ass in&#10;    pre_(eval_NvAssignment(ass), env)))&#10;" number="1074" object="" resource="newspeakSL" toString="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2845:29&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;  let mk_NvAssignment(d, e) = ass in&#10;    pre_(eval_NvAssignment(ass), env)))&#10;"/>
<po column="47" line="2845" message="eval_Assignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2845:47&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;  let mk_NvAssignment(d, e) = ass in&#10;    is_(ass, NvAssignment)))&#10;" number="1075" object="" resource="newspeakSL" toString="eval_Assignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2845:47&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;  let mk_NvAssignment(d, e) = ass in&#10;    is_(ass, NvAssignment)))&#10;"/>
<po column="33" line="2846" message="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2846:33&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;    let mk_MultAssignment(d, m, e) = ass in&#10;      pre_(eval_MultAssignment(ass)(env), ps))))&#10;" number="1076" object="" resource="newspeakSL" toString="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2846:33&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;    let mk_MultAssignment(d, m, e) = ass in&#10;      pre_(eval_MultAssignment(ass)(env), ps))))&#10;"/>
<po column="33" line="2846" message="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2846:33&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;    let mk_MultAssignment(d, m, e) = ass in&#10;      pre_(eval_MultAssignment(ass), env))))&#10;" number="1077" object="" resource="newspeakSL" toString="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2846:33&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;    let mk_MultAssignment(d, m, e) = ass in&#10;      pre_(eval_MultAssignment(ass), env))))&#10;"/>
<po column="53" line="2846" message="eval_Assignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2846:53&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;    let mk_MultAssignment(d, m, e) = ass in&#10;      is_(ass, MultAssignment))))&#10;" number="1078" object="" resource="newspeakSL" toString="eval_Assignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2846:53&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;    let mk_MultAssignment(d, m, e) = ass in&#10;      is_(ass, MultAssignment))))&#10;"/>
<po column="30" line="2847" message="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2847:30&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (not exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;      (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_StrAssignment(d, e) = ass =&gt;&#10;      let mk_StrAssignment(d, e) = ass in&#10;        pre_(eval_StrAssignment(ass)(env), ps)))))&#10;" number="1079" object="" resource="newspeakSL" toString="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2847:30&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (not exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;      (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_StrAssignment(d, e) = ass =&gt;&#10;      let mk_StrAssignment(d, e) = ass in&#10;        pre_(eval_StrAssignment(ass)(env), ps)))))&#10;"/>
<po column="30" line="2847" message="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2847:30&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (not exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;      (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_StrAssignment(d, e) = ass =&gt;&#10;      let mk_StrAssignment(d, e) = ass in&#10;        pre_(eval_StrAssignment(ass), env)))))&#10;" number="1080" object="" resource="newspeakSL" toString="eval_Assignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2847:30&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (not exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;      (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_StrAssignment(d, e) = ass =&gt;&#10;      let mk_StrAssignment(d, e) = ass in&#10;        pre_(eval_StrAssignment(ass), env)))))&#10;"/>
<po column="49" line="2847" message="eval_Assignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2847:49&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (not exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;      (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_StrAssignment(d, e) = ass =&gt;&#10;      let mk_StrAssignment(d, e) = ass in&#10;        is_(ass, StrAssignment)))))&#10;" number="1081" object="" resource="newspeakSL" toString="eval_Assignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2847:49&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (not exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_NvAssignment(d, e) = ass =&gt;&#10;    (not exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_MultAssignment(d, m, e) = ass =&gt;&#10;      (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; mk_StrAssignment(d, e) = ass =&gt;&#10;      let mk_StrAssignment(d, e) = ass in&#10;        is_(ass, StrAssignment)))))&#10;"/>
<po column="3" line="2844" message="eval_Assignment: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2844:3&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; ass = mk_NvAssignment(d, e)) or (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; ass = mk_MultAssignment(d, m, e)) or (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; ass = mk_StrAssignment(d, e)))&#10;" number="1082" object="" resource="newspeakSL" toString="eval_Assignment: cases exhaustive obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2844:3&#10;(forall mk_Assignment(ass):Assignment, env:Env, ps:PState &amp;&#10;  (exists mk_NvAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; ass = mk_NvAssignment(d, e)) or (exists mk_MultAssignment(d, m, e):(MultAssignment | NvAssignment | StrAssignment) &amp; ass = mk_MultAssignment(d, m, e)) or (exists mk_StrAssignment(d, e):(MultAssignment | NvAssignment | StrAssignment) &amp; ass = mk_StrAssignment(d, e)))&#10;"/>
<po column="11" line="2852" message="eval_NvAssignment, l: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2852:11&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  pre_(access_env(dest), e))&#10;" number="1083" object="" resource="newspeakSL" toString="eval_NvAssignment, l: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2852:11&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  pre_(access_env(dest), e))&#10;"/>
<po column="16" line="2855" message="eval_NvAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2855:16&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      pre_(eval_Expression(expr)(e), ps))))&#10;" number="1084" object="" resource="newspeakSL" toString="eval_NvAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2855:16&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      pre_(eval_Expression(expr)(e), ps))))&#10;"/>
<po column="16" line="2855" message="eval_NvAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2855:16&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      pre_(eval_Expression(expr), e))))&#10;" number="1085" object="" resource="newspeakSL" toString="eval_NvAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2855:16&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      pre_(eval_Expression(expr), e))))&#10;"/>
<po column="47" line="2863" message="eval_NvAssignment, dest_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2863:47&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            pre_(access(l), (ps.sto))))))))&#10;" number="1086" object="" resource="newspeakSL" toString="eval_NvAssignment, dest_val: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2863:47&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            pre_(access(l), (ps.sto))))))))&#10;"/>
<po column="54" line="2863" message="eval_NvAssignment, dest_val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2863:54&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            is_(l, Location)))))))&#10;" number="1087" object="" resource="newspeakSL" toString="eval_NvAssignment, dest_val: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2863:54&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            is_(l, Location)))))))&#10;"/>
<po column="8" line="2866" message="eval_NvAssignment, new_sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:8&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                pre_(update(l)(mk_Storable_value(widen_type((x.val), (dest_val.type)))), (ps.sto))))))))))&#10;" number="1088" object="" resource="newspeakSL" toString="eval_NvAssignment, new_sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:8&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                pre_(update(l)(mk_Storable_value(widen_type((x.val), (dest_val.type)))), (ps.sto))))))))))&#10;"/>
<po column="8" line="2866" message="eval_NvAssignment, new_sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:8&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                pre_(update(l), mk_Storable_value(widen_type((x.val), (dest_val.type))))))))))))&#10;" number="1089" object="" resource="newspeakSL" toString="eval_NvAssignment, new_sto: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:8&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                pre_(update(l), mk_Storable_value(widen_type((x.val), (dest_val.type))))))))))))&#10;"/>
<po column="15" line="2866" message="eval_NvAssignment, new_sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:15&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                is_(l, Location)))))))))&#10;" number="1090" object="" resource="newspeakSL" toString="eval_NvAssignment, new_sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:15&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                is_(l, Location)))))))))&#10;"/>
<po column="36" line="2866" message="eval_NvAssignment, new_sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:36&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                (is_(widen_type((x.val), (dest_val.type)), Int)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Real)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Structure)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Tr)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Union)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Vector)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Void))))))))))&#10;" number="1091" object="" resource="newspeakSL" toString="eval_NvAssignment, new_sto: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2866:36&#10;(forall mk_NvAssignment(dest, expr):NvAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not ((x.val) = &lt;err&gt;) =&gt;&#10;          (not (cases ((x.val).type) :&#10;          case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;          end) =&gt;&#10;            (let mk_Storable_value(dest_val):Storable_value = access(l)((ps.sto)) in&#10;              (gt((dest_val.type), ((x.val).type)) =&gt;&#10;                (is_(widen_type((x.val), (dest_val.type)), Int)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Real)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Structure)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Tr)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Union)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Vector)) or&#10;                (is_(widen_type((x.val), (dest_val.type)), Void))))))))))&#10;"/>
<po column="11" line="2873" message="eval_MultAssignment, l: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2873:11&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  pre_(access_env(dest), e))&#10;" number="1092" object="" resource="newspeakSL" toString="eval_MultAssignment, l: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2873:11&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  pre_(access_env(dest), e))&#10;"/>
<po column="35" line="2876" message="eval_MultAssignment, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2876:35&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      pre_(access(l), (ps.sto)))))&#10;" number="1093" object="" resource="newspeakSL" toString="eval_MultAssignment, v: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2876:35&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      pre_(access(l), (ps.sto)))))&#10;"/>
<po column="42" line="2876" message="eval_MultAssignment, v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2876:42&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      is_(l, Location))))&#10;" number="1094" object="" resource="newspeakSL" toString="eval_MultAssignment, v: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2876:42&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      is_(l, Location))))&#10;"/>
<po column="17" line="2879" message="eval_MultAssignment, val, type: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2879:17&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          exists mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) &amp; mk_Vector(val, type) = v)))))&#10;" number="1095" object="" resource="newspeakSL" toString="eval_MultAssignment, val, type: value binding obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2879:17&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          exists mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) &amp; mk_Vector(val, type) = v)))))&#10;"/>
<po column="39" line="2879" message="eval_MultAssignment, val, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2879:39&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          is_(v, Vector))))))&#10;" number="1096" object="" resource="newspeakSL" toString="eval_MultAssignment, val, type: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2879:39&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          is_(v, Vector))))))&#10;"/>
<po column="16" line="2881" message="eval_MultAssignment, v': function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2881:16&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            pre_(eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult), e)))))))&#10;" number="1097" object="" resource="newspeakSL" toString="eval_MultAssignment, v': function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2881:16&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            pre_(eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult), e)))))))&#10;"/>
<po column="16" line="2881" message="eval_MultAssignment, v': function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2881:16&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            pre_(eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time))), mult)))))))&#10;" number="1098" object="" resource="newspeakSL" toString="eval_MultAssignment, v': function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2881:16&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            pre_(eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time))), mult)))))))&#10;"/>
<po column="21" line="2882" message="eval_MultAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2882:21&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              pre_(eval_Expression(expr)(e), mk_PState((v'.sto), (v'.time))))))))))&#10;" number="1099" object="" resource="newspeakSL" toString="eval_MultAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2882:21&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              pre_(eval_Expression(expr)(e), mk_PState((v'.sto), (v'.time))))))))))&#10;"/>
<po column="21" line="2882" message="eval_MultAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2882:21&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              pre_(eval_Expression(expr), e))))))))&#10;" number="1100" object="" resource="newspeakSL" toString="eval_MultAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2882:21&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              pre_(eval_Expression(expr), e))))))))&#10;"/>
<po column="65" line="2900" message="eval_MultAssignment, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2900:65&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      is_(vmid, Vector))))))))))))&#10;" number="1101" object="" resource="newspeakSL" toString="eval_MultAssignment, new_vec: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2900:65&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      is_(vmid, Vector))))))))))))&#10;"/>
<po column="39" line="2901" message="eval_MultAssignment, new_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2901:39&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      ((is_(t_vector_concat, (nat * nat))))&#10;                      and ((is_(t_vector_concat, (nat * nat))))&#10;                      and ((is_(vector_subv, (nat * nat))))&#10;                      and ((is_(vector_subv, (nat * nat)))))))))))))))&#10;" number="1102" object="" resource="newspeakSL" toString="eval_MultAssignment, new_time: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2901:39&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      ((is_(t_vector_concat, (nat * nat))))&#10;                      and ((is_(t_vector_concat, (nat * nat))))&#10;                      and ((is_(vector_subv, (nat * nat))))&#10;                      and ((is_(vector_subv, (nat * nat)))))))))))))))&#10;"/>
<po column="33" line="2904" message="eval_MultAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2904:33&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      (let new_vec:Vector = vector_concat(vector_concat(vleft, vmid), vright), new_time:Time = dtplus([(x.time), t_vector_concat, t_vector_concat, vector_subv, vector_subv]) in&#10;                        pre_(update(l)(mk_Storable_value(new_vec)), (ps.sto))))))))))))))&#10;" number="1103" object="" resource="newspeakSL" toString="eval_MultAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2904:33&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      (let new_vec:Vector = vector_concat(vector_concat(vleft, vmid), vright), new_time:Time = dtplus([(x.time), t_vector_concat, t_vector_concat, vector_subv, vector_subv]) in&#10;                        pre_(update(l)(mk_Storable_value(new_vec)), (ps.sto))))))))))))))&#10;"/>
<po column="33" line="2904" message="eval_MultAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2904:33&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      (let new_vec:Vector = vector_concat(vector_concat(vleft, vmid), vright), new_time:Time = dtplus([(x.time), t_vector_concat, t_vector_concat, vector_subv, vector_subv]) in&#10;                        pre_(update(l), mk_Storable_value(new_vec))))))))))))))&#10;" number="1104" object="" resource="newspeakSL" toString="eval_MultAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2904:33&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      (let new_vec:Vector = vector_concat(vector_concat(vleft, vmid), vright), new_time:Time = dtplus([(x.time), t_vector_concat, t_vector_concat, vector_subv, vector_subv]) in&#10;                        pre_(update(l), mk_Storable_value(new_vec))))))))))))))&#10;"/>
<po column="40" line="2904" message="eval_MultAssignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2904:40&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      (let new_vec:Vector = vector_concat(vector_concat(vleft, vmid), vright), new_time:Time = dtplus([(x.time), t_vector_concat, t_vector_concat, vector_subv, vector_subv]) in&#10;                        is_(l, Location)))))))))))))&#10;" number="1105" object="" resource="newspeakSL" toString="eval_MultAssignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2904:40&#10;(forall mk_MultAssignment(dest, mult, expr):MultAssignment, e:Env, ps:PState &amp;&#10;  (let l:Denotable_value = access_env(dest)(e) in&#10;    (not (not is_(l, Location)) =&gt;&#10;      (let mk_Storable_value(v):Storable_value = access(l)((ps.sto)) in&#10;        (not (not is_(v, Vector)) =&gt;&#10;          (let mk_Vector(val, type):(Int | Real | Structure | Tr | Union | Vector | Void) = v in&#10;            (let v':EST_value = eval_VectorMult(mk_EST_value(v, (ps.sto), (ps.time)))(mult)(e) in&#10;              (let x:EST_value = eval_Expression(expr)(e)(mk_PState((v'.sto), (v'.time))) in&#10;                (not (((v'.val) = &lt;err&gt;) or (not is_((x.val), Vector))) =&gt;&#10;                  (not ((((((x.val).type).upper) - (((x.val).type).lower)) &lt;&gt; ((((v'.val).type).upper) - (((v'.val).type).lower))) or ((not gt(((v.type).type), (((x.val).type).type))) or (cases (((x.val).type).type) :&#10;                  case mk_VoidType(t) -&gt; (t = {Phi})others ((((x.val).type).fl) = {Phi})&#10;                  end))) =&gt;&#10;                    (let vleft:Vector = mk_Vector(vector_subv(val, (type.lower), ((((v'.val).type).lower) - 1)), mk_VectorType((type.lower), ((((v'.val).type).lower) - 1), (type.type), (type.fl))), vmid:Expressible_value = (x.val), vright:Vector = mk_Vector(vector_subv(val, ((((v'.val).type).upper) + 1), (type.upper)), mk_VectorType(((((v'.val).type).upper) + 1), (type.upper), (type.type), (type.fl))) in&#10;                      (let new_vec:Vector = vector_concat(vector_concat(vleft, vmid), vright), new_time:Time = dtplus([(x.time), t_vector_concat, t_vector_concat, vector_subv, vector_subv]) in&#10;                        is_(l, Location)))))))))))))&#10;"/>
<po column="13" line="2909" message="eval_StrAssignment, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2909:13&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (forall i in set (inds dest) &amp;&#10;    pre_(access_env(dest(i)), e)))&#10;" number="1106" object="" resource="newspeakSL" toString="eval_StrAssignment, ls: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2909:13&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (forall i in set (inds dest) &amp;&#10;    pre_(access_env(dest(i)), e)))&#10;"/>
<po column="24" line="2909" message="eval_StrAssignment, ls: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2909:24&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (forall i in set (inds dest) &amp;&#10;    i in set inds dest))&#10;" number="1107" object="" resource="newspeakSL" toString="eval_StrAssignment, ls: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2909:24&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (forall i in set (inds dest) &amp;&#10;    i in set inds dest))&#10;"/>
<po column="16" line="2912" message="eval_StrAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2912:16&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      pre_(eval_Expression(expr)(e), ps))))&#10;" number="1108" object="" resource="newspeakSL" toString="eval_StrAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2912:16&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      pre_(eval_Expression(expr)(e), ps))))&#10;"/>
<po column="16" line="2912" message="eval_StrAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2912:16&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      pre_(eval_Expression(expr), e))))&#10;" number="1109" object="" resource="newspeakSL" toString="eval_StrAssignment, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2912:16&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      pre_(eval_Expression(expr), e))))&#10;"/>
<po column="27" line="2917" message="eval_StrAssignment, nvals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2917:27&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (forall i in set (inds ls) &amp;&#10;              pre_(access(ls(i)), (ps.sto)))))))))&#10;" number="1110" object="" resource="newspeakSL" toString="eval_StrAssignment, nvals: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2917:27&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (forall i in set (inds ls) &amp;&#10;              pre_(access(ls(i)), (ps.sto)))))))))&#10;"/>
<po column="34" line="2917" message="eval_StrAssignment, nvals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2917:34&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (forall i in set (inds ls) &amp;&#10;              is_(ls(i), Location))))))))&#10;" number="1111" object="" resource="newspeakSL" toString="eval_StrAssignment, nvals: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2917:34&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (forall i in set (inds ls) &amp;&#10;              is_(ls(i), Location))))))))&#10;"/>
<po column="34" line="2917" message="eval_StrAssignment, nvals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2917:34&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (forall i in set (inds ls) &amp;&#10;              i in set inds ls)))))))&#10;" number="1112" object="" resource="newspeakSL" toString="eval_StrAssignment, nvals: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2917:34&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (forall i in set (inds ls) &amp;&#10;              i in set inds ls)))))))&#10;"/>
<po column="53" line="2919" message="eval_StrAssignment, vals, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2919:53&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (forall i in set (inds nvals) &amp;&#10;                i in set inds nvals))))))))&#10;" number="1113" object="" resource="newspeakSL" toString="eval_StrAssignment, vals, v: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2919:53&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (forall i in set (inds nvals) &amp;&#10;                i in set inds nvals))))))))&#10;"/>
<po column="30" line="2921" message="eval_StrAssignment, dest_tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2921:30&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (forall i in set (inds vals) &amp;&#10;                  i in set inds vals)))))))))&#10;" number="1114" object="" resource="newspeakSL" toString="eval_StrAssignment, dest_tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2921:30&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (forall i in set (inds vals) &amp;&#10;                  i in set inds vals)))))))))&#10;"/>
<po column="26" line="2922" message="eval_StrAssignment, x_tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2922:26&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (forall i in set (inds (((x.val).type).tps)) &amp;&#10;                  i in set inds (((x.val).type).tps))))))))))&#10;" number="1115" object="" resource="newspeakSL" toString="eval_StrAssignment, x_tps: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2922:26&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (forall i in set (inds (((x.val).type).tps)) &amp;&#10;                  i in set inds (((x.val).type).tps))))))))))&#10;"/>
<po column="55" line="2923" message="eval_StrAssignment: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2923:55&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (forall i in set (inds dest_tps) &amp;&#10;                    i in set inds dest_tps))))))))))&#10;" number="1116" object="" resource="newspeakSL" toString="eval_StrAssignment: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2923:55&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (forall i in set (inds dest_tps) &amp;&#10;                    i in set inds dest_tps))))))))))&#10;"/>
<po column="67" line="2923" message="eval_StrAssignment: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2923:67&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (forall i in set (inds dest_tps) &amp;&#10;                    i in set inds x_tps))))))))))&#10;" number="1117" object="" resource="newspeakSL" toString="eval_StrAssignment: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2923:67&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (forall i in set (inds dest_tps) &amp;&#10;                    i in set inds x_tps))))))))))&#10;"/>
<po column="59" line="2925" message="eval_StrAssignment, ys: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2925:59&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      ((is_(((x.val).val)(i), bool)) or&#10;                      (is_(((x.val).val)(i), real) and is_real(((x.val).val)(i)))))))))))))))&#10;" number="1118" object="" resource="newspeakSL" toString="eval_StrAssignment, ys: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2925:59&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      ((is_(((x.val).val)(i), bool)) or&#10;                      (is_(((x.val).val)(i), real) and is_real(((x.val).val)(i)))))))))))))))&#10;"/>
<po column="59" line="2925" message="eval_StrAssignment, ys: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2925:59&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      i in set inds ((x.val).val))))))))))))&#10;" number="1119" object="" resource="newspeakSL" toString="eval_StrAssignment, ys: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2925:59&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      i in set inds ((x.val).val))))))))))))&#10;"/>
<po column="33" line="2926" message="eval_StrAssignment, ys: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2926:33&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      i in set inds (((x.val).type).tps))))))))))))&#10;" number="1120" object="" resource="newspeakSL" toString="eval_StrAssignment, ys: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2926:33&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      i in set inds (((x.val).type).tps))))))))))))&#10;"/>
<po column="46" line="2925" message="eval_StrAssignment, ys: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2925:46&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Int)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Real)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Structure)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Tr)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Union)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Vector)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Void)))))))))))))&#10;" number="1121" object="" resource="newspeakSL" toString="eval_StrAssignment, ys: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2925:46&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (forall i in set (inds ((x.val).val)) &amp;&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Int)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Real)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Structure)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Tr)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Union)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Vector)) or&#10;                      (is_(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i)), Void)))))))))))))&#10;"/>
<po column="21" line="2930" message="eval_StrAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:21&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      pre_(multi_update(ls)(ys), (ps.sto)))))))))))))&#10;" number="1122" object="" resource="newspeakSL" toString="eval_StrAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:21&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      pre_(multi_update(ls)(ys), (ps.sto)))))))))))))&#10;"/>
<po column="21" line="2930" message="eval_StrAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:21&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      pre_(multi_update(ls), ys))))))))))))&#10;" number="1123" object="" resource="newspeakSL" toString="eval_StrAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:21&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      pre_(multi_update(ls), ys))))))))))))&#10;"/>
<po column="21" line="2930" message="eval_StrAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:21&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      pre_multi_update(ls))))))))))))&#10;" number="1124" object="" resource="newspeakSL" toString="eval_StrAssignment: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:21&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      pre_multi_update(ls))))))))))))&#10;"/>
<po column="34" line="2930" message="eval_StrAssignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:34&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      is_(ls, seq of (Location)))))))))))))&#10;" number="1125" object="" resource="newspeakSL" toString="eval_StrAssignment: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2930:34&#10;(forall mk_StrAssignment(dest, expr):StrAssignment, e:Env, ps:PState &amp;&#10;  (let ls:seq of (Denotable_value) = [access_env(dest(i))(e) | i in set (inds dest)] in&#10;    (not (exists [l in set (elems ls)] &amp; (not is_(l, Location))) =&gt;&#10;      (let x:EST_value = eval_Expression(expr)(e)(ps) in&#10;        (not (not is_((x.val), Structure)) =&gt;&#10;          (not ((len ls) &lt;&gt; struc_length(((x.val).type))) =&gt;&#10;            (let nvals:seq of (Storable_value) = [access(ls(i))((ps.sto)) | i in set (inds ls)] in&#10;              (let vals:seq of ((Int | Real | Structure | Tr | Union | Vector | Void)) = [let mk_Storable_value(v):Storable_value = nvals(i) in v | i in set (inds nvals)] in&#10;                (let dest_tps:seq of ((Float | IntType | StructureType | TrType | UnionType | VectorType | VoidType)) = [(vals(i).type) | i in set (inds vals)], x_tps:seq of (CompType) = [(((x.val).type).tps)(i) | i in set (inds (((x.val).type).tps))] in&#10;                  (not (exists [i in set (inds dest_tps)] &amp; (not gt(dest_tps(i), x_tps(i)))) =&gt;&#10;                    (let ys:seq of (Storable_value) = [mk_Storable_value(construct_ev(((x.val).val)(i), (((x.val).type).tps)(i))) | i in set (inds ((x.val).val))], new_t:Time = dtplus([(x.time), t_access, t_construct_ev, t_multi_update((len ys))]) in&#10;                      is_(ls, seq of (Location)))))))))))))&#10;"/>
<po column="8" line="2936" message="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2936:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeTakes(texpr)(e), ps)))&#10;" number="1126" object="" resource="newspeakSL" toString="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2936:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeTakes(texpr)(e), ps)))&#10;"/>
<po column="8" line="2936" message="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2936:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeTakes(texpr), e)))&#10;" number="1127" object="" resource="newspeakSL" toString="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2936:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeTakes(texpr), e)))&#10;"/>
<po column="8" line="2937" message="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2937:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (not is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeAssertion(texpr)(e), ps)))&#10;" number="1128" object="" resource="newspeakSL" toString="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2937:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (not is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeAssertion(texpr)(e), ps)))&#10;"/>
<po column="8" line="2937" message="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2937:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (not is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeAssertion(texpr), e)))&#10;" number="1129" object="" resource="newspeakSL" toString="eval_TimedExpression: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2937:8&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (not is_(texpr, TimeTakes) =&gt;&#10;    pre_(eval_TimeAssertion(texpr), e)))&#10;"/>
<po column="27" line="2937" message="eval_TimedExpression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2937:27&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (not is_(texpr, TimeTakes) =&gt;&#10;    is_(texpr, TimeAssertion)))&#10;" number="1130" object="" resource="newspeakSL" toString="eval_TimedExpression: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2937:27&#10;(forall mk_TimedExpression(texpr):TimedExpression, e:Env, ps:PState &amp;&#10;  (not is_(texpr, TimeTakes) =&gt;&#10;    is_(texpr, TimeAssertion)))&#10;"/>
<po column="11" line="2941" message="eval_TimeTakes, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2941:11&#10;(forall mk_TimeTakes(expr, time):TimeTakes, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), mu(ps, time |-&gt; zerot)))&#10;" number="1131" object="" resource="newspeakSL" toString="eval_TimeTakes, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2941:11&#10;(forall mk_TimeTakes(expr, time):TimeTakes, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), mu(ps, time |-&gt; zerot)))&#10;"/>
<po column="11" line="2941" message="eval_TimeTakes, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2941:11&#10;(forall mk_TimeTakes(expr, time):TimeTakes, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="1132" object="" resource="newspeakSL" toString="eval_TimeTakes, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2941:11&#10;(forall mk_TimeTakes(expr, time):TimeTakes, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="11" line="2942" message="eval_TimeTakes, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2942:11&#10;(forall mk_TimeTakes(expr, time):TimeTakes, e:Env, ps:PState &amp;&#10;  pre_(eval_TimeInterval(time), e))&#10;" number="1133" object="" resource="newspeakSL" toString="eval_TimeTakes, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2942:11&#10;(forall mk_TimeTakes(expr, time):TimeTakes, e:Env, ps:PState &amp;&#10;  pre_(eval_TimeInterval(time), e))&#10;"/>
<po column="15" line="2951" message="eval_TimeInterval, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2951:15&#10;(forall time:TimeInterval, e:Env &amp;&#10;  pre_(eval_Range(time), e))&#10;" number="1134" object="" resource="newspeakSL" toString="eval_TimeInterval, range: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2951:15&#10;(forall time:TimeInterval, e:Env &amp;&#10;  pre_(eval_Range(time), e))&#10;"/>
<po column="23" line="2952" message="eval_TimeInterval: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2952:23&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not (range = &lt;err&gt;) =&gt;&#10;      pre_min(range))))&#10;" number="1135" object="" resource="newspeakSL" toString="eval_TimeInterval: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2952:23&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not (range = &lt;err&gt;) =&gt;&#10;      pre_min(range))))&#10;"/>
<po column="27" line="2952" message="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2952:27&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not (range = &lt;err&gt;) =&gt;&#10;      is_(range, set of (real)))))&#10;" number="1136" object="" resource="newspeakSL" toString="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2952:27&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not (range = &lt;err&gt;) =&gt;&#10;      is_(range, set of (real)))))&#10;"/>
<po column="12" line="2954" message="eval_TimeInterval: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:12&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      pre_min(range))))&#10;" number="1137" object="" resource="newspeakSL" toString="eval_TimeInterval: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:12&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      pre_min(range))))&#10;"/>
<po column="16" line="2954" message="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:16&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      is_(range, set of (real)))))&#10;" number="1138" object="" resource="newspeakSL" toString="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:16&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      is_(range, set of (real)))))&#10;"/>
<po column="23" line="2954" message="eval_TimeInterval: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:23&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      pre_max(range))))&#10;" number="1139" object="" resource="newspeakSL" toString="eval_TimeInterval: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:23&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      pre_max(range))))&#10;"/>
<po column="27" line="2954" message="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:27&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      is_(range, set of (real)))))&#10;" number="1140" object="" resource="newspeakSL" toString="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2954:27&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (let range:(Errvalue | set of (int)) = eval_Range(time)(e) in&#10;    (not ((range = &lt;err&gt;) or (min(range) &lt; 0)) =&gt;&#10;      is_(range, set of (real)))))&#10;"/>
<po column="1" line="2949" message="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2949:1&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (is_(let range:(Errvalue | set of (int)) = eval_Range(time)(e) in (if ((range = &lt;err&gt;) or (min(range) &lt; 0))&#10;  then &lt;err&gt;&#10;  else mk_(min(range), max(range))), Errvalue)) or&#10;  (is_(let range:(Errvalue | set of (int)) = eval_Range(time)(e) in (if ((range = &lt;err&gt;) or (min(range) &lt; 0))&#10;  then &lt;err&gt;&#10;  else mk_(min(range), max(range))), Time)))&#10;" number="1141" object="" resource="newspeakSL" toString="eval_TimeInterval: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2949:1&#10;(forall time:TimeInterval, e:Env &amp;&#10;  (is_(let range:(Errvalue | set of (int)) = eval_Range(time)(e) in (if ((range = &lt;err&gt;) or (min(range) &lt; 0))&#10;  then &lt;err&gt;&#10;  else mk_(min(range), max(range))), Errvalue)) or&#10;  (is_(let range:(Errvalue | set of (int)) = eval_Range(time)(e) in (if ((range = &lt;err&gt;) or (min(range) &lt; 0))&#10;  then &lt;err&gt;&#10;  else mk_(min(range), max(range))), Time)))&#10;"/>
<po column="11" line="2958" message="eval_TimeAssertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2958:11&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), mu(ps, time |-&gt; zerot)))&#10;" number="1142" object="" resource="newspeakSL" toString="eval_TimeAssertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2958:11&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr)(e), mu(ps, time |-&gt; zerot)))&#10;"/>
<po column="11" line="2958" message="eval_TimeAssertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2958:11&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;" number="1143" object="" resource="newspeakSL" toString="eval_TimeAssertion, x: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2958:11&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  pre_(eval_Expression(expr), e))&#10;"/>
<po column="11" line="2959" message="eval_TimeAssertion, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2959:11&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  pre_(eval_TimeInterval(time), e))&#10;" number="1144" object="" resource="newspeakSL" toString="eval_TimeAssertion, t: function apply obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2959:11&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  pre_(eval_TimeInterval(time), e))&#10;"/>
<po column="36" line="2963" message="eval_TimeAssertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2963:36&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(mu(ps, time |-&gt; zerot)), t:(Errvalue | Time) = eval_TimeInterval(time)(e) in&#10;    (not (((x.val) = &lt;err&gt;) or (t = &lt;err&gt;)) =&gt;&#10;      (timeleq(t, (x.time)) =&gt;&#10;        (is_(t, (nat * nat)))))))&#10;" number="1145" object="" resource="newspeakSL" toString="eval_TimeAssertion: subtype obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2963:36&#10;(forall mk_TimeAssertion(expr, time):TimeAssertion, e:Env, ps:PState &amp;&#10;  (let x:EST_value = eval_Expression(expr)(e)(mu(ps, time |-&gt; zerot)), t:(Errvalue | Time) = eval_TimeInterval(time)(e) in&#10;    (not (((x.val) = &lt;err&gt;) or (t = &lt;err&gt;)) =&gt;&#10;      (timeleq(t, (x.time)) =&gt;&#10;        (is_(t, (nat * nat)))))))&#10;"/>
<po column="10" line="2973" message="Iterate: function compose obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2973:10&#10;(forall f:(EST_value -&gt; EST_value), n:nat &amp;&#10;  (not (n = 0) =&gt;&#10;    (not (n = 1) =&gt;&#10;      forall arg:EST_value &amp; pre_(Iterate(f, (n - 1)), arg) =&gt; pre_(f, Iterate(f, (n - 1))(arg)))))&#10;" number="1146" object="" resource="newspeakSL" toString="Iterate: function compose obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2973:10&#10;(forall f:(EST_value -&gt; EST_value), n:nat &amp;&#10;  (not (n = 0) =&gt;&#10;    (not (n = 1) =&gt;&#10;      forall arg:EST_value &amp; pre_(Iterate(f, (n - 1)), arg) =&gt; pre_(f, Iterate(f, (n - 1))(arg)))))&#10;"/>
<po column="10" line="2982" message="NIterate: function compose obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2982:10&#10;(forall f:(EST_Iterate -&gt; EST_Iterate), n:nat &amp;&#10;  (not (n = 0) =&gt;&#10;    (not (n = 1) =&gt;&#10;      forall arg:EST_Iterate &amp; pre_(NIterate(f, (n - 1)), arg) =&gt; pre_(f, NIterate(f, (n - 1))(arg)))))&#10;" number="1147" object="" resource="newspeakSL" toString="NIterate: function compose obligation in 'DEFAULT' (src\test\resources\modules\newspeakSL) at line 2982:10&#10;(forall f:(EST_Iterate -&gt; EST_Iterate), n:nat &amp;&#10;  (not (n = 0) =&gt;&#10;    (not (n = 1) =&gt;&#10;      forall arg:EST_Iterate &amp; pre_(NIterate(f, (n - 1)), arg) =&gt; pre_(f, NIterate(f, (n - 1))(arg)))))&#10;"/>
</result>
</testResult>
