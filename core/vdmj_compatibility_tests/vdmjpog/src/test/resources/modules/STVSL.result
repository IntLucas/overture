<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="1" line="12" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 12:1&#10;forall m1, m2 in set {{&lt;Adam&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}, {&lt;Charlie&gt; |-&gt; 3}, {&lt;Frank&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="1" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 12:1&#10;forall m1, m2 in set {{&lt;Adam&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}, {&lt;Charlie&gt; |-&gt; 3}, {&lt;Frank&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="13" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 13:1&#10;forall m1, m2 in set {{&lt;Bill&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}, {&lt;Charlie&gt; |-&gt; 3}, {&lt;George&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="2" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 13:1&#10;forall m1, m2 in set {{&lt;Bill&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}, {&lt;Charlie&gt; |-&gt; 3}, {&lt;George&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="14" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 14:1&#10;forall m1, m2 in set {{&lt;Adam&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}, {&lt;Bill&gt; |-&gt; 3}, {&lt;Harry&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="3" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 14:1&#10;forall m1, m2 in set {{&lt;Adam&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}, {&lt;Bill&gt; |-&gt; 3}, {&lt;Harry&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="15" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 15:1&#10;forall m1, m2 in set {{&lt;Bill&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}, {&lt;Adam&gt; |-&gt; 3}, {&lt;Ian&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="4" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 15:1&#10;forall m1, m2 in set {{&lt;Bill&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}, {&lt;Adam&gt; |-&gt; 3}, {&lt;Ian&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="16" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 16:1&#10;forall m1, m2 in set {{&lt;Charlie&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}, {&lt;Bill&gt; |-&gt; 3}, {&lt;John&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="5" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 16:1&#10;forall m1, m2 in set {{&lt;Charlie&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}, {&lt;Bill&gt; |-&gt; 3}, {&lt;John&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="17" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 17:1&#10;forall m1, m2 in set {{&lt;Charlie&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}, {&lt;Adam&gt; |-&gt; 3}, {&lt;Donald&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="6" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 17:1&#10;forall m1, m2 in set {{&lt;Charlie&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}, {&lt;Adam&gt; |-&gt; 3}, {&lt;Donald&gt; |-&gt; 4}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="18" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 18:1&#10;forall m1, m2 in set {{&lt;Donald&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="7" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 18:1&#10;forall m1, m2 in set {{&lt;Donald&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="19" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 19:1&#10;forall m1, m2 in set {{&lt;Frank&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="8" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 19:1&#10;forall m1, m2 in set {{&lt;Frank&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="20" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 20:1&#10;forall m1, m2 in set {{&lt;George&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="9" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 20:1&#10;forall m1, m2 in set {{&lt;George&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="21" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 21:1&#10;forall m1, m2 in set {{&lt;Harry&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="10" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 21:1&#10;forall m1, m2 in set {{&lt;Harry&gt; |-&gt; 1}, {&lt;Bill&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="22" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 22:1&#10;forall m1, m2 in set {{&lt;Ian&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="11" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 22:1&#10;forall m1, m2 in set {{&lt;Ian&gt; |-&gt; 1}, {&lt;Adam&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="1" line="23" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 23:1&#10;forall m1, m2 in set {{&lt;John&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="12" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 23:1&#10;forall m1, m2 in set {{&lt;John&gt; |-&gt; 1}, {&lt;Charlie&gt; |-&gt; 2}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="9" line="11" message="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 11:9&#10;forall m1, m2 in set {{{&lt;Adam&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2, &lt;Charlie&gt; |-&gt; 3, &lt;Frank&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Bill&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2, &lt;Charlie&gt; |-&gt; 3, &lt;George&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Adam&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2, &lt;Bill&gt; |-&gt; 3, &lt;Harry&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Bill&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2, &lt;Adam&gt; |-&gt; 3, &lt;Ian&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Charlie&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2, &lt;Bill&gt; |-&gt; 3, &lt;John&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Charlie&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2, &lt;Adam&gt; |-&gt; 3, &lt;Donald&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Donald&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;Frank&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;George&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;Harry&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;Ian&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;John&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2} |-&gt; 1000}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;" number="13" object="" resource="STVSL" toString="Votes: map sequence compatible obligation in 'DEFAULT' (STVSL) at line 11:9&#10;forall m1, m2 in set {{{&lt;Adam&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2, &lt;Charlie&gt; |-&gt; 3, &lt;Frank&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Bill&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2, &lt;Charlie&gt; |-&gt; 3, &lt;George&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Adam&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2, &lt;Bill&gt; |-&gt; 3, &lt;Harry&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Bill&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2, &lt;Adam&gt; |-&gt; 3, &lt;Ian&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Charlie&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2, &lt;Bill&gt; |-&gt; 3, &lt;John&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Charlie&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2, &lt;Adam&gt; |-&gt; 3, &lt;Donald&gt; |-&gt; 4} |-&gt; 100000}, {{&lt;Donald&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;Frank&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;George&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;Harry&gt; |-&gt; 1, &lt;Bill&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;Ian&gt; |-&gt; 1, &lt;Adam&gt; |-&gt; 2} |-&gt; 1000}, {{&lt;John&gt; |-&gt; 1, &lt;Charlie&gt; |-&gt; 2} |-&gt; 1000}} &amp;&#10;  forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;    d3 = d4 =&gt; m1(d3) = m2(d4)&#10;"/>
<po column="43" line="32" message="Voting_paper: map apply obligation in 'DEFAULT' (STVSL) at line 32:43&#10;(forall v:map (Candidate_names) to (nat1) &amp;&#10;  (forall name:Candidate_names &amp;&#10;    name in set dom v))&#10;" number="14" object="" resource="STVSL" toString="Voting_paper: map apply obligation in 'DEFAULT' (STVSL) at line 32:43&#10;(forall v:map (Candidate_names) to (nat1) &amp;&#10;  (forall name:Candidate_names &amp;&#10;    name in set dom v))&#10;"/>
<po column="19" line="42" message="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 42:19&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    i in set inds s))&#10;" number="15" object="" resource="STVSL" toString="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 42:19&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    i in set inds s))&#10;"/>
<po column="33" line="42" message="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 42:33&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    j in set inds s))&#10;" number="16" object="" resource="STVSL" toString="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 42:33&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    j in set inds s))&#10;"/>
<po column="18" line="44" message="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 44:18&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    i in set inds s))&#10;" number="17" object="" resource="STVSL" toString="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 44:18&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    i in set inds s))&#10;"/>
<po column="31" line="44" message="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 44:31&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    j in set inds s))&#10;" number="18" object="" resource="STVSL" toString="Stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 44:31&#10;(forall s:seq of (Score) &amp;&#10;  (forall i in set (inds s), j in set (inds s) &amp;&#10;    j in set inds s))&#10;"/>
<po column="18" line="109" message="mult_p_sum: let be st existence obligation in 'DEFAULT' (STVSL) at line 109:18&#10;(forall s:set of ((nat * Parcel)) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists mk_(m, pa) in set s))&#10;" number="19" object="" resource="STVSL" toString="mult_p_sum: let be st existence obligation in 'DEFAULT' (STVSL) at line 109:18&#10;(forall s:set of ((nat * Parcel)) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists mk_(m, pa) in set s))&#10;"/>
<po column="8" line="128" message="sort_papers: subtype obligation in 'DEFAULT' (STVSL) at line 128:8&#10;(forall votes:Parcel, names:set of (Candidate_names) &amp;&#10;  (forall name in set names &amp;&#10;    inv_Candidate(mk_Candidate(name, vote_res(votes, {v | [v in set (dom votes)] &amp; ((v :&gt; {1}) = {name |-&gt; 1})}), []))))&#10;" number="20" object="" resource="STVSL" toString="sort_papers: subtype obligation in 'DEFAULT' (STVSL) at line 128:8&#10;(forall votes:Parcel, names:set of (Candidate_names) &amp;&#10;  (forall name in set names &amp;&#10;    inv_Candidate(mk_Candidate(name, vote_res(votes, {v | [v in set (dom votes)] &amp; ((v :&gt; {1}) = {name |-&gt; 1})}), []))))&#10;"/>
<po column="3" line="139" message="stage_bk: sequence apply obligation in 'DEFAULT' (STVSL) at line 139:3&#10;(forall s:seq of (Score) &amp; (s &lt;&gt; []) =&gt;&#10;  (len s) in set inds s)&#10;" number="21" object="" resource="STVSL" toString="stage_bk: sequence apply obligation in 'DEFAULT' (STVSL) at line 139:3&#10;(forall s:seq of (Score) &amp; (s &lt;&gt; []) =&gt;&#10;  (len s) in set inds s)&#10;"/>
<po column="30" line="144" message="defer_transfer_of_surplus, lowest_value: function apply obligation in 'DEFAULT' (STVSL) at line 144:30&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  pre_stage_bk(stage))&#10;" number="22" object="" resource="STVSL" toString="defer_transfer_of_surplus, lowest_value: function apply obligation in 'DEFAULT' (STVSL) at line 144:30&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  pre_stage_bk(stage))&#10;"/>
<po column="36" line="145" message="defer_transfer_of_surplus, second_lowest_value: sequence apply obligation in 'DEFAULT' (STVSL) at line 145:36&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  ((len stage) - 1) in set inds stage)&#10;" number="23" object="" resource="STVSL" toString="defer_transfer_of_surplus, second_lowest_value: sequence apply obligation in 'DEFAULT' (STVSL) at line 145:36&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  ((len stage) - 1) in set inds stage)&#10;"/>
<po column="15" line="146" message="defer_transfer_of_surplus: sequence apply obligation in 'DEFAULT' (STVSL) at line 146:15&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  (let lowest_value:real = (stage_bk(stage).count), second_lowest_value:real = (stage(((len stage) - 1)).count) in&#10;    (forall i in set (inds stage) &amp; ((stage(i).count) &gt; quota) =&gt;&#10;      i in set inds stage)))&#10;" number="24" object="" resource="STVSL" toString="defer_transfer_of_surplus: sequence apply obligation in 'DEFAULT' (STVSL) at line 146:15&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  (let lowest_value:real = (stage_bk(stage).count), second_lowest_value:real = (stage(((len stage) - 1)).count) in&#10;    (forall i in set (inds stage) &amp; ((stage(i).count) &gt; quota) =&gt;&#10;      i in set inds stage)))&#10;"/>
<po column="17" line="147" message="defer_transfer_of_surplus: sequence apply obligation in 'DEFAULT' (STVSL) at line 147:17&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  (let lowest_value:real = (stage_bk(stage).count), second_lowest_value:real = (stage(((len stage) - 1)).count) in&#10;    (forall i in set (inds stage) &amp;&#10;      i in set inds stage)))&#10;" number="25" object="" resource="STVSL" toString="defer_transfer_of_surplus: sequence apply obligation in 'DEFAULT' (STVSL) at line 147:17&#10;(forall quota:real, stage:Stage &amp; ((len stage) &gt; 1) =&gt;&#10;  (let lowest_value:real = (stage_bk(stage).count), second_lowest_value:real = (stage(((len stage) - 1)).count) in&#10;    (forall i in set (inds stage) &amp;&#10;      i in set inds stage)))&#10;"/>
<po column="11" line="153" message="sum: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 153:11&#10;(forall s:seq of (real) &amp;&#10;  (not (s = []) =&gt;&#10;    s &lt;&gt; []))&#10;" number="26" object="" resource="STVSL" toString="sum: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 153:11&#10;(forall s:seq of (real) &amp;&#10;  (not (s = []) =&gt;&#10;    s &lt;&gt; []))&#10;"/>
<po column="22" line="153" message="sum: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 153:22&#10;(forall s:seq of (real) &amp;&#10;  (not (s = []) =&gt;&#10;    s &lt;&gt; []))&#10;" number="27" object="" resource="STVSL" toString="sum: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 153:22&#10;(forall s:seq of (real) &amp;&#10;  (not (s = []) =&gt;&#10;    s &lt;&gt; []))&#10;"/>
<po column="14" line="157" message="sole_leader, cand: unique existence binding obligation in 'DEFAULT' (STVSL) at line 157:14&#10;(forall stage:Stage, name:Candidate_names, leaders:set of (Candidate_names) &amp;&#10;  exists1 c in set (elems stage) &amp; ((c.name) = name))&#10;" number="28" object="" resource="STVSL" toString="sole_leader, cand: unique existence binding obligation in 'DEFAULT' (STVSL) at line 157:14&#10;(forall stage:Stage, name:Candidate_names, leaders:set of (Candidate_names) &amp;&#10;  exists1 c in set (elems stage) &amp; ((c.name) = name))&#10;"/>
<po column="59" line="164" message="greatest_value_at_earliest_stage, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 164:59&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  all_stages &lt;&gt; [])&#10;" number="29" object="" resource="STVSL" toString="greatest_value_at_earliest_stage, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 164:59&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  all_stages &lt;&gt; [])&#10;"/>
<po column="48" line="165" message="greatest_value_at_earliest_stage, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 165:48&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (forall score in set (elems (hd all_stages)) &amp;&#10;    all_stages &lt;&gt; []))&#10;" number="30" object="" resource="STVSL" toString="greatest_value_at_earliest_stage, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 165:48&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (forall score in set (elems (hd all_stages)) &amp;&#10;    all_stages &lt;&gt; []))&#10;"/>
<po column="45" line="165" message="greatest_value_at_earliest_stage, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 165:45&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (forall score in set (elems (hd all_stages)) &amp;&#10;    (hd all_stages) &lt;&gt; []))&#10;" number="31" object="" resource="STVSL" toString="greatest_value_at_earliest_stage, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 165:45&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (forall score in set (elems (hd all_stages)) &amp;&#10;    (hd all_stages) &lt;&gt; []))&#10;"/>
<po column="24" line="167" message="greatest_value_at_earliest_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 167:24&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (let leaders:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = ((hd (hd all_stages)).count))} in&#10;    (forall i in set (inds all_stages) &amp;&#10;      i in set inds all_stages)))&#10;" number="32" object="" resource="STVSL" toString="greatest_value_at_earliest_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 167:24&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (let leaders:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = ((hd (hd all_stages)).count))} in&#10;    (forall i in set (inds all_stages) &amp;&#10;      i in set inds all_stages)))&#10;"/>
<po column="34" line="171" message="greatest_value_at_earliest_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 171:34&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (let leaders:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = ((hd (hd all_stages)).count))} in&#10;    (forall i in set (inds all_stages) &amp;&#10;      (sole_leader(all_stages(i), name, leaders) =&gt;&#10;        (forall j in set {(i + 1), ... ,(len all_stages)}, other_leader in set leaders &amp;&#10;          j in set inds all_stages)))))&#10;" number="33" object="" resource="STVSL" toString="greatest_value_at_earliest_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 171:34&#10;(forall name:Candidate_names, all_stages:seq of (Stage) &amp;&#10;  (let leaders:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = ((hd (hd all_stages)).count))} in&#10;    (forall i in set (inds all_stages) &amp;&#10;      (sole_leader(all_stages(i), name, leaders) =&gt;&#10;        (forall j in set {(i + 1), ... ,(len all_stages)}, other_leader in set leaders &amp;&#10;          j in set inds all_stages)))))&#10;"/>
<po column="23" line="184" message="construct_sub_parcels, sub_parcel_map: map set compatible obligation in 'DEFAULT' (STVSL) at line 184:23&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    forall m1, m2 in set {{n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val)} | n in set names} &amp;&#10;      forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;        d3 = d4 =&gt; m1(d3) = m2(d4)))&#10;" number="34" object="" resource="STVSL" toString="construct_sub_parcels, sub_parcel_map: map set compatible obligation in 'DEFAULT' (STVSL) at line 184:23&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    forall m1, m2 in set {{n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val)} | n in set names} &amp;&#10;      forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;        d3 = d4 =&gt; m1(d3) = m2(d4)))&#10;"/>
<po column="45" line="184" message="construct_sub_parcels, sub_parcel_map: map set compatible obligation in 'DEFAULT' (STVSL) at line 184:45&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (forall n in set names &amp;&#10;      forall m1, m2 in set {{v |-&gt; parcel(v)} | v in set (dom parcel) &amp; next_preference(n, v, names)} &amp;&#10;        forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;          d3 = d4 =&gt; m1(d3) = m2(d4))))&#10;" number="35" object="" resource="STVSL" toString="construct_sub_parcels, sub_parcel_map: map set compatible obligation in 'DEFAULT' (STVSL) at line 184:45&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (forall n in set names &amp;&#10;      forall m1, m2 in set {{v |-&gt; parcel(v)} | v in set (dom parcel) &amp; next_preference(n, v, names)} &amp;&#10;        forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;          d3 = d4 =&gt; m1(d3) = m2(d4))))&#10;"/>
<po column="53" line="184" message="construct_sub_parcels, sub_parcel_map: map apply obligation in 'DEFAULT' (STVSL) at line 184:53&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (forall n in set names &amp;&#10;      (forall v in set (dom parcel) &amp; next_preference(n, v, names) =&gt;&#10;        v in set dom parcel))))&#10;" number="36" object="" resource="STVSL" toString="construct_sub_parcels, sub_parcel_map: map apply obligation in 'DEFAULT' (STVSL) at line 184:53&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (forall n in set names &amp;&#10;      (forall v in set (dom parcel) &amp; next_preference(n, v, names) =&gt;&#10;        v in set dom parcel))))&#10;"/>
<po column="33" line="187" message="construct_sub_parcels, non_empty_sub_parcel_map: map set compatible obligation in 'DEFAULT' (STVSL) at line 187:33&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      forall m1, m2 in set {{n |-&gt; sub_parcel_map(n)} | n in set (dom sub_parcel_map) &amp; ((sub_parcel_map(n).votes) &lt;&gt; {})} &amp;&#10;        forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;          d3 = d4 =&gt; m1(d3) = m2(d4))))&#10;" number="37" object="" resource="STVSL" toString="construct_sub_parcels, non_empty_sub_parcel_map: map set compatible obligation in 'DEFAULT' (STVSL) at line 187:33&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      forall m1, m2 in set {{n |-&gt; sub_parcel_map(n)} | n in set (dom sub_parcel_map) &amp; ((sub_parcel_map(n).votes) &lt;&gt; {})} &amp;&#10;        forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;          d3 = d4 =&gt; m1(d3) = m2(d4))))&#10;"/>
<po column="41" line="187" message="construct_sub_parcels, non_empty_sub_parcel_map: map apply obligation in 'DEFAULT' (STVSL) at line 187:41&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      (forall n in set (dom sub_parcel_map) &amp; ((sub_parcel_map(n).votes) &lt;&gt; {}) =&gt;&#10;        n in set dom sub_parcel_map))))&#10;" number="38" object="" resource="STVSL" toString="construct_sub_parcels, non_empty_sub_parcel_map: map apply obligation in 'DEFAULT' (STVSL) at line 187:41&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      (forall n in set (dom sub_parcel_map) &amp; ((sub_parcel_map(n).votes) &lt;&gt; {}) =&gt;&#10;        n in set dom sub_parcel_map))))&#10;"/>
<po column="34" line="188" message="construct_sub_parcels, non_empty_sub_parcel_map: map apply obligation in 'DEFAULT' (STVSL) at line 188:34&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      (forall n in set (dom sub_parcel_map) &amp;&#10;        n in set dom sub_parcel_map))))&#10;" number="39" object="" resource="STVSL" toString="construct_sub_parcels, non_empty_sub_parcel_map: map apply obligation in 'DEFAULT' (STVSL) at line 188:34&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      (forall n in set (dom sub_parcel_map) &amp;&#10;        n in set dom sub_parcel_map))))&#10;"/>
<po column="65" line="191" message="construct_sub_parcels: subtype obligation in 'DEFAULT' (STVSL) at line 191:65&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      (let non_empty_sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; sub_parcel_map(n) | n in set (dom sub_parcel_map) &amp; ((sub_parcel_map(n).votes) &lt;&gt; {})} in&#10;        inv_Value(1.0) and (is_real(1.0))))))&#10;" number="40" object="" resource="STVSL" toString="construct_sub_parcels: subtype obligation in 'DEFAULT' (STVSL) at line 191:65&#10;(forall val:Value, parcel:Parcel, discontinuing:Candidate, continuing_candidates:set of (Candidate) &amp;&#10;  (let names:set of (Candidate_names) = {(candidate.name) | [candidate in set continuing_candidates]} in&#10;    (let sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; mk_Sub_parcel({v |-&gt; parcel(v) | v in set (dom parcel) &amp; next_preference(n, v, names)}, val) | n in set names} in&#10;      (let non_empty_sub_parcel_map:map (Candidate_names) to (Sub_parcel) = {n |-&gt; sub_parcel_map(n) | n in set (dom sub_parcel_map) &amp; ((sub_parcel_map(n).votes) &lt;&gt; {})} in&#10;        inv_Value(1.0) and (is_real(1.0))))))&#10;"/>
<po column="18" line="205" message="next_preference: map apply obligation in 'DEFAULT' (STVSL) at line 205:18&#10;(forall name:Candidate_names, vote:Voting_paper, continuing:set of (Candidate_names) &amp;&#10;  ((name in set (dom vote)) =&gt;&#10;    (forall i in set (rng vote) &amp;&#10;      name in set dom vote)))&#10;" number="41" object="" resource="STVSL" toString="next_preference: map apply obligation in 'DEFAULT' (STVSL) at line 205:18&#10;(forall name:Candidate_names, vote:Voting_paper, continuing:set of (Candidate_names) &amp;&#10;  ((name in set (dom vote)) =&gt;&#10;    (forall i in set (rng vote) &amp;&#10;      name in set dom vote)))&#10;"/>
<po column="50" line="214" message="construct_bundle_for_transfer, new_sub_parcels: subtype obligation in 'DEFAULT' (STVSL) at line 214:50&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  inv_Value(1.0) and (is_real(1.0)))&#10;" number="42" object="" resource="STVSL" toString="construct_bundle_for_transfer, new_sub_parcels: subtype obligation in 'DEFAULT' (STVSL) at line 214:50&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  inv_Value(1.0) and (is_real(1.0)))&#10;"/>
<po column="49" line="219" message="construct_bundle_for_transfer, transf_val: subtype obligation in 'DEFAULT' (STVSL) at line 219:49&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes))))))&#10;" number="43" object="" resource="STVSL" toString="construct_bundle_for_transfer, transf_val: subtype obligation in 'DEFAULT' (STVSL) at line 219:49&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes))))))&#10;"/>
<po column="50" line="220" message="construct_bundle_for_transfer, transf_val: subtype obligation in 'DEFAULT' (STVSL) at line 220:50&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        total_no_of_trans_votes &gt;= 0))))&#10;" number="44" object="" resource="STVSL" toString="construct_bundle_for_transfer, transf_val: subtype obligation in 'DEFAULT' (STVSL) at line 220:50&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        total_no_of_trans_votes &gt;= 0))))&#10;"/>
<po column="24" line="221" message="construct_bundle_for_transfer, sub_parcels: map set compatible obligation in 'DEFAULT' (STVSL) at line 221:24&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          forall m1, m2 in set {{n |-&gt; mk_Sub_parcel(((new_sub_parcels.sub_parcels)(n).votes), transf_val)} | n in set (dom (new_sub_parcels.sub_parcels))} &amp;&#10;            forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;              d3 = d4 =&gt; m1(d3) = m2(d4))))))&#10;" number="45" object="" resource="STVSL" toString="construct_bundle_for_transfer, sub_parcels: map set compatible obligation in 'DEFAULT' (STVSL) at line 221:24&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          forall m1, m2 in set {{n |-&gt; mk_Sub_parcel(((new_sub_parcels.sub_parcels)(n).votes), transf_val)} | n in set (dom (new_sub_parcels.sub_parcels))} &amp;&#10;            forall d3 in set dom m1, d4 in set dom m2 &amp;&#10;              d3 = d4 =&gt; m1(d3) = m2(d4))))))&#10;"/>
<po column="25" line="222" message="construct_bundle_for_transfer, sub_parcels: map apply obligation in 'DEFAULT' (STVSL) at line 222:25&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          (forall n in set (dom (new_sub_parcels.sub_parcels)) &amp;&#10;            n in set dom (new_sub_parcels.sub_parcels)))))))&#10;" number="46" object="" resource="STVSL" toString="construct_bundle_for_transfer, sub_parcels: map apply obligation in 'DEFAULT' (STVSL) at line 222:25&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          (forall n in set (dom (new_sub_parcels.sub_parcels)) &amp;&#10;            n in set dom (new_sub_parcels.sub_parcels)))))))&#10;"/>
<po column="21" line="225" message="construct_bundle_for_transfer, loss_of_value: subtype obligation in 'DEFAULT' (STVSL) at line 225:21&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes)))))))&#10;" number="47" object="" resource="STVSL" toString="construct_bundle_for_transfer, loss_of_value: subtype obligation in 'DEFAULT' (STVSL) at line 225:21&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes)))))))&#10;"/>
<po column="43" line="225" message="construct_bundle_for_transfer, loss_of_value: subtype obligation in 'DEFAULT' (STVSL) at line 225:43&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          total_no_of_trans_votes &gt;= 0)))))&#10;" number="48" object="" resource="STVSL" toString="construct_bundle_for_transfer, loss_of_value: subtype obligation in 'DEFAULT' (STVSL) at line 225:43&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          total_no_of_trans_votes &gt;= 0)))))&#10;"/>
<po column="41" line="227" message="construct_bundle_for_transfer, non_trans_val: subtype obligation in 'DEFAULT' (STVSL) at line 227:41&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes)))))))&#10;" number="49" object="" resource="STVSL" toString="construct_bundle_for_transfer, non_trans_val: subtype obligation in 'DEFAULT' (STVSL) at line 227:41&#10;(forall surplus:real, old_value:Value, old_votes:Parcel, disc:Candidate, cont_cands:set of (Candidate) &amp;&#10;  (let new_sub_parcels:Sub_parcel_bundle = construct_sub_parcels(1.0, old_votes, disc, cont_cands) in&#10;    (let total_no_of_trans_votes:int = (size(old_votes) - size(((new_sub_parcels.non_transferable).votes))) in&#10;      (let total_val_trans_votes:real = (total_no_of_trans_votes * old_value) in&#10;        (let transf_val:Value = calc_transf_value(surplus, total_val_trans_votes, old_value, total_no_of_trans_votes) in&#10;          inv_Value(total_val_trans_votes) and (is_real(total_val_trans_votes)))))))&#10;"/>
<po column="34" line="237" message="calc_transf_value: non-zero obligation in 'DEFAULT' (STVSL) at line 237:34&#10;(forall surplus:real, total_value:Value, old_value:Value, total_no:nat &amp;&#10;  ((surplus &lt; total_value) =&gt;&#10;    total_no &lt;&gt; 0))&#10;" number="50" object="" resource="STVSL" toString="calc_transf_value: non-zero obligation in 'DEFAULT' (STVSL) at line 237:34&#10;(forall surplus:real, total_value:Value, old_value:Value, total_no:nat &amp;&#10;  ((surplus &lt; total_value) =&gt;&#10;    total_no &lt;&gt; 0))&#10;"/>
<po column="1" line="234" message="calc_transf_value: subtype obligation in 'DEFAULT' (STVSL) at line 234:1&#10;(forall surplus:real, total_value:Value, old_value:Value, total_no:nat &amp;&#10;  inv_Value((if (surplus &lt; total_value)&#10;  then ((floor ((100 * surplus) / total_no)) / 100)&#10;  else old_value)) and (is_real((if (surplus &lt; total_value)&#10;  then ((floor ((100 * surplus) / total_no)) / 100)&#10;  else old_value))))&#10;" number="51" object="" resource="STVSL" toString="calc_transf_value: subtype obligation in 'DEFAULT' (STVSL) at line 234:1&#10;(forall surplus:real, total_value:Value, old_value:Value, total_no:nat &amp;&#10;  inv_Value((if (surplus &lt; total_value)&#10;  then ((floor ((100 * surplus) / total_no)) / 100)&#10;  else old_value)) and (is_real((if (surplus &lt; total_value)&#10;  then ((floor ((100 * surplus) / total_no)) / 100)&#10;  else old_value))))&#10;"/>
<po column="22" line="243" message="calc_loss_of_value: non-zero obligation in 'DEFAULT' (STVSL) at line 243:22&#10;(forall surplus:real, total_value:Value, total_number:nat, old_value:Value &amp;&#10;  ((surplus &lt; total_value) =&gt;&#10;    total_number &lt;&gt; 0))&#10;" number="52" object="" resource="STVSL" toString="calc_loss_of_value: non-zero obligation in 'DEFAULT' (STVSL) at line 243:22&#10;(forall surplus:real, total_value:Value, total_number:nat, old_value:Value &amp;&#10;  ((surplus &lt; total_value) =&gt;&#10;    total_number &lt;&gt; 0))&#10;"/>
<po column="45" line="244" message="calc_loss_of_value: non-zero obligation in 'DEFAULT' (STVSL) at line 244:45&#10;(forall surplus:real, total_value:Value, total_number:nat, old_value:Value &amp;&#10;  ((surplus &lt; total_value) =&gt;&#10;    total_value &lt;&gt; 0))&#10;" number="53" object="" resource="STVSL" toString="calc_loss_of_value: non-zero obligation in 'DEFAULT' (STVSL) at line 244:45&#10;(forall surplus:real, total_value:Value, total_number:nat, old_value:Value &amp;&#10;  ((surplus &lt; total_value) =&gt;&#10;    total_value &lt;&gt; 0))&#10;"/>
<po column="1" line="247" message="calc_non_transf_value: subtype obligation in 'DEFAULT' (STVSL) at line 247:1&#10;(forall surplus:real, total_value:Value &amp;&#10;  inv_Value((if (surplus &gt; total_value)&#10;  then (surplus - total_value)&#10;  else 0)) and (is_real((if (surplus &gt; total_value)&#10;  then (surplus - total_value)&#10;  else 0))))&#10;" number="54" object="" resource="STVSL" toString="calc_non_transf_value: subtype obligation in 'DEFAULT' (STVSL) at line 247:1&#10;(forall surplus:real, total_value:Value &amp;&#10;  inv_Value((if (surplus &gt; total_value)&#10;  then (surplus - total_value)&#10;  else 0)) and (is_real((if (surplus &gt; total_value)&#10;  then (surplus - total_value)&#10;  else 0))))&#10;"/>
<po column="18" line="256" message="redistribute_parcels: map apply obligation in 'DEFAULT' (STVSL) at line 256:18&#10;(forall previous_collection:Candset, bundle:Sub_parcel_bundle &amp; ((dom (bundle.sub_parcels)) subset {(candidate.name) | [candidate in set previous_collection]}) =&gt;&#10;  (forall candidate in set previous_collection, n in set (dom (bundle.sub_parcels)) &amp; ((candidate.name) = n) =&gt;&#10;    n in set dom (bundle.sub_parcels)))&#10;" number="55" object="" resource="STVSL" toString="redistribute_parcels: map apply obligation in 'DEFAULT' (STVSL) at line 256:18&#10;(forall previous_collection:Candset, bundle:Sub_parcel_bundle &amp; ((dom (bundle.sub_parcels)) subset {(candidate.name) | [candidate in set previous_collection]}) =&gt;&#10;  (forall candidate in set previous_collection, n in set (dom (bundle.sub_parcels)) &amp; ((candidate.name) = n) =&gt;&#10;    n in set dom (bundle.sub_parcels)))&#10;"/>
<po column="26" line="273" message="score_sort: let be st existence obligation in 'DEFAULT' (STVSL) at line 273:26&#10;(forall sta:Stage &amp;&#10;  (not [] = sta =&gt;&#10;    (not exists [e]:Stage &amp; [e] = sta =&gt;&#10;      exists sta1 ^ sta2 in set {sta} &amp; ((abs ((len sta1) - (len sta2))) &lt; 2))))&#10;" number="56" object="" resource="STVSL" toString="score_sort: let be st existence obligation in 'DEFAULT' (STVSL) at line 273:26&#10;(forall sta:Stage &amp;&#10;  (not [] = sta =&gt;&#10;    (not exists [e]:Stage &amp; [e] = sta =&gt;&#10;      exists sta1 ^ sta2 in set {sta} &amp; ((abs ((len sta1) - (len sta2))) &lt; 2))))&#10;"/>
<po column="37" line="284" message="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 284:37&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      sta1 &lt;&gt; [])))&#10;" number="57" object="" resource="STVSL" toString="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 284:37&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      sta1 &lt;&gt; [])))&#10;"/>
<po column="56" line="284" message="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 284:56&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      sta2 &lt;&gt; [])))&#10;" number="58" object="" resource="STVSL" toString="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 284:56&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      sta2 &lt;&gt; [])))&#10;"/>
<po column="36" line="285" message="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 285:36&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      ((((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta1 &lt;&gt; []))))&#10;" number="59" object="" resource="STVSL" toString="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 285:36&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      ((((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta1 &lt;&gt; []))))&#10;"/>
<po column="59" line="285" message="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 285:59&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      ((((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta1 &lt;&gt; []))))&#10;" number="60" object="" resource="STVSL" toString="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 285:59&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      ((((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta1 &lt;&gt; []))))&#10;"/>
<po column="36" line="287" message="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 287:36&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      (not (((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta2 &lt;&gt; []))))&#10;" number="61" object="" resource="STVSL" toString="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 287:36&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      (not (((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta2 &lt;&gt; []))))&#10;"/>
<po column="65" line="287" message="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 287:65&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      (not (((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta2 &lt;&gt; []))))&#10;" number="62" object="" resource="STVSL" toString="score_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 287:65&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  (not exists mk_([], sta):(Stage * Stage) &amp; mk_([], sta) = mk_(sta1, sta2) =&gt;&#10;    (not exists mk_(sta, []):(Stage * Stage) &amp; mk_(sta, []) = mk_(sta1, sta2) =&gt;&#10;      (not (((hd sta1).count) &gt;= ((hd sta2).count)) =&gt;&#10;        sta2 &lt;&gt; []))))&#10;"/>
<po column="3" line="280" message="score_merge: subtype obligation in 'DEFAULT' (STVSL) at line 280:3&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  inv_Stage((cases mk_(sta1, sta2) :&#10;  case mk_([], sta) -&gt; sta,&#10;  case mk_(sta, []) -&gt; staothers (if (((hd sta1).count) &gt;= ((hd sta2).count))&#10;  then ([(hd sta1)] ^ score_merge((tl sta1), sta2))&#10;  else ([(hd sta2)] ^ score_merge(sta1, (tl sta2))))&#10;  end)) and (is_((cases mk_(sta1, sta2) :&#10;  case mk_([], sta) -&gt; sta,&#10;  case mk_(sta, []) -&gt; staothers (if (((hd sta1).count) &gt;= ((hd sta2).count))&#10;  then ([(hd sta1)] ^ score_merge((tl sta1), sta2))&#10;  else ([(hd sta2)] ^ score_merge(sta1, (tl sta2))))&#10;  end), seq of (Score))))&#10;" number="63" object="" resource="STVSL" toString="score_merge: subtype obligation in 'DEFAULT' (STVSL) at line 280:3&#10;(forall sta1:Stage, sta2:Stage &amp;&#10;  inv_Stage((cases mk_(sta1, sta2) :&#10;  case mk_([], sta) -&gt; sta,&#10;  case mk_(sta, []) -&gt; staothers (if (((hd sta1).count) &gt;= ((hd sta2).count))&#10;  then ([(hd sta1)] ^ score_merge((tl sta1), sta2))&#10;  else ([(hd sta2)] ^ score_merge(sta1, (tl sta2))))&#10;  end)) and (is_((cases mk_(sta1, sta2) :&#10;  case mk_([], sta) -&gt; sta,&#10;  case mk_(sta, []) -&gt; staothers (if (((hd sta1).count) &gt;= ((hd sta2).count))&#10;  then ([(hd sta1)] ^ score_merge((tl sta1), sta2))&#10;  else ([(hd sta2)] ^ score_merge(sta1, (tl sta2))))&#10;  end), seq of (Score))))&#10;"/>
<po column="12" line="293" message="set_seq: let be st existence obligation in 'DEFAULT' (STVSL) at line 293:12&#10;(forall s:set of (Score) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists e in set s))&#10;" number="64" object="" resource="STVSL" toString="set_seq: let be st existence obligation in 'DEFAULT' (STVSL) at line 293:12&#10;(forall s:set of (Score) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists e in set s))&#10;"/>
<po column="1" line="290" message="set_seq: subtype obligation in 'DEFAULT' (STVSL) at line 290:1&#10;(forall s:set of (Score) &amp;&#10;  inv_Stage((if (s = {})&#10;  then []&#10;  else let e in set s in ([e] ^ set_seq((s \ {e}))))) and (is_((if (s = {})&#10;  then []&#10;  else let e in set s in ([e] ^ set_seq((s \ {e})))), seq of (Score))))&#10;" number="65" object="" resource="STVSL" toString="set_seq: subtype obligation in 'DEFAULT' (STVSL) at line 290:1&#10;(forall s:set of (Score) &amp;&#10;  inv_Stage((if (s = {})&#10;  then []&#10;  else let e in set s in ([e] ^ set_seq((s \ {e}))))) and (is_((if (s = {})&#10;  then []&#10;  else let e in set s in ([e] ^ set_seq((s \ {e})))), seq of (Score))))&#10;"/>
<po column="39" line="305" message="construct_new_stage, unsorted_scores: map apply obligation in 'DEFAULT' (STVSL) at line 305:39&#10;(forall old_stage:Stage, discontinuing:Candidate_names, bundle:Sub_parcel_bundle &amp;&#10;  (let cands_with_more_votes:set of (Candidate_names) = (dom (bundle.sub_parcels)) in&#10;    (forall mk_Score(name, old_count) in set (elems old_stage) &amp; (name in set cands_with_more_votes) =&gt;&#10;      name in set dom (bundle.sub_parcels))))&#10;" number="66" object="" resource="STVSL" toString="construct_new_stage, unsorted_scores: map apply obligation in 'DEFAULT' (STVSL) at line 305:39&#10;(forall old_stage:Stage, discontinuing:Candidate_names, bundle:Sub_parcel_bundle &amp;&#10;  (let cands_with_more_votes:set of (Candidate_names) = (dom (bundle.sub_parcels)) in&#10;    (forall mk_Score(name, old_count) in set (elems old_stage) &amp; (name in set cands_with_more_votes) =&gt;&#10;      name in set dom (bundle.sub_parcels))))&#10;"/>
<po column="33" line="306" message="construct_new_stage, unsorted_scores: map apply obligation in 'DEFAULT' (STVSL) at line 306:33&#10;(forall old_stage:Stage, discontinuing:Candidate_names, bundle:Sub_parcel_bundle &amp;&#10;  (let cands_with_more_votes:set of (Candidate_names) = (dom (bundle.sub_parcels)) in&#10;    (forall mk_Score(name, old_count) in set (elems old_stage) &amp; (name in set cands_with_more_votes) =&gt;&#10;      name in set dom (bundle.sub_parcels))))&#10;" number="67" object="" resource="STVSL" toString="construct_new_stage, unsorted_scores: map apply obligation in 'DEFAULT' (STVSL) at line 306:33&#10;(forall old_stage:Stage, discontinuing:Candidate_names, bundle:Sub_parcel_bundle &amp;&#10;  (let cands_with_more_votes:set of (Candidate_names) = (dom (bundle.sub_parcels)) in&#10;    (forall mk_Score(name, old_count) in set (elems old_stage) &amp; (name in set cands_with_more_votes) =&gt;&#10;      name in set dom (bundle.sub_parcels))))&#10;"/>
<po column="17" line="318" message="exists_non_deferable_surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 318:17&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  stages &lt;&gt; [])&#10;" number="68" object="" resource="STVSL" toString="exists_non_deferable_surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 318:17&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="14" line="318" message="exists_non_deferable_surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 318:14&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  (hd stages) &lt;&gt; [])&#10;" number="69" object="" resource="STVSL" toString="exists_non_deferable_surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 318:14&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  (hd stages) &lt;&gt; [])&#10;"/>
<po column="13" line="320" message="exists_non_deferable_surplus: function apply obligation in 'DEFAULT' (STVSL) at line 320:13&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  ((((hd (hd stages)).count) &gt;= quota) =&gt;&#10;    pre_defer_transfer_of_surplus(quota, (hd stages))))&#10;" number="70" object="" resource="STVSL" toString="exists_non_deferable_surplus: function apply obligation in 'DEFAULT' (STVSL) at line 320:13&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  ((((hd (hd stages)).count) &gt;= quota) =&gt;&#10;    pre_defer_transfer_of_surplus(quota, (hd stages))))&#10;"/>
<po column="49" line="320" message="exists_non_deferable_surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 320:49&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  ((((hd (hd stages)).count) &gt;= quota) =&gt;&#10;    stages &lt;&gt; []))&#10;" number="71" object="" resource="STVSL" toString="exists_non_deferable_surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 320:49&#10;(forall stages:seq of (Stage), quota:real &amp;&#10;  ((((hd (hd stages)).count) &gt;= quota) =&gt;&#10;    stages &lt;&gt; []))&#10;"/>
<po column="31" line="324" message="trailing_candidate, trailing_count: function apply obligation in 'DEFAULT' (STVSL) at line 324:31&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  pre_stage_bk((hd all_stages)))&#10;" number="72" object="" resource="STVSL" toString="trailing_candidate, trailing_count: function apply obligation in 'DEFAULT' (STVSL) at line 324:31&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  pre_stage_bk((hd all_stages)))&#10;"/>
<po column="43" line="324" message="trailing_candidate, trailing_count: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 324:43&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  all_stages &lt;&gt; [])&#10;" number="73" object="" resource="STVSL" toString="trailing_candidate, trailing_count: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 324:43&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  all_stages &lt;&gt; [])&#10;"/>
<po column="59" line="325" message="trailing_candidate, lowest: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 325:59&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  (let trailing_count:real = (stage_bk((hd all_stages)).count) in&#10;    all_stages &lt;&gt; []))&#10;" number="74" object="" resource="STVSL" toString="trailing_candidate, lowest: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 325:59&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  (let trailing_count:real = (stage_bk((hd all_stages)).count) in&#10;    all_stages &lt;&gt; []))&#10;"/>
<po column="25" line="328" message="trailing_candidate: sequence apply obligation in 'DEFAULT' (STVSL) at line 328:25&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  (let trailing_count:real = (stage_bk((hd all_stages)).count) in&#10;    (let lowest:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = trailing_count)} in&#10;      (forall i in set (inds all_stages) &amp;&#10;        i in set inds all_stages))))&#10;" number="75" object="" resource="STVSL" toString="trailing_candidate: sequence apply obligation in 'DEFAULT' (STVSL) at line 328:25&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  (let trailing_count:real = (stage_bk((hd all_stages)).count) in&#10;    (let lowest:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = trailing_count)} in&#10;      (forall i in set (inds all_stages) &amp;&#10;        i in set inds all_stages))))&#10;"/>
<po column="35" line="330" message="trailing_candidate: sequence apply obligation in 'DEFAULT' (STVSL) at line 330:35&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  (let trailing_count:real = (stage_bk((hd all_stages)).count) in&#10;    (let lowest:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = trailing_count)} in&#10;      (forall i in set (inds all_stages) &amp;&#10;        (sole_trailer(all_stages(i), name, lowest) =&gt;&#10;          (forall j in set {(i + 1), ... ,(len all_stages)}, other in set lowest &amp;&#10;            j in set inds all_stages))))))&#10;" number="76" object="" resource="STVSL" toString="trailing_candidate: sequence apply obligation in 'DEFAULT' (STVSL) at line 330:35&#10;(forall name:Candidate_names, all_stages:seq1 of (Stage) &amp;&#10;  (let trailing_count:real = (stage_bk((hd all_stages)).count) in&#10;    (let lowest:set of (Candidate_names) = {(score.name) | [score in set (elems (hd all_stages))] &amp; ((score.count) = trailing_count)} in&#10;      (forall i in set (inds all_stages) &amp;&#10;        (sole_trailer(all_stages(i), name, lowest) =&gt;&#10;          (forall j in set {(i + 1), ... ,(len all_stages)}, other in set lowest &amp;&#10;            j in set inds all_stages))))))&#10;"/>
<po column="16" line="334" message="sole_trailer, cand: unique existence binding obligation in 'DEFAULT' (STVSL) at line 334:16&#10;(forall stage:Stage, name:Candidate_names, lowest:set of (Candidate_names) &amp;&#10;  exists1 c in set (elems stage) &amp; ((c.name) = name))&#10;" number="77" object="" resource="STVSL" toString="sole_trailer, cand: unique existence binding obligation in 'DEFAULT' (STVSL) at line 334:16&#10;(forall stage:Stage, name:Candidate_names, lowest:set of (Candidate_names) &amp;&#10;  exists1 c in set (elems stage) &amp; ((c.name) = name))&#10;"/>
<po column="1" line="344" message="number_of_remaining_vacancies: subtype obligation in 'DEFAULT' (STVSL) at line 344:1&#10;(forall cands:set of (Candidate_names) &amp;&#10;  (Number_of_vacancies - (card cands)) &gt;= 0)&#10;" number="78" object="" resource="STVSL" toString="number_of_remaining_vacancies: subtype obligation in 'DEFAULT' (STVSL) at line 344:1&#10;(forall cands:set of (Candidate_names) &amp;&#10;  (Number_of_vacancies - (card cands)) &gt;= 0)&#10;"/>
<po column="53" line="355" message="number_of_candidates_satisfying_quota, xs_quota_scs: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 355:53&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  stages &lt;&gt; [])&#10;" number="79" object="" resource="STVSL" toString="number_of_candidates_satisfying_quota, xs_quota_scs: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 355:53&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="35" line="363" message="non_transferable_paper, s: map apply obligation in 'DEFAULT' (STVSL) at line 363:35&#10;(forall paper:Voting_paper, discontinuing:Candidate_names, continuing_names:set of (Candidate_names) &amp;&#10;  (not (((dom (paper :-&gt; {1})) inter continuing_names) = {}) =&gt;&#10;    discontinuing in set dom paper))&#10;" number="80" object="" resource="STVSL" toString="non_transferable_paper, s: map apply obligation in 'DEFAULT' (STVSL) at line 363:35&#10;(forall paper:Voting_paper, discontinuing:Candidate_names, continuing_names:set of (Candidate_names) &amp;&#10;  (not (((dom (paper :-&gt; {1})) inter continuing_names) = {}) =&gt;&#10;    discontinuing in set dom paper))&#10;"/>
<po column="16" line="365" message="non_transferable_paper, m: function apply obligation in 'DEFAULT' (STVSL) at line 365:16&#10;(forall paper:Voting_paper, discontinuing:Candidate_names, continuing_names:set of (Candidate_names) &amp;&#10;  (not (((dom (paper :-&gt; {1})) inter continuing_names) = {}) =&gt;&#10;    (let s:set of (nat1) = (rng (paper :-&gt; {1, ... ,paper(discontinuing)})) in&#10;      (not (s = {}) =&gt;&#10;        pre_min(s)))))&#10;" number="81" object="" resource="STVSL" toString="non_transferable_paper, m: function apply obligation in 'DEFAULT' (STVSL) at line 365:16&#10;(forall paper:Voting_paper, discontinuing:Candidate_names, continuing_names:set of (Candidate_names) &amp;&#10;  (not (((dom (paper :-&gt; {1})) inter continuing_names) = {}) =&gt;&#10;    (let s:set of (nat1) = (rng (paper :-&gt; {1, ... ,paper(discontinuing)})) in&#10;      (not (s = {}) =&gt;&#10;        pre_min(s)))))&#10;"/>
<po column="6" line="372" message="min: let be st existence obligation in 'DEFAULT' (STVSL) at line 372:6&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  exists m in set s)&#10;" number="82" object="" resource="STVSL" toString="min: let be st existence obligation in 'DEFAULT' (STVSL) at line 372:6&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  exists m in set s)&#10;"/>
<po column="16" line="374" message="min, sm: function apply obligation in 'DEFAULT' (STVSL) at line 374:16&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  (forall m in set s &amp;&#10;    (not ((card s) = 1) =&gt;&#10;      pre_min((s \ {m})))))&#10;" number="83" object="" resource="STVSL" toString="min, sm: function apply obligation in 'DEFAULT' (STVSL) at line 374:16&#10;(forall s:set of (real) &amp; (s &lt;&gt; {}) =&gt;&#10;  (forall m in set s &amp;&#10;    (not ((card s) = 1) =&gt;&#10;      pre_min((s \ {m})))))&#10;"/>
<po column="35" line="381" message="last_vacancy_fillable, continuing_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 381:35&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names) =&gt;&#10;      i in set inds (hd stages))))&#10;" number="84" object="" resource="STVSL" toString="last_vacancy_fillable, continuing_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 381:35&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names) =&gt;&#10;      i in set inds (hd stages))))&#10;"/>
<po column="38" line="381" message="last_vacancy_fillable, continuing_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 381:38&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names) =&gt;&#10;      stages &lt;&gt; [])))&#10;" number="85" object="" resource="STVSL" toString="last_vacancy_fillable, continuing_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 381:38&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names) =&gt;&#10;      stages &lt;&gt; [])))&#10;"/>
<po column="68" line="381" message="last_vacancy_fillable, continuing_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 381:68&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    stages &lt;&gt; []))&#10;" number="86" object="" resource="STVSL" toString="last_vacancy_fillable, continuing_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 381:68&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    stages &lt;&gt; []))&#10;"/>
<po column="32" line="382" message="last_vacancy_fillable, continuing_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 382:32&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      i in set inds (hd stages))))&#10;" number="87" object="" resource="STVSL" toString="last_vacancy_fillable, continuing_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 382:32&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      i in set inds (hd stages))))&#10;"/>
<po column="35" line="382" message="last_vacancy_fillable, continuing_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 382:35&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      stages &lt;&gt; [])))&#10;" number="88" object="" resource="STVSL" toString="last_vacancy_fillable, continuing_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 382:35&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      stages &lt;&gt; [])))&#10;"/>
<po column="32" line="383" message="last_vacancy_fillable, surplus_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 383:32&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota) =&gt;&#10;      i in set inds (hd stages))))&#10;" number="89" object="" resource="STVSL" toString="last_vacancy_fillable, surplus_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 383:32&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota) =&gt;&#10;      i in set inds (hd stages))))&#10;"/>
<po column="35" line="383" message="last_vacancy_fillable, surplus_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 383:35&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota) =&gt;&#10;      stages &lt;&gt; [])))&#10;" number="90" object="" resource="STVSL" toString="last_vacancy_fillable, surplus_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 383:35&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota) =&gt;&#10;      stages &lt;&gt; [])))&#10;"/>
<po column="65" line="383" message="last_vacancy_fillable, surplus_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 383:65&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    stages &lt;&gt; []))&#10;" number="91" object="" resource="STVSL" toString="last_vacancy_fillable, surplus_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 383:65&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    stages &lt;&gt; []))&#10;"/>
<po column="36" line="384" message="last_vacancy_fillable, surplus_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 384:36&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      i in set inds (hd stages))))&#10;" number="92" object="" resource="STVSL" toString="last_vacancy_fillable, surplus_scores: sequence apply obligation in 'DEFAULT' (STVSL) at line 384:36&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      i in set inds (hd stages))))&#10;"/>
<po column="39" line="384" message="last_vacancy_fillable, surplus_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 384:39&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      stages &lt;&gt; [])))&#10;" number="93" object="" resource="STVSL" toString="last_vacancy_fillable, surplus_scores: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 384:39&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (forall i in set (inds (hd stages)) &amp;&#10;      stages &lt;&gt; [])))&#10;"/>
<po column="11" line="386" message="last_vacancy_fillable: sequence apply obligation in 'DEFAULT' (STVSL) at line 386:11&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (let continuing_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names)], surplus_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota)] in&#10;      (forall i in set (inds continuing_scores) &amp;&#10;        i in set inds continuing_scores))))&#10;" number="94" object="" resource="STVSL" toString="last_vacancy_fillable: sequence apply obligation in 'DEFAULT' (STVSL) at line 386:11&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (let continuing_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names)], surplus_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota)] in&#10;      (forall i in set (inds continuing_scores) &amp;&#10;        i in set inds continuing_scores))))&#10;"/>
<po column="18" line="387" message="last_vacancy_fillable: sequence apply obligation in 'DEFAULT' (STVSL) at line 387:18&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (let continuing_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names)], surplus_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota)] in&#10;      (forall i in set (inds continuing_scores) &amp;&#10;        (forall j in set ((inds continuing_scores) \ {i}) &amp;&#10;          j in set inds continuing_scores)))))&#10;" number="95" object="" resource="STVSL" toString="last_vacancy_fillable: sequence apply obligation in 'DEFAULT' (STVSL) at line 387:18&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (let continuing_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names)], surplus_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota)] in&#10;      (forall i in set (inds continuing_scores) &amp;&#10;        (forall j in set ((inds continuing_scores) \ {i}) &amp;&#10;          j in set inds continuing_scores)))))&#10;"/>
<po column="18" line="389" message="last_vacancy_fillable: sequence apply obligation in 'DEFAULT' (STVSL) at line 389:18&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (let continuing_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names)], surplus_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota)] in&#10;      (forall i in set (inds continuing_scores) &amp;&#10;        (forall j in set (inds surplus_scores) &amp;&#10;          j in set inds surplus_scores)))))&#10;" number="96" object="" resource="STVSL" toString="last_vacancy_fillable: sequence apply obligation in 'DEFAULT' (STVSL) at line 389:18&#10;(forall continuing:set of (Candidate), stages:seq of (Stage), quota:real &amp;&#10;  (let continuing_names:set of (Candidate_names) = {(c.name) | [c in set continuing]} in&#10;    (let continuing_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) in set continuing_names)], surplus_scores:seq of (Score) = [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).count) &gt; quota)] in&#10;      (forall i in set (inds continuing_scores) &amp;&#10;        (forall j in set (inds surplus_scores) &amp;&#10;          j in set inds surplus_scores)))))&#10;"/>
<po column="25" line="398" message="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 398:25&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (i + 1) in set inds stages))&#10;" number="97" object="" resource="STVSL" toString="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 398:25&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (i + 1) in set inds stages))&#10;"/>
<po column="43" line="398" message="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 398:43&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    i in set inds stages))&#10;" number="98" object="" resource="STVSL" toString="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 398:43&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    i in set inds stages))&#10;"/>
<po column="38" line="399" message="make_result_sheet, result, excluded: unique existence binding obligation in 'DEFAULT' (STVSL) at line 399:38&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      exists1 ex in set Cand_names &amp; (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; (forall osc in set (elems stages(i)) &amp; ((osc.name) &lt;&gt; (sc.name)))}))))&#10;" number="99" object="" resource="STVSL" toString="make_result_sheet, result, excluded: unique existence binding obligation in 'DEFAULT' (STVSL) at line 399:38&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      exists1 ex in set Cand_names &amp; (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; (forall osc in set (elems stages(i)) &amp; ((osc.name) &lt;&gt; (sc.name)))}))))&#10;"/>
<po column="51" line="401" message="make_result_sheet, result, excluded: sequence apply obligation in 'DEFAULT' (STVSL) at line 401:51&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall ex in set Cand_names &amp;&#10;        (i + 1) in set inds stages))))&#10;" number="100" object="" resource="STVSL" toString="make_result_sheet, result, excluded: sequence apply obligation in 'DEFAULT' (STVSL) at line 401:51&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall ex in set Cand_names &amp;&#10;        (i + 1) in set inds stages))))&#10;"/>
<po column="59" line="402" message="make_result_sheet, result, excluded: sequence apply obligation in 'DEFAULT' (STVSL) at line 402:59&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall ex in set Cand_names &amp;&#10;        (forall sc in set (elems stages((i + 1))) &amp;&#10;          i in set inds stages)))))&#10;" number="101" object="" resource="STVSL" toString="make_result_sheet, result, excluded: sequence apply obligation in 'DEFAULT' (STVSL) at line 402:59&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall ex in set Cand_names &amp;&#10;        (forall sc in set (elems stages((i + 1))) &amp;&#10;          i in set inds stages)))))&#10;"/>
<po column="33" line="404" message="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 404:33&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (let excluded:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota ex in set Cand_names &amp; (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; (forall osc in set (elems stages(i)) &amp; ((osc.name) &lt;&gt; (sc.name)))})) in&#10;        (i + 1) in set inds record))))&#10;" number="102" object="" resource="STVSL" toString="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 404:33&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (let excluded:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota ex in set Cand_names &amp; (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; (forall osc in set (elems stages(i)) &amp; ((osc.name) &lt;&gt; (sc.name)))})) in&#10;        (i + 1) in set inds record))))&#10;"/>
<po column="41" line="405" message="make_result_sheet, result, transferred: unique existence binding obligation in 'DEFAULT' (STVSL) at line 405:41&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      exists1 tf in set Cand_names &amp; (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) &gt; quota))}))))&#10;" number="103" object="" resource="STVSL" toString="make_result_sheet, result, transferred: unique existence binding obligation in 'DEFAULT' (STVSL) at line 405:41&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      exists1 tf in set Cand_names &amp; (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) &gt; quota))}))))&#10;"/>
<po column="52" line="407" message="make_result_sheet, result, transferred: sequence apply obligation in 'DEFAULT' (STVSL) at line 407:52&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall tf in set Cand_names &amp;&#10;        (i + 1) in set inds stages))))&#10;" number="104" object="" resource="STVSL" toString="make_result_sheet, result, transferred: sequence apply obligation in 'DEFAULT' (STVSL) at line 407:52&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall tf in set Cand_names &amp;&#10;        (i + 1) in set inds stages))))&#10;"/>
<po column="68" line="408" message="make_result_sheet, result, transferred: sequence apply obligation in 'DEFAULT' (STVSL) at line 408:68&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall tf in set Cand_names &amp;&#10;        (forall sc in set (elems stages((i + 1))) &amp;&#10;          i in set inds stages)))))&#10;" number="105" object="" resource="STVSL" toString="make_result_sheet, result, transferred: sequence apply obligation in 'DEFAULT' (STVSL) at line 408:68&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (forall tf in set Cand_names &amp;&#10;        (forall sc in set (elems stages((i + 1))) &amp;&#10;          i in set inds stages)))))&#10;"/>
<po column="33" line="410" message="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 410:33&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (let transferred:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota tf in set Cand_names &amp; (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) &gt; quota))})) in&#10;        (i + 1) in set inds record))))&#10;" number="106" object="" resource="STVSL" toString="make_result_sheet, result: sequence apply obligation in 'DEFAULT' (STVSL) at line 410:33&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (forall i:nat1 &amp;&#10;    (not ((len stages((i + 1))) &gt; (len stages(i))) =&gt;&#10;      (let transferred:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota tf in set Cand_names &amp; (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) &gt; quota))})) in&#10;        (i + 1) in set inds record))))&#10;"/>
<po column="38" line="411" message="make_result_sheet: subtype obligation in 'DEFAULT' (STVSL) at line 411:38&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (let result: (nat1 -&gt; Result)&#10;  &#9;result(i) ==&#10;  (if ((len stages((i + 1))) &gt; (len stages(i)))&#10;  then let excluded:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota ex in set Cand_names &amp; (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; (forall osc in set (elems stages(i)) &amp; ((osc.name) &lt;&gt; (sc.name)))})) in mk_Result((record((i + 1)).scores), nil, excluded)&#10;  else let transferred:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota tf in set Cand_names &amp; (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) &gt; quota))})) in mk_Result((record((i + 1)).scores), transferred, nil)) in&#10;    (forall j in set {1, ... ,((len record) - 1)} &amp;&#10;      ((len record) - j) &gt; 0)))&#10;" number="107" object="" resource="STVSL" toString="make_result_sheet: subtype obligation in 'DEFAULT' (STVSL) at line 411:38&#10;(forall stages:seq of (Stage), quota:real, record:seq of (Record_entry), elected:set of (Candidate_names) &amp;&#10;  (let result: (nat1 -&gt; Result)&#10;  &#9;result(i) ==&#10;  (if ((len stages((i + 1))) &gt; (len stages(i)))&#10;  then let excluded:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota ex in set Cand_names &amp; (ex in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; (forall osc in set (elems stages(i)) &amp; ((osc.name) &lt;&gt; (sc.name)))})) in mk_Result((record((i + 1)).scores), nil, excluded)&#10;  else let transferred:(&lt;Adam&gt; | &lt;Bill&gt; | &lt;Charlie&gt; | &lt;Donald&gt; | &lt;Edward&gt; | &lt;Frank&gt; | &lt;George&gt; | &lt;Harry&gt; | &lt;Ian&gt; | &lt;John&gt;) = (iota tf in set Cand_names &amp; (tf in set {(sc.name) | [sc in set (elems stages((i + 1)))] &amp; ((mk_Score((sc.name), quota) in set (elems stages(i))) and ((sc.count) &gt; quota))})) in mk_Result((record((i + 1)).scores), transferred, nil)) in&#10;    (forall j in set {1, ... ,((len record) - 1)} &amp;&#10;      ((len record) - j) &gt; 0)))&#10;"/>
<po column="12" line="417" message="sp_set_seq: let be st existence obligation in 'DEFAULT' (STVSL) at line 417:12&#10;(forall s:set of (Sub_parcel) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists e in set s))&#10;" number="108" object="" resource="STVSL" toString="sp_set_seq: let be st existence obligation in 'DEFAULT' (STVSL) at line 417:12&#10;(forall s:set of (Sub_parcel) &amp;&#10;  (not (s = {}) =&gt;&#10;    exists e in set s))&#10;"/>
<po column="26" line="424" message="sub_parcels_sort: let be st existence obligation in 'DEFAULT' (STVSL) at line 424:26&#10;(forall sps:seq of (Sub_parcel) &amp;&#10;  (not [] = sps =&gt;&#10;    (not exists [e]:seq of (Sub_parcel) &amp; [e] = sps =&gt;&#10;      exists sps1 ^ sps2 in set {sps} &amp; ((abs ((len sps1) - (len sps2))) &lt; 2))))&#10;" number="109" object="" resource="STVSL" toString="sub_parcels_sort: let be st existence obligation in 'DEFAULT' (STVSL) at line 424:26&#10;(forall sps:seq of (Sub_parcel) &amp;&#10;  (not [] = sps =&gt;&#10;    (not exists [e]:seq of (Sub_parcel) &amp; [e] = sps =&gt;&#10;      exists sps1 ^ sps2 in set {sps} &amp; ((abs ((len sps1) - (len sps2))) &lt; 2))))&#10;"/>
<po column="48" line="435" message="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 435:48&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      sps1 &lt;&gt; [])))&#10;" number="110" object="" resource="STVSL" toString="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 435:48&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      sps1 &lt;&gt; [])))&#10;"/>
<po column="71" line="435" message="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 435:71&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      sps2 &lt;&gt; [])))&#10;" number="111" object="" resource="STVSL" toString="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 435:71&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      sps2 &lt;&gt; [])))&#10;"/>
<po column="39" line="436" message="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 436:39&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      ((total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps1 &lt;&gt; []))))&#10;" number="112" object="" resource="STVSL" toString="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 436:39&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      ((total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps1 &lt;&gt; []))))&#10;"/>
<po column="68" line="436" message="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 436:68&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      ((total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps1 &lt;&gt; []))))&#10;" number="113" object="" resource="STVSL" toString="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 436:68&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      ((total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps1 &lt;&gt; []))))&#10;"/>
<po column="39" line="437" message="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 437:39&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      (not (total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps2 &lt;&gt; []))))&#10;" number="114" object="" resource="STVSL" toString="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 437:39&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      (not (total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps2 &lt;&gt; []))))&#10;"/>
<po column="74" line="437" message="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 437:74&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      (not (total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps2 &lt;&gt; []))))&#10;" number="115" object="" resource="STVSL" toString="sub_parcels_merge: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 437:74&#10;(forall sps1:seq of (Sub_parcel), sps2:seq of (Sub_parcel) &amp;&#10;  (not exists mk_([], sps):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_([], sps) = mk_(sps1, sps2) =&gt;&#10;    (not exists mk_(sps, []):(seq of (Sub_parcel) * seq of (Sub_parcel)) &amp; mk_(sps, []) = mk_(sps1, sps2) =&gt;&#10;      (not (total_value((hd sps1)) &gt;= total_value((hd sps2))) =&gt;&#10;        sps2 &lt;&gt; []))))&#10;"/>
<po column="53" line="446" message="CHOOSE_SURPLUS_TO_TRANSFER, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 446:53&#10;stages &lt;&gt; []&#10;" number="116" object="" resource="STVSL" toString="CHOOSE_SURPLUS_TO_TRANSFER, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 446:53&#10;stages &lt;&gt; []&#10;"/>
<po column="46" line="447" message="CHOOSE_SURPLUS_TO_TRANSFER, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 447:46&#10;(forall score in set (elems (hd stages)) &amp;&#10;  stages &lt;&gt; [])&#10;" number="117" object="" resource="STVSL" toString="CHOOSE_SURPLUS_TO_TRANSFER, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 447:46&#10;(forall score in set (elems (hd stages)) &amp;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="43" line="447" message="CHOOSE_SURPLUS_TO_TRANSFER, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 447:43&#10;(forall score in set (elems (hd stages)) &amp;&#10;  (hd stages) &lt;&gt; [])&#10;" number="118" object="" resource="STVSL" toString="CHOOSE_SURPLUS_TO_TRANSFER, leaders: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 447:43&#10;(forall score in set (elems (hd stages)) &amp;&#10;  (hd stages) &lt;&gt; [])&#10;"/>
<po column="25" line="452" message="CHOOSE_SURPLUS_TO_TRANSFER: unique existence binding obligation in 'DEFAULT' (STVSL) at line 452:25&#10;exists1 name in set leaders &amp; greatest_value_at_earliest_stage(name, stages)&#10;" number="119" object="" resource="STVSL" toString="CHOOSE_SURPLUS_TO_TRANSFER: unique existence binding obligation in 'DEFAULT' (STVSL) at line 452:25&#10;exists1 name in set leaders &amp; greatest_value_at_earliest_stage(name, stages)&#10;"/>
<po column="51" line="460" message="CHOOSE_CANDIDATE_TO_EXCLUDE, lowest: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 460:51&#10;stages &lt;&gt; []&#10;" number="120" object="" resource="STVSL" toString="CHOOSE_CANDIDATE_TO_EXCLUDE, lowest: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 460:51&#10;stages &lt;&gt; []&#10;"/>
<po column="40" line="461" message="CHOOSE_CANDIDATE_TO_EXCLUDE, lowest: function apply obligation in 'DEFAULT' (STVSL) at line 461:40&#10;(forall score in set (elems (hd stages)) &amp;&#10;  pre_stage_bk((hd stages)))&#10;" number="121" object="" resource="STVSL" toString="CHOOSE_CANDIDATE_TO_EXCLUDE, lowest: function apply obligation in 'DEFAULT' (STVSL) at line 461:40&#10;(forall score in set (elems (hd stages)) &amp;&#10;  pre_stage_bk((hd stages)))&#10;"/>
<po column="52" line="461" message="CHOOSE_CANDIDATE_TO_EXCLUDE, lowest: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 461:52&#10;(forall score in set (elems (hd stages)) &amp;&#10;  stages &lt;&gt; [])&#10;" number="122" object="" resource="STVSL" toString="CHOOSE_CANDIDATE_TO_EXCLUDE, lowest: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 461:52&#10;(forall score in set (elems (hd stages)) &amp;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="46" line="465" message="CHOOSE_CANDIDATE_TO_EXCLUDE: subtype obligation in 'DEFAULT' (STVSL) at line 465:46&#10;(forall n in set lowest &amp;&#10;  is_(stages, seq1 of (Stage)))&#10;" number="123" object="" resource="STVSL" toString="CHOOSE_CANDIDATE_TO_EXCLUDE: subtype obligation in 'DEFAULT' (STVSL) at line 465:46&#10;(forall n in set lowest &amp;&#10;  is_(stages, seq1 of (Stage)))&#10;"/>
<po column="25" line="466" message="CHOOSE_CANDIDATE_TO_EXCLUDE: unique existence binding obligation in 'DEFAULT' (STVSL) at line 466:25&#10;exists1 name in set lowest &amp; trailing_candidate(name, stages)&#10;" number="124" object="" resource="STVSL" toString="CHOOSE_CANDIDATE_TO_EXCLUDE: unique existence binding obligation in 'DEFAULT' (STVSL) at line 466:25&#10;exists1 name in set lowest &amp; trailing_candidate(name, stages)&#10;"/>
<po column="46" line="467" message="CHOOSE_CANDIDATE_TO_EXCLUDE: subtype obligation in 'DEFAULT' (STVSL) at line 467:46&#10;(forall name in set lowest &amp;&#10;  is_(stages, seq1 of (Stage)))&#10;" number="125" object="" resource="STVSL" toString="CHOOSE_CANDIDATE_TO_EXCLUDE: subtype obligation in 'DEFAULT' (STVSL) at line 467:46&#10;(forall name in set lowest &amp;&#10;  is_(stages, seq1 of (Stage)))&#10;"/>
<po column="32" line="474" message="RANDOM_ELEMENT, c: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 474:32&#10;next_choice &lt;&gt; []&#10;" number="126" object="" resource="STVSL" toString="RANDOM_ELEMENT, c: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 474:32&#10;next_choice &lt;&gt; []&#10;"/>
<po column="4" line="475" message="RANDOM_ELEMENT: state invariant obligation in 'DEFAULT' (STVSL) at line 475:4&#10;-- After next_choice := (tl next_choice)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="127" object="" resource="STVSL" toString="RANDOM_ELEMENT: state invariant obligation in 'DEFAULT' (STVSL) at line 475:4&#10;-- After next_choice := (tl next_choice)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="22" line="475" message="RANDOM_ELEMENT: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 475:22&#10;next_choice &lt;&gt; []&#10;" number="128" object="" resource="STVSL" toString="RANDOM_ELEMENT: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 475:22&#10;next_choice &lt;&gt; []&#10;"/>
<po column="6" line="481" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 481:6&#10;-- After excluded := {}&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="129" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 481:6&#10;-- After excluded := {}&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="482" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 482:6&#10;-- After continuing := curr_cont&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="130" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 482:6&#10;-- After continuing := curr_cont&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="483" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 483:6&#10;-- After next_choice := rand_choice&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="131" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 483:6&#10;-- After next_choice := rand_choice&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="484" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 484:6&#10;-- After elected := {}&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="132" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 484:6&#10;-- After elected := {}&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="485" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 485:6&#10;-- After stages := [build_first_stage(curr_cont)]&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="133" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 485:6&#10;-- After stages := [build_first_stage(curr_cont)]&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="486" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 486:6&#10;-- After quota := two_decimal_places((size(votes) / (Number_of_vacancies + 1)))&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="134" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 486:6&#10;-- After quota := two_decimal_places((size(votes) / (Number_of_vacancies + 1)))&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="45" line="486" message="PREPARE_ELECTION: non-zero obligation in 'DEFAULT' (STVSL) at line 486:45&#10;(Number_of_vacancies + 1) &lt;&gt; 0&#10;" number="135" object="" resource="STVSL" toString="PREPARE_ELECTION: non-zero obligation in 'DEFAULT' (STVSL) at line 486:45&#10;(Number_of_vacancies + 1) &lt;&gt; 0&#10;"/>
<po column="6" line="487" message="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 487:6&#10;-- After record := [mk_Record_entry((elems (hd stages)), 0, 0)]&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="136" object="" resource="STVSL" toString="PREPARE_ELECTION: state invariant obligation in 'DEFAULT' (STVSL) at line 487:6&#10;-- After record := [mk_Record_entry((elems (hd stages)), 0, 0)]&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="42" line="487" message="PREPARE_ELECTION: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 487:42&#10;stages &lt;&gt; []&#10;" number="137" object="" resource="STVSL" toString="PREPARE_ELECTION: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 487:42&#10;stages &lt;&gt; []&#10;"/>
<po column="4" line="497" message="ELECT_ALL_REMAINING_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 497:4&#10;-- After elected := (elected union continuing)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="138" object="" resource="STVSL" toString="ELECT_ALL_REMAINING_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 497:4&#10;-- After elected := (elected union continuing)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="4" line="498" message="ELECT_ALL_REMAINING_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 498:4&#10;-- After continuing := {}&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="139" object="" resource="STVSL" toString="ELECT_ALL_REMAINING_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 498:4&#10;-- After continuing := {}&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="55" line="506" message="PROCESS_SUB_PARCELS, bundle: subtype obligation in 'DEFAULT' (STVSL) at line 506:55&#10;inv_Value(0.0) and (is_real(0.0))&#10;" number="140" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS, bundle: subtype obligation in 'DEFAULT' (STVSL) at line 506:55&#10;inv_Value(0.0) and (is_real(0.0))&#10;"/>
<po column="31" line="508" message="PROCESS_SUB_PARCELS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 508:31&#10;stages &lt;&gt; []&#10;" number="141" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 508:31&#10;stages &lt;&gt; []&#10;"/>
<po column="4" line="509" message="PROCESS_SUB_PARCELS: while loop termination obligation in 'DEFAULT' (STVSL) at line 509:4&#10;while (i &lt;&gt; (len sub_parcels)) do ...&#10;" number="142" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: while loop termination obligation in 'DEFAULT' (STVSL) at line 509:4&#10;while (i &lt;&gt; (len sub_parcels)) do ...&#10;"/>
<po column="11" line="510" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 510:11&#10;-- After i := (i + 1)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="143" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 510:11&#10;-- After i := (i + 1)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="7" line="511" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 511:7&#10;-- After bundle := construct_sub_parcels((sub_parcels(i).value), (sub_parcels(i).votes), ex_cand, new_candidates)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="144" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 511:7&#10;-- After bundle := construct_sub_parcels((sub_parcels(i).value), (sub_parcels(i).votes), ex_cand, new_candidates)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="37" line="512" message="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 512:37&#10;i in set inds sub_parcels&#10;" number="145" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 512:37&#10;i in set inds sub_parcels&#10;"/>
<po column="58" line="512" message="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 512:58&#10;i in set inds sub_parcels&#10;" number="146" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 512:58&#10;i in set inds sub_parcels&#10;"/>
<po column="11" line="514" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 514:11&#10;-- After non_trans_value := (non_trans_value + (size(((bundle.non_transferable).votes)) * (sub_parcels(i).value)))&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="147" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 514:11&#10;-- After non_trans_value := (non_trans_value + (size(((bundle.non_transferable).votes)) * (sub_parcels(i).value)))&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="9" line="515" message="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 515:9&#10;i in set inds sub_parcels&#10;" number="148" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 515:9&#10;i in set inds sub_parcels&#10;"/>
<po column="11" line="516" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 516:11&#10;-- After new_candidates := redistribute_parcels(new_candidates, bundle)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="149" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 516:11&#10;-- After new_candidates := redistribute_parcels(new_candidates, bundle)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="28" line="516" message="PROCESS_SUB_PARCELS: function apply obligation in 'DEFAULT' (STVSL) at line 516:28&#10;pre_redistribute_parcels(new_candidates, bundle)&#10;" number="150" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: function apply obligation in 'DEFAULT' (STVSL) at line 516:28&#10;pre_redistribute_parcels(new_candidates, bundle)&#10;"/>
<po column="11" line="517" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 517:11&#10;-- After new_stage := construct_new_stage(new_stage, (ex_cand.name), bundle)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="151" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 517:11&#10;-- After new_stage := construct_new_stage(new_stage, (ex_cand.name), bundle)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="10" line="526" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 526:10&#10;-- After elected := (elected union new_elected)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="152" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 526:10&#10;-- After elected := (elected union new_elected)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="17" line="527" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 527:17&#10;-- After new_candidates := (new_candidates \ new_elected)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="153" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 527:17&#10;-- After new_candidates := (new_candidates \ new_elected)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="9" line="529" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 529:9&#10;-- After continuing := new_candidates&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="154" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 529:9&#10;-- After continuing := new_candidates&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="9" line="530" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 530:9&#10;-- After excluded := (excluded union {ex_cand})&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="155" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 530:9&#10;-- After excluded := (excluded union {ex_cand})&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="9" line="531" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 531:9&#10;-- After record := ([mk_Record_entry((((elems new_stage) union {score | [score in set ((hd record).scores)] &amp; ((score.name) not in set {(sc.name) | [sc in set (elems new_stage)]})}) union {mk_Score((ex_cand.name), 0)}), non_trans_value, 0)] ^ record)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="156" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 531:9&#10;-- After record := ([mk_Record_entry((((elems new_stage) union {score | [score in set ((hd record).scores)] &amp; ((score.name) not in set {(sc.name) | [sc in set (elems new_stage)]})}) union {mk_Score((ex_cand.name), 0)}), non_trans_value, 0)] ^ record)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="59" line="533" message="PROCESS_SUB_PARCELS: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 533:59&#10;record &lt;&gt; []&#10;" number="157" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 533:59&#10;record &lt;&gt; []&#10;"/>
<po column="9" line="539" message="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 539:9&#10;-- After stages := ([[new_stage(i) | i in set (inds new_stage) &amp; ((new_stage(i).name) &lt;&gt; (ex_cand.name))]] ^ stages)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="158" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: state invariant obligation in 'DEFAULT' (STVSL) at line 539:9&#10;-- After stages := ([[new_stage(i) | i in set (inds new_stage) &amp; ((new_stage(i).name) &lt;&gt; (ex_cand.name))]] ^ stages)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="20" line="539" message="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 539:20&#10;(forall i in set (inds new_stage) &amp; ((new_stage(i).name) &lt;&gt; (ex_cand.name)) =&gt;&#10;  i in set inds new_stage)&#10;" number="159" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 539:20&#10;(forall i in set (inds new_stage) &amp; ((new_stage(i).name) &lt;&gt; (ex_cand.name)) =&gt;&#10;  i in set inds new_stage)&#10;"/>
<po column="27" line="540" message="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 540:27&#10;(forall i in set (inds new_stage) &amp;&#10;  i in set inds new_stage)&#10;" number="160" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: sequence apply obligation in 'DEFAULT' (STVSL) at line 540:27&#10;(forall i in set (inds new_stage) &amp;&#10;  i in set inds new_stage)&#10;"/>
<po column="62" line="540" message="PROCESS_SUB_PARCELS: subtype obligation in 'DEFAULT' (STVSL) at line 540:62&#10;is_(([[new_stage(i) | i in set (inds new_stage) &amp; ((new_stage(i).name) &lt;&gt; (ex_cand.name))]] ^ stages), seq of (Stage))&#10;" number="161" object="" resource="STVSL" toString="PROCESS_SUB_PARCELS: subtype obligation in 'DEFAULT' (STVSL) at line 540:62&#10;is_(([[new_stage(i) | i in set (inds new_stage) &amp; ((new_stage(i).name) &lt;&gt; (ex_cand.name))]] ^ stages), seq of (Stage))&#10;"/>
<po column="37" line="545" message="ELECT_LAST_CANDIDATE, elected_candidate: unique existence binding obligation in 'DEFAULT' (STVSL) at line 545:37&#10;exists1 leader in set continuing &amp; ((leader.name) = ((hd stages)(Number_of_vacancies).name))&#10;" number="162" object="" resource="STVSL" toString="ELECT_LAST_CANDIDATE, elected_candidate: unique existence binding obligation in 'DEFAULT' (STVSL) at line 545:37&#10;exists1 leader in set continuing &amp; ((leader.name) = ((hd stages)(Number_of_vacancies).name))&#10;"/>
<po column="25" line="546" message="ELECT_LAST_CANDIDATE, elected_candidate: sequence apply obligation in 'DEFAULT' (STVSL) at line 546:25&#10;(forall leader in set continuing &amp;&#10;  Number_of_vacancies in set inds (hd stages))&#10;" number="163" object="" resource="STVSL" toString="ELECT_LAST_CANDIDATE, elected_candidate: sequence apply obligation in 'DEFAULT' (STVSL) at line 546:25&#10;(forall leader in set continuing &amp;&#10;  Number_of_vacancies in set inds (hd stages))&#10;"/>
<po column="28" line="546" message="ELECT_LAST_CANDIDATE, elected_candidate: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 546:28&#10;(forall leader in set continuing &amp;&#10;  stages &lt;&gt; [])&#10;" number="164" object="" resource="STVSL" toString="ELECT_LAST_CANDIDATE, elected_candidate: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 546:28&#10;(forall leader in set continuing &amp;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="6" line="547" message="ELECT_LAST_CANDIDATE: state invariant obligation in 'DEFAULT' (STVSL) at line 547:6&#10;-- After elected := (elected union {elected_candidate})&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="165" object="" resource="STVSL" toString="ELECT_LAST_CANDIDATE: state invariant obligation in 'DEFAULT' (STVSL) at line 547:6&#10;-- After elected := (elected union {elected_candidate})&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="548" message="ELECT_LAST_CANDIDATE: state invariant obligation in 'DEFAULT' (STVSL) at line 548:6&#10;-- After continuing := (continuing \ {elected_candidate})&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="166" object="" resource="STVSL" toString="ELECT_LAST_CANDIDATE: state invariant obligation in 'DEFAULT' (STVSL) at line 548:6&#10;-- After continuing := (continuing \ {elected_candidate})&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="20" line="554" message="TRANSFER_SURPLUS, candidate: unique existence binding obligation in 'DEFAULT' (STVSL) at line 554:20&#10;exists1 c in set elected &amp; ((c.name) = name)&#10;" number="167" object="" resource="STVSL" toString="TRANSFER_SURPLUS, candidate: unique existence binding obligation in 'DEFAULT' (STVSL) at line 554:20&#10;exists1 c in set elected &amp; ((c.name) = name)&#10;"/>
<po column="25" line="555" message="TRANSFER_SURPLUS, surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 555:25&#10;stages &lt;&gt; []&#10;" number="168" object="" resource="STVSL" toString="TRANSFER_SURPLUS, surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 555:25&#10;stages &lt;&gt; []&#10;"/>
<po column="22" line="555" message="TRANSFER_SURPLUS, surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 555:22&#10;(hd stages) &lt;&gt; []&#10;" number="169" object="" resource="STVSL" toString="TRANSFER_SURPLUS, surplus: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 555:22&#10;(hd stages) &lt;&gt; []&#10;"/>
<po column="65" line="557" message="TRANSFER_SURPLUS, sub_parcel: subtype obligation in 'DEFAULT' (STVSL) at line 557:65&#10;(surplus_from_original_votes(candidate) =&gt;&#10;  inv_Value(1.0) and (is_real(1.0)))&#10;" number="170" object="" resource="STVSL" toString="TRANSFER_SURPLUS, sub_parcel: subtype obligation in 'DEFAULT' (STVSL) at line 557:65&#10;(surplus_from_original_votes(candidate) =&gt;&#10;  inv_Value(1.0) and (is_real(1.0)))&#10;"/>
<po column="29" line="558" message="TRANSFER_SURPLUS, sub_parcel: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 558:29&#10;(not surplus_from_original_votes(candidate) =&gt;&#10;  (candidate.transferred_votes) &lt;&gt; [])&#10;" number="171" object="" resource="STVSL" toString="TRANSFER_SURPLUS, sub_parcel: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 558:29&#10;(not surplus_from_original_votes(candidate) =&gt;&#10;  (candidate.transferred_votes) &lt;&gt; [])&#10;"/>
<po column="35" line="563" message="TRANSFER_SURPLUS, new_stage: subtype obligation in 'DEFAULT' (STVSL) at line 563:35&#10;inv_Stage(([mk_Score(name, quota)] ^ [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name)])) and (is_(([mk_Score(name, quota)] ^ [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name)]), seq of (Score)))&#10;" number="172" object="" resource="STVSL" toString="TRANSFER_SURPLUS, new_stage: subtype obligation in 'DEFAULT' (STVSL) at line 563:35&#10;inv_Stage(([mk_Score(name, quota)] ^ [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name)])) and (is_(([mk_Score(name, quota)] ^ [(hd stages)(i) | i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name)]), seq of (Score)))&#10;"/>
<po column="15" line="564" message="TRANSFER_SURPLUS, new_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 564:15&#10;(forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name) =&gt;&#10;  i in set inds (hd stages))&#10;" number="173" object="" resource="STVSL" toString="TRANSFER_SURPLUS, new_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 564:15&#10;(forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name) =&gt;&#10;  i in set inds (hd stages))&#10;"/>
<po column="18" line="564" message="TRANSFER_SURPLUS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 564:18&#10;(forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name) =&gt;&#10;  stages &lt;&gt; [])&#10;" number="174" object="" resource="STVSL" toString="TRANSFER_SURPLUS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 564:18&#10;(forall i in set (inds (hd stages)) &amp; (((hd stages)(i).name) &lt;&gt; name) =&gt;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="49" line="564" message="TRANSFER_SURPLUS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 564:49&#10;stages &lt;&gt; []&#10;" number="175" object="" resource="STVSL" toString="TRANSFER_SURPLUS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 564:49&#10;stages &lt;&gt; []&#10;"/>
<po column="60" line="564" message="TRANSFER_SURPLUS, new_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 564:60&#10;(forall i in set (inds (hd stages)) &amp;&#10;  i in set inds (hd stages))&#10;" number="176" object="" resource="STVSL" toString="TRANSFER_SURPLUS, new_stage: sequence apply obligation in 'DEFAULT' (STVSL) at line 564:60&#10;(forall i in set (inds (hd stages)) &amp;&#10;  i in set inds (hd stages))&#10;"/>
<po column="16" line="565" message="TRANSFER_SURPLUS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 565:16&#10;(forall i in set (inds (hd stages)) &amp;&#10;  stages &lt;&gt; [])&#10;" number="177" object="" resource="STVSL" toString="TRANSFER_SURPLUS, new_stage: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 565:16&#10;(forall i in set (inds (hd stages)) &amp;&#10;  stages &lt;&gt; [])&#10;"/>
<po column="19" line="567" message="TRANSFER_SURPLUS, curr_cont: function apply obligation in 'DEFAULT' (STVSL) at line 567:19&#10;pre_redistribute_parcels((continuing \ {candidate}), sub_parcel_bundle)&#10;" number="178" object="" resource="STVSL" toString="TRANSFER_SURPLUS, curr_cont: function apply obligation in 'DEFAULT' (STVSL) at line 567:19&#10;pre_redistribute_parcels((continuing \ {candidate}), sub_parcel_bundle)&#10;"/>
<po column="6" line="569" message="TRANSFER_SURPLUS: state invariant obligation in 'DEFAULT' (STVSL) at line 569:6&#10;-- After stages := ([new_stage] ^ stages)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="179" object="" resource="STVSL" toString="TRANSFER_SURPLUS: state invariant obligation in 'DEFAULT' (STVSL) at line 569:6&#10;-- After stages := ([new_stage] ^ stages)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="570" message="TRANSFER_SURPLUS: state invariant obligation in 'DEFAULT' (STVSL) at line 570:6&#10;-- After record := ([mk_Record_entry(((elems new_stage) union {score | [score in set ((hd record).scores)] &amp; ((score.name) not in set {(sc.name) | [sc in set (elems new_stage)]})}), ((sub_parcel_bundle.non_transferable).value), (sub_parcel_bundle.loss_of_value))] ^ record)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="180" object="" resource="STVSL" toString="TRANSFER_SURPLUS: state invariant obligation in 'DEFAULT' (STVSL) at line 570:6&#10;-- After record := ([mk_Record_entry(((elems new_stage) union {score | [score in set ((hd record).scores)] &amp; ((score.name) not in set {(sc.name) | [sc in set (elems new_stage)]})}), ((sub_parcel_bundle.non_transferable).value), (sub_parcel_bundle.loss_of_value))] ^ record)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="42" line="572" message="TRANSFER_SURPLUS: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 572:42&#10;record &lt;&gt; []&#10;" number="181" object="" resource="STVSL" toString="TRANSFER_SURPLUS: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 572:42&#10;record &lt;&gt; []&#10;"/>
<po column="5" line="577" message="TRANSFER_SURPLUS: state invariant obligation in 'DEFAULT' (STVSL) at line 577:5&#10;-- After continuing := curr_cont&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="182" object="" resource="STVSL" toString="TRANSFER_SURPLUS: state invariant obligation in 'DEFAULT' (STVSL) at line 577:5&#10;-- After continuing := curr_cont&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="31" line="587" message="EXCLUDE_CANDIDATE, excluded_candidate: unique existence binding obligation in 'DEFAULT' (STVSL) at line 587:31&#10;exists1 c in set continuing &amp; ((c.name) = name)&#10;" number="183" object="" resource="STVSL" toString="EXCLUDE_CANDIDATE, excluded_candidate: unique existence binding obligation in 'DEFAULT' (STVSL) at line 587:31&#10;exists1 c in set continuing &amp; ((c.name) = name)&#10;"/>
<po column="70" line="593" message="EXCLUDE_CANDIDATE, sorted_sub_parcels: subtype obligation in 'DEFAULT' (STVSL) at line 593:70&#10;inv_Value(1.0) and (is_real(1.0))&#10;" number="184" object="" resource="STVSL" toString="EXCLUDE_CANDIDATE, sorted_sub_parcels: subtype obligation in 'DEFAULT' (STVSL) at line 593:70&#10;inv_Value(1.0) and (is_real(1.0))&#10;"/>
<po column="6" line="618" message="CONDUCT_ELECTION: while loop termination obligation in 'DEFAULT' (STVSL) at line 618:6&#10;while (((card elected) &lt;&gt; Number_of_vacancies) and ((card continuing) &gt; 0)) do ...&#10;" number="185" object="" resource="STVSL" toString="CONDUCT_ELECTION: while loop termination obligation in 'DEFAULT' (STVSL) at line 618:6&#10;while (((card elected) &lt;&gt; Number_of_vacancies) and ((card continuing) &gt; 0)) do ...&#10;"/>
<po column="52" line="625" message="CHANGE_STATUS_OF_ELECTED_CANDIDATES, xs_quota_scs: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 625:52&#10;stages &lt;&gt; []&#10;" number="186" object="" resource="STVSL" toString="CHANGE_STATUS_OF_ELECTED_CANDIDATES, xs_quota_scs: non-empty sequence obligation in 'DEFAULT' (STVSL) at line 625:52&#10;stages &lt;&gt; []&#10;"/>
<po column="7" line="629" message="CHANGE_STATUS_OF_ELECTED_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 629:7&#10;-- After elected := (candidates_satisfying_quota union elected)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="187" object="" resource="STVSL" toString="CHANGE_STATUS_OF_ELECTED_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 629:7&#10;-- After elected := (candidates_satisfying_quota union elected)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
<po column="6" line="630" message="CHANGE_STATUS_OF_ELECTED_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 630:6&#10;-- After continuing := (continuing \ candidates_satisfying_quota)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;" number="188" object="" resource="STVSL" toString="CHANGE_STATUS_OF_ELECTED_CANDIDATES: state invariant obligation in 'DEFAULT' (STVSL) at line 630:6&#10;-- After continuing := (continuing \ candidates_satisfying_quota)&#10;let s = St in (({(cand.name) | [cand in set (((s.elected) union (s.excluded)) union (s.continuing))]} = Cand_names) and (disjoint({(s.elected), (s.excluded), (s.continuing)}) and (forall cand1 in set (((s.elected) union (s.excluded)) union (s.continuing)), cand2 in set (((s.elected) union (s.excluded)) union (s.continuing)) &amp; ((cand1 = cand2) &lt;=&gt; ((cand1.name) = (cand2.name))))))&#10;"/>
</result>
</testResult>
