<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="13" line="13" message="accounts, accounts~, illegalCards, illegalCards~, curCard, curCard~, cardOk, cardOk~, retainedCards, retainedCards~, System, System~: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 13:13&#10;(forall mk_System(accs, -, curCard, cardOk, -):System &amp;&#10;  (((curCard = nil) =&gt; (not cardOk)) =&gt;&#10;    (forall id1, id2 in set (dom accs) &amp;&#10;      id1 in set dom accs)))&#10;" number="1" object="" resource="cashdispenserSL" toString="accounts, accounts~, illegalCards, illegalCards~, curCard, curCard~, cardOk, cardOk~, retainedCards, retainedCards~, System, System~: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 13:13&#10;(forall mk_System(accs, -, curCard, cardOk, -):System &amp;&#10;  (((curCard = nil) =&gt; (not cardOk)) =&gt;&#10;    (forall id1, id2 in set (dom accs) &amp;&#10;      id1 in set dom accs)))&#10;"/>
<po column="39" line="13" message="accounts, accounts~, illegalCards, illegalCards~, curCard, curCard~, cardOk, cardOk~, retainedCards, retainedCards~, System, System~: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 13:39&#10;(forall mk_System(accs, -, curCard, cardOk, -):System &amp;&#10;  (((curCard = nil) =&gt; (not cardOk)) =&gt;&#10;    (forall id1, id2 in set (dom accs) &amp;&#10;      id2 in set dom accs)))&#10;" number="2" object="" resource="cashdispenserSL" toString="accounts, accounts~, illegalCards, illegalCards~, curCard, curCard~, cardOk, cardOk~, retainedCards, retainedCards~, System, System~: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 13:39&#10;(forall mk_System(accs, -, curCard, cardOk, -):System &amp;&#10;  (((curCard = nil) =&gt; (not cardOk)) =&gt;&#10;    (forall id1, id2 in set (dom accs) &amp;&#10;      id2 in set dom accs)))&#10;"/>
<po column="25" line="44" message="TransactionsInvariant: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 44:25&#10;(forall ts:seq of (Transaction) &amp;&#10;  (forall i in set (inds ts) &amp;&#10;    i in set inds ts))&#10;" number="3" object="" resource="cashdispenserSL" toString="TransactionsInvariant: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 44:25&#10;(forall ts:seq of (Transaction) &amp;&#10;  (forall i in set (inds ts) &amp;&#10;    i in set inds ts))&#10;"/>
<po column="10" line="49" message="DateTotal: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 49:10&#10;(forall date:Date, ts:seq of (Transaction) &amp;&#10;  (forall i in set (inds ts) &amp; ((ts(i).date) = date) =&gt;&#10;    i in set inds ts))&#10;" number="4" object="" resource="cashdispenserSL" toString="DateTotal: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 49:10&#10;(forall date:Date, ts:seq of (Transaction) &amp;&#10;  (forall i in set (inds ts) &amp; ((ts(i).date) = date) =&gt;&#10;    i in set inds ts))&#10;"/>
<po column="44" line="49" message="DateTotal: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 49:44&#10;(forall date:Date, ts:seq of (Transaction) &amp;&#10;  (forall i in set (inds ts) &amp;&#10;    i in set inds ts))&#10;" number="5" object="" resource="cashdispenserSL" toString="DateTotal: sequence apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 49:44&#10;(forall date:Date, ts:seq of (Transaction) &amp;&#10;  (forall i in set (inds ts) &amp;&#10;    i in set inds ts))&#10;"/>
<po column="3" line="47" message="DateTotal: subtype obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 47:3&#10;(forall date:Date, ts:seq of (Transaction) &amp;&#10;  Sum([(ts(i).amount) | i in set (inds ts) &amp; ((ts(i).date) = date)]) &gt;= 0)&#10;" number="6" object="" resource="cashdispenserSL" toString="DateTotal: subtype obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 47:3&#10;(forall date:Date, ts:seq of (Transaction) &amp;&#10;  Sum([(ts(i).amount) | i in set (inds ts) &amp; ((ts(i).date) = date)]) &gt;= 0)&#10;"/>
<po column="5" line="58" message="InsertCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 58:5&#10;-- After curCard := c&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="7" object="" resource="cashdispenserSL" toString="InsertCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 58:5&#10;-- After curCard := c&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="10" line="67" message="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 67:10&#10;-- After retainedCards := (retainedCards union {curCard})&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="8" object="" resource="cashdispenserSL" toString="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 67:10&#10;-- After retainedCards := (retainedCards union {curCard})&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="41" line="67" message="Validate: subtype obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 67:41&#10;is_((retainedCards union {curCard}), set of (Card))&#10;" number="9" object="" resource="cashdispenserSL" toString="Validate: subtype obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 67:41&#10;is_((retainedCards union {curCard}), set of (Card))&#10;"/>
<po column="10" line="68" message="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 68:10&#10;-- After cardOk := false&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="10" object="" resource="cashdispenserSL" toString="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 68:10&#10;-- After cardOk := false&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="10" line="69" message="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 69:10&#10;-- After curCard := nil&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="11" object="" resource="cashdispenserSL" toString="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 69:10&#10;-- After curCard := nil&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="10" line="72" message="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 72:10&#10;-- After cardOk := codeOk&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="12" object="" resource="cashdispenserSL" toString="Validate: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 72:10&#10;-- After cardOk := codeOk&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="6" line="80" message="ReturnCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 80:6&#10;-- After cardOk := false&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="13" object="" resource="cashdispenserSL" toString="ReturnCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 80:6&#10;-- After cardOk := false&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="6" line="81" message="ReturnCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 81:6&#10;-- After curCard := nil&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="14" object="" resource="cashdispenserSL" toString="ReturnCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 81:6&#10;-- After curCard := nil&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="12" line="86" message="GetBalance: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 86:12&#10;(curCard.accountId) in set dom accounts&#10;" number="15" object="" resource="cashdispenserSL" toString="GetBalance: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 86:12&#10;(curCard.accountId) in set dom accounts&#10;"/>
<po column="10" line="94" message="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 94:10&#10;accountId in set dom accounts&#10;" number="16" object="" resource="cashdispenserSL" toString="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 94:10&#10;accountId in set dom accounts&#10;"/>
<po column="24" line="95" message="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 95:24&#10;((((accounts(accountId).balance) - amount) &gt;= 0) =&gt;&#10;  accountId in set dom accounts)&#10;" number="17" object="" resource="cashdispenserSL" toString="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 95:24&#10;((((accounts(accountId).balance) - amount) &gt;= 0) =&gt;&#10;  accountId in set dom accounts)&#10;"/>
<po column="10" line="98" message="MakeWithdrawal: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 98:10&#10;-- After accounts(accountId).balance := ((accounts(accountId).balance) - amount)&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="18" object="" resource="cashdispenserSL" toString="MakeWithdrawal: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 98:10&#10;-- After accounts(accountId).balance := ((accounts(accountId).balance) - amount)&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="12" line="99" message="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 99:12&#10;accountId in set dom accounts&#10;" number="19" object="" resource="cashdispenserSL" toString="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 99:12&#10;accountId in set dom accounts&#10;"/>
<po column="40" line="99" message="MakeWithdrawal: subtype obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 99:40&#10;((accounts(accountId).balance) - amount) &gt;= 0&#10;" number="20" object="" resource="cashdispenserSL" toString="MakeWithdrawal: subtype obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 99:40&#10;((accounts(accountId).balance) - amount) &gt;= 0&#10;"/>
<po column="10" line="100" message="MakeWithdrawal: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 100:10&#10;-- After accounts(accountId).transactions := ((accounts(accountId).transactions) ^ [transaction])&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="21" object="" resource="cashdispenserSL" toString="MakeWithdrawal: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 100:10&#10;-- After accounts(accountId).transactions := ((accounts(accountId).transactions) ^ [transaction])&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="12" line="101" message="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 101:12&#10;accountId in set dom accounts&#10;" number="22" object="" resource="cashdispenserSL" toString="MakeWithdrawal: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 101:12&#10;accountId in set dom accounts&#10;"/>
<po column="50" line="110" message="RequestStatement, cards, balance, transactions: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 110:50&#10;accountId in set dom accounts&#10;" number="23" object="" resource="cashdispenserSL" toString="RequestStatement, cards, balance, transactions: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 110:50&#10;accountId in set dom accounts&#10;"/>
<po column="18" line="112" message="RequestStatement: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 112:18&#10;cardId in set dom cards&#10;" number="24" object="" resource="cashdispenserSL" toString="RequestStatement: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 112:18&#10;cardId in set dom cards&#10;"/>
<po column="30" line="119" message="IsLegalCard: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 119:30&#10;((cardId not in set illegalCards) =&gt;&#10;  ((accountId in set (dom accounts)) =&gt;&#10;    accountId in set dom accounts))&#10;" number="25" object="" resource="cashdispenserSL" toString="IsLegalCard: map apply obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 119:30&#10;((cardId not in set illegalCards) =&gt;&#10;  ((accountId in set (dom accounts)) =&gt;&#10;    accountId in set dom accounts))&#10;"/>
<po column="5" line="123" message="ReportIllegalCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 123:5&#10;-- After illegalCards := (illegalCards union {cardId})&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="26" object="" resource="cashdispenserSL" toString="ReportIllegalCard: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 123:5&#10;-- After illegalCards := (illegalCards union {cardId})&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="5" line="127" message="AddAccount: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 127:5&#10;-- After accounts := (accounts munion {accountId |-&gt; account})&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;" number="27" object="" resource="cashdispenserSL" toString="AddAccount: state invariant obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 127:5&#10;-- After accounts := (accounts munion {accountId |-&gt; account})&#10;let mk_System(accs, -, curCard, cardOk, -) = System in (((curCard = nil) =&gt; (not cardOk)) and (forall id1, id2 in set (dom accs) &amp; ((id1 &lt;&gt; id2) =&gt; (((dom (accs(id1).cards)) inter (dom (accs(id2).cards))) = {}))))&#10;"/>
<po column="17" line="127" message="AddAccount: map compatible obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 127:17&#10;forall ldom1 in set dom accounts, rdom2 in set dom {accountId |-&gt; account} &amp;&#10;ldom1 = rdom2 =&gt; accounts(ldom1) = {accountId |-&gt; account}(rdom2)&#10;" number="28" object="" resource="cashdispenserSL" toString="AddAccount: map compatible obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 127:17&#10;forall ldom1 in set dom accounts, rdom2 in set dom {accountId |-&gt; account} &amp;&#10;ldom1 = rdom2 =&gt; accounts(ldom1) = {accountId |-&gt; account}(rdom2)&#10;"/>
<po column="10" line="139" message="Sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 139:10&#10;(forall rs:seq of (real) &amp;&#10;  (not (rs = []) =&gt;&#10;    rs &lt;&gt; []))&#10;" number="29" object="" resource="cashdispenserSL" toString="Sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 139:10&#10;(forall rs:seq of (real) &amp;&#10;  (not (rs = []) =&gt;&#10;    rs &lt;&gt; []))&#10;"/>
<po column="3" line="135" message="Sum: recursive function obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 135:3&#10;(forall rs:seq of (real) &amp;&#10;  (not (rs = []) =&gt;&#10;    Len(rs) &gt; Len((tl rs))))&#10;" number="30" object="" resource="cashdispenserSL" toString="Sum: recursive function obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 135:3&#10;(forall rs:seq of (real) &amp;&#10;  (not (rs = []) =&gt;&#10;    Len(rs) &gt; Len((tl rs))))&#10;"/>
<po column="22" line="139" message="Sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 139:22&#10;(forall rs:seq of (real) &amp;&#10;  (not (rs = []) =&gt;&#10;    rs &lt;&gt; []))&#10;" number="31" object="" resource="cashdispenserSL" toString="Sum: non-empty sequence obligation in 'DEFAULT' (src\test\resources\modules\cashdispenserSL) at line 139:22&#10;(forall rs:seq of (real) &amp;&#10;  (not (rs = []) =&gt;&#10;    rs &lt;&gt; []))&#10;"/>
</result>
</testResult>
