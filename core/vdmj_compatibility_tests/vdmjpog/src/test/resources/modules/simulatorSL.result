<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testResult type="proof_obligation">
<result>
<po column="31" line="202" message="Trom: function apply obligation in 'TROM' (simulatorSL) at line 202:31&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      (forall s in set states &amp;&#10;                        (not (currentstate = s) =&gt;&#10;                          pre_substate_of(currentstate, s))))))))))))))&#10;" number="1" object="" resource="simulatorSL" toString="Trom: function apply obligation in 'TROM' (simulatorSL) at line 202:31&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      (forall s in set states &amp;&#10;                        (not (currentstate = s) =&gt;&#10;                          pre_substate_of(currentstate, s))))))))))))))&#10;"/>
<po column="37" line="215" message="Trom: function apply obligation in 'TROM' (simulatorSL) at line 215:37&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            (forall af in set attrfunctions &amp;&#10;                              (forall s in set states &amp;&#10;                                (not (s = (af.stat)) =&gt;&#10;                                  pre_substate_of((af.stat), s))))))))))))))))))&#10;" number="2" object="" resource="simulatorSL" toString="Trom: function apply obligation in 'TROM' (simulatorSL) at line 215:37&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            (forall af in set attrfunctions &amp;&#10;                              (forall s in set states &amp;&#10;                                (not (s = (af.stat)) =&gt;&#10;                                  pre_substate_of((af.stat), s))))))))))))))))))&#10;"/>
<po column="37" line="221" message="Trom: function apply obligation in 'TROM' (simulatorSL) at line 221:37&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            ((forall af in set attrfunctions &amp; ((exists1 s in set states &amp; ((s = (af.stat)) or substate_of((af.stat), s))) and (forall afa in set (af.attributes) &amp; (exists1 a in set attributes &amp; (a = afa))))) =&gt;&#10;                              (forall ts in set transitionspecs &amp;&#10;                                (forall s in set states &amp;&#10;                                  (not (s = (ts.sourcestate)) =&gt;&#10;                                    pre_substate_of((ts.sourcestate), s)))))))))))))))))))&#10;" number="3" object="" resource="simulatorSL" toString="Trom: function apply obligation in 'TROM' (simulatorSL) at line 221:37&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            ((forall af in set attrfunctions &amp; ((exists1 s in set states &amp; ((s = (af.stat)) or substate_of((af.stat), s))) and (forall afa in set (af.attributes) &amp; (exists1 a in set attributes &amp; (a = afa))))) =&gt;&#10;                              (forall ts in set transitionspecs &amp;&#10;                                (forall s in set states &amp;&#10;                                  (not (s = (ts.sourcestate)) =&gt;&#10;                                    pre_substate_of((ts.sourcestate), s)))))))))))))))))))&#10;"/>
<po column="37" line="223" message="Trom: function apply obligation in 'TROM' (simulatorSL) at line 223:37&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            ((forall af in set attrfunctions &amp; ((exists1 s in set states &amp; ((s = (af.stat)) or substate_of((af.stat), s))) and (forall afa in set (af.attributes) &amp; (exists1 a in set attributes &amp; (a = afa))))) =&gt;&#10;                              (forall ts in set transitionspecs &amp;&#10;                                ((exists1 s in set states &amp; ((s = (ts.sourcestate)) or substate_of((ts.sourcestate), s))) =&gt;&#10;                                  (forall d in set states &amp;&#10;                                    (not (d = (ts.destinstate)) =&gt;&#10;                                      pre_substate_of((ts.destinstate), d))))))))))))))))))))&#10;" number="4" object="" resource="simulatorSL" toString="Trom: function apply obligation in 'TROM' (simulatorSL) at line 223:37&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            ((forall af in set attrfunctions &amp; ((exists1 s in set states &amp; ((s = (af.stat)) or substate_of((af.stat), s))) and (forall afa in set (af.attributes) &amp; (exists1 a in set attributes &amp; (a = afa))))) =&gt;&#10;                              (forall ts in set transitionspecs &amp;&#10;                                ((exists1 s in set states &amp; ((s = (ts.sourcestate)) or substate_of((ts.sourcestate), s))) =&gt;&#10;                                  (forall d in set states &amp;&#10;                                    (not (d = (ts.destinstate)) =&gt;&#10;                                      pre_substate_of((ts.destinstate), d))))))))))))))))))))&#10;"/>
<po column="51" line="232" message="Trom: function apply obligation in 'TROM' (simulatorSL) at line 232:51&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            ((forall af in set attrfunctions &amp; ((exists1 s in set states &amp; ((s = (af.stat)) or substate_of((af.stat), s))) and (forall afa in set (af.attributes) &amp; (exists1 a in set attributes &amp; (a = afa))))) =&gt;&#10;                              ((forall ts in set transitionspecs &amp; ((exists1 s in set states &amp; ((s = (ts.sourcestate)) or substate_of((ts.sourcestate), s))) and ((exists1 d in set states &amp; ((d = (ts.destinstate)) or substate_of((ts.destinstate), d))) and (exists1 e in set events &amp; (e = (ts.triggerevent)))))) =&gt;&#10;                                (forall tc in set timeconstraints &amp;&#10;                                  ((exists1 ts in set transitionspecs &amp; (ts = (tc.transition))) =&gt;&#10;                                    ((exists1 e in set events &amp; ((e = (tc.constrainedevent)) and (((e.type) = &lt;INTERNAL&gt;) or ((e.type) = &lt;OUTPUT&gt;)))) =&gt;&#10;                                      (forall ds in set (tc.disablingstates) &amp;&#10;                                        (forall s in set states &amp;&#10;                                          (not (s = ds) =&gt;&#10;                                            pre_substate_of(ds, s)))))))))))))))))))))))&#10;" number="5" object="" resource="simulatorSL" toString="Trom: function apply obligation in 'TROM' (simulatorSL) at line 232:51&#10;(forall mk_Trom(label, tromclass, porttypes, events, states, attributes, lsltraits, attrfunctions, transitionspecs, timeconstraints, currentstate, assignmentvector):Trom &amp;&#10;  ((forall pt1, pt2 in set porttypes &amp; (((pt1.label) = (pt2.label)) =&gt; (pt1 = pt2))) =&gt;&#10;    ((forall e1, e2 in set events &amp; (((e1.label) = (e2.label)) =&gt; (e1 = e2))) =&gt;&#10;      ((forall s1, s2 in set states &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;        ((forall a1, a2 in set attributes &amp; (((a1.label) = (a2.label)) =&gt; (a1 = a2))) =&gt;&#10;          ((forall tr1, tr2 in set lsltraits &amp; (((tr1.traittype) = (tr2.traittype)) =&gt; (tr1 = tr2))) =&gt;&#10;            ((forall af1, af2 in set attrfunctions &amp; (((af1.stat) = (af2.stat)) =&gt; (af1 = af2))) =&gt;&#10;              ((forall ts1, ts2 in set transitionspecs &amp; (((ts1.label) = (ts2.label)) =&gt; (ts1 = ts2))) =&gt;&#10;                ((forall tc1, tc2 in set timeconstraints &amp; (((tc1.label) = (tc2.label)) =&gt; (tc1 = tc2))) =&gt;&#10;                  ((forall e in set events &amp; (exists [pt in set porttypes] &amp; (pt = (e.porttype)))) =&gt;&#10;                    ((exists1 s in set states &amp; ((s.isinitial) = true)) =&gt;&#10;                      ((exists1 s in set states &amp; ((currentstate = s) or substate_of(currentstate, s))) =&gt;&#10;                        ((forall a in set attributes &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = (a.type))) or (exists1 tr in set lsltraits &amp; ((tr.traittype) = (a.type))))) =&gt;&#10;                          ((forall tr in set lsltraits &amp; (forall el in set (elems (tr.elementtypes)) &amp; ((exists1 pt in set porttypes &amp; ((pt.label) = el)) or (exists1 tr2 in set lsltraits &amp; ((tr2.traittype) = el))))) =&gt;&#10;                            ((forall af in set attrfunctions &amp; ((exists1 s in set states &amp; ((s = (af.stat)) or substate_of((af.stat), s))) and (forall afa in set (af.attributes) &amp; (exists1 a in set attributes &amp; (a = afa))))) =&gt;&#10;                              ((forall ts in set transitionspecs &amp; ((exists1 s in set states &amp; ((s = (ts.sourcestate)) or substate_of((ts.sourcestate), s))) and ((exists1 d in set states &amp; ((d = (ts.destinstate)) or substate_of((ts.destinstate), d))) and (exists1 e in set events &amp; (e = (ts.triggerevent)))))) =&gt;&#10;                                (forall tc in set timeconstraints &amp;&#10;                                  ((exists1 ts in set transitionspecs &amp; (ts = (tc.transition))) =&gt;&#10;                                    ((exists1 e in set events &amp; ((e = (tc.constrainedevent)) and (((e.type) = &lt;INTERNAL&gt;) or ((e.type) = &lt;OUTPUT&gt;)))) =&gt;&#10;                                      (forall ds in set (tc.disablingstates) &amp;&#10;                                        (forall s in set states &amp;&#10;                                          (not (s = ds) =&gt;&#10;                                            pre_substate_of(ds, s)))))))))))))))))))))))&#10;"/>
<po column="31" line="281" message="Subsystem, linked_subsystem: finite set obligation in 'TROM' (simulatorSL) at line 281:31&#10;(forall mk_Subsystem(label, includes, troms, portlinks):Subsystem &amp;&#10;  ((forall s1, s2 in set includes &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;    (let included_subsystem: (String * set of (Subsystem) +&gt; bool)&#10;    &#9;included_subsystem(subsystemlabel, subsystems) ==&#10;    (exists1 s in set subsystems &amp; (((s.label) = subsystemlabel) or included_subsystem(subsystemlabel, (s.includes)))) in (not included_subsystem(label, includes)) =&gt;&#10;      ((forall trom1, trom2 in set troms &amp; (((trom1.label) = (trom2.label)) =&gt; (trom1 = trom2))) =&gt;&#10;        (let included_trom: (String * set of (Subsystem) +&gt; bool)&#10;        &#9;included_trom(tromlabel, subsystems) ==&#10;        (exists1 s in set subsystems &amp; ((exists1 trom in set (s.troms) &amp; ((trom.label) = tromlabel)) or included_trom(tromlabel, (s.includes)))) in (forall trom in set troms &amp; (not included_trom((trom.label), includes))) =&gt;&#10;          (forall tptuple:TromPortTuple, subsystems:set of (Subsystem) &amp;&#10;            (forall s in set subsystems &amp;&#10;              (((linked_trom(tptuple, (s.troms)) and (not linked_subsystem(tptuple, (s.includes)))) or ((not linked_trom(tptuple, (s.troms))) and linked_subsystem(tptuple, (s.includes)))) =&gt;&#10;                exists finmap1:map nat to (Subsystem) &amp;&#10;                  forall su:Subsystem &amp;&#10;                    ((su in set subsystems) and (su &lt;&gt; s)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = su))))))))&#10;" number="6" object="" resource="simulatorSL" toString="Subsystem, linked_subsystem: finite set obligation in 'TROM' (simulatorSL) at line 281:31&#10;(forall mk_Subsystem(label, includes, troms, portlinks):Subsystem &amp;&#10;  ((forall s1, s2 in set includes &amp; (((s1.label) = (s2.label)) =&gt; (s1 = s2))) =&gt;&#10;    (let included_subsystem: (String * set of (Subsystem) +&gt; bool)&#10;    &#9;included_subsystem(subsystemlabel, subsystems) ==&#10;    (exists1 s in set subsystems &amp; (((s.label) = subsystemlabel) or included_subsystem(subsystemlabel, (s.includes)))) in (not included_subsystem(label, includes)) =&gt;&#10;      ((forall trom1, trom2 in set troms &amp; (((trom1.label) = (trom2.label)) =&gt; (trom1 = trom2))) =&gt;&#10;        (let included_trom: (String * set of (Subsystem) +&gt; bool)&#10;        &#9;included_trom(tromlabel, subsystems) ==&#10;        (exists1 s in set subsystems &amp; ((exists1 trom in set (s.troms) &amp; ((trom.label) = tromlabel)) or included_trom(tromlabel, (s.includes)))) in (forall trom in set troms &amp; (not included_trom((trom.label), includes))) =&gt;&#10;          (forall tptuple:TromPortTuple, subsystems:set of (Subsystem) &amp;&#10;            (forall s in set subsystems &amp;&#10;              (((linked_trom(tptuple, (s.troms)) and (not linked_subsystem(tptuple, (s.includes)))) or ((not linked_trom(tptuple, (s.troms))) and linked_subsystem(tptuple, (s.includes)))) =&gt;&#10;                exists finmap1:map nat to (Subsystem) &amp;&#10;                  forall su:Subsystem &amp;&#10;                    ((su in set subsystems) and (su &lt;&gt; s)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = su))))))))&#10;"/>
<po column="22" line="330" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 330:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        ((i = j) =&gt;&#10;          i in set inds simulationeventlist)))))&#10;" number="7" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 330:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        ((i = j) =&gt;&#10;          i in set inds simulationeventlist)))))&#10;"/>
<po column="47" line="330" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 330:47&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        ((i = j) =&gt;&#10;          j in set inds simulationeventlist)))))&#10;" number="8" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 330:47&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        ((i = j) =&gt;&#10;          j in set inds simulationeventlist)))))&#10;"/>
<po column="22" line="331" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 331:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          ((i &lt; j) =&gt;&#10;            i in set inds simulationeventlist))))))&#10;" number="9" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 331:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          ((i &lt; j) =&gt;&#10;            i in set inds simulationeventlist))))))&#10;"/>
<po column="22" line="332" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 332:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          ((i &lt; j) =&gt;&#10;            j in set inds simulationeventlist))))))&#10;" number="10" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 332:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          ((i &lt; j) =&gt;&#10;            j in set inds simulationeventlist))))))&#10;"/>
<po column="22" line="333" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 333:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          (not ((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) =&gt;&#10;            ((i &gt; j) =&gt;&#10;              i in set inds simulationeventlist)))))))&#10;" number="11" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 333:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          (not ((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) =&gt;&#10;            ((i &gt; j) =&gt;&#10;              i in set inds simulationeventlist)))))))&#10;"/>
<po column="22" line="334" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 334:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          (not ((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) =&gt;&#10;            ((i &gt; j) =&gt;&#10;              j in set inds simulationeventlist)))))))&#10;" number="12" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~: sequence apply obligation in 'TROM' (simulatorSL) at line 334:22&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      (forall i, j in set (inds simulationeventlist) &amp;&#10;        (not ((i = j) and (simulationeventlist(i) = simulationeventlist(j))) =&gt;&#10;          (not ((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) =&gt;&#10;            ((i &gt; j) =&gt;&#10;              j in set inds simulationeventlist)))))))&#10;"/>
<po column="34" line="359" message="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~, accepted_by_subsystem: finite set obligation in 'TROM' (simulatorSL) at line 359:34&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) =&gt;&#10;        ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) =&gt;&#10;          (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;          &#9;accepted_by_trom(se, subsys) ==&#10;          (exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in&#10;            (forall se:SimulationEvent, subsys:Subsystem &amp;&#10;              (forall s in set (subsys.includes) &amp;&#10;                (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) =&gt;&#10;                  exists finmap1:map nat to (Subsystem) &amp;&#10;                    forall su:Subsystem &amp;&#10;                      ((su in set (subsys.includes)) and (su &lt;&gt; s)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = su)))))))))&#10;" number="13" object="" resource="simulatorSL" toString="SUBSYSTEM, SUBSYSTEM~, SIMULATIONEVENTLIST, SIMULATIONEVENTLIST~, LSLLIBRARY, LSLLIBRARY~, CLOCK, CLOCK~, System, System~, accepted_by_subsystem: finite set obligation in 'TROM' (simulatorSL) at line 359:34&#10;(forall mk_System(subsystem, simulationeventlist, lsllibrary, clock):System &amp;&#10;  (let contains_trom: (Subsystem +&gt; bool)&#10;  &#9;contains_trom(subsys) ==&#10;  (((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) =&gt;&#10;    (let contains_portlink: (Subsystem +&gt; bool)&#10;    &#9;contains_portlink(subsys) ==&#10;    (((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) =&gt;&#10;      ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) =&gt;&#10;        ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) =&gt;&#10;          (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;          &#9;accepted_by_trom(se, subsys) ==&#10;          (exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in&#10;            (forall se:SimulationEvent, subsys:Subsystem &amp;&#10;              (forall s in set (subsys.includes) &amp;&#10;                (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) =&gt;&#10;                  exists finmap1:map nat to (Subsystem) &amp;&#10;                    forall su:Subsystem &amp;&#10;                      ((su in set (subsys.includes)) and (su &lt;&gt; s)) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = su)))))))))&#10;"/>
<po column="4" line="395" message="get_trom_object: function satisfiability obligation in 'TROM' (simulatorSL) at line 395:4&#10;(forall tromlabel:String, subsystem:Subsystem &amp;&#10;  exists trom:[Trom] &amp; post_get_trom_object(tromlabel, subsystem, trom))&#10;" number="14" object="" resource="simulatorSL" toString="get_trom_object: function satisfiability obligation in 'TROM' (simulatorSL) at line 395:4&#10;(forall tromlabel:String, subsystem:Subsystem &amp;&#10;  exists trom:[Trom] &amp; post_get_trom_object(tromlabel, subsystem, trom))&#10;"/>
<po column="11" line="420" message="get_transition_spec: function apply obligation in 'TROM' (simulatorSL) at line 420:11&#10;(((trom.label) = (se.tromlabel)) =&gt; forall ts:[TransitionSpec] &amp; &#10;  ((ts in set (trom.transitionspecs)) =&gt;&#10;    (not (((trom.currentstate).label) = ((ts.sourcestate).label)) =&gt;&#10;      pre_substate_of((trom.currentstate), (ts.sourcestate)))))&#10;" number="15" object="" resource="simulatorSL" toString="get_transition_spec: function apply obligation in 'TROM' (simulatorSL) at line 420:11&#10;(((trom.label) = (se.tromlabel)) =&gt; forall ts:[TransitionSpec] &amp; &#10;  ((ts in set (trom.transitionspecs)) =&gt;&#10;    (not (((trom.currentstate).label) = ((ts.sourcestate).label)) =&gt;&#10;      pre_substate_of((trom.currentstate), (ts.sourcestate)))))&#10;"/>
<po column="4" line="408" message="get_transition_spec: function satisfiability obligation in 'TROM' (simulatorSL) at line 408:4&#10;(forall trom:Trom, se:SimulationEvent &amp;&#10;  pre_get_transition_spec(trom, se) =&gt; exists ts:[TransitionSpec] &amp; post_get_transition_spec(trom, se, ts))&#10;" number="16" object="" resource="simulatorSL" toString="get_transition_spec: function satisfiability obligation in 'TROM' (simulatorSL) at line 408:4&#10;(forall trom:Trom, se:SimulationEvent &amp;&#10;  pre_get_transition_spec(trom, se) =&gt; exists ts:[TransitionSpec] &amp; post_get_transition_spec(trom, se, ts))&#10;"/>
<po column="35" line="438" message="substate_of: function apply obligation in 'TROM' (simulatorSL) at line 438:35&#10;(forall substate:State, complexstate:State &amp; ((complexstate.type) = &lt;COMPLEX&gt;) =&gt;&#10;  (not (substate in set (complexstate.substates)) =&gt;&#10;    (forall s in set (complexstate.substates) &amp;&#10;      (((s.type) = &lt;COMPLEX&gt;) =&gt;&#10;        pre_substate_of(substate, s)))))&#10;" number="17" object="" resource="simulatorSL" toString="substate_of: function apply obligation in 'TROM' (simulatorSL) at line 438:35&#10;(forall substate:State, complexstate:State &amp; ((complexstate.type) = &lt;COMPLEX&gt;) =&gt;&#10;  (not (substate in set (complexstate.substates)) =&gt;&#10;    (forall s in set (complexstate.substates) &amp;&#10;      (((s.type) = &lt;COMPLEX&gt;) =&gt;&#10;        pre_substate_of(substate, s)))))&#10;"/>
<po column="44" line="459" message="get_entry_state: function apply obligation in 'TROM' (simulatorSL) at line 459:44&#10;(((complexstate.type) = &lt;COMPLEX&gt;) =&gt; forall entry:State &amp; &#10;  (forall s in set (complexstate.substates) &amp;&#10;    (((s.isinitial) = true) =&gt;&#10;      (not (((s.type) = &lt;SIMPLE&gt;) and (entry = s)) =&gt;&#10;        (((s.type) = &lt;COMPLEX&gt;) =&gt;&#10;          pre_get_entry_state(s))))))&#10;" number="18" object="" resource="simulatorSL" toString="get_entry_state: function apply obligation in 'TROM' (simulatorSL) at line 459:44&#10;(((complexstate.type) = &lt;COMPLEX&gt;) =&gt; forall entry:State &amp; &#10;  (forall s in set (complexstate.substates) &amp;&#10;    (((s.isinitial) = true) =&gt;&#10;      (not (((s.type) = &lt;SIMPLE&gt;) and (entry = s)) =&gt;&#10;        (((s.type) = &lt;COMPLEX&gt;) =&gt;&#10;          pre_get_entry_state(s))))))&#10;"/>
<po column="4" line="445" message="get_entry_state: function satisfiability obligation in 'TROM' (simulatorSL) at line 445:4&#10;(forall complexstate:State &amp;&#10;  pre_get_entry_state(complexstate) =&gt; exists entry:State &amp; post_get_entry_state(complexstate, entry))&#10;" number="19" object="" resource="simulatorSL" toString="get_entry_state: function satisfiability obligation in 'TROM' (simulatorSL) at line 445:4&#10;(forall complexstate:State &amp;&#10;  pre_get_entry_state(complexstate) =&gt; exists entry:State &amp; post_get_entry_state(complexstate, entry))&#10;"/>
<po column="46" line="476" message="get_initial_state: function apply obligation in 'TROM' (simulatorSL) at line 476:46&#10;(((trom.states) &lt;&gt; {}) =&gt; forall initial:State &amp; &#10;  (forall s in set (trom.states) &amp;&#10;    (((s.isinitial) = true) =&gt;&#10;      (not (((s.type) = &lt;SIMPLE&gt;) and (initial = s)) =&gt;&#10;        (((s.type) = &lt;COMPLEX&gt;) =&gt;&#10;          pre_get_entry_state(s))))))&#10;" number="20" object="" resource="simulatorSL" toString="get_initial_state: function apply obligation in 'TROM' (simulatorSL) at line 476:46&#10;(((trom.states) &lt;&gt; {}) =&gt; forall initial:State &amp; &#10;  (forall s in set (trom.states) &amp;&#10;    (((s.isinitial) = true) =&gt;&#10;      (not (((s.type) = &lt;SIMPLE&gt;) and (initial = s)) =&gt;&#10;        (((s.type) = &lt;COMPLEX&gt;) =&gt;&#10;          pre_get_entry_state(s))))))&#10;"/>
<po column="4" line="462" message="get_initial_state: function satisfiability obligation in 'TROM' (simulatorSL) at line 462:4&#10;(forall trom:Trom &amp;&#10;  pre_get_initial_state(trom) =&gt; exists initial:State &amp; post_get_initial_state(trom, initial))&#10;" number="21" object="" resource="simulatorSL" toString="get_initial_state: function satisfiability obligation in 'TROM' (simulatorSL) at line 462:4&#10;(forall trom:Trom &amp;&#10;  pre_get_initial_state(trom) =&gt; exists initial:State &amp; post_get_initial_state(trom, initial))&#10;"/>
<po column="4" line="479" message="get_linked_tromport_tuple: function satisfiability obligation in 'TROM' (simulatorSL) at line 479:4&#10;(forall tupleA:TromPortTuple, subsystem:Subsystem &amp;&#10;  exists tupleB:[TromPortTuple] &amp; post_get_linked_tromport_tuple(tupleA, subsystem, tupleB))&#10;" number="22" object="" resource="simulatorSL" toString="get_linked_tromport_tuple: function satisfiability obligation in 'TROM' (simulatorSL) at line 479:4&#10;(forall tupleA:TromPortTuple, subsystem:Subsystem &amp;&#10;  exists tupleB:[TromPortTuple] &amp; post_get_linked_tromport_tuple(tupleA, subsystem, tupleB))&#10;"/>
<po column="12" line="504" message="exists_in_subsystem: function apply obligation in 'TROM' (simulatorSL) at line 504:12&#10;(forall trom:Trom, subsys:Subsystem &amp; (((subsys.troms) &lt;&gt; {}) or ((subsys.includes) &lt;&gt; {})) =&gt;&#10;  (not (trom in set (subsys.troms)) =&gt;&#10;    (forall subsystem in set (subsys.includes) &amp;&#10;      pre_exists_in_subsystem(trom, subsystem))))&#10;" number="23" object="" resource="simulatorSL" toString="exists_in_subsystem: function apply obligation in 'TROM' (simulatorSL) at line 504:12&#10;(forall trom:Trom, subsys:Subsystem &amp; (((subsys.troms) &lt;&gt; {}) or ((subsys.includes) &lt;&gt; {})) =&gt;&#10;  (not (trom in set (subsys.troms)) =&gt;&#10;    (forall subsystem in set (subsys.includes) &amp;&#10;      pre_exists_in_subsystem(trom, subsystem))))&#10;"/>
<po column="16" line="521" message="get_unconstrained_internal_event: function apply obligation in 'TROM' (simulatorSL) at line 521:16&#10;(forall event:[Event] &amp; &#10;  (forall ts in set (trom.transitionspecs) &amp;&#10;    (((ts.sourcestate) = (trom.currentstate)) =&gt;&#10;      ((((ts.triggerevent).type) = &lt;INTERNAL&gt;) =&gt;&#10;        pre_constrained_event(trom, (ts.triggerevent))))))&#10;" number="24" object="" resource="simulatorSL" toString="get_unconstrained_internal_event: function apply obligation in 'TROM' (simulatorSL) at line 521:16&#10;(forall event:[Event] &amp; &#10;  (forall ts in set (trom.transitionspecs) &amp;&#10;    (((ts.sourcestate) = (trom.currentstate)) =&gt;&#10;      ((((ts.triggerevent).type) = &lt;INTERNAL&gt;) =&gt;&#10;        pre_constrained_event(trom, (ts.triggerevent))))))&#10;"/>
<po column="4" line="511" message="get_unconstrained_internal_event: function satisfiability obligation in 'TROM' (simulatorSL) at line 511:4&#10;(forall trom:Trom &amp;&#10;  exists event:[Event] &amp; post_get_unconstrained_internal_event(trom, event))&#10;" number="25" object="" resource="simulatorSL" toString="get_unconstrained_internal_event: function satisfiability obligation in 'TROM' (simulatorSL) at line 511:4&#10;(forall trom:Trom &amp;&#10;  exists event:[Event] &amp; post_get_unconstrained_internal_event(trom, event))&#10;"/>
<po column="8" line="549" message="get_simevent_index: sequence apply obligation in 'TROM' (simulatorSL) at line 549:8&#10;((se in set (elems se_list)) =&gt; forall index:nat1 &amp; &#10;  index in set inds se_list)&#10;" number="26" object="" resource="simulatorSL" toString="get_simevent_index: sequence apply obligation in 'TROM' (simulatorSL) at line 549:8&#10;((se in set (elems se_list)) =&gt; forall index:nat1 &amp; &#10;  index in set inds se_list)&#10;"/>
<po column="4" line="540" message="get_simevent_index: function satisfiability obligation in 'TROM' (simulatorSL) at line 540:4&#10;(forall se:SimulationEvent, se_list:seq of (SimulationEvent) &amp;&#10;  pre_get_simevent_index(se, se_list) =&gt; exists index:nat1 &amp; post_get_simevent_index(se, se_list, index))&#10;" number="27" object="" resource="simulatorSL" toString="get_simevent_index: function satisfiability obligation in 'TROM' (simulatorSL) at line 540:4&#10;(forall se:SimulationEvent, se_list:seq of (SimulationEvent) &amp;&#10;  pre_get_simevent_index(se, se_list) =&gt; exists index:nat1 &amp; post_get_simevent_index(se, se_list, index))&#10;"/>
<po column="4" line="552" message="get_random_time_within_rw: function satisfiability obligation in 'TROM' (simulatorSL) at line 552:4&#10;(forall rw:ReactionWindow &amp;&#10;  exists time:nat &amp; post_get_random_time_within_rw(rw, time))&#10;" number="28" object="" resource="simulatorSL" toString="get_random_time_within_rw: function satisfiability obligation in 'TROM' (simulatorSL) at line 552:4&#10;(forall rw:ReactionWindow &amp;&#10;  exists time:nat &amp; post_get_random_time_within_rw(rw, time))&#10;"/>
<po column="4" line="559" message="get_lru_port: function satisfiability obligation in 'TROM' (simulatorSL) at line 559:4&#10;(forall portlist:seq of (Port) &amp;&#10;  pre_get_lru_port(portlist) =&gt; exists port:Port &amp; post_get_lru_port(portlist, port))&#10;" number="29" object="" resource="simulatorSL" toString="get_lru_port: function satisfiability obligation in 'TROM' (simulatorSL) at line 559:4&#10;(forall portlist:seq of (Port) &amp;&#10;  pre_get_lru_port(portlist) =&gt; exists port:Port &amp; post_get_lru_port(portlist, port))&#10;"/>
<po column="28" line="608" message="simulator: finite set obligation in 'TROM' (simulatorSL) at line 608:28&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil))) =&gt;&#10;    exists finmap1:map nat to (Trom) &amp;&#10;      forall trom:Trom &amp;&#10;        exists_in_subsystem(trom, SUBSYSTEM) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = trom))&#10;" number="30" object="" resource="simulatorSL" toString="simulator: finite set obligation in 'TROM' (simulatorSL) at line 608:28&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil))) =&gt;&#10;    exists finmap1:map nat to (Trom) &amp;&#10;      forall trom:Trom &amp;&#10;        exists_in_subsystem(trom, SUBSYSTEM) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = trom))&#10;"/>
<po column="36" line="609" message="simulator: function apply obligation in 'TROM' (simulatorSL) at line 609:36&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil))) =&gt;&#10;    (forall trom:Trom &amp;&#10;      pre_exists_in_subsystem(trom, SUBSYSTEM))))&#10;" number="31" object="" resource="simulatorSL" toString="simulator: function apply obligation in 'TROM' (simulatorSL) at line 609:36&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil))) =&gt;&#10;    (forall trom:Trom &amp;&#10;      pre_exists_in_subsystem(trom, SUBSYSTEM))))&#10;"/>
<po column="36" line="611" message="simulator: function apply obligation in 'TROM' (simulatorSL) at line 611:36&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil))) =&gt;&#10;    (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;      pre_get_initial_state(trom))))&#10;" number="32" object="" resource="simulatorSL" toString="simulator: function apply obligation in 'TROM' (simulatorSL) at line 611:36&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil))) =&gt;&#10;    (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;      pre_get_initial_state(trom))))&#10;"/>
<po column="9" line="621" message="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 621:9&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  (len SIMULATIONEVENTLIST) in set inds SIMULATIONEVENTLIST)&#10;" number="33" object="" resource="simulatorSL" toString="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 621:9&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  (len SIMULATIONEVENTLIST) in set inds SIMULATIONEVENTLIST)&#10;"/>
<po column="28" line="629" message="simulator: finite set obligation in 'TROM' (simulatorSL) at line 629:28&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  (((SIMULATIONEVENTLIST((len SIMULATIONEVENTLIST)).occurtime) = CLOCK) =&gt;&#10;    ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &lt;= CLOCK) and ((se.eventhistory) &lt;&gt; nil))) =&gt;&#10;      exists finmap1:map nat to (Trom) &amp;&#10;        forall trom:Trom &amp;&#10;          exists_in_subsystem(trom, SUBSYSTEM) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = trom)))&#10;" number="34" object="" resource="simulatorSL" toString="simulator: finite set obligation in 'TROM' (simulatorSL) at line 629:28&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  (((SIMULATIONEVENTLIST((len SIMULATIONEVENTLIST)).occurtime) = CLOCK) =&gt;&#10;    ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &lt;= CLOCK) and ((se.eventhistory) &lt;&gt; nil))) =&gt;&#10;      exists finmap1:map nat to (Trom) &amp;&#10;        forall trom:Trom &amp;&#10;          exists_in_subsystem(trom, SUBSYSTEM) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = trom)))&#10;"/>
<po column="36" line="630" message="simulator: function apply obligation in 'TROM' (simulatorSL) at line 630:36&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  (((SIMULATIONEVENTLIST((len SIMULATIONEVENTLIST)).occurtime) = CLOCK) =&gt;&#10;    ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &lt;= CLOCK) and ((se.eventhistory) &lt;&gt; nil))) =&gt;&#10;      (forall trom:Trom &amp;&#10;        pre_exists_in_subsystem(trom, SUBSYSTEM)))))&#10;" number="35" object="" resource="simulatorSL" toString="simulator: function apply obligation in 'TROM' (simulatorSL) at line 630:36&#10;((SIMULATIONEVENTLIST &lt;&gt; []) =&gt;&#10;  (((SIMULATIONEVENTLIST((len SIMULATIONEVENTLIST)).occurtime) = CLOCK) =&gt;&#10;    ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &lt;= CLOCK) and ((se.eventhistory) &lt;&gt; nil))) =&gt;&#10;      (forall trom:Trom &amp;&#10;        pre_exists_in_subsystem(trom, SUBSYSTEM)))))&#10;"/>
<po column="4" line="572" message="simulator: operation post condition obligation in 'TROM' (simulatorSL) at line 572:4&#10;((SIMULATIONEVENTLIST &lt;&gt; []) and (((SIMULATIONEVENTLIST((len SIMULATIONEVENTLIST)).occurtime) = CLOCK) and ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &lt;= CLOCK) and ((se.eventhistory) &lt;&gt; nil))) and (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp; (forall tc in set (trom.timeconstraints) &amp; ((tc.reactionwindows) = {}))))))&#10;" number="36" object="" resource="simulatorSL" toString="simulator: operation post condition obligation in 'TROM' (simulatorSL) at line 572:4&#10;((SIMULATIONEVENTLIST &lt;&gt; []) and (((SIMULATIONEVENTLIST((len SIMULATIONEVENTLIST)).occurtime) = CLOCK) and ((forall se in set (elems SIMULATIONEVENTLIST) &amp; (((se.occurtime) &lt;= CLOCK) and ((se.eventhistory) &lt;&gt; nil))) and (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp; (forall tc in set (trom.timeconstraints) &amp; ((tc.reactionwindows) = {}))))))&#10;"/>
<po column="7" line="581" message="simulator: while loop termination obligation in 'TROM' (simulatorSL) at line 581:7&#10;while (i &lt;= (len SIMULATIONEVENTLIST)) do ...&#10;" number="37" object="" resource="simulatorSL" toString="simulator: while loop termination obligation in 'TROM' (simulatorSL) at line 581:7&#10;while (i &lt;= (len SIMULATIONEVENTLIST)) do ...&#10;"/>
<po column="10" line="583" message="simulator: while loop termination obligation in 'TROM' (simulatorSL) at line 583:10&#10;while (CLOCK &lt; (SIMULATIONEVENTLIST(i).occurtime)) do ...&#10;" number="38" object="" resource="simulatorSL" toString="simulator: while loop termination obligation in 'TROM' (simulatorSL) at line 583:10&#10;while (CLOCK &lt; (SIMULATIONEVENTLIST(i).occurtime)) do ...&#10;"/>
<po column="25" line="583" message="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 583:25&#10;i in set inds SIMULATIONEVENTLIST&#10;" number="39" object="" resource="simulatorSL" toString="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 583:25&#10;i in set inds SIMULATIONEVENTLIST&#10;"/>
<po column="10" line="588" message="simulator: while loop termination obligation in 'TROM' (simulatorSL) at line 588:10&#10;while ((i &lt;= (len SIMULATIONEVENTLIST)) and (CLOCK = (SIMULATIONEVENTLIST(i).occurtime))) do ...&#10;" number="40" object="" resource="simulatorSL" toString="simulator: while loop termination obligation in 'TROM' (simulatorSL) at line 588:10&#10;while ((i &lt;= (len SIMULATIONEVENTLIST)) and (CLOCK = (SIMULATIONEVENTLIST(i).occurtime))) do ...&#10;"/>
<po column="26" line="589" message="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 589:26&#10;((i &lt;= (len SIMULATIONEVENTLIST)) =&gt;&#10;  i in set inds SIMULATIONEVENTLIST)&#10;" number="41" object="" resource="simulatorSL" toString="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 589:26&#10;((i &lt;= (len SIMULATIONEVENTLIST)) =&gt;&#10;  i in set inds SIMULATIONEVENTLIST)&#10;"/>
<po column="26" line="591" message="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 591:26&#10;i in set inds SIMULATIONEVENTLIST&#10;" number="42" object="" resource="simulatorSL" toString="simulator: sequence apply obligation in 'TROM' (simulatorSL) at line 591:26&#10;i in set inds SIMULATIONEVENTLIST&#10;"/>
<po column="13" line="593" message="simulator: state invariant obligation in 'TROM' (simulatorSL) at line 593:13&#10;-- After i := (i + 1)&#10;let mk_System(subsystem, simulationeventlist, lsllibrary, clock) = System in (let contains_trom: (Subsystem +&gt; bool)&#10;&#9;contains_trom(subsys) ==&#10;(((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) and (let contains_portlink: (Subsystem +&gt; bool)&#10;&#9;contains_portlink(subsys) ==&#10;(((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) and ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) and ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) and (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_trom(se, subsys) ==&#10;(exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in let accepted_by_subsystem: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_subsystem(se, subsys) ==&#10;(exists1 s in set (subsys.includes) &amp; (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) and (forall s2 in set {su | [su:Subsystem] &amp; ((su in set (subsys.includes)) and (su &lt;&gt; s))} &amp; ((not accepted_by_trom(se, s2)) and (not accepted_by_subsystem(se, s2)))))) in (forall se in set (elems simulationeventlist) &amp; ((accepted_by_trom(se, subsystem) and (not accepted_by_subsystem(se, subsystem))) or ((not accepted_by_trom(se, subsystem)) and accepted_by_subsystem(se, subsystem)))) and let exists_lsltrait: (Subsystem +&gt; bool)&#10;&#9;exists_lsltrait(subsys) ==&#10;((forall trom in set (subsys.troms) &amp; (forall tr in set (trom.lsltraits) &amp; (exists [traitdef in set lsllibrary] &amp; ((traitdef.label) = (tr.traitlabel))))) and (forall s in set (subsys.includes) &amp; exists_lsltrait(s))) in exists_lsltrait(subsystem))))))&#10;" number="43" object="" resource="simulatorSL" toString="simulator: state invariant obligation in 'TROM' (simulatorSL) at line 593:13&#10;-- After i := (i + 1)&#10;let mk_System(subsystem, simulationeventlist, lsllibrary, clock) = System in (let contains_trom: (Subsystem +&gt; bool)&#10;&#9;contains_trom(subsys) ==&#10;(((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) and (let contains_portlink: (Subsystem +&gt; bool)&#10;&#9;contains_portlink(subsys) ==&#10;(((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) and ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) and ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) and (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_trom(se, subsys) ==&#10;(exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in let accepted_by_subsystem: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_subsystem(se, subsys) ==&#10;(exists1 s in set (subsys.includes) &amp; (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) and (forall s2 in set {su | [su:Subsystem] &amp; ((su in set (subsys.includes)) and (su &lt;&gt; s))} &amp; ((not accepted_by_trom(se, s2)) and (not accepted_by_subsystem(se, s2)))))) in (forall se in set (elems simulationeventlist) &amp; ((accepted_by_trom(se, subsystem) and (not accepted_by_subsystem(se, subsystem))) or ((not accepted_by_trom(se, subsystem)) and accepted_by_subsystem(se, subsystem)))) and let exists_lsltrait: (Subsystem +&gt; bool)&#10;&#9;exists_lsltrait(subsys) ==&#10;((forall trom in set (subsys.troms) &amp; (forall tr in set (trom.lsltraits) &amp; (exists [traitdef in set lsllibrary] &amp; ((traitdef.label) = (tr.traitlabel))))) and (forall s in set (subsys.includes) &amp; exists_lsltrait(s))) in exists_lsltrait(subsystem))))))&#10;"/>
<po column="4" line="637" message="handle_event: operation post condition obligation in 'TROM' (simulatorSL) at line 637:4&#10;(CLOCK = CLOCK~)&#10;" number="44" object="" resource="simulatorSL" toString="handle_event: operation post condition obligation in 'TROM' (simulatorSL) at line 637:4&#10;(CLOCK = CLOCK~)&#10;"/>
<po column="7" line="644" message="handle_event: state invariant obligation in 'TROM' (simulatorSL) at line 644:7&#10;-- After trom := get_trom_object((se.tromlabel), SUBSYSTEM)&#10;let mk_System(subsystem, simulationeventlist, lsllibrary, clock) = System in (let contains_trom: (Subsystem +&gt; bool)&#10;&#9;contains_trom(subsys) ==&#10;(((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) and (let contains_portlink: (Subsystem +&gt; bool)&#10;&#9;contains_portlink(subsys) ==&#10;(((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) and ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) and ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) and (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_trom(se, subsys) ==&#10;(exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in let accepted_by_subsystem: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_subsystem(se, subsys) ==&#10;(exists1 s in set (subsys.includes) &amp; (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) and (forall s2 in set {su | [su:Subsystem] &amp; ((su in set (subsys.includes)) and (su &lt;&gt; s))} &amp; ((not accepted_by_trom(se, s2)) and (not accepted_by_subsystem(se, s2)))))) in (forall se in set (elems simulationeventlist) &amp; ((accepted_by_trom(se, subsystem) and (not accepted_by_subsystem(se, subsystem))) or ((not accepted_by_trom(se, subsystem)) and accepted_by_subsystem(se, subsystem)))) and let exists_lsltrait: (Subsystem +&gt; bool)&#10;&#9;exists_lsltrait(subsys) ==&#10;((forall trom in set (subsys.troms) &amp; (forall tr in set (trom.lsltraits) &amp; (exists [traitdef in set lsllibrary] &amp; ((traitdef.label) = (tr.traitlabel))))) and (forall s in set (subsys.includes) &amp; exists_lsltrait(s))) in exists_lsltrait(subsystem))))))&#10;" number="45" object="" resource="simulatorSL" toString="handle_event: state invariant obligation in 'TROM' (simulatorSL) at line 644:7&#10;-- After trom := get_trom_object((se.tromlabel), SUBSYSTEM)&#10;let mk_System(subsystem, simulationeventlist, lsllibrary, clock) = System in (let contains_trom: (Subsystem +&gt; bool)&#10;&#9;contains_trom(subsys) ==&#10;(((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) and (let contains_portlink: (Subsystem +&gt; bool)&#10;&#9;contains_portlink(subsys) ==&#10;(((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) and ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) and ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) and (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_trom(se, subsys) ==&#10;(exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in let accepted_by_subsystem: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_subsystem(se, subsys) ==&#10;(exists1 s in set (subsys.includes) &amp; (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) and (forall s2 in set {su | [su:Subsystem] &amp; ((su in set (subsys.includes)) and (su &lt;&gt; s))} &amp; ((not accepted_by_trom(se, s2)) and (not accepted_by_subsystem(se, s2)))))) in (forall se in set (elems simulationeventlist) &amp; ((accepted_by_trom(se, subsystem) and (not accepted_by_subsystem(se, subsystem))) or ((not accepted_by_trom(se, subsystem)) and accepted_by_subsystem(se, subsystem)))) and let exists_lsltrait: (Subsystem +&gt; bool)&#10;&#9;exists_lsltrait(subsys) ==&#10;((forall trom in set (subsys.troms) &amp; (forall tr in set (trom.lsltraits) &amp; (exists [traitdef in set lsllibrary] &amp; ((traitdef.label) = (tr.traitlabel))))) and (forall s in set (subsys.includes) &amp; exists_lsltrait(s))) in exists_lsltrait(subsystem))))))&#10;"/>
<po column="7" line="648" message="handle_event: state invariant obligation in 'TROM' (simulatorSL) at line 648:7&#10;-- After ts := get_transition_spec(trom, se)&#10;let mk_System(subsystem, simulationeventlist, lsllibrary, clock) = System in (let contains_trom: (Subsystem +&gt; bool)&#10;&#9;contains_trom(subsys) ==&#10;(((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) and (let contains_portlink: (Subsystem +&gt; bool)&#10;&#9;contains_portlink(subsys) ==&#10;(((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) and ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) and ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) and (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_trom(se, subsys) ==&#10;(exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in let accepted_by_subsystem: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_subsystem(se, subsys) ==&#10;(exists1 s in set (subsys.includes) &amp; (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) and (forall s2 in set {su | [su:Subsystem] &amp; ((su in set (subsys.includes)) and (su &lt;&gt; s))} &amp; ((not accepted_by_trom(se, s2)) and (not accepted_by_subsystem(se, s2)))))) in (forall se in set (elems simulationeventlist) &amp; ((accepted_by_trom(se, subsystem) and (not accepted_by_subsystem(se, subsystem))) or ((not accepted_by_trom(se, subsystem)) and accepted_by_subsystem(se, subsystem)))) and let exists_lsltrait: (Subsystem +&gt; bool)&#10;&#9;exists_lsltrait(subsys) ==&#10;((forall trom in set (subsys.troms) &amp; (forall tr in set (trom.lsltraits) &amp; (exists [traitdef in set lsllibrary] &amp; ((traitdef.label) = (tr.traitlabel))))) and (forall s in set (subsys.includes) &amp; exists_lsltrait(s))) in exists_lsltrait(subsystem))))))&#10;" number="46" object="" resource="simulatorSL" toString="handle_event: state invariant obligation in 'TROM' (simulatorSL) at line 648:7&#10;-- After ts := get_transition_spec(trom, se)&#10;let mk_System(subsystem, simulationeventlist, lsllibrary, clock) = System in (let contains_trom: (Subsystem +&gt; bool)&#10;&#9;contains_trom(subsys) ==&#10;(((subsys.troms) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_trom(s))) in contains_trom(subsystem) and (let contains_portlink: (Subsystem +&gt; bool)&#10;&#9;contains_portlink(subsys) ==&#10;(((subsys.portlinks) &lt;&gt; {}) or (exists1 s in set (subsys.includes) &amp; contains_portlink(s))) in contains_portlink(subsystem) and ((forall i, j in set (inds simulationeventlist) &amp; (((i = j) and (simulationeventlist(i) = simulationeventlist(j))) or (((i &lt; j) and ((simulationeventlist(i).occurtime) &lt;= (simulationeventlist(j).occurtime))) or ((i &gt; j) and ((simulationeventlist(i).occurtime) &gt;= (simulationeventlist(j).occurtime)))))) and ((forall se1, se2 in set (elems simulationeventlist) &amp; ((((se1.occurtime) = (se2.occurtime)) and ((se1.tromlabel) &lt;&gt; (se2.tromlabel))) or ((se1.occurtime) &lt;&gt; (se2.occurtime)))) and (let accepted_by_trom: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_trom(se, subsys) ==&#10;(exists1 trom in set (subsys.troms) &amp; (((trom.label) = (se.tromlabel)) and (exists1 e in set (trom.events) &amp; (((e.label) = (se.eventlabel)) and (exists1 pt in set (trom.porttypes) &amp; ((pt = (e.porttype)) and (exists1 p in set (elems (pt.portlist)) &amp; ((p.label) = (se.portlabel))))))))) in let accepted_by_subsystem: (SimulationEvent * Subsystem +&gt; bool)&#10;&#9;accepted_by_subsystem(se, subsys) ==&#10;(exists1 s in set (subsys.includes) &amp; (((accepted_by_trom(se, s) and (not accepted_by_subsystem(se, s))) or ((not accepted_by_trom(se, s)) and accepted_by_subsystem(se, s))) and (forall s2 in set {su | [su:Subsystem] &amp; ((su in set (subsys.includes)) and (su &lt;&gt; s))} &amp; ((not accepted_by_trom(se, s2)) and (not accepted_by_subsystem(se, s2)))))) in (forall se in set (elems simulationeventlist) &amp; ((accepted_by_trom(se, subsystem) and (not accepted_by_subsystem(se, subsystem))) or ((not accepted_by_trom(se, subsystem)) and accepted_by_subsystem(se, subsystem)))) and let exists_lsltrait: (Subsystem +&gt; bool)&#10;&#9;exists_lsltrait(subsys) ==&#10;((forall trom in set (subsys.troms) &amp; (forall tr in set (trom.lsltraits) &amp; (exists [traitdef in set lsllibrary] &amp; ((traitdef.label) = (tr.traitlabel))))) and (forall s in set (subsys.includes) &amp; exists_lsltrait(s))) in exists_lsltrait(subsystem))))))&#10;"/>
<po column="13" line="648" message="handle_event: function apply obligation in 'TROM' (simulatorSL) at line 648:13&#10;pre_get_transition_spec(trom, se)&#10;" number="47" object="" resource="simulatorSL" toString="handle_event: function apply obligation in 'TROM' (simulatorSL) at line 648:13&#10;pre_get_transition_spec(trom, se)&#10;"/>
<po column="33" line="648" message="handle_event: subtype obligation in 'TROM' (simulatorSL) at line 648:33&#10;inv_Trom(trom) and is_(trom, Trom)&#10;" number="48" object="" resource="simulatorSL" toString="handle_event: subtype obligation in 'TROM' (simulatorSL) at line 648:33&#10;inv_Trom(trom) and is_(trom, Trom)&#10;"/>
<po column="4" line="684" message="handle_transition: operation post condition obligation in 'TROM' (simulatorSL) at line 684:4&#10;(CLOCK = CLOCK~)&#10;" number="49" object="" resource="simulatorSL" toString="handle_transition: operation post condition obligation in 'TROM' (simulatorSL) at line 684:4&#10;(CLOCK = CLOCK~)&#10;"/>
<po column="30" line="744" message="update_trom_current_state: function apply obligation in 'TROM' (simulatorSL) at line 744:30&#10;(not ((((ts.destinstate).type) = &lt;SIMPLE&gt;) and ((trom.currentstate) = (ts.destinstate))) =&gt;&#10;  ((((ts.destinstate).type) = &lt;COMPLEX&gt;) =&gt;&#10;    pre_get_entry_state((ts.destinstate))))&#10;" number="50" object="" resource="simulatorSL" toString="update_trom_current_state: function apply obligation in 'TROM' (simulatorSL) at line 744:30&#10;(not ((((ts.destinstate).type) = &lt;SIMPLE&gt;) and ((trom.currentstate) = (ts.destinstate))) =&gt;&#10;  ((((ts.destinstate).type) = &lt;COMPLEX&gt;) =&gt;&#10;    pre_get_entry_state((ts.destinstate))))&#10;"/>
<po column="4" line="731" message="update_trom_current_state: operation post condition obligation in 'TROM' (simulatorSL) at line 731:4&#10;(((((ts.destinstate).type) = &lt;SIMPLE&gt;) and ((trom.currentstate) = (ts.destinstate))) or ((((ts.destinstate).type) = &lt;COMPLEX&gt;) and ((trom.currentstate) = get_entry_state((ts.destinstate)))))&#10;" number="51" object="" resource="simulatorSL" toString="update_trom_current_state: operation post condition obligation in 'TROM' (simulatorSL) at line 731:4&#10;(((((ts.destinstate).type) = &lt;SIMPLE&gt;) and ((trom.currentstate) = (ts.destinstate))) or ((((ts.destinstate).type) = &lt;COMPLEX&gt;) and ((trom.currentstate) = get_entry_state((ts.destinstate)))))&#10;"/>
<po column="4" line="731" message="update_trom_current_state: operation satifiability obligation in 'TROM' (simulatorSL) at line 731:4&#10;(forall trom:Trom, se:SimulationEvent, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_update_trom_current_state(trom, se, ts, oldstate) =&gt;&#10;  post_update_trom_current_state(trom, se, ts, oldstate, newstate))&#10;" number="52" object="" resource="simulatorSL" toString="update_trom_current_state: operation satifiability obligation in 'TROM' (simulatorSL) at line 731:4&#10;(forall trom:Trom, se:SimulationEvent, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_update_trom_current_state(trom, se, ts, oldstate) =&gt;&#10;  post_update_trom_current_state(trom, se, ts, oldstate, newstate))&#10;"/>
<po column="4" line="747" message="update_history_assignment_vector: operation post condition obligation in 'TROM' (simulatorSL) at line 747:4&#10;(((se.eventhistory).assignmentvector) = (trom.assignmentvector))&#10;" number="53" object="" resource="simulatorSL" toString="update_history_assignment_vector: operation post condition obligation in 'TROM' (simulatorSL) at line 747:4&#10;(((se.eventhistory).assignmentvector) = (trom.assignmentvector))&#10;"/>
<po column="4" line="747" message="update_history_assignment_vector: operation satifiability obligation in 'TROM' (simulatorSL) at line 747:4&#10;(forall trom:Trom, se:SimulationEvent, ts:[TransitionSpec], oldstate:System &amp;&#10;  pre_update_history_assignment_vector(trom, se, ts, oldstate) =&gt;&#10;  post_update_history_assignment_vector(trom, se, ts, oldstate, newstate))&#10;" number="54" object="" resource="simulatorSL" toString="update_history_assignment_vector: operation satifiability obligation in 'TROM' (simulatorSL) at line 747:4&#10;(forall trom:Trom, se:SimulationEvent, ts:[TransitionSpec], oldstate:System &amp;&#10;  pre_update_history_assignment_vector(trom, se, ts, oldstate) =&gt;&#10;  post_update_history_assignment_vector(trom, se, ts, oldstate, newstate))&#10;"/>
<po column="4" line="759" message="update_history_notransition: operation post condition obligation in 'TROM' (simulatorSL) at line 759:4&#10;((((se.eventhistory).triggeredtransition) = false) and ((((se.eventhistory).tromcurrentstate) = nil) and ((((se.eventhistory).assignmentvector) = nil) and (((se.eventhistory).reactionshistory) = {}))))&#10;" number="55" object="" resource="simulatorSL" toString="update_history_notransition: operation post condition obligation in 'TROM' (simulatorSL) at line 759:4&#10;((((se.eventhistory).triggeredtransition) = false) and ((((se.eventhistory).tromcurrentstate) = nil) and ((((se.eventhistory).assignmentvector) = nil) and (((se.eventhistory).reactionshistory) = {}))))&#10;"/>
<po column="4" line="759" message="update_history_notransition: operation satifiability obligation in 'TROM' (simulatorSL) at line 759:4&#10;(forall trom:Trom, se:SimulationEvent, ts:[TransitionSpec], oldstate:System &amp;&#10;  pre_update_history_notransition(trom, se, ts, oldstate) =&gt;&#10;  post_update_history_notransition(trom, se, ts, oldstate, newstate))&#10;" number="56" object="" resource="simulatorSL" toString="update_history_notransition: operation satifiability obligation in 'TROM' (simulatorSL) at line 759:4&#10;(forall trom:Trom, se:SimulationEvent, ts:[TransitionSpec], oldstate:System &amp;&#10;  pre_update_history_notransition(trom, se, ts, oldstate) =&gt;&#10;  post_update_history_notransition(trom, se, ts, oldstate, newstate))&#10;"/>
<po column="4" line="777" message="update_history_transition: operation post condition obligation in 'TROM' (simulatorSL) at line 777:4&#10;((((se.eventhistory).triggeredtransition) = true) and ((((se.eventhistory).tromcurrentstate) = (trom.currentstate)) and ((((se.eventhistory).assignmentvector) = (trom.assignmentvector)) and (((se.eventhistory).reactionshistory) = {}))))&#10;" number="57" object="" resource="simulatorSL" toString="update_history_transition: operation post condition obligation in 'TROM' (simulatorSL) at line 777:4&#10;((((se.eventhistory).triggeredtransition) = true) and ((((se.eventhistory).tromcurrentstate) = (trom.currentstate)) and ((((se.eventhistory).assignmentvector) = (trom.assignmentvector)) and (((se.eventhistory).reactionshistory) = {}))))&#10;"/>
<po column="4" line="777" message="update_history_transition: operation satifiability obligation in 'TROM' (simulatorSL) at line 777:4&#10;(forall trom:Trom, se:SimulationEvent, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_update_history_transition(trom, se, ts, oldstate) =&gt;&#10;  post_update_history_transition(trom, se, ts, oldstate, newstate))&#10;" number="58" object="" resource="simulatorSL" toString="update_history_transition: operation satifiability obligation in 'TROM' (simulatorSL) at line 777:4&#10;(forall trom:Trom, se:SimulationEvent, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_update_history_transition(trom, se, ts, oldstate) =&gt;&#10;  post_update_history_transition(trom, se, ts, oldstate, newstate))&#10;"/>
<po column="4" line="795" message="update_history_fire_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 795:4&#10;(exists [rh in set ((se.eventhistory).reactionshistory)] &amp; (((rh.timeconstraint) = tc) and (((rh.reactionwindow) = rw) and ((rh.reaction) = &lt;FIRED&gt;))))&#10;" number="59" object="" resource="simulatorSL" toString="update_history_fire_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 795:4&#10;(exists [rh in set ((se.eventhistory).reactionshistory)] &amp; (((rh.timeconstraint) = tc) and (((rh.reactionwindow) = rw) and ((rh.reaction) = &lt;FIRED&gt;))))&#10;"/>
<po column="4" line="795" message="update_history_fire_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 795:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_update_history_fire_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_update_history_fire_reaction(trom, se, tc, rw, oldstate, newstate))&#10;" number="60" object="" resource="simulatorSL" toString="update_history_fire_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 795:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_update_history_fire_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_update_history_fire_reaction(trom, se, tc, rw, oldstate, newstate))&#10;"/>
<po column="4" line="820" message="update_history_disable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 820:4&#10;(exists [rh in set ((se.eventhistory).reactionshistory)] &amp; (((rh.timeconstraint) = tc) and (((rh.reactionwindow) = rw) and ((rh.reaction) = &lt;DISABLED&gt;))))&#10;" number="61" object="" resource="simulatorSL" toString="update_history_disable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 820:4&#10;(exists [rh in set ((se.eventhistory).reactionshistory)] &amp; (((rh.timeconstraint) = tc) and (((rh.reactionwindow) = rw) and ((rh.reaction) = &lt;DISABLED&gt;))))&#10;"/>
<po column="4" line="820" message="update_history_disable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 820:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_update_history_disable_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_update_history_disable_reaction(trom, se, tc, rw, oldstate, newstate))&#10;" number="62" object="" resource="simulatorSL" toString="update_history_disable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 820:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_update_history_disable_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_update_history_disable_reaction(trom, se, tc, rw, oldstate, newstate))&#10;"/>
<po column="12" line="853" message="update_history_enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 853:12&#10;exists rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK)))&#10;" number="63" object="" resource="simulatorSL" toString="update_history_enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 853:12&#10;exists rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK)))&#10;"/>
<po column="15" line="855" message="update_history_enable_reaction: subtype obligation in 'TROM' (simulatorSL) at line 855:15&#10;(forall rw:ReactionWindow &amp;&#10;  inv_ReactionWindow(mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))))&#10;" number="64" object="" resource="simulatorSL" toString="update_history_enable_reaction: subtype obligation in 'TROM' (simulatorSL) at line 855:15&#10;(forall rw:ReactionWindow &amp;&#10;  inv_ReactionWindow(mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))))&#10;"/>
<po column="4" line="841" message="update_history_enable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 841:4&#10;let rw:ReactionWindow be st (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) in (exists [rh in set ((se.eventhistory).reactionshistory)] &amp; (((rh.timeconstraint) = tc) and (((rh.reactionwindow) = rw) and ((rh.reaction) = &lt;ENABLED&gt;))))&#10;" number="65" object="" resource="simulatorSL" toString="update_history_enable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 841:4&#10;let rw:ReactionWindow be st (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) in (exists [rh in set ((se.eventhistory).reactionshistory)] &amp; (((rh.timeconstraint) = tc) and (((rh.reactionwindow) = rw) and ((rh.reaction) = &lt;ENABLED&gt;))))&#10;"/>
<po column="4" line="841" message="update_history_enable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 841:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_update_history_enable_reaction(trom, se, tc, ts, oldstate) =&gt;&#10;  post_update_history_enable_reaction(trom, se, tc, ts, oldstate, newstate))&#10;" number="66" object="" resource="simulatorSL" toString="update_history_enable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 841:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_update_history_enable_reaction(trom, se, tc, ts, oldstate) =&gt;&#10;  post_update_history_enable_reaction(trom, se, tc, ts, oldstate, newstate))&#10;"/>
<po column="4" line="867" message="fire_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 867:4&#10;(rw not in set (tc.reactionwindows))&#10;" number="67" object="" resource="simulatorSL" toString="fire_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 867:4&#10;(rw not in set (tc.reactionwindows))&#10;"/>
<po column="4" line="867" message="fire_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 867:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_fire_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_fire_reaction(trom, se, tc, rw, oldstate, newstate))&#10;" number="68" object="" resource="simulatorSL" toString="fire_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 867:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_fire_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_fire_reaction(trom, se, tc, rw, oldstate, newstate))&#10;"/>
<po column="13" line="902" message="disable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 902:13&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  exists se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)))&#10;" number="69" object="" resource="simulatorSL" toString="disable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 902:13&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  exists se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)))&#10;"/>
<po column="37" line="909" message="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 909:37&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) =&gt;&#10;      (forall i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2) =&gt;&#10;        i in set inds SIMULATIONEVENTLIST~))))&#10;" number="70" object="" resource="simulatorSL" toString="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 909:37&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) =&gt;&#10;      (forall i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2) =&gt;&#10;        i in set inds SIMULATIONEVENTLIST~))))&#10;"/>
<po column="43" line="911" message="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 911:43&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) =&gt;&#10;      (forall i in set (inds SIMULATIONEVENTLIST~) &amp;&#10;        i in set inds SIMULATIONEVENTLIST~))))&#10;" number="71" object="" resource="simulatorSL" toString="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 911:43&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) =&gt;&#10;      (forall i in set (inds SIMULATIONEVENTLIST~) &amp;&#10;        i in set inds SIMULATIONEVENTLIST~))))&#10;"/>
<po column="18" line="915" message="disable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 915:18&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        exists tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM))))))&#10;" number="72" object="" resource="simulatorSL" toString="disable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 915:18&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        exists tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM))))))&#10;"/>
<po column="18" line="921" message="disable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 921:18&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          exists se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)))))))&#10;" number="73" object="" resource="simulatorSL" toString="disable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 921:18&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          exists se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)))))))&#10;"/>
<po column="39" line="926" message="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 926:39&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          (forall se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)) =&gt;&#10;            (forall i in set (inds SIMULATIONEVENTLIST~) &amp; ((SIMULATIONEVENTLIST~(i) &lt;&gt; se2) and (SIMULATIONEVENTLIST~(i) &lt;&gt; se3)) =&gt;&#10;              i in set inds SIMULATIONEVENTLIST~)))))))&#10;" number="74" object="" resource="simulatorSL" toString="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 926:39&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          (forall se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)) =&gt;&#10;            (forall i in set (inds SIMULATIONEVENTLIST~) &amp; ((SIMULATIONEVENTLIST~(i) &lt;&gt; se2) and (SIMULATIONEVENTLIST~(i) &lt;&gt; se3)) =&gt;&#10;              i in set inds SIMULATIONEVENTLIST~)))))))&#10;"/>
<po column="41" line="928" message="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 928:41&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          (forall se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)) =&gt;&#10;            (forall i in set (inds SIMULATIONEVENTLIST~) &amp;&#10;              i in set inds SIMULATIONEVENTLIST~)))))))&#10;" number="75" object="" resource="simulatorSL" toString="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 928:41&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          (forall se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)) =&gt;&#10;            (forall i in set (inds SIMULATIONEVENTLIST~) &amp;&#10;              i in set inds SIMULATIONEVENTLIST~)))))))&#10;"/>
<po column="41" line="929" message="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 929:41&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          (forall se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)) =&gt;&#10;            (forall i in set (inds SIMULATIONEVENTLIST~) &amp;&#10;              ((SIMULATIONEVENTLIST~(i) &lt;&gt; se2) =&gt;&#10;                i in set inds SIMULATIONEVENTLIST~))))))))&#10;" number="76" object="" resource="simulatorSL" toString="disable_reaction: sequence apply obligation in 'TROM' (simulatorSL) at line 929:41&#10;((rw not in set (tc.reactionwindows)) =&gt;&#10;  (forall se2:SimulationEvent &amp; (se2 = get_enabled_simevent(trom, tc)) =&gt;&#10;    (not ((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) =&gt;&#10;      ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;        (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;          (forall se3:SimulationEvent &amp; (se3 = get_enabled_simevent_synch(tromporttuple, tc)) =&gt;&#10;            (forall i in set (inds SIMULATIONEVENTLIST~) &amp;&#10;              ((SIMULATIONEVENTLIST~(i) &lt;&gt; se2) =&gt;&#10;                i in set inds SIMULATIONEVENTLIST~))))))))&#10;"/>
<po column="4" line="885" message="disable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 885:4&#10;((rw not in set (tc.reactionwindows)) and let se2:SimulationEvent be st (se2 = get_enabled_simevent(trom, tc)) in (((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) or ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) and let tromporttuple:[TromPortTuple] be st (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) in let se3:SimulationEvent be st (se3 = get_enabled_simevent_synch(tromporttuple, tc)) in (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; ((SIMULATIONEVENTLIST~(i) &lt;&gt; se2) and (SIMULATIONEVENTLIST~(i) &lt;&gt; se3))]))))&#10;" number="77" object="" resource="simulatorSL" toString="disable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 885:4&#10;((rw not in set (tc.reactionwindows)) and let se2:SimulationEvent be st (se2 = get_enabled_simevent(trom, tc)) in (((((tc.constrainedevent).type) = &lt;INTERNAL&gt;) and (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (SIMULATIONEVENTLIST~(i) &lt;&gt; se2)])) or ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) and let tromporttuple:[TromPortTuple] be st (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) in let se3:SimulationEvent be st (se3 = get_enabled_simevent_synch(tromporttuple, tc)) in (SIMULATIONEVENTLIST = [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; ((SIMULATIONEVENTLIST~(i) &lt;&gt; se2) and (SIMULATIONEVENTLIST~(i) &lt;&gt; se3))]))))&#10;"/>
<po column="4" line="885" message="disable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 885:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_disable_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_disable_reaction(trom, se, tc, rw, oldstate, newstate))&#10;" number="78" object="" resource="simulatorSL" toString="disable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 885:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, rw:ReactionWindow, oldstate:System &amp;&#10;  pre_disable_reaction(trom, se, tc, rw, oldstate) =&gt;&#10;  post_disable_reaction(trom, se, tc, rw, oldstate, newstate))&#10;"/>
<po column="12" line="947" message="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 947:12&#10;exists rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK)))&#10;" number="79" object="" resource="simulatorSL" toString="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 947:12&#10;exists rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK)))&#10;"/>
<po column="15" line="949" message="enable_reaction: subtype obligation in 'TROM' (simulatorSL) at line 949:15&#10;(forall rw:ReactionWindow &amp;&#10;  inv_ReactionWindow(mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))))&#10;" number="80" object="" resource="simulatorSL" toString="enable_reaction: subtype obligation in 'TROM' (simulatorSL) at line 949:15&#10;(forall rw:ReactionWindow &amp;&#10;  inv_ReactionWindow(mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))))&#10;"/>
<po column="12" line="952" message="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 952:12&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  exists port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))))&#10;" number="81" object="" resource="simulatorSL" toString="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 952:12&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  exists port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))))&#10;"/>
<po column="17" line="954" message="enable_reaction: function apply obligation in 'TROM' (simulatorSL) at line 954:17&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp;&#10;    pre_get_lru_port((((tc.constrainedevent).porttype).portlist))))&#10;" number="82" object="" resource="simulatorSL" toString="enable_reaction: function apply obligation in 'TROM' (simulatorSL) at line 954:17&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp;&#10;    pre_get_lru_port((((tc.constrainedevent).porttype).portlist))))&#10;"/>
<po column="12" line="956" message="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 956:12&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    exists occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw))))&#10;" number="83" object="" resource="simulatorSL" toString="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 956:12&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    exists occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw))))&#10;"/>
<po column="12" line="960" message="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 960:12&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    (forall occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw)) =&gt;&#10;      exists se2:SimulationEvent &amp; (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)))))&#10;" number="84" object="" resource="simulatorSL" toString="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 960:12&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    (forall occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw)) =&gt;&#10;      exists se2:SimulationEvent &amp; (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)))))&#10;"/>
<po column="18" line="972" message="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 972:18&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    (forall occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)) =&gt;&#10;        ((rw in set (tc.reactionwindows)) =&gt;&#10;          ((se2 in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;              exists tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)))))))))&#10;" number="85" object="" resource="simulatorSL" toString="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 972:18&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    (forall occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)) =&gt;&#10;        ((rw in set (tc.reactionwindows)) =&gt;&#10;          ((se2 in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;              exists tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)))))))))&#10;"/>
<po column="20" line="980" message="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 980:20&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    (forall occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)) =&gt;&#10;        ((rw in set (tc.reactionwindows)) =&gt;&#10;          ((se2 in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;              (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;                ((tromporttuple &lt;&gt; nil) =&gt;&#10;                  exists se3:SimulationEvent &amp; (se3 = mk_SimulationEvent((se2.eventlabel), (tromporttuple.tromlabel), (tromporttuple.portlabel), (se2.occurtime), nil)))))))))))&#10;" number="86" object="" resource="simulatorSL" toString="enable_reaction: let be st existence obligation in 'TROM' (simulatorSL) at line 980:20&#10;(forall rw:ReactionWindow &amp; (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) =&gt;&#10;  (forall port:Port &amp; (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) =&gt;&#10;    (forall occurtime:nat &amp; (occurtime = get_random_time_within_rw(rw)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)) =&gt;&#10;        ((rw in set (tc.reactionwindows)) =&gt;&#10;          ((se2 in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            ((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) =&gt;&#10;              (forall tromporttuple:[TromPortTuple] &amp; (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) =&gt;&#10;                ((tromporttuple &lt;&gt; nil) =&gt;&#10;                  exists se3:SimulationEvent &amp; (se3 = mk_SimulationEvent((se2.eventlabel), (tromporttuple.tromlabel), (tromporttuple.portlabel), (se2.occurtime), nil)))))))))))&#10;"/>
<po column="4" line="932" message="enable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 932:4&#10;let rw:ReactionWindow be st (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) in let port:Port be st (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) in let occurtime:nat be st (occurtime = get_random_time_within_rw(rw)) in let se2:SimulationEvent be st (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)) in ((rw in set (tc.reactionwindows)) and ((se2 in set (elems SIMULATIONEVENTLIST)) and (((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) and let tromporttuple:[TromPortTuple] be st (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) in (((tromporttuple &lt;&gt; nil) and let se3:SimulationEvent be st (se3 = mk_SimulationEvent((se2.eventlabel), (tromporttuple.tromlabel), (tromporttuple.portlabel), (se2.occurtime), nil)) in (se3 in set (elems SIMULATIONEVENTLIST))) or (tromporttuple = nil))) or (((tc.constrainedevent).type) = &lt;INTERNAL&gt;))))&#10;" number="87" object="" resource="simulatorSL" toString="enable_reaction: operation post condition obligation in 'TROM' (simulatorSL) at line 932:4&#10;let rw:ReactionWindow be st (rw = mk_ReactionWindow((((tc.timebounds).lowertimebound) + CLOCK), (((tc.timebounds).uppertimebound) + CLOCK))) in let port:Port be st (port = get_lru_port((((tc.constrainedevent).porttype).portlist))) in let occurtime:nat be st (occurtime = get_random_time_within_rw(rw)) in let se2:SimulationEvent be st (se2 = mk_SimulationEvent(((tc.constrainedevent).label), (trom.label), (port.label), occurtime, nil)) in ((rw in set (tc.reactionwindows)) and ((se2 in set (elems SIMULATIONEVENTLIST)) and (((((tc.constrainedevent).type) = &lt;OUTPUT&gt;) and let tromporttuple:[TromPortTuple] be st (tromporttuple = get_linked_tromport_tuple(mk_TromPortTuple((se2.tromlabel), (se2.portlabel)), SUBSYSTEM)) in (((tromporttuple &lt;&gt; nil) and let se3:SimulationEvent be st (se3 = mk_SimulationEvent((se2.eventlabel), (tromporttuple.tromlabel), (tromporttuple.portlabel), (se2.occurtime), nil)) in (se3 in set (elems SIMULATIONEVENTLIST))) or (tromporttuple = nil))) or (((tc.constrainedevent).type) = &lt;INTERNAL&gt;))))&#10;"/>
<po column="4" line="932" message="enable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 932:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_enable_reaction(trom, se, tc, ts, oldstate) =&gt;&#10;  post_enable_reaction(trom, se, tc, ts, oldstate, newstate))&#10;" number="88" object="" resource="simulatorSL" toString="enable_reaction: operation satifiability obligation in 'TROM' (simulatorSL) at line 932:4&#10;(forall trom:Trom, se:SimulationEvent, tc:TimeConstraint, ts:TransitionSpec, oldstate:System &amp;&#10;  pre_enable_reaction(trom, se, tc, ts, oldstate) =&gt;&#10;  post_enable_reaction(trom, se, tc, ts, oldstate, newstate))&#10;"/>
<po column="4" line="995" message="get_enabled_simevent: operation post condition obligation in 'TROM' (simulatorSL) at line 995:4&#10;((se in set (elems SIMULATIONEVENTLIST)) and (((se.eventlabel) = ((tc.constrainedevent).label)) and (((se.tromlabel) = (trom.label)) and (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil)))))&#10;" number="89" object="" resource="simulatorSL" toString="get_enabled_simevent: operation post condition obligation in 'TROM' (simulatorSL) at line 995:4&#10;((se in set (elems SIMULATIONEVENTLIST)) and (((se.eventlabel) = ((tc.constrainedevent).label)) and (((se.tromlabel) = (trom.label)) and (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil)))))&#10;"/>
<po column="4" line="995" message="get_enabled_simevent: operation satifiability obligation in 'TROM' (simulatorSL) at line 995:4&#10;(forall trom:Trom, tc:TimeConstraint, oldstate:System &amp;&#10;  pre_get_enabled_simevent(trom, tc, oldstate) =&gt;&#10;  exists se:SimulationEvent, newstate:System &amp; post_get_enabled_simevent(trom, tc, se, oldstate, newstate))&#10;" number="90" object="" resource="simulatorSL" toString="get_enabled_simevent: operation satifiability obligation in 'TROM' (simulatorSL) at line 995:4&#10;(forall trom:Trom, tc:TimeConstraint, oldstate:System &amp;&#10;  pre_get_enabled_simevent(trom, tc, oldstate) =&gt;&#10;  exists se:SimulationEvent, newstate:System &amp; post_get_enabled_simevent(trom, tc, se, oldstate, newstate))&#10;"/>
<po column="4" line="1019" message="get_enabled_simevent_synch: operation post condition obligation in 'TROM' (simulatorSL) at line 1019:4&#10;((se in set (elems SIMULATIONEVENTLIST)) and (((se.eventlabel) = ((tc.constrainedevent).label)) and (((se.tromlabel) = (tromporttuple.tromlabel)) and (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil)))))&#10;" number="91" object="" resource="simulatorSL" toString="get_enabled_simevent_synch: operation post condition obligation in 'TROM' (simulatorSL) at line 1019:4&#10;((se in set (elems SIMULATIONEVENTLIST)) and (((se.eventlabel) = ((tc.constrainedevent).label)) and (((se.tromlabel) = (tromporttuple.tromlabel)) and (((se.occurtime) &gt;= CLOCK) and ((se.eventhistory) = nil)))))&#10;"/>
<po column="4" line="1019" message="get_enabled_simevent_synch: operation satifiability obligation in 'TROM' (simulatorSL) at line 1019:4&#10;(forall tromporttuple:TromPortTuple, tc:TimeConstraint, oldstate:System &amp;&#10;  exists se:SimulationEvent, newstate:System &amp; post_get_enabled_simevent_synch(tromporttuple, tc, se, oldstate, newstate))&#10;" number="92" object="" resource="simulatorSL" toString="get_enabled_simevent_synch: operation satifiability obligation in 'TROM' (simulatorSL) at line 1019:4&#10;(forall tromporttuple:TromPortTuple, tc:TimeConstraint, oldstate:System &amp;&#10;  exists se:SimulationEvent, newstate:System &amp; post_get_enabled_simevent_synch(tromporttuple, tc, se, oldstate, newstate))&#10;"/>
<po column="28" line="1055" message="schedule_unconstrained_internal_events_from_initial_state: finite set obligation in 'TROM' (simulatorSL) at line 1055:28&#10;((CLOCK = 0) =&gt;&#10;  exists finmap1:map nat to (Trom) &amp;&#10;    forall trom:Trom &amp;&#10;      exists_in_subsystem(trom, SUBSYSTEM) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = trom)&#10;" number="93" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: finite set obligation in 'TROM' (simulatorSL) at line 1055:28&#10;((CLOCK = 0) =&gt;&#10;  exists finmap1:map nat to (Trom) &amp;&#10;    forall trom:Trom &amp;&#10;      exists_in_subsystem(trom, SUBSYSTEM) =&gt; exists findex2 in set dom finmap1 &amp; finmap1(findex2) = trom)&#10;"/>
<po column="36" line="1056" message="schedule_unconstrained_internal_events_from_initial_state: function apply obligation in 'TROM' (simulatorSL) at line 1056:36&#10;((CLOCK = 0) =&gt;&#10;  (forall trom:Trom &amp;&#10;    pre_exists_in_subsystem(trom, SUBSYSTEM)))&#10;" number="94" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: function apply obligation in 'TROM' (simulatorSL) at line 1056:36&#10;((CLOCK = 0) =&gt;&#10;  (forall trom:Trom &amp;&#10;    pre_exists_in_subsystem(trom, SUBSYSTEM)))&#10;"/>
<po column="20" line="1062" message="schedule_unconstrained_internal_events_from_initial_state: let be st existence obligation in 'TROM' (simulatorSL) at line 1062:20&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        exists se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil))))))&#10;" number="95" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: let be st existence obligation in 'TROM' (simulatorSL) at line 1062:20&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        exists se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil))))))&#10;"/>
<po column="24" line="1069" message="schedule_unconstrained_internal_events_from_initial_state: let be st existence obligation in 'TROM' (simulatorSL) at line 1069:24&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            exists i:nat1 &amp; (SIMULATIONEVENTLIST(i) = se)))))))&#10;" number="96" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: let be st existence obligation in 'TROM' (simulatorSL) at line 1069:24&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            exists i:nat1 &amp; (SIMULATIONEVENTLIST(i) = se)))))))&#10;"/>
<po column="22" line="1071" message="schedule_unconstrained_internal_events_from_initial_state: sequence apply obligation in 'TROM' (simulatorSL) at line 1071:22&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            (forall i:nat1 &amp;&#10;              i in set inds SIMULATIONEVENTLIST)))))))&#10;" number="97" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: sequence apply obligation in 'TROM' (simulatorSL) at line 1071:22&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            (forall i:nat1 &amp;&#10;              i in set inds SIMULATIONEVENTLIST)))))))&#10;"/>
<po column="28" line="1075" message="schedule_unconstrained_internal_events_from_initial_state: let be st existence obligation in 'TROM' (simulatorSL) at line 1075:28&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            (forall i:nat1 &amp; (SIMULATIONEVENTLIST(i) = se) =&gt;&#10;              (forall se2 in set (elems SIMULATIONEVENTLIST~) &amp;&#10;                exists j:nat1 &amp; (SIMULATIONEVENTLIST(j) = se2)))))))))&#10;" number="98" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: let be st existence obligation in 'TROM' (simulatorSL) at line 1075:28&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            (forall i:nat1 &amp; (SIMULATIONEVENTLIST(i) = se) =&gt;&#10;              (forall se2 in set (elems SIMULATIONEVENTLIST~) &amp;&#10;                exists j:nat1 &amp; (SIMULATIONEVENTLIST(j) = se2)))))))))&#10;"/>
<po column="26" line="1077" message="schedule_unconstrained_internal_events_from_initial_state: sequence apply obligation in 'TROM' (simulatorSL) at line 1077:26&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            (forall i:nat1 &amp; (SIMULATIONEVENTLIST(i) = se) =&gt;&#10;              (forall se2 in set (elems SIMULATIONEVENTLIST~) &amp;&#10;                (forall j:nat1 &amp;&#10;                  j in set inds SIMULATIONEVENTLIST)))))))))&#10;" number="99" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: sequence apply obligation in 'TROM' (simulatorSL) at line 1077:26&#10;((CLOCK = 0) =&gt;&#10;  (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp;&#10;    (let event:[Event] = get_unconstrained_internal_event(trom) in&#10;      ((event &lt;&gt; nil) =&gt;&#10;        (forall se:SimulationEvent &amp; (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;          ((se in set (elems SIMULATIONEVENTLIST)) =&gt;&#10;            (forall i:nat1 &amp; (SIMULATIONEVENTLIST(i) = se) =&gt;&#10;              (forall se2 in set (elems SIMULATIONEVENTLIST~) &amp;&#10;                (forall j:nat1 &amp;&#10;                  j in set inds SIMULATIONEVENTLIST)))))))))&#10;"/>
<po column="4" line="1039" message="schedule_unconstrained_internal_events_from_initial_state: operation post condition obligation in 'TROM' (simulatorSL) at line 1039:4&#10;((CLOCK = 0) and (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp; let event:[Event] = get_unconstrained_internal_event(trom) in (((event &lt;&gt; nil) and let se:SimulationEvent be st (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) in ((se in set (elems SIMULATIONEVENTLIST)) and let i:nat1 be st (SIMULATIONEVENTLIST(i) = se) in (forall se2 in set (elems SIMULATIONEVENTLIST~) &amp; let j:nat1 be st (SIMULATIONEVENTLIST(j) = se2) in (i &lt; j)))) or (event = nil))))&#10;" number="100" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: operation post condition obligation in 'TROM' (simulatorSL) at line 1039:4&#10;((CLOCK = 0) and (forall trom in set {trom | [trom:Trom] &amp; exists_in_subsystem(trom, SUBSYSTEM)} &amp; let event:[Event] = get_unconstrained_internal_event(trom) in (((event &lt;&gt; nil) and let se:SimulationEvent be st (se = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) in ((se in set (elems SIMULATIONEVENTLIST)) and let i:nat1 be st (SIMULATIONEVENTLIST(i) = se) in (forall se2 in set (elems SIMULATIONEVENTLIST~) &amp; let j:nat1 be st (SIMULATIONEVENTLIST(j) = se2) in (i &lt; j)))) or (event = nil))))&#10;"/>
<po column="4" line="1039" message="schedule_unconstrained_internal_events_from_initial_state: operation satifiability obligation in 'TROM' (simulatorSL) at line 1039:4&#10;pre_schedule_unconstrained_internal_events_from_initial_state(oldstate) =&gt;&#10;post_schedule_unconstrained_internal_events_from_initial_state(oldstate, newstate)&#10;" number="101" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_events_from_initial_state: operation satifiability obligation in 'TROM' (simulatorSL) at line 1039:4&#10;pre_schedule_unconstrained_internal_events_from_initial_state(oldstate) =&gt;&#10;post_schedule_unconstrained_internal_events_from_initial_state(oldstate, newstate)&#10;"/>
<po column="17" line="1100" message="schedule_unconstrained_internal_event: let be st existence obligation in 'TROM' (simulatorSL) at line 1100:17&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    exists j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST))))&#10;" number="102" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: let be st existence obligation in 'TROM' (simulatorSL) at line 1100:17&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    exists j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST))))&#10;"/>
<po column="19" line="1102" message="schedule_unconstrained_internal_event: function apply obligation in 'TROM' (simulatorSL) at line 1102:19&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp;&#10;      pre_get_simevent_index(se, SIMULATIONEVENTLIST))))&#10;" number="103" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: function apply obligation in 'TROM' (simulatorSL) at line 1102:19&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp;&#10;      pre_get_simevent_index(se, SIMULATIONEVENTLIST))))&#10;"/>
<po column="17" line="1104" message="schedule_unconstrained_internal_event: let be st existence obligation in 'TROM' (simulatorSL) at line 1104:17&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST)) =&gt;&#10;      exists se2:SimulationEvent &amp; (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)))))&#10;" number="104" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: let be st existence obligation in 'TROM' (simulatorSL) at line 1104:17&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST)) =&gt;&#10;      exists se2:SimulationEvent &amp; (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)))))&#10;"/>
<po column="19" line="1111" message="schedule_unconstrained_internal_event: sequence apply obligation in 'TROM' (simulatorSL) at line 1111:19&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;        (forall i in set (inds SIMULATIONEVENTLIST~) &amp; (i &lt;= j) =&gt;&#10;          i in set inds SIMULATIONEVENTLIST~)))))&#10;" number="105" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: sequence apply obligation in 'TROM' (simulatorSL) at line 1111:19&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;        (forall i in set (inds SIMULATIONEVENTLIST~) &amp; (i &lt;= j) =&gt;&#10;          i in set inds SIMULATIONEVENTLIST~)))))&#10;"/>
<po column="22" line="1114" message="schedule_unconstrained_internal_event: sequence apply obligation in 'TROM' (simulatorSL) at line 1114:22&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;        (forall i in set (inds SIMULATIONEVENTLIST~) &amp; (i &gt; j) =&gt;&#10;          i in set inds SIMULATIONEVENTLIST~)))))&#10;" number="106" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: sequence apply obligation in 'TROM' (simulatorSL) at line 1114:22&#10;(let event:[Event] = get_unconstrained_internal_event(trom) in&#10;  ((event &lt;&gt; nil) =&gt;&#10;    (forall j:nat1 &amp; (j = get_simevent_index(se, SIMULATIONEVENTLIST)) =&gt;&#10;      (forall se2:SimulationEvent &amp; (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) =&gt;&#10;        (forall i in set (inds SIMULATIONEVENTLIST~) &amp; (i &gt; j) =&gt;&#10;          i in set inds SIMULATIONEVENTLIST~)))))&#10;"/>
<po column="4" line="1084" message="schedule_unconstrained_internal_event: operation post condition obligation in 'TROM' (simulatorSL) at line 1084:4&#10;let event:[Event] = get_unconstrained_internal_event(trom) in (((event &lt;&gt; nil) and let j:nat1 be st (j = get_simevent_index(se, SIMULATIONEVENTLIST)) in let se2:SimulationEvent be st (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) in (SIMULATIONEVENTLIST = (([SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (i &lt;= j)] ^ [se2]) ^ [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (i &gt; j)]))) or (event = nil))&#10;" number="107" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: operation post condition obligation in 'TROM' (simulatorSL) at line 1084:4&#10;let event:[Event] = get_unconstrained_internal_event(trom) in (((event &lt;&gt; nil) and let j:nat1 be st (j = get_simevent_index(se, SIMULATIONEVENTLIST)) in let se2:SimulationEvent be st (se2 = mk_SimulationEvent((event.label), (trom.label), &quot;NULLPORT&quot;, CLOCK, nil)) in (SIMULATIONEVENTLIST = (([SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (i &lt;= j)] ^ [se2]) ^ [SIMULATIONEVENTLIST~(i) | i in set (inds SIMULATIONEVENTLIST~) &amp; (i &gt; j)]))) or (event = nil))&#10;"/>
<po column="4" line="1084" message="schedule_unconstrained_internal_event: operation satifiability obligation in 'TROM' (simulatorSL) at line 1084:4&#10;(forall trom:Trom, se:SimulationEvent, oldstate:System &amp;&#10;  pre_schedule_unconstrained_internal_event(trom, se, oldstate) =&gt;&#10;  post_schedule_unconstrained_internal_event(trom, se, oldstate, newstate))&#10;" number="108" object="" resource="simulatorSL" toString="schedule_unconstrained_internal_event: operation satifiability obligation in 'TROM' (simulatorSL) at line 1084:4&#10;(forall trom:Trom, se:SimulationEvent, oldstate:System &amp;&#10;  pre_schedule_unconstrained_internal_event(trom, se, oldstate) =&gt;&#10;  post_schedule_unconstrained_internal_event(trom, se, oldstate, newstate))&#10;"/>
<po column="4" line="1120" message="initialize_simulation_clock: operation post condition obligation in 'TROM' (simulatorSL) at line 1120:4&#10;(CLOCK = 0)&#10;" number="109" object="" resource="simulatorSL" toString="initialize_simulation_clock: operation post condition obligation in 'TROM' (simulatorSL) at line 1120:4&#10;(CLOCK = 0)&#10;"/>
<po column="4" line="1120" message="initialize_simulation_clock: operation satifiability obligation in 'TROM' (simulatorSL) at line 1120:4&#10;post_initialize_simulation_clock(oldstate, newstate)&#10;" number="110" object="" resource="simulatorSL" toString="initialize_simulation_clock: operation satifiability obligation in 'TROM' (simulatorSL) at line 1120:4&#10;post_initialize_simulation_clock(oldstate, newstate)&#10;"/>
<po column="4" line="1129" message="update_simulation_clock: operation post condition obligation in 'TROM' (simulatorSL) at line 1129:4&#10;(CLOCK = (CLOCK~ + 1))&#10;" number="111" object="" resource="simulatorSL" toString="update_simulation_clock: operation post condition obligation in 'TROM' (simulatorSL) at line 1129:4&#10;(CLOCK = (CLOCK~ + 1))&#10;"/>
<po column="4" line="1129" message="update_simulation_clock: operation satifiability obligation in 'TROM' (simulatorSL) at line 1129:4&#10;post_update_simulation_clock(oldstate, newstate)&#10;" number="112" object="" resource="simulatorSL" toString="update_simulation_clock: operation satifiability obligation in 'TROM' (simulatorSL) at line 1129:4&#10;post_update_simulation_clock(oldstate, newstate)&#10;"/>
</result>
</testResult>
