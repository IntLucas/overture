-- TCErrors: WARNING:5012:109,1 WARNING:5012:153,1 WARNING:5008:238,27 WARNING:5008:244,28 WARNING:5008:251,31 WARNING:5000:275,8 WARNING:5012:271,3 WARNING:5012:283,3 WARNING:5012:293,1 WARNING:5000:305,31 WARNING:5012:373,1 WARNING:5012:417,1 WARNING:5000:426,8 WARNING:5012:422,3 WARNING:5012:434,3 WARNING:5000:476,16 WARNING:5008:542,35 WARNING:5000:14,1 WARNING:5000:618,1 PROOFOBLIGATION: fDE1OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8QWRhbT4gfC0+IDF9LCB7PEJpbGw+IHwtPiAyfSwgezxDaGFybGllPiB8LT4gM30sIHs8RnJhbms+IHwtPiA0fX0gJgogIGZvcmFsbCBkMyBpbiBzZXQgZG9tIG0xLCBkNCBpbiBzZXQgZG9tIG0yICYKICAgIGQzID0gZDQgPT4gbTEoZDMpID0gbTIoZDQpCixtYXAgc2VxdWVuY2UgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE2OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8QmlsbD4gfC0+IDF9LCB7PEFkYW0+IHwtPiAyfSwgezxDaGFybGllPiB8LT4gM30sIHs8R2VvcmdlPiB8LT4gNH19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE3OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8QWRhbT4gfC0+IDF9LCB7PENoYXJsaWU+IHwtPiAyfSwgezxCaWxsPiB8LT4gM30sIHs8SGFycnk+IHwtPiA0fX0gJgogIGZvcmFsbCBkMyBpbiBzZXQgZG9tIG0xLCBkNCBpbiBzZXQgZG9tIG0yICYKICAgIGQzID0gZDQgPT4gbTEoZDMpID0gbTIoZDQpCixtYXAgc2VxdWVuY2UgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE4OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8QmlsbD4gfC0+IDF9LCB7PENoYXJsaWU+IHwtPiAyfSwgezxBZGFtPiB8LT4gM30sIHs8SWFuPiB8LT4gNH19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE5OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8Q2hhcmxpZT4gfC0+IDF9LCB7PEFkYW0+IHwtPiAyfSwgezxCaWxsPiB8LT4gM30sIHs8Sm9obj4gfC0+IDR9fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDIwOjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8Q2hhcmxpZT4gfC0+IDF9LCB7PEJpbGw+IHwtPiAyfSwgezxBZGFtPiB8LT4gM30sIHs8RG9uYWxkPiB8LT4gNH19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDIxOjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8RG9uYWxkPiB8LT4gMX0sIHs8QWRhbT4gfC0+IDJ9fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDIyOjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8RnJhbms+IHwtPiAxfSwgezxCaWxsPiB8LT4gMn19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDIzOjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8R2VvcmdlPiB8LT4gMX0sIHs8Q2hhcmxpZT4gfC0+IDJ9fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI0OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8SGFycnk+IHwtPiAxfSwgezxCaWxsPiB8LT4gMn19ICYKICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KQosbWFwIHNlcXVlbmNlIGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI1OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8SWFuPiB8LT4gMX0sIHs8QWRhbT4gfC0+IDJ9fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI2OjEgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3s8Sm9obj4gfC0+IDF9LCB7PENoYXJsaWU+IHwtPiAyfX0gJgogIGZvcmFsbCBkMyBpbiBzZXQgZG9tIG0xLCBkNCBpbiBzZXQgZG9tIG0yICYKICAgIGQzID0gZDQgPT4gbTEoZDMpID0gbTIoZDQpCixtYXAgc2VxdWVuY2UgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE0OjkgVm90ZXMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3t7PEFkYW0+IHwtPiAxLCA8QmlsbD4gfC0+IDIsIDxDaGFybGllPiB8LT4gMywgPEZyYW5rPiB8LT4gNH0gfC0+IDEwMDAwMH0sIHt7PEJpbGw+IHwtPiAxLCA8QWRhbT4gfC0+IDIsIDxDaGFybGllPiB8LT4gMywgPEdlb3JnZT4gfC0+IDR9IHwtPiAxMDAwMDB9LCB7ezxBZGFtPiB8LT4gMSwgPENoYXJsaWU+IHwtPiAyLCA8QmlsbD4gfC0+IDMsIDxIYXJyeT4gfC0+IDR9IHwtPiAxMDAwMDB9LCB7ezxCaWxsPiB8LT4gMSwgPENoYXJsaWU+IHwtPiAyLCA8QWRhbT4gfC0+IDMsIDxJYW4+IHwtPiA0fSB8LT4gMTAwMDAwfSwge3s8Q2hhcmxpZT4gfC0+IDEsIDxBZGFtPiB8LT4gMiwgPEJpbGw+IHwtPiAzLCA8Sm9obj4gfC0+IDR9IHwtPiAxMDAwMDB9LCB7ezxDaGFybGllPiB8LT4gMSwgPEJpbGw+IHwtPiAyLCA8QWRhbT4gfC0+IDMsIDxEb25hbGQ+IHwtPiA0fSB8LT4gMTAwMDAwfSwge3s8RG9uYWxkPiB8LT4gMSwgPEFkYW0+IHwtPiAyfSB8LT4gMTAwMH0sIHt7PEZyYW5rPiB8LT4gMSwgPEJpbGw+IHwtPiAyfSB8LT4gMTAwMH0sIHt7PEdlb3JnZT4gfC0+IDEsIDxDaGFybGllPiB8LT4gMn0gfC0+IDEwMDB9LCB7ezxIYXJyeT4gfC0+IDEsIDxCaWxsPiB8LT4gMn0gfC0+IDEwMDB9LCB7ezxJYW4+IHwtPiAxLCA8QWRhbT4gfC0+IDJ9IHwtPiAxMDAwfSwge3s8Sm9obj4gfC0+IDEsIDxDaGFybGllPiB8LT4gMn0gfC0+IDEwMDB9fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDM1OjQzIFZvdGluZ19wYXBlciwoZm9yYWxsIHY6bWFwIChDYW5kaWRhdGVfbmFtZXMpIHRvIChuYXQxKSAmCiAgKGZvcmFsbCBuYW1lOih1bnJlc29sdmVkIENhbmRpZGF0ZV9uYW1lcykgJgogICAgbmFtZSBpbiBzZXQgZG9tIHYpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ1OjE5IFN0YWdlLChmb3JhbGwgczpzZXEgb2YgKFNjb3JlKSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBzKSwgaiBpbiBzZXQgKGluZHMgcykgJgogICAgaSBpbiBzZXQgaW5kcyBzKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ1OjMzIFN0YWdlLChmb3JhbGwgczpzZXEgb2YgKFNjb3JlKSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBzKSwgaiBpbiBzZXQgKGluZHMgcykgJgogICAgaiBpbiBzZXQgaW5kcyBzKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ3OjE4IFN0YWdlLChmb3JhbGwgczpzZXEgb2YgKFNjb3JlKSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBzKSwgaiBpbiBzZXQgKGluZHMgcykgJgogICAgaSBpbiBzZXQgaW5kcyBzKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ3OjMxIFN0YWdlLChmb3JhbGwgczpzZXEgb2YgKFNjb3JlKSAmCiAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBzKSwgaiBpbiBzZXQgKGluZHMgcykgJgogICAgaiBpbiBzZXQgaW5kcyBzKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDExMjoxOCBtdWx0X3Bfc3VtLChmb3JhbGwgczpzZXQgb2YgKChuYXQgKiBQYXJjZWwpKSAmCiAgKG5vdCAocyA9IHt9KSA9PgogICAgZXhpc3RzIG1rXyhtLCBwYSkgaW4gc2V0IHMpKQosbGV0IGJlIHN0IGV4aXN0ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDEzMTo4IHNvcnRfcGFwZXJzLChmb3JhbGwgdm90ZXM6UGFyY2VsLCBuYW1lczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgbmFtZSBpbiBzZXQgbmFtZXMgJgogICAgaW52X0NhbmRpZGF0ZShuYW1lLCB2b3RlX3Jlcyh2b3Rlcywge3YgfCBbdiBpbiBzZXQgKGRvbSB2b3RlcyldICYgKCh2IDo+IHsxfSkgPSB7bmFtZSB8LT4gMX0pfSksIFtdKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE0MjozIHN0YWdlX2JrLChmb3JhbGwgczpzZXEgb2YgKFNjb3JlKSAmIChzIDw+IFtdKSA9PgogIChsZW4gcykgaW4gc2V0IGluZHMgcykKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE0NzozMCBkZWZlcl90cmFuc2Zlcl9vZl9zdXJwbHVzLCBsb3dlc3RfdmFsdWUsKGZvcmFsbCBxdW90YTpyZWFsLCBzdGFnZTpTdGFnZSAmICgobGVuIHN0YWdlKSA+IDEpID0+CiAgcHJlX3N0YWdlX2JrKHN0YWdlKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE0ODozNiBkZWZlcl90cmFuc2Zlcl9vZl9zdXJwbHVzLCBzZWNvbmRfbG93ZXN0X3ZhbHVlLChmb3JhbGwgcXVvdGE6cmVhbCwgc3RhZ2U6U3RhZ2UgJiAoKGxlbiBzdGFnZSkgPiAxKSA9PgogICgobGVuIHN0YWdlKSAtIDEpIGluIHNldCBpbmRzIHN0YWdlKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE0OToxNSBkZWZlcl90cmFuc2Zlcl9vZl9zdXJwbHVzLChmb3JhbGwgcXVvdGE6cmVhbCwgc3RhZ2U6U3RhZ2UgJiAoKGxlbiBzdGFnZSkgPiAxKSA9PgogIChsZXQgbG93ZXN0X3ZhbHVlOnJlYWwgPSAoc3RhZ2VfYmsoc3RhZ2UpLmNvdW50KSwgc2Vjb25kX2xvd2VzdF92YWx1ZTpyZWFsID0gKHN0YWdlKCgobGVuIHN0YWdlKSAtIDEpKS5jb3VudCkgaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgc3RhZ2UpICYgKChzdGFnZShpKS5jb3VudCkgPiBxdW90YSkgPT4KICAgICAgaSBpbiBzZXQgaW5kcyBzdGFnZSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE1MDoxNyBkZWZlcl90cmFuc2Zlcl9vZl9zdXJwbHVzLChmb3JhbGwgcXVvdGE6cmVhbCwgc3RhZ2U6U3RhZ2UgJiAoKGxlbiBzdGFnZSkgPiAxKSA9PgogIChsZXQgbG93ZXN0X3ZhbHVlOnJlYWwgPSAoc3RhZ2VfYmsoc3RhZ2UpLmNvdW50KSwgc2Vjb25kX2xvd2VzdF92YWx1ZTpyZWFsID0gKHN0YWdlKCgobGVuIHN0YWdlKSAtIDEpKS5jb3VudCkgaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgc3RhZ2UpICYKICAgICAgaSBpbiBzZXQgaW5kcyBzdGFnZSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE1NjoxMSBzdW0sKGZvcmFsbCBzOnNlcSBvZiAocmVhbCkgJgogIChub3QgKHMgPSBbXSkgPT4KICAgIHMgPD4gW10pKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE1NjoyMiBzdW0sKGZvcmFsbCBzOnNlcSBvZiAocmVhbCkgJgogIChub3QgKHMgPSBbXSkgPT4KICAgIHMgPD4gW10pKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE2MDoxNCBzb2xlX2xlYWRlciwgY2FuZCwoZm9yYWxsIHN0YWdlOlN0YWdlLCBuYW1lOkNhbmRpZGF0ZV9uYW1lcywgbGVhZGVyczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIGV4aXN0czEgYyBpbiBzZXQgKGVsZW1zIHN0YWdlKSAmICgoYy5uYW1lKSA9IG5hbWUpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE2Nzo1OSBncmVhdGVzdF92YWx1ZV9hdF9lYXJsaWVzdF9zdGFnZSwgbGVhZGVycywoZm9yYWxsIG5hbWU6Q2FuZGlkYXRlX25hbWVzLCBhbGxfc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpICYKICBhbGxfc3RhZ2VzIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE2ODo0OCBncmVhdGVzdF92YWx1ZV9hdF9lYXJsaWVzdF9zdGFnZSwgbGVhZGVycywoZm9yYWxsIG5hbWU6Q2FuZGlkYXRlX25hbWVzLCBhbGxfc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpICYKICAoZm9yYWxsIHNjb3JlIGluIHNldCAoZWxlbXMgKGhkIGFsbF9zdGFnZXMpKSAmCiAgICBhbGxfc3RhZ2VzIDw+IFtdKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE2ODo0NSBncmVhdGVzdF92YWx1ZV9hdF9lYXJsaWVzdF9zdGFnZSwgbGVhZGVycywoZm9yYWxsIG5hbWU6Q2FuZGlkYXRlX25hbWVzLCBhbGxfc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpICYKICAoZm9yYWxsIHNjb3JlIGluIHNldCAoZWxlbXMgKGhkIGFsbF9zdGFnZXMpKSAmCiAgICAoaGQgYWxsX3N0YWdlcykgPD4gW10pKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE3MDoyNCBncmVhdGVzdF92YWx1ZV9hdF9lYXJsaWVzdF9zdGFnZSwoZm9yYWxsIG5hbWU6Q2FuZGlkYXRlX25hbWVzLCBhbGxfc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpICYKICAobGV0IGxlYWRlcnM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhzY29yZS5uYW1lKSB8IFtzY29yZSBpbiBzZXQgKGVsZW1zIChoZCBhbGxfc3RhZ2VzKSldICYgKChzY29yZS5jb3VudCkgPSAoKGhkIChoZCBhbGxfc3RhZ2VzKSkuY291bnQpKX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgYWxsX3N0YWdlcykgJgogICAgICBpIGluIHNldCBpbmRzIGFsbF9zdGFnZXMpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE3NDozNCBncmVhdGVzdF92YWx1ZV9hdF9lYXJsaWVzdF9zdGFnZSwoZm9yYWxsIG5hbWU6Q2FuZGlkYXRlX25hbWVzLCBhbGxfc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpICYKICAobGV0IGxlYWRlcnM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhzY29yZS5uYW1lKSB8IFtzY29yZSBpbiBzZXQgKGVsZW1zIChoZCBhbGxfc3RhZ2VzKSldICYgKChzY29yZS5jb3VudCkgPSAoKGhkIChoZCBhbGxfc3RhZ2VzKSkuY291bnQpKX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgYWxsX3N0YWdlcykgJgogICAgICAoc29sZV9sZWFkZXIoYWxsX3N0YWdlcyhpKSwgbmFtZSwgbGVhZGVycykgPT4KICAgICAgICAoZm9yYWxsIGogaW4gc2V0IHsoaSArIDEpLCAuLi4gLChsZW4gYWxsX3N0YWdlcyl9LCBvdGhlcl9sZWFkZXIgaW4gc2V0IGxlYWRlcnMgJgogICAgICAgICAgaiBpbiBzZXQgaW5kcyBhbGxfc3RhZ2VzKSkpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE4NzoyMyBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsIHN1Yl9wYXJjZWxfbWFwLChmb3JhbGwgdmFsOlZhbHVlLCBwYXJjZWw6UGFyY2VsLCBkaXNjb250aW51aW5nOkNhbmRpZGF0ZSwgY29udGludWluZ19jYW5kaWRhdGVzOnNldCBvZiAoQ2FuZGlkYXRlKSAmCiAgKGxldCBuYW1lczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgPSB7KGNhbmRpZGF0ZS5uYW1lKSB8IFtjYW5kaWRhdGUgaW4gc2V0IGNvbnRpbnVpbmdfY2FuZGlkYXRlc119IGluCiAgICBmb3JhbGwgbTEsIG0yIGluIHNldCB7e24gfC0+IG1rX1N1Yl9wYXJjZWwoe3YgfC0+IHBhcmNlbCh2KSB8IHYgaW4gc2V0IChkb20gcGFyY2VsKSAmIG5leHRfcHJlZmVyZW5jZShuLCB2LCBuYW1lcyl9LCB2YWwpfSB8IG4gaW4gc2V0IG5hbWVzfSAmCiAgICAgIGZvcmFsbCBkMyBpbiBzZXQgZG9tIG0xLCBkNCBpbiBzZXQgZG9tIG0yICYKICAgICAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KSkpCixtYXAgc2V0IGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE4Nzo0NSBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsIHN1Yl9wYXJjZWxfbWFwLChmb3JhbGwgdmFsOlZhbHVlLCBwYXJjZWw6UGFyY2VsLCBkaXNjb250aW51aW5nOkNhbmRpZGF0ZSwgY29udGludWluZ19jYW5kaWRhdGVzOnNldCBvZiAoQ2FuZGlkYXRlKSAmCiAgKGxldCBuYW1lczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgPSB7KGNhbmRpZGF0ZS5uYW1lKSB8IFtjYW5kaWRhdGUgaW4gc2V0IGNvbnRpbnVpbmdfY2FuZGlkYXRlc119IGluCiAgICAoZm9yYWxsIG4gaW4gc2V0IG5hbWVzICYKICAgICAgZm9yYWxsIG0xLCBtMiBpbiBzZXQge3t2IHwtPiBwYXJjZWwodil9IHwgdiBpbiBzZXQgKGRvbSBwYXJjZWwpICYgbmV4dF9wcmVmZXJlbmNlKG4sIHYsIG5hbWVzKX0gJgogICAgICAgIGZvcmFsbCBkMyBpbiBzZXQgZG9tIG0xLCBkNCBpbiBzZXQgZG9tIG0yICYKICAgICAgICAgIGQzID0gZDQgPT4gbTEoZDMpID0gbTIoZDQpKSkpCixtYXAgc2V0IGNvbXBhdGlibGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE4Nzo1MyBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsIHN1Yl9wYXJjZWxfbWFwLChmb3JhbGwgdmFsOlZhbHVlLCBwYXJjZWw6UGFyY2VsLCBkaXNjb250aW51aW5nOkNhbmRpZGF0ZSwgY29udGludWluZ19jYW5kaWRhdGVzOnNldCBvZiAoQ2FuZGlkYXRlKSAmCiAgKGxldCBuYW1lczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgPSB7KGNhbmRpZGF0ZS5uYW1lKSB8IFtjYW5kaWRhdGUgaW4gc2V0IGNvbnRpbnVpbmdfY2FuZGlkYXRlc119IGluCiAgICAoZm9yYWxsIG4gaW4gc2V0IG5hbWVzICYKICAgICAgKGZvcmFsbCB2IGluIHNldCAoZG9tIHBhcmNlbCkgJiBuZXh0X3ByZWZlcmVuY2UobiwgdiwgbmFtZXMpID0+CiAgICAgICAgdiBpbiBzZXQgZG9tIHBhcmNlbCkpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE5MDozMyBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsIG5vbl9lbXB0eV9zdWJfcGFyY2VsX21hcCwoZm9yYWxsIHZhbDpWYWx1ZSwgcGFyY2VsOlBhcmNlbCwgZGlzY29udGludWluZzpDYW5kaWRhdGUsIGNvbnRpbnVpbmdfY2FuZGlkYXRlczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmFtZXM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhjYW5kaWRhdGUubmFtZSkgfCBbY2FuZGlkYXRlIGluIHNldCBjb250aW51aW5nX2NhbmRpZGF0ZXNdfSBpbgogICAgKGxldCBzdWJfcGFyY2VsX21hcDptYXAgKENhbmRpZGF0ZV9uYW1lcykgdG8gKFN1Yl9wYXJjZWwpID0ge24gfC0+IG1rX1N1Yl9wYXJjZWwoe3YgfC0+IHBhcmNlbCh2KSB8IHYgaW4gc2V0IChkb20gcGFyY2VsKSAmIG5leHRfcHJlZmVyZW5jZShuLCB2LCBuYW1lcyl9LCB2YWwpIHwgbiBpbiBzZXQgbmFtZXN9IGluCiAgICAgIGZvcmFsbCBtMSwgbTIgaW4gc2V0IHt7biB8LT4gc3ViX3BhcmNlbF9tYXAobil9IHwgbiBpbiBzZXQgKGRvbSBzdWJfcGFyY2VsX21hcCkgJiAoKHN1Yl9wYXJjZWxfbWFwKG4pLnZvdGVzKSA8PiB7fSl9ICYKICAgICAgICBmb3JhbGwgZDMgaW4gc2V0IGRvbSBtMSwgZDQgaW4gc2V0IGRvbSBtMiAmCiAgICAgICAgICBkMyA9IGQ0ID0+IG0xKGQzKSA9IG0yKGQ0KSkpKQosbWFwIHNldCBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDE5MDo0MSBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsIG5vbl9lbXB0eV9zdWJfcGFyY2VsX21hcCwoZm9yYWxsIHZhbDpWYWx1ZSwgcGFyY2VsOlBhcmNlbCwgZGlzY29udGludWluZzpDYW5kaWRhdGUsIGNvbnRpbnVpbmdfY2FuZGlkYXRlczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmFtZXM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhjYW5kaWRhdGUubmFtZSkgfCBbY2FuZGlkYXRlIGluIHNldCBjb250aW51aW5nX2NhbmRpZGF0ZXNdfSBpbgogICAgKGxldCBzdWJfcGFyY2VsX21hcDptYXAgKENhbmRpZGF0ZV9uYW1lcykgdG8gKFN1Yl9wYXJjZWwpID0ge24gfC0+IG1rX1N1Yl9wYXJjZWwoe3YgfC0+IHBhcmNlbCh2KSB8IHYgaW4gc2V0IChkb20gcGFyY2VsKSAmIG5leHRfcHJlZmVyZW5jZShuLCB2LCBuYW1lcyl9LCB2YWwpIHwgbiBpbiBzZXQgbmFtZXN9IGluCiAgICAgIChmb3JhbGwgbiBpbiBzZXQgKGRvbSBzdWJfcGFyY2VsX21hcCkgJiAoKHN1Yl9wYXJjZWxfbWFwKG4pLnZvdGVzKSA8PiB7fSkgPT4KICAgICAgICBuIGluIHNldCBkb20gc3ViX3BhcmNlbF9tYXApKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDE5MTozNCBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsIG5vbl9lbXB0eV9zdWJfcGFyY2VsX21hcCwoZm9yYWxsIHZhbDpWYWx1ZSwgcGFyY2VsOlBhcmNlbCwgZGlzY29udGludWluZzpDYW5kaWRhdGUsIGNvbnRpbnVpbmdfY2FuZGlkYXRlczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmFtZXM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhjYW5kaWRhdGUubmFtZSkgfCBbY2FuZGlkYXRlIGluIHNldCBjb250aW51aW5nX2NhbmRpZGF0ZXNdfSBpbgogICAgKGxldCBzdWJfcGFyY2VsX21hcDptYXAgKENhbmRpZGF0ZV9uYW1lcykgdG8gKFN1Yl9wYXJjZWwpID0ge24gfC0+IG1rX1N1Yl9wYXJjZWwoe3YgfC0+IHBhcmNlbCh2KSB8IHYgaW4gc2V0IChkb20gcGFyY2VsKSAmIG5leHRfcHJlZmVyZW5jZShuLCB2LCBuYW1lcyl9LCB2YWwpIHwgbiBpbiBzZXQgbmFtZXN9IGluCiAgICAgIChmb3JhbGwgbiBpbiBzZXQgKGRvbSBzdWJfcGFyY2VsX21hcCkgJgogICAgICAgIG4gaW4gc2V0IGRvbSBzdWJfcGFyY2VsX21hcCkpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDE5NDo2NSBjb25zdHJ1Y3Rfc3ViX3BhcmNlbHMsKGZvcmFsbCB2YWw6VmFsdWUsIHBhcmNlbDpQYXJjZWwsIGRpc2NvbnRpbnVpbmc6Q2FuZGlkYXRlLCBjb250aW51aW5nX2NhbmRpZGF0ZXM6c2V0IG9mIChDYW5kaWRhdGUpICYKICAobGV0IG5hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoY2FuZGlkYXRlLm5hbWUpIHwgW2NhbmRpZGF0ZSBpbiBzZXQgY29udGludWluZ19jYW5kaWRhdGVzXX0gaW4KICAgIChsZXQgc3ViX3BhcmNlbF9tYXA6bWFwIChDYW5kaWRhdGVfbmFtZXMpIHRvIChTdWJfcGFyY2VsKSA9IHtuIHwtPiBta19TdWJfcGFyY2VsKHt2IHwtPiBwYXJjZWwodikgfCB2IGluIHNldCAoZG9tIHBhcmNlbCkgJiBuZXh0X3ByZWZlcmVuY2UobiwgdiwgbmFtZXMpfSwgdmFsKSB8IG4gaW4gc2V0IG5hbWVzfSBpbgogICAgICAobGV0IG5vbl9lbXB0eV9zdWJfcGFyY2VsX21hcDptYXAgKENhbmRpZGF0ZV9uYW1lcykgdG8gKFN1Yl9wYXJjZWwpID0ge24gfC0+IHN1Yl9wYXJjZWxfbWFwKG4pIHwgbiBpbiBzZXQgKGRvbSBzdWJfcGFyY2VsX21hcCkgJiAoKHN1Yl9wYXJjZWxfbWFwKG4pLnZvdGVzKSA8PiB7fSl9IGluCiAgICAgICAgaW52X1ZhbHVlKDEuMCkgYW5kIChpc19yZWFsKDEuMCkpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDIwODoxOCBuZXh0X3ByZWZlcmVuY2UsKGZvcmFsbCBuYW1lOkNhbmRpZGF0ZV9uYW1lcywgdm90ZTpWb3RpbmdfcGFwZXIsIGNvbnRpbnVpbmc6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpICYKICAoKG5hbWUgaW4gc2V0IChkb20gdm90ZSkpID0+CiAgICAoZm9yYWxsIGkgaW4gc2V0IChybmcgdm90ZSkgJgogICAgICBuYW1lIGluIHNldCBkb20gdm90ZSkpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDIxNzo1MCBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2ZlciwgbmV3X3N1Yl9wYXJjZWxzLChmb3JhbGwgc3VycGx1czpyZWFsLCBvbGRfdmFsdWU6VmFsdWUsIG9sZF92b3RlczpQYXJjZWwsIGRpc2M6Q2FuZGlkYXRlLCBjb250X2NhbmRzOnNldCBvZiAoQ2FuZGlkYXRlKSAmCiAgaW52X1ZhbHVlKDEuMCkgYW5kIChpc19yZWFsKDEuMCkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDIyMjo0OSBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2ZlciwgdHJhbnNmX3ZhbCwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgb2xkX3ZhbHVlOlZhbHVlLCBvbGRfdm90ZXM6UGFyY2VsLCBkaXNjOkNhbmRpZGF0ZSwgY29udF9jYW5kczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmV3X3N1Yl9wYXJjZWxzOlN1Yl9wYXJjZWxfYnVuZGxlID0gY29uc3RydWN0X3N1Yl9wYXJjZWxzKDEuMCwgb2xkX3ZvdGVzLCBkaXNjLCBjb250X2NhbmRzKSBpbgogICAgKGxldCB0b3RhbF9ub19vZl90cmFuc192b3RlczppbnQgPSAoc2l6ZShvbGRfdm90ZXMpIC0gc2l6ZSgoKG5ld19zdWJfcGFyY2Vscy5ub25fdHJhbnNmZXJhYmxlKS52b3RlcykpKSBpbgogICAgICAobGV0IHRvdGFsX3ZhbF90cmFuc192b3RlczpyZWFsID0gKHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzICogb2xkX3ZhbHVlKSBpbgogICAgICAgIGludl9WYWx1ZSh0b3RhbF92YWxfdHJhbnNfdm90ZXMpIGFuZCAoaXNfcmVhbCh0b3RhbF92YWxfdHJhbnNfdm90ZXMpKSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDIyMzo1MCBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2ZlciwgdHJhbnNmX3ZhbCwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgb2xkX3ZhbHVlOlZhbHVlLCBvbGRfdm90ZXM6UGFyY2VsLCBkaXNjOkNhbmRpZGF0ZSwgY29udF9jYW5kczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmV3X3N1Yl9wYXJjZWxzOlN1Yl9wYXJjZWxfYnVuZGxlID0gY29uc3RydWN0X3N1Yl9wYXJjZWxzKDEuMCwgb2xkX3ZvdGVzLCBkaXNjLCBjb250X2NhbmRzKSBpbgogICAgKGxldCB0b3RhbF9ub19vZl90cmFuc192b3RlczppbnQgPSAoc2l6ZShvbGRfdm90ZXMpIC0gc2l6ZSgoKG5ld19zdWJfcGFyY2Vscy5ub25fdHJhbnNmZXJhYmxlKS52b3RlcykpKSBpbgogICAgICAobGV0IHRvdGFsX3ZhbF90cmFuc192b3RlczpyZWFsID0gKHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzICogb2xkX3ZhbHVlKSBpbgogICAgICAgIHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzID49IDApKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDIyNDoyNCBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2Zlciwgc3ViX3BhcmNlbHMsKGZvcmFsbCBzdXJwbHVzOnJlYWwsIG9sZF92YWx1ZTpWYWx1ZSwgb2xkX3ZvdGVzOlBhcmNlbCwgZGlzYzpDYW5kaWRhdGUsIGNvbnRfY2FuZHM6c2V0IG9mIChDYW5kaWRhdGUpICYKICAobGV0IG5ld19zdWJfcGFyY2VsczpTdWJfcGFyY2VsX2J1bmRsZSA9IGNvbnN0cnVjdF9zdWJfcGFyY2VscygxLjAsIG9sZF92b3RlcywgZGlzYywgY29udF9jYW5kcykgaW4KICAgIChsZXQgdG90YWxfbm9fb2ZfdHJhbnNfdm90ZXM6aW50ID0gKHNpemUob2xkX3ZvdGVzKSAtIHNpemUoKChuZXdfc3ViX3BhcmNlbHMubm9uX3RyYW5zZmVyYWJsZSkudm90ZXMpKSkgaW4KICAgICAgKGxldCB0b3RhbF92YWxfdHJhbnNfdm90ZXM6cmVhbCA9ICh0b3RhbF9ub19vZl90cmFuc192b3RlcyAqIG9sZF92YWx1ZSkgaW4KICAgICAgICAobGV0IHRyYW5zZl92YWw6VmFsdWUgPSBjYWxjX3RyYW5zZl92YWx1ZShzdXJwbHVzLCB0b3RhbF92YWxfdHJhbnNfdm90ZXMsIG9sZF92YWx1ZSwgdG90YWxfbm9fb2ZfdHJhbnNfdm90ZXMpIGluCiAgICAgICAgICBmb3JhbGwgbTEsIG0yIGluIHNldCB7e24gfC0+IG1rX1N1Yl9wYXJjZWwoKChuZXdfc3ViX3BhcmNlbHMuc3ViX3BhcmNlbHMpKG4pLnZvdGVzKSwgdHJhbnNmX3ZhbCl9IHwgbiBpbiBzZXQgKGRvbSAobmV3X3N1Yl9wYXJjZWxzLnN1Yl9wYXJjZWxzKSl9ICYKICAgICAgICAgICAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgICAgICAgICAgIGQzID0gZDQgPT4gbTEoZDMpID0gbTIoZDQpKSkpKSkKLG1hcCBzZXQgY29tcGF0aWJsZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDIyNToyNSBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2Zlciwgc3ViX3BhcmNlbHMsKGZvcmFsbCBzdXJwbHVzOnJlYWwsIG9sZF92YWx1ZTpWYWx1ZSwgb2xkX3ZvdGVzOlBhcmNlbCwgZGlzYzpDYW5kaWRhdGUsIGNvbnRfY2FuZHM6c2V0IG9mIChDYW5kaWRhdGUpICYKICAobGV0IG5ld19zdWJfcGFyY2VsczpTdWJfcGFyY2VsX2J1bmRsZSA9IGNvbnN0cnVjdF9zdWJfcGFyY2VscygxLjAsIG9sZF92b3RlcywgZGlzYywgY29udF9jYW5kcykgaW4KICAgIChsZXQgdG90YWxfbm9fb2ZfdHJhbnNfdm90ZXM6aW50ID0gKHNpemUob2xkX3ZvdGVzKSAtIHNpemUoKChuZXdfc3ViX3BhcmNlbHMubm9uX3RyYW5zZmVyYWJsZSkudm90ZXMpKSkgaW4KICAgICAgKGxldCB0b3RhbF92YWxfdHJhbnNfdm90ZXM6cmVhbCA9ICh0b3RhbF9ub19vZl90cmFuc192b3RlcyAqIG9sZF92YWx1ZSkgaW4KICAgICAgICAobGV0IHRyYW5zZl92YWw6VmFsdWUgPSBjYWxjX3RyYW5zZl92YWx1ZShzdXJwbHVzLCB0b3RhbF92YWxfdHJhbnNfdm90ZXMsIG9sZF92YWx1ZSwgdG90YWxfbm9fb2ZfdHJhbnNfdm90ZXMpIGluCiAgICAgICAgICAoZm9yYWxsIG4gaW4gc2V0IChkb20gKG5ld19zdWJfcGFyY2Vscy5zdWJfcGFyY2VscykpICYKICAgICAgICAgICAgbiBpbiBzZXQgZG9tIChuZXdfc3ViX3BhcmNlbHMuc3ViX3BhcmNlbHMpKSkpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDIyODoyMSBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2ZlciwgbG9zc19vZl92YWx1ZSwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgb2xkX3ZhbHVlOlZhbHVlLCBvbGRfdm90ZXM6UGFyY2VsLCBkaXNjOkNhbmRpZGF0ZSwgY29udF9jYW5kczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmV3X3N1Yl9wYXJjZWxzOlN1Yl9wYXJjZWxfYnVuZGxlID0gY29uc3RydWN0X3N1Yl9wYXJjZWxzKDEuMCwgb2xkX3ZvdGVzLCBkaXNjLCBjb250X2NhbmRzKSBpbgogICAgKGxldCB0b3RhbF9ub19vZl90cmFuc192b3RlczppbnQgPSAoc2l6ZShvbGRfdm90ZXMpIC0gc2l6ZSgoKG5ld19zdWJfcGFyY2Vscy5ub25fdHJhbnNmZXJhYmxlKS52b3RlcykpKSBpbgogICAgICAobGV0IHRvdGFsX3ZhbF90cmFuc192b3RlczpyZWFsID0gKHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzICogb2xkX3ZhbHVlKSBpbgogICAgICAgIChsZXQgdHJhbnNmX3ZhbDpWYWx1ZSA9IGNhbGNfdHJhbnNmX3ZhbHVlKHN1cnBsdXMsIHRvdGFsX3ZhbF90cmFuc192b3Rlcywgb2xkX3ZhbHVlLCB0b3RhbF9ub19vZl90cmFuc192b3RlcykgaW4KICAgICAgICAgIGludl9WYWx1ZSh0b3RhbF92YWxfdHJhbnNfdm90ZXMpIGFuZCAoaXNfcmVhbCh0b3RhbF92YWxfdHJhbnNfdm90ZXMpKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDIyODo0MyBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2ZlciwgbG9zc19vZl92YWx1ZSwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgb2xkX3ZhbHVlOlZhbHVlLCBvbGRfdm90ZXM6UGFyY2VsLCBkaXNjOkNhbmRpZGF0ZSwgY29udF9jYW5kczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmV3X3N1Yl9wYXJjZWxzOlN1Yl9wYXJjZWxfYnVuZGxlID0gY29uc3RydWN0X3N1Yl9wYXJjZWxzKDEuMCwgb2xkX3ZvdGVzLCBkaXNjLCBjb250X2NhbmRzKSBpbgogICAgKGxldCB0b3RhbF9ub19vZl90cmFuc192b3RlczppbnQgPSAoc2l6ZShvbGRfdm90ZXMpIC0gc2l6ZSgoKG5ld19zdWJfcGFyY2Vscy5ub25fdHJhbnNmZXJhYmxlKS52b3RlcykpKSBpbgogICAgICAobGV0IHRvdGFsX3ZhbF90cmFuc192b3RlczpyZWFsID0gKHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzICogb2xkX3ZhbHVlKSBpbgogICAgICAgIChsZXQgdHJhbnNmX3ZhbDpWYWx1ZSA9IGNhbGNfdHJhbnNmX3ZhbHVlKHN1cnBsdXMsIHRvdGFsX3ZhbF90cmFuc192b3Rlcywgb2xkX3ZhbHVlLCB0b3RhbF9ub19vZl90cmFuc192b3RlcykgaW4KICAgICAgICAgIHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzID49IDApKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDIzMDo0MSBjb25zdHJ1Y3RfYnVuZGxlX2Zvcl90cmFuc2Zlciwgbm9uX3RyYW5zX3ZhbCwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgb2xkX3ZhbHVlOlZhbHVlLCBvbGRfdm90ZXM6UGFyY2VsLCBkaXNjOkNhbmRpZGF0ZSwgY29udF9jYW5kczpzZXQgb2YgKENhbmRpZGF0ZSkgJgogIChsZXQgbmV3X3N1Yl9wYXJjZWxzOlN1Yl9wYXJjZWxfYnVuZGxlID0gY29uc3RydWN0X3N1Yl9wYXJjZWxzKDEuMCwgb2xkX3ZvdGVzLCBkaXNjLCBjb250X2NhbmRzKSBpbgogICAgKGxldCB0b3RhbF9ub19vZl90cmFuc192b3RlczppbnQgPSAoc2l6ZShvbGRfdm90ZXMpIC0gc2l6ZSgoKG5ld19zdWJfcGFyY2Vscy5ub25fdHJhbnNmZXJhYmxlKS52b3RlcykpKSBpbgogICAgICAobGV0IHRvdGFsX3ZhbF90cmFuc192b3RlczpyZWFsID0gKHRvdGFsX25vX29mX3RyYW5zX3ZvdGVzICogb2xkX3ZhbHVlKSBpbgogICAgICAgIChsZXQgdHJhbnNmX3ZhbDpWYWx1ZSA9IGNhbGNfdHJhbnNmX3ZhbHVlKHN1cnBsdXMsIHRvdGFsX3ZhbF90cmFuc192b3Rlcywgb2xkX3ZhbHVlLCB0b3RhbF9ub19vZl90cmFuc192b3RlcykgaW4KICAgICAgICAgIGludl9WYWx1ZSh0b3RhbF92YWxfdHJhbnNfdm90ZXMpIGFuZCAoaXNfcmVhbCh0b3RhbF92YWxfdHJhbnNfdm90ZXMpKSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI0MDozNCBjYWxjX3RyYW5zZl92YWx1ZSwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgdG90YWxfdmFsdWU6VmFsdWUsIG9sZF92YWx1ZTpWYWx1ZSwgdG90YWxfbm86bmF0ICYKICAoKHN1cnBsdXMgPCB0b3RhbF92YWx1ZSkgPT4KICAgIHRvdGFsX25vIDw+IDApKQosbm9uLXplcm8sbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDIzNzoxIGNhbGNfdHJhbnNmX3ZhbHVlLChmb3JhbGwgc3VycGx1czpyZWFsLCB0b3RhbF92YWx1ZTpWYWx1ZSwgb2xkX3ZhbHVlOlZhbHVlLCB0b3RhbF9ubzpuYXQgJgogIGludl9WYWx1ZSgoaWYgKHN1cnBsdXMgPCB0b3RhbF92YWx1ZSkKICB0aGVuICgoZmxvb3IgKCgxMDAgKiBzdXJwbHVzKSAvIHRvdGFsX25vKSkgLyAxMDApCiAgZWxzZSBvbGRfdmFsdWUpKSBhbmQgKGlzX3JlYWwoKGlmIChzdXJwbHVzIDwgdG90YWxfdmFsdWUpCiAgdGhlbiAoKGZsb29yICgoMTAwICogc3VycGx1cykgLyB0b3RhbF9ubykpIC8gMTAwKQogIGVsc2Ugb2xkX3ZhbHVlKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDI0NjoyMiBjYWxjX2xvc3Nfb2ZfdmFsdWUsKGZvcmFsbCBzdXJwbHVzOnJlYWwsIHRvdGFsX3ZhbHVlOlZhbHVlLCB0b3RhbF9udW1iZXI6bmF0LCBvbGRfdmFsdWU6VmFsdWUgJgogICgoc3VycGx1cyA8IHRvdGFsX3ZhbHVlKSA9PgogICAgdG90YWxfbnVtYmVyIDw+IDApKQosbm9uLXplcm8sbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI0Nzo0NSBjYWxjX2xvc3Nfb2ZfdmFsdWUsKGZvcmFsbCBzdXJwbHVzOnJlYWwsIHRvdGFsX3ZhbHVlOlZhbHVlLCB0b3RhbF9udW1iZXI6bmF0LCBvbGRfdmFsdWU6VmFsdWUgJgogICgoc3VycGx1cyA8IHRvdGFsX3ZhbHVlKSA9PgogICAgdG90YWxfdmFsdWUgPD4gMCkpCixub24temVybyxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDI1MDoxIGNhbGNfbm9uX3RyYW5zZl92YWx1ZSwoZm9yYWxsIHN1cnBsdXM6cmVhbCwgdG90YWxfdmFsdWU6VmFsdWUgJgogIGludl9WYWx1ZSgoaWYgKHN1cnBsdXMgPiB0b3RhbF92YWx1ZSkKICB0aGVuIChzdXJwbHVzIC0gdG90YWxfdmFsdWUpCiAgZWxzZSAwKSkgYW5kIChpc19yZWFsKChpZiAoc3VycGx1cyA+IHRvdGFsX3ZhbHVlKQogIHRoZW4gKHN1cnBsdXMgLSB0b3RhbF92YWx1ZSkKICBlbHNlIDApKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI1OToxOCByZWRpc3RyaWJ1dGVfcGFyY2VscywoZm9yYWxsIHByZXZpb3VzX2NvbGxlY3Rpb246Q2FuZHNldCwgYnVuZGxlOlN1Yl9wYXJjZWxfYnVuZGxlICYgKChkb20gKGJ1bmRsZS5zdWJfcGFyY2VscykpIHN1YnNldCB7KGNhbmRpZGF0ZS5uYW1lKSB8IFtjYW5kaWRhdGUgaW4gc2V0IHByZXZpb3VzX2NvbGxlY3Rpb25dfSkgPT4KICAoZm9yYWxsIGNhbmRpZGF0ZSBpbiBzZXQgcHJldmlvdXNfY29sbGVjdGlvbiwgbiBpbiBzZXQgKGRvbSAoYnVuZGxlLnN1Yl9wYXJjZWxzKSkgJiAoKGNhbmRpZGF0ZS5uYW1lKSA9IG4pID0+CiAgICBuIGluIHNldCBkb20gKGJ1bmRsZS5zdWJfcGFyY2VscykpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI3NjoyNiBzY29yZV9zb3J0LChmb3JhbGwgc3RhOlN0YWdlICYKICAobm90IFtdID0gc3RhID0+CiAgICAobm90IGV4aXN0cyBbZV06U3RhZ2UgJiBbZV0gPSBzdGEgPT4KICAgICAgZXhpc3RzIHN0YTEgXiBzdGEyIGluIHNldCB7c3RhfSAmICgoYWJzICgobGVuIHN0YTEpIC0gKGxlbiBzdGEyKSkpIDwgMikpKSkKLGxldCBiZSBzdCBleGlzdGVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI4NzozNyBzY29yZV9tZXJnZSwoZm9yYWxsIHN0YTE6U3RhZ2UsIHN0YTI6U3RhZ2UgJgogIChub3QgZXhpc3RzIG1rXyhbXSwgc3RhKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oW10sIHN0YSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgIChub3QgZXhpc3RzIG1rXyhzdGEsIFtdKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oc3RhLCBbXSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgICAgc3RhMSA8PiBbXSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI4Nzo1NiBzY29yZV9tZXJnZSwoZm9yYWxsIHN0YTE6U3RhZ2UsIHN0YTI6U3RhZ2UgJgogIChub3QgZXhpc3RzIG1rXyhbXSwgc3RhKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oW10sIHN0YSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgIChub3QgZXhpc3RzIG1rXyhzdGEsIFtdKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oc3RhLCBbXSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgICAgc3RhMiA8PiBbXSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI4ODozNiBzY29yZV9tZXJnZSwoZm9yYWxsIHN0YTE6U3RhZ2UsIHN0YTI6U3RhZ2UgJgogIChub3QgZXhpc3RzIG1rXyhbXSwgc3RhKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oW10sIHN0YSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgIChub3QgZXhpc3RzIG1rXyhzdGEsIFtdKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oc3RhLCBbXSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgICAgKCgoKGhkIHN0YTEpLmNvdW50KSA+PSAoKGhkIHN0YTIpLmNvdW50KSkgPT4KICAgICAgICBzdGExIDw+IFtdKSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI4ODo1OSBzY29yZV9tZXJnZSwoZm9yYWxsIHN0YTE6U3RhZ2UsIHN0YTI6U3RhZ2UgJgogIChub3QgZXhpc3RzIG1rXyhbXSwgc3RhKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oW10sIHN0YSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgIChub3QgZXhpc3RzIG1rXyhzdGEsIFtdKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oc3RhLCBbXSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgICAgKCgoKGhkIHN0YTEpLmNvdW50KSA+PSAoKGhkIHN0YTIpLmNvdW50KSkgPT4KICAgICAgICBzdGExIDw+IFtdKSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDI5MDozNiBzY29yZV9tZXJnZSwoZm9yYWxsIHN0YTE6U3RhZ2UsIHN0YTI6U3RhZ2UgJgogIChub3QgZXhpc3RzIG1rXyhbXSwgc3RhKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oW10sIHN0YSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgIChub3QgZXhpc3RzIG1rXyhzdGEsIFtdKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oc3RhLCBbXSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgICAgKG5vdCAoKChoZCBzdGExKS5jb3VudCkgPj0gKChoZCBzdGEyKS5jb3VudCkpID0+CiAgICAgICAgc3RhMiA8PiBbXSkpKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDI5MDo2NSBzY29yZV9tZXJnZSwoZm9yYWxsIHN0YTE6U3RhZ2UsIHN0YTI6U3RhZ2UgJgogIChub3QgZXhpc3RzIG1rXyhbXSwgc3RhKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oW10sIHN0YSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgIChub3QgZXhpc3RzIG1rXyhzdGEsIFtdKTooU3RhZ2UgKiBTdGFnZSkgJiBta18oc3RhLCBbXSkgPSBta18oc3RhMSwgc3RhMikgPT4KICAgICAgKG5vdCAoKChoZCBzdGExKS5jb3VudCkgPj0gKChoZCBzdGEyKS5jb3VudCkpID0+CiAgICAgICAgc3RhMiA8PiBbXSkpKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDI4MzozIHNjb3JlX21lcmdlLChmb3JhbGwgc3RhMTpTdGFnZSwgc3RhMjpTdGFnZSAmCiAgaW52X1N0YWdlKChjYXNlcyBta18oc3RhMSwgc3RhMikgOgogIGNhc2UgbWtfKFtdLCBzdGEpIC0+IHN0YSwKICBjYXNlIG1rXyhzdGEsIFtdKSAtPiBzdGFvdGhlcnMgKGlmICgoKGhkIHN0YTEpLmNvdW50KSA+PSAoKGhkIHN0YTIpLmNvdW50KSkKICB0aGVuIChbKGhkIHN0YTEpXSBeIHNjb3JlX21lcmdlKCh0bCBzdGExKSwgc3RhMikpCiAgZWxzZSAoWyhoZCBzdGEyKV0gXiBzY29yZV9tZXJnZShzdGExLCAodGwgc3RhMikpKSkKICBlbmQpKSBhbmQgKGlzXygoY2FzZXMgbWtfKHN0YTEsIHN0YTIpIDoKICBjYXNlIG1rXyhbXSwgc3RhKSAtPiBzdGEsCiAgY2FzZSBta18oc3RhLCBbXSkgLT4gc3Rhb3RoZXJzIChpZiAoKChoZCBzdGExKS5jb3VudCkgPj0gKChoZCBzdGEyKS5jb3VudCkpCiAgdGhlbiAoWyhoZCBzdGExKV0gXiBzY29yZV9tZXJnZSgodGwgc3RhMSksIHN0YTIpKQogIGVsc2UgKFsoaGQgc3RhMildIF4gc2NvcmVfbWVyZ2Uoc3RhMSwgKHRsIHN0YTIpKSkpCiAgZW5kKSwgc2VxIG9mIChTY29yZSkpKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDI5NjoxMiBzZXRfc2VxLChmb3JhbGwgczpzZXQgb2YgKFNjb3JlKSAmCiAgKG5vdCAocyA9IHt9KSA9PgogICAgZXhpc3RzIGUgaW4gc2V0IHMpKQosbGV0IGJlIHN0IGV4aXN0ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDI5MzoxIHNldF9zZXEsKGZvcmFsbCBzOnNldCBvZiAoU2NvcmUpICYKICBpbnZfU3RhZ2UoKGlmIChzID0ge30pCiAgdGhlbiBbXQogIGVsc2UgbGV0IGUgaW4gc2V0IHMgaW4gKFtlXSBeIHNldF9zZXEoKHMgXCB7ZX0pKSkpKSBhbmQgKGlzXygoaWYgKHMgPSB7fSkKICB0aGVuIFtdCiAgZWxzZSBsZXQgZSBpbiBzZXQgcyBpbiAoW2VdIF4gc2V0X3NlcSgocyBcIHtlfSkpKSksIHNlcSBvZiAoU2NvcmUpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDMwODozOSBjb25zdHJ1Y3RfbmV3X3N0YWdlLCB1bnNvcnRlZF9zY29yZXMsKGZvcmFsbCBvbGRfc3RhZ2U6U3RhZ2UsIGRpc2NvbnRpbnVpbmc6Q2FuZGlkYXRlX25hbWVzLCBidW5kbGU6U3ViX3BhcmNlbF9idW5kbGUgJgogIChsZXQgY2FuZHNfd2l0aF9tb3JlX3ZvdGVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IChkb20gKGJ1bmRsZS5zdWJfcGFyY2VscykpIGluCiAgICAoZm9yYWxsIG1rX1Njb3JlKG5hbWUsIG9sZF9jb3VudCkgaW4gc2V0IChlbGVtcyBvbGRfc3RhZ2UpICYgKG5hbWUgaW4gc2V0IGNhbmRzX3dpdGhfbW9yZV92b3RlcykgPT4KICAgICAgbmFtZSBpbiBzZXQgZG9tIChidW5kbGUuc3ViX3BhcmNlbHMpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDMwOTozMyBjb25zdHJ1Y3RfbmV3X3N0YWdlLCB1bnNvcnRlZF9zY29yZXMsKGZvcmFsbCBvbGRfc3RhZ2U6U3RhZ2UsIGRpc2NvbnRpbnVpbmc6Q2FuZGlkYXRlX25hbWVzLCBidW5kbGU6U3ViX3BhcmNlbF9idW5kbGUgJgogIChsZXQgY2FuZHNfd2l0aF9tb3JlX3ZvdGVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IChkb20gKGJ1bmRsZS5zdWJfcGFyY2VscykpIGluCiAgICAoZm9yYWxsIG1rX1Njb3JlKG5hbWUsIG9sZF9jb3VudCkgaW4gc2V0IChlbGVtcyBvbGRfc3RhZ2UpICYgKG5hbWUgaW4gc2V0IGNhbmRzX3dpdGhfbW9yZV92b3RlcykgPT4KICAgICAgbmFtZSBpbiBzZXQgZG9tIChidW5kbGUuc3ViX3BhcmNlbHMpKSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDMyMToxNyBleGlzdHNfbm9uX2RlZmVyYWJsZV9zdXJwbHVzLChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICBzdGFnZXMgPD4gW10pCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDMyMToxNCBleGlzdHNfbm9uX2RlZmVyYWJsZV9zdXJwbHVzLChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICAoaGQgc3RhZ2VzKSA8PiBbXSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDMyMzoxMyBleGlzdHNfbm9uX2RlZmVyYWJsZV9zdXJwbHVzLChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICAoKCgoaGQgKGhkIHN0YWdlcykpLmNvdW50KSA+PSBxdW90YSkgPT4KICAgIHByZV9kZWZlcl90cmFuc2Zlcl9vZl9zdXJwbHVzKHF1b3RhLCAoaGQgc3RhZ2VzKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDMyMzo0OSBleGlzdHNfbm9uX2RlZmVyYWJsZV9zdXJwbHVzLChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICAoKCgoaGQgKGhkIHN0YWdlcykpLmNvdW50KSA+PSBxdW90YSkgPT4KICAgIHN0YWdlcyA8PiBbXSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDMyNzozMSB0cmFpbGluZ19jYW5kaWRhdGUsIHRyYWlsaW5nX2NvdW50LChmb3JhbGwgbmFtZTpDYW5kaWRhdGVfbmFtZXMsIGFsbF9zdGFnZXM6c2VxMSBvZiAoU3RhZ2UpICYKICBwcmVfc3RhZ2VfYmsoKGhkIGFsbF9zdGFnZXMpKSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDMyNzo0MyB0cmFpbGluZ19jYW5kaWRhdGUsIHRyYWlsaW5nX2NvdW50LChmb3JhbGwgbmFtZTpDYW5kaWRhdGVfbmFtZXMsIGFsbF9zdGFnZXM6c2VxMSBvZiAoU3RhZ2UpICYKICBhbGxfc3RhZ2VzIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDMyODo1OSB0cmFpbGluZ19jYW5kaWRhdGUsIGxvd2VzdCwoZm9yYWxsIG5hbWU6Q2FuZGlkYXRlX25hbWVzLCBhbGxfc3RhZ2VzOnNlcTEgb2YgKFN0YWdlKSAmCiAgKGxldCB0cmFpbGluZ19jb3VudDpyZWFsID0gKHN0YWdlX2JrKChoZCBhbGxfc3RhZ2VzKSkuY291bnQpIGluCiAgICBhbGxfc3RhZ2VzIDw+IFtdKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDMzMToyNSB0cmFpbGluZ19jYW5kaWRhdGUsKGZvcmFsbCBuYW1lOkNhbmRpZGF0ZV9uYW1lcywgYWxsX3N0YWdlczpzZXExIG9mIChTdGFnZSkgJgogIChsZXQgdHJhaWxpbmdfY291bnQ6cmVhbCA9IChzdGFnZV9iaygoaGQgYWxsX3N0YWdlcykpLmNvdW50KSBpbgogICAgKGxldCBsb3dlc3Q6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhzY29yZS5uYW1lKSB8IFtzY29yZSBpbiBzZXQgKGVsZW1zIChoZCBhbGxfc3RhZ2VzKSldICYgKChzY29yZS5jb3VudCkgPSB0cmFpbGluZ19jb3VudCl9IGluCiAgICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgYWxsX3N0YWdlcykgJgogICAgICAgIGkgaW4gc2V0IGluZHMgYWxsX3N0YWdlcykpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDMzMzozNSB0cmFpbGluZ19jYW5kaWRhdGUsKGZvcmFsbCBuYW1lOkNhbmRpZGF0ZV9uYW1lcywgYWxsX3N0YWdlczpzZXExIG9mIChTdGFnZSkgJgogIChsZXQgdHJhaWxpbmdfY291bnQ6cmVhbCA9IChzdGFnZV9iaygoaGQgYWxsX3N0YWdlcykpLmNvdW50KSBpbgogICAgKGxldCBsb3dlc3Q6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhzY29yZS5uYW1lKSB8IFtzY29yZSBpbiBzZXQgKGVsZW1zIChoZCBhbGxfc3RhZ2VzKSldICYgKChzY29yZS5jb3VudCkgPSB0cmFpbGluZ19jb3VudCl9IGluCiAgICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgYWxsX3N0YWdlcykgJgogICAgICAgIChzb2xlX3RyYWlsZXIoYWxsX3N0YWdlcyhpKSwgbmFtZSwgbG93ZXN0KSA9PgogICAgICAgICAgKGZvcmFsbCBqIGluIHNldCB7KGkgKyAxKSwgLi4uICwobGVuIGFsbF9zdGFnZXMpfSwgb3RoZXIgaW4gc2V0IGxvd2VzdCAmCiAgICAgICAgICAgIGogaW4gc2V0IGluZHMgYWxsX3N0YWdlcykpKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDMzNzoxNiBzb2xlX3RyYWlsZXIsIGNhbmQsKGZvcmFsbCBzdGFnZTpTdGFnZSwgbmFtZTpDYW5kaWRhdGVfbmFtZXMsIGxvd2VzdDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIGV4aXN0czEgYyBpbiBzZXQgKGVsZW1zIHN0YWdlKSAmICgoYy5uYW1lKSA9IG5hbWUpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDM0NzoxIG51bWJlcl9vZl9yZW1haW5pbmdfdmFjYW5jaWVzLChmb3JhbGwgY2FuZHM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpICYKICAoTnVtYmVyX29mX3ZhY2FuY2llcyAtIChjYXJkIGNhbmRzKSkgPj0gMCkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM1ODo1MyBudW1iZXJfb2ZfY2FuZGlkYXRlc19zYXRpc2Z5aW5nX3F1b3RhLCB4c19xdW90YV9zY3MsKGZvcmFsbCBjb250aW51aW5nOnNldCBvZiAoQ2FuZGlkYXRlKSwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICBzdGFnZXMgPD4gW10pCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM2NjozNSBub25fdHJhbnNmZXJhYmxlX3BhcGVyLCBzLChmb3JhbGwgcGFwZXI6Vm90aW5nX3BhcGVyLCBkaXNjb250aW51aW5nOkNhbmRpZGF0ZV9uYW1lcywgY29udGludWluZ19uYW1lczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChub3QgKCgoZG9tIChwYXBlciA6LT4gezF9KSkgaW50ZXIgY29udGludWluZ19uYW1lcykgPSB7fSkgPT4KICAgIGRpc2NvbnRpbnVpbmcgaW4gc2V0IGRvbSBwYXBlcikpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM2ODoxNiBub25fdHJhbnNmZXJhYmxlX3BhcGVyLCBtLChmb3JhbGwgcGFwZXI6Vm90aW5nX3BhcGVyLCBkaXNjb250aW51aW5nOkNhbmRpZGF0ZV9uYW1lcywgY29udGludWluZ19uYW1lczpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChub3QgKCgoZG9tIChwYXBlciA6LT4gezF9KSkgaW50ZXIgY29udGludWluZ19uYW1lcykgPSB7fSkgPT4KICAgIChsZXQgczpzZXQgb2YgKG5hdDEpID0gKHJuZyAocGFwZXIgOi0+IHsxLCAuLi4gLHBhcGVyKGRpc2NvbnRpbnVpbmcpfSkpIGluCiAgICAgIChub3QgKHMgPSB7fSkgPT4KICAgICAgICBwcmVfbWluKHMpKSkpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM3NTo2IG1pbiwoZm9yYWxsIHM6c2V0IG9mIChyZWFsKSAmIChzIDw+IHt9KSA9PgogIGV4aXN0cyBtIGluIHNldCBzKQosbGV0IGJlIHN0IGV4aXN0ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDM3NzoxNiBtaW4sIHNtLChmb3JhbGwgczpzZXQgb2YgKHJlYWwpICYgKHMgPD4ge30pID0+CiAgKGZvcmFsbCBtIGluIHNldCBzICYKICAgIChub3QgKChjYXJkIHMpID0gMSkgPT4KICAgICAgcHJlX21pbigocyBcIHttfSkpKSkpCixmdW5jdGlvbiBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDM4NDozNSBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIGNvbnRpbnVpbmdfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYgKCgoaGQgc3RhZ2VzKShpKS5uYW1lKSBpbiBzZXQgY29udGludWluZ19uYW1lcykgPT4KICAgICAgaSBpbiBzZXQgaW5kcyAoaGQgc3RhZ2VzKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NDozOCBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIGNvbnRpbnVpbmdfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYgKCgoaGQgc3RhZ2VzKShpKS5uYW1lKSBpbiBzZXQgY29udGludWluZ19uYW1lcykgPT4KICAgICAgc3RhZ2VzIDw+IFtdKSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NDo2OCBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIGNvbnRpbnVpbmdfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIHN0YWdlcyA8PiBbXSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NTozMiBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIGNvbnRpbnVpbmdfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYKICAgICAgaSBpbiBzZXQgaW5kcyAoaGQgc3RhZ2VzKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NTozNSBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIGNvbnRpbnVpbmdfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYKICAgICAgc3RhZ2VzIDw+IFtdKSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NjozMiBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIHN1cnBsdXNfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYgKCgoaGQgc3RhZ2VzKShpKS5jb3VudCkgPiBxdW90YSkgPT4KICAgICAgaSBpbiBzZXQgaW5kcyAoaGQgc3RhZ2VzKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NjozNSBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIHN1cnBsdXNfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYgKCgoaGQgc3RhZ2VzKShpKS5jb3VudCkgPiBxdW90YSkgPT4KICAgICAgc3RhZ2VzIDw+IFtdKSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4Njo2NSBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIHN1cnBsdXNfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIHN0YWdlcyA8PiBbXSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NzozNiBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIHN1cnBsdXNfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYKICAgICAgaSBpbiBzZXQgaW5kcyAoaGQgc3RhZ2VzKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4NzozOSBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsIHN1cnBsdXNfc2NvcmVzLChmb3JhbGwgY29udGludWluZzpzZXQgb2YgKENhbmRpZGF0ZSksIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCAmCiAgKGxldCBjb250aW51aW5nX25hbWVzOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSA9IHsoYy5uYW1lKSB8IFtjIGluIHNldCBjb250aW51aW5nXX0gaW4KICAgIChmb3JhbGwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYKICAgICAgc3RhZ2VzIDw+IFtdKSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDM4OToxMSBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsKGZvcmFsbCBjb250aW51aW5nOnNldCBvZiAoQ2FuZGlkYXRlKSwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICAobGV0IGNvbnRpbnVpbmdfbmFtZXM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhjLm5hbWUpIHwgW2MgaW4gc2V0IGNvbnRpbnVpbmddfSBpbgogICAgKGxldCBjb250aW51aW5nX3Njb3JlczpzZXEgb2YgKFNjb3JlKSA9IFsoaGQgc3RhZ2VzKShpKSB8IGkgaW4gc2V0IChpbmRzIChoZCBzdGFnZXMpKSAmICgoKGhkIHN0YWdlcykoaSkubmFtZSkgaW4gc2V0IGNvbnRpbnVpbmdfbmFtZXMpXSwgc3VycGx1c19zY29yZXM6c2VxIG9mIChTY29yZSkgPSBbKGhkIHN0YWdlcykoaSkgfCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJiAoKChoZCBzdGFnZXMpKGkpLmNvdW50KSA+IHF1b3RhKV0gaW4KICAgICAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBjb250aW51aW5nX3Njb3JlcykgJgogICAgICAgIGkgaW4gc2V0IGluZHMgY29udGludWluZ19zY29yZXMpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDM5MDoxOCBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsKGZvcmFsbCBjb250aW51aW5nOnNldCBvZiAoQ2FuZGlkYXRlKSwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICAobGV0IGNvbnRpbnVpbmdfbmFtZXM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhjLm5hbWUpIHwgW2MgaW4gc2V0IGNvbnRpbnVpbmddfSBpbgogICAgKGxldCBjb250aW51aW5nX3Njb3JlczpzZXEgb2YgKFNjb3JlKSA9IFsoaGQgc3RhZ2VzKShpKSB8IGkgaW4gc2V0IChpbmRzIChoZCBzdGFnZXMpKSAmICgoKGhkIHN0YWdlcykoaSkubmFtZSkgaW4gc2V0IGNvbnRpbnVpbmdfbmFtZXMpXSwgc3VycGx1c19zY29yZXM6c2VxIG9mIChTY29yZSkgPSBbKGhkIHN0YWdlcykoaSkgfCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJiAoKChoZCBzdGFnZXMpKGkpLmNvdW50KSA+IHF1b3RhKV0gaW4KICAgICAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBjb250aW51aW5nX3Njb3JlcykgJgogICAgICAgIChmb3JhbGwgaiBpbiBzZXQgKChpbmRzIGNvbnRpbnVpbmdfc2NvcmVzKSBcIHtpfSkgJgogICAgICAgICAgaiBpbiBzZXQgaW5kcyBjb250aW51aW5nX3Njb3JlcykpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDM5MjoxOCBsYXN0X3ZhY2FuY3lfZmlsbGFibGUsKGZvcmFsbCBjb250aW51aW5nOnNldCBvZiAoQ2FuZGlkYXRlKSwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsICYKICAobGV0IGNvbnRpbnVpbmdfbmFtZXM6c2V0IG9mIChDYW5kaWRhdGVfbmFtZXMpID0geyhjLm5hbWUpIHwgW2MgaW4gc2V0IGNvbnRpbnVpbmddfSBpbgogICAgKGxldCBjb250aW51aW5nX3Njb3JlczpzZXEgb2YgKFNjb3JlKSA9IFsoaGQgc3RhZ2VzKShpKSB8IGkgaW4gc2V0IChpbmRzIChoZCBzdGFnZXMpKSAmICgoKGhkIHN0YWdlcykoaSkubmFtZSkgaW4gc2V0IGNvbnRpbnVpbmdfbmFtZXMpXSwgc3VycGx1c19zY29yZXM6c2VxIG9mIChTY29yZSkgPSBbKGhkIHN0YWdlcykoaSkgfCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJiAoKChoZCBzdGFnZXMpKGkpLmNvdW50KSA+IHF1b3RhKV0gaW4KICAgICAgKGZvcmFsbCBpIGluIHNldCAoaW5kcyBjb250aW51aW5nX3Njb3JlcykgJgogICAgICAgIChmb3JhbGwgaiBpbiBzZXQgKGluZHMgc3VycGx1c19zY29yZXMpICYKICAgICAgICAgIGogaW4gc2V0IGluZHMgc3VycGx1c19zY29yZXMpKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQwMToyNSBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsLCByZWNvcmQ6c2VxIG9mIChSZWNvcmRfZW50cnkpLCBlbGVjdGVkOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSAmCiAgKGZvcmFsbCBpOm5hdDEgJgogICAgKGkgKyAxKSBpbiBzZXQgaW5kcyBzdGFnZXMpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQwMTo0MyBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsLCByZWNvcmQ6c2VxIG9mIChSZWNvcmRfZW50cnkpLCBlbGVjdGVkOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSAmCiAgKGZvcmFsbCBpOm5hdDEgJgogICAgaSBpbiBzZXQgaW5kcyBzdGFnZXMpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQwMjozOCBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LCBleGNsdWRlZCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgaTpuYXQxICYKICAgICgoKGxlbiBzdGFnZXMoKGkgKyAxKSkpID4gKGxlbiBzdGFnZXMoaSkpKSA9PgogICAgICBleGlzdHMxIGV4IGluIHNldCBDYW5kX25hbWVzICYgKGV4IGluIHNldCB7KHNjLm5hbWUpIHwgW3NjIGluIHNldCAoZWxlbXMgc3RhZ2VzKChpICsgMSkpKV0gJiAoZm9yYWxsIG9zYyBpbiBzZXQgKGVsZW1zIHN0YWdlcyhpKSkgJiAoKG9zYy5uYW1lKSA8PiAoc2MubmFtZSkpKX0pKSkpCix1bmlxdWUgZXhpc3RlbmNlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQwNDo1MSBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LCBleGNsdWRlZCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgaTpuYXQxICYKICAgICgoKGxlbiBzdGFnZXMoKGkgKyAxKSkpID4gKGxlbiBzdGFnZXMoaSkpKSA9PgogICAgICAoZm9yYWxsIGV4IGluIHNldCBDYW5kX25hbWVzICYKICAgICAgICAoaSArIDEpIGluIHNldCBpbmRzIHN0YWdlcykpKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQwNTo1OSBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LCBleGNsdWRlZCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgaTpuYXQxICYKICAgICgoKGxlbiBzdGFnZXMoKGkgKyAxKSkpID4gKGxlbiBzdGFnZXMoaSkpKSA9PgogICAgICAoZm9yYWxsIGV4IGluIHNldCBDYW5kX25hbWVzICYKICAgICAgICAoZm9yYWxsIHNjIGluIHNldCAoZWxlbXMgc3RhZ2VzKChpICsgMSkpKSAmCiAgICAgICAgICBpIGluIHNldCBpbmRzIHN0YWdlcykpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQwNzozMyBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsLCByZWNvcmQ6c2VxIG9mIChSZWNvcmRfZW50cnkpLCBlbGVjdGVkOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSAmCiAgKGZvcmFsbCBpOm5hdDEgJgogICAgKCgobGVuIHN0YWdlcygoaSArIDEpKSkgPiAobGVuIHN0YWdlcyhpKSkpID0+CiAgICAgIChsZXQgZXhjbHVkZWQ6KDxBZGFtPiB8IDxCaWxsPiB8IDxDaGFybGllPiB8IDxEb25hbGQ+IHwgPEVkd2FyZD4gfCA8RnJhbms+IHwgPEdlb3JnZT4gfCA8SGFycnk+IHwgPElhbj4gfCA8Sm9obj4pID0gKGlvdGEgZXggaW4gc2V0IENhbmRfbmFtZXMgJiAoZXggaW4gc2V0IHsoc2MubmFtZSkgfCBbc2MgaW4gc2V0IChlbGVtcyBzdGFnZXMoKGkgKyAxKSkpXSAmIChmb3JhbGwgb3NjIGluIHNldCAoZWxlbXMgc3RhZ2VzKGkpKSAmICgob3NjLm5hbWUpIDw+IChzYy5uYW1lKSkpfSkpIGluCiAgICAgICAgKGkgKyAxKSBpbiBzZXQgaW5kcyByZWNvcmQpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQwODo0MSBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LCB0cmFuc2ZlcnJlZCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgaTpuYXQxICYKICAgIChub3QgKChsZW4gc3RhZ2VzKChpICsgMSkpKSA+IChsZW4gc3RhZ2VzKGkpKSkgPT4KICAgICAgZXhpc3RzMSB0ZiBpbiBzZXQgQ2FuZF9uYW1lcyAmICh0ZiBpbiBzZXQgeyhzYy5uYW1lKSB8IFtzYyBpbiBzZXQgKGVsZW1zIHN0YWdlcygoaSArIDEpKSldICYgKChta19TY29yZSgoc2MubmFtZSksIHF1b3RhKSBpbiBzZXQgKGVsZW1zIHN0YWdlcyhpKSkpIGFuZCAoKHNjLmNvdW50KSA+IHF1b3RhKSl9KSkpKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQxMDo1MiBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LCB0cmFuc2ZlcnJlZCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgaTpuYXQxICYKICAgIChub3QgKChsZW4gc3RhZ2VzKChpICsgMSkpKSA+IChsZW4gc3RhZ2VzKGkpKSkgPT4KICAgICAgKGZvcmFsbCB0ZiBpbiBzZXQgQ2FuZF9uYW1lcyAmCiAgICAgICAgKGkgKyAxKSBpbiBzZXQgaW5kcyBzdGFnZXMpKSkpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQxMTo2OCBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LCB0cmFuc2ZlcnJlZCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChmb3JhbGwgaTpuYXQxICYKICAgIChub3QgKChsZW4gc3RhZ2VzKChpICsgMSkpKSA+IChsZW4gc3RhZ2VzKGkpKSkgPT4KICAgICAgKGZvcmFsbCB0ZiBpbiBzZXQgQ2FuZF9uYW1lcyAmCiAgICAgICAgKGZvcmFsbCBzYyBpbiBzZXQgKGVsZW1zIHN0YWdlcygoaSArIDEpKSkgJgogICAgICAgICAgaSBpbiBzZXQgaW5kcyBzdGFnZXMpKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQxMzozMyBtYWtlX3Jlc3VsdF9zaGVldCwgcmVzdWx0LChmb3JhbGwgc3RhZ2VzOnNlcSBvZiAoU3RhZ2UpLCBxdW90YTpyZWFsLCByZWNvcmQ6c2VxIG9mIChSZWNvcmRfZW50cnkpLCBlbGVjdGVkOnNldCBvZiAoQ2FuZGlkYXRlX25hbWVzKSAmCiAgKGZvcmFsbCBpOm5hdDEgJgogICAgKG5vdCAoKGxlbiBzdGFnZXMoKGkgKyAxKSkpID4gKGxlbiBzdGFnZXMoaSkpKSA9PgogICAgICAobGV0IHRyYW5zZmVycmVkOig8QWRhbT4gfCA8QmlsbD4gfCA8Q2hhcmxpZT4gfCA8RG9uYWxkPiB8IDxFZHdhcmQ+IHwgPEZyYW5rPiB8IDxHZW9yZ2U+IHwgPEhhcnJ5PiB8IDxJYW4+IHwgPEpvaG4+KSA9IChpb3RhIHRmIGluIHNldCBDYW5kX25hbWVzICYgKHRmIGluIHNldCB7KHNjLm5hbWUpIHwgW3NjIGluIHNldCAoZWxlbXMgc3RhZ2VzKChpICsgMSkpKV0gJiAoKG1rX1Njb3JlKChzYy5uYW1lKSwgcXVvdGEpIGluIHNldCAoZWxlbXMgc3RhZ2VzKGkpKSkgYW5kICgoc2MuY291bnQpID4gcXVvdGEpKX0pKSBpbgogICAgICAgIChpICsgMSkgaW4gc2V0IGluZHMgcmVjb3JkKSkpKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQxNDozOCBtYWtlX3Jlc3VsdF9zaGVldCwoZm9yYWxsIHN0YWdlczpzZXEgb2YgKFN0YWdlKSwgcXVvdGE6cmVhbCwgcmVjb3JkOnNlcSBvZiAoUmVjb3JkX2VudHJ5KSwgZWxlY3RlZDpzZXQgb2YgKENhbmRpZGF0ZV9uYW1lcykgJgogIChsZXQgcmVzdWx0OiAobmF0MSAtPiBSZXN1bHQpCiAgCXJlc3VsdChpKSA9PQogIChpZiAoKGxlbiBzdGFnZXMoKGkgKyAxKSkpID4gKGxlbiBzdGFnZXMoaSkpKQogIHRoZW4gbGV0IGV4Y2x1ZGVkOig8QWRhbT4gfCA8QmlsbD4gfCA8Q2hhcmxpZT4gfCA8RG9uYWxkPiB8IDxFZHdhcmQ+IHwgPEZyYW5rPiB8IDxHZW9yZ2U+IHwgPEhhcnJ5PiB8IDxJYW4+IHwgPEpvaG4+KSA9IChpb3RhIGV4IGluIHNldCBDYW5kX25hbWVzICYgKGV4IGluIHNldCB7KHNjLm5hbWUpIHwgW3NjIGluIHNldCAoZWxlbXMgc3RhZ2VzKChpICsgMSkpKV0gJiAoZm9yYWxsIG9zYyBpbiBzZXQgKGVsZW1zIHN0YWdlcyhpKSkgJiAoKG9zYy5uYW1lKSA8PiAoc2MubmFtZSkpKX0pKSBpbiBta19SZXN1bHQoKHJlY29yZCgoaSArIDEpKS5zY29yZXMpLCBuaWwsIGV4Y2x1ZGVkKQogIGVsc2UgbGV0IHRyYW5zZmVycmVkOig8QWRhbT4gfCA8QmlsbD4gfCA8Q2hhcmxpZT4gfCA8RG9uYWxkPiB8IDxFZHdhcmQ+IHwgPEZyYW5rPiB8IDxHZW9yZ2U+IHwgPEhhcnJ5PiB8IDxJYW4+IHwgPEpvaG4+KSA9IChpb3RhIHRmIGluIHNldCBDYW5kX25hbWVzICYgKHRmIGluIHNldCB7KHNjLm5hbWUpIHwgW3NjIGluIHNldCAoZWxlbXMgc3RhZ2VzKChpICsgMSkpKV0gJiAoKG1rX1Njb3JlKChzYy5uYW1lKSwgcXVvdGEpIGluIHNldCAoZWxlbXMgc3RhZ2VzKGkpKSkgYW5kICgoc2MuY291bnQpID4gcXVvdGEpKX0pKSBpbiBta19SZXN1bHQoKHJlY29yZCgoaSArIDEpKS5zY29yZXMpLCB0cmFuc2ZlcnJlZCwgbmlsKSkgaW4KICAgIChmb3JhbGwgaiBpbiBzZXQgezEsIC4uLiAsKChsZW4gcmVjb3JkKSAtIDEpfSAmCiAgICAgICgobGVuIHJlY29yZCkgLSBqKSA+IDApKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQyMDoxMiBzcF9zZXRfc2VxLChmb3JhbGwgczpzZXQgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IChzID0ge30pID0+CiAgICBleGlzdHMgZSBpbiBzZXQgcykpCixsZXQgYmUgc3QgZXhpc3RlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQyNzoyNiBzdWJfcGFyY2Vsc19zb3J0LChmb3JhbGwgc3BzOnNlcSBvZiAoU3ViX3BhcmNlbCkgJgogIChub3QgW10gPSBzcHMgPT4KICAgIChub3QgZXhpc3RzIFtlXTpzZXEgb2YgKFN1Yl9wYXJjZWwpICYgW2VdID0gc3BzID0+CiAgICAgIGV4aXN0cyBzcHMxIF4gc3BzMiBpbiBzZXQge3Nwc30gJiAoKGFicyAoKGxlbiBzcHMxKSAtIChsZW4gc3BzMikpKSA8IDIpKSkpCixsZXQgYmUgc3QgZXhpc3RlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQzODo0OCBzdWJfcGFyY2Vsc19tZXJnZSwoZm9yYWxsIHNwczE6c2VxIG9mIChTdWJfcGFyY2VsKSwgc3BzMjpzZXEgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IGV4aXN0cyBta18oW10sIHNwcyk6KHNlcSBvZiAoU3ViX3BhcmNlbCkgKiBzZXEgb2YgKFN1Yl9wYXJjZWwpKSAmIG1rXyhbXSwgc3BzKSA9IG1rXyhzcHMxLCBzcHMyKSA9PgogICAgKG5vdCBleGlzdHMgbWtfKHNwcywgW10pOihzZXEgb2YgKFN1Yl9wYXJjZWwpICogc2VxIG9mIChTdWJfcGFyY2VsKSkgJiBta18oc3BzLCBbXSkgPSBta18oc3BzMSwgc3BzMikgPT4KICAgICAgc3BzMSA8PiBbXSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQzODo3MSBzdWJfcGFyY2Vsc19tZXJnZSwoZm9yYWxsIHNwczE6c2VxIG9mIChTdWJfcGFyY2VsKSwgc3BzMjpzZXEgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IGV4aXN0cyBta18oW10sIHNwcyk6KHNlcSBvZiAoU3ViX3BhcmNlbCkgKiBzZXEgb2YgKFN1Yl9wYXJjZWwpKSAmIG1rXyhbXSwgc3BzKSA9IG1rXyhzcHMxLCBzcHMyKSA9PgogICAgKG5vdCBleGlzdHMgbWtfKHNwcywgW10pOihzZXEgb2YgKFN1Yl9wYXJjZWwpICogc2VxIG9mIChTdWJfcGFyY2VsKSkgJiBta18oc3BzLCBbXSkgPSBta18oc3BzMSwgc3BzMikgPT4KICAgICAgc3BzMiA8PiBbXSkpKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQzOTozOSBzdWJfcGFyY2Vsc19tZXJnZSwoZm9yYWxsIHNwczE6c2VxIG9mIChTdWJfcGFyY2VsKSwgc3BzMjpzZXEgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IGV4aXN0cyBta18oW10sIHNwcyk6KHNlcSBvZiAoU3ViX3BhcmNlbCkgKiBzZXEgb2YgKFN1Yl9wYXJjZWwpKSAmIG1rXyhbXSwgc3BzKSA9IG1rXyhzcHMxLCBzcHMyKSA9PgogICAgKG5vdCBleGlzdHMgbWtfKHNwcywgW10pOihzZXEgb2YgKFN1Yl9wYXJjZWwpICogc2VxIG9mIChTdWJfcGFyY2VsKSkgJiBta18oc3BzLCBbXSkgPSBta18oc3BzMSwgc3BzMikgPT4KICAgICAgKCh0b3RhbF92YWx1ZSgoaGQgc3BzMSkpID49IHRvdGFsX3ZhbHVlKChoZCBzcHMyKSkpID0+CiAgICAgICAgc3BzMSA8PiBbXSkpKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQzOTo2OCBzdWJfcGFyY2Vsc19tZXJnZSwoZm9yYWxsIHNwczE6c2VxIG9mIChTdWJfcGFyY2VsKSwgc3BzMjpzZXEgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IGV4aXN0cyBta18oW10sIHNwcyk6KHNlcSBvZiAoU3ViX3BhcmNlbCkgKiBzZXEgb2YgKFN1Yl9wYXJjZWwpKSAmIG1rXyhbXSwgc3BzKSA9IG1rXyhzcHMxLCBzcHMyKSA9PgogICAgKG5vdCBleGlzdHMgbWtfKHNwcywgW10pOihzZXEgb2YgKFN1Yl9wYXJjZWwpICogc2VxIG9mIChTdWJfcGFyY2VsKSkgJiBta18oc3BzLCBbXSkgPSBta18oc3BzMSwgc3BzMikgPT4KICAgICAgKCh0b3RhbF92YWx1ZSgoaGQgc3BzMSkpID49IHRvdGFsX3ZhbHVlKChoZCBzcHMyKSkpID0+CiAgICAgICAgc3BzMSA8PiBbXSkpKSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ0MDozOSBzdWJfcGFyY2Vsc19tZXJnZSwoZm9yYWxsIHNwczE6c2VxIG9mIChTdWJfcGFyY2VsKSwgc3BzMjpzZXEgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IGV4aXN0cyBta18oW10sIHNwcyk6KHNlcSBvZiAoU3ViX3BhcmNlbCkgKiBzZXEgb2YgKFN1Yl9wYXJjZWwpKSAmIG1rXyhbXSwgc3BzKSA9IG1rXyhzcHMxLCBzcHMyKSA9PgogICAgKG5vdCBleGlzdHMgbWtfKHNwcywgW10pOihzZXEgb2YgKFN1Yl9wYXJjZWwpICogc2VxIG9mIChTdWJfcGFyY2VsKSkgJiBta18oc3BzLCBbXSkgPSBta18oc3BzMSwgc3BzMikgPT4KICAgICAgKG5vdCAodG90YWxfdmFsdWUoKGhkIHNwczEpKSA+PSB0b3RhbF92YWx1ZSgoaGQgc3BzMikpKSA9PgogICAgICAgIHNwczIgPD4gW10pKSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ0MDo3NCBzdWJfcGFyY2Vsc19tZXJnZSwoZm9yYWxsIHNwczE6c2VxIG9mIChTdWJfcGFyY2VsKSwgc3BzMjpzZXEgb2YgKFN1Yl9wYXJjZWwpICYKICAobm90IGV4aXN0cyBta18oW10sIHNwcyk6KHNlcSBvZiAoU3ViX3BhcmNlbCkgKiBzZXEgb2YgKFN1Yl9wYXJjZWwpKSAmIG1rXyhbXSwgc3BzKSA9IG1rXyhzcHMxLCBzcHMyKSA9PgogICAgKG5vdCBleGlzdHMgbWtfKHNwcywgW10pOihzZXEgb2YgKFN1Yl9wYXJjZWwpICogc2VxIG9mIChTdWJfcGFyY2VsKSkgJiBta18oc3BzLCBbXSkgPSBta18oc3BzMSwgc3BzMikgPT4KICAgICAgKG5vdCAodG90YWxfdmFsdWUoKGhkIHNwczEpKSA+PSB0b3RhbF92YWx1ZSgoaGQgc3BzMikpKSA9PgogICAgICAgIHNwczIgPD4gW10pKSkpCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ0OTo1MyBDSE9PU0VfU1VSUExVU19UT19UUkFOU0ZFUiwgbGVhZGVycyxzdGFnZXMgPD4gW10KLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ1MDo0NiBDSE9PU0VfU1VSUExVU19UT19UUkFOU0ZFUiwgbGVhZGVycywoZm9yYWxsIHNjb3JlIGluIHNldCAoZWxlbXMgKGhkIHN0YWdlcykpICYKICBzdGFnZXMgPD4gW10pCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ1MDo0MyBDSE9PU0VfU1VSUExVU19UT19UUkFOU0ZFUiwgbGVhZGVycywoZm9yYWxsIHNjb3JlIGluIHNldCAoZWxlbXMgKGhkIHN0YWdlcykpICYKICAoaGQgc3RhZ2VzKSA8PiBbXSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ1NToyNSBDSE9PU0VfU1VSUExVU19UT19UUkFOU0ZFUixleGlzdHMxIG5hbWUgaW4gc2V0IGxlYWRlcnMgJiBncmVhdGVzdF92YWx1ZV9hdF9lYXJsaWVzdF9zdGFnZShuYW1lLCBzdGFnZXMpCix1bmlxdWUgZXhpc3RlbmNlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ2Mzo1MSBDSE9PU0VfQ0FORElEQVRFX1RPX0VYQ0xVREUsIGxvd2VzdCxzdGFnZXMgPD4gW10KLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ2NDo0MCBDSE9PU0VfQ0FORElEQVRFX1RPX0VYQ0xVREUsIGxvd2VzdCwoZm9yYWxsIHNjb3JlIGluIHNldCAoZWxlbXMgKGhkIHN0YWdlcykpICYKICBwcmVfc3RhZ2VfYmsoKGhkIHN0YWdlcykpKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ2NDo1MiBDSE9PU0VfQ0FORElEQVRFX1RPX0VYQ0xVREUsIGxvd2VzdCwoZm9yYWxsIHNjb3JlIGluIHNldCAoZWxlbXMgKGhkIHN0YWdlcykpICYKICBzdGFnZXMgPD4gW10pCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ2ODo0NiBDSE9PU0VfQ0FORElEQVRFX1RPX0VYQ0xVREUsKGZvcmFsbCBuIGluIHNldCBsb3dlc3QgJgogIGlzXyhzdGFnZXMsIHNlcTEgb2YgKFN0YWdlKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ2OToyNSBDSE9PU0VfQ0FORElEQVRFX1RPX0VYQ0xVREUsZXhpc3RzMSBuYW1lIGluIHNldCBsb3dlc3QgJiB0cmFpbGluZ19jYW5kaWRhdGUobmFtZSwgc3RhZ2VzKQosdW5pcXVlIGV4aXN0ZW5jZSBiaW5kaW5nLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ3MDo0NiBDSE9PU0VfQ0FORElEQVRFX1RPX0VYQ0xVREUsKGZvcmFsbCBuYW1lIGluIHNldCBsb3dlc3QgJgogIGlzXyhzdGFnZXMsIHNlcTEgb2YgKFN0YWdlKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ3NzozMiBSQU5ET01fRUxFTUVOVCwgYyxuZXh0X2Nob2ljZSA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ3ODo0IFJBTkRPTV9FTEVNRU5ULC0tIEFmdGVyIG5leHRfY2hvaWNlIDo9ICh0bCBuZXh0X2Nob2ljZSkKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ3ODoyMiBSQU5ET01fRUxFTUVOVCxuZXh0X2Nob2ljZSA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ4NDo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgZXhjbHVkZWQgOj0ge30KbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ4NTo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgY29udGludWluZyA6PSBjdXJyX2NvbnQKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ4Njo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgbmV4dF9jaG9pY2UgOj0gcmFuZF9jaG9pY2UKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ4Nzo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgZWxlY3RlZCA6PSB7fQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ4ODo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgc3RhZ2VzIDo9IFtidWlsZF9maXJzdF9zdGFnZShjdXJyX2NvbnQpXQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ4OTo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgcXVvdGEgOj0gdHdvX2RlY2ltYWxfcGxhY2VzKChzaXplKHZvdGVzKSAvIChOdW1iZXJfb2ZfdmFjYW5jaWVzICsgMSkpKQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ4OTo0NSBQUkVQQVJFX0VMRUNUSU9OLChOdW1iZXJfb2ZfdmFjYW5jaWVzICsgMSkgPD4gMAosbm9uLXplcm8sbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ5MDo2IFBSRVBBUkVfRUxFQ1RJT04sLS0gQWZ0ZXIgcmVjb3JkIDo9IFtta19SZWNvcmRfZW50cnkoKGVsZW1zIChoZCBzdGFnZXMpKSwgMCwgMCldCmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQ5MDo0MiBQUkVQQVJFX0VMRUNUSU9OLHN0YWdlcyA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUwMDo0IEVMRUNUX0FMTF9SRU1BSU5JTkdfQ0FORElEQVRFUywtLSBBZnRlciBlbGVjdGVkIDo9IChlbGVjdGVkIHVuaW9uIGNvbnRpbnVpbmcpCmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUwMTo0IEVMRUNUX0FMTF9SRU1BSU5JTkdfQ0FORElEQVRFUywtLSBBZnRlciBjb250aW51aW5nIDo9IHt9CmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUwOTo1NSBQUk9DRVNTX1NVQl9QQVJDRUxTLCBidW5kbGUsaW52X1ZhbHVlKDAuMCkgYW5kIChpc19yZWFsKDAuMCkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUxMTozMSBQUk9DRVNTX1NVQl9QQVJDRUxTLCBuZXdfc3RhZ2Usc3RhZ2VzIDw+IFtdCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUxMjo0IFBST0NFU1NfU1VCX1BBUkNFTFMsd2hpbGUgKGkgPD4gKGxlbiBzdWJfcGFyY2VscykpIGRvIC4uLgosd2hpbGUgbG9vcCB0ZXJtaW5hdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUxMzoxMSBQUk9DRVNTX1NVQl9QQVJDRUxTLC0tIEFmdGVyIGkgOj0gKGkgKyAxKQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUxNDo3IFBST0NFU1NfU1VCX1BBUkNFTFMsLS0gQWZ0ZXIgYnVuZGxlIDo9IGNvbnN0cnVjdF9zdWJfcGFyY2Vscygoc3ViX3BhcmNlbHMoaSkudmFsdWUpLCAoc3ViX3BhcmNlbHMoaSkudm90ZXMpLCBleF9jYW5kLCBuZXdfY2FuZGlkYXRlcykKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUxNTozNyBQUk9DRVNTX1NVQl9QQVJDRUxTLGkgaW4gc2V0IGluZHMgc3ViX3BhcmNlbHMKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUxNTo1OCBQUk9DRVNTX1NVQl9QQVJDRUxTLGkgaW4gc2V0IGluZHMgc3ViX3BhcmNlbHMKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUxNzoxMSBQUk9DRVNTX1NVQl9QQVJDRUxTLC0tIEFmdGVyIG5vbl90cmFuc192YWx1ZSA6PSAobm9uX3RyYW5zX3ZhbHVlICsgKHNpemUoKChidW5kbGUubm9uX3RyYW5zZmVyYWJsZSkudm90ZXMpKSAqIChzdWJfcGFyY2VscyhpKS52YWx1ZSkpKQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUxODo5IFBST0NFU1NfU1VCX1BBUkNFTFMsaSBpbiBzZXQgaW5kcyBzdWJfcGFyY2Vscwosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUxOToxMSBQUk9DRVNTX1NVQl9QQVJDRUxTLC0tIEFmdGVyIG5ld19jYW5kaWRhdGVzIDo9IHJlZGlzdHJpYnV0ZV9wYXJjZWxzKG5ld19jYW5kaWRhdGVzLCBidW5kbGUpCmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUxOToyOCBQUk9DRVNTX1NVQl9QQVJDRUxTLHByZV9yZWRpc3RyaWJ1dGVfcGFyY2VscyhuZXdfY2FuZGlkYXRlcywgYnVuZGxlKQosZnVuY3Rpb24gYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUyMDoxMSBQUk9DRVNTX1NVQl9QQVJDRUxTLC0tIEFmdGVyIG5ld19zdGFnZSA6PSBjb25zdHJ1Y3RfbmV3X3N0YWdlKG5ld19zdGFnZSwgKGV4X2NhbmQubmFtZSksIGJ1bmRsZSkKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUyOToxMCBQUk9DRVNTX1NVQl9QQVJDRUxTLC0tIEFmdGVyIGVsZWN0ZWQgOj0gKGVsZWN0ZWQgdW5pb24gbmV3X2VsZWN0ZWQpCmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUzMDoxNyBQUk9DRVNTX1NVQl9QQVJDRUxTLC0tIEFmdGVyIG5ld19jYW5kaWRhdGVzIDo9IChuZXdfY2FuZGlkYXRlcyBcIG5ld19lbGVjdGVkKQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUzMjo5IFBST0NFU1NfU1VCX1BBUkNFTFMsLS0gQWZ0ZXIgY29udGludWluZyA6PSBuZXdfY2FuZGlkYXRlcwpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUzMzo5IFBST0NFU1NfU1VCX1BBUkNFTFMsLS0gQWZ0ZXIgZXhjbHVkZWQgOj0gKGV4Y2x1ZGVkIHVuaW9uIHtleF9jYW5kfSkKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDUzNDo5IFBST0NFU1NfU1VCX1BBUkNFTFMsLS0gQWZ0ZXIgcmVjb3JkIDo9IChbbWtfUmVjb3JkX2VudHJ5KCgoKGVsZW1zIG5ld19zdGFnZSkgdW5pb24ge3Njb3JlIHwgW3Njb3JlIGluIHNldCAoKGhkIHJlY29yZCkuc2NvcmVzKV0gJiAoKHNjb3JlLm5hbWUpIG5vdCBpbiBzZXQgeyhzYy5uYW1lKSB8IFtzYyBpbiBzZXQgKGVsZW1zIG5ld19zdGFnZSldfSl9KSB1bmlvbiB7bWtfU2NvcmUoKGV4X2NhbmQubmFtZSksIDApfSksIG5vbl90cmFuc192YWx1ZSwgMCldIF4gcmVjb3JkKQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDUzNjo1OSBQUk9DRVNTX1NVQl9QQVJDRUxTLHJlY29yZCA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU0Mjo5IFBST0NFU1NfU1VCX1BBUkNFTFMsLS0gQWZ0ZXIgc3RhZ2VzIDo9IChbW25ld19zdGFnZShpKSB8IGkgaW4gc2V0IChpbmRzIG5ld19zdGFnZSkgJiAoKG5ld19zdGFnZShpKS5uYW1lKSA8PiAoZXhfY2FuZC5uYW1lKSldXSBeIHN0YWdlcykKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU0MjoyMCBQUk9DRVNTX1NVQl9QQVJDRUxTLChmb3JhbGwgaSBpbiBzZXQgKGluZHMgbmV3X3N0YWdlKSAmICgobmV3X3N0YWdlKGkpLm5hbWUpIDw+IChleF9jYW5kLm5hbWUpKSA9PgogIGkgaW4gc2V0IGluZHMgbmV3X3N0YWdlKQosc2VxdWVuY2UgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU0MzoyNyBQUk9DRVNTX1NVQl9QQVJDRUxTLChmb3JhbGwgaSBpbiBzZXQgKGluZHMgbmV3X3N0YWdlKSAmCiAgaSBpbiBzZXQgaW5kcyBuZXdfc3RhZ2UpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU0Mzo2MiBQUk9DRVNTX1NVQl9QQVJDRUxTLGlzXygoW1tuZXdfc3RhZ2UoaSkgfCBpIGluIHNldCAoaW5kcyBuZXdfc3RhZ2UpICYgKChuZXdfc3RhZ2UoaSkubmFtZSkgPD4gKGV4X2NhbmQubmFtZSkpXV0gXiBzdGFnZXMpLCBzZXEgb2YgKFN0YWdlKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU0ODozNyBFTEVDVF9MQVNUX0NBTkRJREFURSwgZWxlY3RlZF9jYW5kaWRhdGUsZXhpc3RzMSBsZWFkZXIgaW4gc2V0IGNvbnRpbnVpbmcgJiAoKGxlYWRlci5uYW1lKSA9ICgoaGQgc3RhZ2VzKShOdW1iZXJfb2ZfdmFjYW5jaWVzKS5uYW1lKSkKLHVuaXF1ZSBleGlzdGVuY2UgYmluZGluZyxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU0OToyNSBFTEVDVF9MQVNUX0NBTkRJREFURSwgZWxlY3RlZF9jYW5kaWRhdGUsKGZvcmFsbCBsZWFkZXIgaW4gc2V0IGNvbnRpbnVpbmcgJgogIE51bWJlcl9vZl92YWNhbmNpZXMgaW4gc2V0IGluZHMgKGhkIHN0YWdlcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU0OToyOCBFTEVDVF9MQVNUX0NBTkRJREFURSwgZWxlY3RlZF9jYW5kaWRhdGUsKGZvcmFsbCBsZWFkZXIgaW4gc2V0IGNvbnRpbnVpbmcgJgogIHN0YWdlcyA8PiBbXSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU1MDo2IEVMRUNUX0xBU1RfQ0FORElEQVRFLC0tIEFmdGVyIGVsZWN0ZWQgOj0gKGVsZWN0ZWQgdW5pb24ge2VsZWN0ZWRfY2FuZGlkYXRlfSkKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU1MTo2IEVMRUNUX0xBU1RfQ0FORElEQVRFLC0tIEFmdGVyIGNvbnRpbnVpbmcgOj0gKGNvbnRpbnVpbmcgXCB7ZWxlY3RlZF9jYW5kaWRhdGV9KQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU1NzoyMCBUUkFOU0ZFUl9TVVJQTFVTLCBjYW5kaWRhdGUsZXhpc3RzMSBjIGluIHNldCBlbGVjdGVkICYgKChjLm5hbWUpID0gbmFtZSkKLHVuaXF1ZSBleGlzdGVuY2UgYmluZGluZyxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU1ODoyNSBUUkFOU0ZFUl9TVVJQTFVTLCBzdXJwbHVzLHN0YWdlcyA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU1ODoyMiBUUkFOU0ZFUl9TVVJQTFVTLCBzdXJwbHVzLChoZCBzdGFnZXMpIDw+IFtdCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU2MDo2NSBUUkFOU0ZFUl9TVVJQTFVTLCBzdWJfcGFyY2VsLChzdXJwbHVzX2Zyb21fb3JpZ2luYWxfdm90ZXMoY2FuZGlkYXRlKSA9PgogIGludl9WYWx1ZSgxLjApIGFuZCAoaXNfcmVhbCgxLjApKSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU2MToyOSBUUkFOU0ZFUl9TVVJQTFVTLCBzdWJfcGFyY2VsLChub3Qgc3VycGx1c19mcm9tX29yaWdpbmFsX3ZvdGVzKGNhbmRpZGF0ZSkgPT4KICAoY2FuZGlkYXRlLnRyYW5zZmVycmVkX3ZvdGVzKSA8PiBbXSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU2NjozNSBUUkFOU0ZFUl9TVVJQTFVTLCBuZXdfc3RhZ2UsaW52X1N0YWdlKChbbWtfU2NvcmUobmFtZSwgcXVvdGEpXSBeIFsoaGQgc3RhZ2VzKShpKSB8IGkgaW4gc2V0IChpbmRzIChoZCBzdGFnZXMpKSAmICgoKGhkIHN0YWdlcykoaSkubmFtZSkgPD4gbmFtZSldKSkgYW5kIChpc18oKFtta19TY29yZShuYW1lLCBxdW90YSldIF4gWyhoZCBzdGFnZXMpKGkpIHwgaSBpbiBzZXQgKGluZHMgKGhkIHN0YWdlcykpICYgKCgoaGQgc3RhZ2VzKShpKS5uYW1lKSA8PiBuYW1lKV0pLCBzZXEgb2YgKFNjb3JlKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU2NzoxNSBUUkFOU0ZFUl9TVVJQTFVTLCBuZXdfc3RhZ2UsKGZvcmFsbCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJiAoKChoZCBzdGFnZXMpKGkpLm5hbWUpIDw+IG5hbWUpID0+CiAgaSBpbiBzZXQgaW5kcyAoaGQgc3RhZ2VzKSkKLHNlcXVlbmNlIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU2NzoxOCBUUkFOU0ZFUl9TVVJQTFVTLCBuZXdfc3RhZ2UsKGZvcmFsbCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJiAoKChoZCBzdGFnZXMpKGkpLm5hbWUpIDw+IG5hbWUpID0+CiAgc3RhZ2VzIDw+IFtdKQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU2Nzo0OSBUUkFOU0ZFUl9TVVJQTFVTLCBuZXdfc3RhZ2Usc3RhZ2VzIDw+IFtdCixub24tZW1wdHkgc2VxdWVuY2UsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU2Nzo2MCBUUkFOU0ZFUl9TVVJQTFVTLCBuZXdfc3RhZ2UsKGZvcmFsbCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJgogIGkgaW4gc2V0IGluZHMgKGhkIHN0YWdlcykpCixzZXF1ZW5jZSBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU2ODoxNiBUUkFOU0ZFUl9TVVJQTFVTLCBuZXdfc3RhZ2UsKGZvcmFsbCBpIGluIHNldCAoaW5kcyAoaGQgc3RhZ2VzKSkgJgogIHN0YWdlcyA8PiBbXSkKLG5vbi1lbXB0eSBzZXF1ZW5jZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU3MDoxOSBUUkFOU0ZFUl9TVVJQTFVTLCBjdXJyX2NvbnQscHJlX3JlZGlzdHJpYnV0ZV9wYXJjZWxzKChjb250aW51aW5nIFwge2NhbmRpZGF0ZX0pLCBzdWJfcGFyY2VsX2J1bmRsZSkKLGZ1bmN0aW9uIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU3Mjo2IFRSQU5TRkVSX1NVUlBMVVMsLS0gQWZ0ZXIgc3RhZ2VzIDo9IChbbmV3X3N0YWdlXSBeIHN0YWdlcykKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU3Mzo2IFRSQU5TRkVSX1NVUlBMVVMsLS0gQWZ0ZXIgcmVjb3JkIDo9IChbbWtfUmVjb3JkX2VudHJ5KCgoZWxlbXMgbmV3X3N0YWdlKSB1bmlvbiB7c2NvcmUgfCBbc2NvcmUgaW4gc2V0ICgoaGQgcmVjb3JkKS5zY29yZXMpXSAmICgoc2NvcmUubmFtZSkgbm90IGluIHNldCB7KHNjLm5hbWUpIHwgW3NjIGluIHNldCAoZWxlbXMgbmV3X3N0YWdlKV19KX0pLCAoKHN1Yl9wYXJjZWxfYnVuZGxlLm5vbl90cmFuc2ZlcmFibGUpLnZhbHVlKSwgKHN1Yl9wYXJjZWxfYnVuZGxlLmxvc3Nfb2ZfdmFsdWUpKV0gXiByZWNvcmQpCmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDU3NTo0MiBUUkFOU0ZFUl9TVVJQTFVTLHJlY29yZCA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU4MDo1IFRSQU5TRkVSX1NVUlBMVVMsLS0gQWZ0ZXIgY29udGludWluZyA6PSBjdXJyX2NvbnQKbGV0IHMgPSBTdCBpbiAoKHsoY2FuZC5uYW1lKSB8IFtjYW5kIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpXX0gPSBDYW5kX25hbWVzKSBhbmQgKGRpc2pvaW50KHsocy5lbGVjdGVkKSwgKHMuZXhjbHVkZWQpLCAocy5jb250aW51aW5nKX0pIGFuZCAoZm9yYWxsIGNhbmQxIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpLCBjYW5kMiBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSAmICgoY2FuZDEgPSBjYW5kMikgPD0+ICgoY2FuZDEubmFtZSkgPSAoY2FuZDIubmFtZSkpKSkpKQosc3RhdGUgaW52YXJpYW50LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDU5MDozMSBFWENMVURFX0NBTkRJREFURSwgZXhjbHVkZWRfY2FuZGlkYXRlLGV4aXN0czEgYyBpbiBzZXQgY29udGludWluZyAmICgoYy5uYW1lKSA9IG5hbWUpCix1bmlxdWUgZXhpc3RlbmNlIGJpbmRpbmcsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDU5Njo3MCBFWENMVURFX0NBTkRJREFURSwgc29ydGVkX3N1Yl9wYXJjZWxzLGludl9WYWx1ZSgxLjApIGFuZCAoaXNfcmVhbCgxLjApKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDYyMTo2IENPTkRVQ1RfRUxFQ1RJT04sd2hpbGUgKCgoY2FyZCBlbGVjdGVkKSA8PiBOdW1iZXJfb2ZfdmFjYW5jaWVzKSBhbmQgKChjYXJkIGNvbnRpbnVpbmcpID4gMCkpIGRvIC4uLgosd2hpbGUgbG9vcCB0ZXJtaW5hdGlvbixudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDYyODo1MiBDSEFOR0VfU1RBVFVTX09GX0VMRUNURURfQ0FORElEQVRFUywgeHNfcXVvdGFfc2NzLHN0YWdlcyA8PiBbXQosbm9uLWVtcHR5IHNlcXVlbmNlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDYzMjo3IENIQU5HRV9TVEFUVVNfT0ZfRUxFQ1RFRF9DQU5ESURBVEVTLC0tIEFmdGVyIGVsZWN0ZWQgOj0gKGNhbmRpZGF0ZXNfc2F0aXNmeWluZ19xdW90YSB1bmlvbiBlbGVjdGVkKQpsZXQgcyA9IFN0IGluICgoeyhjYW5kLm5hbWUpIHwgW2NhbmQgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSldfSA9IENhbmRfbmFtZXMpIGFuZCAoZGlzam9pbnQoeyhzLmVsZWN0ZWQpLCAocy5leGNsdWRlZCksIChzLmNvbnRpbnVpbmcpfSkgYW5kIChmb3JhbGwgY2FuZDEgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSksIGNhbmQyIGluIHNldCAoKChzLmVsZWN0ZWQpIHVuaW9uIChzLmV4Y2x1ZGVkKSkgdW5pb24gKHMuY29udGludWluZykpICYgKChjYW5kMSA9IGNhbmQyKSA8PT4gKChjYW5kMS5uYW1lKSA9IChjYW5kMi5uYW1lKSkpKSkpCixzdGF0ZSBpbnZhcmlhbnQsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDYzMzo2IENIQU5HRV9TVEFUVVNfT0ZfRUxFQ1RFRF9DQU5ESURBVEVTLC0tIEFmdGVyIGNvbnRpbnVpbmcgOj0gKGNvbnRpbnVpbmcgXCBjYW5kaWRhdGVzX3NhdGlzZnlpbmdfcXVvdGEpCmxldCBzID0gU3QgaW4gKCh7KGNhbmQubmFtZSkgfCBbY2FuZCBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKV19ID0gQ2FuZF9uYW1lcykgYW5kIChkaXNqb2ludCh7KHMuZWxlY3RlZCksIChzLmV4Y2x1ZGVkKSwgKHMuY29udGludWluZyl9KSBhbmQgKGZvcmFsbCBjYW5kMSBpbiBzZXQgKCgocy5lbGVjdGVkKSB1bmlvbiAocy5leGNsdWRlZCkpIHVuaW9uIChzLmNvbnRpbnVpbmcpKSwgY2FuZDIgaW4gc2V0ICgoKHMuZWxlY3RlZCkgdW5pb24gKHMuZXhjbHVkZWQpKSB1bmlvbiAocy5jb250aW51aW5nKSkgJiAoKGNhbmQxID0gY2FuZDIpIDw9PiAoKGNhbmQxLm5hbWUpID0gKGNhbmQyLm5hbWUpKSkpKSkKLHN0YXRlIGludmFyaWFudCxudWxsLFVucHJvdmVkfA==


--stv.vdmsl

values

Number_of_vacancies = 5;
Cand_names = {<Adam>,<Bill>,<Charlie>,<Donald>,<Edward>,<Frank>,<George>,
              <Harry>,<Ian>,<John>};

rand_choice = [<Bill>,<Adam>,<John>,<Frank>];

Votes = {
{<Adam> |-> 1,<Bill> |-> 2,<Charlie> |-> 3,<Frank> |-> 4} |->100000, 
{<Bill> |-> 1,<Adam> |-> 2,<Charlie> |-> 3,<George> |-> 4} |->100000, 
{<Adam> |-> 1,<Charlie> |-> 2,<Bill> |-> 3,<Harry> |-> 4} |->100000, 
{<Bill> |-> 1,<Charlie> |-> 2,<Adam> |-> 3,<Ian> |-> 4} |->100000, 
{<Charlie> |-> 1,<Adam> |-> 2,<Bill> |-> 3,<John> |-> 4} |->100000, 
{<Charlie> |-> 1,<Bill> |-> 2,<Adam> |-> 3,<Donald> |-> 4} |->100000, 
{<Donald> |-> 1,<Adam> |-> 2} |->1000, 
{<Frank> |-> 1,<Bill> |-> 2} |->1000, 
{<George> |-> 1,<Charlie> |-> 2} |->1000, 
{<Harry> |-> 1,<Bill> |-> 2} |->1000, 
{<Ian> |-> 1,<Adam> |-> 2} |->1000, 
{<John> |-> 1,<Charlie> |-> 2} |->1000}

types

Candidate_names = <Adam>|<Bill>|<Charlie>|<Donald>|<Edward>|
                  <Frank>|<George>|<Harry>|<Ian>|<John>;
                  -- token;

Voting_paper = map Candidate_names to nat1
  inv v == exists1 name:Candidate_names & v(name) = 1;

Parcel = map Voting_paper to nat1;

Score::name: Candidate_names
       count: real;

Stage = seq of Score
  inv s == 
      forall i in set inds s, j in set inds s & 
        (i < j => s(i).count >= s(j).count
          and
         i<>j => s(i).name <> s(j).name);

Value = real
  inv v  == v >= 0;

Sub_parcel:: votes: Parcel
             value: Value;

Candidate:: name: Candidate_names
            original_votes: Parcel
            transferred_votes: seq of Sub_parcel
  inv candidate == 
      (forall ov in set dom candidate.original_votes & 
          (ov :> {1} = {candidate.name |-> 1} and
          {candidate.name} <: ov = {candidate.name |-> 1}))
        and
      (forall sub_parcel in set elems candidate.transferred_votes &
          forall tv in set dom sub_parcel.votes &
                candidate.name in set dom tv);

Sub_parcel_bundle:: sub_parcels: map Candidate_names to Sub_parcel
                    non_transferable:Sub_parcel
                    loss_of_value: real;

Record_entry:: scores: set of Score
               non_transferable_value: real
               loss_of_value: real;

Result::scores: set of Score
        surplus_transferred:[Candidate_names]
        candidate_excluded:[Candidate_names];

Result_sheet:: results: seq of Result
               elected_candidates: set of Candidate_names;

Candset = set of Candidate;
Candnset = set of Candidate_names

state St of
  elected: set of Candidate
  excluded: set of Candidate
  continuing: set of Candidate
  stages: seq of Stage
  quota: real
  record: seq of Record_entry
  next_choice : seq of Candidate_names
  inv s  ==
    {cand.name | cand in set s.elected union s.excluded union s.continuing} =
        Cand_names
    and
    disjoint({s.elected, s.excluded, s.continuing})
    and
    (forall cand1 in set s.elected union s.excluded union s.continuing,
        cand2 in set s.elected union s.excluded union s.continuing &
          (cand1 = cand2) <=> (cand1.name = cand2.name))
init s == s =
  mk_St({},{},{},[],42,[],[])
end


functions

mult_p_sum:set of (nat * Parcel) -> nat
mult_p_sum(s) ==
        if s = {} then 0 
        else let mk_(m,pa) in set s in
          (card(dom pa) * m) + mult_p_sum(s \ {mk_(m,pa)});

size: Parcel -> nat
size(p) ==
  let mults = rng p in
  let mult_p = {mk_(m, p :> {m}) | m in set mults} in
  mult_p_sum(mult_p);


disjoint: set of (set of Candidate) -> bool
disjoint(ss) == forall s1 in set ss, s2 in set ss &
                        s1<>s2 => s1 inter s2 = {};

vote_res: Parcel * set of Voting_paper -> Parcel
vote_res(votes,domain) == domain <: votes;

sort_papers: Parcel * set of Candidate_names -> Candset
sort_papers(votes, names) ==
      {mk_Candidate(name,vote_res(votes,{v | v in set dom votes & (v :>
             {1}) =  ({name |-> 1})}),[])| name in set names};


two_decimal_places: real -> real
two_decimal_places(r) ==
        let s = r*100 in
        if floor s = s then r else (floor s + 1)/100;

stage_bk: seq of Score -> Score
stage_bk(s) ==
  s(len s)
pre s <> [];

defer_transfer_of_surplus:real * Stage -> bool
defer_transfer_of_surplus(quota, stage) ==
         let lowest_value = (stage_bk(stage)).count,
             second_lowest_value = stage(len stage - 1).count in         
         sum([stage(i).count - quota | i in set inds stage &
                stage(i).count > quota]) <= second_lowest_value - lowest_value
pre len stage > 1;

sum: seq of real -> real
sum(s) ==
  if s = [] then 0 
  else hd s + sum(tl s);

sole_leader: Stage * Candidate_names * set of Candidate_names -> bool
sole_leader(stage,name,leaders) ==
  let cand = iota c in set elems stage & c.name = name in
  let leading_scores = 
      {sc | sc in set elems stage & sc.name in set leaders} \ {cand} in
  forall sc in set leading_scores & cand.count > sc.count;

greatest_value_at_earliest_stage: Candidate_names * seq of Stage -> bool
greatest_value_at_earliest_stage(name,all_stages) ==
        let leaders = {score.name | score in set elems hd all_stages &
                          score.count = (hd hd all_stages).count} in
        exists i in set inds all_stages &
          (sole_leader(all_stages(i), name,leaders)
           and
           (forall j in set {i+1,...,len all_stages}, 
                    other_leader in set leaders &
                not (sole_leader(all_stages(j),other_leader,leaders))));
 



surplus_from_original_votes: Candidate -> bool
surplus_from_original_votes(candidate) ==
        candidate.transferred_votes = [];

construct_sub_parcels: Value * Parcel * Candidate * set of Candidate
                -> Sub_parcel_bundle
construct_sub_parcels(val,parcel,discontinuing,continuing_candidates) ==
 let names = {candidate.name | candidate in set continuing_candidates} in
 let sub_parcel_map = { n |-> mk_Sub_parcel({ v |-> parcel(v) | v in set dom
                            parcel & next_preference(n,v,names)},val) 
                             | n in set names} in
 let non_empty_sub_parcel_map = { n |-> sub_parcel_map(n) | n in set
            dom sub_parcel_map & sub_parcel_map(n).votes <> {|->}} in
 mk_Sub_parcel_bundle(non_empty_sub_parcel_map,
                      mk_Sub_parcel(non_transferable_papers(parcel,
                                     discontinuing.name, names),1.0),0);


non_transferable_papers: Parcel * Candidate_names * set of Candidate_names
                -> Parcel
non_transferable_papers(parcel,disc,cont) ==
        { v | v in set dom parcel & 
                non_transferable_paper(v,disc,cont)} <: parcel;

next_preference: Candidate_names * Voting_paper * set of Candidate_names -> 
                 bool
next_preference(name,vote,continuing) ==
        if name in set dom vote 
        then exists i in set rng vote &
                (vote(name) = i
                 and
                 dom (vote :> {1,...,i-1}) inter continuing = {})
        else false;

construct_bundle_for_transfer:real * Value * Parcel * Candidate * 
        set of Candidate -> Sub_parcel_bundle
construct_bundle_for_transfer(surplus, old_value, old_votes, disc, cont_cands)
     == 
     let new_sub_parcels = construct_sub_parcels(1.00, old_votes,
                                disc, cont_cands) in
     let total_no_of_trans_votes = size(old_votes) - 
                        size(new_sub_parcels.non_transferable.votes) in
     let total_val_trans_votes = total_no_of_trans_votes * old_value in
     let transf_val = calc_transf_value(surplus,total_val_trans_votes,
                                       old_value,total_no_of_trans_votes) in
     let sub_parcels = { n |->
          mk_Sub_parcel(new_sub_parcels.sub_parcels(n).votes,
          transf_val) | n in set dom new_sub_parcels.sub_parcels},
         loss_of_value = calc_loss_of_value(surplus,
                    total_val_trans_votes,total_no_of_trans_votes, old_value),
         non_trans_val = calc_non_transf_value(surplus, 
                                        total_val_trans_votes) in
     mk_Sub_parcel_bundle(sub_parcels,
                          mk_Sub_parcel(new_sub_parcels.non_transferable.votes,
                                        non_trans_val),
                          loss_of_value);


calc_transf_value: real * Value * Value * nat -> Value
calc_transf_value(surplus,total_value,old_value, total_no) ==
        if surplus < total_value
        then (floor((100*surplus)/total_no))/100
        else old_value;

calc_loss_of_value: real * Value * nat * Value -> real
calc_loss_of_value(surplus,total_value,total_number,old_value) ==
        if surplus < total_value
        then (surplus/total_number) - 
                (floor(100*surplus*old_value/total_value))/100
        else 0;

calc_non_transf_value: real * Value -> Value
calc_non_transf_value(surplus,total_value) ==
        if surplus > total_value
        then surplus - total_value
        else 0;

redistribute_parcels: Candset * Sub_parcel_bundle -> Candset
redistribute_parcels(previous_collection,bundle) ==
          {mu(candidate, transferred_votes |-> 
                [bundle.sub_parcels(n)]^candidate.transferred_votes)|
                candidate in set previous_collection, 
                    n in set dom bundle.sub_parcels &
                  candidate.name = n}
          union
          {candidate| candidate in set previous_collection &
                        candidate.name not in set dom bundle.sub_parcels}
pre
     dom bundle.sub_parcels subset {candidate.name | 
                                  candidate in set
previous_collection};

  score_sort: Stage -> Stage
  score_sort(sta) ==
    cases sta:
      []      -> sta,
      [e]     -> sta,
      others  -> let sta1^sta2 in set {sta} be st abs (len sta1 - len sta2) < 2
                 in
                   let sta_l = score_sort(sta1),
                       sta_r = score_sort(sta2) in
                    score_merge(sta_l, sta_r)
    end;

  score_merge: Stage * Stage -> Stage
  score_merge(sta1,sta2) ==
    cases mk_(sta1,sta2):
      mk_([],sta),mk_(sta,[]) -> sta,
      others              -> if (hd sta1).count >= (hd sta2).count then 
                               [hd sta1] ^ score_merge(tl sta1, sta2)
                             else
                               [hd sta2] ^ score_merge(sta1, tl sta2)
    end;

set_seq: set of Score -> Stage
set_seq(s) ==
  if s = {} then []
  else let e in set s in [e]^(set_seq(s\{e}));

build_first_stage: set of Candidate -> Stage
build_first_stage(candidates) ==
  score_sort(set_seq({mk_Score(candidate.name,size(candidate.original_votes))|
                candidate in set candidates}));


construct_new_stage:Stage * Candidate_names * Sub_parcel_bundle -> Stage
construct_new_stage(old_stage,discontinuing, bundle) ==
     let cands_with_more_votes = dom bundle.sub_parcels in
     let unsorted_scores = 
         { mk_Score(name,old_count +  bundle.sub_parcels(name).value *
                           size(bundle.sub_parcels(name).votes)) |
                  mk_Score(name,old_count) in set elems old_stage &
                  name in set cands_with_more_votes}

        union
        {sc | sc in set elems old_stage &
                 sc.name not in set cands_with_more_votes } in
     score_sort(set_seq(unsorted_scores));


exists_non_deferable_surplus: (seq of Stage) * real -> bool
exists_non_deferable_surplus(stages,quota) ==
        (hd (hd stages)).count >= quota
        and
        not defer_transfer_of_surplus(quota, hd stages);

trailing_candidate: Candidate_names * seq1 of Stage -> bool
trailing_candidate(name,all_stages) ==
        let trailing_count = (stage_bk(hd all_stages)).count in
        let lowest = { score.name | score in set elems hd all_stages &
                                score.count = trailing_count} in
        exists i in set inds all_stages &
          (sole_trailer(all_stages(i),name,lowest) and
           forall j in set {i+1,...,len all_stages}, other in set lowest &
                not (sole_trailer(all_stages(j),other,lowest)));

sole_trailer: Stage * Candidate_names * set of Candidate_names -> bool
sole_trailer(stage,name,lowest) ==
	let cand = iota c in set elems stage & c.name = name in
	let lowest_scores = 
              {sc | sc in set elems stage & sc.name in set lowest} \ {cand} in
	forall sc in set lowest_scores & cand.count < sc.count;



number_of_continuing_candidates: set of Candidate_names -> nat
number_of_continuing_candidates(cands) == card cands;

number_of_remaining_vacancies: set of Candidate_names -> nat
number_of_remaining_vacancies(cands) == Number_of_vacancies - card cands;


total_value:Sub_parcel -> real
total_value(sub_parcel) ==
  size(sub_parcel.votes) * sub_parcel.value;

number_of_candidates_satisfying_quota: (set of Candidate) * (seq of Stage) * 
                                          real -> nat
number_of_candidates_satisfying_quota(continuing,stages,quota) ==
  let xs_quota_scs = { sc.name | sc in set elems hd stages & sc.count >=
             quota} in
  card { cand | cand in set continuing & cand.name in set xs_quota_scs};

non_transferable_paper: Voting_paper * Candidate_names * 
                                set of Candidate_names -> bool
non_transferable_paper(paper,discontinuing,continuing_names) ==
  dom (paper :-> {1}) inter continuing_names = {} or
  let s = (rng( paper :-> {1,...,(paper(discontinuing))})) in
  if s = {} then true 
  else let m = min(s) in
  (card dom (paper :> {m}) > 1
        or
   m - 1 not in set rng paper);

min: set of real -> real
min(s) ==
 let m in set s in
 if card s = 1 then m 
 else let sm = min (s \ {m}) in
   if m < sm then m else sm
pre s <> {};

last_vacancy_fillable: (set of Candidate) * (seq of Stage) * real -> bool
last_vacancy_fillable(continuing,stages, quota) ==
        let continuing_names = {c.name | c in set continuing} in
        let continuing_scores = [(hd stages)(i) | i in set inds hd stages &
                              (hd stages)(i).name in set continuing_names],
            surplus_scores = [(hd stages)(i) | i in set inds hd stages &
                                  (hd stages)(i).count > quota] in
        exists i in set inds continuing_scores &
          continuing_scores(i).count >
            sum([continuing_scores(j).count | 
                    j in set (inds continuing_scores \ {i})]) +
            sum([surplus_scores(j).count -quota | 
                    j in set inds surplus_scores]);



make_result_sheet: seq of Stage * real * seq of Record_entry * 
       set of Candidate_names -> Result_sheet
make_result_sheet(stages, quota, record, elected) == 
let result: nat1 -> Result
    result(i) == if len stages(i+1) > len stages(i)
                 then let excluded = iota ex in set Cand_names &
                                ex in set { sc.name | 
                                  sc in set elems stages(i+1) &
                                 (forall osc in set elems stages(i) & 
                                             osc.name <> sc.name)} in
                      mk_Result(record(i+1).scores,nil,excluded)
                 else let transferred = iota tf in set Cand_names &
                              tf in set { sc.name | 
                                   sc in set elems stages(i+1) & 
                              mk_Score(sc.name,quota) in set elems stages(i) 
                                      and sc.count > quota} in
                      mk_Result(record(i+1).scores,transferred,nil) in
  mk_Result_sheet([result(len record - j) | j in set {1,...,len record -
1}],elected);

sp_set_seq: set of Sub_parcel -> seq of Sub_parcel
sp_set_seq(s) ==
  if s = {} then []
  else let e in set s in [e]^(sp_set_seq (s\{e}));

  sub_parcels_sort: seq of Sub_parcel -> seq of Sub_parcel
  sub_parcels_sort(sps) ==
    cases sps:
      []      -> sps,
      [e]     -> sps,
      others  -> let sps1^sps2 in set {sps} be st abs (len sps1 - len sps2) < 2
                 in
                   let sps_l = sub_parcels_sort(sps1),
                       sps_r = sub_parcels_sort(sps2) in
                    sub_parcels_merge(sps_l, sps_r)
    end;

  sub_parcels_merge: seq of Sub_parcel * seq of Sub_parcel -> seq of Sub_parcel
  sub_parcels_merge(sps1,sps2) ==
    cases mk_(sps1,sps2):
      mk_([],sps),mk_(sps,[]) -> sps,
      others              -> if total_value(hd sps1)>= total_value(hd sps2) 
                             then [hd sps1] ^ sub_parcels_merge(tl sps1, sps2)
                             else [hd sps2] ^ sub_parcels_merge(sps1, tl sps2)
    end


operations

CHOOSE_SURPLUS_TO_TRANSFER:() ==> Candidate_names
CHOOSE_SURPLUS_TO_TRANSFER() ==
  (dcl leaders:set of Candidate_names := 
                {score.name | score in set elems hd stages &
                        score.count = (hd hd stages).count};
       if card leaders = 1
       then let {n} = leaders in return(n)
       else if exists n in set leaders &
                        greatest_value_at_earliest_stage(n,stages)
            then return(iota name in set leaders & 
                     greatest_value_at_earliest_stage(name,stages))
            else return RANDOM_ELEMENT(leaders))
 pre stages <> [];

CHOOSE_CANDIDATE_TO_EXCLUDE:() ==> Candidate_names
CHOOSE_CANDIDATE_TO_EXCLUDE() ==
   (dcl lowest:set of Candidate_names := 
              {score.name | score in set elems hd stages &
                        score.count = (stage_bk(hd stages)).count};
       if card lowest = 1
       then let {n} = lowest in return(n)
       else if exists n in set lowest &
                        trailing_candidate(n,stages)
            then return(iota name in set lowest & 
                     trailing_candidate(name,stages))
            else return RANDOM_ELEMENT(lowest))
pre stages <> [];


RANDOM_ELEMENT:Candnset ==> Candidate_names
RANDOM_ELEMENT(s) ==
  (dcl c:Candidate_names := hd next_choice; 
   next_choice := tl next_choice;
   return(c));

PREPARE_ELECTION: Parcel ==> ()
PREPARE_ELECTION(votes) ==
    (dcl curr_cont:Candset := sort_papers(votes, Cand_names);
     excluded := {};
     continuing := curr_cont;
     next_choice := rand_choice;
     elected := {};
     stages := [build_first_stage(curr_cont)];
     quota := two_decimal_places(size(votes)/(Number_of_vacancies + 1));
     record := [mk_Record_entry(elems hd stages,0,0)];
     let nc = number_of_candidates_satisfying_quota(curr_cont,stages,quota) in
    if ((0 < nc) and (nc <= Number_of_vacancies))
    then
      CHANGE_STATUS_OF_ELECTED_CANDIDATES()
    else skip);
                                

ELECT_ALL_REMAINING_CANDIDATES:() ==> ()
ELECT_ALL_REMAINING_CANDIDATES() ==
  (elected := elected union continuing;
   continuing := {});


PROCESS_SUB_PARCELS:Candidate * seq of Sub_parcel ==> ()
PROCESS_SUB_PARCELS(ex_cand, sub_parcels) ==
 ( dcl i: nat:=0;
   dcl non_trans_value: real:=0;
   dcl bundle: Sub_parcel_bundle:=mk_Sub_parcel_bundle({|->},
                                  mk_Sub_parcel({|->},0.0),0);
   dcl new_candidates: set of Candidate := continuing \ {ex_cand};
   dcl new_stage: Stage := hd stages;
   while i <> len sub_parcels do
        ( i:= i+1;
	  bundle:=
              construct_sub_parcels(sub_parcels(i).value,sub_parcels(i).votes,
                     ex_cand,new_candidates);
          non_trans_value:=non_trans_value + size(bundle.non_transferable.votes) *
		sub_parcels(i).value;
          new_candidates:= redistribute_parcels(new_candidates,bundle);
          new_stage:= construct_new_stage(new_stage,ex_cand.name,bundle);
          (let no_cands = number_of_candidates_satisfying_quota(new_candidates,
				[new_stage],quota) in
          (if 0 < no_cands and no_cands <= number_of_remaining_vacancies
                                             ({e.name | e in set elected})
           then let  xs_quota_scs = {sc.name | sc in set elems
                                       new_stage & sc.count >= quota} in
                let  new_elected = { cand | cand in set new_candidates &
				   cand.name in set xs_quota_scs} in
		(elected:=elected union new_elected;
                new_candidates:=new_candidates \ new_elected)
          else skip)));
        continuing:= new_candidates;
        excluded:=excluded union {ex_cand};
        record:= [mk_Record_entry( elems new_stage
                                  union
                                  {score|score in set (hd record).scores &
                                    score.name not in set 
                                    {sc.name | sc in set elems 
                                     new_stage}} union 
                                  {mk_Score(ex_cand.name,0)},
                                 non_trans_value,0)]^record;
        stages:= [[new_stage(i) | i in set inds new_stage & 
                          new_stage(i).name <> ex_cand.name]]^stages);


ELECT_LAST_CANDIDATE:() ==> ()
ELECT_LAST_CANDIDATE() ==
(dcl elected_candidate:Candidate := iota leader in set continuing &
		leader.name = ((hd stages)(Number_of_vacancies)).name;
     elected := elected union {elected_candidate};
     continuing := continuing \ {elected_candidate})
pre last_vacancy_fillable(continuing,stages,quota);

TRANSFER_SURPLUS:() ==> ()
TRANSFER_SURPLUS() ==
 (dcl name:Candidate_names := CHOOSE_SURPLUS_TO_TRANSFER();
  def  candidate = iota c in set elected & c.name = name in
  def  surplus = (hd hd stages).count - quota;
       sub_parcel = if surplus_from_original_votes(candidate)
                    then mk_Sub_parcel(candidate.original_votes,1.0)
                    else hd candidate.transferred_votes in
  def  sub_parcel_bundle = construct_bundle_for_transfer(surplus,
                                   sub_parcel.value,
                                   sub_parcel.votes,candidate,continuing) in
  def new_stage =  construct_new_stage(
            [mk_Score(name,quota)]^(
            [(hd stages)(i) | i in set inds (hd stages) & (hd
               stages)(i).name <> name]), candidate.name,
            sub_parcel_bundle) in
  def curr_cont = redistribute_parcels(continuing \ {candidate}, 
                                      sub_parcel_bundle) in
    (stages := [new_stage]^stages;
     record := [mk_Record_entry( 
                elems new_stage union
                {score| score in set (hd record).scores &
                        score.name not in set {sc.name|sc in set elems
                                          new_stage}},
                sub_parcel_bundle.non_transferable.value,
                sub_parcel_bundle.loss_of_value)]^record;
    continuing := curr_cont;
    let nc = number_of_candidates_satisfying_quota(curr_cont,stages,quota) in
    if 0 < nc and nc <= Number_of_vacancies
    then (CHANGE_STATUS_OF_ELECTED_CANDIDATES())))
pre exists_non_deferable_surplus(stages,quota);


EXCLUDE_CANDIDATE:() ==> ()
EXCLUDE_CANDIDATE() ==
    let name = CHOOSE_CANDIDATE_TO_EXCLUDE() in
    let excluded_candidate  = iota c in set continuing &
      c.name = name 
    in
    let sorted_sub_parcels = 
         sub_parcels_sort(sp_set_seq(elems excluded_candidate.transferred_votes
                    union
                    {mk_Sub_parcel(excluded_candidate.original_votes,1.0)}))
    in 
    PROCESS_SUB_PARCELS(excluded_candidate,sorted_sub_parcels);

ELECT_CANDIDATES:() ==> ()
ELECT_CANDIDATES() ==
    def nc = number_of_continuing_candidates({c.name | c in set continuing});
        nv = number_of_remaining_vacancies({e.name | e in set elected});
        nq = number_of_candidates_satisfying_quota(continuing,stages,quota) 
    in
    if nc = nv
      then ELECT_ALL_REMAINING_CANDIDATES()
    elseif (0< nq and nq <= nv)
      then CHANGE_STATUS_OF_ELECTED_CANDIDATES()
    elseif (nv = 1
           and
           last_vacancy_fillable(continuing,stages,quota))
      then ELECT_LAST_CANDIDATE()
    elseif exists_non_deferable_surplus(stages,quota)
      then TRANSFER_SURPLUS()
    else EXCLUDE_CANDIDATE();

CONDUCT_ELECTION: Parcel ==> Result_sheet
CONDUCT_ELECTION(votes) ==
    (PREPARE_ELECTION(votes);
     while (card elected <> Number_of_vacancies) and 
               (card continuing > 0) do
        ELECT_CANDIDATES();
     return make_result_sheet(stages,quota,record,{e.name | e in set elected}));

CHANGE_STATUS_OF_ELECTED_CANDIDATES:() ==> ()
CHANGE_STATUS_OF_ELECTED_CANDIDATES() ==
  let xs_quota_scs = {sc.name | sc in set elems hd stages & sc.count
                        >= quota} in
  def candidates_satisfying_quota = {candidate | candidate in set 
        continuing & candidate.name in set xs_quota_scs} in
     (elected := candidates_satisfying_quota union elected;
     continuing := continuing \ candidates_satisfying_quota)
pre number_of_candidates_satisfying_quota(continuing,stages,quota) <=
      number_of_remaining_vacancies({e.name | e in set elected})