-- TCErrors: WARNING:5008:11,25 WARNING:5008:18,11 WARNING:5008:54,19 WARNING:5008:66,28 WARNING:5000:47,3 WARNING:5000:65,1 WARNING:5000:116,1 WARNING:5000:121,3 WARNING:5000:131,3 PROOFOBLIGATION: fDE0OjI2IFBsYW50LChmb3JhbGwgbWtfUGxhbnQoc2NoZWR1bGUsIGFsYXJtcyk6UGxhbnQgJgogIChmb3JhbGwgYSBpbiBzZXQgYWxhcm1zICYKICAgIChmb3JhbGwgcGVyaSBpbiBzZXQgKGRvbSBzY2hlZHVsZSkgJgogICAgICBwZXJpIGluIHNldCBkb20gc2NoZWR1bGUpKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDQwOjEwIE51bWJlck9mRXhwZXJ0cywoZm9yYWxsIHBlcmk6UGVyaW9kLCBwbGFudDpQbGFudCAmIChwZXJpIGluIHNldCAoZG9tIChwbGFudC5zY2hlZHVsZSkpKSA9PgogIHBlcmkgaW4gc2V0IGRvbSAocGxhbnQuc2NoZWR1bGUpKQosbWFwIGFwcGx5LG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDQ1OjQ0IEV4cGVydElzT25EdXR5LChmb3JhbGwgZXg6RXhwZXJ0LCBta19QbGFudChzY2gsIC0pOlBsYW50ICYKICAoZm9yYWxsIHBlcmkgaW4gc2V0IChkb20gc2NoKSAmCiAgICBwZXJpIGluIHNldCBkb20gc2NoKSkKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDUwOjE3IEV4cGVydFRvUGFnZSwoKChwZXJpIGluIHNldCAoZG9tIChwbGFudC5zY2hlZHVsZSkpKSBhbmQgKGEgaW4gc2V0IChwbGFudC5hbGFybXMpKSkgPT4gZm9yYWxsIHI6RXhwZXJ0ICYgCiAgcGVyaSBpbiBzZXQgZG9tIChwbGFudC5zY2hlZHVsZSkpCixtYXAgYXBwbHksbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDQ3OjMgRXhwZXJ0VG9QYWdlLChmb3JhbGwgYTpBbGFybSwgcGVyaTpQZXJpb2QsIHBsYW50OlBsYW50ICYKICBwcmVfRXhwZXJ0VG9QYWdlKGEsIHBlcmksIHBsYW50KSA9PiBleGlzdHMgcjpFeHBlcnQgJiBwb3N0X0V4cGVydFRvUGFnZShhLCBwZXJpLCBwbGFudCwgcikpCixmdW5jdGlvbiBzYXRpc2ZpYWJpbGl0eSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDY3OjMwIENoYW5nZUV4cGVydCwoZm9yYWxsIG1rX1BsYW50KHBsYW4sIGFsYXJtcyk6UGxhbnQsIGV4MTpFeHBlcnQsIGV4MjpFeHBlcnQsIHBlcmk6UGVyaW9kICYKICBwZXJpIGluIHNldCBkb20gcGxhbikKLG1hcCBhcHBseSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDY3OjE3IENoYW5nZUV4cGVydCwoZm9yYWxsIG1rX1BsYW50KHBsYW4sIGFsYXJtcyk6UGxhbnQsIGV4MTpFeHBlcnQsIGV4MjpFeHBlcnQsIHBlcmk6UGVyaW9kICYKICBpbnZfU2NoZWR1bGUoKHBsYW4gKysge3BlcmkgfC0+ICgocGxhbihwZXJpKSBcIHtleDF9KSB1bmlvbiB7ZXgyfSl9KSkgYW5kIChpc18oKHBsYW4gKysge3BlcmkgfC0+ICgocGxhbihwZXJpKSBcIHtleDF9KSB1bmlvbiB7ZXgyfSl9KSwgbWFwIChQZXJpb2QpIHRvIChzZXQgb2YgKEV4cGVydCkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDY3OjMgQ2hhbmdlRXhwZXJ0LChmb3JhbGwgbWtfUGxhbnQocGxhbiwgYWxhcm1zKTpQbGFudCwgZXgxOkV4cGVydCwgZXgyOkV4cGVydCwgcGVyaTpQZXJpb2QgJgogIGludl9QbGFudChta19QbGFudCgocGxhbiArKyB7cGVyaSB8LT4gKChwbGFuKHBlcmkpIFwge2V4MX0pIHVuaW9uIHtleDJ9KX0pLCBhbGFybXMpKSBhbmQgKGludl9TY2hlZHVsZSgocGxhbiArKyB7cGVyaSB8LT4gKChwbGFuKHBlcmkpIFwge2V4MX0pIHVuaW9uIHtleDJ9KX0pKSBhbmQgKGlzXygocGxhbiArKyB7cGVyaSB8LT4gKChwbGFuKHBlcmkpIFwge2V4MX0pIHVuaW9uIHtleDJ9KX0pLCBtYXAgKFBlcmlvZCkgdG8gKHNldCBvZiAoRXhwZXJ0KSkpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDkwOjE1IGUxLGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDEsIHs8RWxlYz59KSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDkxOjE1IGUyLGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDIsIHs8TWVjaD4sIDxDaGVtPn0pKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDkyOjE1IGUzLGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDMsIHs8QmlvPiwgPENoZW0+LCA8RWxlYz59KSkKLHN1YnR5cGUsbnVsbCxVbnByb3ZlZHw= PROOFOBLIGATION: fDkzOjE1IGU0LGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDQsIHs8QmlvPn0pKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDk0OjE1IGU1LGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDUsIHs8Q2hlbT4sIDxCaW8+fSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDk1OjE1IGU2LGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDYsIHs8RWxlYz4sIDxDaGVtPiwgPEJpbz4sIDxNZWNoPn0pKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDk2OjE1IGU3LGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDcsIHs8RWxlYz4sIDxNZWNoPn0pKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA== PROOFOBLIGATION: fDk3OjE1IGU4LGludl9FeHBlcnQobWtfRXhwZXJ0KGVpZDgsIHs8TWVjaD4sIDxCaW8+fSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDEwMTo4IHMsZm9yYWxsIG0xLCBtMiBpbiBzZXQge3twMSB8LT4ge2U3LCBlNSwgZTF9fSwge3AyIHwtPiB7ZTZ9fSwge3AzIHwtPiB7ZTEsIGUzLCBlOH19LCB7cDQgfC0+IHtlNn19fSAmCiAgZm9yYWxsIGQzIGluIHNldCBkb20gbTEsIGQ0IGluIHNldCBkb20gbTIgJgogICAgZDMgPSBkNCA9PiBtMShkMykgPSBtMihkNCkKLG1hcCBzZXF1ZW5jZSBjb21wYXRpYmxlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDExMjoyOSBwbGFudDEsaW52X1NjaGVkdWxlKHMpIGFuZCAoaXNfKHMsIG1hcCAoUGVyaW9kKSB0byAoc2V0IG9mIChFeHBlcnQpKSkpCixzdWJ0eXBlLG51bGwsVW5wcm92ZWR8 PROOFOBLIGATION: fDExMjoyMCBwbGFudDEsaW52X1BsYW50KG1rX1BsYW50KHMsIHthMSwgYTIsIGEzfSkpIGFuZCAoaW52X1NjaGVkdWxlKHMpIGFuZCAoaXNfKHMsIG1hcCAoUGVyaW9kKSB0byAoc2V0IG9mIChFeHBlcnQpKSkpKQosc3VidHlwZSxudWxsLFVucHJvdmVkfA==



--alarm.vdmsl

types

  Plant :: schedule : Schedule
           alarms   : set of Alarm
  inv mk_Plant(schedule,alarms) ==
        forall a in set alarms &
	   forall peri in set dom schedule &
	     QualificationOK(schedule(peri),a.quali);
	     
  Schedule = map Period to set of Expert
inv sch ==
   forall exs in set rng sch &
          exs <> {} and
          forall ex1, ex2 in set exs &
                 ex1 <> ex2 => ex1.expertid <> ex2.expertid;

  Period = token;

  Expert :: expertid : ExpertId
            quali    : set of Qualification
  inv ex == ex.quali <> {};

  ExpertId = token;

  Qualification = <Elec> | <Mech> | <Bio> | <Chem>;
	   
  Alarm :: alarmtext : seq of char
           quali     : Qualification

functions

  NumberOfExperts: Period * Plant -> nat
  NumberOfExperts(peri,plant) ==
    card plant.schedule(peri)
  pre peri in set dom plant.schedule;

  ExpertIsOnDuty: Expert * Plant -> set of Period
  ExpertIsOnDuty(ex,mk_Plant(sch,-)) ==
    {peri| peri in set dom sch & ex in set sch(peri)};

  ExpertToPage(a:Alarm,peri:Period,plant:Plant) r: Expert
  pre peri in set dom plant.schedule and
      a in set plant.alarms
  post r in set plant.schedule(peri) and
       a.quali in set r.quali;

  QualificationOK: set of Expert * Qualification -> bool
  QualificationOK(exs,reqquali) ==
    exists ex in set exs & reqquali in set ex.quali

  


--changeexpert.vdmsl

functions

-- this function is NOT correct. Why not?
ChangeExpert: Plant * Expert * Expert * Period -> Plant
ChangeExpert(mk_Plant(plan,alarms),ex1,ex2,peri) ==
  mk_Plant(plan ++ {peri |-> plan(peri)\{ex1} union {ex2}},alarms)


--testalarm.vdmsl

values
 
  p1:Period = mk_token("Monday day");
  p2:Period = mk_token("Monday night");
  p3:Period = mk_token("Tuesday day");
  p4:Period = mk_token("Tuesday night");
  p5:Period = mk_token("Wednesday day");
  ps : set of Period = {p1,p2,p3,p4,p5};

  eid1:ExpertId = mk_token(134);
  eid2:ExpertId = mk_token(145);
  eid3:ExpertId = mk_token(154);
  eid4:ExpertId = mk_token(165);
  eid5:ExpertId = mk_token(169);
  eid6:ExpertId = mk_token(174);
  eid7:ExpertId = mk_token(181);
  eid8:ExpertId = mk_token(190);
  
  e1:Expert = mk_Expert(eid1,{<Elec>});
  e2:Expert = mk_Expert(eid2,{<Mech>,<Chem>});
  e3:Expert = mk_Expert(eid3,{<Bio>,<Chem>,<Elec>});
  e4:Expert = mk_Expert(eid4,{<Bio>});
  e5:Expert = mk_Expert(eid5,{<Chem>,<Bio>});
  e6:Expert = mk_Expert(eid6,{<Elec>,<Chem>,<Bio>,<Mech>});
  e7:Expert = mk_Expert(eid7,{<Elec>,<Mech>});
  e8:Expert = mk_Expert(eid8,{<Mech>,<Bio>});
  exs : set of Expert = {e1,e2,e3,e4,e5,e6,e7,e8};

  s: map Period to set of Expert
     = {p1 |-> {e7,e5,e1},
        p2 |-> {e6},
        p3 |-> {e1,e3,e8},
        p4 |-> {e6}};

  a1:Alarm = mk_Alarm("Power supply missing",<Elec>);
  a2:Alarm = mk_Alarm("Tank overflow",<Mech>);
  a3:Alarm = mk_Alarm("CO2 detected",<Chem>);
  a4:Alarm = mk_Alarm("Biological attack",<Bio>);
  alarms: set of Alarm = {a1,a2,a3,a4};
  
  plant1 : Plant = mk_Plant(s,{a1,a2,a3})
  
operations

Run: Expert ==> set of Period
Run(e) == return ExpertIsOnDuty(e, plant1);

traces 

  Test1: let a in set alarms
         in
           let p in set ps 
           in
             (NumberOfExperts(p,plant1);
              pre_ExpertToPage(a,p,plant1);
              let ex in set exs
              in
                post_ExpertToPage(a,p,plant1,ex))
               
  Test2: let ex in set exs
         in
           ExpertIsOnDuty(ex,plant1)
 