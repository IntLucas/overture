package org.overture.codegen.rt2rmi;

import java.util.LinkedList;
import java.util.List;

import org.overture.cgrmi.extast.declarations.ARemoteContractImplDeclCG;
import org.overture.codegen.cgast.declarations.ADefaultClassDeclCG;
import org.overture.codegen.cgast.declarations.AMethodDeclCG;
import org.overture.codegen.ir.IRInfo;
import org.overture.codegen.vdm2java.IJavaConstants;

/*
 * This sets up the remote contract implementation
 * with the relevant parameters and methods described in
 * the main report.
 * 
 * Sets up the ARemoteContractImplDeclCG node
 */

public class RemoteImplGenerator
{

	private List<ADefaultClassDeclCG> irClasses;
	private IRInfo info;
	
	public RemoteImplGenerator(List<ADefaultClassDeclCG> irClasses, IRInfo info)
	{
		super();
		this.irClasses = irClasses;
		this.info = info;
	}

	public List<ARemoteContractImplDeclCG> run()
	{
		for(ADefaultClassDeclCG classCg : irClasses)
		{
			if (classCg.getSuperNames().size() > 1)
			{
				info.addTransformationWarning(classCg, RemoteContractGenerator.MULTIPLE_INHERITANCE_WARNING);
				return new LinkedList<>();
			}
			
		}
		
		List<ARemoteContractImplDeclCG> contractImpls = new LinkedList<ARemoteContractImplDeclCG>();

		for (ADefaultClassDeclCG classCg : irClasses)
		{
			List<AMethodDeclCG> publicMethods = new LinkedList<AMethodDeclCG>();
			ARemoteContractImplDeclCG contractImpl = new ARemoteContractImplDeclCG();
			contractImpl.setName(classCg.getName());
			contractImpl.setFields(classCg.getFields());
			if(!classCg.getSuperNames().isEmpty())
			{
				contractImpl.setSuperName(classCg.getSuperNames().get(0).getName());
			}
			contractImpl.setAbstract(classCg.getAbstract());
			// Add type declarations
			contractImpl.setTypeDecls(classCg.getTypeDecls());

			if (classCg.getSuperNames().isEmpty())
				contractImpl.setIsUniCast(true);
			else
				contractImpl.setIsUniCast(false);
			for (AMethodDeclCG method : classCg.getMethods())
			{

				// The autogenerated method "toString" is skipped
				if (method.getName().equals(IJavaConstants.TO_STRING))
				{
				} else if (method.getAccess().equals(IJavaConstants.PUBLIC))
				{
					publicMethods.add(method);
				} else
				{
					publicMethods.add(method);
				}
			}

			contractImpl.setMethods(publicMethods);

			contractImpls.add(contractImpl);
		}

		return contractImpls;
	}

}
