import utils.*;


public class A {
    private static final R2 a = new R2(new R1(2L), 3L);
    private static final R2 b = a.clone();
    private static final R1 c = a.r1.clone();
    private static final Number d = a.r1.x;

    public Number op1() {
        R1 r = new R1(2L);
        r.x = 3L;

        return r.x;
    }

    public Number op2() {
        R1 a = new R1(5L);
        R1 b = a.clone();

        return b.x;
    }

    public Number op3() {
        R2 a = new R2(new R1(2L), 3L);
        R1 b = a.r1.clone();
        a.x = 1L;
        a.r1.x = 2L;

        return a.r1.x;
    }

    public R2 op4() {
        R2 a = new R2(new R1(2L), 3L);

        return a.clone();
    }

    public R1 op5() {
        R2 a = new R2(new R1(2L), 3L);

        return a.r1.clone();
    }

    public static class R1 implements Record {
        public Number x;

        public R1(Number _x) {
            x = _x;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof R1)) {
                return false;
            }

            R1 other = ((R1) obj);

            return x == other.x;
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public R1 clone() {
            return new R1(x);
        }

        public String toString() {
            return Utils.recordToString(this, x);
        }
    }

    public static class R2 implements Record {
        public R1 r1;
        public Number x;

        public R2(R1 _r1, Number _x) {
            r1 = (_r1 != null) ? _r1.clone() : null;
            x = _x;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof R2)) {
                return false;
            }

            R2 other = ((R2) obj);

            return (r1.equals(other.r1)) && (x == other.x);
        }

        public int hashCode() {
            return Utils.hashCode(r1, x);
        }

        public R2 clone() {
            return new R2(r1, x);
        }

        public String toString() {
            return Utils.recordToString(this, r1, x);
        }
    }
}
##########