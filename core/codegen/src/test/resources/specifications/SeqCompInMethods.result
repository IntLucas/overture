import org.overture.codegen.javalib.*;

import java.util.*;


public class A {
    private static final VDMSeq s = SeqUtil.seq(1L, 2L, 3L);

    public A() {
    }

    public static boolean pick() {
        return true;
    }

    public static VDMSeq Op() {
        VDMSet temp_6 = SeqUtil.elems(SeqUtil.seq(1L, 2L, 3L));
        Iterator temp_7 = temp_6.iterator();
        VDMSeq temp_1 = SeqUtil.seq();

        while (temp_7.hasNext()) {
            Number x = ((Number) temp_7.next());

            if (pick()) {
                temp_1.add(x.longValue() * 2L);
            }
        }

        return temp_1;
    }

    public static void Test1() {
        VDMSeq x = Op();
        Iterator temp_16 = x.iterator();

        while (temp_16.hasNext()) {
            Number e = (Number) temp_16.next();
            IO.printf("%s ", SeqUtil.seq(e));
        }
    }

    public static void Test2() {
        Iterator temp_17 = Op().iterator();

        while (temp_17.hasNext()) {
            Number e = (Number) temp_17.next();
            IO.printf("%s ", SeqUtil.seq(e));
        }
    }

    public static void Test3() {
        VDMSet temp_8 = SeqUtil.elems(SeqUtil.seq(1L, 2L, 3L));
        Iterator temp_9 = temp_8.iterator();
        VDMSeq temp_2 = SeqUtil.seq();

        while (temp_9.hasNext()) {
            Number x = ((Number) temp_9.next());

            if (x.longValue() < 3L) {
                temp_2.add(x.longValue() * 2L);
            }
        }

        Iterator temp_18 = temp_2.iterator();

        while (temp_18.hasNext()) {
            Number e = (Number) temp_18.next();
            IO.printf("%s ", SeqUtil.seq(e));
        }
    }

    public static void Test4() {
        VDMSet temp_10 = SeqUtil.elems(SeqUtil.seq(1L, 2L, 3L));
        Iterator temp_11 = temp_10.iterator();
        VDMSeq temp_3 = SeqUtil.seq();

        while (temp_11.hasNext()) {
            Number x = ((Number) temp_11.next());

            if ((x.longValue() -
                    (2L * Math.round(Math.floor(x.longValue() / 2L)))) == 0L) {
                temp_3.add(x);
            }
        }

        VDMSeq a = temp_3;
        Iterator temp_19 = a.iterator();

        while (temp_19.hasNext()) {
            Number e = (Number) temp_19.next();
            IO.printf("%s ", SeqUtil.seq(e));
        }
    }

    public static void Test5() {
        VDMSet temp_12 = SeqUtil.elems(A.s);
        Iterator temp_13 = temp_12.iterator();
        VDMSeq temp_4 = SeqUtil.seq();

        while (temp_13.hasNext()) {
            Number x = ((Number) temp_13.next());

            if (pick()) {
                temp_4.add(x);
            }
        }

        VDMSeq a = temp_4;
        Iterator temp_20 = a.iterator();

        while (temp_20.hasNext()) {
            Number e = (Number) temp_20.next();
            IO.printf("%s ", SeqUtil.seq(e));
        }
    }

    public static void Test6() {
        VDMSet temp_14 = SeqUtil.elems(SeqUtil.seq(1L, 2L, 3L));
        Iterator temp_15 = temp_14.iterator();
        VDMSeq temp_5 = SeqUtil.seq();

        while (temp_15.hasNext()) {
            Number x = ((Number) temp_15.next());
            temp_5.add(x);
        }

        VDMSeq a = temp_5;
        Iterator temp_21 = a.iterator();

        while (temp_21.hasNext()) {
            Number e = (Number) temp_21.next();
            IO.printf("%s ", SeqUtil.seq(e));
        }
    }
}
##########