import org.overture.codegen.runtime.*;

import java.util.*;


public class Functions {
    public Functions() {
    }

    public static Number f1() {
        if (Utils.equals(1L, 1L)) {
            return 1L;
        } else {
            return 2L;
        }
    }

    public static Number f2() {
        if (Utils.equals(1L, 1L)) {
            if (Utils.equals(2L, 2L)) {
                return 3L;
            } else {
                if (Utils.equals(3L, 3L)) {
                    return 4L;
                } else {
                    return 5L;
                }
            }
        } else {
            return 6L;
        }
    }

    public static Number f3() {
        return 5L;
    }

    public String toString() {
        return "Functions{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
