import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public String toString() {
        return "A{}";
    }

    public static class RecA implements Record {
        public Number i;
        public Character c;
        public Number r;
        public Number q;
        public Number n;
        public Number n1;

        public RecA(final Number _i, final Character _c, final Number _r,
            final Number _q, final Number _n, final Number _n1) {
            i = _i;
            c = _c;
            r = _r;
            q = _q;
            n = _n;
            n1 = _n1;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof RecA)) {
                return false;
            }

            RecA other = ((RecA) obj);

            return (Utils.equals(i.longValue(), other.i.longValue())) &&
            (Utils.equals(c, other.c)) &&
            (Utils.equals(r.doubleValue(), other.r.doubleValue())) &&
            (Utils.equals(q.doubleValue(), other.q.doubleValue())) &&
            (Utils.equals(n.longValue(), other.n.longValue())) &&
            (Utils.equals(n1.longValue(), other.n1.longValue()));
        }

        public int hashCode() {
            return Utils.hashCode(i, c, r, q, n, n1);
        }

        public RecA clone() {
            return new RecA(i, c, r, q, n, n1);
        }

        public String toString() {
            return Utils.recordToString(this, i, c, r, q, n, n1);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
