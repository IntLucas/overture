import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public static final Boolean a = Utils.equals(new R(1L), new R(2L));
    public static final Boolean b = !(Utils.equals(new R(1L), new R(2L)));

    public A() {
    }

    public String toString() {
        return "A{" + "a = " + Utils.toString(a) + ", b = " +
        Utils.toString(b) + "}";
    }

    public static class R implements Record {
        public Number x;

        public R(final Number _x) {
            x = _x;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R)) {
                return false;
            }

            R other = ((R) obj);

            return Utils.equals(x.longValue(), other.x.longValue());
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public R clone() {
            return new R(x);
        }

        public String toString() {
            return Utils.recordToString(this, x);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
