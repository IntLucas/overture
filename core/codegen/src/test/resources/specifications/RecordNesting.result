import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    private static final R3 x = new R3(1L, new R2(new R1(2L)));
    private static final R3 y = Utils.clone(x);

    public A() {
    }

    public String toString() {
        return "A{" + "x = " + Utils.toString(x) + ", y = " +
        Utils.toString(y) + "}";
    }

    public static class R1 implements Record {
        public Number x;

        public R1(final Number _x) {
            x = _x;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R1)) {
                return false;
            }

            R1 other = ((R1) obj);

            return Utils.equals(x.longValue(), other.x.longValue());
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public R1 clone() {
            return new R1(x);
        }

        public String toString() {
            return Utils.recordToString(this, x);
        }
    }

    public static class R2 implements Record {
        public R1 r;

        public R2(final R1 _r) {
            r = (_r != null) ? Utils.clone(_r) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R2)) {
                return false;
            }

            R2 other = ((R2) obj);

            return Utils.equals(r, other.r);
        }

        public int hashCode() {
            return Utils.hashCode(r);
        }

        public R2 clone() {
            return new R2(r);
        }

        public String toString() {
            return Utils.recordToString(this, r);
        }
    }

    public static class R3 implements Record {
        public Number x;
        public R2 r;

        public R3(final Number _x, final R2 _r) {
            x = _x;
            r = (_r != null) ? Utils.clone(_r) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof R3)) {
                return false;
            }

            R3 other = ((R3) obj);

            return (Utils.equals(x.longValue(), other.x.longValue())) &&
            (Utils.equals(r, other.r));
        }

        public int hashCode() {
            return Utils.hashCode(x, r);
        }

        public R3 clone() {
            return new R3(x, r);
        }

        public String toString() {
            return Utils.recordToString(this, x, r);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
