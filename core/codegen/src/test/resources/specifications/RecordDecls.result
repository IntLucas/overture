import utils.*;


public class A {
    private static class Vector2D implements Record {
        public long x;
        public long y;

        public Vector2D(long _x, long _y) {
            x = _x;
            y = _y;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof Vector2D)) {
                return false;
            }

            Vector2D other = ((Vector2D) obj);

            return (x == other.x) && (y == other.y);
        }

        public int hashCode() {
            return Utils.hashCode(x, y);
        }

        public Vector2D clone() {
            return new Vector2D(x, y);
        }

        public String toString() {
            return Utils.recordToString(this, x, y);
        }
    }

    public static class Real implements Record {
        public double r;

        public Real(double _r) {
            r = _r;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof Real)) {
                return false;
            }

            Real other = ((Real) obj);

            return r == other.r;
        }

        public int hashCode() {
            return Utils.hashCode(r);
        }

        public Real clone() {
            return new Real(r);
        }

        public String toString() {
            return Utils.recordToString(this, r);
        }
    }
}