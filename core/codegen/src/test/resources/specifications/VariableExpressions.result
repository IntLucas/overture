import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    private Number n = 2L;

    public A() {
    }

    public Number getN() {
        return n;
    }

    public Number o1() {
        return f().longValue() + g(3L).longValue() + h(1L, 2L).longValue() +
        op2(3L).longValue() + op2(3L).longValue();
    }

    public static Number op2(final Number x) {
        return 2L + x.longValue();
    }

    public static Number f() {
        return 2L;
    }

    public static Number g(final Number x) {
        return x;
    }

    public static Number h(final Number x, final Number y) {
        return x.longValue() + y.longValue();
    }

    public String toString() {
        return "A{" + "n := " + Utils.toString(n) + "}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
