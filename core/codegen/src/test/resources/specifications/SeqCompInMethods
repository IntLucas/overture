class A

values 

s = [1,2,3];

operations 

public static pick : () ==> bool 
pick () == return true;

public static Op : () ==> seq of nat 
Op () == return [ x * 2 | x in set elems [1,2,3] & pick() ];

public static Test1 : () ==> ()
Test1 () ==
let x = Op()
in
	for e in x do IO`printf("%s ",[e]);

public static Test2 : () ==> ()
Test2 () ==
	for e in Op() do IO`printf("%s ",[e]);
	
public static Test3 : () ==> ()
Test3 () ==
	for e in [ x * 2 | x in set elems [1,2,3] & x < 3 ] do IO`printf("%s ",[e]);

public static Test4 : () ==> ()
Test4 () ==
let a = [ x | x in set elems [1,2,3] & x mod 2 = 0 ]
in
	for e in a do IO`printf("%s ",[e]);

public static Test5 : () ==> ()
Test5 () ==
(dcl a : seq of nat := [ x | x in set elems s & pick() ];

	for e in a do IO`printf("%s ",[e]);
);

public static Test6 : () ==> ()
Test6 () ==
let a = [ x | x in set elems [1,2,3]]
in
	for e in a do IO`printf("%s ",[e]);

end A