abstract public class Employee {
    public abstract double getSalary();
}

public class HourlyPaidEmployee extends Employee {
    public double hours;
    private double rate;

    public HourlyPaidEmployee(double pHours, double pRate) {
        hours = pHours;
        rate = pRate;
    }

    public double getSalary() {
        return hours * rate;
    }

    public void SetRate(double pRate) {
        if (pRate > 150L) {
            rate = 150L;
        } else if (pRate < 0L) {
            rate = 0L;
        } else {
            rate = pRate;
        }
    }
}

public class FixedSalaryEmployee extends Employee {
    private double fixedSalary;

    public FixedSalaryEmployee(double pFixedSalary) {
        fixedSalary = pFixedSalary;
    }

    public double getSalary() {
        return fixedSalary;
    }
}

import utils.*;

import java.util.*;


public class Company {
    private List<Employee> employees;

    public Company() {
        employees = Utils.seq();
    }

    public void op1() {
        long x = employees.size();
        List<Employee> y = employees;
        Employee q = employees.get(0);

        //Skip;
    }

    public double calculateSalary() {
        return start_calc(0L, employees);
    }

    private double start_calc(double sum, List<Employee> emps) {
        if (emps.size() == 0L) {
            return sum;
        } else {
            return start_calc(sum + emps.get(0).getSalary(), Utils.seqTail(emps));
        }
    }

    private double not_used(double r, long n1, long n, char c, boolean b) {
        return 2.1;
    }

    public Company addEmp(Employee emp) {
        employees = Utils.seqConc(employees, Utils.seq(emp));

        return this;
    }
}

public class World {
    public double run() {
        HourlyPaidEmployee emp1 = new HourlyPaidEmployee(120.0, 100L);
        FixedSalaryEmployee emp2 = new FixedSalaryEmployee(10000L);
        FixedSalaryEmployee emp3 = new FixedSalaryEmployee(5000L);
        HourlyPaidEmployee emp4 = new HourlyPaidEmployee(100.0, 100L);
        Company company = new Company().addEmp(emp1).addEmp(emp2).addEmp(emp3)
                                       .addEmp(emp4);

        return company.calculateSalary();
    }
}