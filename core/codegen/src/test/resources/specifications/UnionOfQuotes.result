import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public void op(final Object v) {
        if (Utils.equals(v, quotes.Red.getInstance())) {
            //Skip;
        }
    }

    public void op2(final Object v) {
        if (Utils.equals(v, quotes.A.getInstance())) {
            //Skip;
        }
    }

    public Object op3() {
        return quotes.Red.getInstance();
    }

    public String toString() {
        return "A{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class Blue {
    private static int hc = 0;
    private static Blue instance = null;

    public Blue() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static Blue getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new Blue();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof Blue;
    }

    public String toString() {
        return "<Blue>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class Green {
    private static int hc = 0;
    private static Green instance = null;

    public Green() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static Green getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new Green();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof Green;
    }

    public String toString() {
        return "<Green>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class Red {
    private static int hc = 0;
    private static Red instance = null;

    public Red() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static Red getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new Red();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof Red;
    }

    public String toString() {
        return "<Red>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    private static int hc = 0;
    private static A instance = null;

    public A() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static A getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new A();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof A;
    }

    public String toString() {
        return "<A>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    private static int hc = 0;
    private static B instance = null;

    public B() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static B getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new B();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof B;
    }

    public String toString() {
        return "<B>";
    }
}

##########
