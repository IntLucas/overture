import utils.*;

import java.util.*;


public class NoteBook {
    private VDMSeq messages = Seq.seq();

    public void Test() {
        NoteBook nb1 = new NoteBook();
        NoteBook nb2 = new NoteBook();
        IO.println("Notebooks nb1 and nb2 has been created\n");
        IO.println("Adding messages for nb1 while leaving nb2 empty\n");
        nb1.addMessage("Hello!");
        nb1.addMessage("Bye!");
        nb1.addMessages(Seq.seq("one", "two", "three", "four"));
        nb1.addMessagesDist(Seq.seq("red", "green"), Seq.seq("blue", "yellow"));
        IO.printf("nb1 and nb2 are equal: %s\n", Seq.seq(nb1.eq(nb2)));
        IO.printf("nb1 and nb2 are NOT equal: %s\n", Seq.seq(nb1.neq(nb2)));
        IO.print("\n");
        IO.println("Copying the nb1 messages to nb2..\n");
        nb2.setMessages(nb1.getMessagesOrdered());
        IO.printf("nb1 and nb2 are equal: %s\n", Seq.seq(nb1.eq(nb2)));
        IO.printf("nb1 and nb2 are NOT equal: %s\n", Seq.seq(nb1.neq(nb2)));
        IO.print("\n");
        IO.printf("The current number of messages in nb1 is: %s\n\n",
            Seq.seq(nb1.noOfMessgages()));
        IO.println("All messages so far: ");
        nb1.printMessages();
        IO.print("\n");
        IO.println("Latest message is: " + nb1.readLatest());
        IO.println("Removing latest..");
        nb1.removeLatest();
        IO.println("Latest message is: " + nb1.readLatest() + "\n");
        IO.printf("Overriding message %s with 'Hi'\n", Seq.seq(9L));
        nb1.overrideMessage(9L, "Hi!");
        IO.println("All messages so far: ");
        nb1.printMessages();
        IO.print("\n");
        IO.printf("Message %s: " + nb1.getMessage(5L) + "\n", Seq.seq(5L));
        IO.print("\n");
        IO.printf("Message 8 is equal to 'Bye!': %s\n",
            Seq.seq(nb1.isMessage(8L, "Bye!")));
        IO.printf("Message 1 is equal to 'Bye!': %s\n",
            Seq.seq(nb1.isMessage(1L, "Bye!")));
        IO.printf("Message 8 is NOT equal to 'Bye!': %s\n",
            Seq.seq(nb1.isNotMessage(8L, "Bye!")));
        IO.printf("Message 1 is NOT equal to 'Bye!': %s\n",
            Seq.seq(nb1.isNotMessage(1L, "Bye!")));
        IO.print("\n");
        IO.println("Printing messages reversed");

        long temp_1 = nb1.noOfMessgages().longValue();

        for (long i = 1L; i <= temp_1; i++) {
            VDMSeq reversed = nb1.getReverseMessages();
            IO.println(((String) reversed.get(Utils.index(i))));
        }
    }

    public void printMessages() {
        long temp_2 = messages.size();

        for (long i = 1L; i <= temp_2; i++) {
            String msg = getMessage(i);
            IO.println(msg);
        }
    }

    public void addMessage(String msg) {
        messages = Seq.conc(Seq.seq(msg), messages.clone());
    }

    public void addMessages(VDMSeq newMessages) {
        messages = Seq.conc(newMessages.clone(), messages.clone());
    }

    private void addMessagesDist(VDMSeq newMessages1, VDMSeq newMessages2) {
        messages = Seq.conc(Seq.distConc(newMessages1.clone(),
                    newMessages2.clone()), messages.clone());
    }

    public String readLatest() {
        return ((String) messages.get(0));
    }

    public void removeLatest() {
        messages = Seq.tail(messages.clone());
    }

    public void overrideMessage(Number index, String newMessage) {
        messages = Seq.mod(messages.clone(),
                new Maplet[] { new Maplet(index, newMessage) });
    }

    public VDMSeq getMessagesOrdered() {
        return messages.clone();
    }

    public void setMessages(VDMSeq newMessages) {
        messages = newMessages.clone();
    }

    public Number noOfMessgages() {
        return getMessagesOrdered().size();
    }

    public String getMessage(Number index) {
        return ((String) messages.get(Utils.index(index)));
    }

    public boolean isMessage(Number index, String message) {
        return message.equals(getMessage(index));
    }

    public boolean isNotMessage(Number index, String message) {
        return !(message.equals(getMessage(index)));
    }

    public Set getMessgaesSet() {
        return new HashSet(messages.clone());
    }

    public Set getMessageIndices() {
        return Seq.inds(messages);
    }

    public VDMSeq getReverseMessages() {
        return Seq.reverse(messages.clone());
    }

    public boolean eq(NoteBook other) {
        return Seq.equals(messages, other.messages);
    }

    public boolean neq(NoteBook other) {
        return !(Seq.equals(messages, other.messages));
    }
}
##########