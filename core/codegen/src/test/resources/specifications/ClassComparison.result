import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public static final A a0 = new A();
    public static final A a1 = new A();
    public static final Boolean x = Utils.equals(a0, a0);
    public static final Boolean y = Utils.equals(a0, a1);
    public static final Boolean z = Utils.equals(new A(), new A());

    public A() {
    }

    public String toString() {
        return "A{" + "a0 = " + Utils.toString(a0) + ", a1 = " +
        Utils.toString(a1) + ", x = " + Utils.toString(x) + ", y = " +
        Utils.toString(y) + ", z = " + Utils.toString(z) + "}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
