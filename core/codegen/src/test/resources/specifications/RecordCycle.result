import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public String toString() {
        return "A{}";
    }

    public static class RecA implements Record {
        public B.RecB b;

        public RecA(final B.RecB _b) {
            b = (_b != null) ? Utils.clone(_b) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof RecA)) {
                return false;
            }

            RecA other = ((RecA) obj);

            return Utils.equals(b, other.b);
        }

        public int hashCode() {
            return Utils.hashCode(b);
        }

        public RecA clone() {
            return new RecA(b);
        }

        public String toString() {
            return "mk_A`RecA" + Utils.formatFields(b);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public String toString() {
        return "B{}";
    }

    public static class RecB implements Record {
        public A.RecA a;

        public RecB(final A.RecA _a) {
            a = (_a != null) ? Utils.clone(_a) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof RecB)) {
                return false;
            }

            RecB other = ((RecB) obj);

            return Utils.equals(a, other.a);
        }

        public int hashCode() {
            return Utils.hashCode(a);
        }

        public RecB clone() {
            return new RecB(a);
        }

        public String toString() {
            return "mk_B`RecB" + Utils.formatFields(a);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
