import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Func_1<Boolean, Number> f = new Func_1<Boolean, Number>() {
                public Number eval(final Boolean b) {
                    Number ternaryIfExp_1 = null;

                    if (b) {
                        ternaryIfExp_1 = 1L;
                    } else {
                        ternaryIfExp_1 = 0L;
                    }

                    return ternaryIfExp_1;
                }
            };

        VDMSeq xs = SeqUtil.seq(true, false, true, true, true);

        return bool_nat_map(Utils.clone(xs)).eval(f);
    }

    public static Func_1<Func_1<Boolean, Number>, VDMSeq> bool_nat_map(
        final VDMSeq s) {
        return new Func_1<Func_1<Boolean, Number>, VDMSeq>() {
                public VDMSeq eval(final Func_1<Boolean, Number> f) {
                    VDMSeq ternaryIfExp_2 = null;

                    if (s.isEmpty()) {
                        ternaryIfExp_2 = SeqUtil.seq();
                    } else {
                        ternaryIfExp_2 = SeqUtil.conc(SeqUtil.seq(f.eval(((Boolean) s.get(
                                            0)))),
                                bool_nat_map(SeqUtil.tail(Utils.clone(s)))
                                    .eval(f));
                    }

                    return Utils.clone(ternaryIfExp_2);
                }
            };
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1, T_2> {
    public abstract T_2 eval(final T_1 param_1);
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
