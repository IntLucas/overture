import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number casesReal(final Number n) {
        Number realPattern_1 = n;
        Boolean success_1 = Utils.equals(realPattern_1.doubleValue(), 1.1);

        if (!(success_1)) {
            Number realPattern_2 = n;
            success_1 = Utils.equals(realPattern_2.doubleValue(), 2.1);

            if (!(success_1)) {
                Number realPattern_3 = n;
                success_1 = Utils.equals(realPattern_3.doubleValue(), 3.1);

                if (success_1) {
                    return n.doubleValue() + 3.1;
                } else {
                    return 999.1;
                }
            } else {
                return n.doubleValue() + 2.1;
            }
        } else {
            return n.doubleValue() + 1.1;
        }
    }

    public static Object Run() {
        VDMSeq result = SeqUtil.seq();
        long toVar_1 = 5L;

        for (Long i = 0L; i <= toVar_1; i++) {
            result = SeqUtil.conc(Utils.clone(result),
                    SeqUtil.seq(casesReal(i.longValue() + 0.1)));
        }

        return Utils.clone(result);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
