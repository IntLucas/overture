import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object casesQuote(final Object e) {
        Object quotePattern_1 = e;
        Boolean success_1 = Utils.equals(quotePattern_1, quotes.A.getInstance());

        if (!(success_1)) {
            Object quotePattern_2 = e;
            success_1 = Utils.equals(quotePattern_2, quotes.B.getInstance());

            if (success_1) {
                return quotes.B.getInstance();
            } else {
                return quotes.C.getInstance();
            }
        } else {
            return quotes.A.getInstance();
        }
    }

    public static Object Run() {
        return SeqUtil.seq(casesQuote(quotes.A.getInstance()),
            casesQuote(quotes.B.getInstance()),
            casesQuote(quotes.C.getInstance()));
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    private static int hc = 0;
    private static A instance = null;

    public A() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static A getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new A();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof A;
    }

    public String toString() {
        return "<A>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    private static int hc = 0;
    private static B instance = null;

    public B() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static B getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new B();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof B;
    }

    public String toString() {
        return "<B>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class C {
    private static int hc = 0;
    private static C instance = null;

    public C() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static C getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new C();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof C;
    }

    public String toString() {
        return "<C>";
    }
}

##########
