import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number Run() {
        Number result = 0L;

        for (Iterator iterator_1 = SeqUtil.seq(Tuple.mk_(1L, 2L),
                    Tuple.mk_(2L, 3L), Tuple.mk_(3L, 4L), Tuple.mk_(4L, 5L),
                    Tuple.mk_(5L, 6L)).iterator(); iterator_1.hasNext();) {
            Tuple tuplePattern_1 = (Tuple) iterator_1.next();
            Boolean success_1 = tuplePattern_1.compatible(Number.class,
                    Number.class);
            Number a = null;
            Number b = null;

            if (success_1) {
                a = ((Number) tuplePattern_1.get(0));
                b = ((Number) tuplePattern_1.get(1));
            }

            if (!(success_1)) {
                continue;
            }

            result = result.longValue() + (a.longValue() * b.longValue());
        }

        return result;
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
