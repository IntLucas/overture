import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public String stringPatternOp(final String stringPattern_1) {
        Boolean success_1 = Utils.equals(stringPattern_1, "hej");

        if (!(success_1)) {
            throw new RuntimeException("String pattern match failed");
        }

        String stringPattern_2 = "hej";
        Boolean success_2 = Utils.equals(stringPattern_2, "hej");

        if (!(success_2)) {
            throw new RuntimeException("String pattern match failed");
        }

        return "hej";
    }

    public static String stringPatternFun(final String stringPattern_3) {
        Boolean success_3 = Utils.equals(stringPattern_3, "hej");

        if (!(success_3)) {
            throw new RuntimeException("String pattern match failed");
        }

        String stringPattern_4 = "hej";
        Boolean success_4 = Utils.equals(stringPattern_4, "hej");

        if (!(success_4)) {
            throw new RuntimeException("String pattern match failed");
        }

        return "hej";
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return SeqUtil.seq(new A().stringPatternOp("hej"),
            A.stringPatternFun("hej"));
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
