import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public String xs = "h";

    public A() {
    }

    public String toString() {
        return "A{" + "xs := " + Utils.toString(xs) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMSeq xs = SeqUtil.seq(new A(), new A());

        {
            String str = "";

            for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext();) {
                Object x = (Object) iterator_1.next();
                Character apply_1 = null;

                if (x instanceof A) {
                    apply_1 = ((A) x).xs.charAt(Utils.index(1L));
                } else {
                    throw new RuntimeException("Missing member: xs");
                }

                str = str + new String(new char[] { apply_1 });
            }

            return str;
        }
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
