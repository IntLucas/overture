import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public static Number fun() {
        return 2L;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number Run() {
        VDMSeq xs = SeqUtil.seq(new A(), new A());
        Number sum = 0L;

        for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext();) {
            Object x = (Object) iterator_1.next();
            Number apply_1 = null;

            if (x instanceof A) {
                apply_1 = ((A) x).fun();
            } else {
                throw new RuntimeException("Missing operation member: fun");
            }

            sum = sum.longValue() + apply_1.longValue();
        }

        return sum;
    }
}

##########
public interface Func_1<T_1> {
    public abstract T_1 eval();
}

##########
