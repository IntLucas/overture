import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public Number op() {
        return 1L;
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public Number op() {
        return 2L;
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class C {
    public C() {
    }

    public Number op() {
        return 3L;
    }

    public String toString() {
        return "C{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    private static final Object w = new B();

    public Entry() {
    }

    public static Number Run() {
        Entry e = new Entry();
        Object callStmObj_1 = e.w;

        if (callStmObj_1 instanceof A) {
            return ((A) callStmObj_1).op();
        } else if (callStmObj_1 instanceof B) {
            return ((B) callStmObj_1).op();
        } else if (callStmObj_1 instanceof C) {
            return ((C) callStmObj_1).op();
        } else {
            throw new RuntimeException("Missing operation member: op");
        }
    }

    public String toString() {
        return "Entry{" + "w = " + Utils.toString(w) + "}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
