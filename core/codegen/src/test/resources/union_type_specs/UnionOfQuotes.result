import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public static Object f() {
        return quotes.T.getInstance();
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public static Object f() {
        return quotes.T.getInstance();
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMSet xs = SetUtil.set(new A(), new B());

        for (Iterator iterator_1 = xs.iterator(); iterator_1.hasNext();) {
            Object x = (Object) iterator_1.next();
            Object apply_1 = null;

            if (x instanceof A) {
                apply_1 = ((A) x).f();
            } else if (x instanceof B) {
                apply_1 = ((B) x).f();
            } else {
                throw new RuntimeException("Missing member: f");
            }

            if (Utils.equals(apply_1, quotes.A.getInstance())) {
                return 1L;
            }
        }

        return 2L;
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1> {
    public abstract T_1 eval();
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    private static int hc = 0;
    private static A instance = null;

    public A() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static A getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new A();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof A;
    }

    public String toString() {
        return "<A>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class T {
    private static int hc = 0;
    private static T instance = null;

    public T() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static T getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new T();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof T;
    }

    public String toString() {
        return "<T>";
    }
}

##########
