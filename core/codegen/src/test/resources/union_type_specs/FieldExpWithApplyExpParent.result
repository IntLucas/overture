import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public Number op() {
        return 1L;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public Number op() {
        return 11L;
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number Run() {
        VDMSeq xs = SeqUtil.seq(new A(), new B());
        Number sum = 0L;

        for (Iterator iterator_1 = SeqUtil.elems(xs.clone()).iterator();
                iterator_1.hasNext();) {
            Object x = (Object) iterator_1.next();
            Number apply_1 = null;

            if (x instanceof A) {
                apply_1 = ((A) x).op();
            } else {
                apply_1 = ((B) x).op();
            }

            sum = sum.doubleValue() + apply_1.longValue();
        }

        return sum;
    }
}

##########
