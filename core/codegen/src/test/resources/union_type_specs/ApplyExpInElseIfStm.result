import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public static Tuple f() {
        return Tuple.mk_(1L, 2L);
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public static Tuple f() {
        return Tuple.mk_(1L, 1L);
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMMap m = MapUtil.map(new Maplet(1L, new A()), new Maplet(2L, new B()));

        if (1L == 2L) {
            return false;
        } else if (2L == 3L) {
            return false;
        } else {
            Object obj_1 = ((Object) m.get(1L));

            Tuple apply_1 = null;

            if (obj_1 instanceof A) {
                apply_1 = ((A) obj_1).f();
            } else {
                apply_1 = ((B) obj_1).f();
            }

            if (apply_1.equals(Tuple.mk_(1L, 2L))) {
                return true;
            } else if (4L == 5L) {
                return false;
            } else {
                return false;
            }
        }
    }
}

##########
public interface Func_1<T_1> {
    public abstract T_1 eval();
}

##########
