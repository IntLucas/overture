import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public static Tuple f() {
        return Tuple.mk_(1L, 2L);
    }

    public String toString() {
        return "A{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public B() {
    }

    public static Tuple f() {
        return Tuple.mk_(1L, 1L);
    }

    public String toString() {
        return "B{}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        VDMMap m = MapUtil.map(new Maplet(1L, new A()), new Maplet(2L, new B()));

        if (Utils.equals(1L, 2L)) {
            return false;
        } else if (Utils.equals(2L, 3L)) {
            return false;
        } else {
            Object obj_1 = m.get(1L);

            Tuple apply_1 = null;

            if (obj_1 instanceof A) {
                apply_1 = ((A) obj_1).f();
            } else if (obj_1 instanceof B) {
                apply_1 = ((B) obj_1).f();
            } else {
                throw new RuntimeException("Missing member: f");
            }

            if (Utils.equals(apply_1, Tuple.mk_(1L, 2L))) {
                return true;
            } else if (Utils.equals(4L, 5L)) {
                return false;
            } else {
                return false;
            }
        }
    }

    public String toString() {
        return "Entry{}";
    }
}

##########
public interface Func_1<T_1> {
    public abstract T_1 eval();
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
