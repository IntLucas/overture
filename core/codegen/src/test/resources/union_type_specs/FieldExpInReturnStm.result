import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    public Number x = 1L;

    public B() {
    }

    public String toString() {
        return "B{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public Number x = 1L;

    public A() {
    }

    public String toString() {
        return "A{" + "x := " + Utils.toString(x) + "}";
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    private static VDMSeq hr = SeqUtil.seq(new A());

    public Entry() {
    }

    public static Object Run() {
        Object obj_1 = hr.get(Utils.index(hr.size()));

        Number apply_1 = null;

        if (obj_1 instanceof A) {
            apply_1 = ((A) obj_1).x;
        } else if (obj_1 instanceof B) {
            apply_1 = ((B) obj_1).x;
        } else {
            throw new RuntimeException("Missing member: x");
        }

        return apply_1;
    }

    public String toString() {
        return "Entry{" + "hr := " + Utils.toString(hr) + "}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
