import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    private static Number f(final Number x) {
        return Utils.divide(1L, x.doubleValue());
    }

    public String toString() {
        return "Entry{}";
    }

    public static void Entry_T1_Run(final TestAccumulator testAccumulator) {
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        AlternativeTraceNode alternatives_2 = new AlternativeTraceNode();
        VDMSet set_1 = SetUtil.set(-2L, -1L, 0L, 1L, 2L);

        for (Iterator iterator_1 = set_1.iterator(); iterator_1.hasNext();) {
            final Number x = ((Number) iterator_1.next());
            CallStatement callStm_1 = new CallStatement() {
                    public Object execute(final Object instance) {
                        return f(x);
                    }

                    public String toString() {
                        return "f(" + Utils.toString(x) + ")";
                    }
                };

            StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

            alternatives_2.add(apply_1);
        }

        sequence_1.add(alternatives_2);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator);
    }
}

##########
