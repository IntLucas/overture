import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    private VDMMap m = MapUtil.map(new Maplet(new Token(1L),
                MapUtil.map(new Maplet(new Token(1L), quotes.A.getInstance()))));

    public Entry() {
    }

    public Object app(final Token id, final Token index) {
        return ((VDMMap) m.get(id)).get(index);
    }

    public static Object Run() {
        Entry e = new Entry();

        return ((Object) e.app(new Token(1L), new Token(1L)));
    }

    public String toString() {
        return "Entry{" + "m := " + Utils.toString(m) + "}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    private static int hc = 0;
    private static A instance = null;

    public A() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static A getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new A();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof A;
    }

    public String toString() {
        return "<A>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class B {
    private static int hc = 0;
    private static B instance = null;

    public B() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static B getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new B();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof B;
    }

    public String toString() {
        return "<B>";
    }
}

##########
