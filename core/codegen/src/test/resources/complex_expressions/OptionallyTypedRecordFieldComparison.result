import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        NatList a = new NatList(1L, null);
        NatList b = new NatList(1L, new NatList(2L, null));
        NatList c = new NatList(1L, new NatList(2L, new NatList(3L, null)));
        NatList d = new NatList(1L, new NatList(2L, new NatList(3L, null)));

        return SeqUtil.seq(Utils.equals(a, a), Utils.equals(a, b),
            Utils.equals(a, c), Utils.equals(a, d), Utils.equals(b, b),
            Utils.equals(b, c), Utils.equals(b, d), Utils.equals(c, c),
            Utils.equals(c, d), Utils.equals(d, d), Utils.equals(b, a),
            Utils.equals(c, a), Utils.equals(d, a), Utils.equals(c, b),
            Utils.equals(d, b), Utils.equals(d, c));
    }

    public String toString() {
        return "Entry{}";
    }

    private static class NatList implements Record {
        public Number e;
        public NatList t;

        public NatList(final Number _e, final NatList _t) {
            e = _e;
            t = (_t != null) ? Utils.clone(_t) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof NatList)) {
                return false;
            }

            NatList other = ((NatList) obj);

            return (Utils.equals(e.longValue(), other.e.longValue())) &&
            (Utils.equals(t, other.t));
        }

        public int hashCode() {
            return Utils.hashCode(e, t);
        }

        public NatList clone() {
            return new NatList(e, t);
        }

        public String toString() {
            return Utils.recordToString(this, e, t);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
