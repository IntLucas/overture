import org.overture.codegen.runtime.*;

import java.util.*;


public class A {
    public A() {
    }

    public Node op() {
        return new Node(1L,
            new Node(2L, new Node(3L, new Node(4L, new Node(5L, null)))));
    }

    public String toString() {
        return "A{}";
    }

    public static class Node implements Record {
        public Number e;
        public Node r;

        public Node(final Number _e, final Node _r) {
            e = _e;
            r = (_r != null) ? Utils.clone(_r) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Node)) {
                return false;
            }

            Node other = ((Node) obj);

            return (Utils.equals(e, other.e)) && (Utils.equals(r, other.r));
        }

        public int hashCode() {
            return Utils.hashCode(e, r);
        }

        public Node clone() {
            return new Node(e, r);
        }

        public String toString() {
            return "mk_A`Node" + Utils.formatFields(e, r);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return new A().op();
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
