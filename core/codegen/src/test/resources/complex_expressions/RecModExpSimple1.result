import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Rec Run() {
        Rec r = new Rec(5L, true);
        Rec recModifierExp_1 = Utils.clone(r);

        recModifierExp_1.x = 6L;
        recModifierExp_1.b = false;
        r = Utils.clone(recModifierExp_1);

        return Utils.clone(r);
    }

    public String toString() {
        return "Entry{}";
    }

    public static class Rec implements Record {
        public Number x;
        public Boolean b;

        public Rec(final Number _x, final Boolean _b) {
            x = _x;
            b = _b;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Rec)) {
                return false;
            }

            Rec other = ((Rec) obj);

            return (Utils.equals(x, other.x)) && (Utils.equals(b, other.b));
        }

        public int hashCode() {
            return Utils.hashCode(x, b);
        }

        public Rec clone() {
            return new Rec(x, b);
        }

        public String toString() {
            return "mk_Entry`Rec" + Utils.formatFields(x, b);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
