import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    private Number n = 0L;

    public Entry() {
    }

    public Boolean inc() {
        n = n.longValue() + 1L;

        return true;
    }

    public static Object Run() {
        Entry e = new Entry();
        Boolean andResult_1 = false;

        Boolean forAllExpResult_1 = true;
        VDMSet set_1 = SetUtil.set(1L, 2L, 3L);

        for (Iterator iterator_1 = set_1.iterator();
                iterator_1.hasNext() && forAllExpResult_1;) {
            Number x = ((Number) iterator_1.next());
            forAllExpResult_1 = e.inc();
        }

        if (forAllExpResult_1) {
            Boolean andResult_2 = false;

            Long exists1Counter_1 = 0L;
            VDMSet set_2 = SetUtil.set(4L, 5L, 6L);

            for (Iterator iterator_2 = set_2.iterator();
                    iterator_2.hasNext() &&
                    (exists1Counter_1.longValue() < 2L);) {
                Number x = ((Number) iterator_2.next());

                if (false) {
                    exists1Counter_1++;
                }
            }

            if (Utils.equals(exists1Counter_1, 1L)) {
                Boolean existsExpResult_1 = false;
                VDMSet set_3 = SetUtil.set(1L, 2L);

                for (Iterator iterator_3 = set_3.iterator();
                        iterator_3.hasNext() && !(existsExpResult_1);) {
                    Number x = ((Number) iterator_3.next());
                    existsExpResult_1 = e.inc();
                }

                if (existsExpResult_1) {
                    andResult_2 = true;
                }
            }

            if (andResult_2) {
                andResult_1 = true;
            }
        }

        Boolean b = andResult_1;

        return Tuple.mk_(b, e.n);
    }

    public String toString() {
        return "Entry{" + "n := " + Utils.toString(n) + "}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
