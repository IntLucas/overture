import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Rec1 Run() {
        Rec1 r1 = new Rec1(5L, new Rec2(10L, null));
        Rec2 r2 = new Rec2(55L, null);
        Number x = 1L;
        Rec1 recModifierExp_1 = Utils.clone(r1);

        recModifierExp_1.a = 100L;

        Rec2 recModifierExp_2 = Utils.clone(r2);

        recModifierExp_2.c = 200L;
        recModifierExp_2.d = null;
        recModifierExp_1.b = Utils.clone(recModifierExp_2);

        Rec1 r3 = Utils.clone(recModifierExp_1);
        Number y = 2L;

        return Utils.clone(r3);
    }

    public String toString() {
        return "Entry{}";
    }

    public static class Rec1 implements Record {
        public Number a;
        public Rec2 b;

        public Rec1(final Number _a, final Rec2 _b) {
            a = _a;
            b = (_b != null) ? Utils.clone(_b) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Rec1)) {
                return false;
            }

            Rec1 other = ((Rec1) obj);

            return (Utils.equals(a.longValue(), other.a.longValue())) &&
            (Utils.equals(b, other.b));
        }

        public int hashCode() {
            return Utils.hashCode(a, b);
        }

        public Rec1 clone() {
            return new Rec1(a, b);
        }

        public String toString() {
            return Utils.recordToString(this, a, b);
        }
    }

    public static class Rec2 implements Record {
        public Number c;
        public Rec1 d;

        public Rec2(final Number _c, final Rec1 _d) {
            c = _c;
            d = (_d != null) ? Utils.clone(_d) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Rec2)) {
                return false;
            }

            Rec2 other = ((Rec2) obj);

            return (Utils.equals(c.longValue(), other.c.longValue())) &&
            (Utils.equals(d, other.d));
        }

        public int hashCode() {
            return Utils.hashCode(c, d);
        }

        public Rec2 clone() {
            return new Rec2(c, d);
        }

        public String toString() {
            return Utils.recordToString(this, c, d);
        }
    }
}

##########

package quotes;

public interface Quotes {
    public static Number start = 1L;
    public static Number append = 2L;
}

##########
