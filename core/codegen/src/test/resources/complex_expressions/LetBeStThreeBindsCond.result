import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Number Run() {
        Number x = null;
        Number y = null;
        Number z = null;
        Boolean success_1 = false;
        VDMSet set_1 = SetUtil.set(1L, 2L, 3L);

        for (Iterator iterator_1 = set_1.iterator();
                iterator_1.hasNext() && !(success_1);) {
            x = ((Number) iterator_1.next());
            success_1 = false;

            for (Iterator iterator_2 = set_1.iterator();
                    iterator_2.hasNext() && !(success_1);) {
                y = ((Number) iterator_2.next());
                success_1 = false;

                for (Iterator iterator_3 = set_1.iterator();
                        iterator_3.hasNext() && !(success_1);) {
                    z = ((Number) iterator_3.next());

                    Boolean andResult_1 = false;

                    if (x.longValue() < y.longValue()) {
                        if (y.longValue() < z.longValue()) {
                            andResult_1 = true;
                        }
                    }

                    success_1 = andResult_1;
                }
            }
        }

        if (!(success_1)) {
            throw new RuntimeException("Let Be St found no applicable bindings");
        }

        return x.longValue() * y.longValue() * z.longValue();
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
