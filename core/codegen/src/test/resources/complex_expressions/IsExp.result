import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        Boolean x1 = Utils.is_Tuple(Tuple.mk_(1L, 1L), Number.class,
                Boolean.class);
        Boolean x2 = Utils.is_Tuple(Tuple.mk_(1L, false), Number.class,
                Boolean.class);
        Boolean x3 = Utils.is_(Tuple.mk_(1L, 2L), Rec.class);

        Boolean x4 = Utils.is_(new Rec(5L, 5L), Rec.class);

        Boolean x5 = Utils.is_(new Entry(), Entry.class);

        Boolean x6 = Utils.is_(55L, Entry.class);

        return SeqUtil.seq(x1, x2, x3, x4, x5, x6);
    }

    public String toString() {
        return "Entry{}";
    }

    private static class Rec implements Record {
        public Number x;
        public Number y;

        public Rec(final Number _x, final Number _y) {
            x = _x;
            y = _y;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof Rec)) {
                return false;
            }

            Rec other = ((Rec) obj);

            return (Utils.equals(x.longValue(), other.x.longValue())) &&
            (Utils.equals(y.longValue(), other.y.longValue()));
        }

        public int hashCode() {
            return Utils.hashCode(x, y);
        }

        public Rec clone() {
            return new Rec(x, y);
        }

        public String toString() {
            return Utils.recordToString(this, x, y);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
