import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        A a = new A(MapUtil.map(new Maplet(1L, true)));
        a.x.put(10L, false);

        return Utils.clone(a.x);
    }

    public String toString() {
        return "Entry{}";
    }

    public static class A implements Record {
        public VDMMap x;

        public A(final VDMMap _x) {
            x = (_x != null) ? Utils.clone(_x) : null;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof A)) {
                return false;
            }

            A other = ((A) obj);

            return Utils.equals(x, other.x);
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public A clone() {
            return new A(x);
        }

        public String toString() {
            return "mk_Entry`A" + Utils.formatFields(x);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
