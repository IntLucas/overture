import org.overture.codegen.runtime.*;

import java.util.*;


public class SharedCounter implements EvaluatePP {
    public static volatile Number counter = 0L;
    public volatile Sentinel sentinel;

    public SharedCounter() {
        sentinel = new SharedCounter_sentinel(this);
    }

    public static void inc() {
        counter = counter.longValue() + 1L;
    }

    public Number getValue() {
        sentinel.entering(((SharedCounter_sentinel) sentinel).getValue);

        try {
            return counter;
        } finally {
            sentinel.leaving(((SharedCounter_sentinel) sentinel).getValue);
        }
    }

    public static Number func1() {
        return 1L;
    }

    public String toString() {
        return "SharedCounter{" + "counter := " + Utils.toString(counter) +
        "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return Utils.equals(sentinel.active[((SharedCounter_sentinel) sentinel).inc],
                0L);
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else if (Utils.equals(fnr, 3L)) {
            return true;
        } else if (Utils.equals(fnr, 4L)) {
            return true;
        } else {
            return true;
        }
    }

    public static class SharedCounter_sentinel extends Sentinel {
        public static final int inc = 0;
        public static final int getValue = 1;
        public static final int SharedCounter = 2;
        public static final int func1 = 3;
        public static final int toString = 4;
        public final int function_sum = 5;

        public SharedCounter_sentinel() {
        }

        public SharedCounter_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class CountSwitcher extends VDMThread implements EvaluatePP {
    private volatile Boolean isFinished = false;
    public volatile Sentinel sentinel;

    public CountSwitcher() {
        sentinel = new CountSwitcher_sentinel(this);
    }

    public void joined() {
        sentinel.entering(((CountSwitcher_sentinel) sentinel).joined);

        try {
            //Skip;
        } finally {
            sentinel.leaving(((CountSwitcher_sentinel) sentinel).joined);
        }
    }

    public void incCounter() {
        sentinel.entering(((CountSwitcher_sentinel) sentinel).incCounter);

        try {
            long toVar_1 = 100L;

            for (Long i = 1L; i <= toVar_1; i++) {
                SharedCounter.inc();
            }

            isFinished = true;
            sentinel.stateChanged();
        } finally {
            sentinel.leaving(((CountSwitcher_sentinel) sentinel).incCounter);
        }
    }

    public String toString() {
        return "CountSwitcher{" + "isFinished := " +
        Utils.toString(isFinished) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return isFinished;
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else if (Utils.equals(fnr, 3L)) {
            return true;
        } else {
            return true;
        }
    }

    public void run() {
        incCounter();
    }

    public static class CountSwitcher_sentinel extends Sentinel {
        public static final int joined = 0;
        public static final int incCounter = 1;
        public static final int CountSwitcher = 2;
        public static final int toString = 3;
        public final int function_sum = 4;

        public CountSwitcher_sentinel() {
        }

        public CountSwitcher_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry implements EvaluatePP {
    public volatile Sentinel sentinel;

    public Entry() {
        sentinel = new Entry_sentinel(this);
    }

    public static Object Run() {
        SharedCounter s = new SharedCounter();
        CountSwitcher i1 = new CountSwitcher();
        CountSwitcher i2 = new CountSwitcher();
        CountSwitcher i3 = new CountSwitcher();
        i1.start();
        i2.start();
        i3.start();
        i1.joined();
        i2.joined();
        i3.joined();

        return s.getValue();
    }

    public String toString() {
        return "Entry{}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return true;
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else {
            return true;
        }
    }

    public static class Entry_sentinel extends Sentinel {
        public static final int Run = 0;
        public static final int Entry = 1;
        public static final int toString = 2;
        public final int function_sum = 3;

        public Entry_sentinel() {
        }

        public Entry_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
