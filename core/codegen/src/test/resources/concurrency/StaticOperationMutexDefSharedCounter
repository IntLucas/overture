class SharedCounter

instance variables

public static counter : nat := 0;

operations

public static inc : () ==> ()
inc () == counter := counter + 1;

--public decr : () ==> ()
--decr () == (counter := counter - 1);

--public static op1 : () ==> ()
--op1 () == skip;

public getValue : () ==> nat
getValue () == return counter;

functions
public func1 :  () -> nat
func1 () == 1;

sync
  mutex(inc);
  
end SharedCounter

class CountSwitcher

instance variables

--private sharedCounter : SharedCounter;

private isFinished : bool := false;

operations

--public CountSwitcher : SharedCounter ==> CountSwitcher
--CountSwitcher (s) == sharedCounter := s;

public joined : () ==> ()
joined () == skip;

public incCounter : () ==> ()
incCounter () ==
(
  for i = 1 to 100 do(
    SharedCounter`inc());
--    sharedCounter.decr());
  isFinished := true; 
)

thread
       incCounter();

sync
	per joined => isFinished;
			
end CountSwitcher

class Entry

operations

public static Run : () ==> ?
Run () ==
let s = new SharedCounter(),
    i1 = new CountSwitcher(),
    i2 = new CountSwitcher(),
    i3 = new CountSwitcher()
in 
(
  start(i1);
  start(i2);
  start(i3);

  i1.joined();
  i2.joined();
  i3.joined();
  
  return s.getValue(); 
);

end Entry