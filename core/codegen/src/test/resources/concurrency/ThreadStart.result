import org.overture.codegen.runtime.*;

import java.util.*;


public class ThreadClass extends Thread {
    public volatile Number x = 0L;
    public Sentinel sentinel;

    public ThreadClass() {
        sentinel = new ThreadClass_sentinel();
    }

    public void setX() {
        Sentinel.entering();

        try {
            x = 3L;
        } finally {
            Sentinel.leaving();
        }
    }

    public void subX() {
        Sentinel.entering();

        try {
            x = x.longValue() - 1L;
        } finally {
            Sentinel.leaving();
        }
    }

    public String toString() {
        return "ThreadClass{" + "x := " + Utils.toString(x) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (fnr == 0L) {
            return (Sentinel.act[((ThreadClass_sentinel) sentinel).setX].longValue() == 0L) &&
            (x.longValue() == 0L);
        } else if (fnr == 1L) {
            return (Sentinel.act[((ThreadClass_sentinel) sentinel).setX].longValue() +
            Sentinel.act[((ThreadClass_sentinel) sentinel).subX].longValue() +
            Sentinel.act[((ThreadClass_sentinel) sentinel).setX].longValue()) > 10L;
        } else if (fnr == 2L) {
            return true;
        } else if (fnr == 3L) {
            return true;
        } else {
            return true;
        }
    }

    public void run() {
        setX();
        subX();
    }

    public class ThreadClass_sentinel extends Sentinel {
        public final int setX = 0L;
        public final int subX = 1L;
        public final int ThreadClass = 2L;
        public final int toString = 3L;
        public final int function_sum = 4L;

        public ThreadClass_sentinel() {
            return;
        }

        public ThreadClass_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Sentinel sentinel;

    public Entry() {
        sentinel = new Entry_sentinel();
    }

    public static Object Run() {
        Sentinel.entering();

        try {
            ThreadClass t = new ThreadClass();
            t.start();

            Boolean whileCond1 = true;

            while (whileCond1) {
                whileCond1 = t.x.longValue() != 2L;

                if (!(whileCond1)) {
                    break;
                }

                //Skip;
            }

            return t.x;
        } finally {
            Sentinel.leaving();
        }
    }

    public String toString() {
        return "Entry{}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (fnr == 0L) {
            return true;
        } else if (fnr == 1L) {
            return true;
        } else if (fnr == 2L) {
            return true;
        } else {
            return true;
        }
    }

    public class Entry_sentinel extends Sentinel {
        public final int Run = 0L;
        public final int Entry = 1L;
        public final int toString = 2L;
        public final int function_sum = 3L;

        public Entry_sentinel() {
            return;
        }

        public Entry_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
