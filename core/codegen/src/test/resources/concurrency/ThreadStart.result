import org.overture.codegen.runtime.*;

import java.util.*;


public class ThreadClass extends Thread {
    public Number x = 0L;

    public ThreadClass() {
    }

    public void setX() {
        return Sentinel.entering();

        x = 2L;

        return Sentinel.leaving();
    }

    public String toString() {
        return "ThreadClass{" + "x := " + Utils.toString(x) + "}";
    }

    public void run() {
        setX();
    }

    public class ThreadClass_sentinel extends Thread_Sentinel {
        public final int setX = 0L;
        public final int ThreadClass = 1L;
        public final int toString = 2L;
        public final int function_sum = 3L;

        public ThreadClass_sentinel() {
            return;
        }

        public ThreadClass_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return Sentinel.entering();

        ThreadClass t = new ThreadClass();
        t.start();

        Boolean whileCond1 = true;

        while (whileCond1) {
            whileCond1 = t.x.longValue() != 2L;

            if (!(whileCond1)) {
                break;
            }

            //Skip;
        }

        return t.x;

        return Sentinel.leaving();
    }

    public String toString() {
        return "Entry{}";
    }

    public class Entry_sentinel extends Sentinel {
        public final int Run = 0L;
        public final int Entry = 1L;
        public final int toString = 2L;
        public final int function_sum = 3L;

        public Entry_sentinel() {
            return;
        }

        public Entry_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
