import org.overture.codegen.runtime.*;

import java.util.*;


public class A implements EvaluatePP {
    public volatile Number predA = 0L;
    public volatile Sentinel sentinel;

    public A() {
        sentinel = new A_sentinel(this);
    }

    public void opA() {
        sentinel.entering(((A_sentinel) sentinel).opA);

        try {
            //Skip;
        } finally {
            sentinel.leaving(((A_sentinel) sentinel).opA);
        }
    }

    public String toString() {
        return "A{" + "predA := " + Utils.toString(predA) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return Utils.equals(predA, 0L);
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else {
            return true;
        }
    }

    public class A_sentinel extends Sentinel {
        public static final int opA = 0;
        public static final int A = 1;
        public static final int toString = 2;
        public final int function_sum = 3;

        public A_sentinel() {
        }

        public A_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class B extends A implements EvaluatePP {
    public volatile Number predB = 1L;
    public volatile Sentinel sentinel;

    public B() {
        sentinel = new B_sentinel(this);
    }

    public void opB() {
        sentinel.entering(((B_sentinel) sentinel).opB);

        try {
            //Skip;
        } finally {
            sentinel.leaving(((B_sentinel) sentinel).opB);
        }
    }

    public void opA() {
        sentinel.entering(((B_sentinel) sentinel).opA);

        try {
            //Skip;
        } finally {
            sentinel.leaving(((B_sentinel) sentinel).opA);
        }
    }

    public String toString() {
        return "B{" + "predB := " + Utils.toString(predB) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return Utils.equals(predB, 1L);
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else if (Utils.equals(fnr, 3L)) {
            return true;
        } else if (Utils.equals(fnr, 4L)) {
            return true;
        } else if (Utils.equals(fnr, 5L)) {
            return true;
        } else {
            return true;
        }
    }

    public class B_sentinel extends A_Sentinel {
        public static final int opB = 0;
        public static final int opA = 1;
        public static final int B = 2;
        public static final int toString = 3;
        public static final int A = 4;
        public final int function_sum = 5;

        public B_sentinel() {
        }

        public B_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
import org.overture.codegen.runtime.*;

import java.util.*;


public class C extends B implements EvaluatePP {
    public volatile Number predC = 2L;
    public volatile Sentinel sentinel;

    public C() {
        sentinel = new C_sentinel(this);
    }

    public void opC() {
        sentinel.entering(((C_sentinel) sentinel).opC);

        try {
            //Skip;
        } finally {
            sentinel.leaving(((C_sentinel) sentinel).opC);
        }
    }

    public String toString() {
        return "C{" + "predC := " + Utils.toString(predC) + "}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (Utils.equals(fnr, 0L)) {
            return true;
        } else if (Utils.equals(fnr, 1L)) {
            return true;
        } else if (Utils.equals(fnr, 2L)) {
            return true;
        } else if (Utils.equals(fnr, 3L)) {
            return true;
        } else if (Utils.equals(fnr, 4L)) {
            return Utils.equals(predC, 2L);
        } else if (Utils.equals(fnr, 5L)) {
            return true;
        } else if (Utils.equals(fnr, 6L)) {
            return true;
        } else if (Utils.equals(fnr, 7L)) {
            return true;
        } else {
            return true;
        }
    }

    public class C_sentinel extends B_Sentinel {
        public static final int opC = 0;
        public static final int C = 1;
        public static final int toString = 2;
        public static final int opB = 3;
        public static final int opA = 4;
        public static final int B = 5;
        public static final int A = 6;
        public final int function_sum = 7;

        public C_sentinel() {
        }

        public C_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
