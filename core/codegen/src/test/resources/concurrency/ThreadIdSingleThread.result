import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public static volatile Sentinel sentinel;

    public Entry() {
        sentinel = new Entry_sentinel();
    }

    public static Object Run() {
        sentinel.entering(((Entry_sentinel) sentinel).Run);

        try {
            return f();
        } finally {
            sentinel.leaving(((Entry_sentinel) sentinel).Run);
        }
    }

    public static Number f() {
        sentinel.entering(((Entry_sentinel) sentinel).f);

        try {
            return Thread.currentThread().getId();
        } finally {
            sentinel.leaving(((Entry_sentinel) sentinel).f);
        }
    }

    public String toString() {
        return "Entry{}";
    }

    public Boolean evaluatePP(final Number fnr) {
        if (fnr == 0L) {
            return true;
        } else if (fnr == 1L) {
            return true;
        } else if (fnr == 2L) {
            return true;
        } else if (fnr == 3L) {
            return true;
        } else {
            return true;
        }
    }

    public class Entry_sentinel extends Sentinel {
        public final long Run = 0L;
        public final long Entry = 1L;
        public final long f = 2L;
        public final long toString = 3L;
        public final long function_sum = 4L;

        public Entry_sentinel() {
            return;
        }

        public Entry_sentinel(final EvaluatePP instance) {
            init(instance, function_sum);
        }
    }
}

##########
