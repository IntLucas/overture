import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


public class Entry implements java.io.Serializable {
    private Number x = 0L;

    public Entry() {
    }

    public Number op() {
        x = x.longValue() + 1L;

        return x;
    }

    public String toString() {
        return "Entry{" + "x := " + Utils.toString(x) + "}";
    }

    public static void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();
        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        final Entry a = new Entry();
        final Number ID_1 = gen.inc();

        store.register(ID_1, a);

        CallStatement callStm_1 = new CallStatement() {
                public Object execute(final Object instance) {
                    Number result_1 = ((Entry) store.getValue(ID_1)).op();

                    return result_1;
                }

                public String toString() {
                    return "a.op()";
                }
            };

        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

        RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_1, 1L, 3L);

        sequence_1.add(repeat_1);

        TraceNode.executeTests(sequence_1, Entry.class, testAccumulator, store);
    }
}

##########
