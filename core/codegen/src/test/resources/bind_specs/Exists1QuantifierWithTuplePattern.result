import org.overture.codegen.runtime.*;

import java.util.*;


public class Entry {
    public Entry() {
    }

    public static Object Run() {
        return fun();
    }

    public static VDMSeq fun() {
        VDMSet ts0 = SetUtil.set(Tuple.mk_(10L, Tuple.mk_(3L, 4L)),
                Tuple.mk_(20L, Tuple.mk_(3L, 10L)),
                Tuple.mk_(1L, Tuple.mk_(2L, 21L)),
                Tuple.mk_(1L, Tuple.mk_(3L, 5L)));
        VDMSet ts1 = SetUtil.set(Tuple.mk_(10L, Tuple.mk_(3L, 4L)),
                Tuple.mk_(20L, Tuple.mk_(3L, 10L)),
                Tuple.mk_(1L, Tuple.mk_(2L, 21L)),
                Tuple.mk_(1L, Tuple.mk_(3L, 4L)));

        return SeqUtil.seq(fa(Utils.clone(ts0)), fa(Utils.clone(ts1)));
    }

    public static Boolean fa(final VDMSet ts) {
        Long exists1Counter_1 = 0L;
        VDMSet set_1 = Utils.clone(ts);

        for (Iterator iterator_1 = set_1.iterator();
                iterator_1.hasNext() && (exists1Counter_1.longValue() < 2L);) {
            Tuple tuplePattern_1 = ((Tuple) iterator_1.next());
            Boolean success_1 = tuplePattern_1.compatible(Number.class,
                    Tuple.class);
            Number a = null;
            Number b = null;
            Number c = null;

            if (success_1) {
                a = ((Number) tuplePattern_1.get(0));

                Tuple tuplePattern_2 = Utils.clone(((Tuple) tuplePattern_1.get(
                            1)));
                success_1 = tuplePattern_2.compatible(Number.class, Number.class);

                if (success_1) {
                    b = ((Number) tuplePattern_2.get(0));
                    c = ((Number) tuplePattern_2.get(1));
                }
            }

            if (!(success_1)) {
                continue;
            }

            if (Utils.equals((c.longValue() -
                        (2L * Math.round(Math.floor(c.longValue() / 2L)))), 1L)) {
                exists1Counter_1++;
            }
        }

        return Utils.equals(exists1Counter_1.longValue(), 1L);
    }

    public String toString() {
        return "Entry{}";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class start {
    private static int hc = 0;
    private static start instance = null;

    public start() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static start getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new start();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof start;
    }

    public String toString() {
        return "<start>";
    }
}

##########

package quotes;

import org.overture.codegen.runtime.*;

import java.util.*;


public class append {
    private static int hc = 0;
    private static append instance = null;

    public append() {
        if (Utils.equals(hc, 0)) {
            hc = super.hashCode();
        }
    }

    public static append getInstance() {
        if (Utils.equals(instance, null)) {
            instance = new append();
        }

        return instance;
    }

    public int hashCode() {
        return hc;
    }

    public boolean equals(final Object obj) {
        return obj instanceof append;
    }

    public String toString() {
        return "<append>";
    }
}

##########
