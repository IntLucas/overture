//TODO1: maybe generate classes with the Comparable interface 
Packages
base org.overture.codegen.cgast;
analysis org.overture.codegen.cgast.analysis;
  
Tokens
/* This section declared tokens as internal types or external classes
 * internal definitions:
 *  plus='+';
 *  
 * external
 *  location = 'java:org.overture.ast.lex.LexLocation';
 */

  
  //Java
  java_Boolean = 'java:java.lang.Boolean';
  java_Integer = 'java:java.lang.Integer';
  java_String = 'java:java.lang.String';
  java_Long = 'java:java.lang.Long';
     
Abstract Syntax Tree
/* This section declares the AST by giving root nodes and their possible sub classes
 *
 * exp {-> package='org.overture.ast.expressions'}
 *      = {subclass1} [field_name]:field_type_must_either_be_root_or_token ...
 *      ;
 *
 */

/*
    Expressions
*/    
typeDeclCG {-> package='org.overture.codegen.cgast'}
    =   {class}
      	[access]:java_String 
    	[name]:java_String
    	[fields]:field*
    	[methods]:declCG.method*
    ;

declCG {-> package='org.overture.codegen.cgast.declarations'}
	=	{method} 
		[access]:java_String
		[static]:java_Boolean
		//[abstract]:java_Boolean
		[return_type]:typeCG
		[name]:java_String
		[formalParams]:localDeclCG.formalParam*
		//[throws]:type*
		[body]:stmCG
	|	{field} 
    	[access]:java_String
    	[static]:java_Boolean
    	[final]:java_Boolean
    	[type]:typeCG
    	[name]:java_String
    	[initial]:expCG
	;
    
localDeclCG {-> package='org.overture.codegen.cgast.declarations'}
           = {formalParam} [type]:typeCG [name]:java_String// [init]:exp
           ;

stmCG {-> package='org.overture.codegen.cgast.statements'}
           = {if_then} [condition]:expCG [body]:stmCG
           | {if_then_else} [condition]:expCG [thenBody]:stmCG [elseBody]:stmCG
           | {skip}
           ;

expCG {-> package='org.overture.codegen.cgast.expressions'}
    =	#Unary
    |	#Binary
    |	{intLiteral}	[value]:java_String
    |	{realLiteral}	[value]:java_String
    |	{charLiteral} [value]:java_String
    ;
    
#Binary {-> package='org.overture.codegen.cgast.expressions'}
    =   #Numeric 
    ;   
 
#Numeric {-> package='org.overture.codegen.cgast.expressions'}
    =	{div}
    |	{divide}
    |	{greaterEqual}
    |	{greater}
    |	{lessEqual}
    |	{less}
    |	{mod}   
    |	{plus} 
    |   {subtract}
    |	{rem}
    |	{times}       
    ;   
 
#Unary {-> package='org.overture.codegen.cgast.expressions'}
    =   {plus} 
    |   {minus}
    |	{cast}
    |	{isolation}       
    ;

typeCG {-> package='org.overture.codegen.cgast.types'}
    =   #basic
    |	{void}
    ;
    
#basic {-> package='org.overture.codegen.cgast.types'}
    =   #numeric
    |	{char}
    |	{bool}
    ;

#numeric {-> package='org.overture.codegen.cgast.types'}
    =   {int}
    |   {real} 
    ;
     
Aspect Declaration
/* This section allows fields of root types to be declared e.g. exp*/

//1) No check for clash wrt nameing of fields
//2) Only graphs
%expCG = (type):typeCG [vdmLocation]:java_String
    ;

%expCG->#Unary =  [exp]:expCG
    ;
    
%expCG->#Binary = [left]:expCG [right]:expCG
	;

