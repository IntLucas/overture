import org.overture.codegen.runtime.*;
import org.overture.codegen.runtime.traces.*;

import java.util.*;


@SuppressWarnings("all")
final public class Entry implements java.io.Serializable {
    private static St St = new St(0L);

    private Entry() {
    }

    public static Number op() {
        St.x = St.x.longValue() + 1L;

        return St.x;
    }

    public static Number id(final Number a) {
        return a;
    }

    public static void Entry_T1_Run(final TestAccumulator testAccumulator) {
        final Store store = new Store();
        final IdGenerator gen = new IdGenerator();

        {
            final Number ID_1 = gen.inc();
            store.staticReg(ID_1, Entry.class);
        }

        SequenceTraceNode sequence_1 = new SequenceTraceNode();
        final Number ID_2 = gen.inc();
        final Number ID_3 = gen.inc();

        {
            final Number a = op();
            final Number b = op();
            store.register(ID_2, a);
            store.register(ID_3, b);
        }

        SequenceTraceNode sequence_2 = new SequenceTraceNode();
        CallStatement callStm_1 = new CallStatement() {
                public Object execute() {
                    return id(((Number) store.getValue(ID_2)));
                }

                public String toString() {
                    return "id(" + Utils.toString(store.getValue(ID_2)) + ")";
                }
            };

        StatementTraceNode apply_1 = new StatementTraceNode(callStm_1);

        CallStatement callStm_2 = new CallStatement() {
                public Object execute() {
                    return id(((Number) store.getValue(ID_3)));
                }

                public String toString() {
                    return "id(" + Utils.toString(store.getValue(ID_3)) + ")";
                }
            };

        StatementTraceNode apply_2 = new StatementTraceNode(callStm_2);

        CallStatement callStm_3 = new CallStatement() {
                public Object execute() {
                    return op();
                }

                public String toString() {
                    return "op()";
                }
            };

        StatementTraceNode apply_3 = new StatementTraceNode(callStm_3);

        RepeatTraceNode repeat_1 = new RepeatTraceNode(apply_3, 1L, 3L);

        sequence_2.add(apply_1);
        sequence_2.add(apply_2);
        sequence_2.add(repeat_1);

        sequence_1.add(sequence_2);

        TraceNode.executeTests(sequence_1, testAccumulator, store);
    }

    public String toString() {
        return "Entry{" + "St := " + Utils.toString(St) + "}";
    }

    public static class St implements Record {
        public Number x;

        public St(final Number _x) {
            x = _x;
        }

        public boolean equals(final Object obj) {
            if (!(obj instanceof St)) {
                return false;
            }

            St other = ((St) obj);

            return Utils.equals(x, other.x);
        }

        public int hashCode() {
            return Utils.hashCode(x);
        }

        public St copy() {
            return new St(x);
        }

        public String toString() {
            return "mk_Entry`St" + Utils.formatFields(x);
        }
    }
}

##########
