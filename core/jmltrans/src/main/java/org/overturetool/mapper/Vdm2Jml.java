//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Sun 20-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.mapper;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;

import org.overturetool.jml.ast.imp.*;
import org.overturetool.jml.ast.itf.*;
import org.overturetool.ast.imp.*;
import org.overturetool.ast.itf.*;

//import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Vdm2Jml {


// ***** VDMTOOLS START Name=Information KEEP=NO
  public static class Information implements Record {

    public JmlAccessDefinition access;

    public Vector field_ulist;

    public JmlExpression invariant;


    public Information () {}


    public Information (JmlAccessDefinition p1, Vector p2, JmlExpression p3) {

      access = p1;
      field_ulist = p2;
      invariant = p3;
    }


    public Object clone () {
      return new Information((JmlAccessDefinition) UTIL.clone(access), (Vector) UTIL.clone(field_ulist), (JmlExpression) UTIL.clone(invariant));
    }


    public String toString () {
      return "mk_Vdm2Jml`Information(" + UTIL.toString(access) + "," + UTIL.toString(field_ulist) + "," + UTIL.toString(invariant) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof Information)) 
        return false;
      else {

        Information temp = (Information) obj;
        return UTIL.equals(access, temp.access) && UTIL.equals(field_ulist, temp.field_ulist) && UTIL.equals(invariant, temp.invariant);
      }
    }


    public int hashCode () {
      return (access == null ? 0 : access.hashCode()) + (field_ulist == null ? 0 : field_ulist.hashCode()) + (invariant == null ? 0 : invariant.hashCode());
    }

  }
// ***** VDMTOOLS END Name=Information
;


// ***** VDMTOOLS START Name=vdm_Error KEEP=NO
  public static class vdm_Error implements Record {

    public Long line;

    public Long column;

    public String constructor;


    public vdm_Error () {}


    public vdm_Error (Long p1, Long p2, String p3) {

      line = p1;
      column = p2;
      constructor = p3;
    }


    public Object clone () {
      return new vdm_Error(line, column, constructor);
    }


    public String toString () {
    	
      return "Line: " + this.line + " Column: " + this.column + " Problem: " + this.constructor + "\n";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof vdm_Error)) 
        return false;
      else {

        vdm_Error temp = (vdm_Error) obj;
        return UTIL.equals(line, temp.line) && UTIL.equals(column, temp.column) && UTIL.equals(constructor, temp.constructor);
      }
    }


    public int hashCode () {
      return (line == null ? 0 : line.hashCode()) + (column == null ? 0 : column.hashCode()) + (constructor == null ? 0 : constructor.hashCode());
    }

  }
// ***** VDMTOOLS END Name=vdm_Error
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=hold_utype_uinfo KEEP=NO
  public HashMap hold_utype_uinfo = new HashMap();
// ***** VDMTOOLS END Name=hold_utype_uinfo

// ***** VDMTOOLS START Name=interfaces_ulist KEEP=NO
  public HashSet interfaces_ulist = new HashSet();
// ***** VDMTOOLS END Name=interfaces_ulist

// ***** VDMTOOLS START Name=classes_ulist KEEP=NO
  public HashSet classes_ulist = new HashSet();
// ***** VDMTOOLS END Name=classes_ulist

// ***** VDMTOOLS START Name=to_uclass KEEP=NO
  public HashMap to_uclass = new HashMap();
// ***** VDMTOOLS END Name=to_uclass

// ***** VDMTOOLS START Name=log KEEP=NO
  public HashSet log = new HashSet();
// ***** VDMTOOLS END Name=log


// ***** VDMTOOLS START Name=Vdm2Jml KEEP=NO
  public Vdm2Jml () throws CGException {
    try {

      hold_utype_uinfo = new HashMap();
      interfaces_ulist = new HashSet();
      classes_ulist = new HashSet();
      to_uclass = new HashMap();
      log = new HashSet();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Vdm2Jml


// ***** VDMTOOLS START Name=init KEEP=NO
  public JmlSpecifications init (final OmlSpecifications specs) throws CGException {
    if (preprocess((OmlSpecifications) specs).booleanValue()) 
      return (JmlSpecifications) (JmlSpecifications) eliminateMI((OmlSpecifications) specs);
    else 
      return (JmlSpecifications) (JmlSpecifications) build_ujml((OmlSpecifications) specs);
  }
// ***** VDMTOOLS END Name=init


// ***** VDMTOOLS START Name=eliminateMI KEEP=NO
  public JmlSpecifications eliminateMI (final OmlSpecifications specs) throws CGException {
    if (canProceed((OmlSpecifications) specs).booleanValue()) {

      eliminate((OmlSpecifications) specs);
      checkInheritanceLost((OmlSpecifications) specs);
      return (JmlSpecifications) build_ujml((OmlSpecifications) specs);
    }
    else 
      return (JmlSpecifications) new JmlSpecifications(new Vector());
  }
// ***** VDMTOOLS END Name=eliminateMI


// ***** VDMTOOLS START Name=checkInheritanceLost KEEP=NO
  public void checkInheritanceLost (final OmlSpecifications specs) throws CGException {

    HashSet tmpVal_3 = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      String i = null;
      {
        for (Iterator enm_11 = interfaces_ulist.iterator(); enm_11.hasNext(); ) {

          String elem_10 = UTIL.ConvertToString(enm_11.next());
          i = elem_10;
          res_s_4.add(checkInheritanceLostHelper(i, (OmlSpecifications) specs));
        }
      }
    }
    tmpVal_3 = res_s_4;
    HashSet s = new HashSet();
    s = tmpVal_3;
    HashSet r = removeNil(s);
    {

      HashSet rhs_14 = new HashSet();
      rhs_14 = (HashSet) log.clone();
      rhs_14.addAll(r);
      log = (HashSet) UTIL.clone(rhs_14);
    }
  }
// ***** VDMTOOLS END Name=checkInheritanceLost


// ***** VDMTOOLS START Name=removeNil KEEP=NO
  public HashSet removeNil (final HashSet s) throws CGException {

    HashSet rexpr_2 = new HashSet();
    HashSet res_s_3 = new HashSet();
    {

      vdm_Error i = null;
      {
        for (Iterator enm_11 = s.iterator(); enm_11.hasNext(); ) {

          vdm_Error elem_10 = (vdm_Error) enm_11.next();
          i = elem_10;
          if (new Boolean(!UTIL.equals(i, null)).booleanValue()) {
            res_s_3.add(i);
          }
        }
      }
    }
    rexpr_2 = res_s_3;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=removeNil


// ***** VDMTOOLS START Name=checkInheritanceLostHelper KEEP=NO
  public vdm_Error checkInheritanceLostHelper (final String c, final OmlSpecifications specs) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = specs.getClassList();
    Vector l = null;
    l = tmpVal_4;
    vdm_Error r = getRightClass(c, l);
    return r;
  }
// ***** VDMTOOLS END Name=checkInheritanceLostHelper


// ***** VDMTOOLS START Name=getRightClass KEEP=NO
  public vdm_Error getRightClass (final String c, final Vector s) throws CGException {

    Boolean cl = getRightClassHelper(c, s);
    if (new Boolean(UTIL.equals(cl, new Boolean(false))).booleanValue()) 
      return null;
    else 
      return buildError(c);
  }
// ***** VDMTOOLS END Name=getRightClass


// ***** VDMTOOLS START Name=getRightClassHelper KEEP=NO
  public Boolean getRightClassHelper (final String c, final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return new Boolean(false);
    else {

      OmlClass h = (OmlClass) (OmlClass) s.get(0);
      Boolean cond_10 = null;
      String var1_11 = null;
      var1_11 = h.getIdentifier();
      cond_10 = new Boolean(UTIL.equals(var1_11, c));
      if (cond_10.booleanValue()) {

        Boolean tmpObj_18 = null;
        tmpObj_18 = h.hasInheritanceClause();
        return tmpObj_18;
      }
      else 
        return getRightClassHelper(c, new Vector(s.subList(1, s.size())));
    }
  }
// ***** VDMTOOLS END Name=getRightClassHelper


// ***** VDMTOOLS START Name=buildError KEEP=NO
  public vdm_Error buildError (final String c) throws CGException {

    vdm_Error rexpr_2 = null;
    String tmpVar_5 = null;
    String var1_6 = null;
    var1_6 = new String("Class ").concat(c);
    tmpVar_5 = var1_6.concat(new String(" will loose inheritance clause(s), because \n  it will be promoted to interface."));
    rexpr_2 = new vdm_Error(new Long(0), new Long(0), tmpVar_5);
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildError


// ***** VDMTOOLS START Name=canProceed KEEP=NO
  public Boolean canProceed (final OmlSpecifications specs) throws CGException {

    Vector cl = null;
    cl = specs.getClassList();
    Vector tmpVal_4 = null;
    tmpVal_4 = gatherInfo(cl);
    Vector s = null;
    s = tmpVal_4;
    return result(s);
  }
// ***** VDMTOOLS END Name=canProceed


// ***** VDMTOOLS START Name=result KEEP=NO
  public Boolean result (final Vector s) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = countFalses(s);
    Long c = null;
    c = tmpVal_3;
    if (new Boolean((c.intValue()) > (new Long(1).intValue())).booleanValue()) 
      return new Boolean(false);
    else 
      return new Boolean(true);
  }
// ***** VDMTOOLS END Name=result


// ***** VDMTOOLS START Name=countFalses KEEP=NO
  public Long countFalses (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return new Long(0);
    else 
      if (new Boolean(UTIL.equals((Boolean) s.get(0), new Boolean(false))).booleanValue()) 
        return new Long(new Long(1).intValue() + countFalses(new Vector(s.subList(1, s.size()))).intValue());
      else 
        return countFalses(new Vector(s.subList(1, s.size())));
  }
// ***** VDMTOOLS END Name=countFalses


// ***** VDMTOOLS START Name=gatherInfo KEEP=NO
  public Vector gatherInfo (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_21 = bind_l_4.iterator(); enm_21.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_21.next());
        i = e_7;
        Boolean pred_16 = null;
        OmlClass par_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_17 = (OmlClass) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_16 = hasMI((OmlClass) par_17);
        if (pred_16.booleanValue()) {

          Boolean reselem_12 = null;
          OmlClass par_13 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            par_13 = (OmlClass) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_12 = gatherInfoHelper((OmlClass) par_13);
          res_l_3.add(reselem_12);
        }
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=gatherInfo


// ***** VDMTOOLS START Name=gatherInfoHelper KEEP=NO
  public Boolean gatherInfoHelper (final OmlClass c) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = c.getClassBody();
    Vector body = null;
    body = tmpVal_3;
    String tmpVal_4 = null;
    tmpVal_4 = c.getIdentifier();
    String name = null;
    name = tmpVal_4;
    return gatherBlocksInfo(body, name);
  }
// ***** VDMTOOLS END Name=gatherInfoHelper


// ***** VDMTOOLS START Name=gatherBlocksInfo KEEP=NO
  public Boolean gatherBlocksInfo (final Vector s, final String n) throws CGException {

    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = s.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_20 = bind_l_6.iterator(); enm_20.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_20.next());
        i = e_9;
        Boolean reselem_14 = null;
        OmlDefinitionBlock par_15 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_15 = (OmlDefinitionBlock) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_14 = check((IOmlDefinitionBlock) par_15, n);
        res_l_5.add(reselem_14);
      }
      tmpVal_4 = res_l_5;
    }
    Vector q = null;
    q = tmpVal_4;
    return land(q);
  }
// ***** VDMTOOLS END Name=gatherBlocksInfo


// ***** VDMTOOLS START Name=check KEEP=NO
  public Boolean check (final IOmlDefinitionBlock b, final String n) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlOperationDefinitions))) 
        succ_3 = false;
      if (succ_3) 
        return checkOperations((OmlOperationDefinitions) b, n);
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlInstanceVariableDefinitions))) 
          succ_3 = false;
        if (succ_3) 
          return checkInstanceVars((OmlInstanceVariableDefinitions) b);
        else {

          succ_3 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlFunctionDefinitions))) 
            succ_3 = false;
          if (succ_3) 
            return checkFunctions((OmlFunctionDefinitions) b);
          else 
            return new Boolean(true);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=check


// ***** VDMTOOLS START Name=checkOperations KEEP=NO
  public Boolean checkOperations (final OmlOperationDefinitions op, final String n) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = op.getOperationList();
    Vector l = null;
    l = tmpVal_4;
    Vector tmpVal_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = l.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_21 = bind_l_7.iterator(); enm_21.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_21.next());
        i = e_10;
        Boolean reselem_15 = null;
        IOmlOperationDefinition par_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= l.size())) 
          par_16 = (IOmlOperationDefinition) l.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = checkOperation((OmlOperationDefinition) par_16, n);
        res_l_6.add(reselem_15);
      }
      tmpVal_5 = res_l_6;
    }
    Vector s = null;
    s = tmpVal_5;
    return land(s);
  }
// ***** VDMTOOLS END Name=checkOperations


// ***** VDMTOOLS START Name=checkOperation KEEP=NO
  public Boolean checkOperation (final OmlOperationDefinition op, final String n) throws CGException {

    IOmlOperationShape tmpVal_4 = null;
    tmpVal_4 = (IOmlOperationShape) op.getShape();
    IOmlOperationShape s = null;
    s = (IOmlOperationShape) tmpVal_4;
    boolean succ_5 = true;
    {

      succ_5 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlExplicitOperation))) 
        succ_5 = false;
      if (succ_5) 
        return checkExplicitOperation((OmlExplicitOperation) s, n);
      else {

        succ_5 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlImplicitOperation))) 
          succ_5 = false;
        if (succ_5) 
          return checkImplicitOperation((OmlImplicitOperation) s, n);
        else {

          succ_5 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlExtendedExplicitOperation))) 
            succ_5 = false;
          if (succ_5) 
            return checkExtendedExplicitOperation((OmlExtendedExplicitOperation) s, n);
          else 
            return new Boolean(true);
        }
      }
    }
  }
// ***** VDMTOOLS END Name=checkOperation


// ***** VDMTOOLS START Name=checkImplicitOperation KEEP=NO
  public Boolean checkImplicitOperation (final OmlImplicitOperation op, final String n) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = op.getIdentifier();
    String c = null;
    c = tmpVal_4;
    if (new Boolean(UTIL.equals(n, c)).booleanValue()) 
      return new Boolean(false);
    else 
      return new Boolean(true);
  }
// ***** VDMTOOLS END Name=checkImplicitOperation


// ***** VDMTOOLS START Name=checkExplicitOperation KEEP=NO
  public Boolean checkExplicitOperation (final OmlExplicitOperation op, final String n) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = op.getIdentifier();
    String name = null;
    name = tmpVal_4;
    IOmlOperationBody tmpVal_5 = null;
    tmpVal_5 = (IOmlOperationBody) op.getBody();
    IOmlOperationBody body = null;
    body = (IOmlOperationBody) tmpVal_5;
    Boolean tmpVal_6 = null;
    tmpVal_6 = body.hasStatement();
    Boolean b = null;
    b = tmpVal_6;
    Boolean rexpr_7 = null;
    Boolean var1_8 = null;
    {
      if ((var1_8 = new Boolean(!new Boolean(UTIL.equals(name, n)).booleanValue())).booleanValue()) 
        var1_8 = new Boolean(!b.booleanValue());
    }
    {
      if ((rexpr_7 = var1_8).booleanValue()) {

        Boolean var2_15 = null;
        Boolean var1_16 = null;
        var1_16 = body.getNotYetSpecified();
        {
          if (!(var2_15 = var1_16).booleanValue()) {

            Boolean var2_17 = null;
            var2_17 = body.getSubclassResponsibility();
            var2_15 = var2_17;
          }
        }
        rexpr_7 = var2_15;
      }
    }
    return rexpr_7;
  }
// ***** VDMTOOLS END Name=checkExplicitOperation


// ***** VDMTOOLS START Name=checkExtendedExplicitOperation KEEP=NO
  public Boolean checkExtendedExplicitOperation (final OmlExtendedExplicitOperation op, final String n) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = op.getIdentifier();
    String name = null;
    name = tmpVal_4;
    IOmlOperationBody tmpVal_5 = null;
    tmpVal_5 = (IOmlOperationBody) op.getBody();
    IOmlOperationBody body = null;
    body = (IOmlOperationBody) tmpVal_5;
    Boolean tmpVal_6 = null;
    tmpVal_6 = body.hasStatement();
    Boolean b = null;
    b = tmpVal_6;
    Boolean rexpr_7 = null;
    Boolean var1_8 = null;
    {
      if ((var1_8 = new Boolean(!new Boolean(UTIL.equals(name, n)).booleanValue())).booleanValue()) 
        var1_8 = new Boolean(!b.booleanValue());
    }
    {
      if ((rexpr_7 = var1_8).booleanValue()) {

        Boolean var2_15 = null;
        Boolean var1_16 = null;
        var1_16 = body.getNotYetSpecified();
        {
          if (!(var2_15 = var1_16).booleanValue()) {

            Boolean var2_17 = null;
            var2_17 = body.getSubclassResponsibility();
            var2_15 = var2_17;
          }
        }
        rexpr_7 = var2_15;
      }
    }
    return rexpr_7;
  }
// ***** VDMTOOLS END Name=checkExtendedExplicitOperation


// ***** VDMTOOLS START Name=checkInstanceVars KEEP=NO
  public Boolean checkInstanceVars (final OmlInstanceVariableDefinitions iv) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = iv.getVariablesList();
    Vector l = null;
    l = tmpVal_3;
    if (new Boolean(new Long(l.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return new Boolean(true);
    else 
      return new Boolean(false);
  }
// ***** VDMTOOLS END Name=checkInstanceVars


// ***** VDMTOOLS START Name=checkFunctions KEEP=NO
  public Boolean checkFunctions (final OmlFunctionDefinitions fu) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = fu.getFunctionList();
    Vector l = null;
    l = tmpVal_3;
    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = l.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_19 = bind_l_6.iterator(); enm_19.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_19.next());
        i = e_9;
        Boolean reselem_14 = null;
        IOmlFunctionDefinition par_15 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= l.size())) 
          par_15 = (IOmlFunctionDefinition) l.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_14 = checkFunction((OmlFunctionDefinition) par_15);
        res_l_5.add(reselem_14);
      }
      tmpVal_4 = res_l_5;
    }
    Vector s = null;
    s = tmpVal_4;
    return land(s);
  }
// ***** VDMTOOLS END Name=checkFunctions


// ***** VDMTOOLS START Name=checkFunction KEEP=NO
  public Boolean checkFunction (final OmlFunctionDefinition fd) throws CGException {

    IOmlFunctionShape tmpVal_3 = null;
    tmpVal_3 = (IOmlFunctionShape) fd.getShape();
    IOmlFunctionShape s = null;
    s = (IOmlFunctionShape) tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlExplicitFunction))) 
        succ_4 = false;
      if (succ_4) 
        return checkExplicitFunction((OmlExplicitFunction) s);
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlImplicitFunction))) 
          succ_4 = false;
        if (succ_4) 
          return new Boolean(true);
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlExtendedExplicitFunction))) 
            succ_4 = false;
          if (succ_4) 
            return checkExtendedExplicitFunction((OmlExtendedExplicitFunction) s);
          else {

            succ_4 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlTypelessExplicitFunction))) 
              succ_4 = false;
            if (succ_4) 
              return checkTypelessExplicitFunction((OmlTypelessExplicitFunction) s);
            else 
              return new Boolean(true);
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=checkFunction


// ***** VDMTOOLS START Name=checkExplicitFunction KEEP=NO
  public Boolean checkExplicitFunction (final OmlExplicitFunction f) throws CGException {

    IOmlFunctionBody tmpVal_3 = null;
    tmpVal_3 = (IOmlFunctionBody) f.getBody();
    IOmlFunctionBody body = null;
    body = (IOmlFunctionBody) tmpVal_3;
    Boolean cond_4 = null;
    Boolean var1_5 = null;
    var1_5 = body.hasFunctionBody();
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_6 = null;
        Boolean var1_7 = null;
        var1_7 = body.getNotYetSpecified();
        {
          if (!(var2_6 = var1_7).booleanValue()) {

            Boolean var2_8 = null;
            var2_8 = body.getSubclassResponsibility();
            var2_6 = var2_8;
          }
        }
        cond_4 = var2_6;
      }
    }
    if (cond_4.booleanValue()) 
      return new Boolean(false);
    else 
      return new Boolean(true);
  }
// ***** VDMTOOLS END Name=checkExplicitFunction


// ***** VDMTOOLS START Name=checkExtendedExplicitFunction KEEP=NO
  public Boolean checkExtendedExplicitFunction (final OmlExtendedExplicitFunction f) throws CGException {

    IOmlFunctionBody tmpVal_3 = null;
    tmpVal_3 = (IOmlFunctionBody) f.getBody();
    IOmlFunctionBody body = null;
    body = (IOmlFunctionBody) tmpVal_3;
    Boolean cond_4 = null;
    Boolean var1_5 = null;
    var1_5 = body.hasFunctionBody();
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_6 = null;
        Boolean var1_7 = null;
        var1_7 = body.getNotYetSpecified();
        {
          if (!(var2_6 = var1_7).booleanValue()) {

            Boolean var2_8 = null;
            var2_8 = body.getSubclassResponsibility();
            var2_6 = var2_8;
          }
        }
        cond_4 = var2_6;
      }
    }
    if (cond_4.booleanValue()) 
      return new Boolean(false);
    else 
      return new Boolean(true);
  }
// ***** VDMTOOLS END Name=checkExtendedExplicitFunction


// ***** VDMTOOLS START Name=checkTypelessExplicitFunction KEEP=NO
  public Boolean checkTypelessExplicitFunction (final OmlTypelessExplicitFunction f) throws CGException {

    IOmlFunctionBody tmpVal_3 = null;
    tmpVal_3 = (IOmlFunctionBody) f.getBody();
    IOmlFunctionBody body = null;
    body = (IOmlFunctionBody) tmpVal_3;
    Boolean cond_4 = null;
    Boolean var1_5 = null;
    var1_5 = body.hasFunctionBody();
    {
      if ((cond_4 = var1_5).booleanValue()) {

        Boolean var2_6 = null;
        Boolean var1_7 = null;
        var1_7 = body.getNotYetSpecified();
        {
          if (!(var2_6 = var1_7).booleanValue()) {

            Boolean var2_8 = null;
            var2_8 = body.getSubclassResponsibility();
            var2_6 = var2_8;
          }
        }
        cond_4 = var2_6;
      }
    }
    if (cond_4.booleanValue()) 
      return new Boolean(false);
    else 
      return new Boolean(true);
  }
// ***** VDMTOOLS END Name=checkTypelessExplicitFunction


// ***** VDMTOOLS START Name=eliminate KEEP=NO
  public void eliminate (final OmlSpecifications specs) throws CGException {

    interfaces_ulist = (HashSet) UTIL.clone(updateInterfaceList((OmlSpecifications) specs));
    classes_ulist = (HashSet) UTIL.clone(updateClassList((OmlSpecifications) specs));
  }
// ***** VDMTOOLS END Name=eliminate


// ***** VDMTOOLS START Name=updateInterfaceList KEEP=NO
  public HashSet updateInterfaceList (final OmlSpecifications specs) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = specs.getClassList();
    Vector s = null;
    s = tmpVal_3;
    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = s.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_32 = bind_l_6.iterator(); enm_32.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_32.next());
        i = e_9;
        Boolean pred_27 = null;
        IOmlClass par_28 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_28 = (IOmlClass) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_27 = hasMI((OmlClass) par_28);
        if (pred_27.booleanValue()) {

          Object reselem_14 = null;
          {

            IOmlInheritanceClause tmpVal_16 = null;
            IOmlClass obj_17 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
              obj_17 = (IOmlClass) s.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            tmpVal_16 = (IOmlInheritanceClause) obj_17.getInheritanceClause();
            IOmlInheritanceClause q = null;
            q = (IOmlInheritanceClause) tmpVal_16;
            Vector k = null;
            k = q.getIdentifierList();
            Object tmpVal_21 = null;
            tmpVal_21 = getInterfaces(k, specs);
            Object t = null;
            t = tmpVal_21;
            reselem_14 = t;
          }
          res_l_5.add(reselem_14);
        }
      }
      tmpVal_4 = res_l_5;
    }
    Vector l = null;
    l = tmpVal_4;
    Vector tmpVal_33 = null;
    Vector rdcseq_35 = new Vector();
    for (Iterator enm_38 = l.iterator(); enm_38.hasNext(); ) {

      Object e_36 = enm_38.next();
      rdcseq_35.addAll((Vector) e_36);
    }
    tmpVal_33 = rdcseq_35;
    Vector q = null;
    q = tmpVal_33;
    HashSet rexpr_39 = new HashSet();
    HashSet set_41 = new HashSet();
    Enumeration enm_42 = q.elements();
    while ( enm_42.hasMoreElements())
      set_41.add(enm_42.nextElement());
    rexpr_39 = set_41;
    return rexpr_39;
  }
// ***** VDMTOOLS END Name=updateInterfaceList


// ***** VDMTOOLS START Name=getInterfaces KEEP=NO
  public Vector getInterfaces (final Vector s, final OmlSpecifications specs) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = specs.getClassList();
    Vector c = null;
    c = tmpVal_4;
    Vector tmpVal_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = s.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_24 = bind_l_7.iterator(); enm_24.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_24.next());
        i = e_10;
        Boolean pred_18 = null;
        String par_19 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_19 = UTIL.ConvertToString(s.get(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_18 = isInterfaceIn(par_19, c);
        if (pred_18.booleanValue()) {

          String reselem_15 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_15 = UTIL.ConvertToString(s.get(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_6.add(reselem_15);
        }
      }
      tmpVal_5 = res_l_6;
    }
    Vector l = null;
    l = tmpVal_5;
    return l;
  }
// ***** VDMTOOLS END Name=getInterfaces


// ***** VDMTOOLS START Name=isInterfaceIn KEEP=NO
  public Boolean isInterfaceIn (final String name, final Vector cls) throws CGException {

    OmlClass tmpVal_4 = null;
    tmpVal_4 = (OmlClass) (OmlClass) vdm_getClass(name, cls);
    OmlClass c = null;
    c = (OmlClass) tmpVal_4;
    return gatherInfoHelper((OmlClass) c);
  }
// ***** VDMTOOLS END Name=isInterfaceIn


// ***** VDMTOOLS START Name=vdm_getClass KEEP=NO
  public OmlClass vdm_getClass (final String n, final Vector s) throws CGException {
    if (new Boolean((new Long(s.size()).intValue()) > (new Long(0).intValue())).booleanValue()) {

      OmlClass head = (OmlClass) (OmlClass) s.get(0);
      Boolean cond_11 = null;
      String var1_12 = null;
      var1_12 = head.getIdentifier();
      cond_11 = new Boolean(UTIL.equals(var1_12, n));
      if (cond_11.booleanValue()) 
        return (OmlClass) (OmlClass) s.get(0);
      else 
        return (OmlClass) vdm_getClass(n, new Vector(s.subList(1, s.size())));
    }
    else 
      return (OmlClass) new OmlClass();
  }
// ***** VDMTOOLS END Name=vdm_getClass


// ***** VDMTOOLS START Name=updateClassList KEEP=NO
  public HashSet updateClassList (final OmlSpecifications specs) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = specs.getClassList();
    Vector s = null;
    s = tmpVal_3;
    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = s.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_29 = bind_l_6.iterator(); enm_29.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_29.next());
        i = e_9;
        Boolean pred_24 = null;
        IOmlClass par_25 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_25 = (IOmlClass) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_24 = hasMI((OmlClass) par_25);
        if (pred_24.booleanValue()) {

          Vector reselem_14 = null;
          {

            IOmlInheritanceClause tmpVal_16 = null;
            IOmlClass obj_17 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
              obj_17 = (IOmlClass) s.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            tmpVal_16 = (IOmlInheritanceClause) obj_17.getInheritanceClause();
            IOmlInheritanceClause q = null;
            q = (IOmlInheritanceClause) tmpVal_16;
            Vector k = null;
            k = q.getIdentifierList();
            Vector tmpVal_21 = null;
            tmpVal_21 = getClasses(k, (OmlSpecifications) specs);
            Vector t = null;
            t = tmpVal_21;
            reselem_14 = t;
          }
          res_l_5.add(reselem_14);
        }
      }
      tmpVal_4 = res_l_5;
    }
    Vector l = null;
    l = tmpVal_4;
    Vector tmpVal_30 = null;
    Vector rdcseq_32 = new Vector();
    for (Iterator enm_35 = l.iterator(); enm_35.hasNext(); ) {

      Vector e_33 = (Vector) UTIL.ConvertToList(enm_35.next());
      rdcseq_32.addAll(e_33);
    }
    tmpVal_30 = rdcseq_32;
    Vector q = null;
    q = tmpVal_30;
    HashSet rexpr_36 = new HashSet();
    HashSet set_38 = new HashSet();
    Enumeration enm_39 = q.elements();
    while ( enm_39.hasMoreElements())
      set_38.add(enm_39.nextElement());
    rexpr_36 = set_38;
    return rexpr_36;
  }
// ***** VDMTOOLS END Name=updateClassList


// ***** VDMTOOLS START Name=getClasses KEEP=NO
  public Vector getClasses (final Vector s, final OmlSpecifications specs) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = specs.getClassList();
    Vector c = null;
    c = tmpVal_4;
    Vector tmpVal_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = s.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_24 = bind_l_7.iterator(); enm_24.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_24.next());
        i = e_10;
        Boolean pred_18 = null;
        String par_19 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_19 = UTIL.ConvertToString(s.get(i.intValue() - 1));
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_18 = isClassIn(par_19, c);
        if (pred_18.booleanValue()) {

          String reselem_15 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_15 = UTIL.ConvertToString(s.get(i.intValue() - 1));
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_6.add(reselem_15);
        }
      }
      tmpVal_5 = res_l_6;
    }
    Vector l = null;
    l = tmpVal_5;
    return l;
  }
// ***** VDMTOOLS END Name=getClasses


// ***** VDMTOOLS START Name=isClassIn KEEP=NO
  public Boolean isClassIn (final String name, final Vector cls) throws CGException {

    OmlClass tmpVal_4 = null;
    tmpVal_4 = (OmlClass) (OmlClass) vdm_getClass(name, cls);
    OmlClass c = null;
    c = (OmlClass) tmpVal_4;
    return new Boolean(!gatherInfoHelper((OmlClass) c).booleanValue());
  }
// ***** VDMTOOLS END Name=isClassIn


// ***** VDMTOOLS START Name=preprocess KEEP=NO
  public Boolean preprocess (final OmlSpecifications specs) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = specs.getClassList();
    Vector l = null;
    l = tmpVal_3;
    return hasMultipleInheritance(l);
  }
// ***** VDMTOOLS END Name=preprocess


// ***** VDMTOOLS START Name=hasMultipleInheritance KEEP=NO
  public Boolean hasMultipleInheritance (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        Boolean reselem_13 = null;
        OmlClass par_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_14 = (OmlClass) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = hasMI((OmlClass) par_14);
        res_l_4.add(reselem_13);
      }
      tmpVal_3 = res_l_4;
    }
    Vector q = null;
    q = tmpVal_3;
    return lor(q);
  }
// ***** VDMTOOLS END Name=hasMultipleInheritance


// ***** VDMTOOLS START Name=lor KEEP=NO
  public Boolean lor (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return new Boolean(false);
    else {

      Boolean rexpr_6 = null;
      {
        if (!(rexpr_6 = (Boolean) s.get(0)).booleanValue()) 
          rexpr_6 = lor(new Vector(s.subList(1, s.size())));
      }
      return rexpr_6;
    }
  }
// ***** VDMTOOLS END Name=lor


// ***** VDMTOOLS START Name=hasMI KEEP=NO
  public Boolean hasMI (final OmlClass c) throws CGException {

    IOmlInheritanceClause ic = null;
    ic = (IOmlInheritanceClause) c.getInheritanceClause();
    Boolean cond_4 = null;
    cond_4 = c.hasInheritanceClause();
    if (cond_4.booleanValue()) {

      Long tmpVal_7 = null;
      Vector unArg_8 = null;
      unArg_8 = ic.getIdentifierList();
      tmpVal_7 = new Long(unArg_8.size());
      Long l = null;
      l = tmpVal_7;
      if (new Boolean((l.intValue()) > (new Long(1).intValue())).booleanValue()) 
        return new Boolean(true);
      else 
        return new Boolean(false);
    }
    else 
      return new Boolean(false);
  }
// ***** VDMTOOLS END Name=hasMI


// ***** VDMTOOLS START Name=gatherTypeInfo KEEP=NO
  public Boolean gatherTypeInfo (final OmlSpecifications specs) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = specs.getClassList();
    Vector classes = null;
    classes = tmpVal_3;
    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = classes.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_19 = bind_l_6.iterator(); enm_19.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_19.next());
        i = e_9;
        Boolean reselem_14 = null;
        IOmlClass par_15 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= classes.size())) 
          par_15 = (IOmlClass) classes.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_14 = buildClassEntry((OmlClass) par_15);
        res_l_5.add(reselem_14);
      }
      tmpVal_4 = res_l_5;
    }
    Vector s = null;
    s = tmpVal_4;
    return land(s);
  }
// ***** VDMTOOLS END Name=gatherTypeInfo


// ***** VDMTOOLS START Name=land KEEP=NO
  public Boolean land (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return new Boolean(true);
    else {

      Boolean rexpr_6 = null;
      {
        if ((rexpr_6 = (Boolean) s.get(0)).booleanValue()) 
          rexpr_6 = land(new Vector(s.subList(1, s.size())));
      }
      return rexpr_6;
    }
  }
// ***** VDMTOOLS END Name=land


// ***** VDMTOOLS START Name=buildClassEntry KEEP=NO
  public Boolean buildClassEntry (final OmlClass c) throws CGException {

    String cn = null;
    cn = c.getIdentifier();
    Vector bl = null;
    bl = c.getClassBody();
    HashMap ts = buildTypeInfo(bl);
    HashMap cl = toClassInformation(bl);
    {

      hold_utype_uinfo.put(cn, ts);
      HashMap rhs_12 = new HashMap();
      rhs_12 = new HashMap(to_uclass);
      rhs_12.putAll(cl);
      to_uclass = (HashMap) UTIL.clone(rhs_12);
      return new Boolean(true);
    }
  }
// ***** VDMTOOLS END Name=buildClassEntry


// ***** VDMTOOLS START Name=toClassInformation KEEP=NO
  public HashMap toClassInformation (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_21 = bind_l_5.iterator(); enm_21.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_21.next());
        i = e_8;
        Boolean pred_16 = null;
        IOmlDefinitionBlock obj_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_17 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_16 = new Boolean(obj_17 instanceof OmlTypeDefinitions);
        if (pred_16.booleanValue()) {

          IOmlDefinitionBlock reselem_13 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_13 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_4.add(reselem_13);
        }
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    return buildToClassInfo(l);
  }
// ***** VDMTOOLS END Name=toClassInformation


// ***** VDMTOOLS START Name=buildToClassInfo KEEP=NO
  public HashMap buildToClassInfo (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        Vector reselem_13 = null;
        OmlTypeDefinitions obj_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_14 = (OmlTypeDefinitions) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = obj_14.getTypeList();
        res_l_4.add(reselem_13);
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    HashMap rexpr_19 = new HashMap();
    Vector par_20 = null;
    Vector rdcseq_22 = new Vector();
    for (Iterator enm_25 = l.iterator(); enm_25.hasNext(); ) {

      Vector e_23 = (Vector) UTIL.ConvertToList(enm_25.next());
      rdcseq_22.addAll(e_23);
    }
    par_20 = rdcseq_22;
    rexpr_19 = buildToClass(par_20);
    return rexpr_19;
  }
// ***** VDMTOOLS END Name=buildToClassInfo


// ***** VDMTOOLS START Name=buildToClass KEEP=NO
  public HashMap buildToClass (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_22 = bind_l_5.iterator(); enm_22.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_22.next());
        i = e_8;
        Boolean pred_16 = null;
        IOmlTypeShape par_17 = null;
        OmlTypeDefinition obj_18 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_18 = (OmlTypeDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        par_17 = (IOmlTypeShape) obj_18.getShape();
        pred_16 = selectShape((IOmlTypeShape) par_17);
        if (pred_16.booleanValue()) {

          OmlTypeDefinition reselem_13 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_13 = (OmlTypeDefinition) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_4.add(reselem_13);
        }
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    return buildClassMap(l);
  }
// ***** VDMTOOLS END Name=buildToClass


// ***** VDMTOOLS START Name=buildClassMap KEEP=NO
  public HashMap buildClassMap (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) 
      return new HashMap();
    else {

      OmlTypeDefinition fst = (OmlTypeDefinition) (OmlTypeDefinition) s.get(0);
      Vector tail = new Vector(s.subList(1, s.size()));
      IOmlTypeShape shp = null;
      shp = (IOmlTypeShape) fst.getShape();
      IOmlAccessDefinition tmpVal_12 = null;
      tmpVal_12 = (IOmlAccessDefinition) fst.getAccess();
      IOmlAccessDefinition access = null;
      access = (IOmlAccessDefinition) tmpVal_12;
      Information tmpVal_13 = null;
      tmpVal_13 = buildMapValue((IOmlTypeShape) shp, (OmlAccessDefinition) access);
      Information val = null;
      val = tmpVal_13;
      String key = getKey((IOmlTypeShape) shp);
      HashMap rexpr_18 = new HashMap();
      HashMap seqmap_21 = new HashMap();
      seqmap_21 = new HashMap();
      seqmap_21.put(key, val);
      HashMap modmap_19 = new HashMap();
      modmap_19 = buildClassMap(tail);
      rexpr_18 = new HashMap(seqmap_21);
      rexpr_18.putAll(modmap_19);
      return rexpr_18;
    }
  }
// ***** VDMTOOLS END Name=buildClassMap


// ***** VDMTOOLS START Name=buildMapValue KEEP=NO
  public Information buildMapValue (final IOmlTypeShape s, final OmlAccessDefinition access) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlComplexType))) 
        succ_3 = false;
      if (succ_3) 
        return getMapValue((OmlComplexType) s, (OmlAccessDefinition) access);
      else {

        Information rexpr_6 = null;
        rexpr_6 = new Information((JmlAccessDefinition) new JmlAccessDefinition(), new Vector(), null);
        return rexpr_6;
      }
    }
  }
// ***** VDMTOOLS END Name=buildMapValue


// ***** VDMTOOLS START Name=getMapValue KEEP=NO
  public Information getMapValue (final OmlComplexType c, final OmlAccessDefinition access) throws CGException {

    Vector fld = null;
    fld = c.getFieldList();
    IOmlInvariant tmpVal_5 = null;
    tmpVal_5 = (IOmlInvariant) c.getInvariant();
    IOmlInvariant iv = null;
    iv = (IOmlInvariant) tmpVal_5;
    Vector field = convertFieldList(fld);
    JmlExpression ninv = (JmlExpression) (JmlExpression) convertInvariant((OmlInvariant) iv);
    JmlAccessDefinition naccess = (JmlAccessDefinition) (JmlAccessDefinition) buildJmlAccess((OmlAccessDefinition) access);
    Information rexpr_12 = null;
    rexpr_12 = new Information((JmlAccessDefinition) naccess, field, (JmlExpression) ninv);
    return rexpr_12;
  }
// ***** VDMTOOLS END Name=getMapValue


// ***** VDMTOOLS START Name=convertFieldList KEEP=NO
  public Vector convertFieldList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        JmlField reselem_12 = null;
        OmlField par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlField) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (JmlField) convertField((OmlField) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertFieldList


// ***** VDMTOOLS START Name=convertField KEEP=NO
  public JmlField convertField (final OmlField f) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = f.getIdentifier();
    String id = null;
    id = tmpVal_3;
    IOmlType tmpVal_4 = null;
    tmpVal_4 = (IOmlType) f.getType();
    IOmlType tp = null;
    tp = (IOmlType) tmpVal_4;
    IJmlType ntp = (IJmlType) (IJmlType) convertType((IOmlType) tp);
    String nid = convertId(id);
    return (JmlField) new JmlField(nid, ntp);
  }
// ***** VDMTOOLS END Name=convertField


// ***** VDMTOOLS START Name=convertId KEEP=NO
  public String convertId (final String s) throws CGException {
    if (new Boolean(UTIL.equals(s, null)).booleanValue()) 
      return UTIL.ConvertToString(new Vector());
    else 
      return s;
  }
// ***** VDMTOOLS END Name=convertId


// ***** VDMTOOLS START Name=convertInvariant KEEP=NO
  public JmlExpression convertInvariant (final OmlInvariant invar) throws CGException {
    if (new Boolean(UTIL.equals(invar, null)).booleanValue()) 
      return null;
    else {

      IOmlExpression tmpVal_6 = null;
      tmpVal_6 = (IOmlExpression) invar.getExpression();
      IOmlExpression iv = null;
      iv = (IOmlExpression) tmpVal_6;
      IJmlExpression tmpVal_7 = null;
      tmpVal_7 = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) iv);
      IJmlExpression ex = null;
      ex = (IJmlExpression) tmpVal_7;
      return (JmlExpression) ex;
    }
  }
// ***** VDMTOOLS END Name=convertInvariant


// ***** VDMTOOLS START Name=getKey KEEP=NO
  public String getKey (final IOmlTypeShape s) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlComplexType))) 
        succ_2 = false;
      if (succ_2) 
        return getKeyValue((OmlComplexType) s);
      else 
        return UTIL.ConvertToString(new Vector());
    }
  }
// ***** VDMTOOLS END Name=getKey


// ***** VDMTOOLS START Name=getKeyValue KEEP=NO
  public String getKeyValue (final OmlComplexType c) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = c.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getKeyValue


// ***** VDMTOOLS START Name=selectShape KEEP=NO
  public Boolean selectShape (final IOmlTypeShape s) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlComplexType))) 
        succ_2 = false;
      if (succ_2) 
        return new Boolean(true);
      else 
        return new Boolean(false);
    }
  }
// ***** VDMTOOLS END Name=selectShape


// ***** VDMTOOLS START Name=buildTypeInfo KEEP=NO
  public HashMap buildTypeInfo (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = collectTypeBlocks(s);
    Vector q = null;
    q = tmpVal_3;
    HashMap r = collectTypeInfo(q);
    return r;
  }
// ***** VDMTOOLS END Name=buildTypeInfo


// ***** VDMTOOLS START Name=collectTypeBlocks KEEP=NO
  public Vector collectTypeBlocks (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_20 = bind_l_4.iterator(); enm_20.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_20.next());
        i = e_7;
        Boolean pred_15 = null;
        IOmlDefinitionBlock obj_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_16 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_15 = new Boolean(obj_16 instanceof OmlTypeDefinitions);
        if (pred_15.booleanValue()) {

          IOmlDefinitionBlock reselem_12 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            reselem_12 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_3.add(reselem_12);
        }
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=collectTypeBlocks


// ***** VDMTOOLS START Name=collectTypeInfo KEEP=NO
  public HashMap collectTypeInfo (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = mergeTypeDefs(s);
    Vector q = null;
    q = tmpVal_3;
    Vector tmpVal_5 = null;
    tmpVal_5 = constructTypeInfo(q);
    Vector l = null;
    l = tmpVal_5;
    HashMap tmpVal_7 = new HashMap();
    tmpVal_7 = mergeTypeInfos(l);
    HashMap m = new HashMap();
    m = tmpVal_7;
    return m;
  }
// ***** VDMTOOLS END Name=collectTypeInfo


// ***** VDMTOOLS START Name=mergeTypeDefs KEEP=NO
  public Vector mergeTypeDefs (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    Vector unArg_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        Vector reselem_13 = null;
        OmlTypeDefinitions obj_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_14 = (OmlTypeDefinitions) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = obj_14.getTypeList();
        res_l_4.add(reselem_13);
      }
      unArg_3 = res_l_4;
    }
    Vector rdcseq_19 = new Vector();
    for (Iterator enm_22 = unArg_3.iterator(); enm_22.hasNext(); ) {

      Vector e_20 = (Vector) UTIL.ConvertToList(enm_22.next());
      rdcseq_19.addAll(e_20);
    }
    rexpr_2 = rdcseq_19;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=mergeTypeDefs


// ***** VDMTOOLS START Name=constructTypeInfo KEEP=NO
  public Vector constructTypeInfo (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        HashMap reselem_12 = new HashMap();
        OmlTypeDefinition par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlTypeDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = buildTypeInfoElement((OmlTypeDefinition) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=constructTypeInfo


// ***** VDMTOOLS START Name=buildTypeInfoElement KEEP=NO
  public HashMap buildTypeInfoElement (final OmlTypeDefinition e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = getTypeName((OmlTypeDefinition) e);
    String name = null;
    name = tmpVal_3;
    JmlType tmpVal_5 = null;
    tmpVal_5 = (JmlType) (JmlType) getConvertedType((OmlTypeDefinition) e);
    JmlType val = null;
    val = (JmlType) tmpVal_5;
    HashMap rexpr_7 = new HashMap();
    rexpr_7 = new HashMap();
    rexpr_7.put(name, val);
    return rexpr_7;
  }
// ***** VDMTOOLS END Name=buildTypeInfoElement


// ***** VDMTOOLS START Name=getTypeName KEEP=NO
  public String getTypeName (final OmlTypeDefinition e) throws CGException {

    IOmlTypeShape tmpVal_3 = null;
    tmpVal_3 = (IOmlTypeShape) e.getShape();
    IOmlTypeShape s = null;
    s = (IOmlTypeShape) tmpVal_3;
    String tmpVal_4 = null;
    tmpVal_4 = getNameFromShape((IOmlTypeShape) s);
    String n = null;
    n = tmpVal_4;
    return n;
  }
// ***** VDMTOOLS END Name=getTypeName


// ***** VDMTOOLS START Name=getNameFromShape KEEP=NO
  public String getNameFromShape (final IOmlTypeShape s) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlSimpleType))) 
        succ_2 = false;
      if (succ_2) 
        return getSimpleName((OmlSimpleType) s);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlComplexType))) 
          succ_2 = false;
        if (succ_2) 
          return getComplexName((OmlComplexType) s);
        else 
          return UTIL.ConvertToString(new Vector());
      }
    }
  }
// ***** VDMTOOLS END Name=getNameFromShape


// ***** VDMTOOLS START Name=getSimpleName KEEP=NO
  public String getSimpleName (final OmlSimpleType s) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = s.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getSimpleName


// ***** VDMTOOLS START Name=getComplexName KEEP=NO
  public String getComplexName (final OmlComplexType s) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = s.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getComplexName


// ***** VDMTOOLS START Name=getConvertedType KEEP=NO
  public JmlType getConvertedType (final OmlTypeDefinition e) throws CGException {

    IOmlTypeShape tmpVal_3 = null;
    tmpVal_3 = (IOmlTypeShape) e.getShape();
    IOmlTypeShape s = null;
    s = (IOmlTypeShape) tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(s instanceof OmlSimpleType))) 
        succ_4 = false;
      if (succ_4) 
        return (JmlType) (JmlType) getConvertedTypeHelper((OmlSimpleType) s);
      else 
        return (JmlType) (IJmlType) getClassInformation((OmlComplexType) s);
    }
  }
// ***** VDMTOOLS END Name=getConvertedType


// ***** VDMTOOLS START Name=getConvertedTypeHelper KEEP=NO
  public JmlType getConvertedTypeHelper (final OmlSimpleType t) throws CGException {

    IOmlType tmpVal_3 = null;
    tmpVal_3 = (IOmlType) t.getType();
    IOmlType tp = null;
    tp = (IOmlType) tmpVal_3;
    IJmlType nt = (IJmlType) (IJmlType) convertType((IOmlType) tp);
    return (JmlType) nt;
  }
// ***** VDMTOOLS END Name=getConvertedTypeHelper


// ***** VDMTOOLS START Name=getClassInformation KEEP=NO
  public IJmlType getClassInformation (final OmlComplexType t) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = t.getIdentifier();
    String id = null;
    id = tmpVal_3;
    JmlName tmpVal_4 = null;
    tmpVal_4 = (JmlName) new JmlName(null, id);
    JmlName n = null;
    n = (JmlName) tmpVal_4;
    JmlClassName tmpVal_7 = null;
    tmpVal_7 = (JmlClassName) new JmlClassName(n);
    JmlClassName c = null;
    c = (JmlClassName) tmpVal_7;
    return (IJmlType) c;
  }
// ***** VDMTOOLS END Name=getClassInformation


// ***** VDMTOOLS START Name=mergeTypeInfos KEEP=NO
  public HashMap mergeTypeInfos (final Vector s) throws CGException {

    HashSet r = new HashSet();
    HashSet set_5 = new HashSet();
    Enumeration enm_6 = s.elements();
    while ( enm_6.hasMoreElements())
      set_5.add(enm_6.nextElement());
    r = set_5;
    HashMap rexpr_7 = new HashMap();
    HashMap rdmmap_9 = new HashMap();
    for (Iterator enm_16 = r.iterator(); enm_16.hasNext(); ) {

      HashMap e_10 = (HashMap) enm_16.next();
      HashSet eq_dom_12 = new HashSet();
      eq_dom_12.addAll(rdmmap_9.keySet());
      eq_dom_12.retainAll(e_10.keySet());
      boolean all_dup_eq_13 = true;
      for (Iterator enm_15 = eq_dom_12.iterator(); enm_15.hasNext() && all_dup_eq_13; ) {

        String d_14 = UTIL.ConvertToString(enm_15.next());
        all_dup_eq_13 = ((JmlType) rdmmap_9.get(d_14)).equals((JmlType) e_10.get(d_14));
      }
      if (!all_dup_eq_13) 
        UTIL.RunTime("Run-Time Error:Duplicate entries for \'merge\' had different values");
      rdmmap_9.putAll(e_10);
    }
    rexpr_7 = rdmmap_9;
    return rexpr_7;
  }
// ***** VDMTOOLS END Name=mergeTypeInfos


// ***** VDMTOOLS START Name=build_ujml KEEP=NO
  public JmlSpecifications build_ujml (final OmlSpecifications specs) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = specs.getClassList();
    Vector classes = null;
    classes = tmpVal_3;
    Vector jml_uclasses = convertVdm2JmlClasses(classes);
    return (JmlSpecifications) new JmlSpecifications(jml_uclasses);
  }
// ***** VDMTOOLS END Name=build_ujml


// ***** VDMTOOLS START Name=convertVdm2JmlClasses KEEP=NO
  public Vector convertVdm2JmlClasses (final Vector classes) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = classes.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        JmlWrappedJmlClass reselem_12 = null;
        OmlClass par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= classes.size())) 
          par_13 = (OmlClass) classes.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (JmlWrappedJmlClass) convertVdm2JmlClass((OmlClass) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertVdm2JmlClasses


// ***** VDMTOOLS START Name=convertVdm2JmlClass KEEP=NO
  public JmlWrappedJmlClass convertVdm2JmlClass (final OmlClass c) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = c.getIdentifier();
    String id = null;
    id = tmpVal_3;
    IOmlInheritanceClause tmpVal_4 = null;
    tmpVal_4 = (IOmlInheritanceClause) c.getInheritanceClause();
    IOmlInheritanceClause inh = null;
    inh = (IOmlInheritanceClause) tmpVal_4;
    Vector tmpVal_5 = null;
    tmpVal_5 = c.getClassBody();
    Vector body = null;
    body = tmpVal_5;
    JmlClass jmlclass = (JmlClass) (JmlClass) build_uclass(id, (OmlInheritanceClause) inh, body);
    Vector jmlimports = getJmlImports();
    Vector javaimports = getJavaImports();
    return (JmlWrappedJmlClass) new JmlWrappedJmlClass(new String(""), new String(""), javaimports, jmlimports, jmlclass);
  }
// ***** VDMTOOLS END Name=convertVdm2JmlClass


// ***** VDMTOOLS START Name=getJmlImports KEEP=NO
  public Vector getJmlImports () throws CGException {
    return new Vector();
  }
// ***** VDMTOOLS END Name=getJmlImports


// ***** VDMTOOLS START Name=getJavaImports KEEP=NO
  public Vector getJavaImports () throws CGException {
    return new Vector();
  }
// ***** VDMTOOLS END Name=getJavaImports


// ***** VDMTOOLS START Name=build_uclass KEEP=NO
  public JmlClass build_uclass (final String id, final OmlInheritanceClause inh, final Vector body) throws CGException {

    JmlScope scope = (JmlScope) new JmlScope(new Long(3));
    JmlAccessDefinition tmpVal_7 = null;
    tmpVal_7 = (JmlAccessDefinition) new JmlAccessDefinition(scope);
    JmlAccessDefinition access = null;
    access = (JmlAccessDefinition) tmpVal_7;
    JmlClassKind kind = (JmlClassKind) (JmlClassKind) buildClassKind(id);
    JmlClassInheritanceClause class_uinh = (JmlClassInheritanceClause) (JmlClassInheritanceClause) getSuperClasses((OmlInheritanceClause) inh);
    Object inter_uinh = null;
    inter_uinh = getInterfaces(inh);
    Vector def_ublocks = build_udef_ublocks(body);
    return (JmlClass) new JmlClass(access, kind, id, class_uinh, (IJmlInterfaceInheritanceClause) inter_uinh, def_ublocks);
  }
// ***** VDMTOOLS END Name=build_uclass


// ***** VDMTOOLS START Name=buildClassKind KEEP=NO
  public JmlClassKind buildClassKind (final String s) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      Boolean tmpVal_v_12 = null;
      tmpVal_v_12 = new Boolean(interfaces_ulist.contains(s));
      if (!UTIL.equals(new Boolean(true), tmpVal_v_12)) 
        succ_2 = false;
      if (succ_2) 
        return (JmlClassKind) new JmlClassKind(new Long(1));
      else {

        succ_2 = true;
        Boolean tmpVal_v_7 = null;
        tmpVal_v_7 = new Boolean(classes_ulist.contains(s));
        if (!UTIL.equals(new Boolean(true), tmpVal_v_7)) 
          succ_2 = false;
        if (succ_2) 
          return (JmlClassKind) new JmlClassKind(new Long(0));
        else 
          return (JmlClassKind) new JmlClassKind(new Long(0));
      }
    }
  }
// ***** VDMTOOLS END Name=buildClassKind


// ***** VDMTOOLS START Name=getInterfaces KEEP=NO
  public JmlInterfaceInheritanceClause getInterfaces (final OmlInheritanceClause inh) throws CGException {
    if (new Boolean(UTIL.equals(inh, null)).booleanValue()) 
      return null;
    else {

      Vector list = null;
      list = inh.getIdentifierList();
      if (new Boolean(new Long(list.size()).intValue() == new Long(0).intValue()).booleanValue()) 
        return null;
      else {

        Vector lst = null;
        {

          Vector res_l_13 = new Vector();
          HashSet resBind_s_15 = new HashSet();
          HashSet riseq_19 = new HashSet();
          int max_20 = list.size();
          for (int i_21 = 1; i_21 <= max_20; i_21++) 
            riseq_19.add(new Long(i_21));
          resBind_s_15 = riseq_19;
          Vector bind_l_14 = null;
          bind_l_14 = UTIL.Sort(resBind_s_15);
          Long i = null;
          for (Iterator enm_31 = bind_l_14.iterator(); enm_31.hasNext(); ) {

            Long e_17 = UTIL.NumberToLong(enm_31.next());
            i = e_17;
            Boolean pred_25 = null;
            String var1_26 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              var1_26 = UTIL.ConvertToString(list.get(i.intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            pred_25 = new Boolean(interfaces_ulist.contains(var1_26));
            if (pred_25.booleanValue()) {

              String reselem_22 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
                reselem_22 = UTIL.ConvertToString(list.get(i.intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              res_l_13.add(reselem_22);
            }
          }
          lst = res_l_13;
        }
        return (JmlInterfaceInheritanceClause) new JmlInterfaceInheritanceClause(lst);
      }
    }
  }
// ***** VDMTOOLS END Name=getInterfaces


// ***** VDMTOOLS START Name=getSuperClasses KEEP=NO
  public JmlClassInheritanceClause getSuperClasses (final OmlInheritanceClause inh) throws CGException {
    if (new Boolean(UTIL.equals(inh, null)).booleanValue()) 
      return null;
    else {

      Vector list = null;
      list = inh.getIdentifierList();
      if (new Boolean(new Long(list.size()).intValue() == new Long(0).intValue()).booleanValue()) 
        return null;
      else {

        Vector lst = null;
        {

          Vector res_l_13 = new Vector();
          HashSet resBind_s_15 = new HashSet();
          HashSet riseq_19 = new HashSet();
          int max_20 = list.size();
          for (int i_21 = 1; i_21 <= max_20; i_21++) 
            riseq_19.add(new Long(i_21));
          resBind_s_15 = riseq_19;
          Vector bind_l_14 = null;
          bind_l_14 = UTIL.Sort(resBind_s_15);
          Long i = null;
          for (Iterator enm_31 = bind_l_14.iterator(); enm_31.hasNext(); ) {

            Long e_17 = UTIL.NumberToLong(enm_31.next());
            i = e_17;
            Boolean pred_25 = null;
            String var1_26 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              var1_26 = UTIL.ConvertToString(list.get(i.intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            pred_25 = new Boolean(classes_ulist.contains(var1_26));
            if (pred_25.booleanValue()) {

              String reselem_22 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
                reselem_22 = UTIL.ConvertToString(list.get(i.intValue() - 1));
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              res_l_13.add(reselem_22);
            }
          }
          lst = res_l_13;
        }
        Boolean cond_32 = null;
        {
          if (!(cond_32 = new Boolean((new Long(lst.size()).intValue()) > (new Long(1).intValue()))).booleanValue()) 
            cond_32 = new Boolean(new Long(lst.size()).intValue() == new Long(0).intValue());
        }
        if (cond_32.booleanValue()) 
          return null;
        else 
          return (JmlClassInheritanceClause) new JmlClassInheritanceClause(UTIL.ConvertToString(lst.get(0)));
      }
    }
  }
// ***** VDMTOOLS END Name=getSuperClasses


// ***** VDMTOOLS START Name=build_udef_ublocks KEEP=NO
  public Vector build_udef_ublocks (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        IJmlDefinitionBlock reselem_12 = null;
        IOmlDefinitionBlock par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (IOmlDefinitionBlock) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (IJmlDefinitionBlock) build_udef_ublock((IOmlDefinitionBlock) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=build_udef_ublocks


// ***** VDMTOOLS START Name=build_udef_ublock KEEP=NO
  public IJmlDefinitionBlock build_udef_ublock (final IOmlDefinitionBlock b) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlValueDefinitions))) 
        succ_2 = false;
      if (succ_2) 
        return (IJmlDefinitionBlock) (JmlValueDefinitions) build_udef_ublock_uvalues((OmlValueDefinitions) b);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlInstanceVariableDefinitions))) 
          succ_2 = false;
        if (succ_2) 
          return (IJmlDefinitionBlock) (JmlInstanceVariableDefinitions) build_udef_ublock_uiv((OmlInstanceVariableDefinitions) b);
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlOperationDefinitions))) 
            succ_2 = false;
          if (succ_2) 
            return (IJmlDefinitionBlock) (JmlOperationDefinitions) build_udef_ublock_uop((OmlOperationDefinitions) b);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlFunctionDefinitions))) 
              succ_2 = false;
            if (succ_2) 
              return (IJmlDefinitionBlock) (JmlOtherDefinitions) build_udef_ublock_ufun((OmlFunctionDefinitions) b);
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlSynchronizationDefinitions))) 
                succ_2 = false;
              if (succ_2) 
                return (IJmlDefinitionBlock) (JmlOtherDefinitions) build_udef_ublock_usync((OmlSynchronizationDefinitions) b);
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlThreadDefinition))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IJmlDefinitionBlock) (JmlOtherDefinitions) build_udef_ublock_uthread((OmlThreadDefinition) b);
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlTraceDefinitions))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IJmlDefinitionBlock) (JmlOtherDefinitions) build_udef_ublock_utrace((OmlTraceDefinitions) b);
                  else {

                    vdm_Error elem_6 = null;
                    Long tmpVar_7 = null;
                    tmpVar_7 = b.getLine();
                    Long tmpVar_8 = null;
                    tmpVar_8 = b.getColumn();
                    String tmpVar_9 = null;
                    tmpVar_9 = b.identity();
                    elem_6 = new vdm_Error(tmpVar_7, tmpVar_8, tmpVar_9);
                    log.add(elem_6);
                    return (IJmlDefinitionBlock) (JmlOtherDefinitions) build_udef_ublock_utype((OmlTypeDefinitions) b);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=build_udef_ublock


// ***** VDMTOOLS START Name=build_udef_ublock_uvalues KEEP=NO
  public JmlValueDefinitions build_udef_ublock_uvalues (final OmlValueDefinitions t) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = t.getValueList();
    Vector val = null;
    val = tmpVal_3;
    Vector res = buildValueList(val);
    return (JmlValueDefinitions) new JmlValueDefinitions(res);
  }
// ***** VDMTOOLS END Name=build_udef_ublock_uvalues


// ***** VDMTOOLS START Name=buildValueList KEEP=NO
  public Vector buildValueList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        JmlValueDefinition reselem_12 = null;
        OmlValueDefinition par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlValueDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (JmlValueDefinition) buildJmlValue((OmlValueDefinition) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildValueList


// ***** VDMTOOLS START Name=buildJmlValue KEEP=NO
  public JmlValueDefinition buildJmlValue (final OmlValueDefinition val) throws CGException {

    IOmlAccessDefinition tmpVal_3 = null;
    tmpVal_3 = (IOmlAccessDefinition) val.getAccess();
    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) tmpVal_3;
    IOmlValueShape tmpVal_4 = null;
    tmpVal_4 = (IOmlValueShape) val.getShape();
    IOmlValueShape shape = null;
    shape = (IOmlValueShape) tmpVal_4;
    JmlAccessDefinition newAccess = (JmlAccessDefinition) (JmlAccessDefinition) buildJmlAccess((OmlAccessDefinition) access);
    JmlValueShape newShape = (JmlValueShape) (JmlValueShape) buildJmlShape((OmlValueShape) shape);
    return (JmlValueDefinition) new JmlValueDefinition(newAccess, new Boolean(true), new Boolean(true), newShape);
  }
// ***** VDMTOOLS END Name=buildJmlValue


// ***** VDMTOOLS START Name=buildJmlAccess KEEP=NO
  public JmlAccessDefinition buildJmlAccess (final OmlAccessDefinition a) throws CGException {

    IOmlScope scope = null;
    scope = (IOmlScope) a.getScope();
    JmlScope res = (JmlScope) (JmlScope) buildJmlScope((OmlScope) scope);
    return (JmlAccessDefinition) new JmlAccessDefinition(res);
  }
// ***** VDMTOOLS END Name=buildJmlAccess


// ***** VDMTOOLS START Name=buildJmlScope KEEP=NO
  public JmlScope buildJmlScope (final OmlScope s) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = s.getValue();
    Long val = null;
    val = tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(0).intValue()))) 
        succ_4 = false;
      if (succ_4) 
        return (JmlScope) new JmlScope(new Long(0));
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(1).intValue()))) 
          succ_4 = false;
        if (succ_4) 
          return (JmlScope) new JmlScope(new Long(1));
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(2).intValue()))) 
            succ_4 = false;
          if (succ_4) 
            return (JmlScope) new JmlScope(new Long(3));
          else 
            return (JmlScope) new JmlScope(new Long(2));
        }
      }
    }
  }
// ***** VDMTOOLS END Name=buildJmlScope


// ***** VDMTOOLS START Name=buildJmlShape KEEP=NO
  public JmlValueShape buildJmlShape (final OmlValueShape s) throws CGException {

    IOmlPattern tmpVal_3 = null;
    tmpVal_3 = (IOmlPattern) s.getPattern();
    IOmlPattern p = null;
    p = (IOmlPattern) tmpVal_3;
    IOmlType tmpVal_4 = null;
    tmpVal_4 = (IOmlType) s.getType();
    IOmlType t = null;
    t = (IOmlType) tmpVal_4;
    IOmlExpression tmpVal_5 = null;
    tmpVal_5 = (IOmlExpression) s.getExpression();
    IOmlExpression e = null;
    e = (IOmlExpression) tmpVal_5;
    String tmpVal_6 = null;
    tmpVal_6 = getIdentifier((OmlPatternIdentifier) p);
    String id = null;
    id = tmpVal_6;
    IJmlType tmpVal_8 = null;
    tmpVal_8 = (IJmlType) (IJmlType) convertType((IOmlType) t);
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_8;
    IJmlExpression exp = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) e);
    return (JmlValueShape) new JmlValueShape(id, tp, exp);
  }
// ***** VDMTOOLS END Name=buildJmlShape


// ***** VDMTOOLS START Name=getIdentifier KEEP=NO
  public String getIdentifier (final OmlPatternIdentifier p) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = p.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getIdentifier


// ***** VDMTOOLS START Name=build_udef_ublock_uiv KEEP=NO
  public JmlInstanceVariableDefinitions build_udef_ublock_uiv (final OmlInstanceVariableDefinitions v) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = buildVariablesList((OmlInstanceVariableDefinitions) v);
    Vector s = null;
    s = tmpVal_3;
    return (JmlInstanceVariableDefinitions) new JmlInstanceVariableDefinitions(s, new Vector());
  }
// ***** VDMTOOLS END Name=build_udef_ublock_uiv


// ***** VDMTOOLS START Name=buildVariablesList KEEP=NO
  public Vector buildVariablesList (final OmlInstanceVariableDefinitions s) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = s.getVariablesList();
    Vector q = null;
    q = tmpVal_3;
    Vector rexpr_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = q.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_23 = bind_l_6.iterator(); enm_23.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_23.next());
        i = e_9;
        Boolean pred_18 = null;
        IOmlInstanceVariableShape obj_19 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
          obj_19 = (IOmlInstanceVariableShape) q.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_18 = new Boolean(obj_19 instanceof OmlInstanceVariable);
        if (pred_18.booleanValue()) {

          JmlVariable reselem_14 = null;
          IOmlInstanceVariableShape par_15 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= q.size())) 
            par_15 = (IOmlInstanceVariableShape) q.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          reselem_14 = (JmlVariable) buildVariables((OmlInstanceVariable) par_15);
          res_l_5.add(reselem_14);
        }
      }
      rexpr_4 = res_l_5;
    }
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=buildVariablesList


// ***** VDMTOOLS START Name=buildVariables KEEP=NO
  public JmlVariable buildVariables (final OmlInstanceVariable vdm_var) throws CGException {

    IOmlAccessDefinition tmpVal_3 = null;
    tmpVal_3 = (IOmlAccessDefinition) vdm_var.getAccess();
    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) tmpVal_3;
    IOmlScope scope = null;
    scope = (IOmlScope) access.getScope();
    IOmlAssignmentDefinition assign = null;
    assign = (IOmlAssignmentDefinition) vdm_var.getAssignmentDefinition();
    JmlScope newScope = null;
    Long arg_7 = null;
    arg_7 = scope.getValue();
    newScope = new JmlScope(arg_7);
    JmlAccessDefinition newAccess = (JmlAccessDefinition) new JmlAccessDefinition(newScope);
    Boolean stat = null;
    stat = access.getStaticAccess();
    IJmlType tmpVal_11 = null;
    IOmlType par_12 = null;
    par_12 = (IOmlType) assign.getType();
    tmpVal_11 = (IJmlType) convertType((IOmlType) par_12);
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_11;
    String tmpVal_13 = null;
    tmpVal_13 = assign.getIdentifier();
    String id = null;
    id = tmpVal_13;
    IJmlExpression tmpVal_14 = null;
    IOmlExpression par_15 = null;
    par_15 = (IOmlExpression) assign.getExpression();
    tmpVal_14 = (IJmlExpression) convertExpression((IOmlExpression) par_15);
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_14;
    return (JmlVariable) new JmlVariable(newAccess, new Boolean(true), stat, new Boolean(false), tp, id, expr);
  }
// ***** VDMTOOLS END Name=buildVariables


// ***** VDMTOOLS START Name=build_udef_ublock_uop KEEP=NO
  public JmlOperationDefinitions build_udef_ublock_uop (final OmlOperationDefinitions t) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = t.getOperationList();
    Vector s = null;
    s = tmpVal_3;
    Vector res = convertOperationList(s);
    return (JmlOperationDefinitions) new JmlOperationDefinitions(res);
  }
// ***** VDMTOOLS END Name=build_udef_ublock_uop


// ***** VDMTOOLS START Name=convertOperationList KEEP=NO
  public Vector convertOperationList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        JmlOperationDefinition reselem_12 = null;
        OmlOperationDefinition par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlOperationDefinition) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (JmlOperationDefinition) convertOperation((OmlOperationDefinition) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertOperationList


// ***** VDMTOOLS START Name=convertOperation KEEP=NO
  public JmlOperationDefinition convertOperation (final OmlOperationDefinition op) throws CGException {

    IOmlAccessDefinition tmpVal_3 = null;
    tmpVal_3 = (IOmlAccessDefinition) op.getAccess();
    IOmlAccessDefinition access = null;
    access = (IOmlAccessDefinition) tmpVal_3;
    IOmlScope scope = null;
    scope = (IOmlScope) access.getScope();
    Boolean static_uval = null;
    static_uval = access.getStaticAccess();
    JmlScope newScope = (JmlScope) (JmlScope) buildJmlScope((OmlScope) scope);
    JmlAccessDefinition newAccess = (JmlAccessDefinition) new JmlAccessDefinition(newScope);
    IOmlOperationShape tmpVal_10 = null;
    tmpVal_10 = (IOmlOperationShape) op.getShape();
    IOmlOperationShape shape = null;
    shape = (IOmlOperationShape) tmpVal_10;
    return (JmlOperationDefinition) (JmlOperationDefinition) buildJmlOperation((JmlAccessDefinition) newAccess, static_uval, (IOmlOperationShape) shape);
  }
// ***** VDMTOOLS END Name=convertOperation


// ***** VDMTOOLS START Name=buildJmlOperation KEEP=NO
  public JmlOperationDefinition buildJmlOperation (final JmlAccessDefinition access, final Boolean statickey, final IOmlOperationShape shape) throws CGException {

    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(shape instanceof OmlImplicitOperation))) 
        succ_4 = false;
      if (succ_4) 
        return (JmlOperationDefinition) (JmlOperationDefinition) buildImplicitJmlOperation((JmlAccessDefinition) access, statickey, (OmlImplicitOperation) shape);
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(shape instanceof OmlExplicitOperation))) 
          succ_4 = false;
        if (succ_4) 
          return (JmlOperationDefinition) (JmlOperationDefinition) buildExplicitJmlOperation((JmlAccessDefinition) access, statickey, (OmlExplicitOperation) shape);
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(shape instanceof OmlExtendedExplicitOperation))) 
            succ_4 = false;
          if (succ_4) 
            return (JmlOperationDefinition) (JmlOperationDefinition) buildExtendedJmlOperation((JmlAccessDefinition) access, statickey, (OmlExtendedExplicitOperation) shape);
          else {

            vdm_Error elem_8 = null;
            Long tmpVar_9 = null;
            tmpVar_9 = shape.getLine();
            Long tmpVar_10 = null;
            tmpVar_10 = shape.getColumn();
            String tmpVar_11 = null;
            tmpVar_11 = shape.identity();
            elem_8 = new vdm_Error(tmpVar_9, tmpVar_10, tmpVar_11);
            log.add(elem_8);
            return (JmlOperationDefinition) new JmlOperationDefinition();
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=buildJmlOperation


// ***** VDMTOOLS START Name=buildImplicitJmlOperation KEEP=NO
  public JmlOperationDefinition buildImplicitJmlOperation (final JmlAccessDefinition access, final Boolean statickey, final OmlImplicitOperation shape) throws CGException {

    String tmpVal_5 = null;
    tmpVal_5 = shape.getIdentifier();
    String id = null;
    id = tmpVal_5;
    Vector params = null;
    params = shape.getPatternTypePairList();
    Vector returns = null;
    returns = shape.getIdentifierTypePairList();
    IOmlOperationTrailer tmpVal_8 = null;
    tmpVal_8 = (IOmlOperationTrailer) shape.getTrailer();
    IOmlOperationTrailer trailer = null;
    trailer = (IOmlOperationTrailer) tmpVal_8;
    JmlMethodSpecifications newTrailer = (JmlMethodSpecifications) (JmlMethodSpecifications) buildOperationTrailer((OmlOperationTrailer) trailer, (JmlAccessDefinition) access);
    IJmlType returnType = (IJmlType) (IJmlType) buildReturnType(returns);
    Vector newParams = buildParameters(params);
    return (JmlOperationDefinition) new JmlOperationDefinition(newTrailer, access, new Boolean(true), statickey, new Boolean(false), returnType, id, newParams, null);
  }
// ***** VDMTOOLS END Name=buildImplicitJmlOperation


// ***** VDMTOOLS START Name=buildExplicitJmlOperation KEEP=NO
  public JmlOperationDefinition buildExplicitJmlOperation (final JmlAccessDefinition access, final Boolean statickey, final OmlExplicitOperation shape) throws CGException {

    String tmpVal_5 = null;
    tmpVal_5 = shape.getIdentifier();
    String id = null;
    id = tmpVal_5;
    IOmlType tmpVal_6 = null;
    tmpVal_6 = (IOmlType) shape.getType();
    IOmlType tp = null;
    tp = (IOmlType) tmpVal_6;
    JmlType type_urng = (JmlType) (JmlType) getRngType((OmlOperationType) tp);
    Vector params = null;
    params = shape.getParameterList();
    JmlMethodSpecifications tmpVal_10 = null;
    IOmlOperationTrailer par_11 = null;
    par_11 = (IOmlOperationTrailer) shape.getTrailer();
    tmpVal_10 = (JmlMethodSpecifications) buildOperationTrailer((OmlOperationTrailer) par_11, (JmlAccessDefinition) access);
    JmlMethodSpecifications trailer = null;
    trailer = (JmlMethodSpecifications) tmpVal_10;
    Vector paramsList = buildOperationParameters(params, (OmlOperationType) tp);
    String tmpVal_16 = null;
    tmpVal_16 = new String("Body ignored in operation ").concat(id);
    String body = null;
    body = tmpVal_16;
    JmlOperationDefinition res = (JmlOperationDefinition) new JmlOperationDefinition(trailer, access, new Boolean(true), statickey, new Boolean(false), type_urng, id, paramsList, null);
    Boolean cond_29 = null;
    IOmlOperationBody obj_30 = null;
    obj_30 = (IOmlOperationBody) shape.getBody();
    cond_29 = obj_30.hasStatement();
    if (cond_29.booleanValue()) {

      vdm_Error elem_33 = null;
      Long tmpVar_34 = null;
      tmpVar_34 = shape.getLine();
      Long tmpVar_35 = null;
      tmpVar_35 = shape.getColumn();
      elem_33 = new vdm_Error(tmpVar_34, tmpVar_35, body);
      log.add(elem_33);
      return (JmlOperationDefinition) res;
    }
    else 
      return (JmlOperationDefinition) res;
  }
// ***** VDMTOOLS END Name=buildExplicitJmlOperation


// ***** VDMTOOLS START Name=buildExtendedJmlOperation KEEP=NO
  public JmlOperationDefinition buildExtendedJmlOperation (final JmlAccessDefinition access, final Boolean statickey, final OmlExtendedExplicitOperation shape) throws CGException {

    String tmpVal_5 = null;
    tmpVal_5 = shape.getIdentifier();
    String id = null;
    id = tmpVal_5;
    Vector params = null;
    params = shape.getPatternTypePairList();
    Vector returns = null;
    returns = shape.getIdentifierTypePairList();
    IOmlOperationTrailer tmpVal_8 = null;
    tmpVal_8 = (IOmlOperationTrailer) shape.getTrailer();
    IOmlOperationTrailer trailer = null;
    trailer = (IOmlOperationTrailer) tmpVal_8;
    JmlMethodSpecifications newTrailer = (JmlMethodSpecifications) (JmlMethodSpecifications) buildOperationTrailer((OmlOperationTrailer) trailer, (JmlAccessDefinition) access);
    IJmlType returnType = (IJmlType) (IJmlType) buildReturnType(returns);
    Vector newParams = buildParameters(params);
    String tmpVal_16 = null;
    tmpVal_16 = new String("Body ignored in operation ").concat(id);
    String body = null;
    body = tmpVal_16;
    JmlOperationDefinition res = (JmlOperationDefinition) new JmlOperationDefinition(newTrailer, access, new Boolean(true), statickey, new Boolean(false), returnType, id, newParams, null);
    Boolean cond_29 = null;
    IOmlOperationBody obj_30 = null;
    obj_30 = (IOmlOperationBody) shape.getBody();
    cond_29 = obj_30.hasStatement();
    if (cond_29.booleanValue()) {

      vdm_Error elem_33 = null;
      Long tmpVar_34 = null;
      tmpVar_34 = shape.getLine();
      Long tmpVar_35 = null;
      tmpVar_35 = shape.getColumn();
      elem_33 = new vdm_Error(tmpVar_34, tmpVar_35, body);
      log.add(elem_33);
      return (JmlOperationDefinition) res;
    }
    else 
      return (JmlOperationDefinition) res;
  }
// ***** VDMTOOLS END Name=buildExtendedJmlOperation


// ***** VDMTOOLS START Name=buildOperationParameters KEEP=NO
  public Vector buildOperationParameters (final Vector s, final OmlOperationType t) throws CGException {

    IOmlType domtype = null;
    domtype = (IOmlType) t.getDomType();
    return buildOperationParameter(s, (IOmlType) domtype);
  }
// ***** VDMTOOLS END Name=buildOperationParameters


// ***** VDMTOOLS START Name=buildOperationParameter KEEP=NO
  public Vector buildOperationParameter (final Vector s, final IOmlType t) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlProductType))) 
        succ_3 = false;
      if (succ_3) 
        return unfoldProductType(s, (OmlProductType) t);
      else 
        return buildJmlParameter(s, (OmlType) t);
    }
  }
// ***** VDMTOOLS END Name=buildOperationParameter


// ***** VDMTOOLS START Name=unfoldProductType KEEP=NO
  public Vector unfoldProductType (final Vector s, final OmlProductType t) throws CGException {

    Vector ts = buildSeqTypes((OmlProductType) t);
    Vector tmpVal_6 = null;
    tmpVal_6 = extractPatterns(s);
    Vector p = null;
    p = tmpVal_6;
    Vector tmpVal_8 = null;
    tmpVal_8 = buildParameterSeq(p, ts);
    Vector f = null;
    f = tmpVal_8;
    return f;
  }
// ***** VDMTOOLS END Name=unfoldProductType


// ***** VDMTOOLS START Name=buildSeqTypes KEEP=NO
  public Vector buildSeqTypes (final OmlProductType p) throws CGException {

    IOmlType rhs = null;
    rhs = (IOmlType) p.getRhsType();
    IOmlType lhs = null;
    lhs = (IOmlType) p.getLhsType();
    Vector rexpr_5 = null;
    rexpr_5 = (Vector) extractProductType((IOmlType) rhs).clone();
    rexpr_5.addAll(extractProductType((IOmlType) lhs));
    return rexpr_5;
  }
// ***** VDMTOOLS END Name=buildSeqTypes


// ***** VDMTOOLS START Name=extractProductType KEEP=NO
  public Vector extractProductType (final IOmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlProductType))) 
        succ_2 = false;
      if (succ_2) 
        return buildSeqTypes((OmlProductType) t);
      else {

        Vector rexpr_5 = null;
        rexpr_5 = new Vector();
        rexpr_5.add(t);
        return rexpr_5;
      }
    }
  }
// ***** VDMTOOLS END Name=extractProductType


// ***** VDMTOOLS START Name=extractPatterns KEEP=NO
  public Vector extractPatterns (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        String reselem_12 = null;
        OmlPattern par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlPattern) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = extractPattern((IOmlPattern) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=extractPatterns


// ***** VDMTOOLS START Name=extractPattern KEEP=NO
  public String extractPattern (final IOmlPattern p) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(p instanceof OmlPatternIdentifier))) 
        succ_2 = false;
      if (succ_2) 
        return getId((OmlPatternIdentifier) p);
      else {

        vdm_Error elem_6 = null;
        Long tmpVar_7 = null;
        tmpVar_7 = p.getLine();
        Long tmpVar_8 = null;
        tmpVar_8 = p.getColumn();
        String tmpVar_9 = null;
        tmpVar_9 = p.identity();
        elem_6 = new vdm_Error(tmpVar_7, tmpVar_8, tmpVar_9);
        log.add(elem_6);
        return UTIL.ConvertToString(new Vector());
      }
    }
  }
// ***** VDMTOOLS END Name=extractPattern


// ***** VDMTOOLS START Name=buildParameterSeq KEEP=NO
  public Vector buildParameterSeq (final Vector p, final Vector t) throws CGException {
    if (new Boolean(!(new Long(p.size()).intValue() == new Long(t.size()).intValue())).booleanValue()) 
      return new Vector();
    else {

      Vector rexpr_8 = null;
      {

        Vector res_l_9 = new Vector();
        HashSet resBind_s_11 = new HashSet();
        HashSet riseq_15 = new HashSet();
        int max_16 = p.size();
        for (int i_17 = 1; i_17 <= max_16; i_17++) 
          riseq_15.add(new Long(i_17));
        resBind_s_11 = riseq_15;
        Vector bind_l_10 = null;
        bind_l_10 = UTIL.Sort(resBind_s_11);
        Long i = null;
        for (Iterator enm_30 = bind_l_10.iterator(); enm_30.hasNext(); ) {

          Long e_13 = UTIL.NumberToLong(enm_30.next());
          i = e_13;
          JmlParameter reselem_18 = null;
          {

            IJmlType nt = null;
            OmlType par_21 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= t.size())) 
              par_21 = (OmlType) t.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            nt = (IJmlType) convertType((IOmlType) par_21);
            String tmpVal_24 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= p.size())) 
              tmpVal_24 = UTIL.ConvertToString(p.get(i.intValue() - 1));
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            String v = null;
            v = tmpVal_24;
            reselem_18 = (JmlParameter) new JmlParameter(nt, v);
          }
          res_l_9.add(reselem_18);
        }
        rexpr_8 = res_l_9;
      }
      return rexpr_8;
    }
  }
// ***** VDMTOOLS END Name=buildParameterSeq


// ***** VDMTOOLS START Name=buildJmlParameter KEEP=NO
  public Vector buildJmlParameter (final Vector s, final OmlType t) throws CGException {

    Boolean cond_3 = null;
    {
      if (!(cond_3 = new Boolean(new Long(s.size()).intValue() == new Long(0).intValue())).booleanValue()) 
        cond_3 = new Boolean((new Long(s.size()).intValue()) > (new Long(1).intValue()));
    }
    if (cond_3.booleanValue()) 
      return new Vector();
    else {

      IJmlType tmpVal_13 = null;
      tmpVal_13 = (IJmlType) (IJmlType) convertType((IOmlType) t);
      IJmlType tp = null;
      tp = (IJmlType) tmpVal_13;
      OmlPattern fst = (OmlPattern) (OmlPattern) s.get(0);
      String tmpVal_17 = null;
      tmpVal_17 = getIds((IOmlPattern) fst);
      String id = null;
      id = tmpVal_17;
      JmlParameter par = (JmlParameter) new JmlParameter(tp, id);
      Vector rexpr_22 = null;
      rexpr_22 = new Vector();
      rexpr_22.add(par);
      return rexpr_22;
    }
  }
// ***** VDMTOOLS END Name=buildJmlParameter


// ***** VDMTOOLS START Name=getIds KEEP=NO
  public String getIds (final IOmlPattern p) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(p instanceof OmlPatternIdentifier))) 
        succ_2 = false;
      if (succ_2) 
        return getId((OmlPatternIdentifier) p);
      else {

        vdm_Error elem_6 = null;
        Long tmpVar_7 = null;
        tmpVar_7 = p.getLine();
        Long tmpVar_8 = null;
        tmpVar_8 = p.getColumn();
        String tmpVar_9 = null;
        tmpVar_9 = p.identity();
        elem_6 = new vdm_Error(tmpVar_7, tmpVar_8, tmpVar_9);
        log.add(elem_6);
        return UTIL.ConvertToString(new Vector());
      }
    }
  }
// ***** VDMTOOLS END Name=getIds


// ***** VDMTOOLS START Name=getId KEEP=NO
  public String getId (final OmlPatternIdentifier p) throws CGException {

    String rexpr_2 = null;
    rexpr_2 = p.getIdentifier();
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getId


// ***** VDMTOOLS START Name=buildReturnType KEEP=NO
  public IJmlType buildReturnType (final Vector s) throws CGException {
    if (new Boolean((new Long(s.size()).intValue()) > (new Long(1).intValue())).booleanValue()) {

      Vector tmpVal_14 = null;
      {

        Vector res_l_15 = new Vector();
        HashSet resBind_s_17 = new HashSet();
        HashSet riseq_21 = new HashSet();
        int max_22 = s.size();
        for (int i_23 = 1; i_23 <= max_22; i_23++) 
          riseq_21.add(new Long(i_23));
        resBind_s_17 = riseq_21;
        Vector bind_l_16 = null;
        bind_l_16 = UTIL.Sort(resBind_s_17);
        Long i = null;
        for (Iterator enm_30 = bind_l_16.iterator(); enm_30.hasNext(); ) {

          Long e_19 = UTIL.NumberToLong(enm_30.next());
          i = e_19;
          IJmlType reselem_24 = null;
          IOmlType par_25 = null;
          OmlIdentifierTypePair obj_26 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            obj_26 = (OmlIdentifierTypePair) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          par_25 = (IOmlType) obj_26.getType();
          reselem_24 = (IJmlType) convertType((IOmlType) par_25);
          res_l_15.add(reselem_24);
        }
        tmpVal_14 = res_l_15;
      }
      Vector q = null;
      q = tmpVal_14;
      JmlTupleType tmpVal_31 = null;
      tmpVal_31 = (JmlTupleType) new JmlTupleType(q);
      JmlTupleType t = null;
      t = (JmlTupleType) tmpVal_31;
      return (IJmlType) t;
    }
    else {

      IOmlType tmpVal_7 = null;
      OmlIdentifierTypePair obj_8 = null;
      if ((1 <= new Long(1).intValue()) && (new Long(1).intValue() <= s.size())) 
        obj_8 = (OmlIdentifierTypePair) s.get(new Long(1).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      tmpVal_7 = (IOmlType) obj_8.getType();
      IOmlType t = null;
      t = (IOmlType) tmpVal_7;
      return (IJmlType) (IJmlType) convertType((IOmlType) t);
    }
  }
// ***** VDMTOOLS END Name=buildReturnType


// ***** VDMTOOLS START Name=buildParameters KEEP=NO
  public Vector buildParameters (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    Vector unArg_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        Vector reselem_13 = null;
        OmlPatternTypePair par_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_14 = (OmlPatternTypePair) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = buildParameter((OmlPatternTypePair) par_14);
        res_l_4.add(reselem_13);
      }
      unArg_3 = res_l_4;
    }
    Vector rdcseq_19 = new Vector();
    for (Iterator enm_22 = unArg_3.iterator(); enm_22.hasNext(); ) {

      Vector e_20 = (Vector) UTIL.ConvertToList(enm_22.next());
      rdcseq_19.addAll(e_20);
    }
    rexpr_2 = rdcseq_19;
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildParameters


// ***** VDMTOOLS START Name=buildParameter KEEP=NO
  public Vector buildParameter (final OmlPatternTypePair p) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = p.getPatternList();
    Vector s = null;
    s = tmpVal_3;
    IOmlType tmpVal_4 = null;
    tmpVal_4 = (IOmlType) p.getType();
    IOmlType t = null;
    t = (IOmlType) tmpVal_4;
    Vector rexpr_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = s.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_21 = bind_l_7.iterator(); enm_21.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_21.next());
        i = e_10;
        JmlParameter reselem_15 = null;
        IOmlPattern par_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_16 = (IOmlPattern) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = (JmlParameter) buildParam((OmlPatternIdentifier) par_16, (OmlType) t);
        res_l_6.add(reselem_15);
      }
      rexpr_5 = res_l_6;
    }
    return rexpr_5;
  }
// ***** VDMTOOLS END Name=buildParameter


// ***** VDMTOOLS START Name=buildParam KEEP=NO
  public JmlParameter buildParam (final OmlPatternIdentifier p, final OmlType t) throws CGException {

    IJmlType tmpVal_4 = null;
    tmpVal_4 = (IJmlType) (IJmlType) convertType((IOmlType) t);
    IJmlType tp = null;
    tp = (IJmlType) tmpVal_4;
    String tmpVal_6 = null;
    tmpVal_6 = p.getIdentifier();
    String id = null;
    id = tmpVal_6;
    return (JmlParameter) new JmlParameter(tp, id);
  }
// ***** VDMTOOLS END Name=buildParam


// ***** VDMTOOLS START Name=buildOperationTrailer KEEP=NO
  public JmlMethodSpecifications buildOperationTrailer (final OmlOperationTrailer trailer, final JmlAccessDefinition access) throws CGException {

    IOmlExternals tmpVal_4 = null;
    tmpVal_4 = (IOmlExternals) trailer.getExternals();
    IOmlExternals ex = null;
    ex = (IOmlExternals) tmpVal_4;
    IOmlExpression tmpVal_5 = null;
    tmpVal_5 = (IOmlExpression) trailer.getPreExpression();
    IOmlExpression pr = null;
    pr = (IOmlExpression) tmpVal_5;
    IOmlExpression tmpVal_6 = null;
    tmpVal_6 = (IOmlExpression) trailer.getPostExpression();
    IOmlExpression po = null;
    po = (IOmlExpression) tmpVal_6;
    IOmlExceptions tmpVal_7 = null;
    tmpVal_7 = (IOmlExceptions) trailer.getExceptions();
    IOmlExceptions ep = null;
    ep = (IOmlExceptions) tmpVal_7;
    {

      Vector normal = null;
      Long par_14 = null;
      IJmlScope obj_15 = null;
      obj_15 = (IJmlScope) access.getScope();
      par_14 = obj_15.getValue();
      normal = buildNormalBehaviour((OmlExternals) ex, (OmlExpression) pr, (OmlExpression) po, (OmlExceptions) ep, par_14);
      JmlSpecs spec = (JmlSpecs) new JmlSpecs(normal);
      JmlSpecs also = (JmlSpecs) new JmlSpecs(new Vector());
      return (JmlMethodSpecifications) new JmlMethodSpecifications(spec, also);
    }
  }
// ***** VDMTOOLS END Name=buildOperationTrailer


// ***** VDMTOOLS START Name=buildError KEEP=NO
  public JmlRequiresClause buildError (final OmlError e) throws CGException {

    IJmlExpression tmpVal_3 = null;
    IOmlExpression par_4 = null;
    par_4 = (IOmlExpression) e.getLhs();
    tmpVal_3 = (IJmlExpression) convertExpression((IOmlExpression) par_4);
    IJmlExpression expr = null;
    expr = (IJmlExpression) tmpVal_3;
    return (JmlRequiresClause) new JmlRequiresClause(expr);
  }
// ***** VDMTOOLS END Name=buildError


// ***** VDMTOOLS START Name=buildNormalBehaviour KEEP=NO
  public Vector buildNormalBehaviour (final OmlExternals ex, final OmlExpression pr, final OmlExpression po, final OmlExceptions ep, final Long n) throws CGException {

    Vector externals = buildAssignableClause((OmlExternals) ex);
    Vector tmpVal_9 = null;
    tmpVal_9 = buildRequiresClause((OmlExpression) pr, (OmlExceptions) ep);
    Vector pres = null;
    pres = tmpVal_9;
    Vector posts = buildEnsuresClause((OmlExpression) po, (OmlExceptions) ep);
    Vector trailers = null;
    Vector var1_16 = null;
    var1_16 = (Vector) externals.clone();
    var1_16.addAll(pres);
    trailers = (Vector) var1_16.clone();
    trailers.addAll(posts);
    JmlScope scope = (JmlScope) new JmlScope(n);
    Vector rexpr_22 = null;
    rexpr_22 = new Vector();
    rexpr_22.add(new JmlNormalSpec(scope, trailers));
    return rexpr_22;
  }
// ***** VDMTOOLS END Name=buildNormalBehaviour


// ***** VDMTOOLS START Name=buildAssignableClause KEEP=NO
  public Vector buildAssignableClause (final OmlExternals e) throws CGException {
    if (new Boolean(UTIL.equals(e, null)).booleanValue()) 
      return new Vector();
    else {

      Vector list = null;
      list = e.getExtList();
      Vector res = null;
      {

        Vector res_l_8 = new Vector();
        HashSet resBind_s_10 = new HashSet();
        HashSet riseq_14 = new HashSet();
        int max_15 = list.size();
        for (int i_16 = 1; i_16 <= max_15; i_16++) 
          riseq_14.add(new Long(i_16));
        resBind_s_10 = riseq_14;
        Vector bind_l_9 = null;
        bind_l_9 = UTIL.Sort(resBind_s_10);
        Long i = null;
        for (Iterator enm_23 = bind_l_9.iterator(); enm_23.hasNext(); ) {

          Long e_12 = UTIL.NumberToLong(enm_23.next());
          i = e_12;
          JmlAssignableClause reselem_17 = null;
          Vector par_18 = null;
          IOmlVarInformation obj_19 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            obj_19 = (IOmlVarInformation) list.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          par_18 = obj_19.getNameList();
          reselem_17 = (JmlAssignableClause) getExternalNames(par_18);
          res_l_8.add(reselem_17);
        }
        res = res_l_8;
      }
      return res;
    }
  }
// ***** VDMTOOLS END Name=buildAssignableClause


// ***** VDMTOOLS START Name=getExternalNames KEEP=NO
  public JmlAssignableClause getExternalNames (final Vector s) throws CGException {

    Vector tmpVal_3 = null;
    {

      Vector res_l_4 = new Vector();
      HashSet resBind_s_6 = new HashSet();
      HashSet riseq_10 = new HashSet();
      int max_11 = s.size();
      for (int i_12 = 1; i_12 <= max_11; i_12++) 
        riseq_10.add(new Long(i_12));
      resBind_s_6 = riseq_10;
      Vector bind_l_5 = null;
      bind_l_5 = UTIL.Sort(resBind_s_6);
      Long i = null;
      for (Iterator enm_18 = bind_l_5.iterator(); enm_18.hasNext(); ) {

        Long e_8 = UTIL.NumberToLong(enm_18.next());
        i = e_8;
        String reselem_13 = null;
        OmlName obj_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          obj_14 = (OmlName) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_13 = obj_14.getIdentifier();
        res_l_4.add(reselem_13);
      }
      tmpVal_3 = res_l_4;
    }
    Vector l = null;
    l = tmpVal_3;
    return (JmlAssignableClause) new JmlAssignableClause(l);
  }
// ***** VDMTOOLS END Name=getExternalNames


// ***** VDMTOOLS START Name=buildRequiresClause KEEP=NO
  public Vector buildRequiresClause (final OmlExpression pres, final OmlExceptions exc) throws CGException {

    Boolean cond_3 = null;
    {
      if ((cond_3 = new Boolean(UTIL.equals(pres, null))).booleanValue()) 
        cond_3 = new Boolean(UTIL.equals(exc, null));
    }
    if (cond_3.booleanValue()) 
      return new Vector();
    else {

      IJmlExpression exceptions = (IJmlExpression) (IJmlExpression) buildDisjunctions((OmlExceptions) exc);
      IJmlExpression precond = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) pres);
      IJmlExpression final_upre = (IJmlExpression) (IJmlExpression) chooserDisj((IJmlExpression) exceptions, (IJmlExpression) precond);
      JmlRequiresClause req = (JmlRequiresClause) new JmlRequiresClause(final_upre);
      Vector rexpr_20 = null;
      rexpr_20 = new Vector();
      rexpr_20.add(req);
      return rexpr_20;
    }
  }
// ***** VDMTOOLS END Name=buildRequiresClause


// ***** VDMTOOLS START Name=chooserDisj KEEP=NO
  public IJmlExpression chooserDisj (final IJmlExpression exc, final IJmlExpression expr) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.equals(exc, null)))) 
        succ_3 = false;
      if (succ_3) 
        return (IJmlExpression) expr;
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.equals(expr, null)))) 
          succ_3 = false;
        if (succ_3) 
          return (IJmlExpression) exc;
        else {

          JmlBinaryOperator tmpVal_7 = null;
          tmpVal_7 = (JmlBinaryOperator) new JmlBinaryOperator(new Long(1));
          JmlBinaryOperator op = null;
          op = (JmlBinaryOperator) tmpVal_7;
          JmlBinaryExpression final_upre = (JmlBinaryExpression) new JmlBinaryExpression(expr, op, exc);
          return (IJmlExpression) final_upre;
        }
      }
    }
  }
// ***** VDMTOOLS END Name=chooserDisj


// ***** VDMTOOLS START Name=buildDisjunctions KEEP=NO
  public IJmlExpression buildDisjunctions (final OmlExceptions exc) throws CGException {
    if (new Boolean(UTIL.equals(exc, null)).booleanValue()) 
      return null;
    else {

      Vector tmpVal_6 = null;
      tmpVal_6 = exc.getErrorList();
      Vector l = null;
      l = tmpVal_6;
      if (new Boolean(new Long(l.size()).intValue() == new Long(0).intValue()).booleanValue()) {

        JmlBooleanLiteral tmpVal_14 = null;
        tmpVal_14 = (JmlBooleanLiteral) new JmlBooleanLiteral(new Boolean(true));
        JmlBooleanLiteral lit = null;
        lit = (JmlBooleanLiteral) tmpVal_14;
        JmlLiteralExpression tmpVal_16 = null;
        tmpVal_16 = (JmlLiteralExpression) new JmlLiteralExpression(lit);
        JmlLiteralExpression expr = null;
        expr = (JmlLiteralExpression) tmpVal_16;
        return (IJmlExpression) expr;
      }
      else 
        return (IJmlExpression) (IJmlExpression) buildDisjunction(l);
    }
  }
// ***** VDMTOOLS END Name=buildDisjunctions


// ***** VDMTOOLS START Name=buildDisjunction KEEP=NO
  public IJmlExpression buildDisjunction (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) {

      JmlBooleanLiteral tmpVal_22 = null;
      tmpVal_22 = (JmlBooleanLiteral) new JmlBooleanLiteral(new Boolean(true));
      JmlBooleanLiteral lit = null;
      lit = (JmlBooleanLiteral) tmpVal_22;
      JmlLiteralExpression exp = (JmlLiteralExpression) new JmlLiteralExpression(lit);
      return (IJmlExpression) exp;
    }
    else {

      OmlError erro = (OmlError) (OmlError) s.get(0);
      IOmlExpression tmpVal_9 = null;
      tmpVal_9 = (IOmlExpression) erro.getLhs();
      IOmlExpression e = null;
      e = (IOmlExpression) tmpVal_9;
      IJmlExpression tmpVal_10 = null;
      tmpVal_10 = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) e);
      IJmlExpression expr = null;
      expr = (IJmlExpression) tmpVal_10;
      JmlBinaryOperator tmpVal_12 = null;
      tmpVal_12 = (JmlBinaryOperator) new JmlBinaryOperator(new Long(1));
      JmlBinaryOperator op = null;
      op = (JmlBinaryOperator) tmpVal_12;
      IJmlExpression rhs = (IJmlExpression) (IJmlExpression) buildDisjunction(new Vector(s.subList(1, s.size())));
      return (IJmlExpression) new JmlBinaryExpression(expr, op, rhs);
    }
  }
// ***** VDMTOOLS END Name=buildDisjunction


// ***** VDMTOOLS START Name=buildEnsuresClause KEEP=NO
  public Vector buildEnsuresClause (final OmlExpression po, final OmlExceptions ex) throws CGException {

    Boolean cond_3 = null;
    {
      if ((cond_3 = new Boolean(UTIL.equals(po, null))).booleanValue()) 
        cond_3 = new Boolean(UTIL.equals(ex, null));
    }
    if (cond_3.booleanValue()) 
      return new Vector();
    else {

      IJmlExpression postexpr = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) po);
      IJmlExpression conj = (IJmlExpression) (IJmlExpression) buildConjunctions((OmlExceptions) ex);
      IJmlExpression finalpost = (IJmlExpression) (IJmlExpression) chooserConj((IJmlExpression) conj, (IJmlExpression) postexpr);
      JmlEnsuresClause ens = (JmlEnsuresClause) new JmlEnsuresClause(finalpost);
      Vector rexpr_20 = null;
      rexpr_20 = new Vector();
      rexpr_20.add(ens);
      return rexpr_20;
    }
  }
// ***** VDMTOOLS END Name=buildEnsuresClause


// ***** VDMTOOLS START Name=chooserConj KEEP=NO
  public IJmlExpression chooserConj (final IJmlExpression exc, final IJmlExpression expr) throws CGException {

    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.equals(exc, null)))) 
        succ_3 = false;
      if (succ_3) 
        return (IJmlExpression) expr;
      else {

        succ_3 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.equals(expr, null)))) 
          succ_3 = false;
        if (succ_3) 
          return (IJmlExpression) exc;
        else {

          JmlBinaryOperator tmpVal_7 = null;
          tmpVal_7 = (JmlBinaryOperator) new JmlBinaryOperator(new Long(11));
          JmlBinaryOperator op = null;
          op = (JmlBinaryOperator) tmpVal_7;
          JmlBinaryExpression finalpost = (JmlBinaryExpression) new JmlBinaryExpression(expr, op, exc);
          return (IJmlExpression) finalpost;
        }
      }
    }
  }
// ***** VDMTOOLS END Name=chooserConj


// ***** VDMTOOLS START Name=buildConjunctions KEEP=NO
  public IJmlExpression buildConjunctions (final OmlExceptions except) throws CGException {
    if (new Boolean(UTIL.equals(except, null)).booleanValue()) 
      return null;
    else {

      Vector errlst = null;
      errlst = except.getErrorList();
      if (new Boolean(new Long(errlst.size()).intValue() == new Long(0).intValue()).booleanValue()) {

        JmlBooleanLiteral tmpVal_14 = null;
        tmpVal_14 = (JmlBooleanLiteral) new JmlBooleanLiteral(new Boolean(true));
        JmlBooleanLiteral lit = null;
        lit = (JmlBooleanLiteral) tmpVal_14;
        JmlLiteralExpression tmpVal_16 = null;
        tmpVal_16 = (JmlLiteralExpression) new JmlLiteralExpression(lit);
        JmlLiteralExpression expr = null;
        expr = (JmlLiteralExpression) tmpVal_16;
        return (IJmlExpression) expr;
      }
      else 
        return (IJmlExpression) (IJmlExpression) buildConjunction(errlst);
    }
  }
// ***** VDMTOOLS END Name=buildConjunctions


// ***** VDMTOOLS START Name=buildConjunction KEEP=NO
  public IJmlExpression buildConjunction (final Vector s) throws CGException {
    if (new Boolean(new Long(s.size()).intValue() == new Long(0).intValue()).booleanValue()) {

      JmlBooleanLiteral tmpVal_22 = null;
      tmpVal_22 = (JmlBooleanLiteral) new JmlBooleanLiteral(new Boolean(true));
      JmlBooleanLiteral lit = null;
      lit = (JmlBooleanLiteral) tmpVal_22;
      JmlLiteralExpression exp = (JmlLiteralExpression) new JmlLiteralExpression(lit);
      return (IJmlExpression) exp;
    }
    else {

      OmlError erro = (OmlError) (OmlError) s.get(0);
      IOmlExpression tmpVal_9 = null;
      tmpVal_9 = (IOmlExpression) erro.getLhs();
      IOmlExpression e = null;
      e = (IOmlExpression) tmpVal_9;
      IJmlExpression tmpVal_10 = null;
      tmpVal_10 = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) e);
      IJmlExpression expr = null;
      expr = (IJmlExpression) tmpVal_10;
      JmlBinaryOperator tmpVal_12 = null;
      tmpVal_12 = (JmlBinaryOperator) new JmlBinaryOperator(new Long(11));
      JmlBinaryOperator op = null;
      op = (JmlBinaryOperator) tmpVal_12;
      IJmlExpression rhs = (IJmlExpression) (IJmlExpression) buildConjunction(new Vector(s.subList(1, s.size())));
      return (IJmlExpression) new JmlBinaryExpression(expr, op, rhs);
    }
  }
// ***** VDMTOOLS END Name=buildConjunction


// ***** VDMTOOLS START Name=build_udef_ublock_ufun KEEP=NO
  public JmlOtherDefinitions build_udef_ublock_ufun (final OmlFunctionDefinitions p) throws CGException {

    vdm_Error elem_3 = null;
    Long tmpVar_4 = null;
    tmpVar_4 = p.getLine();
    Long tmpVar_5 = null;
    tmpVar_5 = p.getColumn();
    String tmpVar_6 = null;
    tmpVar_6 = p.identity();
    elem_3 = new vdm_Error(tmpVar_4, tmpVar_5, tmpVar_6);
    log.add(elem_3);
    return (JmlOtherDefinitions) new JmlOtherDefinitions();
  }
// ***** VDMTOOLS END Name=build_udef_ublock_ufun


// ***** VDMTOOLS START Name=build_udef_ublock_usync KEEP=NO
  public JmlOtherDefinitions build_udef_ublock_usync (final OmlSynchronizationDefinitions p) throws CGException {

    vdm_Error elem_3 = null;
    Long tmpVar_4 = null;
    tmpVar_4 = p.getLine();
    Long tmpVar_5 = null;
    tmpVar_5 = p.getColumn();
    String tmpVar_6 = null;
    tmpVar_6 = p.identity();
    elem_3 = new vdm_Error(tmpVar_4, tmpVar_5, tmpVar_6);
    log.add(elem_3);
    return (JmlOtherDefinitions) new JmlOtherDefinitions();
  }
// ***** VDMTOOLS END Name=build_udef_ublock_usync


// ***** VDMTOOLS START Name=build_udef_ublock_uthread KEEP=NO
  public JmlOtherDefinitions build_udef_ublock_uthread (final OmlThreadDefinition p) throws CGException {

    vdm_Error elem_3 = null;
    Long tmpVar_4 = null;
    tmpVar_4 = p.getLine();
    Long tmpVar_5 = null;
    tmpVar_5 = p.getColumn();
    String tmpVar_6 = null;
    tmpVar_6 = p.identity();
    elem_3 = new vdm_Error(tmpVar_4, tmpVar_5, tmpVar_6);
    log.add(elem_3);
    return (JmlOtherDefinitions) new JmlOtherDefinitions();
  }
// ***** VDMTOOLS END Name=build_udef_ublock_uthread


// ***** VDMTOOLS START Name=build_udef_ublock_utrace KEEP=NO
  public JmlOtherDefinitions build_udef_ublock_utrace (final OmlTraceDefinitions p) throws CGException {

    vdm_Error elem_3 = null;
    Long tmpVar_4 = null;
    tmpVar_4 = p.getLine();
    Long tmpVar_5 = null;
    tmpVar_5 = p.getColumn();
    String tmpVar_6 = null;
    tmpVar_6 = p.identity();
    elem_3 = new vdm_Error(tmpVar_4, tmpVar_5, tmpVar_6);
    log.add(elem_3);
    return (JmlOtherDefinitions) new JmlOtherDefinitions();
  }
// ***** VDMTOOLS END Name=build_udef_ublock_utrace


// ***** VDMTOOLS START Name=build_udef_ublock_utype KEEP=NO
  public JmlOtherDefinitions build_udef_ublock_utype (final OmlTypeDefinitions var_1_1) throws CGException {
    return (JmlOtherDefinitions) new JmlOtherDefinitions();
  }
// ***** VDMTOOLS END Name=build_udef_ublock_utype


// ***** VDMTOOLS START Name=convertType KEEP=NO
  public IJmlType convertType (final IOmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlBracketedType))) 
        succ_2 = false;
      if (succ_2) 
        return (IJmlType) (JmlType) convertBracketedType((OmlBracketedType) t);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlBoolType))) 
          succ_2 = false;
        if (succ_2) 
          return (IJmlType) new JmlBoolType();
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlNatType))) 
            succ_2 = false;
          if (succ_2) 
            return (IJmlType) new JmlNatType(new Long(0));
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlNat1Type))) 
              succ_2 = false;
            if (succ_2) 
              return (IJmlType) new JmlNatType(new Long(1));
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlIntType))) 
                succ_2 = false;
              if (succ_2) 
                return (IJmlType) new JmlIntegerType();
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlRealType))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IJmlType) new JmlFloatType();
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlCharType))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IJmlType) new JmlCharType();
                  else {

                    succ_2 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlTokenType))) 
                      succ_2 = false;
                    if (succ_2) 
                      return (IJmlType) new JmlObjectType();
                    else {

                      succ_2 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlQuoteType))) 
                        succ_2 = false;
                      if (succ_2) 
                        return (IJmlType) (JmlEnumerationType) convertQuoteType((OmlQuoteType) t);
                      else {

                        succ_2 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlCompositeType))) 
                          succ_2 = false;
                        if (succ_2) 
                          return (IJmlType) (JmlClassType) convertCompositeType((OmlCompositeType) t);
                        else {

                          succ_2 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlProductType))) 
                            succ_2 = false;
                          if (succ_2) 
                            return (IJmlType) (JmlTupleType) convertProductType((OmlProductType) t);
                          else {

                            succ_2 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlSetType))) 
                              succ_2 = false;
                            if (succ_2) 
                              return (IJmlType) (JmlSetValueType) convertSetType((OmlSetType) t);
                            else {

                              succ_2 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlSeq0Type))) 
                                succ_2 = false;
                              if (succ_2) 
                                return (IJmlType) (JmlSeqValueType) convertSeq0Type((OmlSeq0Type) t);
                              else {

                                succ_2 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlSeq1Type))) 
                                  succ_2 = false;
                                if (succ_2) 
                                  return (IJmlType) (JmlSeqValueType) convertSeq1Type((OmlSeq0Type) t);
                                else {

                                  succ_2 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlGeneralMapType))) 
                                    succ_2 = false;
                                  if (succ_2) 
                                    return (IJmlType) (JmlMapValueToValueType) convertMapType((OmlGeneralMapType) t);
                                  else {

                                    succ_2 = true;
                                    if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlEmptyType))) 
                                      succ_2 = false;
                                    if (succ_2) 
                                      return (IJmlType) new JmlVoidType();
                                    else {

                                      succ_2 = true;
                                      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof OmlTypeName))) 
                                        succ_2 = false;
                                      if (succ_2) 
                                        return (IJmlType) convertTypeName((OmlTypeName) t);
                                      else {

                                        vdm_Error elem_6 = null;
                                        Long tmpVar_7 = null;
                                        tmpVar_7 = t.getLine();
                                        Long tmpVar_8 = null;
                                        tmpVar_8 = t.getColumn();
                                        String tmpVar_9 = null;
                                        tmpVar_9 = t.identity();
                                        elem_6 = new vdm_Error(tmpVar_7, tmpVar_8, tmpVar_9);
                                        log.add(elem_6);
                                        return (IJmlType) new JmlVoidType();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertType


// ***** VDMTOOLS START Name=convertBracketedType KEEP=NO
  public JmlType convertBracketedType (final OmlBracketedType t) throws CGException {

    IJmlType rexpr_2 = null;
    IOmlType par_3 = null;
    par_3 = (IOmlType) t.getType();
    rexpr_2 = (IJmlType) convertType((IOmlType) par_3);
    return (JmlType) rexpr_2;
  }
// ***** VDMTOOLS END Name=convertBracketedType


// ***** VDMTOOLS START Name=convertQuoteType KEEP=NO
  public JmlEnumerationType convertQuoteType (final OmlQuoteType t) throws CGException {

    IOmlQuoteLiteral tmpVal_3 = null;
    tmpVal_3 = (IOmlQuoteLiteral) t.getQuoteLiteral();
    IOmlQuoteLiteral q = null;
    q = (IOmlQuoteLiteral) tmpVal_3;
    String tmpVal_4 = null;
    tmpVal_4 = q.getVal();
    String id = null;
    id = tmpVal_4;
    JmlEnumLiteral tmpVal_5 = null;
    tmpVal_5 = (JmlEnumLiteral) new JmlEnumLiteral(id);
    JmlEnumLiteral l = null;
    l = (JmlEnumLiteral) tmpVal_5;
    return (JmlEnumerationType) new JmlEnumerationType(l);
  }
// ***** VDMTOOLS END Name=convertQuoteType


// ***** VDMTOOLS START Name=convertProductType KEEP=NO
  public JmlTupleType convertProductType (final OmlProductType t) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = buildSeqTypes((OmlProductType) t);
    Vector tp = null;
    tp = tmpVal_3;
    Vector sq = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      HashSet riseq_12 = new HashSet();
      int max_13 = tp.size();
      for (int i_14 = 1; i_14 <= max_13; i_14++) 
        riseq_12.add(new Long(i_14));
      resBind_s_8 = riseq_12;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Long i = null;
      for (Iterator enm_20 = bind_l_7.iterator(); enm_20.hasNext(); ) {

        Long e_10 = UTIL.NumberToLong(enm_20.next());
        i = e_10;
        IJmlType reselem_15 = null;
        OmlType par_16 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= tp.size())) 
          par_16 = (OmlType) tp.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_15 = (IJmlType) convertType((IOmlType) par_16);
        res_l_6.add(reselem_15);
      }
      sq = res_l_6;
    }
    return (JmlTupleType) new JmlTupleType(sq);
  }
// ***** VDMTOOLS END Name=convertProductType


// ***** VDMTOOLS START Name=convertCompositeType KEEP=NO
  public JmlClassType convertCompositeType (final OmlCompositeType t) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = t.getIdentifier();
    String id = null;
    id = tmpVal_3;
    return (JmlClassType) new JmlClassType(id, new Vector());
  }
// ***** VDMTOOLS END Name=convertCompositeType


// ***** VDMTOOLS START Name=convertSetType KEEP=NO
  public JmlSetValueType convertSetType (final OmlSetType t) throws CGException {

    IOmlType tmpVal_3 = null;
    tmpVal_3 = (IOmlType) t.getType();
    IOmlType tp = null;
    tp = (IOmlType) tmpVal_3;
    IJmlType newtp = (IJmlType) (IJmlType) convertType((IOmlType) tp);
    return (JmlSetValueType) new JmlSetValueType(newtp);
  }
// ***** VDMTOOLS END Name=convertSetType


// ***** VDMTOOLS START Name=convertSeq0Type KEEP=NO
  public JmlSeqValueType convertSeq0Type (final OmlSeq0Type t) throws CGException {

    IOmlType tmpVal_3 = null;
    tmpVal_3 = (IOmlType) t.getType();
    IOmlType tp = null;
    tp = (IOmlType) tmpVal_3;
    IJmlType newtp = (IJmlType) (IJmlType) convertType((IOmlType) tp);
    return (JmlSeqValueType) new JmlSeqValueType(newtp, new Long(0));
  }
// ***** VDMTOOLS END Name=convertSeq0Type


// ***** VDMTOOLS START Name=convertSeq1Type KEEP=NO
  public JmlSeqValueType convertSeq1Type (final OmlSeq0Type t) throws CGException {

    IOmlType tmpVal_3 = null;
    tmpVal_3 = (IOmlType) t.getType();
    IOmlType tp = null;
    tp = (IOmlType) tmpVal_3;
    IJmlType newtp = (IJmlType) (IJmlType) convertType((IOmlType) tp);
    return (JmlSeqValueType) new JmlSeqValueType(newtp, new Long(1));
  }
// ***** VDMTOOLS END Name=convertSeq1Type


// ***** VDMTOOLS START Name=convertMapType KEEP=NO
  public JmlMapValueToValueType convertMapType (final OmlGeneralMapType t) throws CGException {

    IOmlType mapdom = null;
    mapdom = (IOmlType) t.getDomType();
    IOmlType maprng = null;
    maprng = (IOmlType) t.getRngType();
    IJmlType newdom = (IJmlType) (IJmlType) convertType((IOmlType) mapdom);
    IJmlType newrng = (IJmlType) (IJmlType) convertType((IOmlType) maprng);
    return (JmlMapValueToValueType) new JmlMapValueToValueType(newdom, newrng);
  }
// ***** VDMTOOLS END Name=convertMapType


// ***** VDMTOOLS START Name=convertTypeName KEEP=NO
  public JmlClassName convertTypeName (final OmlTypeName t) throws CGException {

    IOmlName tmpVal_3 = null;
    tmpVal_3 = (IOmlName) t.getName();
    IOmlName id = null;
    id = (IOmlName) tmpVal_3;
    JmlName newid = (JmlName) (JmlName) convertName((OmlName) id);
    return (JmlClassName) new JmlClassName(newid);
  }
// ***** VDMTOOLS END Name=convertTypeName


// ***** VDMTOOLS START Name=getDomType KEEP=NO
  public JmlType getDomType (final OmlOperationType op) throws CGException {

    IJmlType rexpr_2 = null;
    IOmlType par_3 = null;
    par_3 = (IOmlType) op.getDomType();
    rexpr_2 = (IJmlType) convertType((IOmlType) par_3);
    return (JmlType) rexpr_2;
  }
// ***** VDMTOOLS END Name=getDomType


// ***** VDMTOOLS START Name=getRngType KEEP=NO
  public JmlType getRngType (final OmlOperationType op) throws CGException {

    IJmlType rexpr_2 = null;
    IOmlType par_3 = null;
    par_3 = (IOmlType) op.getRngType();
    rexpr_2 = (IJmlType) convertType((IOmlType) par_3);
    return (JmlType) rexpr_2;
  }
// ***** VDMTOOLS END Name=getRngType


// ***** VDMTOOLS START Name=convertExpression KEEP=NO
  public IJmlExpression convertExpression (final IOmlExpression e) throws CGException {
    if (new Boolean(UTIL.equals(e, null)).booleanValue()) 
      return null;
    else {

      boolean succ_5 = true;
      {

        succ_5 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlBracketedExpression))) 
          succ_5 = false;
        if (succ_5) 
          return (IJmlExpression) (JmlBracketedExpression) convertBracketedExpression((OmlBracketedExpression) e);
        else {

          succ_5 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlLetExpression))) 
            succ_5 = false;
          if (succ_5) 
            return (IJmlExpression) (JmlBlockExpression) convertLetExpression((OmlLetExpression) e);
          else {

            succ_5 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlIfExpression))) 
              succ_5 = false;
            if (succ_5) 
              return (IJmlExpression) (JmlIfExpression) convertIfExpression((OmlIfExpression) e);
            else {

              succ_5 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlUnaryExpression))) 
                succ_5 = false;
              if (succ_5) 
                return (IJmlExpression) (JmlUnaryExpression) convertUnaryExpression((OmlUnaryExpression) e);
              else {

                succ_5 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlBinaryExpression))) 
                  succ_5 = false;
                if (succ_5) 
                  return (IJmlExpression) (JmlBinaryExpression) convertBinaryExpression((OmlBinaryExpression) e);
                else {

                  succ_5 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlForAllExpression))) 
                    succ_5 = false;
                  if (succ_5) 
                    return (IJmlExpression) (JmlForAllExpression) convertForAllExpression((OmlForAllExpression) e);
                  else {

                    succ_5 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlExistsExpression))) 
                      succ_5 = false;
                    if (succ_5) 
                      return (IJmlExpression) (JmlExistsExpression) convertExistsExpression((OmlExistsExpression) e);
                    else {

                      succ_5 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlSetEnumeration))) 
                        succ_5 = false;
                      if (succ_5) 
                        return (IJmlExpression) (JmlSetEnumeration) convertSetEnumeration((OmlSetEnumeration) e);
                      else {

                        succ_5 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlSequenceEnumeration))) 
                          succ_5 = false;
                        if (succ_5) 
                          return (IJmlExpression) (JmlSequenceEnumeration) convertSequenceEnumeration((OmlSequenceEnumeration) e);
                        else {

                          succ_5 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlMapEnumeration))) 
                            succ_5 = false;
                          if (succ_5) 
                            return (IJmlExpression) (JmlMapEnumeration) convertMapEnumeration((OmlMapEnumeration) e);
                          else {

                            succ_5 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlTupleConstructor))) 
                              succ_5 = false;
                            if (succ_5) 
                              return (IJmlExpression) (JmlNewExpression) convertTupleConstructor((OmlTupleConstructor) e);
                            else {

                              succ_5 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlRecordConstructor))) 
                                succ_5 = false;
                              if (succ_5) 
                                return (IJmlExpression) (JmlNewExpression) convertRecordExpression((OmlRecordConstructor) e);
                              else {

                                succ_5 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlApplyExpression))) 
                                  succ_5 = false;
                                if (succ_5) 
                                  return (IJmlExpression) (JmlApplyExpression) convertApplyExpression((OmlApplyExpression) e);
                                else {

                                  succ_5 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlFieldSelect))) 
                                    succ_5 = false;
                                  if (succ_5) 
                                    return (IJmlExpression) (JmlFieldSelectExpression) convertFieldSelect((OmlFieldSelect) e);
                                  else {

                                    succ_5 = true;
                                    if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlNewExpression))) 
                                      succ_5 = false;
                                    if (succ_5) 
                                      return (IJmlExpression) (JmlNewExpression) convertNewExpression((OmlNewExpression) e);
                                    else {

                                      succ_5 = true;
                                      if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlSelfExpression))) 
                                        succ_5 = false;
                                      if (succ_5) 
                                        return (IJmlExpression) (JmlThisExpression) convertSelfExpression((OmlSelfExpression) e);
                                      else {

                                        succ_5 = true;
                                        if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlIsExpression))) 
                                          succ_5 = false;
                                        if (succ_5) 
                                          return (IJmlExpression) (JmlInstanceOfExpression) convertIsExpression((OmlIsExpression) e);
                                        else {

                                          succ_5 = true;
                                          if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlUndefinedExpression))) 
                                            succ_5 = false;
                                          if (succ_5) 
                                            return (IJmlExpression) (JmlUndefinedExpression) convertUndefinedExpression((OmlUndefinedExpression) e);
                                          else {

                                            succ_5 = true;
                                            if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlIsofclassExpression))) 
                                              succ_5 = false;
                                            if (succ_5) 
                                              return (IJmlExpression) (JmlInstanceOfExpression) convertIsOfClassExpression((OmlIsofclassExpression) e);
                                            else {

                                              succ_5 = true;
                                              if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlName))) 
                                                succ_5 = false;
                                              if (succ_5) 
                                                return (IJmlExpression) (JmlName) convertName((OmlName) e);
                                              else {

                                                succ_5 = true;
                                                if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlOldName))) 
                                                  succ_5 = false;
                                                if (succ_5) 
                                                  return (IJmlExpression) (JmlOldName) convertOldName((OmlOldName) e);
                                                else {

                                                  succ_5 = true;
                                                  if (!UTIL.equals(new Boolean(true), new Boolean(e instanceof OmlSymbolicLiteralExpression))) 
                                                    succ_5 = false;
                                                  if (succ_5) 
                                                    return (IJmlExpression) (JmlLiteralExpression) convertLiteralExpression((OmlSymbolicLiteralExpression) e);
                                                  else {

                                                    vdm_Error elem_9 = null;
                                                    Long tmpVar_10 = null;
                                                    tmpVar_10 = e.getLine();
                                                    Long tmpVar_11 = null;
                                                    tmpVar_11 = e.getColumn();
                                                    String tmpVar_12 = null;
                                                    tmpVar_12 = e.identity();
                                                    elem_9 = new vdm_Error(tmpVar_10, tmpVar_11, tmpVar_12);
                                                    log.add(elem_9);
                                                    return null;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertExpression


// ***** VDMTOOLS START Name=convertBracketedExpression KEEP=NO
  public JmlBracketedExpression convertBracketedExpression (final OmlBracketedExpression e) throws CGException {

    IOmlExpression exp = null;
    exp = (IOmlExpression) e.getExpression();
    IJmlExpression newexpr = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) exp);
    return (JmlBracketedExpression) new JmlBracketedExpression(newexpr);
  }
// ***** VDMTOOLS END Name=convertBracketedExpression


// ***** VDMTOOLS START Name=convertLetExpression KEEP=NO
  public JmlBlockExpression convertLetExpression (final OmlLetExpression e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getDefinitionList();
    Vector bind = null;
    bind = tmpVal_3;
    Vector newbind = buildJmlShapes(bind);
    IOmlExpression tmpVal_6 = null;
    tmpVal_6 = (IOmlExpression) e.getExpression();
    IOmlExpression expr = null;
    expr = (IOmlExpression) tmpVal_6;
    IJmlExpression res = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) expr);
    return (JmlBlockExpression) new JmlBlockExpression(newbind, res);
  }
// ***** VDMTOOLS END Name=convertLetExpression


// ***** VDMTOOLS START Name=buildJmlShapes KEEP=NO
  public Vector buildJmlShapes (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        JmlValueShape reselem_12 = null;
        OmlValueShape par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlValueShape) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (JmlValueShape) buildJmlShape((OmlValueShape) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=buildJmlShapes


// ***** VDMTOOLS START Name=convertIfExpression KEEP=NO
  public JmlIfExpression convertIfExpression (final OmlIfExpression e) throws CGException {

    IOmlExpression if_uexpr = null;
    if_uexpr = (IOmlExpression) e.getIfExpression();
    IOmlExpression then_uexpr = null;
    then_uexpr = (IOmlExpression) e.getThenExpression();
    IOmlExpression else_uexpr = null;
    else_uexpr = (IOmlExpression) e.getElseExpression();
    IJmlExpression newif = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) if_uexpr);
    IJmlExpression newthen = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) then_uexpr);
    IJmlExpression newelse = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) else_uexpr);
    return (JmlIfExpression) new JmlIfExpression(newif, newthen, newelse);
  }
// ***** VDMTOOLS END Name=convertIfExpression


// ***** VDMTOOLS START Name=convertUnaryExpression KEEP=NO
  public JmlUnaryExpression convertUnaryExpression (final OmlUnaryExpression e) throws CGException {

    IOmlUnaryOperator tmpVal_3 = null;
    tmpVal_3 = (IOmlUnaryOperator) e.getOperator();
    IOmlUnaryOperator op = null;
    op = (IOmlUnaryOperator) tmpVal_3;
    JmlUnaryOperator newop = (JmlUnaryOperator) (JmlUnaryOperator) convertUnaryOperator((OmlUnaryOperator) op);
    IOmlExpression tmpVal_6 = null;
    tmpVal_6 = (IOmlExpression) e.getExpression();
    IOmlExpression expr = null;
    expr = (IOmlExpression) tmpVal_6;
    IJmlExpression newexpr = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) expr);
    return (JmlUnaryExpression) new JmlUnaryExpression(newop, newexpr);
  }
// ***** VDMTOOLS END Name=convertUnaryExpression


// ***** VDMTOOLS START Name=convertUnaryOperator KEEP=NO
  public JmlUnaryOperator convertUnaryOperator (final OmlUnaryOperator op) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = op.getValue();
    Long val = null;
    val = tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(0).intValue()))) 
        succ_4 = false;
      if (succ_4) 
        return (JmlUnaryOperator) new JmlUnaryOperator(new Long(4));
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(1).intValue()))) 
          succ_4 = false;
        if (succ_4) 
          return (JmlUnaryOperator) new JmlUnaryOperator(new Long(5));
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(2).intValue()))) 
            succ_4 = false;
          if (succ_4) 
            return (JmlUnaryOperator) new JmlUnaryOperator(new Long(10));
          else {

            succ_4 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(3).intValue()))) 
              succ_4 = false;
            if (succ_4) 
              return (JmlUnaryOperator) new JmlUnaryOperator(new Long(7));
            else {

              succ_4 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(5).intValue()))) 
                succ_4 = false;
              if (succ_4) 
                return (JmlUnaryOperator) new JmlUnaryOperator(new Long(2));
              else {

                succ_4 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(6).intValue()))) 
                  succ_4 = false;
                if (succ_4) 
                  return (JmlUnaryOperator) new JmlUnaryOperator(new Long(0));
                else {

                  succ_4 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(8).intValue()))) 
                    succ_4 = false;
                  if (succ_4) 
                    return (JmlUnaryOperator) new JmlUnaryOperator(new Long(6));
                  else {

                    succ_4 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(9).intValue()))) 
                      succ_4 = false;
                    if (succ_4) 
                      return (JmlUnaryOperator) new JmlUnaryOperator(new Long(14));
                    else {

                      succ_4 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(10).intValue()))) 
                        succ_4 = false;
                      if (succ_4) 
                        return (JmlUnaryOperator) new JmlUnaryOperator(new Long(12));
                      else {

                        succ_4 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(11).intValue()))) 
                          succ_4 = false;
                        if (succ_4) 
                          return (JmlUnaryOperator) new JmlUnaryOperator(new Long(8));
                        else {

                          succ_4 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(14).intValue()))) 
                            succ_4 = false;
                          if (succ_4) 
                            return (JmlUnaryOperator) new JmlUnaryOperator(new Long(15));
                          else {

                            succ_4 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(15).intValue()))) 
                              succ_4 = false;
                            if (succ_4) 
                              return (JmlUnaryOperator) new JmlUnaryOperator(new Long(1));
                            else {

                              succ_4 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(16).intValue()))) 
                                succ_4 = false;
                              if (succ_4) 
                                return (JmlUnaryOperator) new JmlUnaryOperator(new Long(13));
                              else {

                                succ_4 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(17).intValue()))) 
                                  succ_4 = false;
                                if (succ_4) 
                                  return (JmlUnaryOperator) new JmlUnaryOperator(new Long(3));
                                else {

                                  vdm_Error elem_8 = null;
                                  Long tmpVar_9 = null;
                                  tmpVar_9 = op.getLine();
                                  Long tmpVar_10 = null;
                                  tmpVar_10 = op.getColumn();
                                  String tmpVar_11 = null;
                                  tmpVar_11 = op.identity();
                                  elem_8 = new vdm_Error(tmpVar_9, tmpVar_10, tmpVar_11);
                                  log.add(elem_8);
                                  return (JmlUnaryOperator) new JmlUnaryOperator();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertUnaryOperator


// ***** VDMTOOLS START Name=convertBinaryExpression KEEP=NO
  public JmlBinaryExpression convertBinaryExpression (final OmlBinaryExpression e) throws CGException {

    IOmlExpression lhs = null;
    lhs = (IOmlExpression) e.getLhsExpression();
    IOmlBinaryOperator tmpVal_4 = null;
    tmpVal_4 = (IOmlBinaryOperator) e.getOperator();
    IOmlBinaryOperator op = null;
    op = (IOmlBinaryOperator) tmpVal_4;
    IOmlExpression rhs = null;
    rhs = (IOmlExpression) e.getRhsExpression();
    IJmlExpression newlhs = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) lhs);
    IJmlExpression newrhs = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) rhs);
    JmlBinaryOperator newop = (JmlBinaryOperator) (JmlBinaryOperator) convertBinaryOperator((OmlBinaryOperator) op);
    return (JmlBinaryExpression) new JmlBinaryExpression(newlhs, newop, newrhs);
  }
// ***** VDMTOOLS END Name=convertBinaryExpression


// ***** VDMTOOLS START Name=convertBinaryOperator KEEP=NO
  public JmlBinaryOperator convertBinaryOperator (final OmlBinaryOperator op) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = op.getValue();
    Long val = null;
    val = tmpVal_3;
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(1).intValue()))) 
        succ_4 = false;
      if (succ_4) 
        return (JmlBinaryOperator) new JmlBinaryOperator(new Long(18));
      else {

        succ_4 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(2).intValue()))) 
          succ_4 = false;
        if (succ_4) 
          return (JmlBinaryOperator) new JmlBinaryOperator(new Long(23));
        else {

          succ_4 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(3).intValue()))) 
            succ_4 = false;
          if (succ_4) 
            return (JmlBinaryOperator) new JmlBinaryOperator(new Long(13));
          else {

            succ_4 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(6).intValue()))) 
              succ_4 = false;
            if (succ_4) 
              return (JmlBinaryOperator) new JmlBinaryOperator(new Long(22));
            else {

              succ_4 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(7).intValue()))) 
                succ_4 = false;
              if (succ_4) 
                return (JmlBinaryOperator) new JmlBinaryOperator(new Long(33));
              else {

                succ_4 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(8).intValue()))) 
                  succ_4 = false;
                if (succ_4) 
                  return (JmlBinaryOperator) new JmlBinaryOperator(new Long(1));
                else {

                  succ_4 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(10).intValue()))) 
                    succ_4 = false;
                  if (succ_4) 
                    return (JmlBinaryOperator) new JmlBinaryOperator(new Long(16));
                  else {

                    succ_4 = true;
                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(11).intValue()))) 
                      succ_4 = false;
                    if (succ_4) 
                      return (JmlBinaryOperator) new JmlBinaryOperator(new Long(0));
                    else {

                      succ_4 = true;
                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(12).intValue()))) 
                        succ_4 = false;
                      if (succ_4) 
                        return (JmlBinaryOperator) new JmlBinaryOperator(new Long(12));
                      else {

                        succ_4 = true;
                        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(13).intValue()))) 
                          succ_4 = false;
                        if (succ_4) 
                          return (JmlBinaryOperator) new JmlBinaryOperator(new Long(4));
                        else {

                          succ_4 = true;
                          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(14).intValue()))) 
                            succ_4 = false;
                          if (succ_4) 
                            return (JmlBinaryOperator) new JmlBinaryOperator(new Long(15));
                          else {

                            succ_4 = true;
                            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(16).intValue()))) 
                              succ_4 = false;
                            if (succ_4) 
                              return (JmlBinaryOperator) new JmlBinaryOperator(new Long(28));
                            else {

                              succ_4 = true;
                              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(19).intValue()))) 
                                succ_4 = false;
                              if (succ_4) 
                                return (JmlBinaryOperator) new JmlBinaryOperator(new Long(6));
                              else {

                                succ_4 = true;
                                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(20).intValue()))) 
                                  succ_4 = false;
                                if (succ_4) 
                                  return (JmlBinaryOperator) new JmlBinaryOperator(new Long(34));
                                else {

                                  succ_4 = true;
                                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(21).intValue()))) 
                                    succ_4 = false;
                                  if (succ_4) 
                                    return (JmlBinaryOperator) new JmlBinaryOperator(new Long(32));
                                  else {

                                    succ_4 = true;
                                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(22).intValue()))) 
                                      succ_4 = false;
                                    if (succ_4) 
                                      return (JmlBinaryOperator) new JmlBinaryOperator(new Long(2));
                                    else {

                                      succ_4 = true;
                                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(23).intValue()))) 
                                        succ_4 = false;
                                      if (succ_4) 
                                        return (JmlBinaryOperator) new JmlBinaryOperator(new Long(8));
                                      else {

                                        succ_4 = true;
                                        if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(24).intValue()))) 
                                          succ_4 = false;
                                        if (succ_4) 
                                          return (JmlBinaryOperator) new JmlBinaryOperator(new Long(30));
                                        else {

                                          succ_4 = true;
                                          if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(25).intValue()))) 
                                            succ_4 = false;
                                          if (succ_4) 
                                            return (JmlBinaryOperator) new JmlBinaryOperator(new Long(31));
                                          else {

                                            succ_4 = true;
                                            if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(26).intValue()))) 
                                              succ_4 = false;
                                            if (succ_4) 
                                              return (JmlBinaryOperator) new JmlBinaryOperator(new Long(14));
                                            else {

                                              succ_4 = true;
                                              if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(27).intValue()))) 
                                                succ_4 = false;
                                              if (succ_4) 
                                                return (JmlBinaryOperator) new JmlBinaryOperator(new Long(7));
                                              else {

                                                succ_4 = true;
                                                if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(30).intValue()))) 
                                                  succ_4 = false;
                                                if (succ_4) 
                                                  return (JmlBinaryOperator) new JmlBinaryOperator(new Long(21));
                                                else {

                                                  succ_4 = true;
                                                  if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(31).intValue()))) 
                                                    succ_4 = false;
                                                  if (succ_4) 
                                                    return (JmlBinaryOperator) new JmlBinaryOperator(new Long(24));
                                                  else {

                                                    succ_4 = true;
                                                    if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(32).intValue()))) 
                                                      succ_4 = false;
                                                    if (succ_4) 
                                                      return (JmlBinaryOperator) new JmlBinaryOperator(new Long(19));
                                                    else {

                                                      succ_4 = true;
                                                      if (!UTIL.equals(new Boolean(true), new Boolean(val.intValue() == new Long(33).intValue()))) 
                                                        succ_4 = false;
                                                      if (succ_4) 
                                                        return (JmlBinaryOperator) new JmlBinaryOperator(new Long(9));
                                                      else {

                                                        vdm_Error elem_8 = null;
                                                        Long tmpVar_9 = null;
                                                        tmpVar_9 = op.getLine();
                                                        Long tmpVar_10 = null;
                                                        tmpVar_10 = op.getColumn();
                                                        String tmpVar_11 = null;
                                                        tmpVar_11 = op.identity();
                                                        elem_8 = new vdm_Error(tmpVar_9, tmpVar_10, tmpVar_11);
                                                        log.add(elem_8);
                                                        return (JmlBinaryOperator) new JmlBinaryOperator();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertBinaryOperator


// ***** VDMTOOLS START Name=convertForAllExpression KEEP=NO
  public JmlForAllExpression convertForAllExpression (final OmlForAllExpression e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getBindList();
    Vector bind = null;
    bind = tmpVal_3;
    IOmlExpression tmpVal_4 = null;
    tmpVal_4 = (IOmlExpression) e.getExpression();
    IOmlExpression expr = null;
    expr = (IOmlExpression) tmpVal_4;
    IJmlExpression newexpr = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) expr);
    return (JmlForAllExpression) (JmlForAllExpression) buildForAllExpression(bind, (JmlExpression) newexpr);
  }
// ***** VDMTOOLS END Name=convertForAllExpression


// ***** VDMTOOLS START Name=buildForAllExpression KEEP=NO
  public JmlForAllExpression buildForAllExpression (final Vector bind, final JmlExpression expr) throws CGException {
    if (new Boolean((new Long(bind.size()).intValue()) > (new Long(1).intValue())).booleanValue()) {

      JmlQuantifierDeclaration tmpVal_16 = null;
      tmpVal_16 = (JmlQuantifierDeclaration) (JmlQuantifierDeclaration) buildBind((IOmlBind) (OmlBind) bind.get(0));
      JmlQuantifierDeclaration b = null;
      b = (JmlQuantifierDeclaration) tmpVal_16;
      JmlForAllExpression tmpVal_19 = null;
      tmpVal_19 = (JmlForAllExpression) (JmlForAllExpression) buildForAllExpression(new Vector(bind.subList(1, bind.size())), (JmlExpression) expr);
      JmlForAllExpression e = null;
      e = (JmlForAllExpression) tmpVal_19;
      JmlForAllExpression rexpr_23 = null;
      Vector arg_25 = null;
      arg_25 = new Vector();
      arg_25.add(e);
      rexpr_23 = new JmlForAllExpression(b, arg_25);
      return (JmlForAllExpression) rexpr_23;
    }
    else {

      JmlQuantifierDeclaration tmpVal_8 = null;
      tmpVal_8 = (JmlQuantifierDeclaration) (JmlQuantifierDeclaration) buildBind((IOmlBind) (OmlBind) bind.get(0));
      JmlQuantifierDeclaration b = null;
      b = (JmlQuantifierDeclaration) tmpVal_8;
      JmlForAllExpression rexpr_11 = null;
      Vector arg_13 = null;
      arg_13 = new Vector();
      arg_13.add(expr);
      rexpr_11 = new JmlForAllExpression(b, arg_13);
      return (JmlForAllExpression) rexpr_11;
    }
  }
// ***** VDMTOOLS END Name=buildForAllExpression


// ***** VDMTOOLS START Name=buildBind KEEP=NO
  public JmlQuantifierDeclaration buildBind (final IOmlBind b) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(b instanceof OmlTypeBind))) 
        succ_2 = false;
      if (succ_2) 
        return (JmlQuantifierDeclaration) (JmlQuantifierDeclaration) buildTypeBinds((OmlTypeBind) b);
      else 
        return (JmlQuantifierDeclaration) new JmlQuantifierDeclaration();
    }
  }
// ***** VDMTOOLS END Name=buildBind


// ***** VDMTOOLS START Name=buildTypeBinds KEEP=NO
  public JmlQuantifierDeclaration buildTypeBinds (final OmlTypeBind b) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = b.getPattern();
    Vector p = null;
    p = tmpVal_3;
    IOmlType tmpVal_4 = null;
    tmpVal_4 = (IOmlType) b.getType();
    IOmlType t = null;
    t = (IOmlType) tmpVal_4;
    return (JmlQuantifierDeclaration) buildTypeBind(p, (IOmlType) t);
  }
// ***** VDMTOOLS END Name=buildTypeBinds


// ***** VDMTOOLS START Name=buildTypeBind KEEP=NO
  public JmlQuantifierDeclaration buildTypeBind (final Vector p, final IOmlType t) throws CGException {

    Vector tmpVal_4 = null;
    tmpVal_4 = getVars(p);
    Vector s = null;
    s = tmpVal_4;
    IJmlType t1 = (IJmlType) (IJmlType) convertType((IOmlType) t);
    return (JmlQuantifierDeclaration) new JmlQuantifierDeclaration(null, t1, s);
  }
// ***** VDMTOOLS END Name=buildTypeBind


// ***** VDMTOOLS START Name=getVars KEEP=NO
  public Vector getVars (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        String reselem_12 = null;
        IOmlPattern par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (IOmlPattern) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = getVar((IOmlPattern) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=getVars


// ***** VDMTOOLS START Name=getVar KEEP=NO
  public String getVar (final IOmlPattern p) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(p instanceof OmlPatternIdentifier))) 
        succ_2 = false;
      if (succ_2) 
        return getId((OmlPatternIdentifier) p);
      else {

        vdm_Error elem_6 = null;
        Long tmpVar_7 = null;
        tmpVar_7 = p.getLine();
        Long tmpVar_8 = null;
        tmpVar_8 = p.getColumn();
        String tmpVar_9 = null;
        tmpVar_9 = p.identity();
        elem_6 = new vdm_Error(tmpVar_7, tmpVar_8, tmpVar_9);
        log.add(elem_6);
        return UTIL.ConvertToString(new Vector());
      }
    }
  }
// ***** VDMTOOLS END Name=getVar


// ***** VDMTOOLS START Name=convertExistsExpression KEEP=NO
  public JmlExistsExpression convertExistsExpression (final OmlExistsExpression e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getBindList();
    Vector bind = null;
    bind = tmpVal_3;
    IOmlExpression tmpVal_4 = null;
    tmpVal_4 = (IOmlExpression) e.getExpression();
    IOmlExpression expr = null;
    expr = (IOmlExpression) tmpVal_4;
    IJmlExpression newexpr = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) expr);
    return (JmlExistsExpression) (JmlExistsExpression) buildExistsExpression(bind, (JmlExpression) newexpr);
  }
// ***** VDMTOOLS END Name=convertExistsExpression


// ***** VDMTOOLS START Name=buildExistsExpression KEEP=NO
  public JmlExistsExpression buildExistsExpression (final Vector bind, final JmlExpression expr) throws CGException {
    if (new Boolean((new Long(bind.size()).intValue()) > (new Long(1).intValue())).booleanValue()) {

      JmlQuantifierDeclaration tmpVal_16 = null;
      tmpVal_16 = (JmlQuantifierDeclaration) (JmlQuantifierDeclaration) buildBind((IOmlBind) (OmlBind) bind.get(0));
      JmlQuantifierDeclaration b = null;
      b = (JmlQuantifierDeclaration) tmpVal_16;
      JmlExistsExpression tmpVal_19 = null;
      tmpVal_19 = (JmlExistsExpression) (JmlExistsExpression) buildExistsExpression(new Vector(bind.subList(1, bind.size())), (JmlExpression) expr);
      JmlExistsExpression e = null;
      e = (JmlExistsExpression) tmpVal_19;
      JmlExistsExpression rexpr_23 = null;
      Vector arg_25 = null;
      arg_25 = new Vector();
      arg_25.add(e);
      rexpr_23 = new JmlExistsExpression(b, arg_25);
      return (JmlExistsExpression) rexpr_23;
    }
    else {

      JmlQuantifierDeclaration tmpVal_8 = null;
      tmpVal_8 = (JmlQuantifierDeclaration) (JmlQuantifierDeclaration) buildBind((IOmlBind) (OmlBind) bind.get(0));
      JmlQuantifierDeclaration b = null;
      b = (JmlQuantifierDeclaration) tmpVal_8;
      JmlExistsExpression rexpr_11 = null;
      Vector arg_13 = null;
      arg_13 = new Vector();
      arg_13.add(expr);
      rexpr_11 = new JmlExistsExpression(b, arg_13);
      return (JmlExistsExpression) rexpr_11;
    }
  }
// ***** VDMTOOLS END Name=buildExistsExpression


// ***** VDMTOOLS START Name=convertSetEnumeration KEEP=NO
  public JmlSetEnumeration convertSetEnumeration (final OmlSetEnumeration e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getExpressionList();
    Vector v = null;
    v = tmpVal_3;
    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = v.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_19 = bind_l_6.iterator(); enm_19.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_19.next());
        i = e_9;
        IJmlExpression reselem_14 = null;
        IOmlExpression par_15 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= v.size())) 
          par_15 = (IOmlExpression) v.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_14 = (IJmlExpression) convertExpression((IOmlExpression) par_15);
        res_l_5.add(reselem_14);
      }
      tmpVal_4 = res_l_5;
    }
    Vector s = null;
    s = tmpVal_4;
    return (JmlSetEnumeration) new JmlSetEnumeration(s);
  }
// ***** VDMTOOLS END Name=convertSetEnumeration


// ***** VDMTOOLS START Name=convertSequenceEnumeration KEEP=NO
  public JmlSequenceEnumeration convertSequenceEnumeration (final OmlSequenceEnumeration e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getExpressionList();
    Vector v = null;
    v = tmpVal_3;
    Vector tmpVal_4 = null;
    {

      Vector res_l_5 = new Vector();
      HashSet resBind_s_7 = new HashSet();
      HashSet riseq_11 = new HashSet();
      int max_12 = v.size();
      for (int i_13 = 1; i_13 <= max_12; i_13++) 
        riseq_11.add(new Long(i_13));
      resBind_s_7 = riseq_11;
      Vector bind_l_6 = null;
      bind_l_6 = UTIL.Sort(resBind_s_7);
      Long i = null;
      for (Iterator enm_19 = bind_l_6.iterator(); enm_19.hasNext(); ) {

        Long e_9 = UTIL.NumberToLong(enm_19.next());
        i = e_9;
        IJmlExpression reselem_14 = null;
        IOmlExpression par_15 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= v.size())) 
          par_15 = (IOmlExpression) v.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_14 = (IJmlExpression) convertExpression((IOmlExpression) par_15);
        res_l_5.add(reselem_14);
      }
      tmpVal_4 = res_l_5;
    }
    Vector s = null;
    s = tmpVal_4;
    return (JmlSequenceEnumeration) new JmlSequenceEnumeration(s);
  }
// ***** VDMTOOLS END Name=convertSequenceEnumeration


// ***** VDMTOOLS START Name=convertMapEnumeration KEEP=NO
  public JmlMapEnumeration convertMapEnumeration (final OmlMapEnumeration e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getMapletList();
    Vector m = null;
    m = tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = convertMapLetList(m);
    Vector s = null;
    s = tmpVal_4;
    return (JmlMapEnumeration) new JmlMapEnumeration(s);
  }
// ***** VDMTOOLS END Name=convertMapEnumeration


// ***** VDMTOOLS START Name=convertMapLetList KEEP=NO
  public Vector convertMapLetList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        JmlMapLet reselem_12 = null;
        OmlMaplet par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlMaplet) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (JmlMapLet) convertMapLet((OmlMaplet) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertMapLetList


// ***** VDMTOOLS START Name=convertMapLet KEEP=NO
  public JmlMapLet convertMapLet (final OmlMaplet e) throws CGException {

    IOmlExpression d = null;
    d = (IOmlExpression) e.getDomExpression();
    IOmlExpression r = null;
    r = (IOmlExpression) e.getRngExpression();
    IJmlExpression dm = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) d);
    IJmlExpression rn = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) r);
    return (JmlMapLet) new JmlMapLet(dm, rn);
  }
// ***** VDMTOOLS END Name=convertMapLet


// ***** VDMTOOLS START Name=convertTupleConstructor KEEP=NO
  public JmlNewExpression convertTupleConstructor (final OmlTupleConstructor e) throws CGException {

    Vector tmpVal_3 = null;
    tmpVal_3 = e.getExpressionList();
    Vector s = null;
    s = tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = convertExpressionList(s);
    Vector q = null;
    q = tmpVal_4;
    JmlTupleType tmpVal_6 = null;
    tmpVal_6 = (JmlTupleType) new JmlTupleType();
    JmlTupleType t = null;
    t = (JmlTupleType) tmpVal_6;
    return (JmlNewExpression) new JmlNewExpression(t, q);
  }
// ***** VDMTOOLS END Name=convertTupleConstructor


// ***** VDMTOOLS START Name=convertExpressionList KEEP=NO
  public Vector convertExpressionList (final Vector s) throws CGException {

    Vector rexpr_2 = null;
    {

      Vector res_l_3 = new Vector();
      HashSet resBind_s_5 = new HashSet();
      HashSet riseq_9 = new HashSet();
      int max_10 = s.size();
      for (int i_11 = 1; i_11 <= max_10; i_11++) 
        riseq_9.add(new Long(i_11));
      resBind_s_5 = riseq_9;
      Vector bind_l_4 = null;
      bind_l_4 = UTIL.Sort(resBind_s_5);
      Long i = null;
      for (Iterator enm_17 = bind_l_4.iterator(); enm_17.hasNext(); ) {

        Long e_7 = UTIL.NumberToLong(enm_17.next());
        i = e_7;
        IJmlExpression reselem_12 = null;
        OmlExpression par_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          par_13 = (OmlExpression) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_12 = (IJmlExpression) convertExpression((IOmlExpression) par_13);
        res_l_3.add(reselem_12);
      }
      rexpr_2 = res_l_3;
    }
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=convertExpressionList


// ***** VDMTOOLS START Name=convertRecordExpression KEEP=NO
  public JmlNewExpression convertRecordExpression (final OmlRecordConstructor e) throws CGException {

    IOmlName tmpVal_3 = null;
    tmpVal_3 = (IOmlName) e.getName();
    IOmlName n = null;
    n = (IOmlName) tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = e.getExpressionList();
    Vector s = null;
    s = tmpVal_4;
    Vector tmpVal_5 = null;
    tmpVal_5 = convertExpressionList(s);
    Vector q = null;
    q = tmpVal_5;
    JmlName nn = (JmlName) (JmlName) convertName((OmlName) n);
    JmlClassName tmpVal_9 = null;
    tmpVal_9 = (JmlClassName) new JmlClassName(nn);
    JmlClassName t = null;
    t = (JmlClassName) tmpVal_9;
    return (JmlNewExpression) new JmlNewExpression(t, q);
  }
// ***** VDMTOOLS END Name=convertRecordExpression


// ***** VDMTOOLS START Name=convertApplyExpression KEEP=NO
  public JmlApplyExpression convertApplyExpression (final OmlApplyExpression e) throws CGException {

    IOmlExpression exp = null;
    exp = (IOmlExpression) e.getExpression();
    Vector lst = null;
    lst = e.getExpressionList();
    IJmlExpression nexp = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) exp);
    Vector nlst = convertExpressionList(lst);
    return (JmlApplyExpression) new JmlApplyExpression(nexp, nlst);
  }
// ***** VDMTOOLS END Name=convertApplyExpression


// ***** VDMTOOLS START Name=convertFieldSelect KEEP=NO
  public JmlFieldSelectExpression convertFieldSelect (final OmlFieldSelect e) throws CGException {

    IOmlExpression exp = null;
    exp = (IOmlExpression) e.getExpression();
    IOmlName tmpVal_4 = null;
    tmpVal_4 = (IOmlName) e.getName();
    IOmlName n = null;
    n = (IOmlName) tmpVal_4;
    IJmlExpression nexp = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) exp);
    JmlName nn = (JmlName) (JmlName) convertName((OmlName) n);
    return (JmlFieldSelectExpression) new JmlFieldSelectExpression(nexp, nn);
  }
// ***** VDMTOOLS END Name=convertFieldSelect


// ***** VDMTOOLS START Name=convertName KEEP=NO
  public JmlName convertName (final OmlName n) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = n.getClassIdentifier();
    String c = null;
    c = tmpVal_3;
    String tmpVal_4 = null;
    tmpVal_4 = n.getIdentifier();
    String id = null;
    id = tmpVal_4;
    return (JmlName) new JmlName(c, id);
  }
// ***** VDMTOOLS END Name=convertName


// ***** VDMTOOLS START Name=convertNewExpression KEEP=NO
  public JmlNewExpression convertNewExpression (final OmlNewExpression e) throws CGException {

    IOmlName tmpVal_3 = null;
    tmpVal_3 = (IOmlName) e.getName();
    IOmlName n = null;
    n = (IOmlName) tmpVal_3;
    Vector tmpVal_4 = null;
    tmpVal_4 = e.getExpressionList();
    Vector l = null;
    l = tmpVal_4;
    JmlName nn = (JmlName) (JmlName) convertName((OmlName) n);
    JmlClassName tmpVal_7 = null;
    tmpVal_7 = (JmlClassName) new JmlClassName(nn);
    JmlClassName t = null;
    t = (JmlClassName) tmpVal_7;
    Vector nl = convertExpressionList(l);
    return (JmlNewExpression) new JmlNewExpression(t, nl);
  }
// ***** VDMTOOLS END Name=convertNewExpression


// ***** VDMTOOLS START Name=convertSelfExpression KEEP=NO
  public JmlThisExpression convertSelfExpression (final OmlSelfExpression var_1_1) throws CGException {
    return (JmlThisExpression) new JmlThisExpression();
  }
// ***** VDMTOOLS END Name=convertSelfExpression


// ***** VDMTOOLS START Name=convertIsExpression KEEP=NO
  public JmlInstanceOfExpression convertIsExpression (final OmlIsExpression e) throws CGException {

    IOmlType tmpVal_3 = null;
    tmpVal_3 = (IOmlType) e.getType();
    IOmlType t = null;
    t = (IOmlType) tmpVal_3;
    IOmlExpression exp = null;
    exp = (IOmlExpression) e.getExpression();
    IJmlType nt = (IJmlType) (IJmlType) convertType((IOmlType) t);
    IJmlExpression nexp = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) exp);
    return (JmlInstanceOfExpression) new JmlInstanceOfExpression(nt, nexp);
  }
// ***** VDMTOOLS END Name=convertIsExpression


// ***** VDMTOOLS START Name=convertUndefinedExpression KEEP=NO
  public JmlUndefinedExpression convertUndefinedExpression (final OmlUndefinedExpression var_1_1) throws CGException {
    return (JmlUndefinedExpression) new JmlUndefinedExpression();
  }
// ***** VDMTOOLS END Name=convertUndefinedExpression


// ***** VDMTOOLS START Name=convertIsOfClassExpression KEEP=NO
  public JmlInstanceOfExpression convertIsOfClassExpression (final OmlIsofclassExpression e) throws CGException {

    IOmlName tmpVal_3 = null;
    tmpVal_3 = (IOmlName) e.getName();
    IOmlName n = null;
    n = (IOmlName) tmpVal_3;
    JmlName nn = (JmlName) (JmlName) convertName((OmlName) n);
    JmlClassName tmpVal_6 = null;
    tmpVal_6 = (JmlClassName) new JmlClassName(nn);
    JmlClassName t = null;
    t = (JmlClassName) tmpVal_6;
    IOmlExpression exp = null;
    exp = (IOmlExpression) e.getExpression();
    IJmlExpression nexp = (IJmlExpression) (IJmlExpression) convertExpression((IOmlExpression) exp);
    return (JmlInstanceOfExpression) new JmlInstanceOfExpression(t, nexp);
  }
// ***** VDMTOOLS END Name=convertIsOfClassExpression


// ***** VDMTOOLS START Name=convertOldName KEEP=NO
  public JmlOldName convertOldName (final OmlOldName n) throws CGException {

    JmlOldName rexpr_2 = null;
    String arg_3 = null;
    arg_3 = n.getIdentifier();
    rexpr_2 = new JmlOldName(arg_3);
    return (JmlOldName) rexpr_2;
  }
// ***** VDMTOOLS END Name=convertOldName


// ***** VDMTOOLS START Name=convertLiteralExpression KEEP=NO
  public JmlLiteralExpression convertLiteralExpression (final OmlSymbolicLiteralExpression e) throws CGException {

    IOmlLiteral tmpVal_3 = null;
    tmpVal_3 = (IOmlLiteral) e.getLiteral();
    IOmlLiteral lit = null;
    lit = (IOmlLiteral) tmpVal_3;
    IJmlLiteral nlit = (IJmlLiteral) (IJmlLiteral) convertLiteral((IOmlLiteral) lit);
    return (JmlLiteralExpression) new JmlLiteralExpression(nlit);
  }
// ***** VDMTOOLS END Name=convertLiteralExpression


// ***** VDMTOOLS START Name=convertLiteral KEEP=NO
  public IJmlLiteral convertLiteral (final IOmlLiteral l) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlNumericLiteral))) 
        succ_2 = false;
      if (succ_2) 
        return (IJmlLiteral) convertNumericLiteral((OmlNumericLiteral) l);
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlRealLiteral))) 
          succ_2 = false;
        if (succ_2) 
          return (IJmlLiteral) convertRealLiteral((OmlRealLiteral) l);
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlBooleanLiteral))) 
            succ_2 = false;
          if (succ_2) 
            return (IJmlLiteral) convertBooleanLiteral((OmlBooleanLiteral) l);
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlNilLiteral))) 
              succ_2 = false;
            if (succ_2) 
              return (IJmlLiteral) convertNilLiteral((OmlNilLiteral) l);
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlCharacterLiteral))) 
                succ_2 = false;
              if (succ_2) 
                return (IJmlLiteral) convertCharacterLiteral((OmlCharacterLiteral) l);
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlTextLiteral))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IJmlLiteral) convertTextLiteral((OmlTextLiteral) l);
                else {

                  succ_2 = true;
                  if (!UTIL.equals(new Boolean(true), new Boolean(l instanceof OmlQuoteLiteral))) 
                    succ_2 = false;
                  if (succ_2) 
                    return (IJmlLiteral) convertQuoteLiteral((OmlQuoteLiteral) l);
                  else {

                    vdm_Error elem_6 = null;
                    Long tmpVar_7 = null;
                    tmpVar_7 = l.getLine();
                    Long tmpVar_8 = null;
                    tmpVar_8 = l.getColumn();
                    String tmpVar_9 = null;
                    tmpVar_9 = l.identity();
                    elem_6 = new vdm_Error(tmpVar_7, tmpVar_8, tmpVar_9);
                    log.add(elem_6);
                    return (IJmlLiteral) new JmlNullLiteral();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=convertLiteral


// ***** VDMTOOLS START Name=convertNumericLiteral KEEP=NO
  public JmlNumericalLiteral convertNumericLiteral (final OmlNumericLiteral n) throws CGException {

    Long tmpVal_3 = null;
    tmpVal_3 = n.getVal();
    Long val = null;
    val = tmpVal_3;
    return (JmlNumericalLiteral) new JmlNumericalLiteral(val);
  }
// ***** VDMTOOLS END Name=convertNumericLiteral


// ***** VDMTOOLS START Name=convertRealLiteral KEEP=NO
  public JmlFloatLiteral convertRealLiteral (final OmlRealLiteral n) throws CGException {

    Double tmpVal_3 = null;
    tmpVal_3 = n.getVal();
    Double val = null;
    val = tmpVal_3;
    return (JmlFloatLiteral) new JmlFloatLiteral(val);
  }
// ***** VDMTOOLS END Name=convertRealLiteral


// ***** VDMTOOLS START Name=convertBooleanLiteral KEEP=NO
  public JmlBooleanLiteral convertBooleanLiteral (final OmlBooleanLiteral n) throws CGException {

    Boolean tmpVal_3 = null;
    tmpVal_3 = n.getVal();
    Boolean val = null;
    val = tmpVal_3;
    return (JmlBooleanLiteral) new JmlBooleanLiteral(val);
  }
// ***** VDMTOOLS END Name=convertBooleanLiteral


// ***** VDMTOOLS START Name=convertNilLiteral KEEP=NO
  public JmlNullLiteral convertNilLiteral (final OmlNilLiteral var_1_1) throws CGException {
    return (JmlNullLiteral) new JmlNullLiteral();
  }
// ***** VDMTOOLS END Name=convertNilLiteral


// ***** VDMTOOLS START Name=convertCharacterLiteral KEEP=NO
  public JmlCharacterLiteral convertCharacterLiteral (final OmlCharacterLiteral n) throws CGException {

    Character tmpVal_3 = null;
    tmpVal_3 = n.getVal();
    Character val = null;
    val = tmpVal_3;
    return (JmlCharacterLiteral) new JmlCharacterLiteral(val);
  }
// ***** VDMTOOLS END Name=convertCharacterLiteral


// ***** VDMTOOLS START Name=convertTextLiteral KEEP=NO
  public JmlStringLiteral convertTextLiteral (final OmlTextLiteral n) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = n.getVal();
    String val = null;
    val = tmpVal_3;
    return (JmlStringLiteral) new JmlStringLiteral(val);
  }
// ***** VDMTOOLS END Name=convertTextLiteral


// ***** VDMTOOLS START Name=convertQuoteLiteral KEEP=NO
  public JmlEnumLiteral convertQuoteLiteral (final OmlQuoteLiteral n) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = n.getVal();
    String val = null;
    val = tmpVal_3;
    return (JmlEnumLiteral) new JmlEnumLiteral(val);
  }
// ***** VDMTOOLS END Name=convertQuoteLiteral

}
;
