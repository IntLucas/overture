//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Wed 11-Jun-2008 by the VDM++ to JAVA Code Generator
// (v8.0.1b - Mon 28-Jan-2008 10:17:36)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class OmlBinaryOperatorQuotes implements IOmlBinaryOperatorQuotes {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

  
// ***** VDMTOOLS START Name=qmap KEEP=NO
  private static HashMap qmap = new HashMap();
// ***** VDMTOOLS END Name=qmap


// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    try {

      OmlBinaryOperatorQuotes.qmap = new HashMap();
      OmlBinaryOperatorQuotes.qmap.put(IQMODIFY, new String("++"));
      OmlBinaryOperatorQuotes.qmap.put(IQGE, new String(">="));
      OmlBinaryOperatorQuotes.qmap.put(IQLT, new String("<"));
      OmlBinaryOperatorQuotes.qmap.put(IQPSUBSET, new String("psubset"));
      OmlBinaryOperatorQuotes.qmap.put(IQMOD, new String("mod"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPDOMRESBY, new String("<-:"));
      OmlBinaryOperatorQuotes.qmap.put(IQINTER, new String("inter"));
      OmlBinaryOperatorQuotes.qmap.put(IQCOMP, new String("comp"));
      OmlBinaryOperatorQuotes.qmap.put(IQMINUS, new String("-"));
      OmlBinaryOperatorQuotes.qmap.put(IQREM, new String("rem"));
      OmlBinaryOperatorQuotes.qmap.put(IQAND, new String("and"));
      OmlBinaryOperatorQuotes.qmap.put(IQUNION, new String("union"));
      OmlBinaryOperatorQuotes.qmap.put(IQINSET, new String("in set"));
      OmlBinaryOperatorQuotes.qmap.put(IQEQUIV, new String("<=>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPRNGRESTO, new String(":>"));
      OmlBinaryOperatorQuotes.qmap.put(IQITERATE, new String("**"));
      OmlBinaryOperatorQuotes.qmap.put(IQSUBSET, new String("subset"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPRNGRESBY, new String("rng"));
      OmlBinaryOperatorQuotes.qmap.put(IQTUPSEL, new String(".#"));
      OmlBinaryOperatorQuotes.qmap.put(IQNOTINSET, new String("not in set"));
      OmlBinaryOperatorQuotes.qmap.put(IQMULTIPLY, new String("*"));
      OmlBinaryOperatorQuotes.qmap.put(IQIMPLY, new String("=>"));
      OmlBinaryOperatorQuotes.qmap.put(IQOR, new String("or"));
      OmlBinaryOperatorQuotes.qmap.put(IQGT, new String(">"));
      OmlBinaryOperatorQuotes.qmap.put(IQPLUS, new String("+"));
      OmlBinaryOperatorQuotes.qmap.put(IQMUNION, new String("munion"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPDOMRESTO, new String("<:"));
      OmlBinaryOperatorQuotes.qmap.put(IQEQ, new String("="));
      OmlBinaryOperatorQuotes.qmap.put(IQDIV, new String("div"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIFFERENCE, new String("\\"));
      OmlBinaryOperatorQuotes.qmap.put(IQCONC, new String("^"));
      OmlBinaryOperatorQuotes.qmap.put(IQLE, new String("<="));
      OmlBinaryOperatorQuotes.qmap.put(IQDIVIDE, new String("/"));
      OmlBinaryOperatorQuotes.qmap.put(IQNE, new String("<>"));
    }
    catch (Throwable e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=OmlBinaryOperatorQuotes KEEP=NO
  public OmlBinaryOperatorQuotes () throws CGException {}
// ***** VDMTOOLS END Name=OmlBinaryOperatorQuotes


// ***** VDMTOOLS START Name=getQuoteName KEEP=NO
  static public String getQuoteName (final Long pid) throws CGException {
    return UTIL.ConvertToString(qmap.get(pid));
  }
// ***** VDMTOOLS END Name=getQuoteName


// ***** VDMTOOLS START Name=validQuote KEEP=NO
  static public Boolean validQuote (final Long pid) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(qmap.containsKey(pid));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=validQuote

}
;
