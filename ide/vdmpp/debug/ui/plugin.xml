<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>


   <!-- preference pages -->
   <extension point="org.eclipse.ui.preferencePages">
      <page
      		category="org.overture.ide.ui.OvertureGlobalPreferencesPage"
            class="org.overture.ide.vdmpp.debug.ui.preferences.VDMPPInterpreterPreferencePage"
            id="org.overture.ide.vdmpp.debug.ui.preferences.VDMPPInterpreterPreferencePage"
            name="VDM++">
      </page>
      <page
      	category="org.overture.ide.ui.OvertureGlobalPreferencesPage"
      	class="org.eclipse.dltk.debug.ui.preferences.ScriptDetailFormattersPreferencePage:org.overture.ide.vdmpp.core.nature"
      	id="org.overture.ide.vdmpp.debug.ui.preferences.debug.detailFormatters"
      	name="Detail formatter" />
   </extension>

<!--
	VDM++ preference initializer
-->  
  <extension point="org.eclipse.core.runtime.preferences">
      <initializer class="org.overture.ide.vdmpp.debug.ui.preferences.VDMPPDebugUIPreferenceInitializer" />
  </extension>

<!-- 
	register a shortcut which appears in the run and/or debug cascade menus 
	to launch the workbench selection or active editor  
-->
<extension point="org.eclipse.debug.ui.launchShortcuts">
   <shortcut
         class="org.overture.ide.vdmpp.debug.ui.shortcurts.VdmppVdmjLaunchShortcut"
         id="org.overture.ide.debug.ui.VDMPPVDMJOvertureLaunchShortcut"
         label="Launch VDMJ VDM++"
         modes="run, debug"
         icon="icons/cview16/vdmpp_file_tsk.png">
   <contextualLaunch>
        <enablement>
          <with variable="selection">
            <count value="1" />
            <iterate>
              <or>
                <test
                  property="org.eclipse.dltk.launching.hasProjectNature"
                  args="org.overture.ide.vdmpp.core.nature" />
              </or>
            </iterate>
          </with>
        </enablement>
      </contextualLaunch>
   </shortcut>
</extension>

<!-- add tab groups for the vdm++ -->
<extension point="org.eclipse.debug.ui.launchConfigurationTabGroups">
   <launchConfigurationTabGroup
         class="org.overture.ide.vdmpp.debug.ui.tabs.VdmppTabGroup"
         id="org.overture.ide.vdmpp.debug.ui.tabs.VdmppTabGroup"
         type="org.overture.ide.vdmpp.debug.core.launchConfigurationTypeVDMJ">
      <launchMode
            description="Run VDM++ specification"
            mode="run"
            perspective="org.overture.ide.vdmpp.ui.VdmPpPerspective">
      </launchMode>
      <launchMode
            description="Debug VDM++ Model"
            mode="debug"
            perspective="org.eclipse.debug.ui.DebugPerspective">
      </launchMode>
   </launchConfigurationTabGroup>
</extension>


<!-- popupmenus 
       right clicking in the editor use #VdmPpEditorContext
       right clicking in the ruler use  #VdmPpRulerContext

	This adds the following popup menus in the ruler:
	   Toggle Breakpoint
	   Enable/Disable breakpoint
	   Breakpoint properties...
	
	If the debugger is active the following menus is available in the editor:
		watch
		inspect
		display 
	   
-->
<extension point="org.eclipse.ui.popupMenus">
    <objectContribution
      adaptable="false"
      id="org.overture.ide.console.ui.objectContribution"
      nameFilter="*"
      objectClass="org.eclipse.dltk.core.ISourceModule">
      <filter
        name="org.eclipse.dltk.ui.nature"
        value="org.overture.ide.vdmpp.core.nature">
      </filter>
      <!--action
        class="org.overturetool.eclipse.plugins.debug.ui.internal.console.ui.actions.PasteOvertureToConsole"
        id="org.overturetool.console.ui.internal.actions.PasteTclTextToConsoleAction"
        label="%OvertureConsole.Actions.PasteToOvertureConsole" / -->
    </objectContribution>

    <viewerContribution
      id="org.overturetool.debug.ui.vdmpp.rulerContribution"
      targetID="#VdmPpRulerContext">
      <!--action
        class="org.eclipse.dltk.debug.ui.actions.RulerToggleWatchPointActionDelegate"
        icon="/icons/oml16.png"
        id="overture.doubleClickWatchPointAction"
        label="Toggle Watchpoint"
        menubarPath="debug"
        style="push">
      </action -->
      <!-- Enable/Disable Breakpoint in the ruler -->
      <action
        label="Enable/Disable breakpoint"
        id="org.overturetool.ui.actions.RulerEnableDisableBreakpointActionDelegate"
        class="org.eclipse.debug.ui.actions.RulerEnableDisableBreakpointActionDelegate"
        menubarPath="debug">
      </action>

	<!-- Toggle Breakpoint in the ruler -->
      <action
        label="Toggle Breakpoint"
        id="org.overturetool.ui.actions.RulerToggleBreakpointActionDelegate"
        class="org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate"
        menubarPath="debug">
      </action>
      <!-- Breakpoint properties in the ruler -->
      <action
        label="Breakpoint properties..."
        class="org.eclipse.dltk.debug.ui.actions.ScriptBreakpointPropertiesRulerActionDelegate"
        id="org.overturetool.debug.ui.ScriptBreakpointPropertiesRulerActionDelegate"
        menubarPath="group.properties" />
    </viewerContribution>
    
    <viewerContribution
      targetID="#VdmPpEditorContext"
      id="org.eclipse.dltk.debug.ui.DebugPopupActions">
      <visibility>
        <and>
          <systemProperty
            name="org.eclipse.dltk.debug.ui.debuggerActive"
            value="true">
          </systemProperty>
          <objectClass name="org.eclipse.jface.text.ITextSelection">
          </objectClass>
        </and>
      </visibility>
      <action
        label="Watch"
        icon="icons/cview16/vdmpp_file_tsk.png"
        class="org.eclipse.dltk.internal.debug.ui.actions.ScriptWatchAction"
        menubarPath="additions"
        id="org.overturetool.debug.ui.ScriptWatch">
      </action>
      <action
        label="Inspect"
        icon="icons/cview16/vdmpp_file_tsk.png"
        definitionId="org.eclipse.dltk.debug.ui.commands.ScriptInspect"
        class="org.eclipse.dltk.internal.debug.ui.actions.PopupScriptInspectAction"
        menubarPath="additions"
        id="org.overturetool.debug.ui.ScriptInspect">
      </action>
      <action
        label="Display"
        icon="icons/cview16/vdmpp_file_tsk.png"
        definitionId="org.eclipse.dltk.debug.ui.commands.ScriptDisplay"
        class="org.eclipse.dltk.internal.debug.ui.actions.PopupScriptDisplayAction"
        menubarPath="additions"
        id="org.overturetool.debug.ui.ScriptDisplay">
      </action>
    </viewerContribution>
  </extension>

  <!-- Add double click to the ruler -->
  <extension point="org.eclipse.ui.editorActions">
    <editorContribution
      targetID="org.overture.ide.vdmpp.ui.internal.editor.VdmPpEditor"
      id="org.overturetool.debug.VDMPPEditor.BreakpointRulerActions">
      <action
        label="Togle Breakpoint (label not used TODO)"
        class="org.eclipse.debug.ui.actions.RulerToggleBreakpointActionDelegate"
        style="push"
        actionID="RulerDoubleClick"
        id="vdmpp.doubleClickBreakpointAction" />
    </editorContribution>
  </extension>
  
  
<!-- 
    VDM++
	The adapters extension point allows plug-ins to declaratively register adapter factories
		
	Two adapter get registred here: 
		RunToLineTarget
		ToggleBreakpoint target
		
	this enables the breakpoint toggle feature 
-->
	<extension point="org.eclipse.core.runtime.adapters">
		<factory
		    adaptableType="org.overture.ide.vdmpp.ui.internal.editor.VdmPpEditor"
		    class="org.overture.ide.vdmpp.debug.ui.VdmppEditorAdapter">
		    <adapter type="org.eclipse.debug.ui.actions.IToggleBreakpointsTarget"/>
		    <adapter type="org.eclipse.debug.ui.actions.IRunToLineTarget"/>	
		</factory>
	</extension>
	
	  <!-- 
  	VDM++
  	 
  	Provides access to plugin specific debug ui implementations.
  -->
  <extension point="org.eclipse.dltk.debug.ui.language">
	<language
      class="org.overture.ide.vdmpp.debug.ui.VDMPPDebugUILanguageToolkit"
      nature="org.overture.ide.vdmpp.core.nature"/>
  </extension>

  
  <!-- 
  	VDM++
  	 
  	When mouse over text
  -->
  <extension point="org.eclipse.dltk.ui.editorTextHovers">
    <hover
      label="Mouse over variable"
      description="When mouse over text"
      nature="org.overture.ide.vdmpp.core.nature"
      class="org.overture.ide.vdmpp.debug.ui.VDMPPDebugHover"
      id="org.overture.ide.debug.ui.vdmpp.VDMPPDebugHover">
    </hover>
  </extension>  
  
  
	
 <!-- 
    This extension point provides a way to associate an image with a launch
    configuration type. 
  -->	
 <extension point="org.eclipse.debug.ui.launchConfigurationTypeImages">
    <launchConfigurationTypeImage
      icon="icons/cview16/vdmpp_file_tsk.png"
      configTypeID="org.overture.ide.vdmpp.debug.core.launchConfigurationTypeVDMJ"
      id="org.overturetool.debug.ui.launchConfigurationTypeImage.overture">
    </launchConfigurationTypeImage>
  </extension>
  
  

  <!-- 
  	This extension point is used to define an action set which should be added
  	to a perspective when a part (view or editor) is opened in the perspective. 
  	In the case of an editor, the action set will remain visible while the 
  	editor is the current editor. In the case of a view, the action set will be
  	visible when the view is the active part.
  -->
  <extension point="org.eclipse.ui.actionSetPartAssociations">
    <actionSetPartAssociation targetID="org.eclipse.debug.ui.launchActionSet">
      <part id="org.eclipse.dltk.ui.ScriptExplorer"></part>
      <part id="org.overture.ide.vdmpp.ui.internal.editor.VdmPpEditor"></part>
    </actionSetPartAssociation>
  </extension>
  
  
    <!-- 
  	
  	A debug  model presentation is responsible for providing 
  	labels, images, and editors for elements in a specific debug model.
  	
  -->
  <extension point="org.eclipse.debug.ui.debugModelPresentations">
    <debugModelPresentation
      class="org.overture.ide.vdmpp.debug.ui.VDMPPDebugModelPresentation"
      id="org.overture.ide.vdmpp.debug.ui.VDMPPDebugModelPresentation" />
  </extension>
  
  
  <!-- 
  	This extension provides a mechanism for providing delegates to evaluate watch expressions on a per 
 	debug model basis. Watch expression delegates perform evaluations for watch expressions and report 
 	the results asynchronously
  -->
  <extension point="org.eclipse.debug.core.watchExpressionDelegates">
    <watchExpressionDelegate
      debugModel="org.overture.ide.vdmpp.debug.ui.VDMPPDebugModelPresentation"
      delegateClass="org.eclipse.dltk.internal.debug.core.model.ScriptWatchExpressionDelegate">
    </watchExpressionDelegate>
  </extension>
  
      <!--
  	This extension point provides a mechanism for specifying a context that should be associated with 
 	the given debug model. The Debug view uses these bindings to automatically enable contexts. 
 	When an element in the Debug view which provides an IDebugModelProvider adapter or a stack 
 	frame with the specified debug model identifier is selected, the context with the given identifier 
 	will be enabled. 
  -->
  <extension point="org.eclipse.debug.ui.debugModelContextBindings">
    <modelContextBinding
      contextId="org.eclipse.dltk.debug.ui.debugging"
      debugModelId="org.overture.ide.vdmpp.debug.ui.VDMPPDebugModelPresentation" />
  </extension>
  
  



  <!--
     is used to declare commands and command categories, using the command and category elements. 
     A command is an abstract representation of some semantic behaviour, but not it's actual 
     implementation.
  -->
  <extension point="org.eclipse.ui.commands">
    <command
      id="org.overture.ide.debug.ui.commands.toggleGlobalVariables"
      description="Toggle Global Variables"
      name="Show Global Variables" />
    <command
      id="org.overture.ide.debug.ui.commands.toggleClassVariables"
      description="Toggle Class Variables"
      name="Show Class Variables" />
    <command
      id="org.overture.ide.debug.ui.commands.toggleLocalVariables"
      description="Toggle Local Variables"
      name="Show Local Variables" />      
    <command
      id="org.overture.ide.debug.ui.commands.showPreferences"
      description="Show Preferences"
      name="Show Preferences" />         
  </extension>
  
  <!-- 
  	adds commands in the variableview
  --> 
   <extension point="org.eclipse.ui.menus">
    <menuContribution locationURI="menu:org.eclipse.debug.ui.VariableView">
      <menu
        label="Variables (VDM++)"
        id="org.overture.ide.debug.ui.menu.VariableView" />
    </menuContribution>
    <menuContribution locationURI="menu:org.overture.ide.debug.ui.menu.VariableView">
      <command 
        commandId="org.overture.ide.debug.ui.commands.toggleGlobalVariables"
        tooltip="Show Global variables"     
        style="toggle" />
      <command 
        commandId="org.overture.ide.debug.ui.commands.toggleClassVariables"
        tooltip="Show class variables"      
        style="toggle" />
      <command 
        commandId="org.overture.ide.debug.ui.commands.toggleLocalVariables"
        tooltip="Show Local Variables" 
        style="toggle" />                      
      <command
        commandId="org.overture.ide.debug.ui.commands.showPreferences" />                          
    </menuContribution>  
  </extension>
  
    <extension point="org.eclipse.ui.handlers">
    <handler 
      commandId="org.overture.ide.debug.ui.commands.toggleGlobalVariables"
      class="org.overture.ide.vdmpp.debug.ui.handlers.VdmppToggleGlobalVariableHandler" />
    <handler 
      commandId="org.overture.ide.debug.ui.commands.toggleClassVariables"
      class="org.overture.ide.vdmpp.debug.ui.handlers.VdmppToggleClassVariablesHandler" />
    <handler 
      commandId="org.overture.ide.debug.ui.commands.toggleLocalVariables"
      class="org.overture.ide.vdmpp.debug.ui.handlers.VdmppToggleLocalVariableHandler" />      
    <handler
      commandId="org.overture.ide.debug.ui.commands.showPreferences"
      class="org.eclipse.dltk.debug.ui.handlers.VariablesViewOptionsHandler:org.overture.ide.vdmpp.core.nature" />
  </extension>

</plugin>
