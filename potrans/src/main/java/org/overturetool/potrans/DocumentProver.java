//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class DocumentProver {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=model KEEP=NO
  private HolDocument model = null;
// ***** VDMTOOLS END Name=model

// ***** VDMTOOLS START Name=pos KEEP=NO
  private HashSet pos = new HashSet();
// ***** VDMTOOLS END Name=pos


// ***** VDMTOOLS START Name=vdm_init_DocumentProver KEEP=NO
  private void vdm_init_DocumentProver () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_DocumentProver


// ***** VDMTOOLS START Name=DocumentProver KEEP=NO
  public DocumentProver () throws CGException {
    vdm_init_DocumentProver();
  }
// ***** VDMTOOLS END Name=DocumentProver


// ***** VDMTOOLS START Name=DocumentProver#2|HolDocument|HashSet KEEP=NO
  public DocumentProver (final HolDocument newModel, final HashSet newPos) throws CGException {

    vdm_init_DocumentProver();
    {

      HolTypeDescription typeInfo = new HolTypeDescription();
      model = (HolDocument) UTIL.clone(newModel);
      pos = (HashSet) UTIL.clone(newPos);
      HolTypeDescription rhs_5 = null;
      rhs_5 = (HolTypeDescription) model.processTypeInformation((HolTypeDescription) typeInfo);
      typeInfo = (HolTypeDescription) UTIL.clone(rhs_5);
      {

        ProofObligation po = null;
        for (Iterator enm_14 = pos.iterator(); enm_14.hasNext(); ) {

          ProofObligation elem_8 = (ProofObligation) enm_14.next();
          po = (ProofObligation) elem_8;
          {

            HolExpression obj_12 = null;
            obj_12 = (HolExpression) po.getExpression();
            obj_12.setTypeInformation((HolTypeDescription) typeInfo);
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=DocumentProver#2|HolDocument|HashSet


// ***** VDMTOOLS START Name=getProofCounter KEEP=NO
  public MLExpression getProofCounter () throws CGException {

    String res = new String("");
    String rhs_1 = null;
    rhs_1 = res.concat(new String("fun boolToInteger(true) = 1 | boolToInteger(false)=0;\n"));
    res = UTIL.ConvertToString(UTIL.clone(rhs_1));
    String rhs_4 = null;
    String var2_6 = null;
    var2_6 = model.print();
    rhs_4 = res.concat(var2_6);
    res = UTIL.ConvertToString(UTIL.clone(rhs_4));
    String rhs_7 = null;
    rhs_7 = res.concat(new String("val total = 0;\n"));
    res = UTIL.ConvertToString(UTIL.clone(rhs_7));
    String rhs_10 = null;
    rhs_10 = res.concat(new String("val success = 0;\n"));
    res = UTIL.ConvertToString(UTIL.clone(rhs_10));
    {

      ProofObligation po = null;
      for (Iterator enm_27 = pos.iterator(); enm_27.hasNext(); ) {

        ProofObligation elem_14 = (ProofObligation) enm_27.next();
        po = (ProofObligation) elem_14;
        {

          String rhs_17 = null;
          String var1_18 = null;
          String var1_19 = null;
          String var1_20 = null;
          var1_20 = res.concat(new String("val success = success + boolToInteger(can "));
          String var2_23 = null;
          MLExpression obj_24 = null;
          obj_24 = (MLExpression) po.getHolProverExpression();
          var2_23 = obj_24.print();
          var1_19 = var1_20.concat(var2_23);
          var1_18 = var1_19.concat(new String(");\n"));
          rhs_17 = var1_18.concat(new String("val total = total + 1;\n"));
          res = UTIL.ConvertToString(UTIL.clone(rhs_17));
        }
      }
    }
    String rhs_28 = null;
    rhs_28 = res.concat(new String("total;\n"));
    res = UTIL.ConvertToString(UTIL.clone(rhs_28));
    String rhs_31 = null;
    rhs_31 = res.concat(new String("success;\n"));
    res = UTIL.ConvertToString(UTIL.clone(rhs_31));
    return (MLExpression) new NonHolExpression(res);
  }
// ***** VDMTOOLS END Name=getProofCounter

}
;
