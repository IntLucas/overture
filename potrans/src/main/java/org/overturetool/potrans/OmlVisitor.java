//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlVisitor extends IOmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_OmlVisitor KEEP=NO
  private void vdm_init_OmlVisitor () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_OmlVisitor


// ***** VDMTOOLS START Name=OmlVisitor KEEP=NO
  public OmlVisitor () throws CGException {
    vdm_init_OmlVisitor();
  }
// ***** VDMTOOLS END Name=OmlVisitor


// ***** VDMTOOLS START Name=visitDocument#1|IOmlDocument KEEP=NO
  public void visitDocument (final IOmlDocument var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDocument#1|IOmlDocument


// ***** VDMTOOLS START Name=visitLexem#1|IOmlLexem KEEP=NO
  public void visitLexem (final IOmlLexem var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLexem#1|IOmlLexem


// ***** VDMTOOLS START Name=visitIsofclassExpression#1|IOmlIsofclassExpression KEEP=NO
  public void visitIsofclassExpression (final IOmlIsofclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIsofclassExpression#1|IOmlIsofclassExpression


// ***** VDMTOOLS START Name=visitTrapStatement#1|IOmlTrapStatement KEEP=NO
  public void visitTrapStatement (final IOmlTrapStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTrapStatement#1|IOmlTrapStatement


// ***** VDMTOOLS START Name=visitCasesStatement#1|IOmlCasesStatement KEEP=NO
  public void visitCasesStatement (final IOmlCasesStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesStatement#1|IOmlCasesStatement


// ***** VDMTOOLS START Name=visitFunctionBody#1|IOmlFunctionBody KEEP=NO
  public void visitFunctionBody (final IOmlFunctionBody var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionBody#1|IOmlFunctionBody


// ***** VDMTOOLS START Name=visitClass#1|IOmlClass KEEP=NO
  public void visitClass (final IOmlClass var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClass#1|IOmlClass


// ***** VDMTOOLS START Name=visitSpecifications#1|IOmlSpecifications KEEP=NO
  public void visitSpecifications (final IOmlSpecifications var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSpecifications#1|IOmlSpecifications


// ***** VDMTOOLS START Name=visitSeq0Type#1|IOmlSeq0Type KEEP=NO
  public void visitSeq0Type (final IOmlSeq0Type var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeq0Type#1|IOmlSeq0Type


// ***** VDMTOOLS START Name=visitBinaryExpression#1|IOmlBinaryExpression KEEP=NO
  public void visitBinaryExpression (final IOmlBinaryExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBinaryExpression#1|IOmlBinaryExpression


// ***** VDMTOOLS START Name=visitValueShape#1|IOmlValueShape KEEP=NO
  public void visitValueShape (final IOmlValueShape var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueShape#1|IOmlValueShape


// ***** VDMTOOLS START Name=visitMutexPredicate#1|IOmlMutexPredicate KEEP=NO
  public void visitMutexPredicate (final IOmlMutexPredicate var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMutexPredicate#1|IOmlMutexPredicate


// ***** VDMTOOLS START Name=visitOperationDefinitions#1|IOmlOperationDefinitions KEEP=NO
  public void visitOperationDefinitions (final IOmlOperationDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationDefinitions#1|IOmlOperationDefinitions


// ***** VDMTOOLS START Name=visitFieldSelect#1|IOmlFieldSelect KEEP=NO
  public void visitFieldSelect (final IOmlFieldSelect var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFieldSelect#1|IOmlFieldSelect


// ***** VDMTOOLS START Name=visitReturnStatement#1|IOmlReturnStatement KEEP=NO
  public void visitReturnStatement (final IOmlReturnStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitReturnStatement#1|IOmlReturnStatement


// ***** VDMTOOLS START Name=visitActExpression#1|IOmlActExpression KEEP=NO
  public void visitActExpression (final IOmlActExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitActExpression#1|IOmlActExpression


// ***** VDMTOOLS START Name=visitInstanceVariableDefinitions#1|IOmlInstanceVariableDefinitions KEEP=NO
  public void visitInstanceVariableDefinitions (final IOmlInstanceVariableDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariableDefinitions#1|IOmlInstanceVariableDefinitions


// ***** VDMTOOLS START Name=visitIntType#1|IOmlIntType KEEP=NO
  public void visitIntType (final IOmlIntType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIntType#1|IOmlIntType


// ***** VDMTOOLS START Name=visitThreadIdExpression#1|IOmlThreadIdExpression KEEP=NO
  public void visitThreadIdExpression (final IOmlThreadIdExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThreadIdExpression#1|IOmlThreadIdExpression


// ***** VDMTOOLS START Name=visitLetStatement#1|IOmlLetStatement KEEP=NO
  public void visitLetStatement (final IOmlLetStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetStatement#1|IOmlLetStatement


// ***** VDMTOOLS START Name=visitFinExpression#1|IOmlFinExpression KEEP=NO
  public void visitFinExpression (final IOmlFinExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFinExpression#1|IOmlFinExpression


// ***** VDMTOOLS START Name=visitDefStatement#1|IOmlDefStatement KEEP=NO
  public void visitDefStatement (final IOmlDefStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDefStatement#1|IOmlDefStatement


// ***** VDMTOOLS START Name=visitSequenceForLoop#1|IOmlSequenceForLoop KEEP=NO
  public void visitSequenceForLoop (final IOmlSequenceForLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceForLoop#1|IOmlSequenceForLoop


// ***** VDMTOOLS START Name=visitTrapDefinition#1|IOmlTrapDefinition KEEP=NO
  public void visitTrapDefinition (final IOmlTrapDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTrapDefinition#1|IOmlTrapDefinition


// ***** VDMTOOLS START Name=visitFunctionDefinition#1|IOmlFunctionDefinition KEEP=NO
  public void visitFunctionDefinition (final IOmlFunctionDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionDefinition#1|IOmlFunctionDefinition


// ***** VDMTOOLS START Name=visitSamebaseclassExpression#1|IOmlSamebaseclassExpression KEEP=NO
  public void visitSamebaseclassExpression (final IOmlSamebaseclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSamebaseclassExpression#1|IOmlSamebaseclassExpression


// ***** VDMTOOLS START Name=visitSkipStatement#1|IOmlSkipStatement KEEP=NO
  public void visitSkipStatement (final IOmlSkipStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSkipStatement#1|IOmlSkipStatement


// ***** VDMTOOLS START Name=visitPatternIdentifier#1|IOmlPatternIdentifier KEEP=NO
  public void visitPatternIdentifier (final IOmlPatternIdentifier var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPatternIdentifier#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=visitCompositeType#1|IOmlCompositeType KEEP=NO
  public void visitCompositeType (final IOmlCompositeType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCompositeType#1|IOmlCompositeType


// ***** VDMTOOLS START Name=visitNondeterministicStatement#1|IOmlNondeterministicStatement KEEP=NO
  public void visitNondeterministicStatement (final IOmlNondeterministicStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNondeterministicStatement#1|IOmlNondeterministicStatement


// ***** VDMTOOLS START Name=visitExceptions#1|IOmlExceptions KEEP=NO
  public void visitExceptions (final IOmlExceptions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExceptions#1|IOmlExceptions


// ***** VDMTOOLS START Name=visitNumericLiteral#1|IOmlNumericLiteral KEEP=NO
  public void visitNumericLiteral (final IOmlNumericLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNumericLiteral#1|IOmlNumericLiteral


// ***** VDMTOOLS START Name=visitNilLiteral#1|IOmlNilLiteral KEEP=NO
  public void visitNilLiteral (final IOmlNilLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNilLiteral#1|IOmlNilLiteral


// ***** VDMTOOLS START Name=visitMapEnumeration#1|IOmlMapEnumeration KEEP=NO
  public void visitMapEnumeration (final IOmlMapEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapEnumeration#1|IOmlMapEnumeration


// ***** VDMTOOLS START Name=visitCasesStatementAlternative#1|IOmlCasesStatementAlternative KEEP=NO
  public void visitCasesStatementAlternative (final IOmlCasesStatementAlternative var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesStatementAlternative#1|IOmlCasesStatementAlternative


// ***** VDMTOOLS START Name=visitLetBeExpression#1|IOmlLetBeExpression KEEP=NO
  public void visitLetBeExpression (final IOmlLetBeExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetBeExpression#1|IOmlLetBeExpression


// ***** VDMTOOLS START Name=visitFunctionTypeInstantiation#1|IOmlFunctionTypeInstantiation KEEP=NO
  public void visitFunctionTypeInstantiation (final IOmlFunctionTypeInstantiation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionTypeInstantiation#1|IOmlFunctionTypeInstantiation


// ***** VDMTOOLS START Name=visitIndexForLoop#1|IOmlIndexForLoop KEEP=NO
  public void visitIndexForLoop (final IOmlIndexForLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIndexForLoop#1|IOmlIndexForLoop


// ***** VDMTOOLS START Name=visitPeriodicThread#1|IOmlPeriodicThread KEEP=NO
  public void visitPeriodicThread (final IOmlPeriodicThread var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPeriodicThread#1|IOmlPeriodicThread


// ***** VDMTOOLS START Name=visitQuoteLiteral#1|IOmlQuoteLiteral KEEP=NO
  public void visitQuoteLiteral (final IOmlQuoteLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitQuoteLiteral#1|IOmlQuoteLiteral


// ***** VDMTOOLS START Name=visitOldName#1|IOmlOldName KEEP=NO
  public void visitOldName (final IOmlOldName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOldName#1|IOmlOldName


// ***** VDMTOOLS START Name=visitMuExpression#1|IOmlMuExpression KEEP=NO
  public void visitMuExpression (final IOmlMuExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMuExpression#1|IOmlMuExpression


// ***** VDMTOOLS START Name=visitForAllExpression#1|IOmlForAllExpression KEEP=NO
  public void visitForAllExpression (final IOmlForAllExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitForAllExpression#1|IOmlForAllExpression


// ***** VDMTOOLS START Name=visitPermissionPredicate#1|IOmlPermissionPredicate KEEP=NO
  public void visitPermissionPredicate (final IOmlPermissionPredicate var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPermissionPredicate#1|IOmlPermissionPredicate


// ***** VDMTOOLS START Name=visitPartialFunctionType#1|IOmlPartialFunctionType KEEP=NO
  public void visitPartialFunctionType (final IOmlPartialFunctionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPartialFunctionType#1|IOmlPartialFunctionType


// ***** VDMTOOLS START Name=visitProductType#1|IOmlProductType KEEP=NO
  public void visitProductType (final IOmlProductType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitProductType#1|IOmlProductType


// ***** VDMTOOLS START Name=visitDefExpression#1|IOmlDefExpression KEEP=NO
  public void visitDefExpression (final IOmlDefExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDefExpression#1|IOmlDefExpression


// ***** VDMTOOLS START Name=visitTimeExpression#1|IOmlTimeExpression KEEP=NO
  public void visitTimeExpression (final IOmlTimeExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTimeExpression#1|IOmlTimeExpression


// ***** VDMTOOLS START Name=visitTokenExpression#1|IOmlTokenExpression KEEP=NO
  public void visitTokenExpression (final IOmlTokenExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTokenExpression#1|IOmlTokenExpression


// ***** VDMTOOLS START Name=visitLetBeStatement#1|IOmlLetBeStatement KEEP=NO
  public void visitLetBeStatement (final IOmlLetBeStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetBeStatement#1|IOmlLetBeStatement


// ***** VDMTOOLS START Name=visitObjectFieldReference#1|IOmlObjectFieldReference KEEP=NO
  public void visitObjectFieldReference (final IOmlObjectFieldReference var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectFieldReference#1|IOmlObjectFieldReference


// ***** VDMTOOLS START Name=visitError#1|IOmlError KEEP=NO
  public void visitError (final IOmlError var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitError#1|IOmlError


// ***** VDMTOOLS START Name=visitWaitingExpression#1|IOmlWaitingExpression KEEP=NO
  public void visitWaitingExpression (final IOmlWaitingExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitWaitingExpression#1|IOmlWaitingExpression


// ***** VDMTOOLS START Name=visitRealLiteral#1|IOmlRealLiteral KEEP=NO
  public void visitRealLiteral (final IOmlRealLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRealLiteral#1|IOmlRealLiteral


// ***** VDMTOOLS START Name=visitUnaryExpression#1|IOmlUnaryExpression KEEP=NO
  public void visitUnaryExpression (final IOmlUnaryExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnaryExpression#1|IOmlUnaryExpression


// ***** VDMTOOLS START Name=visitTypeDefinition#1|IOmlTypeDefinition KEEP=NO
  public void visitTypeDefinition (final IOmlTypeDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeDefinition#1|IOmlTypeDefinition


// ***** VDMTOOLS START Name=visitRealType#1|IOmlRealType KEEP=NO
  public void visitRealType (final IOmlRealType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRealType#1|IOmlRealType


// ***** VDMTOOLS START Name=visitSetEnumeration#1|IOmlSetEnumeration KEEP=NO
  public void visitSetEnumeration (final IOmlSetEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetEnumeration#1|IOmlSetEnumeration


// ***** VDMTOOLS START Name=visitTuplePattern#1|IOmlTuplePattern KEEP=NO
  public void visitTuplePattern (final IOmlTuplePattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTuplePattern#1|IOmlTuplePattern


// ***** VDMTOOLS START Name=visitRatType#1|IOmlRatType KEEP=NO
  public void visitRatType (final IOmlRatType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRatType#1|IOmlRatType


// ***** VDMTOOLS START Name=visitBracketedType#1|IOmlBracketedType KEEP=NO
  public void visitBracketedType (final IOmlBracketedType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBracketedType#1|IOmlBracketedType


// ***** VDMTOOLS START Name=visitTypeDefinitions#1|IOmlTypeDefinitions KEEP=NO
  public void visitTypeDefinitions (final IOmlTypeDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeDefinitions#1|IOmlTypeDefinitions


// ***** VDMTOOLS START Name=visitIotaExpression#1|IOmlIotaExpression KEEP=NO
  public void visitIotaExpression (final IOmlIotaExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIotaExpression#1|IOmlIotaExpression


// ***** VDMTOOLS START Name=visitTextLiteral#1|IOmlTextLiteral KEEP=NO
  public void visitTextLiteral (final IOmlTextLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTextLiteral#1|IOmlTextLiteral


// ***** VDMTOOLS START Name=visitThreadDefinition#1|IOmlThreadDefinition KEEP=NO
  public void visitThreadDefinition (final IOmlThreadDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThreadDefinition#1|IOmlThreadDefinition


// ***** VDMTOOLS START Name=visitSameclassExpression#1|IOmlSameclassExpression KEEP=NO
  public void visitSameclassExpression (final IOmlSameclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSameclassExpression#1|IOmlSameclassExpression


// ***** VDMTOOLS START Name=visitName#1|IOmlName KEEP=NO
  public void visitName (final IOmlName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitName#1|IOmlName


// ***** VDMTOOLS START Name=visitAtomicStatement#1|IOmlAtomicStatement KEEP=NO
  public void visitAtomicStatement (final IOmlAtomicStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAtomicStatement#1|IOmlAtomicStatement


// ***** VDMTOOLS START Name=visitOperationTrailer#1|IOmlOperationTrailer KEEP=NO
  public void visitOperationTrailer (final IOmlOperationTrailer var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationTrailer#1|IOmlOperationTrailer


// ***** VDMTOOLS START Name=visitFunctionTypeSelect#1|IOmlFunctionTypeSelect KEEP=NO
  public void visitFunctionTypeSelect (final IOmlFunctionTypeSelect var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionTypeSelect#1|IOmlFunctionTypeSelect


// ***** VDMTOOLS START Name=visitInheritanceClause#1|IOmlInheritanceClause KEEP=NO
  public void visitInheritanceClause (final IOmlInheritanceClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInheritanceClause#1|IOmlInheritanceClause


// ***** VDMTOOLS START Name=visitBooleanLiteral#1|IOmlBooleanLiteral KEEP=NO
  public void visitBooleanLiteral (final IOmlBooleanLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBooleanLiteral#1|IOmlBooleanLiteral


// ***** VDMTOOLS START Name=visitSetEnumPattern#1|IOmlSetEnumPattern KEEP=NO
  public void visitSetEnumPattern (final IOmlSetEnumPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetEnumPattern#1|IOmlSetEnumPattern


// ***** VDMTOOLS START Name=visitExitStatement#1|IOmlExitStatement KEEP=NO
  public void visitExitStatement (final IOmlExitStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExitStatement#1|IOmlExitStatement


// ***** VDMTOOLS START Name=visitElseIfExpression#1|IOmlElseIfExpression KEEP=NO
  public void visitElseIfExpression (final IOmlElseIfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitElseIfExpression#1|IOmlElseIfExpression


// ***** VDMTOOLS START Name=visitMaplet#1|IOmlMaplet KEEP=NO
  public void visitMaplet (final IOmlMaplet var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMaplet#1|IOmlMaplet


// ***** VDMTOOLS START Name=visitField#1|IOmlField KEEP=NO
  public void visitField (final IOmlField var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitField#1|IOmlField


// ***** VDMTOOLS START Name=visitSetUnionPattern#1|IOmlSetUnionPattern KEEP=NO
  public void visitSetUnionPattern (final IOmlSetUnionPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetUnionPattern#1|IOmlSetUnionPattern


// ***** VDMTOOLS START Name=visitIdentifierTypePair#1|IOmlIdentifierTypePair KEEP=NO
  public void visitIdentifierTypePair (final IOmlIdentifierTypePair var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIdentifierTypePair#1|IOmlIdentifierTypePair


// ***** VDMTOOLS START Name=visitQuoteType#1|IOmlQuoteType KEEP=NO
  public void visitQuoteType (final IOmlQuoteType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitQuoteType#1|IOmlQuoteType


// ***** VDMTOOLS START Name=visitInjectiveMapType#1|IOmlInjectiveMapType KEEP=NO
  public void visitInjectiveMapType (final IOmlInjectiveMapType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInjectiveMapType#1|IOmlInjectiveMapType


// ***** VDMTOOLS START Name=visitClassTypeInstantiation#1|IOmlClassTypeInstantiation KEEP=NO
  public void visitClassTypeInstantiation (final IOmlClassTypeInstantiation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassTypeInstantiation#1|IOmlClassTypeInstantiation


// ***** VDMTOOLS START Name=visitSymbolicLiteralPattern#1|IOmlSymbolicLiteralPattern KEEP=NO
  public void visitSymbolicLiteralPattern (final IOmlSymbolicLiteralPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSymbolicLiteralPattern#1|IOmlSymbolicLiteralPattern


// ***** VDMTOOLS START Name=visitMatchValue#1|IOmlMatchValue KEEP=NO
  public void visitMatchValue (final IOmlMatchValue var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMatchValue#1|IOmlMatchValue


// ***** VDMTOOLS START Name=visitCyclesStatement#1|IOmlCyclesStatement KEEP=NO
  public void visitCyclesStatement (final IOmlCyclesStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCyclesStatement#1|IOmlCyclesStatement


// ***** VDMTOOLS START Name=visitTypeName#1|IOmlTypeName KEEP=NO
  public void visitTypeName (final IOmlTypeName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeName#1|IOmlTypeName


// ***** VDMTOOLS START Name=visitIfStatement#1|IOmlIfStatement KEEP=NO
  public void visitIfStatement (final IOmlIfStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIfStatement#1|IOmlIfStatement


// ***** VDMTOOLS START Name=visitFunctionDefinitions#1|IOmlFunctionDefinitions KEEP=NO
  public void visitFunctionDefinitions (final IOmlFunctionDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionDefinitions#1|IOmlFunctionDefinitions


// ***** VDMTOOLS START Name=visitSubsequenceExpression#1|IOmlSubsequenceExpression KEEP=NO
  public void visitSubsequenceExpression (final IOmlSubsequenceExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSubsequenceExpression#1|IOmlSubsequenceExpression


// ***** VDMTOOLS START Name=visitSequenceEnumeration#1|IOmlSequenceEnumeration KEEP=NO
  public void visitSequenceEnumeration (final IOmlSequenceEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceEnumeration#1|IOmlSequenceEnumeration


// ***** VDMTOOLS START Name=visitParameter#1|IOmlParameter KEEP=NO
  public void visitParameter (final IOmlParameter var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitParameter#1|IOmlParameter


// ***** VDMTOOLS START Name=visitInstanceVariable#1|IOmlInstanceVariable KEEP=NO
  public void visitInstanceVariable (final IOmlInstanceVariable var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariable#1|IOmlInstanceVariable


// ***** VDMTOOLS START Name=visitOperationDefinition#1|IOmlOperationDefinition KEEP=NO
  public void visitOperationDefinition (final IOmlOperationDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationDefinition#1|IOmlOperationDefinition


// ***** VDMTOOLS START Name=visitAssignmentDefinition#1|IOmlAssignmentDefinition KEEP=NO
  public void visitAssignmentDefinition (final IOmlAssignmentDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAssignmentDefinition#1|IOmlAssignmentDefinition


// ***** VDMTOOLS START Name=visitSynchronizationDefinitions#1|IOmlSynchronizationDefinitions KEEP=NO
  public void visitSynchronizationDefinitions (final IOmlSynchronizationDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSynchronizationDefinitions#1|IOmlSynchronizationDefinitions


// ***** VDMTOOLS START Name=visitCasesExpressionAlternative#1|IOmlCasesExpressionAlternative KEEP=NO
  public void visitCasesExpressionAlternative (final IOmlCasesExpressionAlternative var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesExpressionAlternative#1|IOmlCasesExpressionAlternative


// ***** VDMTOOLS START Name=visitElseIfStatement#1|IOmlElseIfStatement KEEP=NO
  public void visitElseIfStatement (final IOmlElseIfStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitElseIfStatement#1|IOmlElseIfStatement


// ***** VDMTOOLS START Name=visitSetForLoop#1|IOmlSetForLoop KEEP=NO
  public void visitSetForLoop (final IOmlSetForLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetForLoop#1|IOmlSetForLoop


// ***** VDMTOOLS START Name=visitDurationStatement#1|IOmlDurationStatement KEEP=NO
  public void visitDurationStatement (final IOmlDurationStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDurationStatement#1|IOmlDurationStatement


// ***** VDMTOOLS START Name=visitVarInformation#1|IOmlVarInformation KEEP=NO
  public void visitVarInformation (final IOmlVarInformation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitVarInformation#1|IOmlVarInformation


// ***** VDMTOOLS START Name=visitLetExpression#1|IOmlLetExpression KEEP=NO
  public void visitLetExpression (final IOmlLetExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetExpression#1|IOmlLetExpression


// ***** VDMTOOLS START Name=visitProcedureThread#1|IOmlProcedureThread KEEP=NO
  public void visitProcedureThread (final IOmlProcedureThread var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitProcedureThread#1|IOmlProcedureThread


// ***** VDMTOOLS START Name=visitExplicitOperation#1|IOmlExplicitOperation KEEP=NO
  public void visitExplicitOperation (final IOmlExplicitOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExplicitOperation#1|IOmlExplicitOperation


// ***** VDMTOOLS START Name=visitOperationBody#1|IOmlOperationBody KEEP=NO
  public void visitOperationBody (final IOmlOperationBody var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationBody#1|IOmlOperationBody


// ***** VDMTOOLS START Name=visitIsofbaseclassExpression#1|IOmlIsofbaseclassExpression KEEP=NO
  public void visitIsofbaseclassExpression (final IOmlIsofbaseclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIsofbaseclassExpression#1|IOmlIsofbaseclassExpression


// ***** VDMTOOLS START Name=visitSequenceComprehension#1|IOmlSequenceComprehension KEEP=NO
  public void visitSequenceComprehension (final IOmlSequenceComprehension var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceComprehension#1|IOmlSequenceComprehension


// ***** VDMTOOLS START Name=visitTypeBind#1|IOmlTypeBind KEEP=NO
  public void visitTypeBind (final IOmlTypeBind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeBind#1|IOmlTypeBind


// ***** VDMTOOLS START Name=visitInstanceVariableInvariant#1|IOmlInstanceVariableInvariant KEEP=NO
  public void visitInstanceVariableInvariant (final IOmlInstanceVariableInvariant var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariableInvariant#1|IOmlInstanceVariableInvariant


// ***** VDMTOOLS START Name=visitTypelessExplicitFunction#1|IOmlTypelessExplicitFunction KEEP=NO
  public void visitTypelessExplicitFunction (final IOmlTypelessExplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypelessExplicitFunction#1|IOmlTypelessExplicitFunction


// ***** VDMTOOLS START Name=visitUndefinedExpression#1|IOmlUndefinedExpression KEEP=NO
  public void visitUndefinedExpression (final IOmlUndefinedExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUndefinedExpression#1|IOmlUndefinedExpression


// ***** VDMTOOLS START Name=visitEqualsDefinition#1|IOmlEqualsDefinition KEEP=NO
  public void visitEqualsDefinition (final IOmlEqualsDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEqualsDefinition#1|IOmlEqualsDefinition


// ***** VDMTOOLS START Name=visitAssignStatement#1|IOmlAssignStatement KEEP=NO
  public void visitAssignStatement (final IOmlAssignStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAssignStatement#1|IOmlAssignStatement


// ***** VDMTOOLS START Name=visitErrorStatement#1|IOmlErrorStatement KEEP=NO
  public void visitErrorStatement (final IOmlErrorStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitErrorStatement#1|IOmlErrorStatement


// ***** VDMTOOLS START Name=visitCallStatement#1|IOmlCallStatement KEEP=NO
  public void visitCallStatement (final IOmlCallStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCallStatement#1|IOmlCallStatement


// ***** VDMTOOLS START Name=visitFieldReference#1|IOmlFieldReference KEEP=NO
  public void visitFieldReference (final IOmlFieldReference var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFieldReference#1|IOmlFieldReference


// ***** VDMTOOLS START Name=visitMapComprehension#1|IOmlMapComprehension KEEP=NO
  public void visitMapComprehension (final IOmlMapComprehension var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapComprehension#1|IOmlMapComprehension


// ***** VDMTOOLS START Name=visitNat1Type#1|IOmlNat1Type KEEP=NO
  public void visitNat1Type (final IOmlNat1Type var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNat1Type#1|IOmlNat1Type


// ***** VDMTOOLS START Name=visitExtendedExplicitOperation#1|IOmlExtendedExplicitOperation KEEP=NO
  public void visitExtendedExplicitOperation (final IOmlExtendedExplicitOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExtendedExplicitOperation#1|IOmlExtendedExplicitOperation


// ***** VDMTOOLS START Name=visitPreconditionExpression#1|IOmlPreconditionExpression KEEP=NO
  public void visitPreconditionExpression (final IOmlPreconditionExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPreconditionExpression#1|IOmlPreconditionExpression


// ***** VDMTOOLS START Name=visitSeqConcPattern#1|IOmlSeqConcPattern KEEP=NO
  public void visitSeqConcPattern (final IOmlSeqConcPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeqConcPattern#1|IOmlSeqConcPattern


// ***** VDMTOOLS START Name=visitExtendedExplicitFunction#1|IOmlExtendedExplicitFunction KEEP=NO
  public void visitExtendedExplicitFunction (final IOmlExtendedExplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExtendedExplicitFunction#1|IOmlExtendedExplicitFunction


// ***** VDMTOOLS START Name=visitStateDesignatorName#1|IOmlStateDesignatorName KEEP=NO
  public void visitStateDesignatorName (final IOmlStateDesignatorName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStateDesignatorName#1|IOmlStateDesignatorName


// ***** VDMTOOLS START Name=visitAlwaysStatement#1|IOmlAlwaysStatement KEEP=NO
  public void visitAlwaysStatement (final IOmlAlwaysStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAlwaysStatement#1|IOmlAlwaysStatement


// ***** VDMTOOLS START Name=visitImplicitFunction#1|IOmlImplicitFunction KEEP=NO
  public void visitImplicitFunction (final IOmlImplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitImplicitFunction#1|IOmlImplicitFunction


// ***** VDMTOOLS START Name=visitRecursiveTrapStatement#1|IOmlRecursiveTrapStatement KEEP=NO
  public void visitRecursiveTrapStatement (final IOmlRecursiveTrapStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecursiveTrapStatement#1|IOmlRecursiveTrapStatement


// ***** VDMTOOLS START Name=visitTupleConstructor#1|IOmlTupleConstructor KEEP=NO
  public void visitTupleConstructor (final IOmlTupleConstructor var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTupleConstructor#1|IOmlTupleConstructor


// ***** VDMTOOLS START Name=visitLambdaExpression#1|IOmlLambdaExpression KEEP=NO
  public void visitLambdaExpression (final IOmlLambdaExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLambdaExpression#1|IOmlLambdaExpression


// ***** VDMTOOLS START Name=visitExternals#1|IOmlExternals KEEP=NO
  public void visitExternals (final IOmlExternals var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExternals#1|IOmlExternals


// ***** VDMTOOLS START Name=visitEmptyType#1|IOmlEmptyType KEEP=NO
  public void visitEmptyType (final IOmlEmptyType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEmptyType#1|IOmlEmptyType


// ***** VDMTOOLS START Name=visitTypeVariable#1|IOmlTypeVariable KEEP=NO
  public void visitTypeVariable (final IOmlTypeVariable var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeVariable#1|IOmlTypeVariable


// ***** VDMTOOLS START Name=visitObjectDesignatorExpression#1|IOmlObjectDesignatorExpression KEEP=NO
  public void visitObjectDesignatorExpression (final IOmlObjectDesignatorExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectDesignatorExpression#1|IOmlObjectDesignatorExpression


// ***** VDMTOOLS START Name=visitSetRangeExpression#1|IOmlSetRangeExpression KEEP=NO
  public void visitSetRangeExpression (final IOmlSetRangeExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetRangeExpression#1|IOmlSetRangeExpression


// ***** VDMTOOLS START Name=visitIfExpression#1|IOmlIfExpression KEEP=NO
  public void visitIfExpression (final IOmlIfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIfExpression#1|IOmlIfExpression


// ***** VDMTOOLS START Name=visitComplexType#1|IOmlComplexType KEEP=NO
  public void visitComplexType (final IOmlComplexType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitComplexType#1|IOmlComplexType


// ***** VDMTOOLS START Name=visitSetType#1|IOmlSetType KEEP=NO
  public void visitSetType (final IOmlSetType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetType#1|IOmlSetType


// ***** VDMTOOLS START Name=visitValueDefinition#1|IOmlValueDefinition KEEP=NO
  public void visitValueDefinition (final IOmlValueDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueDefinition#1|IOmlValueDefinition


// ***** VDMTOOLS START Name=visitDontCarePattern#1|IOmlDontCarePattern KEEP=NO
  public void visitDontCarePattern (final IOmlDontCarePattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDontCarePattern#1|IOmlDontCarePattern


// ***** VDMTOOLS START Name=visitApplyExpression#1|IOmlApplyExpression KEEP=NO
  public void visitApplyExpression (final IOmlApplyExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitApplyExpression#1|IOmlApplyExpression


// ***** VDMTOOLS START Name=visitFunctionTrailer#1|IOmlFunctionTrailer KEEP=NO
  public void visitFunctionTrailer (final IOmlFunctionTrailer var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionTrailer#1|IOmlFunctionTrailer


// ***** VDMTOOLS START Name=visitExistsUniqueExpression#1|IOmlExistsUniqueExpression KEEP=NO
  public void visitExistsUniqueExpression (final IOmlExistsUniqueExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExistsUniqueExpression#1|IOmlExistsUniqueExpression


// ***** VDMTOOLS START Name=visitNatType#1|IOmlNatType KEEP=NO
  public void visitNatType (final IOmlNatType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNatType#1|IOmlNatType


// ***** VDMTOOLS START Name=visitRecordConstructor#1|IOmlRecordConstructor KEEP=NO
  public void visitRecordConstructor (final IOmlRecordConstructor var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecordConstructor#1|IOmlRecordConstructor


// ***** VDMTOOLS START Name=visitOptionalType#1|IOmlOptionalType KEEP=NO
  public void visitOptionalType (final IOmlOptionalType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOptionalType#1|IOmlOptionalType


// ***** VDMTOOLS START Name=visitExplicitFunction#1|IOmlExplicitFunction KEEP=NO
  public void visitExplicitFunction (final IOmlExplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExplicitFunction#1|IOmlExplicitFunction


// ***** VDMTOOLS START Name=visitTokenType#1|IOmlTokenType KEEP=NO
  public void visitTokenType (final IOmlTokenType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTokenType#1|IOmlTokenType


// ***** VDMTOOLS START Name=visitWhileLoop#1|IOmlWhileLoop KEEP=NO
  public void visitWhileLoop (final IOmlWhileLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitWhileLoop#1|IOmlWhileLoop


// ***** VDMTOOLS START Name=visitUnionType#1|IOmlUnionType KEEP=NO
  public void visitUnionType (final IOmlUnionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnionType#1|IOmlUnionType


// ***** VDMTOOLS START Name=visitInvariant#1|IOmlInvariant KEEP=NO
  public void visitInvariant (final IOmlInvariant var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInvariant#1|IOmlInvariant


// ***** VDMTOOLS START Name=visitPatternBindExpression#1|IOmlPatternBindExpression KEEP=NO
  public void visitPatternBindExpression (final IOmlPatternBindExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPatternBindExpression#1|IOmlPatternBindExpression


// ***** VDMTOOLS START Name=visitRecordModifier#1|IOmlRecordModifier KEEP=NO
  public void visitRecordModifier (final IOmlRecordModifier var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecordModifier#1|IOmlRecordModifier


// ***** VDMTOOLS START Name=visitSeq1Type#1|IOmlSeq1Type KEEP=NO
  public void visitSeq1Type (final IOmlSeq1Type var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeq1Type#1|IOmlSeq1Type


// ***** VDMTOOLS START Name=visitCharType#1|IOmlCharType KEEP=NO
  public void visitCharType (final IOmlCharType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharType#1|IOmlCharType


// ***** VDMTOOLS START Name=visitOperationType#1|IOmlOperationType KEEP=NO
  public void visitOperationType (final IOmlOperationType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationType#1|IOmlOperationType


// ***** VDMTOOLS START Name=visitCharacterLiteral#1|IOmlCharacterLiteral KEEP=NO
  public void visitCharacterLiteral (final IOmlCharacterLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharacterLiteral#1|IOmlCharacterLiteral


// ***** VDMTOOLS START Name=visitSimpleType#1|IOmlSimpleType KEEP=NO
  public void visitSimpleType (final IOmlSimpleType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSimpleType#1|IOmlSimpleType


// ***** VDMTOOLS START Name=visitSetBind#1|IOmlSetBind KEEP=NO
  public void visitSetBind (final IOmlSetBind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetBind#1|IOmlSetBind


// ***** VDMTOOLS START Name=visitValueDefinitions#1|IOmlValueDefinitions KEEP=NO
  public void visitValueDefinitions (final IOmlValueDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueDefinitions#1|IOmlValueDefinitions


// ***** VDMTOOLS START Name=visitGeneralMapType#1|IOmlGeneralMapType KEEP=NO
  public void visitGeneralMapType (final IOmlGeneralMapType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitGeneralMapType#1|IOmlGeneralMapType


// ***** VDMTOOLS START Name=visitDclStatement#1|IOmlDclStatement KEEP=NO
  public void visitDclStatement (final IOmlDclStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDclStatement#1|IOmlDclStatement


// ***** VDMTOOLS START Name=visitSeqEnumPattern#1|IOmlSeqEnumPattern KEEP=NO
  public void visitSeqEnumPattern (final IOmlSeqEnumPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeqEnumPattern#1|IOmlSeqEnumPattern


// ***** VDMTOOLS START Name=visitBracketedExpression#1|IOmlBracketedExpression KEEP=NO
  public void visitBracketedExpression (final IOmlBracketedExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBracketedExpression#1|IOmlBracketedExpression


// ***** VDMTOOLS START Name=visitAccessDefinition#1|IOmlAccessDefinition KEEP=NO
  public void visitAccessDefinition (final IOmlAccessDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAccessDefinition#1|IOmlAccessDefinition


// ***** VDMTOOLS START Name=visitActiveExpression#1|IOmlActiveExpression KEEP=NO
  public void visitActiveExpression (final IOmlActiveExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitActiveExpression#1|IOmlActiveExpression


// ***** VDMTOOLS START Name=visitNewExpression#1|IOmlNewExpression KEEP=NO
  public void visitNewExpression (final IOmlNewExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNewExpression#1|IOmlNewExpression


// ***** VDMTOOLS START Name=visitBlockStatement#1|IOmlBlockStatement KEEP=NO
  public void visitBlockStatement (final IOmlBlockStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBlockStatement#1|IOmlBlockStatement


// ***** VDMTOOLS START Name=visitImplicitOperation#1|IOmlImplicitOperation KEEP=NO
  public void visitImplicitOperation (final IOmlImplicitOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitImplicitOperation#1|IOmlImplicitOperation


// ***** VDMTOOLS START Name=visitMapOrSequenceReference#1|IOmlMapOrSequenceReference KEEP=NO
  public void visitMapOrSequenceReference (final IOmlMapOrSequenceReference var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapOrSequenceReference#1|IOmlMapOrSequenceReference


// ***** VDMTOOLS START Name=visitObjectApply#1|IOmlObjectApply KEEP=NO
  public void visitObjectApply (final IOmlObjectApply var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectApply#1|IOmlObjectApply


// ***** VDMTOOLS START Name=visitPatternTypePair#1|IOmlPatternTypePair KEEP=NO
  public void visitPatternTypePair (final IOmlPatternTypePair var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPatternTypePair#1|IOmlPatternTypePair


// ***** VDMTOOLS START Name=visitExistsExpression#1|IOmlExistsExpression KEEP=NO
  public void visitExistsExpression (final IOmlExistsExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExistsExpression#1|IOmlExistsExpression


// ***** VDMTOOLS START Name=visitStartStatement#1|IOmlStartStatement KEEP=NO
  public void visitStartStatement (final IOmlStartStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStartStatement#1|IOmlStartStatement


// ***** VDMTOOLS START Name=visitRecordPattern#1|IOmlRecordPattern KEEP=NO
  public void visitRecordPattern (final IOmlRecordPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecordPattern#1|IOmlRecordPattern


// ***** VDMTOOLS START Name=visitSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression KEEP=NO
  public void visitSymbolicLiteralExpression (final IOmlSymbolicLiteralExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression


// ***** VDMTOOLS START Name=visitSelfExpression#1|IOmlSelfExpression KEEP=NO
  public void visitSelfExpression (final IOmlSelfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSelfExpression#1|IOmlSelfExpression


// ***** VDMTOOLS START Name=visitIsExpression#1|IOmlIsExpression KEEP=NO
  public void visitIsExpression (final IOmlIsExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIsExpression#1|IOmlIsExpression


// ***** VDMTOOLS START Name=visitSetComprehension#1|IOmlSetComprehension KEEP=NO
  public void visitSetComprehension (final IOmlSetComprehension var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetComprehension#1|IOmlSetComprehension


// ***** VDMTOOLS START Name=visitCasesExpression#1|IOmlCasesExpression KEEP=NO
  public void visitCasesExpression (final IOmlCasesExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesExpression#1|IOmlCasesExpression


// ***** VDMTOOLS START Name=visitMutexAllPredicate#1|IOmlMutexAllPredicate KEEP=NO
  public void visitMutexAllPredicate (final IOmlMutexAllPredicate var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMutexAllPredicate#1|IOmlMutexAllPredicate


// ***** VDMTOOLS START Name=visitReqExpression#1|IOmlReqExpression KEEP=NO
  public void visitReqExpression (final IOmlReqExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitReqExpression#1|IOmlReqExpression


// ***** VDMTOOLS START Name=visitSpecificationStatement#1|IOmlSpecificationStatement KEEP=NO
  public void visitSpecificationStatement (final IOmlSpecificationStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSpecificationStatement#1|IOmlSpecificationStatement


// ***** VDMTOOLS START Name=visitBoolType#1|IOmlBoolType KEEP=NO
  public void visitBoolType (final IOmlBoolType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBoolType#1|IOmlBoolType


// ***** VDMTOOLS START Name=visitTotalFunctionType#1|IOmlTotalFunctionType KEEP=NO
  public void visitTotalFunctionType (final IOmlTotalFunctionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTotalFunctionType#1|IOmlTotalFunctionType


// ***** VDMTOOLS START Name=visitContextInfo#1|IOmlContextInfo KEEP=NO
  public void visitContextInfo (final IOmlContextInfo var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitContextInfo#1|IOmlContextInfo


// ***** VDMTOOLS START Name=visitNode#1|IOmlNode KEEP=NO
  public void visitNode (final IOmlNode pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlFunctionShape).booleanValue()) 
      visitFunctionShape((IOmlFunctionShape) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTrapStatement).booleanValue()) 
        visitTrapStatement((IOmlTrapStatement) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlCasesStatement).booleanValue()) 
          visitCasesStatement((IOmlCasesStatement) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlFunctionBody).booleanValue()) 
            visitFunctionBody((IOmlFunctionBody) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlClass).booleanValue()) 
              visitClass((IOmlClass) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlSeq0Type).booleanValue()) 
                visitSeq0Type((IOmlSeq0Type) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlSpecifications).booleanValue()) 
                  visitSpecifications((IOmlSpecifications) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlValueShape).booleanValue()) 
                    visitValueShape((IOmlValueShape) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlOperationShape).booleanValue()) 
                      visitOperationShape((IOmlOperationShape) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlInstanceVariableDefinitions).booleanValue()) 
                        visitInstanceVariableDefinitions((IOmlInstanceVariableDefinitions) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlActExpression).booleanValue()) 
                          visitActExpression((IOmlActExpression) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlThreadIdExpression).booleanValue()) 
                            visitThreadIdExpression((IOmlThreadIdExpression) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlFinExpression).booleanValue()) 
                              visitFinExpression((IOmlFinExpression) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlSequenceForLoop).booleanValue()) 
                                visitSequenceForLoop((IOmlSequenceForLoop) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlTrapDefinition).booleanValue()) 
                                  visitTrapDefinition((IOmlTrapDefinition) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlSamebaseclassExpression).booleanValue()) 
                                    visitSamebaseclassExpression((IOmlSamebaseclassExpression) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlCompositeType).booleanValue()) 
                                      visitCompositeType((IOmlCompositeType) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlCasesStatementAlternative).booleanValue()) 
                                        visitCasesStatementAlternative((IOmlCasesStatementAlternative) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlNilLiteral).booleanValue()) 
                                          visitNilLiteral((IOmlNilLiteral) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlMapEnumeration).booleanValue()) 
                                            visitMapEnumeration((IOmlMapEnumeration) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlFunctionTypeInstantiation).booleanValue()) 
                                              visitFunctionTypeInstantiation((IOmlFunctionTypeInstantiation) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlQuoteLiteral).booleanValue()) 
                                                visitQuoteLiteral((IOmlQuoteLiteral) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlOldName).booleanValue()) 
                                                  visitOldName((IOmlOldName) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlForAllExpression).booleanValue()) 
                                                    visitForAllExpression((IOmlForAllExpression) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlMuExpression).booleanValue()) 
                                                      visitMuExpression((IOmlMuExpression) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlPartialFunctionType).booleanValue()) 
                                                        visitPartialFunctionType((IOmlPartialFunctionType) pNode);
                                                      else {
                                                        if (new Boolean(pNode instanceof IOmlDefExpression).booleanValue()) 
                                                          visitDefExpression((IOmlDefExpression) pNode);
                                                        else {
                                                          if (new Boolean(pNode instanceof IOmlPattern).booleanValue()) 
                                                            visitPattern((IOmlPattern) pNode);
                                                          else {
                                                            if (new Boolean(pNode instanceof IOmlUnaryExpression).booleanValue()) 
                                                              visitUnaryExpression((IOmlUnaryExpression) pNode);
                                                            else {
                                                              if (new Boolean(pNode instanceof IOmlSetEnumeration).booleanValue()) 
                                                                visitSetEnumeration((IOmlSetEnumeration) pNode);
                                                              else {
                                                                if (new Boolean(pNode instanceof IOmlRealType).booleanValue()) 
                                                                  visitRealType((IOmlRealType) pNode);
                                                                else {
                                                                  if (new Boolean(pNode instanceof IOmlRatType).booleanValue()) 
                                                                    visitRatType((IOmlRatType) pNode);
                                                                  else {
                                                                    if (new Boolean(pNode instanceof IOmlBracketedType).booleanValue()) 
                                                                      visitBracketedType((IOmlBracketedType) pNode);
                                                                    else {
                                                                      if (new Boolean(pNode instanceof IOmlMode).booleanValue()) 
                                                                        visitMode((IOmlMode) pNode);
                                                                      else {
                                                                        if (new Boolean(pNode instanceof IOmlDefinitionBlock).booleanValue()) 
                                                                          visitDefinitionBlock((IOmlDefinitionBlock) pNode);
                                                                        else {
                                                                          if (new Boolean(pNode instanceof IOmlIotaExpression).booleanValue()) 
                                                                            visitIotaExpression((IOmlIotaExpression) pNode);
                                                                          else {
                                                                            if (new Boolean(pNode instanceof IOmlSameclassExpression).booleanValue()) 
                                                                              visitSameclassExpression((IOmlSameclassExpression) pNode);
                                                                            else {
                                                                              if (new Boolean(pNode instanceof IOmlFunctionTypeSelect).booleanValue()) 
                                                                                visitFunctionTypeSelect((IOmlFunctionTypeSelect) pNode);
                                                                              else {
                                                                                if (new Boolean(pNode instanceof IOmlExitStatement).booleanValue()) 
                                                                                  visitExitStatement((IOmlExitStatement) pNode);
                                                                                else {
                                                                                  if (new Boolean(pNode instanceof IOmlElseIfExpression).booleanValue()) 
                                                                                    visitElseIfExpression((IOmlElseIfExpression) pNode);
                                                                                  else {
                                                                                    if (new Boolean(pNode instanceof IOmlField).booleanValue()) 
                                                                                      visitField((IOmlField) pNode);
                                                                                    else {
                                                                                      if (new Boolean(pNode instanceof IOmlSetUnionPattern).booleanValue()) 
                                                                                        visitSetUnionPattern((IOmlSetUnionPattern) pNode);
                                                                                      else {
                                                                                        if (new Boolean(pNode instanceof IOmlIdentifierTypePair).booleanValue()) 
                                                                                          visitIdentifierTypePair((IOmlIdentifierTypePair) pNode);
                                                                                        else {
                                                                                          if (new Boolean(pNode instanceof IOmlClassTypeInstantiation).booleanValue()) 
                                                                                            visitClassTypeInstantiation((IOmlClassTypeInstantiation) pNode);
                                                                                          else {
                                                                                            if (new Boolean(pNode instanceof IOmlSymbolicLiteralPattern).booleanValue()) 
                                                                                              visitSymbolicLiteralPattern((IOmlSymbolicLiteralPattern) pNode);
                                                                                            else {
                                                                                              if (new Boolean(pNode instanceof IOmlMatchValue).booleanValue()) 
                                                                                                visitMatchValue((IOmlMatchValue) pNode);
                                                                                              else {
                                                                                                if (new Boolean(pNode instanceof IOmlUnaryOperator).booleanValue()) 
                                                                                                  visitUnaryOperator((IOmlUnaryOperator) pNode);
                                                                                                else {
                                                                                                  if (new Boolean(pNode instanceof IOmlParameter).booleanValue()) 
                                                                                                    visitParameter((IOmlParameter) pNode);
                                                                                                  else {
                                                                                                    if (new Boolean(pNode instanceof IOmlAssignmentDefinition).booleanValue()) 
                                                                                                      visitAssignmentDefinition((IOmlAssignmentDefinition) pNode);
                                                                                                    else {
                                                                                                      if (new Boolean(pNode instanceof IOmlSynchronizationDefinitions).booleanValue()) 
                                                                                                        visitSynchronizationDefinitions((IOmlSynchronizationDefinitions) pNode);
                                                                                                      else {
                                                                                                        if (new Boolean(pNode instanceof IOmlVarInformation).booleanValue()) 
                                                                                                          visitVarInformation((IOmlVarInformation) pNode);
                                                                                                        else {
                                                                                                          if (new Boolean(pNode instanceof IOmlObjectDesignator).booleanValue()) 
                                                                                                            visitObjectDesignator((IOmlObjectDesignator) pNode);
                                                                                                          else {
                                                                                                            if (new Boolean(pNode instanceof IOmlExplicitOperation).booleanValue()) 
                                                                                                              visitExplicitOperation((IOmlExplicitOperation) pNode);
                                                                                                            else {
                                                                                                              if (new Boolean(pNode instanceof IOmlStatement).booleanValue()) 
                                                                                                                visitStatement((IOmlStatement) pNode);
                                                                                                              else {
                                                                                                                if (new Boolean(pNode instanceof IOmlOperationBody).booleanValue()) 
                                                                                                                  visitOperationBody((IOmlOperationBody) pNode);
                                                                                                                else {
                                                                                                                  if (new Boolean(pNode instanceof IOmlTypeBind).booleanValue()) 
                                                                                                                    visitTypeBind((IOmlTypeBind) pNode);
                                                                                                                  else {
                                                                                                                    if (new Boolean(pNode instanceof IOmlInstanceVariableInvariant).booleanValue()) 
                                                                                                                      visitInstanceVariableInvariant((IOmlInstanceVariableInvariant) pNode);
                                                                                                                    else {
                                                                                                                      if (new Boolean(pNode instanceof IOmlUndefinedExpression).booleanValue()) 
                                                                                                                        visitUndefinedExpression((IOmlUndefinedExpression) pNode);
                                                                                                                      else {
                                                                                                                        if (new Boolean(pNode instanceof IOmlErrorStatement).booleanValue()) 
                                                                                                                          visitErrorStatement((IOmlErrorStatement) pNode);
                                                                                                                        else {
                                                                                                                          if (new Boolean(pNode instanceof IOmlNat1Type).booleanValue()) 
                                                                                                                            visitNat1Type((IOmlNat1Type) pNode);
                                                                                                                          else {
                                                                                                                            if (new Boolean(pNode instanceof IOmlFieldReference).booleanValue()) 
                                                                                                                              visitFieldReference((IOmlFieldReference) pNode);
                                                                                                                            else {
                                                                                                                              if (new Boolean(pNode instanceof IOmlExtendedExplicitOperation).booleanValue()) 
                                                                                                                                visitExtendedExplicitOperation((IOmlExtendedExplicitOperation) pNode);
                                                                                                                              else {
                                                                                                                                if (new Boolean(pNode instanceof IOmlExtendedExplicitFunction).booleanValue()) 
                                                                                                                                  visitExtendedExplicitFunction((IOmlExtendedExplicitFunction) pNode);
                                                                                                                                else {
                                                                                                                                  if (new Boolean(pNode instanceof IOmlAlwaysStatement).booleanValue()) 
                                                                                                                                    visitAlwaysStatement((IOmlAlwaysStatement) pNode);
                                                                                                                                  else {
                                                                                                                                    if (new Boolean(pNode instanceof IOmlEmptyType).booleanValue()) 
                                                                                                                                      visitEmptyType((IOmlEmptyType) pNode);
                                                                                                                                    else {
                                                                                                                                      if (new Boolean(pNode instanceof IOmlObjectDesignatorExpression).booleanValue()) 
                                                                                                                                        visitObjectDesignatorExpression((IOmlObjectDesignatorExpression) pNode);
                                                                                                                                      else {
                                                                                                                                        if (new Boolean(pNode instanceof IOmlIfExpression).booleanValue()) 
                                                                                                                                          visitIfExpression((IOmlIfExpression) pNode);
                                                                                                                                        else {
                                                                                                                                          if (new Boolean(pNode instanceof IOmlSetType).booleanValue()) 
                                                                                                                                            visitSetType((IOmlSetType) pNode);
                                                                                                                                          else {
                                                                                                                                            if (new Boolean(pNode instanceof IOmlValueDefinition).booleanValue()) 
                                                                                                                                              visitValueDefinition((IOmlValueDefinition) pNode);
                                                                                                                                            else {
                                                                                                                                              if (new Boolean(pNode instanceof IOmlDontCarePattern).booleanValue()) 
                                                                                                                                                visitDontCarePattern((IOmlDontCarePattern) pNode);
                                                                                                                                              else {
                                                                                                                                                if (new Boolean(pNode instanceof IOmlNatType).booleanValue()) 
                                                                                                                                                  visitNatType((IOmlNatType) pNode);
                                                                                                                                                else {
                                                                                                                                                  if (new Boolean(pNode instanceof IOmlOptionalType).booleanValue()) 
                                                                                                                                                    visitOptionalType((IOmlOptionalType) pNode);
                                                                                                                                                  else {
                                                                                                                                                    if (new Boolean(pNode instanceof IOmlStateDesignator).booleanValue()) 
                                                                                                                                                      visitStateDesignator((IOmlStateDesignator) pNode);
                                                                                                                                                    else {
                                                                                                                                                      if (new Boolean(pNode instanceof IOmlWhileLoop).booleanValue()) 
                                                                                                                                                        visitWhileLoop((IOmlWhileLoop) pNode);
                                                                                                                                                      else {
                                                                                                                                                        if (new Boolean(pNode instanceof IOmlUnionType).booleanValue()) 
                                                                                                                                                          visitUnionType((IOmlUnionType) pNode);
                                                                                                                                                        else {
                                                                                                                                                          if (new Boolean(pNode instanceof IOmlInvariant).booleanValue()) 
                                                                                                                                                            visitInvariant((IOmlInvariant) pNode);
                                                                                                                                                          else {
                                                                                                                                                            if (new Boolean(pNode instanceof IOmlRecordModifier).booleanValue()) 
                                                                                                                                                              visitRecordModifier((IOmlRecordModifier) pNode);
                                                                                                                                                            else {
                                                                                                                                                              if (new Boolean(pNode instanceof IOmlSeq1Type).booleanValue()) 
                                                                                                                                                                visitSeq1Type((IOmlSeq1Type) pNode);
                                                                                                                                                              else {
                                                                                                                                                                if (new Boolean(pNode instanceof IOmlSimpleType).booleanValue()) 
                                                                                                                                                                  visitSimpleType((IOmlSimpleType) pNode);
                                                                                                                                                                else {
                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlDclStatement).booleanValue()) 
                                                                                                                                                                    visitDclStatement((IOmlDclStatement) pNode);
                                                                                                                                                                  else {
                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlBracketedExpression).booleanValue()) 
                                                                                                                                                                      visitBracketedExpression((IOmlBracketedExpression) pNode);
                                                                                                                                                                    else {
                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlAccessDefinition).booleanValue()) 
                                                                                                                                                                        visitAccessDefinition((IOmlAccessDefinition) pNode);
                                                                                                                                                                      else {
                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlNewExpression).booleanValue()) 
                                                                                                                                                                          visitNewExpression((IOmlNewExpression) pNode);
                                                                                                                                                                        else {
                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlImplicitOperation).booleanValue()) 
                                                                                                                                                                            visitImplicitOperation((IOmlImplicitOperation) pNode);
                                                                                                                                                                          else {
                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlBlockStatement).booleanValue()) 
                                                                                                                                                                              visitBlockStatement((IOmlBlockStatement) pNode);
                                                                                                                                                                            else {
                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlObjectApply).booleanValue()) 
                                                                                                                                                                                visitObjectApply((IOmlObjectApply) pNode);
                                                                                                                                                                              else {
                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlPatternTypePair).booleanValue()) 
                                                                                                                                                                                  visitPatternTypePair((IOmlPatternTypePair) pNode);
                                                                                                                                                                                else {
                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlStartStatement).booleanValue()) 
                                                                                                                                                                                    visitStartStatement((IOmlStartStatement) pNode);
                                                                                                                                                                                  else {
                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlExistsExpression).booleanValue()) 
                                                                                                                                                                                      visitExistsExpression((IOmlExistsExpression) pNode);
                                                                                                                                                                                    else {
                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlSymbolicLiteralExpression).booleanValue()) 
                                                                                                                                                                                        visitSymbolicLiteralExpression((IOmlSymbolicLiteralExpression) pNode);
                                                                                                                                                                                      else {
                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlExpression).booleanValue()) 
                                                                                                                                                                                          visitExpression((IOmlExpression) pNode);
                                                                                                                                                                                        else {
                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlMutexAllPredicate).booleanValue()) 
                                                                                                                                                                                            visitMutexAllPredicate((IOmlMutexAllPredicate) pNode);
                                                                                                                                                                                          else {
                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlSpecificationStatement).booleanValue()) 
                                                                                                                                                                                              visitSpecificationStatement((IOmlSpecificationStatement) pNode);
                                                                                                                                                                                            else {
                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlIsofclassExpression).booleanValue()) 
                                                                                                                                                                                                visitIsofclassExpression((IOmlIsofclassExpression) pNode);
                                                                                                                                                                                              else {
                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlBinaryExpression).booleanValue()) 
                                                                                                                                                                                                  visitBinaryExpression((IOmlBinaryExpression) pNode);
                                                                                                                                                                                                else {
                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlMutexPredicate).booleanValue()) 
                                                                                                                                                                                                    visitMutexPredicate((IOmlMutexPredicate) pNode);
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlOperationDefinitions).booleanValue()) 
                                                                                                                                                                                                      visitOperationDefinitions((IOmlOperationDefinitions) pNode);
                                                                                                                                                                                                    else {
                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlFieldSelect).booleanValue()) 
                                                                                                                                                                                                        visitFieldSelect((IOmlFieldSelect) pNode);
                                                                                                                                                                                                      else {
                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlReturnStatement).booleanValue()) 
                                                                                                                                                                                                          visitReturnStatement((IOmlReturnStatement) pNode);
                                                                                                                                                                                                        else {
                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlIntType).booleanValue()) 
                                                                                                                                                                                                            visitIntType((IOmlIntType) pNode);
                                                                                                                                                                                                          else {
                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlLetStatement).booleanValue()) 
                                                                                                                                                                                                              visitLetStatement((IOmlLetStatement) pNode);
                                                                                                                                                                                                            else {
                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlDefStatement).booleanValue()) 
                                                                                                                                                                                                                visitDefStatement((IOmlDefStatement) pNode);
                                                                                                                                                                                                              else {
                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlInstanceVariableShape).booleanValue()) 
                                                                                                                                                                                                                  visitInstanceVariableShape((IOmlInstanceVariableShape) pNode);
                                                                                                                                                                                                                else {
                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlFunctionDefinition).booleanValue()) 
                                                                                                                                                                                                                    visitFunctionDefinition((IOmlFunctionDefinition) pNode);
                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlSkipStatement).booleanValue()) 
                                                                                                                                                                                                                      visitSkipStatement((IOmlSkipStatement) pNode);
                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlPatternIdentifier).booleanValue()) 
                                                                                                                                                                                                                        visitPatternIdentifier((IOmlPatternIdentifier) pNode);
                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlNondeterministicStatement).booleanValue()) 
                                                                                                                                                                                                                          visitNondeterministicStatement((IOmlNondeterministicStatement) pNode);
                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlNumericLiteral).booleanValue()) 
                                                                                                                                                                                                                            visitNumericLiteral((IOmlNumericLiteral) pNode);
                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlExceptions).booleanValue()) 
                                                                                                                                                                                                                              visitExceptions((IOmlExceptions) pNode);
                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlLetBeExpression).booleanValue()) 
                                                                                                                                                                                                                                visitLetBeExpression((IOmlLetBeExpression) pNode);
                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlIndexForLoop).booleanValue()) 
                                                                                                                                                                                                                                  visitIndexForLoop((IOmlIndexForLoop) pNode);
                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlPeriodicThread).booleanValue()) 
                                                                                                                                                                                                                                    visitPeriodicThread((IOmlPeriodicThread) pNode);
                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlPermissionPredicate).booleanValue()) 
                                                                                                                                                                                                                                      visitPermissionPredicate((IOmlPermissionPredicate) pNode);
                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlProductType).booleanValue()) 
                                                                                                                                                                                                                                        visitProductType((IOmlProductType) pNode);
                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlTimeExpression).booleanValue()) 
                                                                                                                                                                                                                                          visitTimeExpression((IOmlTimeExpression) pNode);
                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlLetBeStatement).booleanValue()) 
                                                                                                                                                                                                                                            visitLetBeStatement((IOmlLetBeStatement) pNode);
                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlTokenExpression).booleanValue()) 
                                                                                                                                                                                                                                              visitTokenExpression((IOmlTokenExpression) pNode);
                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlError).booleanValue()) 
                                                                                                                                                                                                                                                visitError((IOmlError) pNode);
                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlObjectFieldReference).booleanValue()) 
                                                                                                                                                                                                                                                  visitObjectFieldReference((IOmlObjectFieldReference) pNode);
                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlRealLiteral).booleanValue()) 
                                                                                                                                                                                                                                                    visitRealLiteral((IOmlRealLiteral) pNode);
                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlWaitingExpression).booleanValue()) 
                                                                                                                                                                                                                                                      visitWaitingExpression((IOmlWaitingExpression) pNode);
                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlType).booleanValue()) 
                                                                                                                                                                                                                                                        visitType((IOmlType) pNode);
                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlTypeDefinition).booleanValue()) 
                                                                                                                                                                                                                                                          visitTypeDefinition((IOmlTypeDefinition) pNode);
                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlTuplePattern).booleanValue()) 
                                                                                                                                                                                                                                                            visitTuplePattern((IOmlTuplePattern) pNode);
                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlBind).booleanValue()) 
                                                                                                                                                                                                                                                              visitBind((IOmlBind) pNode);
                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlTypeDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                visitTypeDefinitions((IOmlTypeDefinitions) pNode);
                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlSyncPredicate).booleanValue()) 
                                                                                                                                                                                                                                                                  visitSyncPredicate((IOmlSyncPredicate) pNode);
                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlTextLiteral).booleanValue()) 
                                                                                                                                                                                                                                                                    visitTextLiteral((IOmlTextLiteral) pNode);
                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlThreadDefinition).booleanValue()) 
                                                                                                                                                                                                                                                                      visitThreadDefinition((IOmlThreadDefinition) pNode);
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlAtomicStatement).booleanValue()) 
                                                                                                                                                                                                                                                                        visitAtomicStatement((IOmlAtomicStatement) pNode);
                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlName).booleanValue()) 
                                                                                                                                                                                                                                                                          visitName((IOmlName) pNode);
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlOperationTrailer).booleanValue()) 
                                                                                                                                                                                                                                                                            visitOperationTrailer((IOmlOperationTrailer) pNode);
                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlInheritanceClause).booleanValue()) 
                                                                                                                                                                                                                                                                              visitInheritanceClause((IOmlInheritanceClause) pNode);
                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlBooleanLiteral).booleanValue()) 
                                                                                                                                                                                                                                                                                visitBooleanLiteral((IOmlBooleanLiteral) pNode);
                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlSetEnumPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                  visitSetEnumPattern((IOmlSetEnumPattern) pNode);
                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlMaplet).booleanValue()) 
                                                                                                                                                                                                                                                                                    visitMaplet((IOmlMaplet) pNode);
                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlQuoteType).booleanValue()) 
                                                                                                                                                                                                                                                                                      visitQuoteType((IOmlQuoteType) pNode);
                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlInjectiveMapType).booleanValue()) 
                                                                                                                                                                                                                                                                                        visitInjectiveMapType((IOmlInjectiveMapType) pNode);
                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlCyclesStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                          visitCyclesStatement((IOmlCyclesStatement) pNode);
                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlIfStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                            visitIfStatement((IOmlIfStatement) pNode);
                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlTypeName).booleanValue()) 
                                                                                                                                                                                                                                                                                              visitTypeName((IOmlTypeName) pNode);
                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlFunctionDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                                visitFunctionDefinitions((IOmlFunctionDefinitions) pNode);
                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlSubsequenceExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                  visitSubsequenceExpression((IOmlSubsequenceExpression) pNode);
                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlSequenceEnumeration).booleanValue()) 
                                                                                                                                                                                                                                                                                                    visitSequenceEnumeration((IOmlSequenceEnumeration) pNode);
                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlInstanceVariable).booleanValue()) 
                                                                                                                                                                                                                                                                                                      visitInstanceVariable((IOmlInstanceVariable) pNode);
                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlOperationDefinition).booleanValue()) 
                                                                                                                                                                                                                                                                                                        visitOperationDefinition((IOmlOperationDefinition) pNode);
                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlTypeShape).booleanValue()) 
                                                                                                                                                                                                                                                                                                          visitTypeShape((IOmlTypeShape) pNode);
                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlCasesExpressionAlternative).booleanValue()) 
                                                                                                                                                                                                                                                                                                            visitCasesExpressionAlternative((IOmlCasesExpressionAlternative) pNode);
                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlElseIfStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                              visitElseIfStatement((IOmlElseIfStatement) pNode);
                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlSetForLoop).booleanValue()) 
                                                                                                                                                                                                                                                                                                                visitSetForLoop((IOmlSetForLoop) pNode);
                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlDurationStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                  visitDurationStatement((IOmlDurationStatement) pNode);
                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlLetExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                    visitLetExpression((IOmlLetExpression) pNode);
                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlProcedureThread).booleanValue()) 
                                                                                                                                                                                                                                                                                                                      visitProcedureThread((IOmlProcedureThread) pNode);
                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlSequenceComprehension).booleanValue()) 
                                                                                                                                                                                                                                                                                                                        visitSequenceComprehension((IOmlSequenceComprehension) pNode);
                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlIsofbaseclassExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                          visitIsofbaseclassExpression((IOmlIsofbaseclassExpression) pNode);
                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlThreadSpecification).booleanValue()) 
                                                                                                                                                                                                                                                                                                                            visitThreadSpecification((IOmlThreadSpecification) pNode);
                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlLiteral).booleanValue()) 
                                                                                                                                                                                                                                                                                                                              visitLiteral((IOmlLiteral) pNode);
                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlTypelessExplicitFunction).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                visitTypelessExplicitFunction((IOmlTypelessExplicitFunction) pNode);
                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlEqualsDefinition).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                  visitEqualsDefinition((IOmlEqualsDefinition) pNode);
                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlAssignStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                    visitAssignStatement((IOmlAssignStatement) pNode);
                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlCallStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                      visitCallStatement((IOmlCallStatement) pNode);
                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlMapComprehension).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                        visitMapComprehension((IOmlMapComprehension) pNode);
                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlPatternBind).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                          visitPatternBind((IOmlPatternBind) pNode);
                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlPreconditionExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                            visitPreconditionExpression((IOmlPreconditionExpression) pNode);
                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlSeqConcPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                              visitSeqConcPattern((IOmlSeqConcPattern) pNode);
                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlStateDesignatorName).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                visitStateDesignatorName((IOmlStateDesignatorName) pNode);
                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlImplicitFunction).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                  visitImplicitFunction((IOmlImplicitFunction) pNode);
                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlRecursiveTrapStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                    visitRecursiveTrapStatement((IOmlRecursiveTrapStatement) pNode);
                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlTupleConstructor).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                      visitTupleConstructor((IOmlTupleConstructor) pNode);
                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlExternals).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                        visitExternals((IOmlExternals) pNode);
                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlLambdaExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                          visitLambdaExpression((IOmlLambdaExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlTypeVariable).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                            visitTypeVariable((IOmlTypeVariable) pNode);
                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlSetRangeExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                              visitSetRangeExpression((IOmlSetRangeExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlComplexType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                visitComplexType((IOmlComplexType) pNode);
                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlApplyExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                  visitApplyExpression((IOmlApplyExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlExistsUniqueExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                    visitExistsUniqueExpression((IOmlExistsUniqueExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlFunctionTrailer).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                      visitFunctionTrailer((IOmlFunctionTrailer) pNode);
                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlRecordConstructor).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                        visitRecordConstructor((IOmlRecordConstructor) pNode);
                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlExplicitFunction).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                          visitExplicitFunction((IOmlExplicitFunction) pNode);
                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlTokenType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                            visitTokenType((IOmlTokenType) pNode);
                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlPatternBindExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                              visitPatternBindExpression((IOmlPatternBindExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlCharType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                visitCharType((IOmlCharType) pNode);
                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlOperationType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                  visitOperationType((IOmlOperationType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlCharacterLiteral).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                    visitCharacterLiteral((IOmlCharacterLiteral) pNode);
                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlSetBind).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                      visitSetBind((IOmlSetBind) pNode);
                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlValueDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                        visitValueDefinitions((IOmlValueDefinitions) pNode);
                                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlGeneralMapType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                          visitGeneralMapType((IOmlGeneralMapType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlSeqEnumPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                            visitSeqEnumPattern((IOmlSeqEnumPattern) pNode);
                                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlActiveExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                              visitActiveExpression((IOmlActiveExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlMapOrSequenceReference).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                visitMapOrSequenceReference((IOmlMapOrSequenceReference) pNode);
                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlScope).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                  visitScope((IOmlScope) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlRecordPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                    visitRecordPattern((IOmlRecordPattern) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlSelfExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                      visitSelfExpression((IOmlSelfExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlIsExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                        visitIsExpression((IOmlIsExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlSetComprehension).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                          visitSetComprehension((IOmlSetComprehension) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlBinaryOperator).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                            visitBinaryOperator((IOmlBinaryOperator) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlCasesExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                              visitCasesExpression((IOmlCasesExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlReqExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                visitReqExpression((IOmlReqExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlBoolType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                  visitBoolType((IOmlBoolType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlTotalFunctionType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                    visitTotalFunctionType((IOmlTotalFunctionType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                  else {

                                                                                                                                                                                                                                                                                                                                                                                                                    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitNode#1|IOmlNode


// ***** VDMTOOLS START Name=visitType#1|IOmlType KEEP=NO
  public void visitType (final IOmlType pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlNatType).booleanValue()) 
      visitNatType((IOmlNatType) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlRealType).booleanValue()) 
        visitRealType((IOmlRealType) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlOptionalType).booleanValue()) 
          visitOptionalType((IOmlOptionalType) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlTokenType).booleanValue()) 
            visitTokenType((IOmlTokenType) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlSeq0Type).booleanValue()) 
              visitSeq0Type((IOmlSeq0Type) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlRatType).booleanValue()) 
                visitRatType((IOmlRatType) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlUnionType).booleanValue()) 
                  visitUnionType((IOmlUnionType) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlBracketedType).booleanValue()) 
                    visitBracketedType((IOmlBracketedType) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlCharType).booleanValue()) 
                      visitCharType((IOmlCharType) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlSeq1Type).booleanValue()) 
                        visitSeq1Type((IOmlSeq1Type) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlOperationType).booleanValue()) 
                          visitOperationType((IOmlOperationType) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlGeneralMapType).booleanValue()) 
                            visitGeneralMapType((IOmlGeneralMapType) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlIntType).booleanValue()) 
                              visitIntType((IOmlIntType) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlNat1Type).booleanValue()) 
                                visitNat1Type((IOmlNat1Type) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlCompositeType).booleanValue()) 
                                  visitCompositeType((IOmlCompositeType) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlQuoteType).booleanValue()) 
                                    visitQuoteType((IOmlQuoteType) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlEmptyType).booleanValue()) 
                                      visitEmptyType((IOmlEmptyType) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlTypeVariable).booleanValue()) 
                                        visitTypeVariable((IOmlTypeVariable) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlPartialFunctionType).booleanValue()) 
                                          visitPartialFunctionType((IOmlPartialFunctionType) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlProductType).booleanValue()) 
                                            visitProductType((IOmlProductType) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlInjectiveMapType).booleanValue()) 
                                              visitInjectiveMapType((IOmlInjectiveMapType) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlClassTypeInstantiation).booleanValue()) 
                                                visitClassTypeInstantiation((IOmlClassTypeInstantiation) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlTypeName).booleanValue()) 
                                                  visitTypeName((IOmlTypeName) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlSetType).booleanValue()) 
                                                    visitSetType((IOmlSetType) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlBoolType).booleanValue()) 
                                                      visitBoolType((IOmlBoolType) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlTotalFunctionType).booleanValue()) 
                                                        visitTotalFunctionType((IOmlTotalFunctionType) pNode);
                                                      else {

                                                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                        return;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitType#1|IOmlType


// ***** VDMTOOLS START Name=visitFunctionShape#1|IOmlFunctionShape KEEP=NO
  public void visitFunctionShape (final IOmlFunctionShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTypelessExplicitFunction).booleanValue()) 
      visitTypelessExplicitFunction((IOmlTypelessExplicitFunction) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlImplicitFunction).booleanValue()) 
        visitImplicitFunction((IOmlImplicitFunction) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlExplicitFunction).booleanValue()) 
          visitExplicitFunction((IOmlExplicitFunction) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlExtendedExplicitFunction).booleanValue()) 
            visitExtendedExplicitFunction((IOmlExtendedExplicitFunction) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitFunctionShape#1|IOmlFunctionShape


// ***** VDMTOOLS START Name=visitStateDesignator#1|IOmlStateDesignator KEEP=NO
  public void visitStateDesignator (final IOmlStateDesignator pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlMapOrSequenceReference).booleanValue()) 
      visitMapOrSequenceReference((IOmlMapOrSequenceReference) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlFieldReference).booleanValue()) 
        visitFieldReference((IOmlFieldReference) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlStateDesignatorName).booleanValue()) 
          visitStateDesignatorName((IOmlStateDesignatorName) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitStateDesignator#1|IOmlStateDesignator


// ***** VDMTOOLS START Name=visitBind#1|IOmlBind KEEP=NO
  public void visitBind (final IOmlBind pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTypeBind).booleanValue()) 
      visitTypeBind((IOmlTypeBind) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSetBind).booleanValue()) 
        visitSetBind((IOmlSetBind) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitBind#1|IOmlBind


// ***** VDMTOOLS START Name=visitObjectDesignator#1|IOmlObjectDesignator KEEP=NO
  public void visitObjectDesignator (final IOmlObjectDesignator pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlObjectDesignatorExpression).booleanValue()) 
      visitObjectDesignatorExpression((IOmlObjectDesignatorExpression) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlObjectFieldReference).booleanValue()) 
        visitObjectFieldReference((IOmlObjectFieldReference) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlObjectApply).booleanValue()) 
          visitObjectApply((IOmlObjectApply) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitObjectDesignator#1|IOmlObjectDesignator


// ***** VDMTOOLS START Name=visitMode#1|IOmlMode KEEP=NO
  public void visitMode (final IOmlMode var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMode#1|IOmlMode


// ***** VDMTOOLS START Name=visitOperationShape#1|IOmlOperationShape KEEP=NO
  public void visitOperationShape (final IOmlOperationShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlImplicitOperation).booleanValue()) 
      visitImplicitOperation((IOmlImplicitOperation) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlExplicitOperation).booleanValue()) 
        visitExplicitOperation((IOmlExplicitOperation) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlExtendedExplicitOperation).booleanValue()) 
          visitExtendedExplicitOperation((IOmlExtendedExplicitOperation) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitOperationShape#1|IOmlOperationShape


// ***** VDMTOOLS START Name=visitDefinitionBlock#1|IOmlDefinitionBlock KEEP=NO
  public void visitDefinitionBlock (final IOmlDefinitionBlock pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlValueDefinitions).booleanValue()) 
      visitValueDefinitions((IOmlValueDefinitions) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlInstanceVariableDefinitions).booleanValue()) 
        visitInstanceVariableDefinitions((IOmlInstanceVariableDefinitions) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlSynchronizationDefinitions).booleanValue()) 
          visitSynchronizationDefinitions((IOmlSynchronizationDefinitions) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlThreadDefinition).booleanValue()) 
            visitThreadDefinition((IOmlThreadDefinition) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlFunctionDefinitions).booleanValue()) 
              visitFunctionDefinitions((IOmlFunctionDefinitions) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlTypeDefinitions).booleanValue()) 
                visitTypeDefinitions((IOmlTypeDefinitions) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlOperationDefinitions).booleanValue()) 
                  visitOperationDefinitions((IOmlOperationDefinitions) pNode);
                else {

                  UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                  return;
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitDefinitionBlock#1|IOmlDefinitionBlock


// ***** VDMTOOLS START Name=visitStatement#1|IOmlStatement KEEP=NO
  public void visitStatement (final IOmlStatement pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTrapStatement).booleanValue()) 
      visitTrapStatement((IOmlTrapStatement) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSetForLoop).booleanValue()) 
        visitSetForLoop((IOmlSetForLoop) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlCasesStatement).booleanValue()) 
          visitCasesStatement((IOmlCasesStatement) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlDurationStatement).booleanValue()) 
            visitDurationStatement((IOmlDurationStatement) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlWhileLoop).booleanValue()) 
              visitWhileLoop((IOmlWhileLoop) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlReturnStatement).booleanValue()) 
                visitReturnStatement((IOmlReturnStatement) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlDclStatement).booleanValue()) 
                  visitDclStatement((IOmlDclStatement) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlLetStatement).booleanValue()) 
                    visitLetStatement((IOmlLetStatement) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlDefStatement).booleanValue()) 
                      visitDefStatement((IOmlDefStatement) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlSequenceForLoop).booleanValue()) 
                        visitSequenceForLoop((IOmlSequenceForLoop) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlBlockStatement).booleanValue()) 
                          visitBlockStatement((IOmlBlockStatement) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlErrorStatement).booleanValue()) 
                            visitErrorStatement((IOmlErrorStatement) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlAssignStatement).booleanValue()) 
                              visitAssignStatement((IOmlAssignStatement) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlCallStatement).booleanValue()) 
                                visitCallStatement((IOmlCallStatement) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlAtomicStatement).booleanValue()) 
                                  visitAtomicStatement((IOmlAtomicStatement) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlSkipStatement).booleanValue()) 
                                    visitSkipStatement((IOmlSkipStatement) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlAlwaysStatement).booleanValue()) 
                                      visitAlwaysStatement((IOmlAlwaysStatement) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlNondeterministicStatement).booleanValue()) 
                                        visitNondeterministicStatement((IOmlNondeterministicStatement) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlStartStatement).booleanValue()) 
                                          visitStartStatement((IOmlStartStatement) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlExitStatement).booleanValue()) 
                                            visitExitStatement((IOmlExitStatement) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlRecursiveTrapStatement).booleanValue()) 
                                              visitRecursiveTrapStatement((IOmlRecursiveTrapStatement) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlIndexForLoop).booleanValue()) 
                                                visitIndexForLoop((IOmlIndexForLoop) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlLetBeStatement).booleanValue()) 
                                                  visitLetBeStatement((IOmlLetBeStatement) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlCyclesStatement).booleanValue()) 
                                                    visitCyclesStatement((IOmlCyclesStatement) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlIfStatement).booleanValue()) 
                                                      visitIfStatement((IOmlIfStatement) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlSpecificationStatement).booleanValue()) 
                                                        visitSpecificationStatement((IOmlSpecificationStatement) pNode);
                                                      else {

                                                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                        return;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitStatement#1|IOmlStatement


// ***** VDMTOOLS START Name=visitThreadSpecification#1|IOmlThreadSpecification KEEP=NO
  public void visitThreadSpecification (final IOmlThreadSpecification pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlProcedureThread).booleanValue()) 
      visitProcedureThread((IOmlProcedureThread) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlPeriodicThread).booleanValue()) 
        visitPeriodicThread((IOmlPeriodicThread) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitThreadSpecification#1|IOmlThreadSpecification


// ***** VDMTOOLS START Name=visitSyncPredicate#1|IOmlSyncPredicate KEEP=NO
  public void visitSyncPredicate (final IOmlSyncPredicate pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlPermissionPredicate).booleanValue()) 
      visitPermissionPredicate((IOmlPermissionPredicate) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlMutexPredicate).booleanValue()) 
        visitMutexPredicate((IOmlMutexPredicate) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlMutexAllPredicate).booleanValue()) 
          visitMutexAllPredicate((IOmlMutexAllPredicate) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitSyncPredicate#1|IOmlSyncPredicate


// ***** VDMTOOLS START Name=visitBinaryOperator#1|IOmlBinaryOperator KEEP=NO
  public void visitBinaryOperator (final IOmlBinaryOperator var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBinaryOperator#1|IOmlBinaryOperator


// ***** VDMTOOLS START Name=visitExpression#1|IOmlExpression KEEP=NO
  public void visitExpression (final IOmlExpression pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlExistsUniqueExpression).booleanValue()) 
      visitExistsUniqueExpression((IOmlExistsUniqueExpression) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlApplyExpression).booleanValue()) 
        visitApplyExpression((IOmlApplyExpression) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlIsofclassExpression).booleanValue()) 
          visitIsofclassExpression((IOmlIsofclassExpression) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlRecordConstructor).booleanValue()) 
            visitRecordConstructor((IOmlRecordConstructor) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlSetEnumeration).booleanValue()) 
              visitSetEnumeration((IOmlSetEnumeration) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlLetExpression).booleanValue()) 
                visitLetExpression((IOmlLetExpression) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlBinaryExpression).booleanValue()) 
                  visitBinaryExpression((IOmlBinaryExpression) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlFieldSelect).booleanValue()) 
                    visitFieldSelect((IOmlFieldSelect) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlIsofbaseclassExpression).booleanValue()) 
                      visitIsofbaseclassExpression((IOmlIsofbaseclassExpression) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlSequenceComprehension).booleanValue()) 
                        visitSequenceComprehension((IOmlSequenceComprehension) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlIotaExpression).booleanValue()) 
                          visitIotaExpression((IOmlIotaExpression) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlActExpression).booleanValue()) 
                            visitActExpression((IOmlActExpression) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlBracketedExpression).booleanValue()) 
                              visitBracketedExpression((IOmlBracketedExpression) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlThreadIdExpression).booleanValue()) 
                                visitThreadIdExpression((IOmlThreadIdExpression) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlActiveExpression).booleanValue()) 
                                  visitActiveExpression((IOmlActiveExpression) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlFinExpression).booleanValue()) 
                                    visitFinExpression((IOmlFinExpression) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlUndefinedExpression).booleanValue()) 
                                      visitUndefinedExpression((IOmlUndefinedExpression) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlNewExpression).booleanValue()) 
                                        visitNewExpression((IOmlNewExpression) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlSameclassExpression).booleanValue()) 
                                          visitSameclassExpression((IOmlSameclassExpression) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlName).booleanValue()) 
                                            visitName((IOmlName) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlMapComprehension).booleanValue()) 
                                              visitMapComprehension((IOmlMapComprehension) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlSamebaseclassExpression).booleanValue()) 
                                                visitSamebaseclassExpression((IOmlSamebaseclassExpression) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlPreconditionExpression).booleanValue()) 
                                                  visitPreconditionExpression((IOmlPreconditionExpression) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlFunctionTypeSelect).booleanValue()) 
                                                    visitFunctionTypeSelect((IOmlFunctionTypeSelect) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlExistsExpression).booleanValue()) 
                                                      visitExistsExpression((IOmlExistsExpression) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlMapEnumeration).booleanValue()) 
                                                        visitMapEnumeration((IOmlMapEnumeration) pNode);
                                                      else {
                                                        if (new Boolean(pNode instanceof IOmlLetBeExpression).booleanValue()) 
                                                          visitLetBeExpression((IOmlLetBeExpression) pNode);
                                                        else {
                                                          if (new Boolean(pNode instanceof IOmlFunctionTypeInstantiation).booleanValue()) 
                                                            visitFunctionTypeInstantiation((IOmlFunctionTypeInstantiation) pNode);
                                                          else {
                                                            if (new Boolean(pNode instanceof IOmlSymbolicLiteralExpression).booleanValue()) 
                                                              visitSymbolicLiteralExpression((IOmlSymbolicLiteralExpression) pNode);
                                                            else {
                                                              if (new Boolean(pNode instanceof IOmlTupleConstructor).booleanValue()) 
                                                                visitTupleConstructor((IOmlTupleConstructor) pNode);
                                                              else {
                                                                if (new Boolean(pNode instanceof IOmlOldName).booleanValue()) 
                                                                  visitOldName((IOmlOldName) pNode);
                                                                else {
                                                                  if (new Boolean(pNode instanceof IOmlForAllExpression).booleanValue()) 
                                                                    visitForAllExpression((IOmlForAllExpression) pNode);
                                                                  else {
                                                                    if (new Boolean(pNode instanceof IOmlMuExpression).booleanValue()) 
                                                                      visitMuExpression((IOmlMuExpression) pNode);
                                                                    else {
                                                                      if (new Boolean(pNode instanceof IOmlLambdaExpression).booleanValue()) 
                                                                        visitLambdaExpression((IOmlLambdaExpression) pNode);
                                                                      else {
                                                                        if (new Boolean(pNode instanceof IOmlIsExpression).booleanValue()) 
                                                                          visitIsExpression((IOmlIsExpression) pNode);
                                                                        else {
                                                                          if (new Boolean(pNode instanceof IOmlSelfExpression).booleanValue()) 
                                                                            visitSelfExpression((IOmlSelfExpression) pNode);
                                                                          else {
                                                                            if (new Boolean(pNode instanceof IOmlSetComprehension).booleanValue()) 
                                                                              visitSetComprehension((IOmlSetComprehension) pNode);
                                                                            else {
                                                                              if (new Boolean(pNode instanceof IOmlDefExpression).booleanValue()) 
                                                                                visitDefExpression((IOmlDefExpression) pNode);
                                                                              else {
                                                                                if (new Boolean(pNode instanceof IOmlTimeExpression).booleanValue()) 
                                                                                  visitTimeExpression((IOmlTimeExpression) pNode);
                                                                                else {
                                                                                  if (new Boolean(pNode instanceof IOmlCasesExpression).booleanValue()) 
                                                                                    visitCasesExpression((IOmlCasesExpression) pNode);
                                                                                  else {
                                                                                    if (new Boolean(pNode instanceof IOmlIfExpression).booleanValue()) 
                                                                                      visitIfExpression((IOmlIfExpression) pNode);
                                                                                    else {
                                                                                      if (new Boolean(pNode instanceof IOmlSetRangeExpression).booleanValue()) 
                                                                                        visitSetRangeExpression((IOmlSetRangeExpression) pNode);
                                                                                      else {
                                                                                        if (new Boolean(pNode instanceof IOmlTokenExpression).booleanValue()) 
                                                                                          visitTokenExpression((IOmlTokenExpression) pNode);
                                                                                        else {
                                                                                          if (new Boolean(pNode instanceof IOmlSubsequenceExpression).booleanValue()) 
                                                                                            visitSubsequenceExpression((IOmlSubsequenceExpression) pNode);
                                                                                          else {
                                                                                            if (new Boolean(pNode instanceof IOmlWaitingExpression).booleanValue()) 
                                                                                              visitWaitingExpression((IOmlWaitingExpression) pNode);
                                                                                            else {
                                                                                              if (new Boolean(pNode instanceof IOmlSequenceEnumeration).booleanValue()) 
                                                                                                visitSequenceEnumeration((IOmlSequenceEnumeration) pNode);
                                                                                              else {
                                                                                                if (new Boolean(pNode instanceof IOmlReqExpression).booleanValue()) 
                                                                                                  visitReqExpression((IOmlReqExpression) pNode);
                                                                                                else {
                                                                                                  if (new Boolean(pNode instanceof IOmlUnaryExpression).booleanValue()) 
                                                                                                    visitUnaryExpression((IOmlUnaryExpression) pNode);
                                                                                                  else {

                                                                                                    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                                                                    return;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=visitLiteral#1|IOmlLiteral KEEP=NO
  public void visitLiteral (final IOmlLiteral pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlBooleanLiteral).booleanValue()) 
      visitBooleanLiteral((IOmlBooleanLiteral) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlNumericLiteral).booleanValue()) 
        visitNumericLiteral((IOmlNumericLiteral) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlTextLiteral).booleanValue()) 
          visitTextLiteral((IOmlTextLiteral) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlNilLiteral).booleanValue()) 
            visitNilLiteral((IOmlNilLiteral) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlQuoteLiteral).booleanValue()) 
              visitQuoteLiteral((IOmlQuoteLiteral) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlRealLiteral).booleanValue()) 
                visitRealLiteral((IOmlRealLiteral) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlCharacterLiteral).booleanValue()) 
                  visitCharacterLiteral((IOmlCharacterLiteral) pNode);
                else {

                  UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                  return;
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitLiteral#1|IOmlLiteral


// ***** VDMTOOLS START Name=visitInstanceVariableShape#1|IOmlInstanceVariableShape KEEP=NO
  public void visitInstanceVariableShape (final IOmlInstanceVariableShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlInstanceVariableInvariant).booleanValue()) 
      visitInstanceVariableInvariant((IOmlInstanceVariableInvariant) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlInstanceVariable).booleanValue()) 
        visitInstanceVariable((IOmlInstanceVariable) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitInstanceVariableShape#1|IOmlInstanceVariableShape


// ***** VDMTOOLS START Name=visitScope#1|IOmlScope KEEP=NO
  public void visitScope (final IOmlScope var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitScope#1|IOmlScope


// ***** VDMTOOLS START Name=visitUnaryOperator#1|IOmlUnaryOperator KEEP=NO
  public void visitUnaryOperator (final IOmlUnaryOperator var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnaryOperator#1|IOmlUnaryOperator


// ***** VDMTOOLS START Name=visitPattern#1|IOmlPattern KEEP=NO
  public void visitPattern (final IOmlPattern pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlPatternIdentifier).booleanValue()) 
      visitPatternIdentifier((IOmlPatternIdentifier) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSeqEnumPattern).booleanValue()) 
        visitSeqEnumPattern((IOmlSeqEnumPattern) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlRecordPattern).booleanValue()) 
          visitRecordPattern((IOmlRecordPattern) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlSetEnumPattern).booleanValue()) 
            visitSetEnumPattern((IOmlSetEnumPattern) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlTuplePattern).booleanValue()) 
              visitTuplePattern((IOmlTuplePattern) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlSymbolicLiteralPattern).booleanValue()) 
                visitSymbolicLiteralPattern((IOmlSymbolicLiteralPattern) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlMatchValue).booleanValue()) 
                  visitMatchValue((IOmlMatchValue) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlSetUnionPattern).booleanValue()) 
                    visitSetUnionPattern((IOmlSetUnionPattern) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlSeqConcPattern).booleanValue()) 
                      visitSeqConcPattern((IOmlSeqConcPattern) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlDontCarePattern).booleanValue()) 
                        visitDontCarePattern((IOmlDontCarePattern) pNode);
                      else {

                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                        return;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitPattern#1|IOmlPattern


// ***** VDMTOOLS START Name=visitPatternBind#1|IOmlPatternBind KEEP=NO
  public void visitPatternBind (final IOmlPatternBind pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlBind).booleanValue()) 
      visitBind((IOmlBind) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlPattern).booleanValue()) 
        visitPattern((IOmlPattern) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitPatternBind#1|IOmlPatternBind


// ***** VDMTOOLS START Name=visitTypeShape#1|IOmlTypeShape KEEP=NO
  public void visitTypeShape (final IOmlTypeShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlComplexType).booleanValue()) 
      visitComplexType((IOmlComplexType) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSimpleType).booleanValue()) 
        visitSimpleType((IOmlSimpleType) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitTypeShape#1|IOmlTypeShape

}
;
