//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlBinaryOperatorQuotes {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=IQUNION KEEP=NO
  public static Integer IQUNION = new Integer(0);
// ***** VDMTOOLS END Name=IQUNION

// ***** VDMTOOLS START Name=IQMINUS KEEP=NO
  public static Integer IQMINUS = new Integer(1);
// ***** VDMTOOLS END Name=IQMINUS

// ***** VDMTOOLS START Name=IQEQUIV KEEP=NO
  public static Integer IQEQUIV = new Integer(2);
// ***** VDMTOOLS END Name=IQEQUIV

// ***** VDMTOOLS START Name=IQPSUBSET KEEP=NO
  public static Integer IQPSUBSET = new Integer(3);
// ***** VDMTOOLS END Name=IQPSUBSET

// ***** VDMTOOLS START Name=IQEQ KEEP=NO
  public static Integer IQEQ = new Integer(4);
// ***** VDMTOOLS END Name=IQEQ

// ***** VDMTOOLS START Name=IQNOTINSET KEEP=NO
  public static Integer IQNOTINSET = new Integer(5);
// ***** VDMTOOLS END Name=IQNOTINSET

// ***** VDMTOOLS START Name=IQREM KEEP=NO
  public static Integer IQREM = new Integer(6);
// ***** VDMTOOLS END Name=IQREM

// ***** VDMTOOLS START Name=IQLT KEEP=NO
  public static Integer IQLT = new Integer(7);
// ***** VDMTOOLS END Name=IQLT

// ***** VDMTOOLS START Name=IQGT KEEP=NO
  public static Integer IQGT = new Integer(8);
// ***** VDMTOOLS END Name=IQGT

// ***** VDMTOOLS START Name=IQNE KEEP=NO
  public static Integer IQNE = new Integer(9);
// ***** VDMTOOLS END Name=IQNE

// ***** VDMTOOLS START Name=IQTUPSEL KEEP=NO
  public static Integer IQTUPSEL = new Integer(10);
// ***** VDMTOOLS END Name=IQTUPSEL

// ***** VDMTOOLS START Name=IQMOD KEEP=NO
  public static Integer IQMOD = new Integer(11);
// ***** VDMTOOLS END Name=IQMOD

// ***** VDMTOOLS START Name=IQDIFFERENCE KEEP=NO
  public static Integer IQDIFFERENCE = new Integer(12);
// ***** VDMTOOLS END Name=IQDIFFERENCE

// ***** VDMTOOLS START Name=IQINSET KEEP=NO
  public static Integer IQINSET = new Integer(13);
// ***** VDMTOOLS END Name=IQINSET

// ***** VDMTOOLS START Name=IQOR KEEP=NO
  public static Integer IQOR = new Integer(14);
// ***** VDMTOOLS END Name=IQOR

// ***** VDMTOOLS START Name=IQGE KEEP=NO
  public static Integer IQGE = new Integer(15);
// ***** VDMTOOLS END Name=IQGE

// ***** VDMTOOLS START Name=IQMAPDOMRESBY KEEP=NO
  public static Integer IQMAPDOMRESBY = new Integer(16);
// ***** VDMTOOLS END Name=IQMAPDOMRESBY

// ***** VDMTOOLS START Name=IQAND KEEP=NO
  public static Integer IQAND = new Integer(17);
// ***** VDMTOOLS END Name=IQAND

// ***** VDMTOOLS START Name=IQDIVIDE KEEP=NO
  public static Integer IQDIVIDE = new Integer(18);
// ***** VDMTOOLS END Name=IQDIVIDE

// ***** VDMTOOLS START Name=IQITERATE KEEP=NO
  public static Integer IQITERATE = new Integer(19);
// ***** VDMTOOLS END Name=IQITERATE

// ***** VDMTOOLS START Name=IQINTER KEEP=NO
  public static Integer IQINTER = new Integer(20);
// ***** VDMTOOLS END Name=IQINTER

// ***** VDMTOOLS START Name=IQMAPRNGRESBY KEEP=NO
  public static Integer IQMAPRNGRESBY = new Integer(21);
// ***** VDMTOOLS END Name=IQMAPRNGRESBY

// ***** VDMTOOLS START Name=IQLE KEEP=NO
  public static Integer IQLE = new Integer(22);
// ***** VDMTOOLS END Name=IQLE

// ***** VDMTOOLS START Name=IQMAPDOMRESTO KEEP=NO
  public static Integer IQMAPDOMRESTO = new Integer(23);
// ***** VDMTOOLS END Name=IQMAPDOMRESTO

// ***** VDMTOOLS START Name=IQMODIFY KEEP=NO
  public static Integer IQMODIFY = new Integer(24);
// ***** VDMTOOLS END Name=IQMODIFY

// ***** VDMTOOLS START Name=IQDIV KEEP=NO
  public static Integer IQDIV = new Integer(25);
// ***** VDMTOOLS END Name=IQDIV

// ***** VDMTOOLS START Name=IQSUBSET KEEP=NO
  public static Integer IQSUBSET = new Integer(26);
// ***** VDMTOOLS END Name=IQSUBSET

// ***** VDMTOOLS START Name=IQMUNION KEEP=NO
  public static Integer IQMUNION = new Integer(27);
// ***** VDMTOOLS END Name=IQMUNION

// ***** VDMTOOLS START Name=IQPLUS KEEP=NO
  public static Integer IQPLUS = new Integer(28);
// ***** VDMTOOLS END Name=IQPLUS

// ***** VDMTOOLS START Name=IQIMPLY KEEP=NO
  public static Integer IQIMPLY = new Integer(29);
// ***** VDMTOOLS END Name=IQIMPLY

// ***** VDMTOOLS START Name=IQCONC KEEP=NO
  public static Integer IQCONC = new Integer(30);
// ***** VDMTOOLS END Name=IQCONC

// ***** VDMTOOLS START Name=IQMAPRNGRESTO KEEP=NO
  public static Integer IQMAPRNGRESTO = new Integer(31);
// ***** VDMTOOLS END Name=IQMAPRNGRESTO

// ***** VDMTOOLS START Name=IQCOMP KEEP=NO
  public static Integer IQCOMP = new Integer(32);
// ***** VDMTOOLS END Name=IQCOMP

// ***** VDMTOOLS START Name=IQMULTIPLY KEEP=NO
  public static Integer IQMULTIPLY = new Integer(33);
// ***** VDMTOOLS END Name=IQMULTIPLY

// ***** VDMTOOLS START Name=qmap KEEP=NO
  private static HashMap qmap = new HashMap();
// ***** VDMTOOLS END Name=qmap


// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    try {

      OmlBinaryOperatorQuotes.qmap = new HashMap();
      OmlBinaryOperatorQuotes.qmap.put(IQUNION, new String("<UNION>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMINUS, new String("<MINUS>"));
      OmlBinaryOperatorQuotes.qmap.put(IQEQUIV, new String("<EQUIV>"));
      OmlBinaryOperatorQuotes.qmap.put(IQPSUBSET, new String("<PSUBSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQEQ, new String("<EQ>"));
      OmlBinaryOperatorQuotes.qmap.put(IQNOTINSET, new String("<NOTINSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQREM, new String("<REM>"));
      OmlBinaryOperatorQuotes.qmap.put(IQLT, new String("<LT>"));
      OmlBinaryOperatorQuotes.qmap.put(IQGT, new String("<GT>"));
      OmlBinaryOperatorQuotes.qmap.put(IQNE, new String("<NE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQTUPSEL, new String("<TUPSEL>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMOD, new String("<MOD>"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIFFERENCE, new String("<DIFFERENCE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQINSET, new String("<INSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQOR, new String("<OR>"));
      OmlBinaryOperatorQuotes.qmap.put(IQGE, new String("<GE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPDOMRESBY, new String("<MAPDOMRESBY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQAND, new String("<AND>"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIVIDE, new String("<DIVIDE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQITERATE, new String("<ITERATE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQINTER, new String("<INTER>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPRNGRESBY, new String("<MAPRNGRESBY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQLE, new String("<LE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPDOMRESTO, new String("<MAPDOMRESTO>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMODIFY, new String("<MODIFY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIV, new String("<DIV>"));
      OmlBinaryOperatorQuotes.qmap.put(IQSUBSET, new String("<SUBSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMUNION, new String("<MUNION>"));
      OmlBinaryOperatorQuotes.qmap.put(IQPLUS, new String("<PLUS>"));
      OmlBinaryOperatorQuotes.qmap.put(IQIMPLY, new String("<IMPLY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQCONC, new String("<CONC>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPRNGRESTO, new String("<MAPRNGRESTO>"));
      OmlBinaryOperatorQuotes.qmap.put(IQCOMP, new String("<COMP>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMULTIPLY, new String("<MULTIPLY>"));
    }
    catch (Throwable e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=vdm_init_OmlBinaryOperatorQuotes KEEP=NO
  private void vdm_init_OmlBinaryOperatorQuotes () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_OmlBinaryOperatorQuotes


// ***** VDMTOOLS START Name=OmlBinaryOperatorQuotes KEEP=NO
  public OmlBinaryOperatorQuotes () throws CGException {
    vdm_init_OmlBinaryOperatorQuotes();
  }
// ***** VDMTOOLS END Name=OmlBinaryOperatorQuotes


// ***** VDMTOOLS START Name=getQuoteName#1|Integer KEEP=NO
  static public String getQuoteName (final Integer pid) throws CGException {
    return UTIL.ConvertToString(qmap.get(pid));
  }
// ***** VDMTOOLS END Name=getQuoteName#1|Integer


// ***** VDMTOOLS START Name=validQuote#1|Integer KEEP=NO
  static public Boolean validQuote (final Integer pid) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(qmap.containsKey(pid));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=validQuote#1|Integer

}
;
