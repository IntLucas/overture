//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolLetExpression extends HolExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=vars KEEP=NO
  private Vector vars = null;
// ***** VDMTOOLS END Name=vars

// ***** VDMTOOLS START Name=varValues KEEP=NO
  private Vector varValues = null;
// ***** VDMTOOLS END Name=varValues

// ***** VDMTOOLS START Name=body KEEP=NO
  private HolExpression body = null;
// ***** VDMTOOLS END Name=body


// ***** VDMTOOLS START Name=vdm_init_HolLetExpression KEEP=NO
  private void vdm_init_HolLetExpression () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolLetExpression


// ***** VDMTOOLS START Name=HolLetExpression KEEP=NO
  public HolLetExpression () throws CGException {
    vdm_init_HolLetExpression();
  }
// ***** VDMTOOLS END Name=HolLetExpression


// ***** VDMTOOLS START Name=HolLetExpression#3|Vector|Vector|HolExpression KEEP=NO
  public HolLetExpression (final Vector newVars, final Vector newVarValues, final HolExpression newBody) throws CGException {

    vdm_init_HolLetExpression();
    {

      vars = (Vector) UTIL.ConvertToList(UTIL.clone(newVars));
      varValues = (Vector) UTIL.ConvertToList(UTIL.clone(newVarValues));
      body = (HolExpression) UTIL.clone(newBody);
    }
  }
// ***** VDMTOOLS END Name=HolLetExpression#3|Vector|Vector|HolExpression


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    for (int ilb_5 = 1; ilb_5 <= new Integer(varValues.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolExpression obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= varValues.size())) 
        obj_7 = (HolExpression) varValues.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
    body.setTypeInformation((HolTypeDescription) typeInfo);
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet subProvides = new HashSet();
    HashSet result = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(vars.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      String elem_6 = null;
      HolIdentifier obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= vars.size())) 
        obj_7 = (HolIdentifier) vars.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      elem_6 = obj_7.print();
      subProvides.add(elem_6);
    }
    for (int ilb_13 = 1; ilb_13 <= new Integer(varValues.size()).intValue(); ilb_13++) {

      Integer i = new Integer(ilb_13);
      HashSet rhs_14 = new HashSet();
      HashSet var2_16 = new HashSet();
      HolExpression obj_17 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= varValues.size())) 
        obj_17 = (HolExpression) varValues.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_16 = obj_17.requires();
      rhs_14 = (HashSet) result.clone();
      rhs_14.addAll(var2_16);
      result = (HashSet) UTIL.clone(rhs_14);
    }
    HashSet rexpr_20 = new HashSet();
    HashSet var1_21 = new HashSet();
    HashSet var1_22 = new HashSet();
    var1_22 = body.requires();
    var1_21 = (HashSet) var1_22.clone();
    var1_21.removeAll(subProvides);
    rexpr_20 = (HashSet) var1_21.clone();
    rexpr_20.addAll(result);
    return rexpr_20;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String result = null;
    result = UTIL.ConvertToString(UTIL.clone(new String("let ")));
    for (int ilb_5 = 1; ilb_5 <= new Integer(vars.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      {

        String rhs_6 = null;
        Vector unArg_7 = null;
        unArg_7 = new Vector();
        unArg_7.add(result);
        String e_seq_9 = null;
        HolIdentifier obj_10 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= vars.size())) 
          obj_10 = (HolIdentifier) vars.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        e_seq_9 = obj_10.print();
        unArg_7.add(e_seq_9);
        unArg_7.add(new String(" = "));
        String e_seq_14 = null;
        HolExpression obj_15 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= varValues.size())) 
          obj_15 = (HolExpression) varValues.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        e_seq_14 = obj_15.print();
        unArg_7.add(e_seq_14);
        String rdcseq_18 = new String();
        for (Iterator enm_21 = unArg_7.iterator(); enm_21.hasNext(); ) {

          String e_19 = UTIL.ConvertToString(enm_21.next());
          rdcseq_18 = rdcseq_18.concat(e_19);
        }
        rhs_6 = rdcseq_18;
        result = UTIL.ConvertToString(UTIL.clone(rhs_6));
        if (new Boolean(!(i.intValue() == new Integer(vars.size()).intValue())).booleanValue()) {

          String rhs_26 = null;
          Vector unArg_27 = null;
          unArg_27 = new Vector();
          unArg_27.add(result);
          unArg_27.add(new String(" and "));
          String rdcseq_30 = new String();
          for (Iterator enm_33 = unArg_27.iterator(); enm_33.hasNext(); ) {

            String e_31 = UTIL.ConvertToString(enm_33.next());
            rdcseq_30 = rdcseq_30.concat(e_31);
          }
          rhs_26 = rdcseq_30;
          result = UTIL.ConvertToString(UTIL.clone(rhs_26));
        }
      }
    }
    String rexpr_34 = null;
    Vector unArg_35 = null;
    unArg_35 = new Vector();
    unArg_35.add(new String("("));
    unArg_35.add(result);
    unArg_35.add(new String(" in "));
    String e_seq_39 = null;
    e_seq_39 = body.print();
    unArg_35.add(e_seq_39);
    unArg_35.add(new String(")"));
    String rdcseq_41 = new String();
    for (Iterator enm_44 = unArg_35.iterator(); enm_44.hasNext(); ) {

      String e_42 = UTIL.ConvertToString(enm_44.next());
      rdcseq_41 = rdcseq_41.concat(e_42);
    }
    rexpr_34 = rdcseq_41;
    return rexpr_34;
  }
// ***** VDMTOOLS END Name=print

}
;
