//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlElseIfExpression extends IOmlElseIfExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivElseifExpression KEEP=NO
  private IOmlExpression ivElseifExpression = null;
// ***** VDMTOOLS END Name=ivElseifExpression

// ***** VDMTOOLS START Name=ivThenExpression KEEP=NO
  private IOmlExpression ivThenExpression = null;
// ***** VDMTOOLS END Name=ivThenExpression


// ***** VDMTOOLS START Name=vdm_init_OmlElseIfExpression KEEP=NO
  private void vdm_init_OmlElseIfExpression () throws CGException {
    try {

      ivElseifExpression = null;
      ivThenExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlElseIfExpression


// ***** VDMTOOLS START Name=OmlElseIfExpression KEEP=NO
  public OmlElseIfExpression () throws CGException {
    vdm_init_OmlElseIfExpression();
  }
// ***** VDMTOOLS END Name=OmlElseIfExpression


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("ElseIfExpression");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitElseIfExpression((IOmlElseIfExpression) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlElseIfExpression#2|IOmlExpression|IOmlExpression KEEP=NO
  public OmlElseIfExpression (final IOmlExpression p1, final IOmlExpression p2) throws CGException {

    vdm_init_OmlElseIfExpression();
    {

      setElseifExpression((IOmlExpression) p1);
      setThenExpression((IOmlExpression) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlElseIfExpression#2|IOmlExpression|IOmlExpression


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("elseif_expression");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setElseifExpression((IOmlExpression) data.get(fname));
    }
    {

      String fname = new String("then_expression");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setThenExpression((IOmlExpression) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getElseifExpression KEEP=NO
  public IOmlExpression getElseifExpression () throws CGException {
    return (IOmlExpression) ivElseifExpression;
  }
// ***** VDMTOOLS END Name=getElseifExpression


// ***** VDMTOOLS START Name=setElseifExpression#1|IOmlExpression KEEP=NO
  public void setElseifExpression (final IOmlExpression parg) throws CGException {
    ivElseifExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setElseifExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=getThenExpression KEEP=NO
  public IOmlExpression getThenExpression () throws CGException {
    return (IOmlExpression) ivThenExpression;
  }
// ***** VDMTOOLS END Name=getThenExpression


// ***** VDMTOOLS START Name=setThenExpression#1|IOmlExpression KEEP=NO
  public void setThenExpression (final IOmlExpression parg) throws CGException {
    ivThenExpression = (IOmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setThenExpression#1|IOmlExpression

}
;
