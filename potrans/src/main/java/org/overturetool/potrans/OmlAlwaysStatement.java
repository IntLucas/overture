//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlAlwaysStatement extends IOmlAlwaysStatement {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivAlwaysPart KEEP=NO
  private IOmlStatement ivAlwaysPart = null;
// ***** VDMTOOLS END Name=ivAlwaysPart

// ***** VDMTOOLS START Name=ivInPart KEEP=NO
  private IOmlStatement ivInPart = null;
// ***** VDMTOOLS END Name=ivInPart


// ***** VDMTOOLS START Name=vdm_init_OmlAlwaysStatement KEEP=NO
  private void vdm_init_OmlAlwaysStatement () throws CGException {
    try {

      ivAlwaysPart = null;
      ivInPart = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlAlwaysStatement


// ***** VDMTOOLS START Name=OmlAlwaysStatement KEEP=NO
  public OmlAlwaysStatement () throws CGException {
    vdm_init_OmlAlwaysStatement();
  }
// ***** VDMTOOLS END Name=OmlAlwaysStatement


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("AlwaysStatement");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitAlwaysStatement((IOmlAlwaysStatement) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlAlwaysStatement#2|IOmlStatement|IOmlStatement KEEP=NO
  public OmlAlwaysStatement (final IOmlStatement p1, final IOmlStatement p2) throws CGException {

    vdm_init_OmlAlwaysStatement();
    {

      setAlwaysPart((IOmlStatement) p1);
      setInPart((IOmlStatement) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlAlwaysStatement#2|IOmlStatement|IOmlStatement


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("always_part");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setAlwaysPart((IOmlStatement) data.get(fname));
    }
    {

      String fname = new String("in_part");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setInPart((IOmlStatement) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getAlwaysPart KEEP=NO
  public IOmlStatement getAlwaysPart () throws CGException {
    return (IOmlStatement) ivAlwaysPart;
  }
// ***** VDMTOOLS END Name=getAlwaysPart


// ***** VDMTOOLS START Name=setAlwaysPart#1|IOmlStatement KEEP=NO
  public void setAlwaysPart (final IOmlStatement parg) throws CGException {
    ivAlwaysPart = (IOmlStatement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setAlwaysPart#1|IOmlStatement


// ***** VDMTOOLS START Name=getInPart KEEP=NO
  public IOmlStatement getInPart () throws CGException {
    return (IOmlStatement) ivInPart;
  }
// ***** VDMTOOLS END Name=getInPart


// ***** VDMTOOLS START Name=setInPart#1|IOmlStatement KEEP=NO
  public void setInPart (final IOmlStatement parg) throws CGException {
    ivInPart = (IOmlStatement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setInPart#1|IOmlStatement

}
;
