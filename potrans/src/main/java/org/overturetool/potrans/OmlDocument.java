//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public abstract class OmlDocument extends IOmlDocument {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivFilename KEEP=NO
  private String ivFilename = null;
// ***** VDMTOOLS END Name=ivFilename

// ***** VDMTOOLS START Name=ivTopNode KEEP=NO
  private IOmlNode ivTopNode = null;
// ***** VDMTOOLS END Name=ivTopNode

// ***** VDMTOOLS START Name=ivLexems KEEP=NO
  private Vector ivLexems = null;
// ***** VDMTOOLS END Name=ivLexems


// ***** VDMTOOLS START Name=vdm_init_OmlDocument KEEP=NO
  private void vdm_init_OmlDocument () throws CGException {
    try {

      ivFilename = UTIL.ConvertToString(new String());
      ivTopNode = null;
      ivLexems = new Vector();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlDocument


// ***** VDMTOOLS START Name=OmlDocument KEEP=NO
  public OmlDocument () throws CGException {
    vdm_init_OmlDocument();
  }
// ***** VDMTOOLS END Name=OmlDocument


// ***** VDMTOOLS START Name=getFilename KEEP=NO
  public String getFilename () throws CGException {
    return ivFilename;
  }
// ***** VDMTOOLS END Name=getFilename


// ***** VDMTOOLS START Name=setFilename#1|String KEEP=NO
  public void setFilename (final String pfilename) throws CGException {
    ivFilename = UTIL.ConvertToString(UTIL.clone(pfilename));
  }
// ***** VDMTOOLS END Name=setFilename#1|String


// ***** VDMTOOLS START Name=hasSpecifications KEEP=NO
  public Boolean hasSpecifications () throws CGException {
    return new Boolean(ivTopNode instanceof IOmlSpecifications);
  }
// ***** VDMTOOLS END Name=hasSpecifications


// ***** VDMTOOLS START Name=getSpecifications KEEP=NO
  public IOmlSpecifications getSpecifications () throws CGException {
    return (IOmlSpecifications) ivTopNode;
  }
// ***** VDMTOOLS END Name=getSpecifications


// ***** VDMTOOLS START Name=setSpecifications#1|IOmlSpecifications KEEP=NO
  public void setSpecifications (final IOmlSpecifications pNode) throws CGException {
    ivTopNode = (IOmlNode) UTIL.clone(pNode);
  }
// ***** VDMTOOLS END Name=setSpecifications#1|IOmlSpecifications


// ***** VDMTOOLS START Name=hasExpression KEEP=NO
  public Boolean hasExpression () throws CGException {
    return new Boolean(ivTopNode instanceof IOmlExpression);
  }
// ***** VDMTOOLS END Name=hasExpression


// ***** VDMTOOLS START Name=getExpression KEEP=NO
  public IOmlExpression getExpression () throws CGException {
    return (IOmlExpression) ivTopNode;
  }
// ***** VDMTOOLS END Name=getExpression


// ***** VDMTOOLS START Name=setExpression#1|IOmlExpression KEEP=NO
  public void setExpression (final IOmlExpression pNode) throws CGException {
    ivTopNode = (IOmlNode) UTIL.clone(pNode);
  }
// ***** VDMTOOLS END Name=setExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=getLexems KEEP=NO
  public Vector getLexems () throws CGException {
    return ivLexems;
  }
// ***** VDMTOOLS END Name=getLexems


// ***** VDMTOOLS START Name=setLexems#1|Vector KEEP=NO
  public void setLexems (final Vector plexems) throws CGException {
    ivLexems = (Vector) UTIL.ConvertToList(UTIL.clone(plexems));
  }
// ***** VDMTOOLS END Name=setLexems#1|Vector


// ***** VDMTOOLS START Name=createLexem#5|Integer|Integer|Integer|String|Integer KEEP=NO
  public IOmlLexem createLexem (final Integer pline, final Integer pcolumn, final Integer plexval, final String ptext, final Integer ptype) throws CGException {

    IOmlLexem res = (IOmlLexem) new OmlLexem(pline, pcolumn, plexval, ptext, new Integer(new Integer(ivLexems.size()).intValue() + new Integer(1).intValue()), ptype);
    ivLexems.add(res);
    return (IOmlLexem) res;
  }
// ***** VDMTOOLS END Name=createLexem#5|Integer|Integer|Integer|String|Integer


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitDocument((IOmlDocument) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=toVdmPpValue KEEP=NO
  public String toVdmPpValue () throws CGException {

    VdmPpVisitor visitor = new VdmPpVisitor();
    accept((IOmlVisitor) visitor);
    String rexpr_3 = null;
    rexpr_3 = visitor.result;
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=toVdmPpValue


// ***** VDMTOOLS START Name=OmlDocument#3|String|IOmlNode|Vector KEEP=NO
  public OmlDocument (final String pfilename, final IOmlNode pnode, final Vector plexems) throws CGException {

    vdm_init_OmlDocument();
    {

      setFilename(pfilename);
      ivTopNode = (IOmlNode) UTIL.clone(pnode);
      setLexems(plexems);
    }
  }
// ***** VDMTOOLS END Name=OmlDocument#3|String|IOmlNode|Vector

}
;
