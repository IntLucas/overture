//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlPeriodicThread extends IOmlPeriodicThread {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivArgs KEEP=NO
  private Vector ivArgs = null;
// ***** VDMTOOLS END Name=ivArgs

// ***** VDMTOOLS START Name=ivName KEEP=NO
  private IOmlName ivName = null;
// ***** VDMTOOLS END Name=ivName


// ***** VDMTOOLS START Name=vdm_init_OmlPeriodicThread KEEP=NO
  private void vdm_init_OmlPeriodicThread () throws CGException {
    try {

      ivArgs = new Vector();
      ivName = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlPeriodicThread


// ***** VDMTOOLS START Name=OmlPeriodicThread KEEP=NO
  public OmlPeriodicThread () throws CGException {
    vdm_init_OmlPeriodicThread();
  }
// ***** VDMTOOLS END Name=OmlPeriodicThread


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("PeriodicThread");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitPeriodicThread((IOmlPeriodicThread) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlPeriodicThread#2|Vector|IOmlName KEEP=NO
  public OmlPeriodicThread (final Vector p1, final IOmlName p2) throws CGException {

    vdm_init_OmlPeriodicThread();
    {

      setArgs(p1);
      setName((IOmlName) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlPeriodicThread#2|Vector|IOmlName


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("args");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setArgs((Vector) data.get(fname));
    }
    {

      String fname = new String("name");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setName((IOmlName) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getArgs KEEP=NO
  public Vector getArgs () throws CGException {
    return ivArgs;
  }
// ***** VDMTOOLS END Name=getArgs


// ***** VDMTOOLS START Name=setArgs#1|Vector KEEP=NO
  public void setArgs (final Vector parg) throws CGException {
    ivArgs = (Vector) UTIL.ConvertToList(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setArgs#1|Vector


// ***** VDMTOOLS START Name=addArgs#1|IOmlNode KEEP=NO
  public void addArgs (final IOmlNode parg) throws CGException {
    ivArgs.add(parg);
  }
// ***** VDMTOOLS END Name=addArgs#1|IOmlNode


// ***** VDMTOOLS START Name=getName KEEP=NO
  public IOmlName getName () throws CGException {
    return (IOmlName) ivName;
  }
// ***** VDMTOOLS END Name=getName


// ***** VDMTOOLS START Name=setName#1|IOmlName KEEP=NO
  public void setName (final IOmlName parg) throws CGException {
    ivName = (IOmlName) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setName#1|IOmlName

}
;
