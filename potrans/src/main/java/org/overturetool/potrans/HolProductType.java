//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolProductType extends HolType {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=prodTypes KEEP=NO
  private Vector prodTypes = null;
// ***** VDMTOOLS END Name=prodTypes


// ***** VDMTOOLS START Name=vdm_init_HolProductType KEEP=NO
  private void vdm_init_HolProductType () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolProductType


// ***** VDMTOOLS START Name=HolProductType KEEP=NO
  public HolProductType () throws CGException {
    vdm_init_HolProductType();
  }
// ***** VDMTOOLS END Name=HolProductType


// ***** VDMTOOLS START Name=HolProductType#1|Vector KEEP=NO
  public HolProductType (final Vector newTypes) throws CGException {

    vdm_init_HolProductType();
    prodTypes = (Vector) UTIL.ConvertToList(UTIL.clone(newTypes));
  }
// ***** VDMTOOLS END Name=HolProductType#1|Vector


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {
    for (int ilb_5 = 1; ilb_5 <= new Integer(prodTypes.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolType obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= prodTypes.size())) 
        obj_7 = (HolType) prodTypes.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(prodTypes.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      HashSet rhs_5 = new HashSet();
      HashSet var2_7 = new HashSet();
      HolType obj_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= prodTypes.size())) 
        obj_8 = (HolType) prodTypes.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_7 = obj_8.requires();
      rhs_5 = (HashSet) result.clone();
      rhs_5.addAll(var2_7);
      result = (HashSet) UTIL.clone(rhs_5);
    }
    return result;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print#1|Object KEEP=NO
  public String print (final Object specType) throws CGException {
    return printProdTypeSeq(specType, prodTypes);
  }
// ***** VDMTOOLS END Name=print#1|Object


// ***** VDMTOOLS START Name=printAsCurriedFunction#1|Object KEEP=NO
  public String printAsCurriedFunction (final Object specType) throws CGException {
    return printAsCurriedFunctionF(specType, prodTypes);
  }
// ***** VDMTOOLS END Name=printAsCurriedFunction#1|Object


// ***** VDMTOOLS START Name=getTypes KEEP=NO
  public Vector getTypes () throws CGException {
    return prodTypes;
  }
// ***** VDMTOOLS END Name=getTypes


// ***** VDMTOOLS START Name=printAsCurriedFunctionF#2|Object|Vector KEEP=NO
  private String printAsCurriedFunctionF (final Object specType, final Vector typeSeq) throws CGException {

    String varRes_3 = null;
    Vector unArg_4 = null;
    unArg_4 = new Vector();
    unArg_4.add(new String("("));
    unArg_4.add(printAsCurriedFunctionFA(specType, typeSeq));
    unArg_4.add(new String(")"));
    String rdcseq_10 = new String();
    for (Iterator enm_13 = unArg_4.iterator(); enm_13.hasNext(); ) {

      String e_11 = UTIL.ConvertToString(enm_13.next());
      rdcseq_10 = rdcseq_10.concat(e_11);
    }
    varRes_3 = rdcseq_10;
    return varRes_3;
  }
// ***** VDMTOOLS END Name=printAsCurriedFunctionF#2|Object|Vector


// ***** VDMTOOLS START Name=printAsCurriedFunctionFA#2|Object|Vector KEEP=NO
  private String printAsCurriedFunctionFA (final Object specType, final Vector typeSeq) throws CGException {

    String varRes_3 = null;
    if (new Boolean(new Integer(typeSeq.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_3 = new String("");
    else 
      if (new Boolean(new Integer(typeSeq.size()).intValue() == new Integer(1).intValue()).booleanValue()) {

        HolType obj_27 = null;
        obj_27 = (HolType) (HolType) typeSeq.get(0);
        varRes_3 = obj_27.print(specType);
      }
      else {

        Vector unArg_9 = null;
        String e_seq_10 = null;
        HolType obj_11 = null;
        obj_11 = (HolType) (HolType) typeSeq.get(0);
        e_seq_10 = obj_11.print(specType);
        unArg_9 = new Vector();
        unArg_9.add(e_seq_10);
        unArg_9.add(new String(" -> "));
        unArg_9.add(printAsCurriedFunctionF(specType, new Vector(typeSeq.subList(1, typeSeq.size()))));
        String rdcseq_19 = new String();
        for (Iterator enm_22 = unArg_9.iterator(); enm_22.hasNext(); ) {

          String e_20 = UTIL.ConvertToString(enm_22.next());
          rdcseq_19 = rdcseq_19.concat(e_20);
        }
        varRes_3 = rdcseq_19;
      }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=printAsCurriedFunctionFA#2|Object|Vector


// ***** VDMTOOLS START Name=printProdTypeSeq#2|Object|Vector KEEP=NO
  public String printProdTypeSeq (final Object specType, final Vector prodTypes) throws CGException {

    String varRes_3 = null;
    Vector unArg_4 = null;
    unArg_4 = new Vector();
    unArg_4.add(new String("("));
    unArg_4.add(printProdTypeSeqA(specType, prodTypes));
    unArg_4.add(new String(")"));
    String rdcseq_10 = new String();
    for (Iterator enm_13 = unArg_4.iterator(); enm_13.hasNext(); ) {

      String e_11 = UTIL.ConvertToString(enm_13.next());
      rdcseq_10 = rdcseq_10.concat(e_11);
    }
    varRes_3 = rdcseq_10;
    return varRes_3;
  }
// ***** VDMTOOLS END Name=printProdTypeSeq#2|Object|Vector


// ***** VDMTOOLS START Name=printProdTypeSeqA#2|Object|Vector KEEP=NO
  public String printProdTypeSeqA (final Object specType, final Vector prodTypes) throws CGException {

    String varRes_3 = null;
    if (new Boolean(new Integer(prodTypes.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_3 = new String("");
    else 
      if (new Boolean(new Integer(prodTypes.size()).intValue() == new Integer(1).intValue()).booleanValue()) {

        HolType obj_27 = null;
        obj_27 = (HolType) (HolType) prodTypes.get(0);
        varRes_3 = obj_27.print(specType);
      }
      else {

        Vector unArg_9 = null;
        String e_seq_10 = null;
        HolType obj_11 = null;
        obj_11 = (HolType) (HolType) prodTypes.get(0);
        e_seq_10 = obj_11.print(specType);
        unArg_9 = new Vector();
        unArg_9.add(e_seq_10);
        unArg_9.add(new String(" # "));
        unArg_9.add(printProdTypeSeq(specType, new Vector(prodTypes.subList(1, prodTypes.size()))));
        String rdcseq_19 = new String();
        for (Iterator enm_22 = unArg_9.iterator(); enm_22.hasNext(); ) {

          String e_20 = UTIL.ConvertToString(enm_22.next());
          rdcseq_19 = rdcseq_19.concat(e_20);
        }
        varRes_3 = rdcseq_19;
      }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=printProdTypeSeqA#2|Object|Vector

}
;
