//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolClass {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=name KEEP=NO
  private HolIdentifier name = null;
// ***** VDMTOOLS END Name=name

// ***** VDMTOOLS START Name=typeDefs KEEP=NO
  private Vector typeDefs = null;
// ***** VDMTOOLS END Name=typeDefs

// ***** VDMTOOLS START Name=funDefs KEEP=NO
  private Vector funDefs = null;
// ***** VDMTOOLS END Name=funDefs


// ***** VDMTOOLS START Name=vdm_init_HolClass KEEP=NO
  private void vdm_init_HolClass () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolClass


// ***** VDMTOOLS START Name=HolClass KEEP=NO
  public HolClass () throws CGException {
    vdm_init_HolClass();
  }
// ***** VDMTOOLS END Name=HolClass


// ***** VDMTOOLS START Name=HolClass#3|HolIdentifier|Vector|Vector KEEP=NO
  public HolClass (final HolIdentifier newName, final Vector newTypeDefs, final Vector newfunDefs) throws CGException {

    vdm_init_HolClass();
    {

      name = (HolIdentifier) UTIL.clone(newName);
      typeDefs = (Vector) UTIL.ConvertToList(UTIL.clone(newTypeDefs));
      funDefs = (Vector) UTIL.ConvertToList(UTIL.clone(newfunDefs));
    }
  }
// ***** VDMTOOLS END Name=HolClass#3|HolIdentifier|Vector|Vector


// ***** VDMTOOLS START Name=processTypeInformation#1|HolTypeDescription KEEP=NO
  public HolTypeDescription processTypeInformation (final HolTypeDescription typeDesc) throws CGException {

    HolTypeDescription result = typeDesc;
    for (int ilb_5 = 1; ilb_5 <= new Integer(typeDefs.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolTypeDescription rhs_6 = null;
      HolTypeDefinition obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= typeDefs.size())) 
        obj_7 = (HolTypeDefinition) typeDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      rhs_6 = (HolTypeDescription) obj_7.processTypeInformation((HolTypeDescription) result);
      result = (HolTypeDescription) UTIL.clone(rhs_6);
    }
    return (HolTypeDescription) result;
  }
// ***** VDMTOOLS END Name=processTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    for (int ilb_5 = 1; ilb_5 <= new Integer(typeDefs.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolTypeDefinition obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= typeDefs.size())) 
        obj_7 = (HolTypeDefinition) typeDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
    for (int ilb_14 = 1; ilb_14 <= new Integer(funDefs.size()).intValue(); ilb_14++) {

      Integer i = new Integer(ilb_14);
      HolFunctionDefinition obj_16 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= funDefs.size())) 
        obj_16 = (HolFunctionDefinition) funDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_16.setTypeInformation((HolTypeDescription) typeInfo);
    }
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(typeDefs.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      HashSet rhs_5 = new HashSet();
      HashSet var2_7 = new HashSet();
      HolTypeDefinition obj_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= typeDefs.size())) 
        obj_8 = (HolTypeDefinition) typeDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_7 = obj_8.requires();
      rhs_5 = (HashSet) result.clone();
      rhs_5.addAll(var2_7);
      result = (HashSet) UTIL.clone(rhs_5);
    }
    for (int ilb_14 = 1; ilb_14 <= new Integer(funDefs.size()).intValue(); ilb_14++) {

      Integer i = new Integer(ilb_14);
      HashSet rhs_15 = new HashSet();
      HashSet var2_17 = new HashSet();
      HolFunctionDefinition obj_18 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= funDefs.size())) 
        obj_18 = (HolFunctionDefinition) funDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_17 = obj_18.requires();
      rhs_15 = (HashSet) result.clone();
      rhs_15.addAll(var2_17);
      result = (HashSet) UTIL.clone(rhs_15);
    }
    return result;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=provides KEEP=NO
  public HashSet provides () throws CGException {

    HashSet result = new HashSet();
    String enum_set_1 = null;
    enum_set_1 = name.print();
    result = new HashSet();
    result.add(enum_set_1);
    for (int ilb_5 = 1; ilb_5 <= new Integer(typeDefs.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HashSet rhs_6 = new HashSet();
      HashSet var2_8 = new HashSet();
      HolTypeDefinition obj_9 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= typeDefs.size())) 
        obj_9 = (HolTypeDefinition) typeDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_8 = obj_9.provides();
      rhs_6 = (HashSet) result.clone();
      rhs_6.addAll(var2_8);
      result = (HashSet) UTIL.clone(rhs_6);
    }
    for (int ilb_15 = 1; ilb_15 <= new Integer(funDefs.size()).intValue(); ilb_15++) {

      Integer i = new Integer(ilb_15);
      HashSet rhs_16 = new HashSet();
      HashSet var2_18 = new HashSet();
      HolFunctionDefinition obj_19 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= funDefs.size())) 
        obj_19 = (HolFunctionDefinition) funDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_18 = obj_19.provides();
      rhs_16 = (HashSet) result.clone();
      rhs_16.addAll(var2_18);
      result = (HashSet) UTIL.clone(rhs_16);
    }
    return result;
  }
// ***** VDMTOOLS END Name=provides


// ***** VDMTOOLS START Name=getMissingDependencies KEEP=NO
  private HashSet getMissingDependencies () throws CGException {

    HashSet rexpr_1 = new HashSet();
    rexpr_1 = (HashSet) requires().clone();
    rexpr_1.removeAll(provides());
    return rexpr_1;
  }
// ***** VDMTOOLS END Name=getMissingDependencies


// ***** VDMTOOLS START Name=printSet#1|HashSet KEEP=NO
  private String printSet (final HashSet settp) throws CGException {

    String result = new String("");
    {

      String el = null;
      for (Iterator enm_11 = settp.iterator(); enm_11.hasNext(); ) {

        String elem_3 = UTIL.ConvertToString(enm_11.next());
        el = elem_3;
        {

          String rhs_6 = null;
          String var1_7 = null;
          var1_7 = result.concat(new String(" "));
          rhs_6 = var1_7.concat(el);
          result = UTIL.ConvertToString(UTIL.clone(rhs_6));
        }
      }
    }
    return result;
  }
// ***** VDMTOOLS END Name=printSet#1|HashSet


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String result = new String("");
    Vector orderedDefs = null;
    orderedDefs = (Vector) typeDefs.clone();
    orderedDefs.addAll(funDefs);
    if (new Boolean(!UTIL.equals(getMissingDependencies(), new HashSet())).booleanValue()) {

      String rexpr_6 = null;
      String var1_7 = null;
      var1_7 = new String("Error, the HolAst cannot be printed, there are missing dependencies: ").concat(printSet(getMissingDependencies()));
      rexpr_6 = var1_7.concat(new String("\n"));
      return rexpr_6;
    }
    {

      boolean succ_12;
      Tuple tmpVal_13 = new Tuple(2);
      tmpVal_13 = orderOnDependencies(orderedDefs);
      Vector unDefined = null;
      Vector orderedDefsT = null;
      succ_12 = true;
      {

        Vector e_l_15 = new Vector();
        for (int i_16 = 1; i_16 <= tmpVal_13.Length(); i_16++) 
          e_l_15.add(tmpVal_13.GetField(i_16));
        if (succ_12 = (2 == e_l_15.size())) {

          orderedDefsT = (Vector) UTIL.ConvertToList(e_l_15.get(0));
          unDefined = (Vector) UTIL.ConvertToList(e_l_15.get(2 - 1));
        }
      }
      if (!succ_12) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      if (new Boolean(UTIL.equals(orderedDefsT, null)).booleanValue()) {

        String rexpr_21 = null;
        rexpr_21 = new String("Error, the HolAst cannot be printed, not all dependencies can be satisfied. Most likely due to mutual recursive definitions\nUndefined are:\n\n").concat(printDefinitions(unDefined));
        return rexpr_21;
      }
      else 
        orderedDefs = (Vector) UTIL.ConvertToList(UTIL.clone(orderedDefsT));
    }
    for (int ilb_28 = 1; ilb_28 <= new Integer(orderedDefs.size()).intValue(); ilb_28++) {

      Integer i = new Integer(ilb_28);
      String rhs_29 = null;
      Vector unArg_30 = null;
      unArg_30 = new Vector();
      unArg_30.add(result);
      String e_seq_32 = null;
      HolDefinition obj_33 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= orderedDefs.size())) 
        obj_33 = (HolDefinition) orderedDefs.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      e_seq_32 = obj_33.print();
      unArg_30.add(e_seq_32);
      String rdcseq_36 = new String();
      for (Iterator enm_39 = unArg_30.iterator(); enm_39.hasNext(); ) {

        String e_37 = UTIL.ConvertToString(enm_39.next());
        rdcseq_36 = rdcseq_36.concat(e_37);
      }
      rhs_29 = rdcseq_36;
      result = UTIL.ConvertToString(UTIL.clone(rhs_29));
    }
    return result;
  }
// ***** VDMTOOLS END Name=print


// ***** VDMTOOLS START Name=orderOnDependencies#1|Vector KEEP=NO
  private Tuple orderOnDependencies (final Vector definitions) throws CGException {
    return orderOnDependenciesR(definitions, new Vector(), new HashSet());
  }
// ***** VDMTOOLS END Name=orderOnDependencies#1|Vector


// ***** VDMTOOLS START Name=orderOnDependenciesR#3|Vector|Vector|HashSet KEEP=NO
  private Tuple orderOnDependenciesR (final Vector definitionsSource, final Vector definitionsTarget, final HashSet providedByTarget) throws CGException {

    Tuple varRes_4 = null;
    if (new Boolean(UTIL.equals(definitionsSource, new Vector())).booleanValue()) {

      varRes_4 = new Tuple(2);
      varRes_4.SetField(1, definitionsTarget);
      varRes_4.SetField(2, new Vector());
    }
    else {

      boolean succ_9;
      Tuple tmpVal_10 = new Tuple(2);
      tmpVal_10 = removeFirstSatisfied(definitionsSource, providedByTarget);
      HolDefinition firstSatisfiedDef = null;
      Vector newDefinitionSource = null;
      succ_9 = true;
      {

        Vector e_l_13 = new Vector();
        for (int i_14 = 1; i_14 <= tmpVal_10.Length(); i_14++) 
          e_l_13.add(tmpVal_10.GetField(i_14));
        if (succ_9 = (2 == e_l_13.size())) {

          firstSatisfiedDef = (HolDefinition) e_l_13.get(0);
          newDefinitionSource = (Vector) e_l_13.get(2 - 1);
        }
      }
      if (!succ_9) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      if (new Boolean(UTIL.equals(firstSatisfiedDef, null)).booleanValue()) {

        varRes_4 = new Tuple(2);
        varRes_4.SetField(1, null);
        varRes_4.SetField(2, definitionsSource);
      }
      else {

        HolDefinition firstSatisfiedDefNonNil = (HolDefinition) firstSatisfiedDef;
        Vector par_22 = null;
        Vector var2_24 = null;
        var2_24 = new Vector();
        var2_24.add(firstSatisfiedDefNonNil);
        par_22 = (Vector) definitionsTarget.clone();
        par_22.addAll(var2_24);
        HashSet par_26 = new HashSet();
        HashSet var2_28 = new HashSet();
        var2_28 = firstSatisfiedDefNonNil.provides();
        par_26 = (HashSet) providedByTarget.clone();
        par_26.addAll(var2_28);
        varRes_4 = orderOnDependenciesR(newDefinitionSource, par_22, par_26);
      }
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=orderOnDependenciesR#3|Vector|Vector|HashSet


// ***** VDMTOOLS START Name=removeFirstSatisfied#2|Vector|HashSet KEEP=NO
  private Tuple removeFirstSatisfied (final Vector definitions, final HashSet provided) throws CGException {

    Tuple varRes_3 = null;
    if (new Boolean(UTIL.equals(definitions, new Vector())).booleanValue()) {

      Boolean tmpVal_31 = null;
      IO obj_32 = null;
      obj_32 = (IO) new IO();
      String par_33 = null;
      par_33 = new String("Not satisfied, provided = ").concat(printSet(provided));
      tmpVal_31 = obj_32.echo(par_33);
      varRes_3 = new Tuple(2);
      varRes_3.SetField(1, null);
      varRes_3.SetField(2, new Vector());
    }
    else {

      Boolean cond_21 = null;
      HashSet var1_22 = new HashSet();
      HolDefinition obj_23 = null;
      obj_23 = (HolDefinition) (HolDefinition) definitions.get(0);
      var1_22 = obj_23.requires();
      cond_21 = new Boolean(provided.containsAll(var1_22));
      if (cond_21.booleanValue()) {

        varRes_3 = new Tuple(2);
        varRes_3.SetField(1, (HolDefinition) definitions.get(0));
        varRes_3.SetField(2, new Vector(definitions.subList(1, definitions.size())));
      }
      else {

        boolean succ_8;
        Tuple tmpVal_9 = new Tuple(2);
        tmpVal_9 = removeFirstSatisfied(new Vector(definitions.subList(1, definitions.size())), provided);
        HolDefinition recFound = null;
        Vector recNewList = null;
        succ_8 = true;
        {

          Vector e_l_13 = new Vector();
          for (int i_14 = 1; i_14 <= tmpVal_9.Length(); i_14++) 
            e_l_13.add(tmpVal_9.GetField(i_14));
          if (succ_8 = (2 == e_l_13.size())) {

            recFound = (HolDefinition) e_l_13.get(0);
            recNewList = (Vector) e_l_13.get(2 - 1);
          }
        }
        if (!succ_8) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        varRes_3 = new Tuple(2);
        varRes_3.SetField(1, recFound);
        Vector tmpVar_16 = null;
        Vector var1_17 = null;
        var1_17 = new Vector();
        var1_17.add((HolDefinition) definitions.get(0));
        tmpVar_16 = (Vector) var1_17.clone();
        tmpVar_16.addAll(recNewList);
        varRes_3.SetField(2, tmpVar_16);
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=removeFirstSatisfied#2|Vector|HashSet


// ***** VDMTOOLS START Name=printDefinitions#1|Vector KEEP=NO
  private String printDefinitions (final Vector defs) throws CGException {

    String varRes_2 = null;
    if (new Boolean(UTIL.equals(defs, new Vector())).booleanValue()) 
      varRes_2 = new String("");
    else {

      String var1_7 = null;
      String var1_8 = null;
      HolDefinition obj_9 = null;
      obj_9 = (HolDefinition) (HolDefinition) defs.get(0);
      var1_8 = obj_9.print();
      var1_7 = var1_8.concat(new String("\n"));
      varRes_2 = var1_7.concat(printDefinitions(new Vector(defs.subList(1, defs.size()))));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=printDefinitions#1|Vector

}
;
