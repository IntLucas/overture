//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class VdmHolTranslator {


// ***** VDMTOOLS START Name=HolTypeTranslation KEEP=NO
  private static class HolTypeTranslation implements Record {

    public HolType type;

    public Vector additionalTypeDefs;


    public HolTypeTranslation () {}


    public HolTypeTranslation (HolType p1, Vector p2) {

      type = p1;
      additionalTypeDefs = p2;
    }


    public Object clone () {
      return new HolTypeTranslation((HolType) UTIL.clone(type), (Vector) UTIL.clone(additionalTypeDefs));
    }


    public String toString () {
      return "mk_VdmHolTranslator`HolTypeTranslation(" + UTIL.toString(type) + "," + UTIL.toString(additionalTypeDefs) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof HolTypeTranslation)) 
        return false;
      else {

        HolTypeTranslation temp = (HolTypeTranslation) obj;
        return UTIL.equals(type, temp.type) && UTIL.equals(additionalTypeDefs, temp.additionalTypeDefs);
      }
    }


    public int hashCode () {
      return (type == null ? 0 : type.hashCode()) + (additionalTypeDefs == null ? 0 : additionalTypeDefs.hashCode());
    }

  }
// ***** VDMTOOLS END Name=HolTypeTranslation
;


// ***** VDMTOOLS START Name=HolPatternTranslation KEEP=NO
  private static class HolPatternTranslation implements Record {

    public Vector vars;

    public Vector exprs;


    public HolPatternTranslation () {}


    public HolPatternTranslation (Vector p1, Vector p2) {

      vars = p1;
      exprs = p2;
    }


    public Object clone () {
      return new HolPatternTranslation((Vector) UTIL.clone(vars), (Vector) UTIL.clone(exprs));
    }


    public String toString () {
      return "mk_VdmHolTranslator`HolPatternTranslation(" + UTIL.toString(vars) + "," + UTIL.toString(exprs) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof HolPatternTranslation)) 
        return false;
      else {

        HolPatternTranslation temp = (HolPatternTranslation) obj;
        return UTIL.equals(vars, temp.vars) && UTIL.equals(exprs, temp.exprs);
      }
    }


    public int hashCode () {
      return (vars == null ? 0 : vars.hashCode()) + (exprs == null ? 0 : exprs.hashCode());
    }

  }
// ***** VDMTOOLS END Name=HolPatternTranslation
;


// ***** VDMTOOLS START Name=HolBindTranslation KEEP=NO
  private static class HolBindTranslation implements Record {

    public HolExpression binding;

    public HolExpression newExpression;


    public HolBindTranslation () {}


    public HolBindTranslation (HolExpression p1, HolExpression p2) {

      binding = p1;
      newExpression = p2;
    }


    public Object clone () {
      return new HolBindTranslation((HolExpression) UTIL.clone(binding), (HolExpression) UTIL.clone(newExpression));
    }


    public String toString () {
      return "mk_VdmHolTranslator`HolBindTranslation(" + UTIL.toString(binding) + "," + UTIL.toString(newExpression) + ")";
    }


    public boolean equals (Object obj) {
      if (!(obj instanceof HolBindTranslation)) 
        return false;
      else {

        HolBindTranslation temp = (HolBindTranslation) obj;
        return UTIL.equals(binding, temp.binding) && UTIL.equals(newExpression, temp.newExpression);
      }
    }


    public int hashCode () {
      return (binding == null ? 0 : binding.hashCode()) + (newExpression == null ? 0 : newExpression.hashCode());
    }

  }
// ***** VDMTOOLS END Name=HolBindTranslation
;

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=uniqueNumber KEEP=NO
  private Integer uniqueNumber = null;
// ***** VDMTOOLS END Name=uniqueNumber


// ***** VDMTOOLS START Name=vdm_init_VdmHolTranslator KEEP=NO
  private void vdm_init_VdmHolTranslator () throws CGException {
    try {
      uniqueNumber = new Integer(0);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_VdmHolTranslator


// ***** VDMTOOLS START Name=VdmHolTranslator KEEP=NO
  public VdmHolTranslator () throws CGException {
    vdm_init_VdmHolTranslator();
  }
// ***** VDMTOOLS END Name=VdmHolTranslator


// ***** VDMTOOLS START Name=getUniqueID KEEP=NO
  private String getUniqueID () throws CGException {

    uniqueNumber = UTIL.NumberToInt(UTIL.clone(new Integer(uniqueNumber.intValue() + new Integer(1).intValue())));
    String rexpr_4 = null;
    Util obj_5 = null;
    obj_5 = (Util) new Util();
    rexpr_4 = UTIL.ConvertToString(obj_5.itoa(new Integer(uniqueNumber.intValue() - new Integer(1).intValue())));
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=getUniqueID


// ***** VDMTOOLS START Name=translateDocument#1|IOmlDocument KEEP=NO
  public HolDocument translateDocument (final IOmlDocument doc) throws CGException {

    HolDocument varRes_2 = null;
    {

      HolExpression expression = null;
      Boolean cond_6 = null;
      cond_6 = doc.hasExpression();
      if (cond_6.booleanValue()) {

        IOmlExpression par_7 = null;
        par_7 = (IOmlExpression) doc.getExpression();
        expression = (HolExpression) translateExpression((IOmlExpression) par_7);
      }
      else 
        expression = null;
      Vector specifications = null;
      Boolean cond_10 = null;
      cond_10 = doc.hasSpecifications();
      if (cond_10.booleanValue()) {

        Vector par_11 = null;
        IOmlSpecifications obj_12 = null;
        obj_12 = (IOmlSpecifications) doc.getSpecifications();
        par_11 = obj_12.getClassList();
        specifications = translateClassList(par_11);
      }
      else 
        specifications = new Vector();
      {

        HolDocument document = (HolDocument) new HolDocument(expression, specifications);
        HolTypeDescription typeDescriptor = (HolTypeDescription) new HolTypeDescription();
        HolTypeDescription par_18 = null;
        par_18 = (HolTypeDescription) document.processTypeInformation((HolTypeDescription) typeDescriptor);
        varRes_2 = (HolDocument) document.setTypeInformation((HolTypeDescription) par_18);
      }
    }
    return (HolDocument) varRes_2;
  }
// ***** VDMTOOLS END Name=translateDocument#1|IOmlDocument


// ***** VDMTOOLS START Name=translateClassList#1|Vector KEEP=NO
  private Vector translateClassList (final Vector classes) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(classes.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_8 = null;
      Vector e_seq_9 = null;
      e_seq_9 = new Vector();
      e_seq_9.add((HolClass) translateClass((IOmlClass) (IOmlClass) classes.get(0)));
      unArg_8 = new Vector();
      unArg_8.add(e_seq_9);
      unArg_8.add(translateClassList(new Vector(classes.subList(1, classes.size()))));
      Vector rdcseq_16 = new Vector();
      for (Iterator enm_19 = unArg_8.iterator(); enm_19.hasNext(); ) {

        Vector e_17 = (Vector) UTIL.ConvertToList(enm_19.next());
        rdcseq_16.addAll(e_17);
      }
      varRes_2 = rdcseq_16;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateClassList#1|Vector


// ***** VDMTOOLS START Name=translateClass#1|IOmlClass KEEP=NO
  private HolClass translateClass (final IOmlClass cl) throws CGException {

    HolClass varRes_2 = null;
    HolIdentifier arg_3 = null;
    String arg_6 = null;
    arg_6 = cl.getIdentifier();
    arg_3 = new HolIdentifier(arg_6);
    Vector arg_4 = null;
    Vector par_7 = null;
    par_7 = cl.getClassBody();
    arg_4 = translateTypeDefinitionsFromBlock(par_7);
    Vector arg_5 = null;
    Vector par_8 = null;
    par_8 = cl.getClassBody();
    arg_5 = translateFunctionDefinitionsFromBlock(par_8);
    varRes_2 = new HolClass(arg_3, arg_4, arg_5);
    return (HolClass) varRes_2;
  }
// ***** VDMTOOLS END Name=translateClass#1|IOmlClass


// ***** VDMTOOLS START Name=translateNode#1|IOmlNode KEEP=NO
  private HolNode translateNode (final IOmlNode node) throws CGException {

    Object varRes_2 = null;
    if (new Boolean(node instanceof IOmlExpression).booleanValue()) 
      varRes_2 = translateExpression((IOmlExpression) node);
    else 
      if (new Boolean(node instanceof IOmlBinaryOperator).booleanValue()) 
        varRes_2 = translateBinaryOperator((IOmlBinaryOperator) node);
      else {

        String arg_6 = null;
        Vector unArg_7 = null;
        unArg_7 = new Vector();
        unArg_7.add(new String("Unknown node type: "));
        String e_seq_9 = null;
        e_seq_9 = node.identity();
        unArg_7.add(e_seq_9);
        String rdcseq_10 = new String();
        for (Iterator enm_13 = unArg_7.iterator(); enm_13.hasNext(); ) {

          String e_11 = UTIL.ConvertToString(enm_13.next());
          rdcseq_10 = rdcseq_10.concat(e_11);
        }
        arg_6 = rdcseq_10;
        varRes_2 = new HolIdentifierError(arg_6);
      }
    return (HolNode) varRes_2;
  }
// ***** VDMTOOLS END Name=translateNode#1|IOmlNode


// ***** VDMTOOLS START Name=translateTypeDefinitionsFromBlock#1|Vector KEEP=NO
  private Vector translateTypeDefinitionsFromBlock (final Vector blocks) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(blocks.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else 
      if (new Boolean((IOmlDefinitionBlock) blocks.get(0) instanceof IOmlTypeDefinitions).booleanValue()) {

        Vector unArg_14 = null;
        unArg_14 = new Vector();
        unArg_14.add(translateTypeDefinitions((IOmlTypeDefinitions) (IOmlDefinitionBlock) blocks.get(0)));
        unArg_14.add(translateTypeDefinitionsFromBlock(new Vector(blocks.subList(1, blocks.size()))));
        Vector rdcseq_21 = new Vector();
        for (Iterator enm_24 = unArg_14.iterator(); enm_24.hasNext(); ) {

          Vector e_22 = (Vector) UTIL.ConvertToList(enm_24.next());
          rdcseq_21.addAll(e_22);
        }
        varRes_2 = rdcseq_21;
      }
      else 
        varRes_2 = translateTypeDefinitionsFromBlock(new Vector(blocks.subList(1, blocks.size())));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateTypeDefinitionsFromBlock#1|Vector


// ***** VDMTOOLS START Name=translateTypeDefinitions#1|IOmlTypeDefinitions KEEP=NO
  private Vector translateTypeDefinitions (final IOmlTypeDefinitions defs) throws CGException {

    Vector varRes_2 = null;
    Vector par_3 = null;
    par_3 = defs.getTypeList();
    varRes_2 = translateTypeList(par_3);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateTypeDefinitions#1|IOmlTypeDefinitions


// ***** VDMTOOLS START Name=translateTypeList#1|Vector KEEP=NO
  private Vector translateTypeList (final Vector defs) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(defs.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_8 = null;
      unArg_8 = new Vector();
      unArg_8.add(translateTypeDefinition((IOmlTypeDefinition) (IOmlTypeDefinition) defs.get(0)));
      unArg_8.add(translateTypeList(new Vector(defs.subList(1, defs.size()))));
      Vector rdcseq_15 = new Vector();
      for (Iterator enm_18 = unArg_8.iterator(); enm_18.hasNext(); ) {

        Vector e_16 = (Vector) UTIL.ConvertToList(enm_18.next());
        rdcseq_15.addAll(e_16);
      }
      varRes_2 = rdcseq_15;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateTypeList#1|Vector


// ***** VDMTOOLS START Name=translateTypeDefinition#1|IOmlTypeDefinition KEEP=NO
  private Vector translateTypeDefinition (final IOmlTypeDefinition typeDef) throws CGException {

    Vector varRes_2 = null;
    {

      IOmlTypeShape shape = null;
      shape = (IOmlTypeShape) typeDef.getShape();
      if (new Boolean(shape instanceof IOmlSimpleType).booleanValue()) 
        varRes_2 = translateSimpleTypeDefinition((IOmlSimpleType) shape);
      else 
        if (new Boolean(shape instanceof IOmlComplexType).booleanValue()) 
          varRes_2 = translateComplexTypeDefinition((IOmlComplexType) shape);
        else {

          HolTypeDefinitionError e_seq_8 = null;
          String arg_9 = null;
          Vector unArg_10 = null;
          unArg_10 = new Vector();
          unArg_10.add(new String("Unknown type definition type: "));
          String e_seq_12 = null;
          e_seq_12 = typeDef.identity();
          unArg_10.add(e_seq_12);
          String rdcseq_13 = new String();
          for (Iterator enm_16 = unArg_10.iterator(); enm_16.hasNext(); ) {

            String e_14 = UTIL.ConvertToString(enm_16.next());
            rdcseq_13 = rdcseq_13.concat(e_14);
          }
          arg_9 = rdcseq_13;
          e_seq_8 = new HolTypeDefinitionError(arg_9);
          varRes_2 = new Vector();
          varRes_2.add(e_seq_8);
        }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateTypeDefinition#1|IOmlTypeDefinition


// ***** VDMTOOLS START Name=translateSimpleTypeDefinition#1|IOmlSimpleType KEEP=NO
  private Vector translateSimpleTypeDefinition (final IOmlSimpleType typeDef) throws CGException {

    Vector varRes_2 = null;
    {

      HolTypeTranslation typeTranslation = null;
      IOmlType par_5 = null;
      par_5 = (IOmlType) typeDef.getType();
      typeTranslation = translateType((IOmlType) par_5);
      HolTypeIdentifier tmpVal_6 = null;
      String arg_7 = null;
      arg_7 = typeDef.getIdentifier();
      tmpVal_6 = new HolTypeIdentifier(arg_7);
      HolTypeIdentifier typeId = null;
      typeId = (HolTypeIdentifier) tmpVal_6;
      {

        HolLambdaFunction inva = null;
        Boolean cond_11 = null;
        cond_11 = typeDef.hasInvariant();
        if (cond_11.booleanValue()) {

          IOmlInvariant par_12 = null;
          par_12 = (IOmlInvariant) typeDef.getInvariant();
          HolType par_13 = null;
          par_13 = (HolType) (typeTranslation).type;
          String par_15 = null;
          par_15 = typeDef.getIdentifier();
          inva = (HolLambdaFunction) translateInvariant((OmlInvariant) par_12, (HolType) par_13, par_15);
        }
        else 
          inva = null;
        Object holTypeDef = null;
        Boolean cond_18 = null;
        HolType obj_19 = null;
        obj_19 = (HolType) (typeTranslation).type;
        cond_18 = new Boolean(obj_19 instanceof HolUnionType);
        if (cond_18.booleanValue()) {

          HolType arg_26 = null;
          arg_26 = (HolType) (typeTranslation).type;
          holTypeDef = new HolComplexTypeDefinition(typeId, arg_26, inva);
        }
        else {

          HolType arg_22 = null;
          arg_22 = (HolType) (typeTranslation).type;
          holTypeDef = new HolSimpleTypeDefinition(typeId, arg_22, inva);
        }
        Vector unArg_29 = null;
        Vector e_seq_30 = null;
        e_seq_30 = (typeTranslation).additionalTypeDefs;
        unArg_29 = new Vector();
        unArg_29.add(e_seq_30);
        Vector e_seq_32 = null;
        e_seq_32 = new Vector();
        e_seq_32.add(holTypeDef);
        unArg_29.add(e_seq_32);
        Vector rdcseq_34 = new Vector();
        for (Iterator enm_37 = unArg_29.iterator(); enm_37.hasNext(); ) {

          Vector e_35 = (Vector) UTIL.ConvertToList(enm_37.next());
          rdcseq_34.addAll(e_35);
        }
        varRes_2 = rdcseq_34;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateSimpleTypeDefinition#1|IOmlSimpleType


// ***** VDMTOOLS START Name=translateComplexTypeDefinition#1|IOmlComplexType KEEP=NO
  private Vector translateComplexTypeDefinition (final IOmlComplexType typeDef) throws CGException {

    Vector varRes_2 = null;
    {

      HolTypeIdentifier typeName = null;
      String arg_5 = null;
      arg_5 = typeDef.getIdentifier();
      typeName = new HolTypeIdentifier(arg_5);
      Vector names = null;
      Vector par_7 = null;
      par_7 = typeDef.getFieldList();
      names = translateFieldListToName(par_7);
      Vector additionalTypeDefs = null;
      Vector par_9 = null;
      Vector par_10 = null;
      par_10 = typeDef.getFieldList();
      par_9 = translateFieldListToType(par_10);
      additionalTypeDefs = getAdditionalTypeDefs(par_9);
      Vector ftypes = null;
      Vector par_12 = null;
      Vector par_13 = null;
      par_13 = typeDef.getFieldList();
      par_12 = translateFieldListToType(par_13);
      ftypes = getTypes(par_12);
      {

        HolLambdaFunction inva = null;
        Boolean cond_17 = null;
        cond_17 = typeDef.hasInvariant();
        if (cond_17.booleanValue()) {

          IOmlInvariant par_18 = null;
          par_18 = (IOmlInvariant) typeDef.getInvariant();
          String par_20 = null;
          par_20 = typeDef.getIdentifier();
          inva = (HolLambdaFunction) translateInvariant((OmlInvariant) par_18, (HolType) typeName, par_20);
        }
        else 
          inva = null;
        Vector unArg_21 = null;
        unArg_21 = new Vector();
        unArg_21.add(additionalTypeDefs);
        Vector e_seq_23 = null;
        e_seq_23 = new Vector();
        e_seq_23.add(new HolComplexTypeDefinition(typeName, new HolRecordType(typeName, names, ftypes), inva));
        unArg_21.add(e_seq_23);
        Vector rdcseq_31 = new Vector();
        for (Iterator enm_34 = unArg_21.iterator(); enm_34.hasNext(); ) {

          Vector e_32 = (Vector) UTIL.ConvertToList(enm_34.next());
          rdcseq_31.addAll(e_32);
        }
        varRes_2 = rdcseq_31;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateComplexTypeDefinition#1|IOmlComplexType


// ***** VDMTOOLS START Name=translateInvariant#3|OmlInvariant|HolType|String KEEP=NO
  private HolLambdaFunction translateInvariant (final OmlInvariant invp, final HolType typeID, final String typeName) throws CGException {

    HolLambdaFunction varRes_4 = null;
    {

      HolIdentifier invariantParameter = null;
      String arg_7 = null;
      String var1_8 = null;
      var1_8 = new String("inv_").concat(typeName);
      arg_7 = var1_8.concat(new String("_subj"));
      invariantParameter = new HolIdentifier(arg_7);
      Vector arg_12 = null;
      arg_12 = new Vector();
      arg_12.add(invariantParameter);
      HolFunctionType arg_13 = null;
      Vector arg_16 = null;
      arg_16 = new Vector();
      arg_16.add(typeID);
      arg_13 = new HolFunctionType(arg_16, new HolNativeTypeIdentifier(new String("bool")));
      HolLetExpression arg_14 = null;
      OmlLetExpression par_20 = null;
      Vector arg_21 = null;
      OmlValueShape e_seq_23 = null;
      IOmlPattern arg_24 = null;
      arg_24 = (IOmlPattern) invp.getPattern();
      OmlName arg_26 = null;
      String arg_28 = null;
      arg_28 = invariantParameter.print();
      arg_26 = new OmlName(new String(""), arg_28);
      e_seq_23 = new OmlValueShape(arg_24, null, arg_26);
      arg_21 = new Vector();
      arg_21.add(e_seq_23);
      IOmlExpression arg_22 = null;
      arg_22 = (IOmlExpression) invp.getExpression();
      par_20 = new OmlLetExpression(arg_21, arg_22);
      arg_14 = (HolLetExpression) translateLetExpression((IOmlLetExpression) par_20);
      varRes_4 = new HolLambdaFunction(arg_12, arg_13, arg_14);
    }
    return (HolLambdaFunction) varRes_4;
  }
// ***** VDMTOOLS END Name=translateInvariant#3|OmlInvariant|HolType|String


// ***** VDMTOOLS START Name=translateFieldListToType#1|Vector KEEP=NO
  private Vector translateFieldListToType (final Vector fields) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(fields.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_8 = null;
      Vector e_seq_9 = null;
      HolTypeTranslation e_seq_10 = null;
      IOmlType par_11 = null;
      IOmlField obj_12 = null;
      obj_12 = (IOmlField) (IOmlField) fields.get(0);
      par_11 = (IOmlType) obj_12.getType();
      e_seq_10 = translateType((IOmlType) par_11);
      e_seq_9 = new Vector();
      e_seq_9.add(e_seq_10);
      unArg_8 = new Vector();
      unArg_8.add(e_seq_9);
      unArg_8.add(translateFieldListToType(new Vector(fields.subList(1, fields.size()))));
      Vector rdcseq_17 = new Vector();
      for (Iterator enm_20 = unArg_8.iterator(); enm_20.hasNext(); ) {

        Vector e_18 = (Vector) UTIL.ConvertToList(enm_20.next());
        rdcseq_17.addAll(e_18);
      }
      varRes_2 = rdcseq_17;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateFieldListToType#1|Vector


// ***** VDMTOOLS START Name=translateFieldListToName#1|Vector KEEP=NO
  private Vector translateFieldListToName (final Vector fields) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(fields.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_8 = null;
      Vector e_seq_9 = null;
      HolIdentifier e_seq_10 = null;
      String arg_11 = null;
      IOmlField obj_12 = null;
      obj_12 = (IOmlField) (IOmlField) fields.get(0);
      arg_11 = obj_12.getIdentifier();
      e_seq_10 = new HolIdentifier(arg_11);
      e_seq_9 = new Vector();
      e_seq_9.add(e_seq_10);
      unArg_8 = new Vector();
      unArg_8.add(e_seq_9);
      unArg_8.add(translateFieldListToName(new Vector(fields.subList(1, fields.size()))));
      Vector rdcseq_17 = new Vector();
      for (Iterator enm_20 = unArg_8.iterator(); enm_20.hasNext(); ) {

        Vector e_18 = (Vector) UTIL.ConvertToList(enm_20.next());
        rdcseq_17.addAll(e_18);
      }
      varRes_2 = rdcseq_17;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateFieldListToName#1|Vector


// ***** VDMTOOLS START Name=translateType#1|IOmlType KEEP=NO
  private HolTypeTranslation translateType (final IOmlType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    if (new Boolean(type instanceof IOmlUnionType).booleanValue()) 
      varRes_2 = translateUnionType((IOmlUnionType) type);
    else 
      if (new Boolean(type instanceof IOmlQuoteType).booleanValue()) 
        varRes_2 = translateQuoteType((IOmlQuoteType) type);
      else 
        if (new Boolean(type instanceof IOmlTokenType).booleanValue()) 
          varRes_2 = new HolTypeTranslation((HolType) (HolNativeTypeIdentifier) translateTokenType((IOmlUnionType) type), new Vector());
        else 
          if (new Boolean(type instanceof IOmlProductType).booleanValue()) 
            varRes_2 = translateProductType((IOmlProductType) type);
          else 
            if (new Boolean(type instanceof IOmlTypeName).booleanValue()) 
              varRes_2 = new HolTypeTranslation((HolType) (HolTypeIdentifier) translateTypeName((IOmlTypeName) type), new Vector());
            else 
              if (new Boolean(type instanceof IOmlPartialFunctionType).booleanValue()) 
                varRes_2 = translatePartialFunctionType((IOmlPartialFunctionType) type);
              else 
                if (new Boolean(type instanceof IOmlTotalFunctionType).booleanValue()) 
                  varRes_2 = translateTotalFunctionType((IOmlTotalFunctionType) type);
                else 
                  if (new Boolean(type instanceof IOmlSetType).booleanValue()) 
                    varRes_2 = translateSetType((IOmlSetType) type);
                  else 
                    if (new Boolean(type instanceof IOmlSeq0Type).booleanValue()) 
                      varRes_2 = translateSeq0Type((IOmlSeq0Type) type);
                    else 
                      if (new Boolean(type instanceof IOmlGeneralMapType).booleanValue()) 
                        varRes_2 = translateGeneralMapType((IOmlGeneralMapType) type);
                      else 
                        if (new Boolean(type instanceof IOmlCharType).booleanValue()) 
                          varRes_2 = new HolTypeTranslation((HolType) new HolNativeTypeIdentifier(new String("char")), new Vector());
                        else 
                          if (new Boolean(type instanceof IOmlBoolType).booleanValue()) 
                            varRes_2 = new HolTypeTranslation((HolType) new HolNativeTypeIdentifier(new String("bool")), new Vector());
                          else 
                            if (new Boolean(type instanceof IOmlNatType).booleanValue()) 
                              varRes_2 = new HolTypeTranslation((HolType) new HolNativeTypeIdentifier(new String("num")), new Vector());
                            else 
                              if (new Boolean(type instanceof IOmlIntType).booleanValue()) 
                                varRes_2 = new HolTypeTranslation((HolType) new HolNativeTypeIdentifier(new String("num")), new Vector());
                              else 
                                if (new Boolean(type instanceof IOmlRealType).booleanValue()) 
                                  varRes_2 = new HolTypeTranslation((HolType) new HolNativeTypeIdentifier(new String("real")), new Vector());
                                else {

                                  HolTypeError tmpVar_6 = null;
                                  String arg_7 = null;
                                  Vector unArg_8 = null;
                                  unArg_8 = new Vector();
                                  unArg_8.add(new String("Unknown type: "));
                                  String e_seq_10 = null;
                                  e_seq_10 = type.identity();
                                  unArg_8.add(e_seq_10);
                                  String rdcseq_11 = new String();
                                  for (Iterator enm_14 = unArg_8.iterator(); enm_14.hasNext(); ) {

                                    String e_12 = UTIL.ConvertToString(enm_14.next());
                                    rdcseq_11 = rdcseq_11.concat(e_12);
                                  }
                                  arg_7 = rdcseq_11;
                                  tmpVar_6 = new HolTypeError(arg_7);
                                  varRes_2 = new HolTypeTranslation((HolType) tmpVar_6, new Vector());
                                }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateType#1|IOmlType


// ***** VDMTOOLS START Name=translateUnionType#1|IOmlUnionType KEEP=NO
  private HolTypeTranslation translateUnionType (final IOmlUnionType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      HolTypeTranslation lhs = null;
      IOmlType par_5 = null;
      par_5 = (IOmlType) type.getLhsType();
      lhs = translateType((IOmlType) par_5);
      HolTypeTranslation rhs = null;
      IOmlType par_7 = null;
      par_7 = (IOmlType) type.getRhsType();
      rhs = translateType((IOmlType) par_7);
      HolUnionType tmpVar_8 = null;
      HolType arg_9 = null;
      arg_9 = (HolType) (lhs).type;
      HolType arg_10 = null;
      arg_10 = (HolType) (rhs).type;
      tmpVar_8 = new HolUnionType(arg_9, arg_10);
      Vector tmpVar_13 = null;
      Vector unArg_14 = null;
      Vector e_seq_15 = null;
      e_seq_15 = (lhs).additionalTypeDefs;
      unArg_14 = new Vector();
      unArg_14.add(e_seq_15);
      Vector e_seq_17 = null;
      e_seq_17 = (rhs).additionalTypeDefs;
      unArg_14.add(e_seq_17);
      Vector rdcseq_19 = new Vector();
      for (Iterator enm_22 = unArg_14.iterator(); enm_22.hasNext(); ) {

        Vector e_20 = (Vector) UTIL.ConvertToList(enm_22.next());
        rdcseq_19.addAll(e_20);
      }
      tmpVar_13 = rdcseq_19;
      varRes_2 = new HolTypeTranslation((HolType) tmpVar_8, tmpVar_13);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateUnionType#1|IOmlUnionType


// ***** VDMTOOLS START Name=translateQuoteType#1|IOmlQuoteType KEEP=NO
  private HolTypeTranslation translateQuoteType (final IOmlQuoteType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      IOmlQuoteLiteral literal = null;
      literal = (IOmlQuoteLiteral) type.getQuoteLiteral();
      Vector tmpVar_8 = null;
      HolComplexTypeDefinition e_seq_9 = null;
      HolTypeIdentifier arg_10 = null;
      String arg_13 = null;
      arg_13 = literal.getVal();
      arg_10 = new HolTypeIdentifier(arg_13);
      e_seq_9 = new HolComplexTypeDefinition(arg_10, new HolQuoteType((HolIdentifier) translateQuoteLiteral((IOmlQuoteLiteral) literal)), null);
      tmpVar_8 = new Vector();
      tmpVar_8.add(e_seq_9);
      varRes_2 = new HolTypeTranslation((HolType) new HolQuoteType((HolIdentifier) translateQuoteLiteral((IOmlQuoteLiteral) literal)), tmpVar_8);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateQuoteType#1|IOmlQuoteType


// ***** VDMTOOLS START Name=translateTokenType#1|IOmlUnionType KEEP=NO
  private HolNativeTypeIdentifier translateTokenType (final IOmlUnionType var_1_1) throws CGException {
    return (HolNativeTypeIdentifier) new HolNativeTypeIdentifier(new String("ind"));
  }
// ***** VDMTOOLS END Name=translateTokenType#1|IOmlUnionType


// ***** VDMTOOLS START Name=translateProductType#1|IOmlProductType KEEP=NO
  private HolTypeTranslation translateProductType (final IOmlProductType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      Vector translations = translateProductTypeToFlatSequence((IOmlProductType) type);
      {

        Vector addTypeDefs = getAdditionalTypeDefs(translations);
        Vector prodTypes = getTypes(translations);
        varRes_2 = new HolTypeTranslation((HolType) new HolProductType(prodTypes), addTypeDefs);
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateProductType#1|IOmlProductType


// ***** VDMTOOLS START Name=translateProductTypeToFlatSequence#1|IOmlProductType KEEP=NO
  private Vector translateProductTypeToFlatSequence (final IOmlProductType type) throws CGException {

    Vector varRes_2 = null;
    {

      HolTypeTranslation rhs = null;
      IOmlType par_5 = null;
      par_5 = (IOmlType) type.getRhsType();
      rhs = translateType((IOmlType) par_5);
      IOmlType lhsType = null;
      lhsType = (IOmlType) type.getLhsType();
      if (new Boolean(!new Boolean(lhsType instanceof IOmlProductType).booleanValue()).booleanValue()) {

        varRes_2 = new Vector();
        varRes_2.add(translateType((IOmlType) lhsType));
        varRes_2.add(rhs);
      }
      else {

        Vector unArg_11 = null;
        unArg_11 = new Vector();
        unArg_11.add(translateProductTypeToFlatSequence((IOmlProductType) lhsType));
        Vector e_seq_14 = null;
        e_seq_14 = new Vector();
        e_seq_14.add(rhs);
        unArg_11.add(e_seq_14);
        Vector rdcseq_16 = new Vector();
        for (Iterator enm_19 = unArg_11.iterator(); enm_19.hasNext(); ) {

          Vector e_17 = (Vector) UTIL.ConvertToList(enm_19.next());
          rdcseq_16.addAll(e_17);
        }
        varRes_2 = rdcseq_16;
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateProductTypeToFlatSequence#1|IOmlProductType


// ***** VDMTOOLS START Name=translateTypeName#1|IOmlTypeName KEEP=NO
  private HolTypeIdentifier translateTypeName (final IOmlTypeName type) throws CGException {

    HolTypeIdentifier varRes_2 = null;
    HolIdentifier arg_3 = null;
    IOmlName par_4 = null;
    par_4 = (IOmlName) type.getName();
    arg_3 = (HolIdentifier) translateName((IOmlName) par_4);
    varRes_2 = new HolTypeIdentifier(arg_3);
    return (HolTypeIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateTypeName#1|IOmlTypeName


// ***** VDMTOOLS START Name=translatePartialFunctionType#1|IOmlPartialFunctionType KEEP=NO
  private HolTypeTranslation translatePartialFunctionType (final IOmlPartialFunctionType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      HolTypeTranslation domain = null;
      Boolean cond_6 = null;
      IOmlType obj_7 = null;
      obj_7 = (IOmlType) type.getDomType();
      cond_6 = new Boolean(obj_7 instanceof IOmlEmptyType);
      if (cond_6.booleanValue()) 
        domain = new HolTypeTranslation((HolType) new HolProductType(new Vector()), new Vector());
      else {

        HolTypeTranslation typeTrans = null;
        IOmlType par_10 = null;
        par_10 = (IOmlType) type.getDomType();
        typeTrans = translateType((IOmlType) par_10);
        Boolean cond_12 = null;
        HolType obj_13 = null;
        obj_13 = (HolType) (typeTrans).type;
        cond_12 = new Boolean(obj_13 instanceof HolProductType);
        if (cond_12.booleanValue()) 
          domain = typeTrans;
        else {

          HolProductType tmpVar_15 = null;
          Vector arg_16 = null;
          HolType e_seq_17 = null;
          e_seq_17 = (HolType) (typeTrans).type;
          arg_16 = new Vector();
          arg_16.add(e_seq_17);
          tmpVar_15 = new HolProductType(arg_16);
          Vector tmpVar_19 = null;
          tmpVar_19 = (typeTrans).additionalTypeDefs;
          domain = new HolTypeTranslation((HolType) tmpVar_15, tmpVar_19);
        }
      }
      HolTypeTranslation range = null;
      Boolean cond_26 = null;
      IOmlType obj_27 = null;
      obj_27 = (IOmlType) type.getRngType();
      cond_26 = new Boolean(obj_27 instanceof IOmlEmptyType);
      if (cond_26.booleanValue()) {

        HolTypeError tmpVar_29 = null;
        String arg_30 = null;
        Vector unArg_31 = null;
        unArg_31 = new Vector();
        unArg_31.add(new String("Functions may not have an empty range type"));
        String rdcseq_33 = new String();
        for (Iterator enm_36 = unArg_31.iterator(); enm_36.hasNext(); ) {

          String e_34 = UTIL.ConvertToString(enm_36.next());
          rdcseq_33 = rdcseq_33.concat(e_34);
        }
        arg_30 = rdcseq_33;
        tmpVar_29 = new HolTypeError(arg_30);
        range = new HolTypeTranslation((HolType) tmpVar_29, new Vector());
      }
      else {

        IOmlType par_28 = null;
        par_28 = (IOmlType) type.getRngType();
        range = translateType((IOmlType) par_28);
      }
      HolFunctionType tmpVar_38 = null;
      HolType arg_39 = null;
      arg_39 = (HolType) (domain).type;
      HolType arg_40 = null;
      arg_40 = (HolType) (range).type;
      tmpVar_38 = new HolFunctionType((HolProductType)arg_39, arg_40);
      Vector tmpVar_43 = null;
      Vector unArg_44 = null;
      Vector e_seq_45 = null;
      e_seq_45 = (domain).additionalTypeDefs;
      unArg_44 = new Vector();
      unArg_44.add(e_seq_45);
      Vector e_seq_47 = null;
      e_seq_47 = (range).additionalTypeDefs;
      unArg_44.add(e_seq_47);
      Vector rdcseq_49 = new Vector();
      for (Iterator enm_52 = unArg_44.iterator(); enm_52.hasNext(); ) {

        Vector e_50 = (Vector) UTIL.ConvertToList(enm_52.next());
        rdcseq_49.addAll(e_50);
      }
      tmpVar_43 = rdcseq_49;
      varRes_2 = new HolTypeTranslation((HolType) tmpVar_38, tmpVar_43);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translatePartialFunctionType#1|IOmlPartialFunctionType


// ***** VDMTOOLS START Name=translateTotalFunctionType#1|IOmlTotalFunctionType KEEP=NO
  private HolTypeTranslation translateTotalFunctionType (final IOmlTotalFunctionType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    OmlPartialFunctionType par_3 = null;
    IOmlType arg_4 = null;
    arg_4 = (IOmlType) type.getDomType();
    IOmlType arg_5 = null;
    arg_5 = (IOmlType) type.getRngType();
    par_3 = new OmlPartialFunctionType(arg_4, arg_5);
    varRes_2 = translatePartialFunctionType((IOmlPartialFunctionType) par_3);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateTotalFunctionType#1|IOmlTotalFunctionType


// ***** VDMTOOLS START Name=translateSetType#1|IOmlSetType KEEP=NO
  private HolTypeTranslation translateSetType (final IOmlSetType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      HolTypeTranslation elementType = null;
      IOmlType par_5 = null;
      par_5 = (IOmlType) type.getType();
      elementType = translateType((IOmlType) par_5);
      HolSetType tmpVar_6 = null;
      HolType arg_7 = null;
      arg_7 = (HolType) (elementType).type;
      tmpVar_6 = new HolSetType(arg_7);
      Vector tmpVar_9 = null;
      tmpVar_9 = (elementType).additionalTypeDefs;
      varRes_2 = new HolTypeTranslation((HolType) tmpVar_6, tmpVar_9);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateSetType#1|IOmlSetType


// ***** VDMTOOLS START Name=translateSeq0Type#1|IOmlSeq0Type KEEP=NO
  private HolTypeTranslation translateSeq0Type (final IOmlSeq0Type type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      HolTypeTranslation elementType = null;
      IOmlType par_5 = null;
      par_5 = (IOmlType) type.getType();
      elementType = translateType((IOmlType) par_5);
      HolListType tmpVar_6 = null;
      HolType arg_7 = null;
      arg_7 = (HolType) (elementType).type;
      tmpVar_6 = new HolListType(arg_7);
      Vector tmpVar_9 = null;
      tmpVar_9 = (elementType).additionalTypeDefs;
      varRes_2 = new HolTypeTranslation((HolType) tmpVar_6, tmpVar_9);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateSeq0Type#1|IOmlSeq0Type


// ***** VDMTOOLS START Name=translateGeneralMapType#1|IOmlGeneralMapType KEEP=NO
  private HolTypeTranslation translateGeneralMapType (final IOmlGeneralMapType type) throws CGException {

    HolTypeTranslation varRes_2 = null;
    {

      HolTypeTranslation domType = null;
      IOmlType par_5 = null;
      par_5 = (IOmlType) type.getDomType();
      domType = translateType((IOmlType) par_5);
      HolTypeTranslation rngType = null;
      IOmlType par_7 = null;
      par_7 = (IOmlType) type.getRngType();
      rngType = translateType((IOmlType) par_7);
      HolMapType tmpVar_8 = null;
      HolType arg_9 = null;
      arg_9 = (HolType) (domType).type;
      HolType arg_10 = null;
      arg_10 = (HolType) (rngType).type;
      tmpVar_8 = new HolMapType(arg_9, arg_10);
      Vector tmpVar_13 = null;
      Vector unArg_14 = null;
      Vector e_seq_15 = null;
      e_seq_15 = (domType).additionalTypeDefs;
      unArg_14 = new Vector();
      unArg_14.add(e_seq_15);
      Vector e_seq_17 = null;
      e_seq_17 = (rngType).additionalTypeDefs;
      unArg_14.add(e_seq_17);
      Vector rdcseq_19 = new Vector();
      for (Iterator enm_22 = unArg_14.iterator(); enm_22.hasNext(); ) {

        Vector e_20 = (Vector) UTIL.ConvertToList(enm_22.next());
        rdcseq_19.addAll(e_20);
      }
      tmpVar_13 = rdcseq_19;
      varRes_2 = new HolTypeTranslation((HolType) tmpVar_8, tmpVar_13);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateGeneralMapType#1|IOmlGeneralMapType


// ***** VDMTOOLS START Name=getAdditionalTypeDefs#1|Vector KEEP=NO
  private Vector getAdditionalTypeDefs (final Vector transs) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(transs, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_7 = null;
      Vector e_seq_8 = null;
      e_seq_8 = ((HolTypeTranslation) transs.get(0)).additionalTypeDefs;
      unArg_7 = new Vector();
      unArg_7.add(e_seq_8);
      unArg_7.add(getAdditionalTypeDefs(new Vector(transs.subList(1, transs.size()))));
      Vector rdcseq_14 = new Vector();
      for (Iterator enm_17 = unArg_7.iterator(); enm_17.hasNext(); ) {

        Vector e_15 = (Vector) UTIL.ConvertToList(enm_17.next());
        rdcseq_14.addAll(e_15);
      }
      varRes_2 = rdcseq_14;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getAdditionalTypeDefs#1|Vector


// ***** VDMTOOLS START Name=getTypes#1|Vector KEEP=NO
  private Vector getTypes (final Vector transs) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(transs, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_7 = null;
      Vector e_seq_8 = null;
      HolType e_seq_9 = null;
      e_seq_9 = (HolType) ((HolTypeTranslation) transs.get(0)).type;
      e_seq_8 = new Vector();
      e_seq_8.add(e_seq_9);
      unArg_7 = new Vector();
      unArg_7.add(e_seq_8);
      unArg_7.add(getTypes(new Vector(transs.subList(1, transs.size()))));
      Vector rdcseq_15 = new Vector();
      for (Iterator enm_18 = unArg_7.iterator(); enm_18.hasNext(); ) {

        Vector e_16 = (Vector) UTIL.ConvertToList(enm_18.next());
        rdcseq_15.addAll(e_16);
      }
      varRes_2 = rdcseq_15;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getTypes#1|Vector


// ***** VDMTOOLS START Name=translateFunctionDefinitionsFromBlock#1|Vector KEEP=NO
  private Vector translateFunctionDefinitionsFromBlock (final Vector blocks) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(blocks.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else 
      if (new Boolean((IOmlDefinitionBlock) blocks.get(0) instanceof IOmlFunctionDefinitions).booleanValue()) {

        Vector unArg_14 = null;
        unArg_14 = new Vector();
        unArg_14.add(translateFunctionDefinitions((IOmlFunctionDefinitions) (IOmlDefinitionBlock) blocks.get(0)));
        unArg_14.add(translateFunctionDefinitionsFromBlock(new Vector(blocks.subList(1, blocks.size()))));
        Vector rdcseq_21 = new Vector();
        for (Iterator enm_24 = unArg_14.iterator(); enm_24.hasNext(); ) {

          Vector e_22 = (Vector) UTIL.ConvertToList(enm_24.next());
          rdcseq_21.addAll(e_22);
        }
        varRes_2 = rdcseq_21;
      }
      else 
        varRes_2 = translateFunctionDefinitionsFromBlock(new Vector(blocks.subList(1, blocks.size())));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateFunctionDefinitionsFromBlock#1|Vector


// ***** VDMTOOLS START Name=translateFunctionDefinitions#1|IOmlFunctionDefinitions KEEP=NO
  private Vector translateFunctionDefinitions (final IOmlFunctionDefinitions defs) throws CGException {

    Vector varRes_2 = null;
    Vector par_3 = null;
    par_3 = defs.getFunctionList();
    varRes_2 = translateFunctionList(par_3);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateFunctionDefinitions#1|IOmlFunctionDefinitions


// ***** VDMTOOLS START Name=translateFunctionList#1|Vector KEEP=NO
  private Vector translateFunctionList (final Vector defs) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(defs.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_8 = null;
      unArg_8 = new Vector();
      unArg_8.add(translateFunctionDefinition((IOmlFunctionDefinition) (IOmlFunctionDefinition) defs.get(0)));
      unArg_8.add(translateFunctionList(new Vector(defs.subList(1, defs.size()))));
      Vector rdcseq_15 = new Vector();
      for (Iterator enm_18 = unArg_8.iterator(); enm_18.hasNext(); ) {

        Vector e_16 = (Vector) UTIL.ConvertToList(enm_18.next());
        rdcseq_15.addAll(e_16);
      }
      varRes_2 = rdcseq_15;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateFunctionList#1|Vector


// ***** VDMTOOLS START Name=translateFunctionDefinition#1|IOmlFunctionDefinition KEEP=NO
  private Vector translateFunctionDefinition (final IOmlFunctionDefinition funDef) throws CGException {

    Vector varRes_2 = null;
    {

      IOmlFunctionShape shape = null;
      shape = (IOmlFunctionShape) funDef.getShape();
      if (new Boolean(shape instanceof IOmlExplicitFunction).booleanValue()) 
        varRes_2 = translateExplicitFunction((IOmlExplicitFunction) shape);
      else 
        if (new Boolean(shape instanceof IOmlImplicitFunction).booleanValue()) 
          varRes_2 = translateImplicitFunction((IOmlImplicitFunction) shape);
        else {

          HolFunctionDefinitionError e_seq_8 = null;
          String arg_9 = null;
          Vector unArg_10 = null;
          unArg_10 = new Vector();
          unArg_10.add(new String("Unknown function shape: "));
          String e_seq_12 = null;
          e_seq_12 = funDef.identity();
          unArg_10.add(e_seq_12);
          String rdcseq_13 = new String();
          for (Iterator enm_16 = unArg_10.iterator(); enm_16.hasNext(); ) {

            String e_14 = UTIL.ConvertToString(enm_16.next());
            rdcseq_13 = rdcseq_13.concat(e_14);
          }
          arg_9 = rdcseq_13;
          e_seq_8 = new HolFunctionDefinitionError(arg_9);
          varRes_2 = new Vector();
          varRes_2.add(e_seq_8);
        }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateFunctionDefinition#1|IOmlFunctionDefinition


// ***** VDMTOOLS START Name=translateExplicitFunction#1|IOmlExplicitFunction KEEP=NO
  private Vector translateExplicitFunction (final IOmlExplicitFunction fun) throws CGException {

    Vector varRes_2 = null;
    {

      boolean succ_3;
      Tuple tmpVal_4 = new Tuple(3);
      Vector par_5 = null;
      Vector par_6 = null;
      par_6 = fun.getParameterList();
      par_5 = serializeParameterList(par_6);
      String par_8 = null;
      par_8 = fun.getIdentifier();
      tmpVal_4 = translateParameterList(par_5, new Integer(1), par_8);
      Vector paramIdHs = null;
      Vector paramIdOs = null;
      Vector paramPats = null;
      succ_3 = true;
      {

        Vector e_l_9 = new Vector();
        for (int i_10 = 1; i_10 <= tmpVal_4.Length(); i_10++) 
          e_l_9.add(tmpVal_4.GetField(i_10));
        if (succ_3 = (3 == e_l_9.size())) {

          paramIdHs = (Vector) UTIL.ConvertToList(e_l_9.get(0));
          paramIdOs = (Vector) UTIL.ConvertToList(e_l_9.get(2 - 1));
          paramPats = (Vector) UTIL.ConvertToList(e_l_9.get(3 - 1));
        }
      }
      if (!succ_3) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      HolFunctionType type = null;
      HolTypeTranslation tmpRec_12 = null;
      IOmlType par_13 = null;
      par_13 = (IOmlType) fun.getType();
      tmpRec_12 = translateType((IOmlType) par_13);
      type = (HolFunctionType) (tmpRec_12).type;
      HolExpression prec = null;
      Boolean cond_16 = null;
      IOmlFunctionTrailer obj_17 = null;
      obj_17 = (IOmlFunctionTrailer) fun.getTrailer();
      cond_16 = obj_17.hasPreExpression();
      if (cond_16.booleanValue()) {

        IOmlExpression par_18 = null;
        IOmlFunctionTrailer obj_19 = null;
        obj_19 = (IOmlFunctionTrailer) fun.getTrailer();
        par_18 = (IOmlExpression) obj_19.getPreExpression();
        prec = (HolExpression) translateExpression((IOmlExpression) par_18);
      }
      else 
        prec = null;
      HolExpression postc = null;
      Boolean cond_22 = null;
      IOmlFunctionTrailer obj_23 = null;
      obj_23 = (IOmlFunctionTrailer) fun.getTrailer();
      cond_22 = obj_23.hasPostExpression();
      if (cond_22.booleanValue()) {

        IOmlExpression par_24 = null;
        IOmlFunctionTrailer obj_25 = null;
        obj_25 = (IOmlFunctionTrailer) fun.getTrailer();
        par_24 = (IOmlExpression) obj_25.getPostExpression();
        postc = (HolExpression) translateExpression((IOmlExpression) par_24);
      }
      else 
        postc = null;
      {

        Vector functionDef = null;
        HolFunctionDefinition e_seq_28 = null;
        String arg_29 = null;
        arg_29 = fun.getIdentifier();
        HolLambdaFunction arg_30 = null;
        HolLetExpression arg_33 = null;
        HolExpression par_36 = null;
        IOmlFunctionBody par_37 = null;
        par_37 = (IOmlFunctionBody) fun.getBody();
        par_36 = (HolExpression) translateFunctionBody((IOmlFunctionBody) par_37);
        arg_33 = (HolLetExpression) generateLetExpression(paramPats, paramIdOs, (HolExpression) par_36);
        arg_30 = new HolLambdaFunction(paramIdHs, type, arg_33);
        e_seq_28 = new HolFunctionDefinition(arg_29, arg_30);
        functionDef = new Vector();
        functionDef.add(e_seq_28);
        Vector precFunction = null;
        if (new Boolean(UTIL.equals(prec, null)).booleanValue()) 
          precFunction = new Vector();
        else {

          HolFunctionDefinition e_seq_43 = null;
          String arg_44 = null;
          String var2_47 = null;
          var2_47 = fun.getIdentifier();
          arg_44 = new String("pre_").concat(var2_47);
          HolLambdaFunction arg_45 = null;
          HolFunctionType arg_49 = null;
          HolProductType arg_51 = null;
          arg_51 = (HolProductType) type.getDomain();
          arg_49 = new HolFunctionType(arg_51, new HolNativeTypeIdentifier(new String("bool")));
          arg_45 = new HolLambdaFunction(paramIdHs, arg_49, (HolLetExpression) generateLetExpression(paramPats, paramIdOs, (HolExpression) prec));
          e_seq_43 = new HolFunctionDefinition(arg_44, arg_45);
          precFunction = new Vector();
          precFunction.add(e_seq_43);
        }
        Vector postFunction = null;
        if (new Boolean(UTIL.equals(postc, null)).booleanValue()) 
          postFunction = new Vector();
        else {

          HolFunctionDefinition e_seq_62 = null;
          String arg_63 = null;
          Vector unArg_65 = null;
          unArg_65 = new Vector();
          unArg_65.add(new String("post_"));
          String e_seq_67 = null;
          e_seq_67 = fun.getIdentifier();
          unArg_65.add(e_seq_67);
          String rdcseq_68 = new String();
          for (Iterator enm_71 = unArg_65.iterator(); enm_71.hasNext(); ) {

            String e_69 = UTIL.ConvertToString(enm_71.next());
            rdcseq_68 = rdcseq_68.concat(e_69);
          }
          arg_63 = rdcseq_68;
          HolLambdaFunction arg_64 = null;
          Vector arg_72 = null;
          Vector unArg_75 = null;
          unArg_75 = new Vector();
          unArg_75.add(paramIdHs);
          Vector e_seq_77 = null;
          e_seq_77 = new Vector();
          e_seq_77.add(new HolIdentifier(new String("RESULT")));
          unArg_75.add(e_seq_77);
          Vector rdcseq_80 = new Vector();
          for (Iterator enm_83 = unArg_75.iterator(); enm_83.hasNext(); ) {

            Vector e_81 = (Vector) UTIL.ConvertToList(enm_83.next());
            rdcseq_80.addAll(e_81);
          }
          arg_72 = rdcseq_80;
          HolFunctionType arg_73 = null;
          HolProductType arg_84 = null;
          Vector arg_86 = null;
          Vector var1_87 = null;
          HolProductType obj_88 = null;
          obj_88 = (HolProductType) type.getDomain();
          var1_87 = obj_88.getTypes();
          Vector var2_89 = null;
          HolType e_seq_90 = null;
          e_seq_90 = (HolType) type.getRange();
          var2_89 = new Vector();
          var2_89.add(e_seq_90);
          arg_86 = (Vector) var1_87.clone();
          arg_86.addAll(var2_89);
          arg_84 = new HolProductType(arg_86);
          arg_73 = new HolFunctionType(arg_84, new HolNativeTypeIdentifier(new String("bool")));
          arg_64 = new HolLambdaFunction(arg_72, arg_73, (HolLetExpression) generateLetExpression(paramPats, paramIdOs, (HolExpression) postc));
          e_seq_62 = new HolFunctionDefinition(arg_63, arg_64);
          postFunction = new Vector();
          postFunction.add(e_seq_62);
        }
        Vector var1_95 = null;
        var1_95 = (Vector) functionDef.clone();
        var1_95.addAll(precFunction);
        varRes_2 = (Vector) var1_95.clone();
        varRes_2.addAll(postFunction);
      }
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateExplicitFunction#1|IOmlExplicitFunction


// ***** VDMTOOLS START Name=translateParameterList#3|Vector|Integer|String KEEP=NO
  private Tuple translateParameterList (final Vector parameters, final Integer nr, final String name) throws CGException {

    Tuple varRes_4 = null;
    if (new Boolean(new Integer(parameters.size()).intValue() == new Integer(0).intValue()).booleanValue()) {

      varRes_4 = new Tuple(3);
      varRes_4.SetField(1, new Vector());
      varRes_4.SetField(2, new Vector());
      varRes_4.SetField(3, new Vector());
    }
    else {

      boolean succ_10;
      OmlName idO = null;
      String arg_13 = null;
      String var1_14 = null;
      var1_14 = name.concat(new String("_parameter_"));
      String var2_17 = null;
      Util obj_18 = null;
      obj_18 = (Util) new Util();
      var2_17 = UTIL.ConvertToString(obj_18.itoa(nr));
      arg_13 = var1_14.concat(var2_17);
      idO = new OmlName(new String(""), arg_13);
      HolIdentifier idH = null;
      String arg_21 = null;
      String var1_22 = null;
      var1_22 = name.concat(new String("_parameter_"));
      String var2_25 = null;
      Util obj_26 = null;
      obj_26 = (Util) new Util();
      var2_25 = UTIL.ConvertToString(obj_26.itoa(nr));
      arg_21 = var1_22.concat(var2_25);
      idH = new HolIdentifier(arg_21);
      IOmlPattern pattern = (IOmlPattern) (IOmlPattern) parameters.get(0);
      Tuple tmpVal_30 = new Tuple(3);
      tmpVal_30 = translateParameterList(new Vector(parameters.subList(1, parameters.size())), new Integer(nr.intValue() + new Integer(1).intValue()), name);
      Vector recIdHs = null;
      Vector recIdOs = null;
      Vector recPats = null;
      succ_10 = true;
      {

        Vector e_l_37 = new Vector();
        for (int i_38 = 1; i_38 <= tmpVal_30.Length(); i_38++) 
          e_l_37.add(tmpVal_30.GetField(i_38));
        if (succ_10 = (3 == e_l_37.size())) {

          recIdHs = (Vector) UTIL.ConvertToList(e_l_37.get(0));
          recIdOs = (Vector) UTIL.ConvertToList(e_l_37.get(2 - 1));
          recPats = (Vector) UTIL.ConvertToList(e_l_37.get(3 - 1));
        }
      }
      if (!succ_10) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      varRes_4 = new Tuple(3);
      Vector tmpVar_39 = null;
      Vector var1_40 = null;
      var1_40 = new Vector();
      var1_40.add(idH);
      tmpVar_39 = (Vector) var1_40.clone();
      tmpVar_39.addAll(recIdHs);
      varRes_4.SetField(1, tmpVar_39);
      Vector tmpVar_43 = null;
      Vector var1_44 = null;
      var1_44 = new Vector();
      var1_44.add(idO);
      tmpVar_43 = (Vector) var1_44.clone();
      tmpVar_43.addAll(recIdOs);
      varRes_4.SetField(2, tmpVar_43);
      Vector tmpVar_47 = null;
      Vector var1_48 = null;
      var1_48 = new Vector();
      var1_48.add(pattern);
      tmpVar_47 = (Vector) var1_48.clone();
      tmpVar_47.addAll(recPats);
      varRes_4.SetField(3, tmpVar_47);
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=translateParameterList#3|Vector|Integer|String


// ***** VDMTOOLS START Name=serializeParameterList#1|Vector KEEP=NO
  private Vector serializeParameterList (final Vector params) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(params, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector var1_7 = null;
      IOmlParameter obj_8 = null;
      obj_8 = (IOmlParameter) (IOmlParameter) params.get(0);
      var1_7 = obj_8.getPatternList();
      varRes_2 = (Vector) var1_7.clone();
      varRes_2.addAll(serializeParameterList(new Vector(params.subList(1, params.size()))));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=serializeParameterList#1|Vector


// ***** VDMTOOLS START Name=translateFunctionBody#1|IOmlFunctionBody KEEP=NO
  private HolExpression translateFunctionBody (final IOmlFunctionBody body) throws CGException {

    Object varRes_2 = null;
    Boolean cond_4 = null;
    cond_4 = body.getNotYetSpecified();
    if (cond_4.booleanValue()) 
      varRes_2 = new HolIdentifierError(new String("Function body is not yet specified"));
    else {

      Boolean cond_6 = null;
      cond_6 = body.getSubclassResponsibility();
      if (cond_6.booleanValue()) 
        varRes_2 = new HolIdentifierError(new String("Subclasses are not yet supported"));
      else {

        IOmlExpression par_5 = null;
        par_5 = (IOmlExpression) body.getFunctionBody();
        varRes_2 = translateExpression((IOmlExpression) par_5);
      }
    }
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateFunctionBody#1|IOmlFunctionBody


// ***** VDMTOOLS START Name=translateImplicitFunction#1|IOmlImplicitFunction KEEP=NO
  private Vector translateImplicitFunction (final IOmlImplicitFunction fun) throws CGException {

    Vector varRes_2 = null;
    {

      boolean succ_3;
      String name = null;
      name = fun.getIdentifier();
      Tuple tmpVal_5 = new Tuple(2);
      Vector par_6 = null;
      par_6 = fun.getPatternTypePairList();
      tmpVal_5 = translatePatternTypePairList(par_6, null);
      Vector parameterList = null;
      IOmlType functionDomainType = null;
      succ_3 = true;
      {

        Vector e_l_8 = new Vector();
        for (int i_9 = 1; i_9 <= tmpVal_5.Length(); i_9++) 
          e_l_8.add(tmpVal_5.GetField(i_9));
        if (succ_3 = (2 == e_l_8.size())) {

          functionDomainType = (IOmlType) e_l_8.get(0);
          parameterList = (Vector) e_l_8.get(2 - 1);
        }
      }
      if (!succ_3) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      String resultIdentifier = null;
      IOmlIdentifierTypePair obj_11 = null;
      Vector tmp_l_12 = null;
      tmp_l_12 = fun.getIdentifierTypePairList();
      if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= tmp_l_12.size())) 
        obj_11 = (IOmlIdentifierTypePair) tmp_l_12.get(new Integer(1).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      resultIdentifier = obj_11.getIdentifier();
      IOmlType resultType = null;
      IOmlIdentifierTypePair obj_15 = null;
      Vector tmp_l_16 = null;
      tmp_l_16 = fun.getIdentifierTypePairList();
      if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= tmp_l_16.size())) 
        obj_15 = (IOmlIdentifierTypePair) tmp_l_16.get(new Integer(1).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      resultType = (IOmlType) obj_15.getType();
      IOmlExpression postc = null;
      IOmlFunctionTrailer obj_19 = null;
      obj_19 = (IOmlFunctionTrailer) fun.getTrailer();
      postc = (IOmlExpression) obj_19.getPostExpression();
      IOmlExpression prec = null;
      IOmlFunctionTrailer obj_21 = null;
      obj_21 = (IOmlFunctionTrailer) fun.getTrailer();
      prec = (IOmlExpression) obj_21.getPreExpression();
      OmlExplicitFunction par_22 = null;
      OmlFunctionBody arg_27 = null;
      OmlLetBeExpression arg_31 = null;
      OmlTypeBind arg_34 = null;
      Vector arg_37 = null;
      arg_37 = new Vector();
      arg_37.add(new OmlPatternIdentifier(resultIdentifier));
      arg_34 = new OmlTypeBind(arg_37, resultType);
      arg_31 = new OmlLetBeExpression(arg_34, postc, new OmlName(new String(""), resultIdentifier));
      arg_27 = new OmlFunctionBody(arg_31, new Boolean(false), new Boolean(false));
      OmlFunctionTrailer arg_28 = null;
      OmlLetExpression arg_44 = null;
      Vector arg_45 = null;
      arg_45 = new Vector();
      arg_45.add(new OmlValueShape(new OmlPatternIdentifier(resultIdentifier), null, new OmlName(new String(""), new String("RESULT"))));
      arg_44 = new OmlLetExpression(arg_45, postc);
      arg_28 = new OmlFunctionTrailer(prec, arg_44);
      par_22 = new OmlExplicitFunction(name, new Vector(), new OmlPartialFunctionType(functionDomainType, resultType), parameterList, arg_27, arg_28);
      varRes_2 = translateExplicitFunction((IOmlExplicitFunction) par_22);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateImplicitFunction#1|IOmlImplicitFunction


// ***** VDMTOOLS START Name=translatePatternTypePairList#2|Vector|IOmlType KEEP=NO
  private Tuple translatePatternTypePairList (final Vector ptpl, final IOmlType advancingType) throws CGException {

    Tuple varRes_3 = new Tuple(2);
    {

      Vector parametersOfThisType = null;
      Vector par_6 = null;
      IOmlPatternTypePair obj_7 = null;
      obj_7 = (IOmlPatternTypePair) (IOmlPatternTypePair) ptpl.get(0);
      par_6 = obj_7.getPatternList();
      parametersOfThisType = translatePatternListToParameters(par_6);
      {

        IOmlType tmpVal_10 = null;
        IOmlType par_11 = null;
        IOmlPatternTypePair obj_12 = null;
        obj_12 = (IOmlPatternTypePair) (IOmlPatternTypePair) ptpl.get(0);
        par_11 = (IOmlType) obj_12.getType();
        tmpVal_10 = (IOmlType) generateTimesType((IOmlType) par_11, new Integer(parametersOfThisType.size()), (IOmlType) advancingType);
        IOmlType newType = null;
        newType = (IOmlType) tmpVal_10;
        if (new Boolean(new Integer(ptpl.size()).intValue() == new Integer(1).intValue()).booleanValue()) {

          varRes_3 = new Tuple(2);
          varRes_3.SetField(1, newType);
          varRes_3.SetField(2, parametersOfThisType);
        }
        else {

          boolean succ_22;
          Tuple tmpVal_23 = new Tuple(2);
          tmpVal_23 = translatePatternTypePairList(new Vector(ptpl.subList(1, ptpl.size())), (IOmlType) newType);
          IOmlType tailType = null;
          Vector tailParameters = null;
          succ_22 = true;
          {

            Vector e_l_27 = new Vector();
            for (int i_28 = 1; i_28 <= tmpVal_23.Length(); i_28++) 
              e_l_27.add(tmpVal_23.GetField(i_28));
            if (succ_22 = (2 == e_l_27.size())) {

              tailType = (IOmlType) e_l_27.get(0);
              tailParameters = (Vector) e_l_27.get(2 - 1);
            }
          }
          if (!succ_22) 
            UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
          varRes_3 = new Tuple(2);
          varRes_3.SetField(1, tailType);
          Vector tmpVar_30 = null;
          tmpVar_30 = (Vector) parametersOfThisType.clone();
          tmpVar_30.addAll(tailParameters);
          varRes_3.SetField(2, tmpVar_30);
        }
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=translatePatternTypePairList#2|Vector|IOmlType


// ***** VDMTOOLS START Name=translatePatternListToParameters#1|Vector KEEP=NO
  private Vector translatePatternListToParameters (final Vector pats) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(pats.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector var1_8 = null;
      OmlParameter e_seq_9 = null;
      Vector arg_10 = null;
      arg_10 = new Vector();
      arg_10.add((IOmlPattern) pats.get(0));
      e_seq_9 = new OmlParameter(arg_10);
      var1_8 = new Vector();
      var1_8.add(e_seq_9);
      varRes_2 = (Vector) var1_8.clone();
      varRes_2.addAll(translatePatternListToParameters(new Vector(pats.subList(1, pats.size()))));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translatePatternListToParameters#1|Vector


// ***** VDMTOOLS START Name=generateTimesType#3|IOmlType|Integer|IOmlType KEEP=NO
  private IOmlType generateTimesType (final IOmlType typeToAdd, final Integer times, final IOmlType advancingType) throws CGException {

    Object varRes_4 = null;
    {

      Object bTypeToAdd = null;
      if (new Boolean(typeToAdd instanceof IOmlProductType).booleanValue()) 
        bTypeToAdd = new OmlBracketedType(typeToAdd);
      else 
        bTypeToAdd = typeToAdd;
      if (new Boolean(times.intValue() == new Integer(1).intValue()).booleanValue()) 
        if (new Boolean(!UTIL.equals(advancingType, null)).booleanValue()) 
          varRes_4 = new OmlProductType(advancingType, (IOmlType)bTypeToAdd);
        else 
          varRes_4 = bTypeToAdd;
      else 
        varRes_4 = new OmlProductType((IOmlType) generateTimesType((IOmlType) bTypeToAdd, new Integer(times.intValue() - new Integer(1).intValue()), (IOmlType) advancingType), (IOmlType) bTypeToAdd);    
	}
    return (IOmlType) varRes_4;
  }
// ***** VDMTOOLS END Name=generateTimesType#3|IOmlType|Integer|IOmlType


// ***** VDMTOOLS START Name=translatePatternListToPredicate#2|Vector|HolExpression KEEP=NO
  private HolExpression translatePatternListToPredicate (final Vector patterns, final HolExpression expr) throws CGException {

    Object varRes_3 = null;
    if (new Boolean(UTIL.equals(patterns, new Vector())).booleanValue()) 
      varRes_3 = new HolNativeIdentifier(new String("F"));
    else {

      HolExpression firstExpression = (HolExpression) (HolExpression) translatePatternToPredicate((IOmlPattern) (IOmlPattern) patterns.get(0), (HolExpression) expr);
      HolExpression recTranslation = (HolExpression) (HolExpression) translatePatternListToPredicate(new Vector(patterns.subList(1, patterns.size())), (HolExpression) expr);
      if (new Boolean(new Integer(patterns.size()).intValue() == new Integer(1).intValue()).booleanValue()) 
        varRes_3 = firstExpression;
      else {

        Vector arg_23 = null;
        arg_23 = new Vector();
        arg_23.add(firstExpression);
        arg_23.add(recTranslation);
        varRes_3 = new HolApplication(new HolNativeIdentifier(new String("$\\/")), arg_23);
      }
    }
    return (HolExpression) varRes_3;
  }
// ***** VDMTOOLS END Name=translatePatternListToPredicate#2|Vector|HolExpression


// ***** VDMTOOLS START Name=translatePatternToPredicate#2|IOmlPattern|HolExpression KEEP=NO
  private HolExpression translatePatternToPredicate (final IOmlPattern pattern, final HolExpression expr) throws CGException {
    return (HolExpression) (HolExpression) patternTranslationToConjunction(translatePattern((IOmlPattern) pattern, (HolExpression) expr));
  }
// ***** VDMTOOLS END Name=translatePatternToPredicate#2|IOmlPattern|HolExpression


// ***** VDMTOOLS START Name=patternTranslationToConjunction#1|HolPatternTranslation KEEP=NO
  private HolExpression patternTranslationToConjunction (final HolPatternTranslation trans) throws CGException {

    Object varRes_2 = null;
    Boolean cond_4 = null;
    Vector var1_5 = null;
    var1_5 = (trans).vars;
    cond_4 = new Boolean(UTIL.equals(var1_5, new Vector()));
    if (cond_4.booleanValue()) 
      varRes_2 = new HolNativeIdentifier(new String("T"));
    else {

      HolApplication firstExpression = null;
      Vector arg_11 = null;
      HolIdentifier e_seq_13 = null;
      Vector unArg_14 = null;
      unArg_14 = (trans).vars;
      e_seq_13 = (HolIdentifier) unArg_14.get(0);
      arg_11 = new Vector();
      arg_11.add(e_seq_13);
      HolExpression e_seq_16 = null;
      Vector unArg_17 = null;
      unArg_17 = (trans).exprs;
      e_seq_16 = (HolExpression) unArg_17.get(0);
      arg_11.add(e_seq_16);
      firstExpression = new HolApplication(new HolNativeIdentifier(new String("$=")), arg_11);
      HolExpression recTranslation = null;
      HolPatternTranslation par_20 = null;
      Vector tmpVar_21 = null;
      Vector unArg_22 = null;
      unArg_22 = (trans).vars;
      tmpVar_21 = new Vector(unArg_22.subList(1, unArg_22.size()));
      Vector tmpVar_24 = null;
      Vector unArg_25 = null;
      unArg_25 = (trans).exprs;
      tmpVar_24 = new Vector(unArg_25.subList(1, unArg_25.size()));
      par_20 = new HolPatternTranslation(tmpVar_21, tmpVar_24);
      recTranslation = (HolExpression) patternTranslationToConjunction(par_20);
      Boolean cond_28 = null;
      Integer var1_29 = null;
      Vector unArg_30 = null;
      unArg_30 = (trans).vars;
      var1_29 = new Integer(unArg_30.size());
      cond_28 = new Boolean(var1_29.intValue() == new Integer(1).intValue());
      if (cond_28.booleanValue()) 
        varRes_2 = firstExpression;
      else {

        Vector arg_34 = null;
        arg_34 = new Vector();
        arg_34.add(firstExpression);
        arg_34.add(recTranslation);
        varRes_2 = new HolApplication(new HolNativeIdentifier(new String("$/\\")), arg_34);
      }
    }
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=patternTranslationToConjunction#1|HolPatternTranslation


// ***** VDMTOOLS START Name=translatePattern#2|IOmlPattern|HolExpression KEEP=NO
  private HolPatternTranslation translatePattern (final IOmlPattern pattern, final HolExpression expr) throws CGException {

    HolPatternTranslation varRes_3 = null;
    if (new Boolean(pattern instanceof IOmlPatternIdentifier).booleanValue()) 
      varRes_3 = translatePatternIdentifier((IOmlPatternIdentifier) pattern, (HolExpression) expr);
    else 
      if (new Boolean(pattern instanceof OmlRecordPattern).booleanValue()) 
        varRes_3 = translateRecordPattern((IOmlRecordPattern) pattern, (HolExpression) expr);
      else 
        if (new Boolean(pattern instanceof OmlDontCarePattern).booleanValue()) 
          varRes_3 = new HolPatternTranslation(new Vector(), new Vector());
        else {

          HolIdentifierError ierror = null;
          String arg_9 = null;
          Vector unArg_10 = null;
          unArg_10 = new Vector();
          unArg_10.add(new String("Pattern type not supported: "));
          String e_seq_12 = null;
          e_seq_12 = pattern.identity();
          unArg_10.add(e_seq_12);
          String rdcseq_13 = new String();
          for (Iterator enm_16 = unArg_10.iterator(); enm_16.hasNext(); ) {

            String e_14 = UTIL.ConvertToString(enm_16.next());
            rdcseq_13 = rdcseq_13.concat(e_14);
          }
          arg_9 = rdcseq_13;
          ierror = new HolIdentifierError(arg_9);
          Vector tmpVar_17 = null;
          tmpVar_17 = new Vector();
          tmpVar_17.add(ierror);
          Vector tmpVar_19 = null;
          tmpVar_19 = new Vector();
          tmpVar_19.add(ierror);
          varRes_3 = new HolPatternTranslation(tmpVar_17, tmpVar_19);
        }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=translatePattern#2|IOmlPattern|HolExpression


// ***** VDMTOOLS START Name=translatePatternIdentifier#2|IOmlPatternIdentifier|HolExpression KEEP=NO
  private HolPatternTranslation translatePatternIdentifier (final IOmlPatternIdentifier pattern, final HolExpression expr) throws CGException {

    HolPatternTranslation varRes_3 = null;
    Vector tmpVar_4 = null;
    HolIdentifier e_seq_5 = null;
    String arg_6 = null;
    arg_6 = pattern.getIdentifier();
    e_seq_5 = new HolIdentifier(arg_6);
    tmpVar_4 = new Vector();
    tmpVar_4.add(e_seq_5);
    Vector tmpVar_7 = null;
    tmpVar_7 = new Vector();
    tmpVar_7.add(expr);
    varRes_3 = new HolPatternTranslation(tmpVar_4, tmpVar_7);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=translatePatternIdentifier#2|IOmlPatternIdentifier|HolExpression


// ***** VDMTOOLS START Name=translateRecordPattern#2|IOmlRecordPattern|HolExpression KEEP=NO
  private HolPatternTranslation translateRecordPattern (final IOmlRecordPattern pattern, final HolExpression patternMatchExpression) throws CGException {

    HolPatternTranslation varRes_3 = null;
    Vector par_4 = null;
    par_4 = pattern.getPatternList();
    String par_7 = null;
    IOmlName obj_8 = null;
    obj_8 = (IOmlName) pattern.getName();
    par_7 = obj_8.getIdentifier();
    varRes_3 = translateRecordPatternList(par_4, (HolExpression) patternMatchExpression, new Integer(1), par_7);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=translateRecordPattern#2|IOmlRecordPattern|HolExpression


// ***** VDMTOOLS START Name=translateRecordPatternList#4|Vector|HolExpression|Integer|String KEEP=NO
  private HolPatternTranslation translateRecordPatternList (final Vector patterns, final HolExpression recordExpression, final Integer fieldNr, final String tag) throws CGException {

    HolPatternTranslation varRes_5 = null;
    if (new Boolean(UTIL.equals(patterns, new Vector())).booleanValue()) 
      varRes_5 = new HolPatternTranslation(new Vector(), new Vector());
    else {

      HolPatternTranslation recTrans = null;
      HolApplication par_14 = null;
      HolReferedFunction arg_15 = null;
      String arg_17 = null;
      String var1_18 = null;
      var1_18 = tag.concat(new String("_field_"));
      String var2_21 = null;
      Util obj_22 = null;
      obj_22 = (Util) new Util();
      var2_21 = UTIL.ConvertToString(obj_22.itoa(fieldNr));
      arg_17 = var1_18.concat(var2_21);
      arg_15 = new HolReferedFunction(arg_17);
      Vector arg_16 = null;
      arg_16 = new Vector();
      arg_16.add(recordExpression);
      par_14 = new HolApplication(arg_15, arg_16);
      recTrans = translatePattern((IOmlPattern) (IOmlPattern) patterns.get(0), (HolExpression) par_14);
      HolPatternTranslation tlTrans = translateRecordPatternList(new Vector(patterns.subList(1, patterns.size())), (HolExpression) recordExpression, new Integer(fieldNr.intValue() + new Integer(1).intValue()), tag);
      Vector tmpVar_33 = null;
      Vector var1_34 = null;
      var1_34 = (recTrans).vars;
      Vector var2_36 = null;
      var2_36 = (tlTrans).vars;
      tmpVar_33 = (Vector) var1_34.clone();
      tmpVar_33.addAll(var2_36);
      Vector tmpVar_38 = null;
      Vector var1_39 = null;
      var1_39 = (recTrans).exprs;
      Vector var2_41 = null;
      var2_41 = (tlTrans).exprs;
      tmpVar_38 = (Vector) var1_39.clone();
      tmpVar_38.addAll(var2_41);
      varRes_5 = new HolPatternTranslation(tmpVar_33, tmpVar_38);
    }
    return varRes_5;
  }
// ***** VDMTOOLS END Name=translateRecordPatternList#4|Vector|HolExpression|Integer|String


// ***** VDMTOOLS START Name=getIdentifiers#1|IOmlPattern KEEP=NO
  private Vector getIdentifiers (final IOmlPattern pattern) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(pattern instanceof IOmlPatternIdentifier).booleanValue()) 
      varRes_2 = getIdentifiersI((IOmlPatternIdentifier) pattern);
    else 
      if (new Boolean(pattern instanceof OmlRecordPattern).booleanValue()) 
        varRes_2 = getIdentifiersR((OmlRecordPattern) pattern);
      else 
        if (new Boolean(pattern instanceof OmlDontCarePattern).booleanValue()) 
          varRes_2 = new Vector();
        else {

          HolIdentifierError e_seq_6 = null;
          String arg_7 = null;
          Vector unArg_8 = null;
          unArg_8 = new Vector();
          unArg_8.add(new String("Pattern type not supported: "));
          String e_seq_10 = null;
          e_seq_10 = pattern.identity();
          unArg_8.add(e_seq_10);
          String rdcseq_11 = new String();
          for (Iterator enm_14 = unArg_8.iterator(); enm_14.hasNext(); ) {

            String e_12 = UTIL.ConvertToString(enm_14.next());
            rdcseq_11 = rdcseq_11.concat(e_12);
          }
          arg_7 = rdcseq_11;
          e_seq_6 = new HolIdentifierError(arg_7);
          varRes_2 = new Vector();
          varRes_2.add(e_seq_6);
        }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getIdentifiers#1|IOmlPattern


// ***** VDMTOOLS START Name=getIdentifiers#1|Vector KEEP=NO
  private Vector getIdentifiers (final Vector patterns) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(patterns, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector var1_7 = null;
      var1_7 = (Vector) UTIL.ConvertToList(getIdentifiers((IOmlPattern) patterns.get(0)));
      Vector var2_14 = null;
      var2_14 = (Vector) UTIL.ConvertToList(getIdentifiers(new Vector(patterns.subList(1, patterns.size()))));
      varRes_2 = (Vector) var1_7.clone();
      varRes_2.addAll(var2_14);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getIdentifiers#1|Vector


// ***** VDMTOOLS START Name=getIdentifiersR#1|OmlRecordPattern KEEP=NO
  private Vector getIdentifiersR (final OmlRecordPattern pattern) throws CGException {

    Vector varRes_2 = null;
    Vector par_5 = null;
    par_5 = pattern.getPatternList();
    {

      Vector par_6 = null;
      par_6 = pattern.getPatternList();
      varRes_2 = (Vector) UTIL.ConvertToList(getIdentifiers(par_6));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getIdentifiersR#1|OmlRecordPattern


// ***** VDMTOOLS START Name=getIdentifiersI#1|IOmlPatternIdentifier KEEP=NO
  private Vector getIdentifiersI (final IOmlPatternIdentifier pattern) throws CGException {

    Vector varRes_2 = null;
    HolIdentifier e_seq_3 = null;
    String arg_4 = null;
    arg_4 = pattern.getIdentifier();
    e_seq_3 = new HolIdentifier(arg_4);
    varRes_2 = new Vector();
    varRes_2.add(e_seq_3);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getIdentifiersI#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=translateExpressionList#1|Vector KEEP=NO
  private Vector translateExpressionList (final Vector expList) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(new Integer(expList.size()).intValue() == new Integer(0).intValue()).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_8 = null;
      Vector e_seq_9 = null;
      e_seq_9 = new Vector();
      e_seq_9.add((HolExpression) translateExpression((IOmlExpression) (IOmlExpression) expList.get(0)));
      unArg_8 = new Vector();
      unArg_8.add(e_seq_9);
      unArg_8.add(translateExpressionList(new Vector(expList.subList(1, expList.size()))));
      Vector rdcseq_16 = new Vector();
      for (Iterator enm_19 = unArg_8.iterator(); enm_19.hasNext(); ) {

        Vector e_17 = (Vector) UTIL.ConvertToList(enm_19.next());
        rdcseq_16.addAll(e_17);
      }
      varRes_2 = rdcseq_16;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateExpressionList#1|Vector


// ***** VDMTOOLS START Name=translateExpression#1|IOmlExpression KEEP=NO
  public HolExpression translateExpression (final IOmlExpression node) throws CGException {

    Object varRes_2 = null;
    if (new Boolean(node instanceof IOmlUnaryExpression).booleanValue()) 
      varRes_2 = translateUnaryExpression((IOmlUnaryExpression) node);
    else 
      if (new Boolean(node instanceof IOmlBinaryExpression).booleanValue()) 
        varRes_2 = translateBinaryExpression((IOmlBinaryExpression) node);
      else 
        if (new Boolean(node instanceof IOmlBracketedExpression).booleanValue()) 
          varRes_2 = translateBracketedExpression((IOmlBracketedExpression) node);
        else 
          if (new Boolean(node instanceof IOmlIfExpression).booleanValue()) 
            varRes_2 = translateIfExpression((IOmlIfExpression) node);
          else 
            if (new Boolean(node instanceof IOmlCasesExpression).booleanValue()) 
              varRes_2 = translateCasesExpression((IOmlCasesExpression) node);
            else 
              if (new Boolean(node instanceof IOmlSymbolicLiteralExpression).booleanValue()) 
                varRes_2 = translateSymbolicLiteralExpression((IOmlSymbolicLiteralExpression) node);
              else 
                if (new Boolean(node instanceof IOmlName).booleanValue()) 
                  varRes_2 = translateName((IOmlName) node);
                else 
                  if (new Boolean(node instanceof IOmlSetComprehension).booleanValue()) 
                    varRes_2 = translateSetComprehension((IOmlSetComprehension) node);
                  else 
                    if (new Boolean(node instanceof IOmlMapComprehension).booleanValue()) 
                      varRes_2 = translateMapComprehension((IOmlMapComprehension) node);
                    else 
                      if (new Boolean(node instanceof IOmlApplyExpression).booleanValue()) 
                        varRes_2 = translateApplyExpression((IOmlApplyExpression) node);
                      else 
                        if (new Boolean(node instanceof IOmlSetEnumeration).booleanValue()) 
                          varRes_2 = translateSetEnumeration((IOmlSetEnumeration) node);
                        else 
                          if (new Boolean(node instanceof IOmlSequenceEnumeration).booleanValue()) 
                            varRes_2 = translateSequenceEnumeration((IOmlSequenceEnumeration) node);
                          else 
                            if (new Boolean(node instanceof IOmlExistsExpression).booleanValue()) 
                              varRes_2 = translateExists((IOmlExistsExpression) node);
                            else 
                              if (new Boolean(node instanceof IOmlForAllExpression).booleanValue()) 
                                varRes_2 = translateForAll((IOmlForAllExpression) node);
                              else 
                                if (new Boolean(node instanceof IOmlFieldSelect).booleanValue()) 
                                  varRes_2 = translateFieldSelect((IOmlFieldSelect) node);
                                else 
                                  if (new Boolean(node instanceof IOmlLetExpression).booleanValue()) 
                                    varRes_2 = translateLetExpression((IOmlLetExpression) node);
                                  else 
                                    if (new Boolean(node instanceof IOmlLetBeExpression).booleanValue()) 
                                      varRes_2 = translateLetBeExpression((IOmlLetBeExpression) node);
                                    else 
                                      if (new Boolean(node instanceof IOmlMapEnumeration).booleanValue()) 
                                        varRes_2 = translateMapEnumeration((IOmlMapEnumeration) node);
                                      else 
                                        if (new Boolean(node instanceof IOmlTupleConstructor).booleanValue()) 
                                          varRes_2 = translateTupleConstructor((IOmlTupleConstructor) node);
                                        else 
                                          if (new Boolean(node instanceof IOmlMuExpression).booleanValue()) 
                                            varRes_2 = translateMuExpression((IOmlMuExpression) node);
                                          else 
                                            if (new Boolean(node instanceof IOmlRecordConstructor).booleanValue()) 
                                              varRes_2 = translateRecordConstructor((IOmlRecordConstructor) node);
                                            else 
                                              if (new Boolean(node instanceof IOmlTokenExpression).booleanValue()) 
                                                varRes_2 = translateTokenExpression((IOmlTokenExpression) node);
                                              else {

                                                String arg_6 = null;
                                                Vector unArg_7 = null;
                                                unArg_7 = new Vector();
                                                unArg_7.add(new String("Unknown expression: "));
                                                String e_seq_9 = null;
                                                e_seq_9 = node.identity();
                                                unArg_7.add(e_seq_9);
                                                String rdcseq_10 = new String();
                                                for (Iterator enm_13 = unArg_7.iterator(); enm_13.hasNext(); ) {

                                                  String e_11 = UTIL.ConvertToString(enm_13.next());
                                                  rdcseq_10 = rdcseq_10.concat(e_11);
                                                }
                                                arg_6 = rdcseq_10;
                                                varRes_2 = new HolIdentifierError(arg_6);
                                              }
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=translateUnaryExpression#1|IOmlUnaryExpression KEEP=NO
  private HolApplication translateUnaryExpression (final IOmlUnaryExpression unExpr) throws CGException {

    HolApplication varRes_2 = null;
    HolIdentifier arg_3 = null;
    IOmlUnaryOperator par_5 = null;
    par_5 = (IOmlUnaryOperator) unExpr.getOperator();
    arg_3 = (HolIdentifier) translateUnaryOperator((IOmlUnaryOperator) par_5);
    Vector arg_4 = null;
    HolExpression e_seq_6 = null;
    IOmlExpression par_7 = null;
    par_7 = (IOmlExpression) unExpr.getExpression();
    e_seq_6 = (HolExpression) translateExpression((IOmlExpression) par_7);
    arg_4 = new Vector();
    arg_4.add(e_seq_6);
    varRes_2 = new HolApplication(arg_3, arg_4);
    return (HolApplication) varRes_2;
  }
// ***** VDMTOOLS END Name=translateUnaryExpression#1|IOmlUnaryExpression


// ***** VDMTOOLS START Name=translateBinaryExpression#1|IOmlBinaryExpression KEEP=NO
  private HolApplication translateBinaryExpression (final IOmlBinaryExpression binExpr) throws CGException {

    HolApplication varRes_2 = null;
    HolIdentifier arg_3 = null;
    IOmlBinaryOperator par_5 = null;
    par_5 = (IOmlBinaryOperator) binExpr.getOperator();
    arg_3 = (HolIdentifier) translateBinaryOperator((IOmlBinaryOperator) par_5);
    Vector arg_4 = null;
    HolExpression e_seq_6 = null;
    IOmlExpression par_7 = null;
    par_7 = (IOmlExpression) binExpr.getLhsExpression();
    e_seq_6 = (HolExpression) translateExpression((IOmlExpression) par_7);
    arg_4 = new Vector();
    arg_4.add(e_seq_6);
    HolExpression e_seq_8 = null;
    IOmlExpression par_9 = null;
    par_9 = (IOmlExpression) binExpr.getRhsExpression();
    e_seq_8 = (HolExpression) translateExpression((IOmlExpression) par_9);
    arg_4.add(e_seq_8);
    varRes_2 = new HolApplication(arg_3, arg_4);
    return (HolApplication) varRes_2;
  }
// ***** VDMTOOLS END Name=translateBinaryExpression#1|IOmlBinaryExpression


// ***** VDMTOOLS START Name=translateBracketedExpression#1|IOmlBracketedExpression KEEP=NO
  private HolBrackets translateBracketedExpression (final IOmlBracketedExpression brExpr) throws CGException {

    HolBrackets varRes_2 = null;
    HolExpression arg_3 = null;
    IOmlExpression par_4 = null;
    par_4 = (IOmlExpression) brExpr.getExpression();
    arg_3 = (HolExpression) translateExpression((IOmlExpression) par_4);
    varRes_2 = new HolBrackets(arg_3);
    return (HolBrackets) varRes_2;
  }
// ***** VDMTOOLS END Name=translateBracketedExpression#1|IOmlBracketedExpression


// ***** VDMTOOLS START Name=translateIfExpression#1|IOmlIfExpression KEEP=NO
  private HolExpression translateIfExpression (final IOmlIfExpression ifExp) throws CGException {

    Object varRes_2 = null;
    Boolean cond_4 = null;
    Integer var1_5 = null;
    Vector unArg_6 = null;
    unArg_6 = ifExp.getElseifExpressionList();
    var1_5 = new Integer(unArg_6.size());
    cond_4 = new Boolean((var1_5.intValue()) > (new Integer(0).intValue()));
    if (cond_4.booleanValue()) 
      varRes_2 = new HolIdentifierError(new String("elseif clauses not supported"));
    else {

      HolExpression arg_8 = null;
      IOmlExpression par_11 = null;
      par_11 = (IOmlExpression) ifExp.getIfExpression();
      arg_8 = (HolExpression) translateExpression((IOmlExpression) par_11);
      HolExpression arg_9 = null;
      IOmlExpression par_12 = null;
      par_12 = (IOmlExpression) ifExp.getThenExpression();
      arg_9 = (HolExpression) translateExpression((IOmlExpression) par_12);
      HolExpression arg_10 = null;
      IOmlExpression par_13 = null;
      par_13 = (IOmlExpression) ifExp.getElseExpression();
      arg_10 = (HolExpression) translateExpression((IOmlExpression) par_13);
      varRes_2 = new HolConditional(arg_8, arg_9, arg_10);
    }
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateIfExpression#1|IOmlIfExpression


// ***** VDMTOOLS START Name=translateCasesExpression#1|IOmlCasesExpression KEEP=NO
  private HolConditional translateCasesExpression (final IOmlCasesExpression cExp) throws CGException {

    HolConditional varRes_2 = null;
    {

      HolExpression match = null;
      IOmlExpression par_5 = null;
      par_5 = (IOmlExpression) cExp.getMatchExpression();
      match = (HolExpression) translateExpression((IOmlExpression) par_5);
      HolExpression closure = null;
      Boolean cond_8 = null;
      cond_8 = cExp.hasOthersExpression();
      if (cond_8.booleanValue()) {

        IOmlExpression par_9 = null;
        par_9 = (IOmlExpression) cExp.getOthersExpression();
        closure = (HolExpression) translateExpression((IOmlExpression) par_9);
      }
      else 
        closure = null;
      Vector par_10 = null;
      par_10 = cExp.getAlternativeList();
      varRes_2 = (HolConditional) translateCasesAlternatives(par_10, (HolExpression) match, (HolExpression) closure);
    }
    return (HolConditional) varRes_2;
  }
// ***** VDMTOOLS END Name=translateCasesExpression#1|IOmlCasesExpression


// ***** VDMTOOLS START Name=translateCasesAlternatives#3|Vector|HolExpression|HolExpression KEEP=NO
  private HolConditional translateCasesAlternatives (final Vector alts, final HolExpression matchVal, final HolExpression closure) throws CGException {

    HolConditional varRes_4 = null;
    {

      HolExpression elseExpression = null;
      if (new Boolean(new Integer(alts.size()).intValue() == new Integer(1).intValue()).booleanValue()) 
        elseExpression = (HolExpression) closure;
      else {

        Boolean cond_16 = null;
        {
          if ((cond_16 = new Boolean(UTIL.equals(closure, null))).booleanValue()) 
            cond_16 = new Boolean(new Integer(alts.size()).intValue() == new Integer(2).intValue());
        }
        if (cond_16.booleanValue()) {

          IOmlExpression par_24 = null;
          IOmlCasesExpressionAlternative obj_25 = null;
          if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= alts.size())) 
            obj_25 = (IOmlCasesExpressionAlternative) alts.get(new Integer(2).intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          par_24 = (IOmlExpression) obj_25.getExpression();
          elseExpression = (HolExpression) translateExpression((IOmlExpression) par_24);
        }
        else 
          elseExpression = (HolExpression) (HolExpression) translateCasesAlternatives(new Vector(alts.subList(1, alts.size())), (HolExpression) matchVal, (HolExpression) closure);
      }
      Vector par_29 = null;
      IOmlCasesExpressionAlternative obj_30 = null;
      obj_30 = (IOmlCasesExpressionAlternative) (IOmlCasesExpressionAlternative) alts.get(0);
      par_29 = obj_30.getPatternList();
      HolExpression par_32 = null;
      IOmlExpression par_33 = null;
      IOmlCasesExpressionAlternative obj_34 = null;
      obj_34 = (IOmlCasesExpressionAlternative) (IOmlCasesExpressionAlternative) alts.get(0);
      par_33 = (IOmlExpression) obj_34.getExpression();
      par_32 = (HolExpression) translateExpression((IOmlExpression) par_33);
      varRes_4 = (HolConditional) makeCaseConditional((HolExpression) matchVal, par_29, (HolExpression) par_32, (HolExpression) elseExpression);
    }
    return (HolConditional) varRes_4;
  }
// ***** VDMTOOLS END Name=translateCasesAlternatives#3|Vector|HolExpression|HolExpression


// ***** VDMTOOLS START Name=makeCaseConditional#4|HolExpression|Vector|HolExpression|HolExpression KEEP=NO
  private HolConditional makeCaseConditional (final HolExpression matchExpression, final Vector matchPatterns, final HolExpression thenClause, final HolExpression elseClause) throws CGException {
    return (HolConditional) new HolConditional((HolExpression) translatePatternListToPredicate(matchPatterns, (HolExpression) matchExpression), thenClause, elseClause);
  }
// ***** VDMTOOLS END Name=makeCaseConditional#4|HolExpression|Vector|HolExpression|HolExpression


// ***** VDMTOOLS START Name=translateName#1|IOmlName KEEP=NO
  private HolIdentifier translateName (final IOmlName name) throws CGException {

    HolIdentifier varRes_2 = null;
    String arg_3 = null;
    arg_3 = name.getIdentifier();
    varRes_2 = new HolIdentifier(arg_3);
    return (HolIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateName#1|IOmlName


// ***** VDMTOOLS START Name=translateUnaryOperator#1|IOmlUnaryOperator KEEP=NO
  private HolIdentifier translateUnaryOperator (final IOmlUnaryOperator vdm_operator) throws CGException {

    Object varRes_2 = null;
    Boolean cond_4 = null;
    Integer var1_5 = null;
    var1_5 = vdm_operator.getValue();
    cond_4 = new Boolean(var1_5.intValue() == new Integer(0).intValue());
    if (cond_4.booleanValue()) 
      varRes_2 = new HolNativeIdentifier(new String("CARD"));
    else {

      Boolean cond_40 = null;
      Integer var1_41 = null;
      var1_41 = vdm_operator.getValue();
      cond_40 = new Boolean(var1_41.intValue() == new Integer(3).intValue());
      if (cond_40.booleanValue()) 
        varRes_2 = new HolNativeIdentifier(new String("TL"));
      else {

        Boolean cond_36 = null;
        Integer var1_37 = null;
        var1_37 = vdm_operator.getValue();
        cond_36 = new Boolean(var1_37.intValue() == new Integer(4).intValue());
        if (cond_36.booleanValue()) 
          varRes_2 = new HolNativeIdentifier(new String("(\\s. {i:num | i > 0 /\\ i < LENGTH s})"));
        else {

          Boolean cond_32 = null;
          Integer var1_33 = null;
          var1_33 = vdm_operator.getValue();
          cond_32 = new Boolean(var1_33.intValue() == new Integer(10).intValue());
          if (cond_32.booleanValue()) 
            varRes_2 = new HolNativeIdentifier(new String("LIST_TO_SET"));
          else {

            Boolean cond_28 = null;
            Integer var1_29 = null;
            var1_29 = vdm_operator.getValue();
            cond_28 = new Boolean(var1_29.intValue() == new Integer(11).intValue());
            if (cond_28.booleanValue()) 
              varRes_2 = new HolNativeIdentifier(new String("FDOM"));
            else {

              Boolean cond_24 = null;
              Integer var1_25 = null;
              var1_25 = vdm_operator.getValue();
              cond_24 = new Boolean(var1_25.intValue() == new Integer(12).intValue());
              if (cond_24.booleanValue()) 
                varRes_2 = new HolNativeIdentifier(new String("HD"));
              else {

                Boolean cond_20 = null;
                Integer var1_21 = null;
                var1_21 = vdm_operator.getValue();
                cond_20 = new Boolean(var1_21.intValue() == new Integer(14).intValue());
                if (cond_20.booleanValue()) 
                  varRes_2 = new HolNativeIdentifier(new String("FRANGE"));
                else {

                  Boolean cond_16 = null;
                  Integer var1_17 = null;
                  var1_17 = vdm_operator.getValue();
                  cond_16 = new Boolean(var1_17.intValue() == new Integer(15).intValue());
                  if (cond_16.booleanValue()) 
                    varRes_2 = new HolNativeIdentifier(new String("LENGTH"));
                  else {

                    Boolean cond_12 = null;
                    Integer var1_13 = null;
                    var1_13 = vdm_operator.getValue();
                    cond_12 = new Boolean(var1_13.intValue() == new Integer(16).intValue());
                    if (cond_12.booleanValue()) 
                      varRes_2 = new HolNativeIdentifier(new String("~"));
                    else {

                      String arg_7 = null;
                      String var2_9 = null;
                      Util obj_10 = null;
                      obj_10 = (Util) new Util();
                      Integer par_11 = null;
                      par_11 = vdm_operator.getValue();
                      var2_9 = UTIL.ConvertToString(obj_10.itoa(par_11));
                      arg_7 = new String("Unknown unary operator: ").concat(var2_9);
                      varRes_2 = new HolIdentifierError(arg_7);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return (HolIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateUnaryOperator#1|IOmlUnaryOperator


// ***** VDMTOOLS START Name=translateBinaryOperator#1|IOmlBinaryOperator KEEP=NO
  private HolIdentifier translateBinaryOperator (final IOmlBinaryOperator vdm_operator) throws CGException {

    Object varRes_2 = null;
    Boolean cond_4 = null;
    Integer var1_5 = null;
    var1_5 = vdm_operator.getValue();
    cond_4 = new Boolean(var1_5.intValue() == new Integer(0).intValue());
    if (cond_4.booleanValue()) 
      varRes_2 = new HolNativeIdentifier(new String("$UNION"));
    else {

      Boolean cond_96 = null;
      Integer var1_97 = null;
      var1_97 = vdm_operator.getValue();
      cond_96 = new Boolean(var1_97.intValue() == new Integer(1).intValue());
      if (cond_96.booleanValue()) 
        varRes_2 = new HolNativeIdentifier(new String("$-"));
      else {

        Boolean cond_92 = null;
        Integer var1_93 = null;
        var1_93 = vdm_operator.getValue();
        cond_92 = new Boolean(var1_93.intValue() == new Integer(3).intValue());
        if (cond_92.booleanValue()) 
          varRes_2 = new HolNativeIdentifier(new String("$PSUBSET"));
        else {

          Boolean cond_88 = null;
          Integer var1_89 = null;
          var1_89 = vdm_operator.getValue();
          cond_88 = new Boolean(var1_89.intValue() == new Integer(4).intValue());
          if (cond_88.booleanValue()) 
            varRes_2 = new HolNativeIdentifier(new String("$="));
          else {

            Boolean cond_84 = null;
            Integer var1_85 = null;
            var1_85 = vdm_operator.getValue();
            cond_84 = new Boolean(var1_85.intValue() == new Integer(5).intValue());
            if (cond_84.booleanValue()) 
              varRes_2 = new HolNativeIdentifier(new String("(\\x y . ~ (x IN y))"));
            else {

              Boolean cond_80 = null;
              Integer var1_81 = null;
              var1_81 = vdm_operator.getValue();
              cond_80 = new Boolean(var1_81.intValue() == new Integer(7).intValue());
              if (cond_80.booleanValue()) 
                varRes_2 = new HolNativeIdentifier(new String("$<"));
              else {

                Boolean cond_76 = null;
                Integer var1_77 = null;
                var1_77 = vdm_operator.getValue();
                cond_76 = new Boolean(var1_77.intValue() == new Integer(8).intValue());
                if (cond_76.booleanValue()) 
                  varRes_2 = new HolNativeIdentifier(new String("$>"));
                else {

                  Boolean cond_72 = null;
                  Integer var1_73 = null;
                  var1_73 = vdm_operator.getValue();
                  cond_72 = new Boolean(var1_73.intValue() == new Integer(9).intValue());
                  if (cond_72.booleanValue()) 
                    varRes_2 = new HolNativeIdentifier(new String("(\\x y . ~ (x = y))"));
                  else {

                    Boolean cond_68 = null;
                    Integer var1_69 = null;
                    var1_69 = vdm_operator.getValue();
                    cond_68 = new Boolean(var1_69.intValue() == new Integer(12).intValue());
                    if (cond_68.booleanValue()) 
                      varRes_2 = new HolNativeIdentifier(new String("$DIFF"));
                    else {

                      Boolean cond_64 = null;
                      Integer var1_65 = null;
                      var1_65 = vdm_operator.getValue();
                      cond_64 = new Boolean(var1_65.intValue() == new Integer(13).intValue());
                      if (cond_64.booleanValue()) 
                        varRes_2 = new HolNativeIdentifier(new String("$IN"));
                      else {

                        Boolean cond_60 = null;
                        Integer var1_61 = null;
                        var1_61 = vdm_operator.getValue();
                        cond_60 = new Boolean(var1_61.intValue() == new Integer(14).intValue());
                        if (cond_60.booleanValue()) 
                          varRes_2 = new HolNativeIdentifier(new String("$\\/"));
                        else {

                          Boolean cond_56 = null;
                          Integer var1_57 = null;
                          var1_57 = vdm_operator.getValue();
                          cond_56 = new Boolean(var1_57.intValue() == new Integer(15).intValue());
                          if (cond_56.booleanValue()) 
                            varRes_2 = new HolNativeIdentifier(new String("$>="));
                          else {

                            Boolean cond_52 = null;
                            Integer var1_53 = null;
                            var1_53 = vdm_operator.getValue();
                            cond_52 = new Boolean(var1_53.intValue() == new Integer(16).intValue());
                            if (cond_52.booleanValue()) 
                              varRes_2 = new HolNativeIdentifier(new String("(\\x y . DRESTRICT y (COMPL x))"));
                            else {

                              Boolean cond_48 = null;
                              Integer var1_49 = null;
                              var1_49 = vdm_operator.getValue();
                              cond_48 = new Boolean(var1_49.intValue() == new Integer(17).intValue());
                              if (cond_48.booleanValue()) 
                                varRes_2 = new HolNativeIdentifier(new String("$/\\"));
                              else {

                                Boolean cond_44 = null;
                                Integer var1_45 = null;
                                var1_45 = vdm_operator.getValue();
                                cond_44 = new Boolean(var1_45.intValue() == new Integer(20).intValue());
                                if (cond_44.booleanValue()) 
                                  varRes_2 = new HolNativeIdentifier(new String("$INTER"));
                                else {

                                  Boolean cond_40 = null;
                                  Integer var1_41 = null;
                                  var1_41 = vdm_operator.getValue();
                                  cond_40 = new Boolean(var1_41.intValue() == new Integer(21).intValue());
                                  if (cond_40.booleanValue()) 
                                    varRes_2 = new HolNativeIdentifier(new String("(\\x y . RRESTRICT (y COMPL x))"));
                                  else {

                                    Boolean cond_36 = null;
                                    Integer var1_37 = null;
                                    var1_37 = vdm_operator.getValue();
                                    cond_36 = new Boolean(var1_37.intValue() == new Integer(22).intValue());
                                    if (cond_36.booleanValue()) 
                                      varRes_2 = new HolNativeIdentifier(new String("$<="));
                                    else {

                                      Boolean cond_32 = null;
                                      Integer var1_33 = null;
                                      var1_33 = vdm_operator.getValue();
                                      cond_32 = new Boolean(var1_33.intValue() == new Integer(24).intValue());
                                      if (cond_32.booleanValue()) 
                                        varRes_2 = new HolNativeIdentifier(new String("(\\x y . FUNION y x)"));
                                      else {

                                        Boolean cond_28 = null;
                                        Integer var1_29 = null;
                                        var1_29 = vdm_operator.getValue();
                                        cond_28 = new Boolean(var1_29.intValue() == new Integer(26).intValue());
                                        if (cond_28.booleanValue()) 
                                          varRes_2 = new HolNativeIdentifier(new String("$SUBSET"));
                                        else {

                                          Boolean cond_24 = null;
                                          Integer var1_25 = null;
                                          var1_25 = vdm_operator.getValue();
                                          cond_24 = new Boolean(var1_25.intValue() == new Integer(27).intValue());
                                          if (cond_24.booleanValue()) 
                                            varRes_2 = new HolNativeIdentifier(new String("FUNION"));
                                          else {

                                            Boolean cond_20 = null;
                                            Integer var1_21 = null;
                                            var1_21 = vdm_operator.getValue();
                                            cond_20 = new Boolean(var1_21.intValue() == new Integer(28).intValue());
                                            if (cond_20.booleanValue()) 
                                              varRes_2 = new HolNativeIdentifier(new String("$+"));
                                            else {

                                              Boolean cond_16 = null;
                                              Integer var1_17 = null;
                                              var1_17 = vdm_operator.getValue();
                                              cond_16 = new Boolean(var1_17.intValue() == new Integer(29).intValue());
                                              if (cond_16.booleanValue()) 
                                                varRes_2 = new HolNativeIdentifier(new String("$==>"));
                                              else {

                                                Boolean cond_12 = null;
                                                Integer var1_13 = null;
                                                var1_13 = vdm_operator.getValue();
                                                cond_12 = new Boolean(var1_13.intValue() == new Integer(30).intValue());
                                                if (cond_12.booleanValue()) 
                                                  varRes_2 = new HolNativeIdentifier(new String("$++"));
                                                else {

                                                  String arg_7 = null;
                                                  String var2_9 = null;
                                                  Util obj_10 = null;
                                                  obj_10 = (Util) new Util();
                                                  Integer par_11 = null;
                                                  par_11 = vdm_operator.getValue();
                                                  var2_9 = UTIL.ConvertToString(obj_10.itoa(par_11));
                                                  arg_7 = new String("Unknown binary operator: ").concat(var2_9);
                                                  varRes_2 = new HolIdentifierError(arg_7);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return (HolIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateBinaryOperator#1|IOmlBinaryOperator


// ***** VDMTOOLS START Name=translateSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression KEEP=NO
  private HolIdentifier translateSymbolicLiteralExpression (final IOmlSymbolicLiteralExpression literalExpression) throws CGException {

    Object varRes_2 = null;
    {

      IOmlLiteral literal = null;
      literal = (IOmlLiteral) literalExpression.getLiteral();
      if (new Boolean(literal instanceof IOmlCharacterLiteral).booleanValue()) 
        varRes_2 = translateCharacterLiteral((IOmlCharacterLiteral) literal);
      else 
        if (new Boolean(literal instanceof IOmlQuoteLiteral).booleanValue()) 
          varRes_2 = translateQuoteLiteral((IOmlQuoteLiteral) literal);
        else 
          if (new Boolean(literal instanceof IOmlNumericLiteral).booleanValue()) 
            varRes_2 = translateNumericLiteral((IOmlNumericLiteral) literal);
          else 
            if (new Boolean(literal instanceof IOmlBooleanLiteral).booleanValue()) 
              varRes_2 = translateBooleanLiteral((IOmlBooleanLiteral) literal);
            else {

              String arg_8 = null;
              Vector unArg_9 = null;
              unArg_9 = new Vector();
              unArg_9.add(new String("Unknown literal expression: "));
              String e_seq_11 = null;
              e_seq_11 = literal.identity();
              unArg_9.add(e_seq_11);
              String rdcseq_12 = new String();
              for (Iterator enm_15 = unArg_9.iterator(); enm_15.hasNext(); ) {

                String e_13 = UTIL.ConvertToString(enm_15.next());
                rdcseq_12 = rdcseq_12.concat(e_13);
              }
              arg_8 = rdcseq_12;
              varRes_2 = new HolIdentifierError(arg_8);
            }
    }
    return (HolIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression


// ***** VDMTOOLS START Name=translateCharacterLiteral#1|IOmlCharacterLiteral KEEP=NO
  private HolNativeIdentifier translateCharacterLiteral (final IOmlCharacterLiteral charLit) throws CGException {

    HolNativeIdentifier varRes_2 = null;
    {

      String charStart = new String("#\"");
      String charVal = null;
      Character e_seq_6 = null;
      e_seq_6 = charLit.getVal();
      charVal = new String();
      charVal = charVal + e_seq_6;
      String charEnd = "\"";
      String arg_8 = null;
      Vector unArg_9 = null;
      unArg_9 = new Vector();
      unArg_9.add(charStart);
      unArg_9.add(charVal);
      unArg_9.add(charEnd);
      String rdcseq_13 = new String();
      for (Iterator enm_16 = unArg_9.iterator(); enm_16.hasNext(); ) {

        String e_14 = UTIL.ConvertToString(enm_16.next());
        rdcseq_13 = rdcseq_13.concat(e_14);
      }
      arg_8 = rdcseq_13;
      varRes_2 = new HolNativeIdentifier(arg_8);
    }
    return (HolNativeIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateCharacterLiteral#1|IOmlCharacterLiteral


// ***** VDMTOOLS START Name=translateQuoteLiteral#1|IOmlQuoteLiteral KEEP=NO
  private HolIdentifier translateQuoteLiteral (final IOmlQuoteLiteral quoteLit) throws CGException {

    HolIdentifier varRes_2 = null;
    String arg_3 = null;
    Vector unArg_4 = null;
    String e_seq_5 = null;
    e_seq_5 = quoteLit.getVal();
    unArg_4 = new Vector();
    unArg_4.add(e_seq_5);
    unArg_4.add(new String("QuoteLiteral"));
    String rdcseq_7 = new String();
    for (Iterator enm_10 = unArg_4.iterator(); enm_10.hasNext(); ) {

      String e_8 = UTIL.ConvertToString(enm_10.next());
      rdcseq_7 = rdcseq_7.concat(e_8);
    }
    arg_3 = rdcseq_7;
    varRes_2 = new HolIdentifier(arg_3);
    return (HolIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateQuoteLiteral#1|IOmlQuoteLiteral


// ***** VDMTOOLS START Name=translateNumericLiteral#1|IOmlNumericLiteral KEEP=NO
  private HolNativeIdentifier translateNumericLiteral (final IOmlNumericLiteral number) throws CGException {

    HolNativeIdentifier varRes_2 = null;
    String arg_3 = null;
    Util obj_4 = null;
    obj_4 = (Util) new Util();
    Integer par_5 = null;
    par_5 = number.getVal();
    arg_3 = UTIL.ConvertToString(obj_4.itoa(par_5));
    varRes_2 = new HolNativeIdentifier(arg_3);
    return (HolNativeIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateNumericLiteral#1|IOmlNumericLiteral


// ***** VDMTOOLS START Name=translateBooleanLiteral#1|IOmlBooleanLiteral KEEP=NO
  private HolIdentifier translateBooleanLiteral (final IOmlBooleanLiteral boolLit) throws CGException {

    HolNativeIdentifier varRes_2 = null;
    Boolean cond_4 = null;
    cond_4 = boolLit.getVal();
    if (cond_4.booleanValue()) 
      varRes_2 = (HolNativeIdentifier) new HolNativeIdentifier(new String("T"));
    else 
      varRes_2 = (HolNativeIdentifier) new HolNativeIdentifier(new String("F"));
    return (HolIdentifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateBooleanLiteral#1|IOmlBooleanLiteral


// ***** VDMTOOLS START Name=translateSetComprehension#1|IOmlSetComprehension KEEP=NO
  private HolSetComprehension translateSetComprehension (final IOmlSetComprehension compr) throws CGException {

    HolSetComprehension varRes_2 = null;
    {

      HolExpression element = null;
      IOmlExpression par_5 = null;
      par_5 = (IOmlExpression) compr.getExpression();
      element = (HolExpression) translateExpression((IOmlExpression) par_5);
      HolExpression guard = null;
      IOmlExpression par_7 = null;
      par_7 = (IOmlExpression) compr.getGuard();
      guard = (HolExpression) translateExpression((IOmlExpression) par_7);
      String freeVarName = null;
      freeVarName = new String("setComprehensionVariable").concat(getUniqueID());
      {

        boolean succ_11;
        Tuple tmpVal_12 = new Tuple(2);
        Vector par_13 = null;
        par_13 = compr.getBindList();
        tmpVal_12 = translateBindList(par_13, freeVarName, new Integer(1), (HolExpression) element);
        HolExpression binding = null;
        HolExpression newElement = null;
        succ_11 = true;
        {

          Vector e_l_17 = new Vector();
          for (int i_18 = 1; i_18 <= tmpVal_12.Length(); i_18++) 
            e_l_17.add(tmpVal_12.GetField(i_18));
          if (succ_11 = (2 == e_l_17.size())) {

            succ_11 = true;
            if (e_l_17.get(0) instanceof HolBindTranslation) {

              Vector e_l_19 = new Vector();
              e_l_19.add(((HolBindTranslation) e_l_17.get(0)).binding);
              e_l_19.add(((HolBindTranslation) e_l_17.get(0)).newExpression);
              if (succ_11 = (2 == e_l_19.size())) {

                binding = (HolExpression) (HolExpression) e_l_19.get(0);
                newElement = (HolExpression) (HolExpression) e_l_19.get(2 - 1);
              }
            }
            else 
              succ_11 = false;
          }
        }
        if (!succ_11) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        Tuple tmpVal_21 = new Tuple(2);
        Vector par_22 = null;
        par_22 = compr.getBindList();
        tmpVal_21 = translateBindList(par_22, freeVarName, new Integer(1), (HolExpression) guard);
        HolExpression newGuard = null;
        succ_11 = true;
        {

          Vector e_l_26 = new Vector();
          for (int i_27 = 1; i_27 <= tmpVal_21.Length(); i_27++) 
            e_l_26.add(tmpVal_21.GetField(i_27));
          if (succ_11 = (2 == e_l_26.size())) {

            succ_11 = true;
            if (e_l_26.get(0) instanceof HolBindTranslation) {

              Vector e_l_28 = new Vector();
              e_l_28.add(((HolBindTranslation) e_l_26.get(0)).binding);
              e_l_28.add(((HolBindTranslation) e_l_26.get(0)).newExpression);
              if (succ_11 = (2 == e_l_28.size())) 
                newGuard = (HolExpression) (HolExpression) e_l_28.get(2 - 1);
            }
            else 
              succ_11 = false;
          }
        }
        if (!succ_11) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        Vector arg_31 = null;
        Vector unArg_32 = null;
        Vector e_seq_33 = null;
        e_seq_33 = new Vector();
        e_seq_33.add(binding);
        unArg_32 = new Vector();
        unArg_32.add(e_seq_33);
        Vector e_seq_35 = null;
        e_seq_35 = new Vector();
        e_seq_35.add(newGuard);
        unArg_32.add(e_seq_35);
        Vector rdcseq_37 = new Vector();
        for (Iterator enm_40 = unArg_32.iterator(); enm_40.hasNext(); ) {

          Vector e_38 = (Vector) UTIL.ConvertToList(enm_40.next());
          rdcseq_37.addAll(e_38);
        }
        arg_31 = rdcseq_37;
        varRes_2 = new HolSetComprehension(newElement, arg_31);
      }
    }
    return (HolSetComprehension) varRes_2;
  }
// ***** VDMTOOLS END Name=translateSetComprehension#1|IOmlSetComprehension


// ***** VDMTOOLS START Name=translateMapComprehension#1|IOmlMapComprehension KEEP=NO
  private HolSelect translateMapComprehension (final IOmlMapComprehension compr) throws CGException {

    HolSelect varRes_2 = null;
    {

      HolIdentifier mapVar = null;
      String arg_5 = null;
      arg_5 = new String("mapComp").concat(getUniqueID());
      mapVar = new HolIdentifier(arg_5);
      HolIdentifier mapTVar = null;
      String arg_9 = null;
      arg_9 = new String("mapCompT").concat(getUniqueID());
      mapTVar = new HolIdentifier(arg_9);
      IOmlExpression domExp = null;
      IOmlMaplet obj_13 = null;
      obj_13 = (IOmlMaplet) compr.getExpression();
      domExp = (IOmlExpression) obj_13.getDomExpression();
      IOmlExpression rngExp = null;
      IOmlMaplet obj_15 = null;
      obj_15 = (IOmlMaplet) compr.getExpression();
      rngExp = (IOmlExpression) obj_15.getRngExpression();
      IOmlExpression guard = null;
      Boolean cond_18 = null;
      cond_18 = compr.hasGuard();
      if (cond_18.booleanValue()) 
        guard = (IOmlExpression) compr.getGuard();
      else 
        guard = null;
      Vector bindList = null;
      bindList = compr.getBindList();
      {

        HolSetComprehension mapToSetComp = null;
        OmlSetComprehension par_22 = null;
        OmlTupleConstructor arg_23 = null;
        Vector arg_26 = null;
        arg_26 = new Vector();
        arg_26.add(domExp);
        arg_26.add(rngExp);
        arg_23 = new OmlTupleConstructor(arg_26);
        par_22 = new OmlSetComprehension(arg_23, bindList, guard);
        mapToSetComp = (HolSetComprehension) translateSetComprehension((IOmlSetComprehension) par_22);
        HolApplication mToFstT = null;
        Vector arg_31 = null;
        arg_31 = new Vector();
        arg_31.add(mapVar);
        HolApplication e_seq_34 = null;
        Vector arg_36 = null;
        arg_36 = new Vector();
        arg_36.add(mapTVar);
        e_seq_34 = new HolApplication(new HolNativeIdentifier(new String("FST")), arg_36);
        arg_31.add(e_seq_34);
        mToFstT = new HolApplication(new HolNativeIdentifier(new String("FAPPLY")), arg_31);
        HolApplication SndT = null;
        Vector arg_41 = null;
        arg_41 = new Vector();
        arg_41.add(mapTVar);
        SndT = new HolApplication(new HolNativeIdentifier(new String("SND")), arg_41);
        {

          HolApplication domainRestriction = null;
          Vector arg_47 = null;
          HolApplication e_seq_49 = null;
          Vector arg_51 = null;
          arg_51 = new Vector();
          arg_51.add(mapVar);
          e_seq_49 = new HolApplication(new HolNativeIdentifier(new String("FDOM")), arg_51);
          arg_47 = new Vector();
          arg_47.add(e_seq_49);
          HolSetComprehension e_seq_54 = null;
          HolApplication par_55 = null;
          Vector arg_57 = null;
          HolExpression e_seq_59 = null;
          e_seq_59 = (HolExpression) mapToSetComp.getElement();
          arg_57 = new Vector();
          arg_57.add(e_seq_59);
          par_55 = new HolApplication(new HolNativeIdentifier(new String("FST")), arg_57);
          e_seq_54 = (HolSetComprehension) mapToSetComp.setElement((HolExpression) par_55);
          arg_47.add(e_seq_54);
          domainRestriction = new HolApplication(new HolNativeIdentifier(new String("$=")), arg_47);
          HolQuantifier mapCorrectness = null;
          Vector arg_62 = null;
          arg_62 = new Vector();
          arg_62.add(mapTVar);
          HolApplication arg_64 = null;
          Vector arg_67 = null;
          HolApplication e_seq_69 = null;
          Vector arg_71 = null;
          arg_71 = new Vector();
          arg_71.add(mapTVar);
          arg_71.add(mapToSetComp);
          e_seq_69 = new HolApplication(new HolNativeIdentifier(new String("$IN")), arg_71);
          arg_67 = new Vector();
          arg_67.add(e_seq_69);
          HolApplication e_seq_75 = null;
          Vector arg_77 = null;
          arg_77 = new Vector();
          arg_77.add(mToFstT);
          arg_77.add(SndT);
          e_seq_75 = new HolApplication(new HolNativeIdentifier(new String("$=")), arg_77);
          arg_67.add(e_seq_75);
          arg_64 = new HolApplication(new HolNativeIdentifier(new String("$==>")), arg_67);
          mapCorrectness = new HolQuantifier(new org.overturetool.potrans.quotes.universal(), arg_62, null, arg_64);
          Vector arg_82 = null;
          arg_82 = new Vector();
          arg_82.add(domainRestriction);
          arg_82.add(mapCorrectness);
          varRes_2 = new HolSelect(mapVar, arg_82);
        }
      }
    }
    return (HolSelect) varRes_2;
  }
// ***** VDMTOOLS END Name=translateMapComprehension#1|IOmlMapComprehension


// ***** VDMTOOLS START Name=translateApplyExpression#1|IOmlApplyExpression KEEP=NO
  private HolApplication translateApplyExpression (final IOmlApplyExpression appExp) throws CGException {

    HolApplication varRes_2 = null;
    HolExpression arg_3 = null;
    IOmlExpression par_5 = null;
    par_5 = (IOmlExpression) appExp.getExpression();
    arg_3 = (HolExpression) translateExpression((IOmlExpression) par_5);
    Vector arg_4 = null;
    Vector par_6 = null;
    par_6 = appExp.getExpressionList();
    arg_4 = translateExpressionList(par_6);
    varRes_2 = new HolApplication(arg_3, arg_4);
    return (HolApplication) varRes_2;
  }
// ***** VDMTOOLS END Name=translateApplyExpression#1|IOmlApplyExpression


// ***** VDMTOOLS START Name=translateSetEnumeration#1|IOmlSetEnumeration KEEP=NO
  private HolSetEnumeration translateSetEnumeration (final IOmlSetEnumeration setEnum) throws CGException {

    HolSetEnumeration varRes_2 = null;
    Vector arg_3 = null;
    Vector par_4 = null;
    par_4 = setEnum.getExpressionList();
    arg_3 = translateExpressionList(par_4);
    varRes_2 = new HolSetEnumeration(arg_3);
    return (HolSetEnumeration) varRes_2;
  }
// ***** VDMTOOLS END Name=translateSetEnumeration#1|IOmlSetEnumeration


// ***** VDMTOOLS START Name=translateSequenceEnumeration#1|IOmlSequenceEnumeration KEEP=NO
  private HolSequenceEnumeration translateSequenceEnumeration (final IOmlSequenceEnumeration seqEnum) throws CGException {

    HolSequenceEnumeration varRes_2 = null;
    Vector arg_3 = null;
    Vector par_4 = null;
    par_4 = seqEnum.getExpressionList();
    arg_3 = translateExpressionList(par_4);
    varRes_2 = new HolSequenceEnumeration(arg_3);
    return (HolSequenceEnumeration) varRes_2;
  }
// ***** VDMTOOLS END Name=translateSequenceEnumeration#1|IOmlSequenceEnumeration


// ***** VDMTOOLS START Name=translateExists#1|IOmlExistsExpression KEEP=NO
  private HolQuantifier translateExists (final IOmlExistsExpression ex) throws CGException {

    HolQuantifier varRes_2 = null;
    {

      boolean succ_3;
      Tuple tmpVal_4 = new Tuple(2);
      Vector par_5 = null;
      par_5 = ex.getBindList();
      String par_6 = null;
      String var1_7 = null;
      var1_7 = new String("exi_").concat(getUniqueID());
      par_6 = var1_7.concat(new String("_var_"));
      HolExpression par_12 = null;
      IOmlExpression par_13 = null;
      par_13 = (IOmlExpression) ex.getExpression();
      par_12 = (HolExpression) translateExpression((IOmlExpression) par_13);
      tmpVal_4 = translateBindList(par_5, par_6, new Integer(1), (HolExpression) par_12);
      Vector ids = null;
      HolBindTranslation binds = null;
      succ_3 = true;
      {

        Vector e_l_14 = new Vector();
        for (int i_15 = 1; i_15 <= tmpVal_4.Length(); i_15++) 
          e_l_14.add(tmpVal_4.GetField(i_15));
        if (succ_3 = (2 == e_l_14.size())) {

          binds = (HolBindTranslation) e_l_14.get(0);
          ids = (Vector) e_l_14.get(2 - 1);
        }
      }
      if (!succ_3) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      HolApplication arg_19 = null;
      Vector arg_21 = null;
      HolExpression e_seq_23 = null;
      e_seq_23 = (HolExpression) (binds).binding;
      arg_21 = new Vector();
      arg_21.add(e_seq_23);
      HolExpression e_seq_25 = null;
      e_seq_25 = (HolExpression) (binds).newExpression;
      arg_21.add(e_seq_25);
      arg_19 = new HolApplication(new HolNativeIdentifier(new String("$/\\")), arg_21);
      varRes_2 = new HolQuantifier(new org.overturetool.potrans.quotes.existential(), ids, null, arg_19);
    }
    return (HolQuantifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateExists#1|IOmlExistsExpression


// ***** VDMTOOLS START Name=translateForAll#1|IOmlForAllExpression KEEP=NO
  private HolQuantifier translateForAll (final IOmlForAllExpression fall) throws CGException {

    HolQuantifier varRes_2 = null;
    {

      boolean succ_3;
      Tuple tmpVal_4 = new Tuple(2);
      Vector par_5 = null;
      par_5 = fall.getBindList();
      String par_6 = null;
      String var1_7 = null;
      var1_7 = new String("uni_").concat(getUniqueID());
      par_6 = var1_7.concat(new String("_var_"));
      HolExpression par_12 = null;
      IOmlExpression par_13 = null;
      par_13 = (IOmlExpression) fall.getExpression();
      par_12 = (HolExpression) translateExpression((IOmlExpression) par_13);
      tmpVal_4 = translateBindList(par_5, par_6, new Integer(1), (HolExpression) par_12);
      Vector ids = null;
      HolBindTranslation binds = null;
      succ_3 = true;
      {

        Vector e_l_14 = new Vector();
        for (int i_15 = 1; i_15 <= tmpVal_4.Length(); i_15++) 
          e_l_14.add(tmpVal_4.GetField(i_15));
        if (succ_3 = (2 == e_l_14.size())) {

          binds = (HolBindTranslation) e_l_14.get(0);
          ids = (Vector) e_l_14.get(2 - 1);
        }
      }
      if (!succ_3) 
        UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
      HolApplication arg_19 = null;
      Vector arg_21 = null;
      HolExpression e_seq_23 = null;
      e_seq_23 = (HolExpression) (binds).binding;
      arg_21 = new Vector();
      arg_21.add(e_seq_23);
      HolExpression e_seq_25 = null;
      e_seq_25 = (HolExpression) (binds).newExpression;
      arg_21.add(e_seq_25);
      arg_19 = new HolApplication(new HolNativeIdentifier(new String("$==>")), arg_21);
      varRes_2 = new HolQuantifier(new org.overturetool.potrans.quotes.universal(), ids, null, arg_19);
    }
    return (HolQuantifier) varRes_2;
  }
// ***** VDMTOOLS END Name=translateForAll#1|IOmlForAllExpression


// ***** VDMTOOLS START Name=translateFieldSelect#1|IOmlFieldSelect KEEP=NO
  private HolRecordFieldSelection translateFieldSelect (final IOmlFieldSelect fieldSel) throws CGException {

    HolRecordFieldSelection varRes_2 = null;
    HolExpression arg_3 = null;
    IOmlExpression par_5 = null;
    par_5 = (IOmlExpression) fieldSel.getExpression();
    arg_3 = (HolExpression) translateExpression((IOmlExpression) par_5);
    HolIdentifier arg_4 = null;
    IOmlName par_6 = null;
    par_6 = (IOmlName) fieldSel.getName();
    arg_4 = (HolIdentifier) translateName((IOmlName) par_6);
    varRes_2 = new HolRecordFieldSelection(arg_3, arg_4);
    return (HolRecordFieldSelection) varRes_2;
  }
// ***** VDMTOOLS END Name=translateFieldSelect#1|IOmlFieldSelect


// ***** VDMTOOLS START Name=generateLetExpression#3|Vector|Vector|HolExpression KEEP=NO
  private HolLetExpression generateLetExpression (final Vector patterns, final Vector matchExprs, final HolExpression inExpr) throws CGException {

    HolLetExpression varRes_4 = null;
    {

      HolPatternTranslation patternTranslation = translatePatternExprPairs(patterns, matchExprs);
      Vector arg_9 = null;
      arg_9 = (patternTranslation).vars;
      Vector arg_10 = null;
      arg_10 = (patternTranslation).exprs;
      varRes_4 = new HolLetExpression(arg_9, arg_10, inExpr);
    }
    return (HolLetExpression) varRes_4;
  }
// ***** VDMTOOLS END Name=generateLetExpression#3|Vector|Vector|HolExpression


// ***** VDMTOOLS START Name=translatePatternExprPairs#2|Vector|Vector KEEP=NO
  private HolPatternTranslation translatePatternExprPairs (final Vector patterns, final Vector exprs) throws CGException {

    HolPatternTranslation varRes_3 = null;
    if (new Boolean(UTIL.equals(patterns, new Vector())).booleanValue()) 
      varRes_3 = new HolPatternTranslation(new Vector(), new Vector());
    else {

      HolPatternTranslation translatedPattern = translatePattern((IOmlPattern) (IOmlPattern) patterns.get(0), (HolExpression) (HolExpression) translateExpression((IOmlExpression) (IOmlExpression) exprs.get(0)));
      HolPatternTranslation recTrans = translatePatternExprPairs(new Vector(patterns.subList(1, patterns.size())), new Vector(exprs.subList(1, exprs.size())));
      Vector tmpVar_20 = null;
      Vector var1_21 = null;
      var1_21 = (translatedPattern).vars;
      Vector var2_23 = null;
      var2_23 = (recTrans).vars;
      tmpVar_20 = (Vector) var1_21.clone();
      tmpVar_20.addAll(var2_23);
      Vector tmpVar_25 = null;
      Vector var1_26 = null;
      var1_26 = (translatedPattern).exprs;
      Vector var2_28 = null;
      var2_28 = (recTrans).exprs;
      tmpVar_25 = (Vector) var1_26.clone();
      tmpVar_25.addAll(var2_28);
      varRes_3 = new HolPatternTranslation(tmpVar_20, tmpVar_25);
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=translatePatternExprPairs#2|Vector|Vector


// ***** VDMTOOLS START Name=translateLetExpression#1|IOmlLetExpression KEEP=NO
  private HolLetExpression translateLetExpression (final IOmlLetExpression letExp) throws CGException {

    HolLetExpression varRes_2 = null;
    {

      HolPatternTranslation patternTranslation = null;
      Vector par_5 = null;
      par_5 = letExp.getDefinitionList();
      patternTranslation = translateLetDefs(par_5);
      Vector arg_6 = null;
      arg_6 = (patternTranslation).vars;
      Vector arg_7 = null;
      arg_7 = (patternTranslation).exprs;
      HolExpression arg_8 = null;
      IOmlExpression par_11 = null;
      par_11 = (IOmlExpression) letExp.getExpression();
      arg_8 = (HolExpression) translateExpression((IOmlExpression) par_11);
      varRes_2 = new HolLetExpression(arg_6, arg_7, arg_8);
    }
    return (HolLetExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateLetExpression#1|IOmlLetExpression


// ***** VDMTOOLS START Name=translateLetDefs#1|Vector KEEP=NO
  private HolPatternTranslation translateLetDefs (final Vector shapes) throws CGException {

    HolPatternTranslation varRes_2 = null;
    if (new Boolean(UTIL.equals(shapes, new Vector())).booleanValue()) 
      varRes_2 = new HolPatternTranslation(new Vector(), new Vector());
    else {

      HolPatternTranslation translatedPattern = null;
      IOmlPattern par_9 = null;
      IOmlValueShape obj_10 = null;
      obj_10 = (IOmlValueShape) (IOmlValueShape) shapes.get(0);
      par_9 = (IOmlPattern) obj_10.getPattern();
      HolExpression par_12 = null;
      IOmlExpression par_13 = null;
      IOmlValueShape obj_14 = null;
      obj_14 = (IOmlValueShape) (IOmlValueShape) shapes.get(0);
      par_13 = (IOmlExpression) obj_14.getExpression();
      par_12 = (HolExpression) translateExpression((IOmlExpression) par_13);
      translatedPattern = translatePattern((IOmlPattern) par_9, (HolExpression) par_12);
      HolPatternTranslation recTrans = translateLetDefs(new Vector(shapes.subList(1, shapes.size())));
      Vector tmpVar_19 = null;
      Vector var1_20 = null;
      var1_20 = (translatedPattern).vars;
      Vector var2_22 = null;
      var2_22 = (recTrans).vars;
      tmpVar_19 = (Vector) var1_20.clone();
      tmpVar_19.addAll(var2_22);
      Vector tmpVar_24 = null;
      Vector var1_25 = null;
      var1_25 = (translatedPattern).exprs;
      Vector var2_27 = null;
      var2_27 = (recTrans).exprs;
      tmpVar_24 = (Vector) var1_25.clone();
      tmpVar_24.addAll(var2_27);
      varRes_2 = new HolPatternTranslation(tmpVar_19, tmpVar_24);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateLetDefs#1|Vector


// ***** VDMTOOLS START Name=translateLetBeExpression#1|IOmlLetBeExpression KEEP=NO
  private HolLetExpression translateLetBeExpression (final IOmlLetBeExpression letbeExp) throws CGException {

    HolLetExpression varRes_2 = null;
    {

      String uniqueID = getUniqueID();
      {

        HolIdentifier freeIntVar = null;
        String arg_7 = null;
        String var1_8 = null;
        var1_8 = new String("letBe_").concat(uniqueID);
        arg_7 = var1_8.concat(new String("_intVariable"));
        freeIntVar = new HolIdentifier(arg_7);
        HolIdentifier freeExtVar = null;
        String arg_13 = null;
        String var1_14 = null;
        var1_14 = new String("letBe_").concat(uniqueID);
        arg_13 = var1_14.concat(new String("_extVariable"));
        freeExtVar = new HolIdentifier(arg_13);
        {

          boolean succ_18;
          HolBindTranslation tmpVal_19 = null;
          IOmlBind par_20 = null;
          par_20 = (IOmlBind) letbeExp.getBind();
          Object par_22 = null;
          Boolean cond_24 = null;
          cond_24 = letbeExp.hasBest();
          if (cond_24.booleanValue()) {

            IOmlExpression par_26 = null;
            par_26 = (IOmlExpression) letbeExp.getBest();
            par_22 = translateExpression((IOmlExpression) par_26);
          }
          else 
            par_22 = new HolNativeIdentifier(new String("T"));
          tmpVal_19 = translateBind((IOmlBind) par_20, (HolIdentifier) freeIntVar, (HolExpression) par_22);
          HolExpression binding = null;
          HolExpression newBest = null;
          succ_18 = true;
          if (tmpVal_19 instanceof HolBindTranslation) {

            Vector e_l_27 = new Vector();
            e_l_27.add(tmpVal_19.binding);
            e_l_27.add(tmpVal_19.newExpression);
            if (succ_18 = (2 == e_l_27.size())) {

              binding = (HolExpression) (HolExpression) e_l_27.get(0);
              newBest = (HolExpression) (HolExpression) e_l_27.get(2 - 1);
            }
          }
          else 
            succ_18 = false;
          if (!succ_18) 
            UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
          {

            HolSelect selector = null;
            Vector arg_32 = null;
            Vector unArg_33 = null;
            Vector e_seq_34 = null;
            e_seq_34 = new Vector();
            e_seq_34.add(binding);
            unArg_33 = new Vector();
            unArg_33.add(e_seq_34);
            Vector e_seq_36 = null;
            e_seq_36 = new Vector();
            e_seq_36.add(newBest);
            unArg_33.add(e_seq_36);
            Vector rdcseq_38 = new Vector();
            for (Iterator enm_41 = unArg_33.iterator(); enm_41.hasNext(); ) {

              Vector e_39 = (Vector) UTIL.ConvertToList(enm_41.next());
              rdcseq_38.addAll(e_39);
            }
            arg_32 = rdcseq_38;
            selector = new HolSelect(freeIntVar, arg_32);
            {

              boolean succ_42;
              HolBindTranslation tmpVal_43 = null;
              IOmlBind par_44 = null;
              par_44 = (IOmlBind) letbeExp.getBind();
              HolExpression par_46 = null;
              IOmlExpression par_47 = null;
              par_47 = (IOmlExpression) letbeExp.getExpression();
              par_46 = (HolExpression) translateExpression((IOmlExpression) par_47);
              tmpVal_43 = translateBind((IOmlBind) par_44, (HolIdentifier) freeExtVar, (HolExpression) par_46);
              HolExpression newExp = null;
              succ_42 = true;
              if (tmpVal_43 instanceof HolBindTranslation) {

                Vector e_l_48 = new Vector();
                e_l_48.add(tmpVal_43.binding);
                e_l_48.add(tmpVal_43.newExpression);
                if (succ_42 = (2 == e_l_48.size())) 
                  newExp = (HolExpression) (HolExpression) e_l_48.get(2 - 1);
              }
              else 
                succ_42 = false;
              if (!succ_42) 
                UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
              Vector arg_50 = null;
              arg_50 = new Vector();
              arg_50.add(freeExtVar);
              Vector arg_51 = null;
              arg_51 = new Vector();
              arg_51.add(selector);
              varRes_2 = new HolLetExpression(arg_50, arg_51, newExp);
            }
          }
        }
      }
    }
    return (HolLetExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateLetBeExpression#1|IOmlLetBeExpression


// ***** VDMTOOLS START Name=translateMapEnumeration#1|IOmlMapEnumeration KEEP=NO
  private HolExpression translateMapEnumeration (final IOmlMapEnumeration mapEnum) throws CGException {

    HolExpression varRes_2 = null;
    Vector par_3 = null;
    par_3 = mapEnum.getMapletList();
    varRes_2 = (HolExpression) translateMapletList(par_3);
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateMapEnumeration#1|IOmlMapEnumeration


// ***** VDMTOOLS START Name=translateMapletList#1|Vector KEEP=NO
  private HolExpression translateMapletList (final Vector maplets) throws CGException {

    Object varRes_2 = null;
    if (new Boolean(UTIL.equals(maplets, new Vector())).booleanValue()) 
      varRes_2 = new HolNativeIdentifier(new String("FEMPTY"));
    else {

      Vector arg_8 = null;
      arg_8 = new Vector();
      arg_8.add((HolExpression) translateMapletList(new Vector(maplets.subList(1, maplets.size()))));
      HolTuple e_seq_13 = null;
      {

        HolExpression dma = null;
        IOmlExpression par_16 = null;
        IOmlMaplet obj_17 = null;
        obj_17 = (IOmlMaplet) (IOmlMaplet) maplets.get(0);
        par_16 = (IOmlExpression) obj_17.getDomExpression();
        dma = (HolExpression) translateExpression((IOmlExpression) par_16);
        HolExpression rne = null;
        IOmlExpression par_20 = null;
        IOmlMaplet obj_21 = null;
        obj_21 = (IOmlMaplet) (IOmlMaplet) maplets.get(0);
        par_20 = (IOmlExpression) obj_21.getRngExpression();
        rne = (HolExpression) translateExpression((IOmlExpression) par_20);
        Vector arg_23 = null;
        arg_23 = new Vector();
        arg_23.add(dma);
        arg_23.add(rne);
        e_seq_13 = new HolTuple(arg_23);
      }
      arg_8.add(e_seq_13);
      varRes_2 = new HolApplication(new HolNativeIdentifier(new String("$|+")), arg_8);
    }
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateMapletList#1|Vector


// ***** VDMTOOLS START Name=translateTupleConstructor#1|IOmlTupleConstructor KEEP=NO
  private HolTuple translateTupleConstructor (final IOmlTupleConstructor tuplec) throws CGException {

    HolTuple varRes_2 = null;
    Vector arg_3 = null;
    Vector par_4 = null;
    par_4 = tuplec.getExpressionList();
    arg_3 = translateExpressionList(par_4);
    varRes_2 = new HolTuple(arg_3);
    return (HolTuple) varRes_2;
  }
// ***** VDMTOOLS END Name=translateTupleConstructor#1|IOmlTupleConstructor


// ***** VDMTOOLS START Name=translateMuExpression#1|IOmlMuExpression KEEP=NO
  private HolRecordUpdate translateMuExpression (final IOmlMuExpression muexp) throws CGException {

    HolRecordUpdate varRes_2 = null;
    {

      HolExpression record = null;
      IOmlExpression par_5 = null;
      par_5 = (IOmlExpression) muexp.getExpression();
      record = (HolExpression) translateExpression((IOmlExpression) par_5);
      Vector mods = null;
      mods = muexp.getModifierList();
      varRes_2 = (HolRecordUpdate) new HolRecordUpdate(record, translateRecordModifierListToNames(mods), translateRecordModifierListToValues(mods));
    }
    return (HolRecordUpdate) varRes_2;
  }
// ***** VDMTOOLS END Name=translateMuExpression#1|IOmlMuExpression


// ***** VDMTOOLS START Name=translateRecordModifierListToNames#1|Vector KEEP=NO
  private Vector translateRecordModifierListToNames (final Vector mods) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(mods, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_7 = null;
      Vector e_seq_8 = null;
      HolIdentifier e_seq_9 = null;
      String arg_10 = null;
      IOmlRecordModifier obj_11 = null;
      obj_11 = (IOmlRecordModifier) (IOmlRecordModifier) mods.get(0);
      arg_10 = obj_11.getIdentifier();
      e_seq_9 = new HolIdentifier(arg_10);
      e_seq_8 = new Vector();
      e_seq_8.add(e_seq_9);
      unArg_7 = new Vector();
      unArg_7.add(e_seq_8);
      unArg_7.add(translateRecordModifierListToNames(new Vector(mods.subList(1, mods.size()))));
      Vector rdcseq_16 = new Vector();
      for (Iterator enm_19 = unArg_7.iterator(); enm_19.hasNext(); ) {

        Vector e_17 = (Vector) UTIL.ConvertToList(enm_19.next());
        rdcseq_16.addAll(e_17);
      }
      varRes_2 = rdcseq_16;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateRecordModifierListToNames#1|Vector


// ***** VDMTOOLS START Name=translateRecordModifierListToValues#1|Vector KEEP=NO
  private Vector translateRecordModifierListToValues (final Vector mods) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(mods, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_7 = null;
      Vector e_seq_8 = null;
      HolExpression e_seq_9 = null;
      IOmlExpression par_10 = null;
      IOmlRecordModifier obj_11 = null;
      obj_11 = (IOmlRecordModifier) (IOmlRecordModifier) mods.get(0);
      par_10 = (IOmlExpression) obj_11.getExpression();
      e_seq_9 = (HolExpression) translateExpression((IOmlExpression) par_10);
      e_seq_8 = new Vector();
      e_seq_8.add(e_seq_9);
      unArg_7 = new Vector();
      unArg_7.add(e_seq_8);
      unArg_7.add(translateRecordModifierListToValues(new Vector(mods.subList(1, mods.size()))));
      Vector rdcseq_16 = new Vector();
      for (Iterator enm_19 = unArg_7.iterator(); enm_19.hasNext(); ) {

        Vector e_17 = (Vector) UTIL.ConvertToList(enm_19.next());
        rdcseq_16.addAll(e_17);
      }
      varRes_2 = rdcseq_16;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=translateRecordModifierListToValues#1|Vector


// ***** VDMTOOLS START Name=translateRecordConstructor#1|IOmlRecordConstructor KEEP=NO
  private HolApplication translateRecordConstructor (final IOmlRecordConstructor constructor) throws CGException {

    HolApplication varRes_2 = null;
    HolReferedFunction arg_3 = null;
    String arg_5 = null;
    Vector unArg_6 = null;
    unArg_6 = new Vector();
    unArg_6.add(new String("make_"));
    String e_seq_8 = null;
    IOmlName obj_9 = null;
    obj_9 = (IOmlName) constructor.getName();
    e_seq_8 = obj_9.getIdentifier();
    unArg_6.add(e_seq_8);
    String rdcseq_10 = new String();
    for (Iterator enm_13 = unArg_6.iterator(); enm_13.hasNext(); ) {

      String e_11 = UTIL.ConvertToString(enm_13.next());
      rdcseq_10 = rdcseq_10.concat(e_11);
    }
    arg_5 = rdcseq_10;
    arg_3 = new HolReferedFunction(arg_5);
    Vector arg_4 = null;
    Vector par_14 = null;
    par_14 = constructor.getExpressionList();
    arg_4 = translateExpressionList(par_14);
    varRes_2 = new HolApplication(arg_3, arg_4);
    return (HolApplication) varRes_2;
  }
// ***** VDMTOOLS END Name=translateRecordConstructor#1|IOmlRecordConstructor


// ***** VDMTOOLS START Name=translateTokenExpression#1|IOmlTokenExpression KEEP=NO
  private HolExpression translateTokenExpression (final IOmlTokenExpression tokenExp) throws CGException {

    HolExpression varRes_2 = null;
    IOmlExpression par_3 = null;
    par_3 = (IOmlExpression) tokenExp.getExpression();
    varRes_2 = (HolExpression) translateExpression((IOmlExpression) par_3);
    return (HolExpression) varRes_2;
  }
// ***** VDMTOOLS END Name=translateTokenExpression#1|IOmlTokenExpression


// ***** VDMTOOLS START Name=translateBindList#4|Vector|String|Integer|HolExpression KEEP=NO
  private Tuple translateBindList (final Vector binds, final String freeVariablePrefix, final Integer freeVariableIndex, final HolExpression expression) throws CGException {

    Tuple varRes_5 = new Tuple(2);
    {

      Vector flattenedBindList = flattenBindList(binds);
      varRes_5 = translateBindListF(flattenedBindList, freeVariablePrefix, freeVariableIndex, (HolExpression) expression);
    }
    return varRes_5;
  }
// ***** VDMTOOLS END Name=translateBindList#4|Vector|String|Integer|HolExpression


// ***** VDMTOOLS START Name=flattenBindList#1|Vector KEEP=NO
  private Vector flattenBindList (final Vector binds) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(binds, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector currentFlattened = null;
      if (new Boolean((IOmlBind) binds.get(0) instanceof IOmlSetBind).booleanValue()) 
        currentFlattened = flattenSetBind((IOmlSetBind) (IOmlBind) binds.get(0));
      else 
        if (new Boolean((IOmlBind) binds.get(0) instanceof IOmlTypeBind).booleanValue()) 
          currentFlattened = flattenTypeBind((IOmlTypeBind) (IOmlBind) binds.get(0));
        else {

          currentFlattened = new Vector();
          currentFlattened.add((IOmlBind) binds.get(0));
        }
      varRes_2 = (Vector) currentFlattened.clone();
      varRes_2.addAll(flattenBindList(new Vector(binds.subList(1, binds.size()))));
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=flattenBindList#1|Vector


// ***** VDMTOOLS START Name=flattenSetBind#1|IOmlSetBind KEEP=NO
  private Vector flattenSetBind (final IOmlSetBind bind) throws CGException {

    Vector varRes_2 = null;
    Boolean cond_4 = null;
    Integer var1_5 = null;
    Vector unArg_6 = null;
    unArg_6 = bind.getPattern();
    var1_5 = new Integer(unArg_6.size());
    cond_4 = new Boolean(var1_5.intValue() == new Integer(1).intValue());
    if (cond_4.booleanValue()) {

      varRes_2 = new Vector();
      varRes_2.add(bind);
    }
    else {

      Vector var1_8 = null;
      OmlSetBind e_seq_9 = null;
      Vector arg_10 = null;
      IOmlPattern e_seq_12 = null;
      Vector unArg_13 = null;
      unArg_13 = bind.getPattern();
      e_seq_12 = (IOmlPattern) unArg_13.get(0);
      arg_10 = new Vector();
      arg_10.add(e_seq_12);
      IOmlExpression arg_11 = null;
      arg_11 = (IOmlExpression) bind.getExpression();
      e_seq_9 = new OmlSetBind(arg_10, arg_11);
      var1_8 = new Vector();
      var1_8.add(e_seq_9);
      Vector var2_14 = null;
      OmlSetBind par_15 = null;
      Vector arg_16 = null;
      Vector unArg_18 = null;
      unArg_18 = bind.getPattern();
      arg_16 = new Vector(unArg_18.subList(1, unArg_18.size()));
      IOmlExpression arg_17 = null;
      arg_17 = (IOmlExpression) bind.getExpression();
      par_15 = new OmlSetBind(arg_16, arg_17);
      var2_14 = flattenSetBind((IOmlSetBind) par_15);
      varRes_2 = (Vector) var1_8.clone();
      varRes_2.addAll(var2_14);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=flattenSetBind#1|IOmlSetBind


// ***** VDMTOOLS START Name=flattenTypeBind#1|IOmlTypeBind KEEP=NO
  private Vector flattenTypeBind (final IOmlTypeBind bind) throws CGException {

    Vector varRes_2 = null;
    Boolean cond_4 = null;
    Integer var1_5 = null;
    Vector unArg_6 = null;
    unArg_6 = bind.getPattern();
    var1_5 = new Integer(unArg_6.size());
    cond_4 = new Boolean(var1_5.intValue() == new Integer(1).intValue());
    if (cond_4.booleanValue()) {

      varRes_2 = new Vector();
      varRes_2.add(bind);
    }
    else {

      Vector var1_8 = null;
      OmlTypeBind e_seq_9 = null;
      Vector arg_10 = null;
      IOmlPattern e_seq_12 = null;
      Vector unArg_13 = null;
      unArg_13 = bind.getPattern();
      e_seq_12 = (IOmlPattern) unArg_13.get(0);
      arg_10 = new Vector();
      arg_10.add(e_seq_12);
      IOmlType arg_11 = null;
      arg_11 = (IOmlType) bind.getType();
      e_seq_9 = new OmlTypeBind(arg_10, arg_11);
      var1_8 = new Vector();
      var1_8.add(e_seq_9);
      Vector var2_14 = null;
      OmlTypeBind par_15 = null;
      Vector arg_16 = null;
      Vector unArg_18 = null;
      unArg_18 = bind.getPattern();
      arg_16 = new Vector(unArg_18.subList(1, unArg_18.size()));
      IOmlType arg_17 = null;
      arg_17 = (IOmlType) bind.getType();
      par_15 = new OmlTypeBind(arg_16, arg_17);
      var2_14 = flattenTypeBind((IOmlTypeBind) par_15);
      varRes_2 = (Vector) var1_8.clone();
      varRes_2.addAll(var2_14);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=flattenTypeBind#1|IOmlTypeBind


// ***** VDMTOOLS START Name=translateBindListF#4|Vector|String|Integer|HolExpression KEEP=NO
  private Tuple translateBindListF (final Vector binds, final String freeVariablePrefix, final Integer freeVariableIndex, final HolExpression expression) throws CGException {

    Tuple varRes_5 = null;
    if (new Boolean(UTIL.equals(binds, new Vector())).booleanValue()) {

      varRes_5 = new Tuple(2);
      HolBindTranslation tmpVar_53 = null;
      tmpVar_53 = new HolBindTranslation((HolExpression) new HolNativeIdentifier(new String("T")), (HolExpression) expression);
      varRes_5.SetField(1, tmpVar_53);
      varRes_5.SetField(2, new Vector());
    }
    else {

      HolBindTranslation trans = null;
      HolIdentifier par_14 = null;
      String arg_15 = null;
      String var2_17 = null;
      Util obj_18 = null;
      obj_18 = (Util) new Util();
      var2_17 = UTIL.ConvertToString(obj_18.itoa(freeVariableIndex));
      arg_15 = freeVariablePrefix.concat(var2_17);
      par_14 = new HolIdentifier(arg_15);
      trans = translateBind((IOmlBind) (IOmlBind) binds.get(0), (HolIdentifier) par_14, (HolExpression) expression);
      {

        boolean succ_21;
        Tuple tmpVal_22 = new Tuple(2);
        HolExpression par_29 = null;
        par_29 = (HolExpression) (trans).newExpression;
        tmpVal_22 = translateBindListF(new Vector(binds.subList(1, binds.size())), freeVariablePrefix, new Integer(freeVariableIndex.intValue() + new Integer(1).intValue()), (HolExpression) par_29);
        Vector recIds = null;
        HolBindTranslation recTrans = null;
        succ_21 = true;
        {

          Vector e_l_31 = new Vector();
          for (int i_32 = 1; i_32 <= tmpVal_22.Length(); i_32++) 
            e_l_31.add(tmpVal_22.GetField(i_32));
          if (succ_21 = (2 == e_l_31.size())) {

            recTrans = (HolBindTranslation) e_l_31.get(0);
            recIds = (Vector) e_l_31.get(2 - 1);
          }
        }
        if (!succ_21) 
          UTIL.RunTime("Run-Time Error:Pattern match did not succeed in value definition");
        varRes_5 = new Tuple(2);
        HolBindTranslation tmpVar_33 = null;
        HolApplication tmpVar_34 = null;
        Vector arg_36 = null;
        HolExpression e_seq_38 = null;
        e_seq_38 = (HolExpression) (trans).binding;
        arg_36 = new Vector();
        arg_36.add(e_seq_38);
        HolExpression e_seq_40 = null;
        e_seq_40 = (HolExpression) (recTrans).binding;
        arg_36.add(e_seq_40);
        tmpVar_34 = new HolApplication(new HolNativeIdentifier(new String("$/\\")), arg_36);
        HolExpression tmpVar_42 = null;
        tmpVar_42 = (HolExpression) (recTrans).newExpression;
        tmpVar_33 = new HolBindTranslation((HolExpression) tmpVar_34, (HolExpression) tmpVar_42);
        varRes_5.SetField(1, tmpVar_33);
        Vector tmpVar_44 = null;
        Vector var2_46 = null;
        HolIdentifier e_seq_47 = null;
        String arg_48 = null;
        String var2_50 = null;
        Util obj_51 = null;
        obj_51 = (Util) new Util();
        var2_50 = UTIL.ConvertToString(obj_51.itoa(freeVariableIndex));
        arg_48 = freeVariablePrefix.concat(var2_50);
        e_seq_47 = new HolIdentifier(arg_48);
        var2_46 = new Vector();
        var2_46.add(e_seq_47);
        tmpVar_44 = (Vector) recIds.clone();
        tmpVar_44.addAll(var2_46);
        varRes_5.SetField(2, tmpVar_44);
      }
    }
    return varRes_5;
  }
// ***** VDMTOOLS END Name=translateBindListF#4|Vector|String|Integer|HolExpression


// ***** VDMTOOLS START Name=translateBind#3|IOmlBind|HolIdentifier|HolExpression KEEP=NO
  private HolBindTranslation translateBind (final IOmlBind node, final HolIdentifier freeVariable, final HolExpression expression) throws CGException {

    HolBindTranslation varRes_4 = null;
    if (new Boolean(node instanceof IOmlSetBind).booleanValue()) 
      varRes_4 = translateSetBind((IOmlSetBind) node, (HolIdentifier) freeVariable, (HolExpression) expression);
    else 
      if (new Boolean(node instanceof IOmlTypeBind).booleanValue()) 
        varRes_4 = translateTypeBind((IOmlTypeBind) node, (HolIdentifier) freeVariable, (HolExpression) expression);
      else {

        HolIdentifierError terror = null;
        String arg_10 = null;
        Vector unArg_11 = null;
        unArg_11 = new Vector();
        unArg_11.add(new String("Unknown bind: "));
        String e_seq_13 = null;
        e_seq_13 = node.identity();
        unArg_11.add(e_seq_13);
        String rdcseq_14 = new String();
        for (Iterator enm_17 = unArg_11.iterator(); enm_17.hasNext(); ) {

          String e_15 = UTIL.ConvertToString(enm_17.next());
          rdcseq_14 = rdcseq_14.concat(e_15);
        }
        arg_10 = rdcseq_14;
        terror = new HolIdentifierError(arg_10);
        varRes_4 = new HolBindTranslation((HolExpression) terror, (HolExpression) terror);
      }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=translateBind#3|IOmlBind|HolIdentifier|HolExpression


// ***** VDMTOOLS START Name=translateTypeBind#3|IOmlTypeBind|HolIdentifier|HolExpression KEEP=NO
  private HolBindTranslation translateTypeBind (final IOmlTypeBind bind, final HolIdentifier freeVariable, final HolExpression originalExpression) throws CGException {

    HolBindTranslation varRes_4 = null;
    {

      IOmlPattern pattern = null;
      Vector tmp_l_7 = null;
      tmp_l_7 = bind.getPattern();
      if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= tmp_l_7.size())) 
        pattern = (IOmlPattern) tmp_l_7.get(new Integer(1).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      HolType type = null;
      HolTypeTranslation tmpRec_10 = null;
      IOmlType par_11 = null;
      par_11 = (IOmlType) bind.getType();
      tmpRec_10 = translateType((IOmlType) par_11);
      type = (HolType) (tmpRec_10).type;
      {

        HolApplication typeMembership = null;
        HolIdentifier arg_14 = null;
        String arg_16 = null;
        String var2_18 = null;
        var2_18 = type.print(new org.overturetool.potrans.quotes.type());
        arg_16 = new String("inv_").concat(var2_18);
        arg_14 = new HolIdentifier(arg_16);
        Vector arg_15 = null;
        arg_15 = new Vector();
        arg_15.add(freeVariable);
        typeMembership = new HolApplication(arg_14, arg_15);
        HolQuantifier patternMatches = null;
        Vector arg_23 = null;
        arg_23 = (Vector) UTIL.ConvertToList(getIdentifiers(pattern));
        patternMatches = new HolQuantifier(new org.overturetool.potrans.quotes.existential(), arg_23, null, (HolExpression) translatePatternToPredicate((IOmlPattern) pattern, (HolExpression) freeVariable));
        HolLetExpression patternVariableRewriting = null;
        Vector par_33 = null;
        par_33 = new Vector();
        par_33.add(pattern);
        Vector par_35 = null;
        OmlName e_seq_36 = null;
        String arg_38 = null;
        arg_38 = freeVariable.print();
        e_seq_36 = new OmlName(new String(""), arg_38);
        par_35 = new Vector();
        par_35.add(e_seq_36);
        patternVariableRewriting = (HolLetExpression) generateLetExpression(par_33, par_35, (HolExpression) originalExpression);
        Boolean cond_41 = null;
        Integer var1_42 = null;
        Vector unArg_43 = null;
        unArg_43 = bind.getPattern();
        var1_42 = new Integer(unArg_43.size());
        cond_41 = new Boolean((var1_42.intValue()) > (new Integer(1).intValue()));
        if (cond_41.booleanValue()) {

          HolIdentifierError berror = (HolIdentifierError) new HolIdentifierError(new String("Not supporting multiple patterns in a single bind (outside a bind list)"));
          varRes_4 = new HolBindTranslation((HolExpression) berror, (HolExpression) berror);
        }
        else {

          HolApplication tmpVar_45 = null;
          Vector arg_47 = null;
          arg_47 = new Vector();
          arg_47.add(typeMembership);
          arg_47.add(patternMatches);
          tmpVar_45 = new HolApplication(new HolNativeIdentifier(new String("$/\\")), arg_47);
          varRes_4 = new HolBindTranslation((HolExpression) tmpVar_45, (HolExpression) patternVariableRewriting);
        }
      }
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=translateTypeBind#3|IOmlTypeBind|HolIdentifier|HolExpression


// ***** VDMTOOLS START Name=translateSetBind#3|IOmlSetBind|HolIdentifier|HolExpression KEEP=NO
  private HolBindTranslation translateSetBind (final IOmlSetBind bind, final HolIdentifier freeVariable, final HolExpression originalExpression) throws CGException {

    HolBindTranslation varRes_4 = null;
    {

      IOmlPattern pattern = null;
      Vector tmp_l_7 = null;
      tmp_l_7 = bind.getPattern();
      if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= tmp_l_7.size())) 
        pattern = (IOmlPattern) tmp_l_7.get(new Integer(1).intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      {

        HolApplication setMembership = null;
        Vector arg_12 = null;
        arg_12 = new Vector();
        arg_12.add(freeVariable);
        HolExpression e_seq_15 = null;
        IOmlExpression par_16 = null;
        par_16 = (IOmlExpression) bind.getExpression();
        e_seq_15 = (HolExpression) translateExpression((IOmlExpression) par_16);
        arg_12.add(e_seq_15);
        setMembership = new HolApplication(new HolNativeIdentifier(new String("$IN")), arg_12);
        HolQuantifier patternMatches = null;
        Vector arg_19 = null;
        arg_19 = (Vector) UTIL.ConvertToList(getIdentifiers(pattern));
        patternMatches = new HolQuantifier(new org.overturetool.potrans.quotes.existential(), arg_19, null, (HolExpression) translatePatternToPredicate((IOmlPattern) pattern, (HolExpression) freeVariable));
        HolLetExpression patternVariableRewriting = null;
        Vector par_29 = null;
        par_29 = new Vector();
        par_29.add(pattern);
        Vector par_31 = null;
        OmlName e_seq_32 = null;
        String arg_34 = null;
        arg_34 = freeVariable.print();
        e_seq_32 = new OmlName(new String(""), arg_34);
        par_31 = new Vector();
        par_31.add(e_seq_32);
        patternVariableRewriting = (HolLetExpression) generateLetExpression(par_29, par_31, (HolExpression) originalExpression);
        Boolean cond_37 = null;
        Integer var1_38 = null;
        Vector unArg_39 = null;
        unArg_39 = bind.getPattern();
        var1_38 = new Integer(unArg_39.size());
        cond_37 = new Boolean((var1_38.intValue()) > (new Integer(1).intValue()));
        if (cond_37.booleanValue()) {

          HolIdentifierError berror = (HolIdentifierError) new HolIdentifierError(new String("Not supporting multiple patterns in one bind"));
          varRes_4 = new HolBindTranslation((HolExpression) berror, (HolExpression) berror);
        }
        else {

          HolApplication tmpVar_41 = null;
          Vector arg_43 = null;
          arg_43 = new Vector();
          arg_43.add(setMembership);
          arg_43.add(patternMatches);
          tmpVar_41 = new HolApplication(new HolNativeIdentifier(new String("$/\\")), arg_43);
          varRes_4 = new HolBindTranslation((HolExpression) tmpVar_41, (HolExpression) patternVariableRewriting);
        }
      }
    }
    return varRes_4;
  }
// ***** VDMTOOLS END Name=translateSetBind#3|IOmlSetBind|HolIdentifier|HolExpression

}
;
