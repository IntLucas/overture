//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolSetComprehension extends HolExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=element KEEP=NO
  private HolExpression element = null;
// ***** VDMTOOLS END Name=element

// ***** VDMTOOLS START Name=restrictions KEEP=NO
  private Vector restrictions = null;
// ***** VDMTOOLS END Name=restrictions


// ***** VDMTOOLS START Name=vdm_init_HolSetComprehension KEEP=NO
  private void vdm_init_HolSetComprehension () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolSetComprehension


// ***** VDMTOOLS START Name=HolSetComprehension KEEP=NO
  public HolSetComprehension () throws CGException {
    vdm_init_HolSetComprehension();
  }
// ***** VDMTOOLS END Name=HolSetComprehension


// ***** VDMTOOLS START Name=HolSetComprehension#2|HolExpression|Vector KEEP=NO
  public HolSetComprehension (final HolExpression newElement, final Vector newRestrictions) throws CGException {

    vdm_init_HolSetComprehension();
    {

      element = (HolExpression) UTIL.clone(newElement);
      restrictions = (Vector) UTIL.ConvertToList(UTIL.clone(newRestrictions));
    }
  }
// ***** VDMTOOLS END Name=HolSetComprehension#2|HolExpression|Vector


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    element.setTypeInformation((HolTypeDescription) typeInfo);
    for (int ilb_7 = 1; ilb_7 <= new Integer(restrictions.size()).intValue(); ilb_7++) {

      Integer i = new Integer(ilb_7);
      HolExpression obj_9 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= restrictions.size())) 
        obj_9 = (HolExpression) restrictions.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_9.setTypeInformation((HolTypeDescription) typeInfo);
    }
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(restrictions.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      HashSet rhs_5 = new HashSet();
      HashSet var2_7 = new HashSet();
      HolExpression obj_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= restrictions.size())) 
        obj_8 = (HolExpression) restrictions.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_7 = obj_8.requires();
      rhs_5 = (HashSet) result.clone();
      rhs_5.addAll(var2_7);
      result = (HashSet) UTIL.clone(rhs_5);
    }
    HashSet rexpr_11 = new HashSet();
    HashSet var1_12 = new HashSet();
    HashSet var1_13 = new HashSet();
    var1_13 = element.requires();
    var1_12 = (HashSet) var1_13.clone();
    var1_12.addAll(result);
    HashSet var2_15 = new HashSet();
    HashSet var1_16 = new HashSet();
    var1_16 = element.requires();
    var2_15 = (HashSet) var1_16.clone();
    var2_15.retainAll(result);
    rexpr_11 = (HashSet) var1_12.clone();
    rexpr_11.removeAll(var2_15);
    return rexpr_11;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  public String print () throws CGException {

    String result = null;
    String rhs_1 = null;
    Vector unArg_2 = null;
    unArg_2 = new Vector();
    unArg_2.add(new String("{"));
    String e_seq_4 = null;
    e_seq_4 = element.print();
    unArg_2.add(e_seq_4);
    unArg_2.add(new String(" | "));
    String rdcseq_6 = new String();
    for (Iterator enm_9 = unArg_2.iterator(); enm_9.hasNext(); ) {

      String e_7 = UTIL.ConvertToString(enm_9.next());
      rdcseq_6 = rdcseq_6.concat(e_7);
    }
    rhs_1 = rdcseq_6;
    result = UTIL.ConvertToString(UTIL.clone(rhs_1));
    for (int ilb_13 = 1; ilb_13 <= new Integer(restrictions.size()).intValue(); ilb_13++) {

      Integer i = new Integer(ilb_13);
      {

        String rhs_14 = null;
        Vector unArg_15 = null;
        unArg_15 = new Vector();
        unArg_15.add(result);
        String e_seq_17 = null;
        HolExpression obj_18 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= restrictions.size())) 
          obj_18 = (HolExpression) restrictions.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        e_seq_17 = obj_18.print();
        unArg_15.add(e_seq_17);
        String rdcseq_21 = new String();
        for (Iterator enm_24 = unArg_15.iterator(); enm_24.hasNext(); ) {

          String e_22 = UTIL.ConvertToString(enm_24.next());
          rdcseq_21 = rdcseq_21.concat(e_22);
        }
        rhs_14 = rdcseq_21;
        result = UTIL.ConvertToString(UTIL.clone(rhs_14));
        if (new Boolean((i.intValue()) < (new Integer(restrictions.size()).intValue())).booleanValue()) {

          String rhs_29 = null;
          Vector unArg_30 = null;
          unArg_30 = new Vector();
          unArg_30.add(result);
          unArg_30.add(new String(" /\\ "));
          String rdcseq_33 = new String();
          for (Iterator enm_36 = unArg_30.iterator(); enm_36.hasNext(); ) {

            String e_34 = UTIL.ConvertToString(enm_36.next());
            rdcseq_33 = rdcseq_33.concat(e_34);
          }
          rhs_29 = rdcseq_33;
          result = UTIL.ConvertToString(UTIL.clone(rhs_29));
        }
      }
    }
    String rexpr_37 = null;
    Vector unArg_38 = null;
    unArg_38 = new Vector();
    unArg_38.add(result);
    unArg_38.add(new String("}"));
    String rdcseq_41 = new String();
    for (Iterator enm_44 = unArg_38.iterator(); enm_44.hasNext(); ) {

      String e_42 = UTIL.ConvertToString(enm_44.next());
      rdcseq_41 = rdcseq_41.concat(e_42);
    }
    rexpr_37 = rdcseq_41;
    return rexpr_37;
  }
// ***** VDMTOOLS END Name=print


// ***** VDMTOOLS START Name=setElement#1|HolExpression KEEP=NO
  public HolSetComprehension setElement (final HolExpression newElement) throws CGException {

    element = (HolExpression) UTIL.clone(newElement);
    return (HolSetComprehension) this;
  }
// ***** VDMTOOLS END Name=setElement#1|HolExpression


// ***** VDMTOOLS START Name=getElement KEEP=NO
  public HolExpression getElement () throws CGException {
    return (HolExpression) element;
  }
// ***** VDMTOOLS END Name=getElement

}
;
