//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlRecursiveTrapStatement extends IOmlRecursiveTrapStatement {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivTrapList KEEP=NO
  private Vector ivTrapList = null;
// ***** VDMTOOLS END Name=ivTrapList

// ***** VDMTOOLS START Name=ivInPart KEEP=NO
  private IOmlStatement ivInPart = null;
// ***** VDMTOOLS END Name=ivInPart


// ***** VDMTOOLS START Name=vdm_init_OmlRecursiveTrapStatement KEEP=NO
  private void vdm_init_OmlRecursiveTrapStatement () throws CGException {
    try {

      ivTrapList = new Vector();
      ivInPart = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlRecursiveTrapStatement


// ***** VDMTOOLS START Name=OmlRecursiveTrapStatement KEEP=NO
  public OmlRecursiveTrapStatement () throws CGException {
    vdm_init_OmlRecursiveTrapStatement();
  }
// ***** VDMTOOLS END Name=OmlRecursiveTrapStatement


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("RecursiveTrapStatement");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitRecursiveTrapStatement((IOmlRecursiveTrapStatement) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlRecursiveTrapStatement#2|Vector|IOmlStatement KEEP=NO
  public OmlRecursiveTrapStatement (final Vector p1, final IOmlStatement p2) throws CGException {

    vdm_init_OmlRecursiveTrapStatement();
    {

      setTrapList(p1);
      setInPart((IOmlStatement) p2);
    }
  }
// ***** VDMTOOLS END Name=OmlRecursiveTrapStatement#2|Vector|IOmlStatement


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("trap_list");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setTrapList((Vector) data.get(fname));
    }
    {

      String fname = new String("in_part");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setInPart((IOmlStatement) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getTrapList KEEP=NO
  public Vector getTrapList () throws CGException {
    return ivTrapList;
  }
// ***** VDMTOOLS END Name=getTrapList


// ***** VDMTOOLS START Name=setTrapList#1|Vector KEEP=NO
  public void setTrapList (final Vector parg) throws CGException {
    ivTrapList = (Vector) UTIL.ConvertToList(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setTrapList#1|Vector


// ***** VDMTOOLS START Name=addTrapList#1|IOmlNode KEEP=NO
  public void addTrapList (final IOmlNode parg) throws CGException {
    ivTrapList.add(parg);
  }
// ***** VDMTOOLS END Name=addTrapList#1|IOmlNode


// ***** VDMTOOLS START Name=getInPart KEEP=NO
  public IOmlStatement getInPart () throws CGException {
    return (IOmlStatement) ivInPart;
  }
// ***** VDMTOOLS END Name=getInPart


// ***** VDMTOOLS START Name=setInPart#1|IOmlStatement KEEP=NO
  public void setInPart (final IOmlStatement parg) throws CGException {
    ivInPart = (IOmlStatement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setInPart#1|IOmlStatement

}
;
