//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class HolRecordType extends HolType {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=tag KEEP=NO
  private HolTypeIdentifier tag = null;
// ***** VDMTOOLS END Name=tag

// ***** VDMTOOLS START Name=fieldNames KEEP=NO
  private Vector fieldNames = null;
// ***** VDMTOOLS END Name=fieldNames

// ***** VDMTOOLS START Name=fieldTypes KEEP=NO
  private Vector fieldTypes = null;
// ***** VDMTOOLS END Name=fieldTypes


// ***** VDMTOOLS START Name=vdm_init_HolRecordType KEEP=NO
  private void vdm_init_HolRecordType () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolRecordType


// ***** VDMTOOLS START Name=HolRecordType KEEP=NO
  public HolRecordType () throws CGException {
    vdm_init_HolRecordType();
  }
// ***** VDMTOOLS END Name=HolRecordType


// ***** VDMTOOLS START Name=HolRecordType#3|HolTypeIdentifier|Vector|Vector KEEP=NO
  public HolRecordType (final HolTypeIdentifier newTag, final Vector newFieldNames, final Vector newFieldTypes) throws CGException {

    vdm_init_HolRecordType();
    {

      tag = (HolTypeIdentifier) UTIL.clone(newTag);
      fieldNames = (Vector) UTIL.ConvertToList(UTIL.clone(newFieldNames));
      fieldTypes = (Vector) UTIL.ConvertToList(UTIL.clone(newFieldTypes));
    }
  }
// ***** VDMTOOLS END Name=HolRecordType#3|HolTypeIdentifier|Vector|Vector


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {
    for (int ilb_5 = 1; ilb_5 <= new Integer(fieldTypes.size()).intValue(); ilb_5++) {

      Integer i = new Integer(ilb_5);
      HolType obj_7 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= fieldTypes.size())) 
        obj_7 = (HolType) fieldTypes.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      obj_7.setTypeInformation((HolTypeDescription) typeInfo);
    }
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {

    HashSet result = new HashSet();
    for (int ilb_4 = 1; ilb_4 <= new Integer(fieldTypes.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      HashSet rhs_5 = new HashSet();
      HashSet var2_7 = new HashSet();
      HolType obj_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= fieldTypes.size())) 
        obj_8 = (HolType) fieldTypes.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      var2_7 = obj_8.requires();
      rhs_5 = (HashSet) result.clone();
      rhs_5.addAll(var2_7);
      result = (HashSet) UTIL.clone(rhs_5);
    }
    return result;
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print#1|Object KEEP=NO
  public String print (final Object specType) throws CGException {

    String result = null;
    result = UTIL.ConvertToString(UTIL.clone(new String("<|")));
    for (int ilb_6 = 1; ilb_6 <= new Integer(fieldNames.size()).intValue(); ilb_6++) {

      Integer i = new Integer(ilb_6);
      {

        String rhs_7 = null;
        Vector unArg_8 = null;
        unArg_8 = new Vector();
        unArg_8.add(result);
        unArg_8.add(new String(" "));
        String e_seq_11 = null;
        HolIdentifier obj_12 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= fieldNames.size())) 
          obj_12 = (HolIdentifier) fieldNames.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        e_seq_11 = obj_12.print();
        unArg_8.add(e_seq_11);
        unArg_8.add(new String(":"));
        String e_seq_16 = null;
        HolType obj_17 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= fieldTypes.size())) 
          obj_17 = (HolType) fieldTypes.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        e_seq_16 = obj_17.print(new org.overturetool.potrans.quotes.type());
        unArg_8.add(e_seq_16);
        String rdcseq_21 = new String();
        for (Iterator enm_24 = unArg_8.iterator(); enm_24.hasNext(); ) {

          String e_22 = UTIL.ConvertToString(enm_24.next());
          rdcseq_21 = rdcseq_21.concat(e_22);
        }
        rhs_7 = rdcseq_21;
        result = UTIL.ConvertToString(UTIL.clone(rhs_7));
        if (new Boolean(!(i.intValue() == new Integer(fieldNames.size()).intValue())).booleanValue()) {

          String rhs_29 = null;
          Vector unArg_30 = null;
          unArg_30 = new Vector();
          unArg_30.add(result);
          unArg_30.add(new String("; "));
          String rdcseq_33 = new String();
          for (Iterator enm_36 = unArg_30.iterator(); enm_36.hasNext(); ) {

            String e_34 = UTIL.ConvertToString(enm_36.next());
            rdcseq_33 = rdcseq_33.concat(e_34);
          }
          rhs_29 = rdcseq_33;
          result = UTIL.ConvertToString(UTIL.clone(rhs_29));
        }
      }
    }
    String rexpr_37 = null;
    Vector unArg_38 = null;
    unArg_38 = new Vector();
    unArg_38.add(result);
    unArg_38.add(new String(" |>"));
    String rdcseq_41 = new String();
    for (Iterator enm_44 = unArg_38.iterator(); enm_44.hasNext(); ) {

      String e_42 = UTIL.ConvertToString(enm_44.next());
      rdcseq_41 = rdcseq_41.concat(e_42);
    }
    rexpr_37 = rdcseq_41;
    return rexpr_37;
  }
// ***** VDMTOOLS END Name=print#1|Object


// ***** VDMTOOLS START Name=definitionShouldProvide KEEP=NO
  public HashSet definitionShouldProvide () throws CGException {

    HashSet result = new HashSet();
    String enum_set_1 = null;
    String var2_3 = null;
    var2_3 = tag.print(new org.overturetool.potrans.quotes.plain());
    enum_set_1 = new String("make_").concat(var2_3);
    result = new HashSet();
    result.add(enum_set_1);
    for (int ilb_8 = 1; ilb_8 <= new Integer(fieldNames.size()).intValue(); ilb_8++) {

      Integer i = new Integer(ilb_8);
      String elem_10 = null;
      String var1_11 = null;
      String var1_12 = null;
      var1_12 = tag.print(new org.overturetool.potrans.quotes.plain());
      var1_11 = var1_12.concat(new String("_field_"));
      String var2_15 = null;
      Util obj_16 = null;
      obj_16 = (Util) new Util();
      var2_15 = UTIL.ConvertToString(obj_16.itoa(i));
      elem_10 = var1_11.concat(var2_15);
      result.add(elem_10);
    }
    return result;
  }
// ***** VDMTOOLS END Name=definitionShouldProvide


// ***** VDMTOOLS START Name=getOrderedRecordConstructor KEEP=NO
  public HolFunctionDefinition getOrderedRecordConstructor () throws CGException {

    Vector fieldEnum = getFieldEnumeration(fieldNames);
    HolFunctionDefinition rexpr_4 = null;
    String arg_5 = null;
    String var2_8 = null;
    var2_8 = tag.print(new org.overturetool.potrans.quotes.plain());
    arg_5 = new String("make_").concat(var2_8);
    rexpr_4 = new HolFunctionDefinition(arg_5, new HolLambdaFunction(fieldEnum, new HolFunctionType(new HolProductType(fieldTypes), this), new HolRecordUpdate(null, fieldNames, fieldEnum)));
    return (HolFunctionDefinition) rexpr_4;
  }
// ***** VDMTOOLS END Name=getOrderedRecordConstructor


// ***** VDMTOOLS START Name=getNumberedFieldSelectors KEEP=NO
  public Vector getNumberedFieldSelectors () throws CGException {

    Vector defs = new Vector();
    for (int ilb_4 = 1; ilb_4 <= new Integer(fieldNames.size()).intValue(); ilb_4++) {

      Integer i = new Integer(ilb_4);
      {

        HolFunctionDefinition newSelectionFUnction = null;
        String arg_7 = null;
        String var1_9 = null;
        String var1_10 = null;
        var1_10 = tag.print(new org.overturetool.potrans.quotes.plain());
        var1_9 = var1_10.concat(new String("_field_"));
        String var2_13 = null;
        Util obj_14 = null;
        obj_14 = (Util) new Util();
        var2_13 = UTIL.ConvertToString(obj_14.itoa(i));
        arg_7 = var1_9.concat(var2_13);
        HolLambdaFunction arg_8 = null;
        Vector arg_16 = null;
        arg_16 = new Vector();
        arg_16.add(new HolIdentifier(new String("record")));
        HolFunctionType arg_17 = null;
        HolProductType arg_21 = null;
        Vector arg_23 = null;
        arg_23 = new Vector();
        arg_23.add(tag);
        arg_21 = new HolProductType(arg_23);
        HolType arg_22 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= fieldTypes.size())) 
          arg_22 = (HolType) fieldTypes.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        arg_17 = new HolFunctionType(arg_21, arg_22);
        HolRecordFieldSelection arg_18 = null;
        HolIdentifier arg_28 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= fieldNames.size())) 
          arg_28 = (HolIdentifier) fieldNames.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        arg_18 = new HolRecordFieldSelection(new HolIdentifier(new String("record")), arg_28);
        arg_8 = new HolLambdaFunction(arg_16, arg_17, arg_18);
        newSelectionFUnction = new HolFunctionDefinition(arg_7, arg_8);
        defs.add(newSelectionFUnction);
      }
    }
    return defs;
  }
// ***** VDMTOOLS END Name=getNumberedFieldSelectors


// ***** VDMTOOLS START Name=getFieldEnumeration#1|Vector KEEP=NO
  private Vector getFieldEnumeration (final Vector fields) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(fields, new Vector())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      Vector unArg_7 = null;
      Vector e_seq_8 = null;
      HolIdentifier e_seq_9 = null;
      String arg_10 = null;
      Vector unArg_11 = null;
      String e_seq_12 = null;
      HolIdentifier obj_13 = null;
      obj_13 = (HolIdentifier) (HolIdentifier) fields.get(0);
      e_seq_12 = obj_13.print();
      unArg_11 = new Vector();
      unArg_11.add(e_seq_12);
      unArg_11.add(new String("_recConstrParam"));
      String rdcseq_16 = new String();
      for (Iterator enm_19 = unArg_11.iterator(); enm_19.hasNext(); ) {

        String e_17 = UTIL.ConvertToString(enm_19.next());
        rdcseq_16 = rdcseq_16.concat(e_17);
      }
      arg_10 = rdcseq_16;
      e_seq_9 = new HolIdentifier(arg_10);
      e_seq_8 = new Vector();
      e_seq_8.add(e_seq_9);
      unArg_7 = new Vector();
      unArg_7.add(e_seq_8);
      unArg_7.add(getFieldEnumeration(new Vector(fields.subList(1, fields.size()))));
      Vector rdcseq_23 = new Vector();
      for (Iterator enm_26 = unArg_7.iterator(); enm_26.hasNext(); ) {

        Vector e_24 = (Vector) UTIL.ConvertToList(enm_26.next());
        rdcseq_23.addAll(e_24);
      }
      varRes_2 = rdcseq_23;
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=getFieldEnumeration#1|Vector

}
;
