//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public abstract class HolTypeDefinition extends HolDefinition {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=name KEEP=NO
  protected HolTypeIdentifier name = null;
// ***** VDMTOOLS END Name=name

// ***** VDMTOOLS START Name=type KEEP=NO
  protected HolType type = null;
// ***** VDMTOOLS END Name=type

// ***** VDMTOOLS START Name=invar KEEP=NO
  protected HolFunction invar = null;
// ***** VDMTOOLS END Name=invar


// ***** VDMTOOLS START Name=vdm_init_HolTypeDefinition KEEP=NO
  private void vdm_init_HolTypeDefinition () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_HolTypeDefinition


// ***** VDMTOOLS START Name=HolTypeDefinition KEEP=NO
  public HolTypeDefinition () throws CGException {
    vdm_init_HolTypeDefinition();
  }
// ***** VDMTOOLS END Name=HolTypeDefinition


// ***** VDMTOOLS START Name=processTypeInformation#1|HolTypeDescription KEEP=NO
  public HolTypeDescription processTypeInformation (final HolTypeDescription typeDesc) throws CGException {
    return (HolTypeDescription) typeDesc;
  }
// ***** VDMTOOLS END Name=processTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=setTypeInformation#1|HolTypeDescription KEEP=NO
  public void setTypeInformation (final HolTypeDescription typeInfo) throws CGException {

    type.setTypeInformation((HolTypeDescription) typeInfo);
    if (new Boolean(!UTIL.equals(invar, null)).booleanValue()) 
      invar.setTypeInformation((HolTypeDescription) typeInfo);
  }
// ***** VDMTOOLS END Name=setTypeInformation#1|HolTypeDescription


// ***** VDMTOOLS START Name=provides KEEP=NO
  abstract public HashSet provides () throws CGException ;
// ***** VDMTOOLS END Name=provides


// ***** VDMTOOLS START Name=requires KEEP=NO
  public HashSet requires () throws CGException {
    if (new Boolean(!UTIL.equals(invar, null)).booleanValue()) {

      HashSet rexpr_5 = new HashSet();
      HashSet var1_6 = new HashSet();
      var1_6 = type.requires();
      HashSet var2_7 = new HashSet();
      var2_7 = invar.requires();
      rexpr_5 = (HashSet) var1_6.clone();
      rexpr_5.addAll(var2_7);
      return rexpr_5;
    }
    else {

      HashSet rexpr_4 = new HashSet();
      rexpr_4 = type.requires();
      return rexpr_4;
    }
  }
// ***** VDMTOOLS END Name=requires


// ***** VDMTOOLS START Name=print KEEP=NO
  abstract public String print () throws CGException ;
// ***** VDMTOOLS END Name=print

}
;
