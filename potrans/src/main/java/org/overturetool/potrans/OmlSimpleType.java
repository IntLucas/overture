//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlSimpleType extends IOmlSimpleType {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivIdentifier KEEP=NO
  private String ivIdentifier = null;
// ***** VDMTOOLS END Name=ivIdentifier

// ***** VDMTOOLS START Name=ivType KEEP=NO
  private IOmlType ivType = null;
// ***** VDMTOOLS END Name=ivType

// ***** VDMTOOLS START Name=ivInvariant KEEP=NO
  private IOmlInvariant ivInvariant = null;
// ***** VDMTOOLS END Name=ivInvariant


// ***** VDMTOOLS START Name=vdm_init_OmlSimpleType KEEP=NO
  private void vdm_init_OmlSimpleType () throws CGException {
    try {

      ivIdentifier = UTIL.ConvertToString(new String());
      ivType = null;
      ivInvariant = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlSimpleType


// ***** VDMTOOLS START Name=OmlSimpleType KEEP=NO
  public OmlSimpleType () throws CGException {
    vdm_init_OmlSimpleType();
  }
// ***** VDMTOOLS END Name=OmlSimpleType


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("SimpleType");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitSimpleType((IOmlSimpleType) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlSimpleType#3|String|IOmlType|IOmlInvariant KEEP=NO
  public OmlSimpleType (final String p1, final IOmlType p2, final IOmlInvariant p3) throws CGException {

    vdm_init_OmlSimpleType();
    {

      setIdentifier(p1);
      setType((IOmlType) p2);
      setInvariant((IOmlInvariant) p3);
    }
  }
// ***** VDMTOOLS END Name=OmlSimpleType#3|String|IOmlType|IOmlInvariant


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("identifier");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setIdentifier(UTIL.ConvertToString(data.get(fname)));
    }
    {

      String fname = new String("type");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setType((IOmlType) data.get(fname));
    }
    {

      String fname = new String("invariant");
      Boolean cond_22 = null;
      cond_22 = new Boolean(data.containsKey(fname));
      if (cond_22.booleanValue()) 
        setInvariant((IOmlInvariant) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getIdentifier KEEP=NO
  public String getIdentifier () throws CGException {
    return ivIdentifier;
  }
// ***** VDMTOOLS END Name=getIdentifier


// ***** VDMTOOLS START Name=setIdentifier#1|String KEEP=NO
  public void setIdentifier (final String parg) throws CGException {
    ivIdentifier = UTIL.ConvertToString(UTIL.clone(parg));
  }
// ***** VDMTOOLS END Name=setIdentifier#1|String


// ***** VDMTOOLS START Name=getType KEEP=NO
  public IOmlType getType () throws CGException {
    return (IOmlType) ivType;
  }
// ***** VDMTOOLS END Name=getType


// ***** VDMTOOLS START Name=setType#1|IOmlType KEEP=NO
  public void setType (final IOmlType parg) throws CGException {
    ivType = (IOmlType) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setType#1|IOmlType


// ***** VDMTOOLS START Name=getInvariant KEEP=NO
  public IOmlInvariant getInvariant () throws CGException {
    return (IOmlInvariant) ivInvariant;
  }
// ***** VDMTOOLS END Name=getInvariant


// ***** VDMTOOLS START Name=hasInvariant KEEP=NO
  public Boolean hasInvariant () throws CGException {
    return new Boolean(!UTIL.equals(ivInvariant, null));
  }
// ***** VDMTOOLS END Name=hasInvariant


// ***** VDMTOOLS START Name=setInvariant#1|IOmlInvariant KEEP=NO
  public void setInvariant (final IOmlInvariant parg) throws CGException {
    ivInvariant = (IOmlInvariant) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setInvariant#1|IOmlInvariant

}
;
