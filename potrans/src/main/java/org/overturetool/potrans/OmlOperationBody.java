//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 24-Oct-2008 08:59:25)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.potrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
// ***** VDMTOOLS END Name=imports



public class OmlOperationBody extends IOmlOperationBody {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivStatement KEEP=NO
  private IOmlStatement ivStatement = null;
// ***** VDMTOOLS END Name=ivStatement

// ***** VDMTOOLS START Name=ivNotYetSpecified KEEP=NO
  private Boolean ivNotYetSpecified = null;
// ***** VDMTOOLS END Name=ivNotYetSpecified

// ***** VDMTOOLS START Name=ivSubclassResponsibility KEEP=NO
  private Boolean ivSubclassResponsibility = null;
// ***** VDMTOOLS END Name=ivSubclassResponsibility


// ***** VDMTOOLS START Name=vdm_init_OmlOperationBody KEEP=NO
  private void vdm_init_OmlOperationBody () throws CGException {
    try {

      ivStatement = null;
      ivNotYetSpecified = null;
      ivSubclassResponsibility = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_OmlOperationBody


// ***** VDMTOOLS START Name=OmlOperationBody KEEP=NO
  public OmlOperationBody () throws CGException {
    vdm_init_OmlOperationBody();
  }
// ***** VDMTOOLS END Name=OmlOperationBody


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("OperationBody");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept#1|IOmlVisitor KEEP=NO
  public void accept (final IOmlVisitor pVisitor) throws CGException {
    pVisitor.visitOperationBody((IOmlOperationBody) this);
  }
// ***** VDMTOOLS END Name=accept#1|IOmlVisitor


// ***** VDMTOOLS START Name=OmlOperationBody#3|IOmlStatement|Boolean|Boolean KEEP=NO
  public OmlOperationBody (final IOmlStatement p1, final Boolean p2, final Boolean p3) throws CGException {

    vdm_init_OmlOperationBody();
    {

      setStatement((IOmlStatement) p1);
      setNotYetSpecified(p2);
      setSubclassResponsibility(p3);
    }
  }
// ***** VDMTOOLS END Name=OmlOperationBody#3|IOmlStatement|Boolean|Boolean


// ***** VDMTOOLS START Name=init#1|HashMap KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("statement");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setStatement((IOmlStatement) data.get(fname));
    }
    {

      String fname = new String("not_yet_specified");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setNotYetSpecified((Boolean) data.get(fname));
    }
    {

      String fname = new String("subclass_responsibility");
      Boolean cond_22 = null;
      cond_22 = new Boolean(data.containsKey(fname));
      if (cond_22.booleanValue()) 
        setSubclassResponsibility((Boolean) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init#1|HashMap


// ***** VDMTOOLS START Name=getStatement KEEP=NO
  public IOmlStatement getStatement () throws CGException {
    return (IOmlStatement) ivStatement;
  }
// ***** VDMTOOLS END Name=getStatement


// ***** VDMTOOLS START Name=hasStatement KEEP=NO
  public Boolean hasStatement () throws CGException {
    return new Boolean(!UTIL.equals(ivStatement, null));
  }
// ***** VDMTOOLS END Name=hasStatement


// ***** VDMTOOLS START Name=setStatement#1|IOmlStatement KEEP=NO
  public void setStatement (final IOmlStatement parg) throws CGException {
    ivStatement = (IOmlStatement) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setStatement#1|IOmlStatement


// ***** VDMTOOLS START Name=getNotYetSpecified KEEP=NO
  public Boolean getNotYetSpecified () throws CGException {
    return ivNotYetSpecified;
  }
// ***** VDMTOOLS END Name=getNotYetSpecified


// ***** VDMTOOLS START Name=setNotYetSpecified#1|Boolean KEEP=NO
  public void setNotYetSpecified (final Boolean parg) throws CGException {
    ivNotYetSpecified = (Boolean) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setNotYetSpecified#1|Boolean


// ***** VDMTOOLS START Name=getSubclassResponsibility KEEP=NO
  public Boolean getSubclassResponsibility () throws CGException {
    return ivSubclassResponsibility;
  }
// ***** VDMTOOLS END Name=getSubclassResponsibility


// ***** VDMTOOLS START Name=setSubclassResponsibility#1|Boolean KEEP=NO
  public void setSubclassResponsibility (final Boolean parg) throws CGException {
    ivSubclassResponsibility = (Boolean) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setSubclassResponsibility#1|Boolean

}
;
