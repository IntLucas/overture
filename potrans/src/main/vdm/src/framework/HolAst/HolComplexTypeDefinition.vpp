class HolComplexTypeDefinition is subclass of HolTypeDefinition

instance variables

operations

public HolComplexTypeDefinition : HolTypeIdentifier * (HolRecordType | HolUnionType | HolQuoteType) * [HolFunction] ==> HolComplexTypeDefinition
HolComplexTypeDefinition(newName, newType, newInv) ==
(
	name := newName;
	type := newType;
	invar  := newInv
);

public print : () ==> seq of char
print () ==
	let
		namep : seq of char = name.print(<plain>),
		typeDefinition : seq of char = 
			if isofclass(HolUnionType, type) or isofclass(HolQuoteType, type) then		-- TODO make Union and Quote type regular types
				conc ["Hol_datatype `", name.print(<plain>), " = ", type.print(<type>), "`;\n"]
			else 	-- (isofclass(HolRecordType, type))
				let
					defs = definitionShouldProvide(type)
				in
					conc 
					[
						"Hol_datatype `", name.print(<plain>), " = ", type.print(<type>), "`;\n",
						getOrderedRecordConstructor(type).print(),
						printNumberedFieldSelectors(type),
						"BasicProvers.export_rewrites([" ^ printExportDefs(defs) ^ "]);\n"
					]
	in
		let
			invariantDef : seq of char = 
				(
					if invar = nil then
						new HolFunctionDefinition
						(
							conc ["inv_", namep], 
							new HolLambdaFunction
							(
								[new HolIdentifier("inv_param")],
								new HolFunctionType([name], new HolNativeTypeIdentifier("bool")),
								new HolNativeIdentifier("T")
							)
						).print()
					else
						(new HolFunctionDefinition(conc ["inv_", namep], invar)).print()
				)
				^
				"BasicProvers.export_rewrites([\"inv_" ^ namep ^ "_def\"]);\n"
		in
			return conc [	-- Define type
							typeDefinition,
							-- Define invariant (afterwards, because type does not need invariant and invariant might need type)
							invariantDef
						]
;

public provides : () ==> set of seq of char
provides() == 
(
	dcl result : set of seq of char := {name.print(<plain>)};
	if isofclass(HolRecordType, type) then 
		result := result union definitionShouldProvide(type);
	if isofclass(HolQuoteType, type) then 
		result := result union quoteLiteral(type);
	
	if invar <> nil then 
		return result union {"inv_" ^ name.print(<plain>)}
	else
		return result
);

public requires : () ==> set of seq of char
requires() == 
(
	dcl result : set of seq of char := {};
	if invar <> nil then 
		result := type.requires() union invar.requires()
	else
		result := type.requires();
	return result \ provides()				-- The definition consists of multiple statements, they are allowed to make use of each other (their correct order will (should) be assured by this class)
);

printNumberedFieldSelectors : HolRecordType ==> seq of char		-- No direct type casts possible, so indirect typecast
printNumberedFieldSelectors (recType) ==
	let
		defs : seq of HolFunctionDefinition = recType.getNumberedFieldSelectors()
	in
	(
		dcl result : seq of char := "";
		for i = 1 to len defs do
		(
			result := result ^ defs(i).print();
		);
		return result
	);
	
printExportDefs : set of seq of char ==> seq of char		-- No direct type casts possible, so indirect typecast
printExportDefs (defs) ==
(
	dcl result : seq of char := "";
	dcl counter : nat := 0;
	for all defin in set defs do
	(
		result := result ^ "\"" ^ defin ^ "_def\"";
		counter := counter + 1;
		if counter < (card defs) then 
			result := result ^ ", ";
	);
	return result
)

functions

getOrderedRecordConstructor : HolRecordType -> HolFunctionDefinition		-- No direct type casts possible, so indirect typecast
getOrderedRecordConstructor (recType) ==
	recType.getOrderedRecordConstructor();

definitionShouldProvide : HolRecordType -> set of seq of char
definitionShouldProvide(recType) ==
	recType.definitionShouldProvide();

quoteLiteral : HolQuoteType -> set of seq of char
quoteLiteral(qType) ==
	qType.provides();

end HolComplexTypeDefinition
