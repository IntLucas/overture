//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.jml.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.util.*;
import org.overturetool.jml.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class JmlBinaryOperatorQuotes implements IJmlBinaryOperatorQuotes {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp




































// ***** VDMTOOLS START Name=qmap KEEP=NO
  private static HashMap qmap = new HashMap();
// ***** VDMTOOLS END Name=qmap


// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    try {

      JmlBinaryOperatorQuotes.qmap = new HashMap();
      JmlBinaryOperatorQuotes.qmap.put(IQUNION, new String("union"));
      JmlBinaryOperatorQuotes.qmap.put(IQMINUS, new String("-"));
      JmlBinaryOperatorQuotes.qmap.put(IQLOR, new String("||"));
      JmlBinaryOperatorQuotes.qmap.put(IQSUBTYPE, new String("<SUBTYPE>"));// ?
      JmlBinaryOperatorQuotes.qmap.put(IQEQUIV, new String("<==>"));
      JmlBinaryOperatorQuotes.qmap.put(IQPLUSEQ, new String("+="));
      JmlBinaryOperatorQuotes.qmap.put(IQNOTINSET, new String("has"));//missing not
      JmlBinaryOperatorQuotes.qmap.put(IQEQ, new String("=="));
      JmlBinaryOperatorQuotes.qmap.put(IQG, new String(">"));
      JmlBinaryOperatorQuotes.qmap.put(IQNE, new String("!="));
      JmlBinaryOperatorQuotes.qmap.put(IQIMPLYBACK, new String("<=="));
      JmlBinaryOperatorQuotes.qmap.put(IQMINUSEQ, new String("-="));
      JmlBinaryOperatorQuotes.qmap.put(IQINSET, new String("has"));
      JmlBinaryOperatorQuotes.qmap.put(IQPROPERSUBSET, new String("isProperSubset"));
      JmlBinaryOperatorQuotes.qmap.put(IQDOMRESTTO, new String("restrictedTo"));
      JmlBinaryOperatorQuotes.qmap.put(IQRNGRESTTO, new String("rangeRestrictedTo"));
      JmlBinaryOperatorQuotes.qmap.put(IQLAND, new String("&&"));
      JmlBinaryOperatorQuotes.qmap.put(IQNOTEQUIV, new String("<=!=>"));
      JmlBinaryOperatorQuotes.qmap.put(IQGE, new String(">="));
      JmlBinaryOperatorQuotes.qmap.put(IQDIVIDE, new String("/"));
      JmlBinaryOperatorQuotes.qmap.put(IQMULEQ, new String("*="));
      JmlBinaryOperatorQuotes.qmap.put(IQCONCAT, new String("concat"));
      JmlBinaryOperatorQuotes.qmap.put(IQINTER, new String("intersection"));
      JmlBinaryOperatorQuotes.qmap.put(IQL, new String("<"));
      JmlBinaryOperatorQuotes.qmap.put(IQLE, new String("<="));
      JmlBinaryOperatorQuotes.qmap.put(IQREMEQ, new String("%="));
      JmlBinaryOperatorQuotes.qmap.put(IQINSTANCEOF, new String("instanceof"));
      JmlBinaryOperatorQuotes.qmap.put(IQDIVEQ, new String("/="));
      JmlBinaryOperatorQuotes.qmap.put(IQSUBSET, new String("isSubset"));
      JmlBinaryOperatorQuotes.qmap.put(IQREMAIN, new String("%"));
      JmlBinaryOperatorQuotes.qmap.put(IQPLUS, new String("+"));
      JmlBinaryOperatorQuotes.qmap.put(IQMUNION, new String("clashReplaceUnion"));
      JmlBinaryOperatorQuotes.qmap.put(IQIMPLY, new String("==>"));
      JmlBinaryOperatorQuotes.qmap.put(IQCOMP, new String("compose"));
      JmlBinaryOperatorQuotes.qmap.put(IQMULTIPLY, new String("*"));
    }
    catch (Throwable e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=static

  private static Long[] infix = {IQMINUS, IQLOR, IQEQUIV, IQPLUSEQ, IQEQ, 
		  IQG, IQNE, IQIMPLYBACK, IQMINUSEQ, IQLAND, IQNOTEQUIV, IQGE,
		  IQDIVIDE, IQMULEQ, IQL, IQLE, IQREMEQ, IQDIVEQ, IQREMAIN, IQPLUS,
		  IQIMPLY, IQMULTIPLY};
  

// ***** VDMTOOLS START Name=JmlBinaryOperatorQuotes KEEP=NO
  public JmlBinaryOperatorQuotes () throws CGException {
	  
  }
// ***** VDMTOOLS END Name=JmlBinaryOperatorQuotes


// ***** VDMTOOLS START Name=getQuoteName KEEP=NO
  static public String getQuoteName (final Long pid) throws CGException {
    return UTIL.ConvertToString(qmap.get(pid));
  }
// ***** VDMTOOLS END Name=getQuoteName


// ***** VDMTOOLS START Name=validQuote KEEP=NO
  static public Boolean validQuote (final Long pid) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(qmap.containsKey(pid));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=validQuote
  
  public static boolean isInfix(Long op) throws CGException {

	  boolean b = false;

	  if(hasElement(op))
		  	return true;

	  return b;

  }
  
  public static boolean hasElement(Long v) {
	  
	  boolean b = false;
	  
	  int i;
	  for(i = 0; i < infix.length; i++) {
		  
		  if(infix[i] == v)
			  return true;
	  }
	  
	  return b;
	  
  }

}
;
