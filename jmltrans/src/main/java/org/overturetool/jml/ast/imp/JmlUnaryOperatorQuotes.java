//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.jml.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;

import java.util.*;
import org.overturetool.jml.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class JmlUnaryOperatorQuotes implements IJmlUnaryOperatorQuotes {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


















// ***** VDMTOOLS START Name=qmap KEEP=NO
  private static HashMap qmap = new HashMap();
// ***** VDMTOOLS END Name=qmap

  private static Long[] args = {IQFLOOR, IQMINUS, IQABS, IQOLD, IQPLUS, IQNOT, IQINCREMENT, IQDECREMENT};

// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    try {

      JmlUnaryOperatorQuotes.qmap = new HashMap();
      JmlUnaryOperatorQuotes.qmap.put(IQCARD, new String("int_size"));
      JmlUnaryOperatorQuotes.qmap.put(IQMINUS, new String("-"));
      JmlUnaryOperatorQuotes.qmap.put(IQTL, new String("trailer"));
      JmlUnaryOperatorQuotes.qmap.put(IQFLOOR, new String("floor"));
      JmlUnaryOperatorQuotes.qmap.put(IQABS, new String("abs"));
      JmlUnaryOperatorQuotes.qmap.put(IQINVERSE, new String("inverse"));
      JmlUnaryOperatorQuotes.qmap.put(IQPOWER, new String("powerSet")); 
      JmlUnaryOperatorQuotes.qmap.put(IQELEMS, new String("toSet"));
      JmlUnaryOperatorQuotes.qmap.put(IQDOM, new String("domain"));
      JmlUnaryOperatorQuotes.qmap.put(IQOLD, new String("\\old"));
      JmlUnaryOperatorQuotes.qmap.put(IQHD, new String("first"));
      JmlUnaryOperatorQuotes.qmap.put(IQINCREMENT, new String("++"));
      JmlUnaryOperatorQuotes.qmap.put(IQPLUS, new String("+"));
      JmlUnaryOperatorQuotes.qmap.put(IQRNG, new String("range"));
      JmlUnaryOperatorQuotes.qmap.put(IQLEN, new String("length"));
      JmlUnaryOperatorQuotes.qmap.put(IQNOT, new String("!"));
      JmlUnaryOperatorQuotes.qmap.put(IQDECREMENT, new String("--"));
    }
    catch (Throwable e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=JmlUnaryOperatorQuotes KEEP=NO
  public JmlUnaryOperatorQuotes () throws CGException { }
// ***** VDMTOOLS END Name=JmlUnaryOperatorQuotes


// ***** VDMTOOLS START Name=getQuoteName KEEP=NO
  static public String getQuoteName (final Long pid) throws CGException {
    return UTIL.ConvertToString(qmap.get(pid));
  }
// ***** VDMTOOLS END Name=getQuoteName


// ***** VDMTOOLS START Name=validQuote KEEP=NO
  static public Boolean validQuote (final Long pid) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(qmap.containsKey(pid));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=validQuote
  
  public static boolean hasArgs(Long op) throws CGException {

	  boolean b = false;

	  if(hasElement(op))
		  	return true;

	  return b;

  }
  
  public static boolean hasElement(Long v) {
	  
	  boolean b = false;
	  
	  int i;
	  for(i = 0; i < args.length; i++) {
		  
		  if(args[i] == v)
			  return true;
	  }
	  
	  return b;
	  
  }

}
;
