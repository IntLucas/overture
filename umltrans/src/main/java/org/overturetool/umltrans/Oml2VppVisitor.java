//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import java.util.Iterator;
import java.util.Vector;

import jp.co.csk.vdm.toolbox.VDM.CGException;
import jp.co.csk.vdm.toolbox.VDM.UTIL;

import org.overturetool.ast.imp.OmlScopeQuotes;
import org.overturetool.ast.imp.OmlVisitor;
import org.overturetool.ast.itf.IOmlAccessDefinition;
import org.overturetool.ast.itf.IOmlAssignmentDefinition;
import org.overturetool.ast.itf.IOmlCharType;
import org.overturetool.ast.itf.IOmlClass;
import org.overturetool.ast.itf.IOmlDefinitionBlock;
import org.overturetool.ast.itf.IOmlDocument;
import org.overturetool.ast.itf.IOmlExplicitFunction;
import org.overturetool.ast.itf.IOmlExplicitOperation;
import org.overturetool.ast.itf.IOmlExpression;
import org.overturetool.ast.itf.IOmlFunctionDefinition;
import org.overturetool.ast.itf.IOmlFunctionDefinitions;
import org.overturetool.ast.itf.IOmlFunctionShape;
import org.overturetool.ast.itf.IOmlInheritanceClause;
import org.overturetool.ast.itf.IOmlInstanceVariable;
import org.overturetool.ast.itf.IOmlInstanceVariableDefinitions;
import org.overturetool.ast.itf.IOmlInstanceVariableShape;
import org.overturetool.ast.itf.IOmlIntType;
import org.overturetool.ast.itf.IOmlLiteral;
import org.overturetool.ast.itf.IOmlName;
import org.overturetool.ast.itf.IOmlNat1Type;
import org.overturetool.ast.itf.IOmlNatType;
import org.overturetool.ast.itf.IOmlNewExpression;
import org.overturetool.ast.itf.IOmlNode;
import org.overturetool.ast.itf.IOmlNumericLiteral;
import org.overturetool.ast.itf.IOmlOperationDefinition;
import org.overturetool.ast.itf.IOmlOperationDefinitions;
import org.overturetool.ast.itf.IOmlOperationShape;
import org.overturetool.ast.itf.IOmlOperationType;
import org.overturetool.ast.itf.IOmlParameter;
import org.overturetool.ast.itf.IOmlPartialFunctionType;
import org.overturetool.ast.itf.IOmlPattern;
import org.overturetool.ast.itf.IOmlPatternIdentifier;
import org.overturetool.ast.itf.IOmlProductType;
import org.overturetool.ast.itf.IOmlRealType;
import org.overturetool.ast.itf.IOmlScope;
import org.overturetool.ast.itf.IOmlSeq0Type;
import org.overturetool.ast.itf.IOmlSeq1Type;
import org.overturetool.ast.itf.IOmlSetType;
import org.overturetool.ast.itf.IOmlSimpleType;
import org.overturetool.ast.itf.IOmlSpecifications;
import org.overturetool.ast.itf.IOmlSymbolicLiteralExpression;
import org.overturetool.ast.itf.IOmlTextLiteral;
import org.overturetool.ast.itf.IOmlType;
import org.overturetool.ast.itf.IOmlTypeDefinition;
import org.overturetool.ast.itf.IOmlTypeDefinitions;
import org.overturetool.ast.itf.IOmlTypeName;
import org.overturetool.ast.itf.IOmlTypeShape;
import org.overturetool.ast.itf.IOmlTypeVariable;
import org.overturetool.ast.itf.IOmlUnionType;
import org.overturetool.ast.itf.IOmlValueDefinition;
import org.overturetool.ast.itf.IOmlValueDefinitions;
import org.overturetool.ast.itf.IOmlValueShape;
import org.overturetool.ast.itf.IOmlVisitor;



public class Oml2VppVisitor extends OmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=result KEEP=NO
  public String result = null;
// ***** VDMTOOLS END Name=result

// ***** VDMTOOLS START Name=lvl KEEP=NO
  private Integer lvl = null;
// ***** VDMTOOLS END Name=lvl

// ***** VDMTOOLS START Name=nl KEEP=NO
  private static final String nl = new String("\n");
// ***** VDMTOOLS END Name=nl


// ***** VDMTOOLS START Name=vdm_init_Oml2VppVisitor KEEP=NO
  private void vdm_init_Oml2VppVisitor () throws CGException {
    try {

      result = UTIL.ConvertToString(new String());
      lvl = new Integer(0);
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Oml2VppVisitor


// ***** VDMTOOLS START Name=Oml2VppVisitor KEEP=NO
  public Oml2VppVisitor () throws CGException {
    vdm_init_Oml2VppVisitor();
  }
// ***** VDMTOOLS END Name=Oml2VppVisitor


// ***** VDMTOOLS START Name=printNodeField#1|IOmlNode KEEP=NO
  private void printNodeField (final IOmlNode pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=printNodeField#1|IOmlNode


// ***** VDMTOOLS START Name=printBoolField#1|Boolean KEEP=NO
  private void printBoolField (final Boolean pval) throws CGException {

    String rhs_2 = null;
    if (pval.booleanValue()) 
      rhs_2 = new String("true");
    else 
      rhs_2 = new String("false");
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=printBoolField#1|Boolean


// ***** VDMTOOLS START Name=printNatField#1|Integer KEEP=NO
  private void printNatField (final Integer var_1_1) throws CGException {
    result = UTIL.ConvertToString(UTIL.clone(new String("--IMPLEMENT BY HAND--")));
  }
// ***** VDMTOOLS END Name=printNatField#1|Integer


// ***** VDMTOOLS START Name=printRealField#1|Double KEEP=NO
  private void printRealField (final Double var_1_1) throws CGException {

    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
    return;
  }
// ***** VDMTOOLS END Name=printRealField#1|Double


// ***** VDMTOOLS START Name=visitNode#1|IOmlNode KEEP=NO
  public void visitNode (final IOmlNode pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitNode#1|IOmlNode


// ***** VDMTOOLS START Name=visitDocument#1|IOmlDocument KEEP=NO
  public void visitDocument (final IOmlDocument pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var2_4 = null;
    var2_4 = pcmp.getFilename();
    var1_2 = new String("--BEGIN FileName: ").concat(var2_4);
    str = var1_2.concat(nl);
    Boolean cond_6 = null;
    cond_6 = pcmp.hasSpecifications();
    if (cond_6.booleanValue()) {

      IOmlSpecifications tmpArg_v_8 = null;
      tmpArg_v_8 = (IOmlSpecifications) pcmp.getSpecifications();
      visitSpecifications((IOmlSpecifications) tmpArg_v_8);
    }
    String rhs_9 = null;
    String var1_10 = null;
    String var1_11 = null;
    var1_11 = str.concat(result);
    var1_10 = var1_11.concat(new String("--END FileName: "));
    String var2_15 = null;
    var2_15 = pcmp.getFilename();
    rhs_9 = var1_10.concat(var2_15);
    result = UTIL.ConvertToString(UTIL.clone(rhs_9));
  }
// ***** VDMTOOLS END Name=visitDocument#1|IOmlDocument


// ***** VDMTOOLS START Name=visitSpecifications#1|IOmlSpecifications KEEP=NO
  public void visitSpecifications (final IOmlSpecifications pcmp) throws CGException {

    String str = nl;
    {

      Vector sq_2 = null;
      sq_2 = pcmp.getClassList();
      IOmlClass node = null;
      for (Iterator enm_16 = sq_2.iterator(); enm_16.hasNext(); ) {

        IOmlClass elem_3 = (IOmlClass) enm_16.next();
        node = (IOmlClass) elem_3;
        {

          printNodeField((IOmlNode) node);
          String rhs_8 = null;
          String var1_9 = null;
          String var1_10 = null;
          var1_10 = str.concat(nl);
          var1_9 = var1_10.concat(result);
          rhs_8 = var1_9.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_8));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSpecifications#1|IOmlSpecifications


// ***** VDMTOOLS START Name=visitClass#1|IOmlClass KEEP=NO
  public void visitClass (final IOmlClass pcmp) throws CGException {

    String str = null;
    String var2_3 = null;
    var2_3 = pcmp.getIdentifier();
    str = new String("class ").concat(var2_3);
    Boolean cond_4 = null;
    cond_4 = pcmp.hasInheritanceClause();
    if (cond_4.booleanValue()) {

      IOmlInheritanceClause tmpArg_v_7 = null;
      tmpArg_v_7 = (IOmlInheritanceClause) pcmp.getInheritanceClause();
      printNodeField((IOmlNode) tmpArg_v_7);
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getClassBody();
      IOmlDefinitionBlock db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlDefinitionBlock elem_9 = (IOmlDefinitionBlock) enm_20.next();
        db = (IOmlDefinitionBlock) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(nl);
          rhs_14 = var1_15.concat(result);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    String rhs_21 = null;
    String var1_22 = null;
    String var1_23 = null;
    var1_23 = str.concat(nl);
    var1_22 = var1_23.concat(new String("end "));
    String var2_27 = null;
    var2_27 = pcmp.getIdentifier();
    rhs_21 = var1_22.concat(var2_27);
    result = UTIL.ConvertToString(UTIL.clone(rhs_21));
  }
// ***** VDMTOOLS END Name=visitClass#1|IOmlClass


// ***** VDMTOOLS START Name=visitInheritanceClause#1|IOmlInheritanceClause KEEP=NO
  public void visitInheritanceClause (final IOmlInheritanceClause pcmp) throws CGException {

    String str = new String(" is subclass of ");
    Vector list = null;
    list = pcmp.getIdentifierList();
    Integer length = new Integer(list.size());
    Integer i = new Integer(1);
    while ( new Boolean((i.intValue()) <= (length.intValue())).booleanValue()){

      String rhs_6 = null;
      String var2_8 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
        var2_8 = UTIL.ConvertToString(list.get(i.intValue() - 1));
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      rhs_6 = str.concat(var2_8);
      str = UTIL.ConvertToString(UTIL.clone(rhs_6));
      i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      if (new Boolean((i.intValue()) <= (length.intValue())).booleanValue()) {

        String rhs_17 = null;
        rhs_17 = str.concat(new String(" ,"));
        str = UTIL.ConvertToString(UTIL.clone(rhs_17));
      }
    }
    String rhs_20 = null;
    rhs_20 = str.concat(nl);
    result = UTIL.ConvertToString(UTIL.clone(rhs_20));
  }
// ***** VDMTOOLS END Name=visitInheritanceClause#1|IOmlInheritanceClause


// ***** VDMTOOLS START Name=visitValueDefinitions#1|IOmlValueDefinitions KEEP=NO
  public void visitValueDefinitions (final IOmlValueDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = nl.concat(new String("values"));
    str = var1_2.concat(nl);
    {

      Vector sq_6 = null;
      sq_6 = pcmp.getValueList();
      IOmlValueDefinition db = null;
      for (Iterator enm_18 = sq_6.iterator(); enm_18.hasNext(); ) {

        IOmlValueDefinition elem_7 = (IOmlValueDefinition) enm_18.next();
        db = (IOmlValueDefinition) elem_7;
        {

          printNodeField((IOmlNode) db);
          String rhs_12 = null;
          String var1_13 = null;
          var1_13 = str.concat(result);
          rhs_12 = var1_13.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_12));
        }
      }
    }
    Boolean cond_19 = null;
    Integer var1_20 = null;
    Vector unArg_21 = null;
    unArg_21 = pcmp.getValueList();
    var1_20 = new Integer(unArg_21.size());
    cond_19 = new Boolean(var1_20.intValue() == new Integer(0).intValue());
    if (cond_19.booleanValue()) 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    else 
      result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitValueDefinitions#1|IOmlValueDefinitions


// ***** VDMTOOLS START Name=visitValueDefinition#1|IOmlValueDefinition KEEP=NO
  public void visitValueDefinition (final IOmlValueDefinition pcmp) throws CGException {

    String str = null;
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    str = UTIL.ConvertToString(UTIL.clone(result));
    IOmlValueShape tmpArg_v_6 = null;
    tmpArg_v_6 = (IOmlValueShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_6);
    String rhs_7 = null;
    String var1_8 = null;
    String var1_9 = null;
    var1_9 = str.concat(result);
    var1_8 = var1_9.concat(new String(";"));
    rhs_7 = var1_8.concat(nl);
    str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitValueDefinition#1|IOmlValueDefinition


// ***** VDMTOOLS START Name=visitAccessDefinition#1|IOmlAccessDefinition KEEP=NO
  public void visitAccessDefinition (final IOmlAccessDefinition pcmp) throws CGException {

    String str = new String("");
    Boolean cond_2 = null;
    cond_2 = pcmp.getStaticAccess();
    if (cond_2.booleanValue()) 
      str = UTIL.ConvertToString(UTIL.clone(new String(" static ")));
    IOmlScope tmpArg_v_5 = null;
    tmpArg_v_5 = (IOmlScope) pcmp.getScope();
    printNodeField((IOmlNode) tmpArg_v_5);
    String rhs_6 = null;
    String var1_7 = null;
    var1_7 = str.concat(result);
    rhs_6 = var1_7.concat(new String(" "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_6));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitAccessDefinition#1|IOmlAccessDefinition


// ***** VDMTOOLS START Name=visitScope#1|IOmlScope KEEP=NO
  public void visitScope (final IOmlScope pNode) throws CGException {

    long selRes_3 = 0;
    selRes_3 = (long)pNode.getValue();
    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQPUBLIC)) 
        succ_2 = false;
      if (succ_2) 
        result = UTIL.ConvertToString(UTIL.clone(new String("public")));
      else {

        succ_2 = true;
        if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQPRIVATE)) 
          succ_2 = false;
        if (!succ_2) {

          succ_2 = true;
          if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQDEFAULT)) 
            succ_2 = false;
        }
        if (succ_2) 
          result = UTIL.ConvertToString(UTIL.clone(new String("private")));
        else {

          succ_2 = true;
          if (!UTIL.equals(selRes_3, OmlScopeQuotes.IQPROTECTED)) 
            succ_2 = false;
          if (succ_2) 
            result = UTIL.ConvertToString(UTIL.clone(new String("protected")));
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=visitScope#1|IOmlScope


// ***** VDMTOOLS START Name=visitValueShape#1|IOmlValueShape KEEP=NO
  public void visitValueShape (final IOmlValueShape pcmp) throws CGException {

    String str = null;
    IOmlPattern tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlPattern) pcmp.getPattern();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = result.concat(new String(" "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    Boolean cond_7 = null;
    cond_7 = pcmp.hasType();
    if (cond_7.booleanValue()) {

      IOmlType tmpArg_v_10 = null;
      tmpArg_v_10 = (IOmlType) pcmp.getType();
      printNodeField((IOmlNode) tmpArg_v_10);
      String rhs_11 = null;
      String var1_12 = null;
      String var1_13 = null;
      var1_13 = str.concat(new String(":"));
      var1_12 = var1_13.concat(result);
      rhs_11 = var1_12.concat(new String(" "));
      str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    IOmlExpression tmpArg_v_19 = null;
    tmpArg_v_19 = (IOmlExpression) pcmp.getExpression();
    printNodeField((IOmlNode) tmpArg_v_19);
    String rhs_20 = null;
    String var1_21 = null;
    String var1_22 = null;
    var1_22 = str.concat(new String("="));
    var1_21 = var1_22.concat(result);
    rhs_20 = var1_21.concat(new String(" "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_20));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitValueShape#1|IOmlValueShape


// ***** VDMTOOLS START Name=visitPattern#1|IOmlPattern KEEP=NO
  public void visitPattern (final IOmlPattern pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitPattern#1|IOmlPattern


// ***** VDMTOOLS START Name=visitExpression#1|IOmlExpression KEEP=NO
  public void visitExpression (final IOmlExpression pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitExpression#1|IOmlExpression


// ***** VDMTOOLS START Name=visitLiteral#1|IOmlLiteral KEEP=NO
  public void visitLiteral (final IOmlLiteral pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitLiteral#1|IOmlLiteral


// ***** VDMTOOLS START Name=visitType#1|IOmlType KEEP=NO
  public void visitType (final IOmlType pNode) throws CGException {
    pNode.accept((IOmlVisitor) this);
  }
// ***** VDMTOOLS END Name=visitType#1|IOmlType


// ***** VDMTOOLS START Name=visitPatternIdentifier#1|IOmlPatternIdentifier KEEP=NO
  public void visitPatternIdentifier (final IOmlPatternIdentifier pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = pcmp.getIdentifier();
    str = var1_2.concat(new String(" "));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitPatternIdentifier#1|IOmlPatternIdentifier


// ***** VDMTOOLS START Name=visitSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression KEEP=NO
  public void visitSymbolicLiteralExpression (final IOmlSymbolicLiteralExpression pcmp) throws CGException {

    IOmlLiteral tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlLiteral) pcmp.getLiteral();
    printNodeField((IOmlNode) tmpArg_v_3);
  }
// ***** VDMTOOLS END Name=visitSymbolicLiteralExpression#1|IOmlSymbolicLiteralExpression


// ***** VDMTOOLS START Name=visitTextLiteral#1|IOmlTextLiteral KEEP=NO
  public void visitTextLiteral (final IOmlTextLiteral pcmp) throws CGException {

    String str = null;
    str = pcmp.getVal();
    String rhs_2 = null;
    String var1_3 = null;
    var1_3 = new String("\"").concat(str);
    rhs_2 = var1_3.concat(new String("\""));
    result = UTIL.ConvertToString(UTIL.clone(rhs_2));
  }
// ***** VDMTOOLS END Name=visitTextLiteral#1|IOmlTextLiteral


// ***** VDMTOOLS START Name=visitSeq0Type#1|IOmlSeq0Type KEEP=NO
  public void visitSeq0Type (final IOmlSeq0Type pcmp) throws CGException {

    String str = new String("seq of ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSeq0Type#1|IOmlSeq0Type


// ***** VDMTOOLS START Name=visitCharType#1|IOmlCharType KEEP=NO
  public void visitCharType (final IOmlCharType var_1_1) throws CGException {

    String str = new String("char");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitCharType#1|IOmlCharType


// ***** VDMTOOLS START Name=visitInstanceVariableDefinitions#1|IOmlInstanceVariableDefinitions KEEP=NO
  public void visitInstanceVariableDefinitions (final IOmlInstanceVariableDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("instance variables"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getVariablesList();
      IOmlInstanceVariableShape db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlInstanceVariableShape elem_9 = (IOmlInstanceVariableShape) enm_20.next();
        db = (IOmlInstanceVariableShape) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    Boolean cond_21 = null;
    Integer var1_22 = null;
    Vector unArg_23 = null;
    unArg_23 = pcmp.getVariablesList();
    var1_22 = new Integer(unArg_23.size());
    cond_21 = new Boolean(var1_22.intValue() == new Integer(0).intValue());
    if (cond_21.booleanValue()) 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    else 
      result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitInstanceVariableDefinitions#1|IOmlInstanceVariableDefinitions


// ***** VDMTOOLS START Name=visitInstanceVariable#1|IOmlInstanceVariable KEEP=NO
  public void visitInstanceVariable (final IOmlInstanceVariable pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlAssignmentDefinition tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlAssignmentDefinition) pcmp.getAssignmentDefinition();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitInstanceVariable#1|IOmlInstanceVariable


// ***** VDMTOOLS START Name=visitAssignmentDefinition#1|IOmlAssignmentDefinition KEEP=NO
  public void visitAssignmentDefinition (final IOmlAssignmentDefinition pcmp) throws CGException {

    String str = new String("");
    String rhs_2 = null;
    String var2_4 = null;
    var2_4 = pcmp.getIdentifier();
    rhs_2 = str.concat(var2_4);
    str = UTIL.ConvertToString(UTIL.clone(rhs_2));
    IOmlType tmpArg_v_6 = null;
    tmpArg_v_6 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_6);
    String rhs_7 = null;
    String var1_8 = null;
    var1_8 = str.concat(new String(" : "));
    rhs_7 = var1_8.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_7));
    Boolean cond_12 = null;
    cond_12 = pcmp.hasExpression();
    if (cond_12.booleanValue()) {

      IOmlExpression tmpArg_v_15 = null;
      tmpArg_v_15 = (IOmlExpression) pcmp.getExpression();
      printNodeField((IOmlNode) tmpArg_v_15);
      String rhs_16 = null;
      rhs_16 = str.concat(new String(" := "));
      str = UTIL.ConvertToString(UTIL.clone(rhs_16));
    }
    else 
      result = UTIL.ConvertToString(UTIL.clone(new String("")));
    String rhs_19 = null;
    String var1_20 = null;
    var1_20 = str.concat(result);
    rhs_19 = var1_20.concat(new String(";"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_19));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitAssignmentDefinition#1|IOmlAssignmentDefinition


// ***** VDMTOOLS START Name=visitTypeName#1|IOmlTypeName KEEP=NO
  public void visitTypeName (final IOmlTypeName pcmp) throws CGException {

    IOmlName tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_3);
  }
// ***** VDMTOOLS END Name=visitTypeName#1|IOmlTypeName


// ***** VDMTOOLS START Name=visitName#1|IOmlName KEEP=NO
  public void visitName (final IOmlName pcmp) throws CGException {

    String str = new String("");
    Boolean cond_2 = null;
    cond_2 = pcmp.hasClassIdentifier();
    if (cond_2.booleanValue()) {

      String rhs_3 = null;
      String var2_5 = null;
      var2_5 = pcmp.getClassIdentifier();
      rhs_3 = str.concat(var2_5);
      str = UTIL.ConvertToString(UTIL.clone(rhs_3));
    }
    String rhs_6 = null;
    String var2_8 = null;
    var2_8 = pcmp.getIdentifier();
    rhs_6 = str.concat(var2_8);
    str = UTIL.ConvertToString(UTIL.clone(rhs_6));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitName#1|IOmlName


// ***** VDMTOOLS START Name=visitIntType#1|IOmlIntType KEEP=NO
  public void visitIntType (final IOmlIntType var_1_1) throws CGException {

    String str = new String("int");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitIntType#1|IOmlIntType


// ***** VDMTOOLS START Name=visitNatType#1|IOmlNatType KEEP=NO
  public void visitNatType (final IOmlNatType var_1_1) throws CGException {

    String str = new String("nat");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNatType#1|IOmlNatType


// ***** VDMTOOLS START Name=visitNat1Type#1|IOmlNat1Type KEEP=NO
  public void visitNat1Type (final IOmlNat1Type var_1_1) throws CGException {

    String str = new String("nat1");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNat1Type#1|IOmlNat1Type


// ***** VDMTOOLS START Name=visitSeq1Type#1|IOmlSeq1Type KEEP=NO
  public void visitSeq1Type (final IOmlSeq1Type pcmp) throws CGException {

    String str = new String("seq1 of ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSeq1Type#1|IOmlSeq1Type


// ***** VDMTOOLS START Name=visitRealType#1|IOmlRealType KEEP=NO
  public void visitRealType (final IOmlRealType var_1_1) throws CGException {

    String str = new String("real");
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitRealType#1|IOmlRealType


// ***** VDMTOOLS START Name=visitSetType#1|IOmlSetType KEEP=NO
  public void visitSetType (final IOmlSetType pcmp) throws CGException {

    String str = new String("set of ");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitSetType#1|IOmlSetType


// ***** VDMTOOLS START Name=visitTypeDefinitions#1|IOmlTypeDefinitions KEEP=NO
  public void visitTypeDefinitions (final IOmlTypeDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("types"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getTypeList();
      IOmlTypeDefinition db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlTypeDefinition elem_9 = (IOmlTypeDefinition) enm_20.next();
        db = (IOmlTypeDefinition) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTypeDefinitions#1|IOmlTypeDefinitions


// ***** VDMTOOLS START Name=visitTypeDefinition#1|IOmlTypeDefinition KEEP=NO
  public void visitTypeDefinition (final IOmlTypeDefinition pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlTypeShape tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlTypeShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    String var1_10 = null;
    var1_10 = str.concat(result);
    rhs_9 = var1_10.concat(new String(";"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitTypeDefinition#1|IOmlTypeDefinition


// ***** VDMTOOLS START Name=visitSimpleType#1|IOmlSimpleType KEEP=NO
  public void visitSimpleType (final IOmlSimpleType pcmp) throws CGException {

    String str = null;
    str = pcmp.getIdentifier();
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(new String(" = "));
    rhs_4 = var1_5.concat(result);
    result = UTIL.ConvertToString(UTIL.clone(rhs_4));
  }
// ***** VDMTOOLS END Name=visitSimpleType#1|IOmlSimpleType


// ***** VDMTOOLS START Name=visitNewExpression#1|IOmlNewExpression KEEP=NO
  public void visitNewExpression (final IOmlNewExpression pcmp) throws CGException {

    String str = new String("new ");
    IOmlName tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlName) pcmp.getName();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String("()"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNewExpression#1|IOmlNewExpression


// ***** VDMTOOLS START Name=visitNumericLiteral#1|IOmlNumericLiteral KEEP=NO
  public void visitNumericLiteral (final IOmlNumericLiteral pcmp) throws CGException {

    String str = new String("");
    long tmpArg_v_3 = 0;
    tmpArg_v_3 = pcmp.getVal();
    printNatField((int)tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitNumericLiteral#1|IOmlNumericLiteral


// ***** VDMTOOLS START Name=visitOperationDefinitions#1|IOmlOperationDefinitions KEEP=NO
  public void visitOperationDefinitions (final IOmlOperationDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("operations"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getOperationList();
      IOmlOperationDefinition db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlOperationDefinition elem_9 = (IOmlOperationDefinition) enm_20.next();
        db = (IOmlOperationDefinition) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitOperationDefinitions#1|IOmlOperationDefinitions


// ***** VDMTOOLS START Name=visitOperationDefinition#1|IOmlOperationDefinition KEEP=NO
  public void visitOperationDefinition (final IOmlOperationDefinition pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlOperationShape tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlOperationShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitOperationDefinition#1|IOmlOperationDefinition


// ***** VDMTOOLS START Name=visitExplicitOperation#1|IOmlExplicitOperation KEEP=NO
  public void visitExplicitOperation (final IOmlExplicitOperation pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = pcmp.getIdentifier();
    str = var1_2.concat(new String(" : "));
    IOmlType tmpArg_v_5 = null;
    tmpArg_v_5 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_5);
    String rhs_6 = null;
    rhs_6 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_6));
    String rhs_9 = null;
    String var1_10 = null;
    String var1_11 = null;
    var1_11 = str.concat(nl);
    String var2_14 = null;
    var2_14 = pcmp.getIdentifier();
    var1_10 = var1_11.concat(var2_14);
    rhs_9 = var1_10.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    {

      Vector sq_16 = null;
      sq_16 = pcmp.getParameterList();
      IOmlPattern db = null;
      for (Iterator enm_26 = sq_16.iterator(); enm_26.hasNext(); ) {

        IOmlPattern elem_17 = (IOmlPattern) enm_26.next();
        db = (IOmlPattern) elem_17;
        {

          printNodeField((IOmlNode) db);
          String rhs_22 = null;
          rhs_22 = str.concat(result);
          str = UTIL.ConvertToString(UTIL.clone(rhs_22));
        }
      }
    }
    String rhs_27 = null;
    rhs_27 = str.concat(new String(") == is not yet specified;"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_27));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitExplicitOperation#1|IOmlExplicitOperation


// ***** VDMTOOLS START Name=visitOperationType#1|IOmlOperationType KEEP=NO
  public void visitOperationType (final IOmlOperationType pcmp) throws CGException {

    String str = new String("");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getDomType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" ==> "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlType tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlType) pcmp.getRngType();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitOperationType#1|IOmlOperationType


// ***** VDMTOOLS START Name=visitParameter#1|IOmlParameter KEEP=NO
  public void visitParameter (final IOmlParameter pcmp) throws CGException {

    String str = new String("");
    {

      Vector sq_2 = null;
      sq_2 = pcmp.getPatternList();
      IOmlPattern db = null;
      for (Iterator enm_14 = sq_2.iterator(); enm_14.hasNext(); ) {

        IOmlPattern elem_3 = (IOmlPattern) enm_14.next();
        db = (IOmlPattern) elem_3;
        {

          printNodeField((IOmlNode) db);
          String rhs_8 = null;
          String var1_9 = null;
          var1_9 = str.concat(result);
          rhs_8 = var1_9.concat(new String(", "));
          str = UTIL.ConvertToString(UTIL.clone(rhs_8));
        }
      }
    }
    String rhs_15 = null;
    int from_19 = (int) Math.max(new Integer(1).doubleValue() - 1, 0);
    int to_20 = (int) Math.min(new Integer(new Integer(str.length()).intValue() - new Integer(2).intValue()).doubleValue(), str.length());
    if (from_19 > to_20) 
      rhs_15 = new String();
    else 
      rhs_15 = new String(str.substring(from_19, to_20));
    str = UTIL.ConvertToString(UTIL.clone(rhs_15));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitParameter#1|IOmlParameter


// ***** VDMTOOLS START Name=visitFunctionDefinitions#1|IOmlFunctionDefinitions KEEP=NO
  public void visitFunctionDefinitions (final IOmlFunctionDefinitions pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    String var1_3 = null;
    var1_3 = nl.concat(new String("functions"));
    var1_2 = var1_3.concat(nl);
    str = var1_2.concat(nl);
    {

      Vector sq_8 = null;
      sq_8 = pcmp.getFunctionList();
      IOmlFunctionDefinition db = null;
      for (Iterator enm_20 = sq_8.iterator(); enm_20.hasNext(); ) {

        IOmlFunctionDefinition elem_9 = (IOmlFunctionDefinition) enm_20.next();
        db = (IOmlFunctionDefinition) elem_9;
        {

          printNodeField((IOmlNode) db);
          String rhs_14 = null;
          String var1_15 = null;
          var1_15 = str.concat(result);
          rhs_14 = var1_15.concat(nl);
          str = UTIL.ConvertToString(UTIL.clone(rhs_14));
        }
      }
    }
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitFunctionDefinitions#1|IOmlFunctionDefinitions


// ***** VDMTOOLS START Name=visitFunctionDefinition#1|IOmlFunctionDefinition KEEP=NO
  public void visitFunctionDefinition (final IOmlFunctionDefinition pcmp) throws CGException {

    String str = new String("");
    IOmlAccessDefinition tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlAccessDefinition) pcmp.getAccess();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    rhs_4 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlFunctionShape tmpArg_v_8 = null;
    tmpArg_v_8 = (IOmlFunctionShape) pcmp.getShape();
    printNodeField((IOmlNode) tmpArg_v_8);
    String rhs_9 = null;
    rhs_9 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_9));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitFunctionDefinition#1|IOmlFunctionDefinition


// ***** VDMTOOLS START Name=visitExplicitFunction#1|IOmlExplicitFunction KEEP=NO
  public void visitExplicitFunction (final IOmlExplicitFunction pcmp) throws CGException {

    String str = null;
    String var1_2 = null;
    var1_2 = pcmp.getIdentifier();
    str = var1_2.concat(new String(" : "));
    {

      Vector sq_4 = null;
      sq_4 = pcmp.getTypeVariableList();
      IOmlTypeVariable db = null;
      for (Iterator enm_14 = sq_4.iterator(); enm_14.hasNext(); ) {

        IOmlTypeVariable elem_5 = (IOmlTypeVariable) enm_14.next();
        db = (IOmlTypeVariable) elem_5;
        {

          printNodeField((IOmlNode) db);
          String rhs_10 = null;
          rhs_10 = str.concat(result);
          str = UTIL.ConvertToString(UTIL.clone(rhs_10));
        }
      }
    }
    IOmlType tmpArg_v_16 = null;
    tmpArg_v_16 = (IOmlType) pcmp.getType();
    printNodeField((IOmlNode) tmpArg_v_16);
    String rhs_17 = null;
    rhs_17 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_17));
    String rhs_20 = null;
    String var1_21 = null;
    String var1_22 = null;
    var1_22 = str.concat(nl);
    String var2_25 = null;
    var2_25 = pcmp.getIdentifier();
    var1_21 = var1_22.concat(var2_25);
    rhs_20 = var1_21.concat(new String("("));
    str = UTIL.ConvertToString(UTIL.clone(rhs_20));
    {

      Vector sq_27 = null;
      sq_27 = pcmp.getParameterList();
      IOmlParameter db = null;
      for (Iterator enm_37 = sq_27.iterator(); enm_37.hasNext(); ) {

        IOmlParameter elem_28 = (IOmlParameter) enm_37.next();
        db = (IOmlParameter) elem_28;
        {

          printNodeField((IOmlNode) db);
          String rhs_33 = null;
          rhs_33 = str.concat(result);
          str = UTIL.ConvertToString(UTIL.clone(rhs_33));
        }
      }
    }
    String rhs_38 = null;
    rhs_38 = str.concat(new String(") == is not yet specified;"));
    str = UTIL.ConvertToString(UTIL.clone(rhs_38));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitExplicitFunction#1|IOmlExplicitFunction


// ***** VDMTOOLS START Name=visitPartialFunctionType#1|IOmlPartialFunctionType KEEP=NO
  public void visitPartialFunctionType (final IOmlPartialFunctionType pcmp) throws CGException {

    String str = new String("");
    IOmlType tmpArg_v_3 = null;
    tmpArg_v_3 = (IOmlType) pcmp.getDomType();
    printNodeField((IOmlNode) tmpArg_v_3);
    String rhs_4 = null;
    String var1_5 = null;
    var1_5 = str.concat(result);
    rhs_4 = var1_5.concat(new String(" -> "));
    str = UTIL.ConvertToString(UTIL.clone(rhs_4));
    IOmlType tmpArg_v_10 = null;
    tmpArg_v_10 = (IOmlType) pcmp.getRngType();
    printNodeField((IOmlNode) tmpArg_v_10);
    String rhs_11 = null;
    rhs_11 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitPartialFunctionType#1|IOmlPartialFunctionType


// ***** VDMTOOLS START Name=visitUnionType#1|IOmlUnionType KEEP=NO
  public void visitUnionType (final IOmlUnionType pcmp) throws CGException {

    String str = new String("");
    IOmlType obj_3 = null;
    obj_3 = (IOmlType) pcmp.getLhsType();
    obj_3.accept((IOmlVisitor) this);
    String rhs_5 = null;
    rhs_5 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_5));
    IOmlType obj_9 = null;
    obj_9 = (IOmlType) pcmp.getRhsType();
    obj_9.accept((IOmlVisitor) this);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(new String(" | "));
    rhs_11 = var1_12.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitUnionType#1|IOmlUnionType


// ***** VDMTOOLS START Name=visitProductType#1|IOmlProductType KEEP=NO
  public void visitProductType (final IOmlProductType pcmp) throws CGException {

    String str = new String("");
    IOmlType obj_3 = null;
    obj_3 = (IOmlType) pcmp.getLhsType();
    obj_3.accept((IOmlVisitor) this);
    String rhs_5 = null;
    rhs_5 = str.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_5));
    IOmlType obj_9 = null;
    obj_9 = (IOmlType) pcmp.getRhsType();
    obj_9.accept((IOmlVisitor) this);
    String rhs_11 = null;
    String var1_12 = null;
    var1_12 = str.concat(new String(" * "));
    rhs_11 = var1_12.concat(result);
    str = UTIL.ConvertToString(UTIL.clone(rhs_11));
    result = UTIL.ConvertToString(UTIL.clone(str));
  }
// ***** VDMTOOLS END Name=visitProductType#1|IOmlProductType

}
;
