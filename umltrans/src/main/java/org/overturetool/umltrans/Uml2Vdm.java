//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Vector;

import jp.co.csk.vdm.toolbox.VDM.CGException;
import jp.co.csk.vdm.toolbox.VDM.UTIL;

import org.overturetool.ast.imp.OmlAccessDefinition;
import org.overturetool.ast.imp.OmlAssignmentDefinition;
import org.overturetool.ast.imp.OmlBoolType;
import org.overturetool.ast.imp.OmlCharType;
import org.overturetool.ast.imp.OmlClass;
import org.overturetool.ast.imp.OmlDocument;
import org.overturetool.ast.imp.OmlInheritanceClause;
import org.overturetool.ast.imp.OmlInstanceVariable;
import org.overturetool.ast.imp.OmlInstanceVariableDefinitions;
import org.overturetool.ast.imp.OmlIntType;
import org.overturetool.ast.imp.OmlName;
import org.overturetool.ast.imp.OmlNatType;
import org.overturetool.ast.imp.OmlNewExpression;
import org.overturetool.ast.imp.OmlNumericLiteral;
import org.overturetool.ast.imp.OmlPatternIdentifier;
import org.overturetool.ast.imp.OmlProductType;
import org.overturetool.ast.imp.OmlRealType;
import org.overturetool.ast.imp.OmlScope;
import org.overturetool.ast.imp.OmlScopeQuotes;
import org.overturetool.ast.imp.OmlSeq0Type;
import org.overturetool.ast.imp.OmlSpecifications;
import org.overturetool.ast.imp.OmlSymbolicLiteralExpression;
import org.overturetool.ast.imp.OmlTextLiteral;
import org.overturetool.ast.imp.OmlTypeName;
import org.overturetool.ast.imp.OmlUnionType;
import org.overturetool.ast.imp.OmlValueDefinition;
import org.overturetool.ast.imp.OmlValueDefinitions;
import org.overturetool.ast.imp.OmlValueShape;
import org.overturetool.ast.itf.IOmlClass;
import org.overturetool.ast.itf.IOmlDefinitionBlock;
import org.overturetool.ast.itf.IOmlDocument;
import org.overturetool.ast.itf.IOmlExpression;
import org.overturetool.ast.itf.IOmlInstanceVariable;
import org.overturetool.ast.itf.IOmlScope;
import org.overturetool.ast.itf.IOmlType;
import org.overturetool.ast.itf.IOmlValueDefinition;



public class Uml2Vdm {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=classInstanceVars KEEP=NO
  private HashMap classInstanceVars = new HashMap();
// ***** VDMTOOLS END Name=classInstanceVars


// ***** VDMTOOLS START Name=vdm_init_Uml2Vdm KEEP=NO
  private void vdm_init_Uml2Vdm () throws CGException {
    try {
      classInstanceVars = new HashMap();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Uml2Vdm


// ***** VDMTOOLS START Name=Uml2Vdm KEEP=NO
  public Uml2Vdm () throws CGException {
    vdm_init_Uml2Vdm();
  }
// ***** VDMTOOLS END Name=Uml2Vdm


// ***** VDMTOOLS START Name=init#1|IUmlModel KEEP=NO
  public IOmlDocument init (final IUmlModel model) throws CGException {

    HashSet associations = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      HashSet e_set_9 = new HashSet();
      e_set_9 = model.getDefinitions();
      IUmlModelElement a = null;
      {
        for (Iterator enm_11 = e_set_9.iterator(); enm_11.hasNext(); ) {

          IUmlModelElement elem_10 = (IUmlModelElement) enm_11.next();
          a = (IUmlModelElement) elem_10;
          if (new Boolean(a instanceof IUmlAssociation).booleanValue()) {
            res_s_4.add(a);
          }
        }
      }
    }
    associations = res_s_4;
    HashSet constraints = new HashSet();
    HashSet res_s_13 = new HashSet();
    {

      HashSet e_set_18 = new HashSet();
      e_set_18 = model.getDefinitions();
      IUmlModelElement a = null;
      {
        for (Iterator enm_20 = e_set_18.iterator(); enm_20.hasNext(); ) {

          IUmlModelElement elem_19 = (IUmlModelElement) enm_20.next();
          a = (IUmlModelElement) elem_19;
          if (new Boolean(a instanceof IUmlConstraint).booleanValue()) {
            res_s_13.add(a);
          }
        }
      }
    }
    constraints = res_s_13;
    {

      exstractInstanceVarsFromAssociations(associations, constraints);
      OmlDocument rexpr_24 = null;
      String arg_25 = null;
      arg_25 = model.getName();
      rexpr_24 = new OmlDocument(arg_25, new OmlSpecifications(build_uclasses((IUmlModel) model)), new Vector());
      return (IOmlDocument) rexpr_24;
    }
  }
// ***** VDMTOOLS END Name=init#1|IUmlModel


// ***** VDMTOOLS START Name=build_uclasses#1|IUmlModel KEEP=NO
  public Vector build_uclasses (final IUmlModel model) throws CGException {

    HashSet classes = new HashSet();
    HashSet res_s_4 = new HashSet();
    {

      HashSet e_set_9 = new HashSet();
      e_set_9 = model.getDefinitions();
      IUmlModelElement c = null;
      {
        for (Iterator enm_11 = e_set_9.iterator(); enm_11.hasNext(); ) {

          IUmlModelElement elem_10 = (IUmlModelElement) enm_11.next();
          c = (IUmlModelElement) elem_10;
          if (new Boolean(c instanceof IUmlClass).booleanValue()) {
            res_s_4.add(c);
          }
        }
      }
    }
    classes = res_s_4;
    Vector rexpr_12 = null;
    HashSet par_13 = new HashSet();
    HashSet res_s_14 = new HashSet();
    {

      IUmlClass c = null;
      {
        for (Iterator enm_20 = classes.iterator(); enm_20.hasNext(); ) {

          IUmlClass elem_19 = (IUmlClass) enm_20.next();
          c = (IUmlClass) elem_19;
          res_s_14.add((IOmlClass) build_uclass((IUmlClass) c));
        }
      }
    }
    par_13 = res_s_14;
    rexpr_12 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_13));
    return rexpr_12;
  }
// ***** VDMTOOLS END Name=build_uclasses#1|IUmlModel


// ***** VDMTOOLS START Name=build_uclass#1|IUmlClass KEEP=NO
  public IOmlClass build_uclass (final IUmlClass c) throws CGException {

    String name = null;
    name = c.getName();
    OmlInheritanceClause inheritanceClause = null;
    Boolean cond_6 = null;
    cond_6 = c.hasSupers();
    if (cond_6.booleanValue()) {

      Vector arg_7 = null;
      {

        IUmlInheritanceClause tmpVal_9 = null;
        tmpVal_9 = (IUmlInheritanceClause) c.getSupers();
        IUmlInheritanceClause t = null;
        t = (IUmlInheritanceClause) tmpVal_9;
        arg_7 = t.getIdentifierList();
      }
      inheritanceClause = new OmlInheritanceClause(arg_7);
    }
    else 
      inheritanceClause = null;
    HashSet body = new HashSet();
    HashSet unArg_11 = new HashSet();
    HashSet res_s_12 = new HashSet();
    {

      HashSet e_set_16 = new HashSet();
      e_set_16 = c.getClassBody();
      IUmlDefinitionBlock d = null;
      {
        for (Iterator enm_18 = e_set_16.iterator(); enm_18.hasNext(); ) {

          IUmlDefinitionBlock elem_17 = (IUmlDefinitionBlock) enm_18.next();
          d = (IUmlDefinitionBlock) elem_17;
          res_s_12.add(build_udefs((IUmlDefinitionBlock) d));
        }
      }
    }
    unArg_11 = res_s_12;
    HashSet rduset_19 = new HashSet();
    for (Iterator enm_21 = unArg_11.iterator(); enm_21.hasNext(); ) {

      HashSet e_20 = (HashSet) enm_21.next();
      rduset_19.addAll(e_20);
    }
    body = rduset_19;
    Boolean systemSpec = new Boolean(false);
    Vector instVars = getAssociationInstanceVars(name);
    HashSet bodyLst = new HashSet();
    if (new Boolean((new Integer(instVars.size()).intValue()) > (new Integer(0).intValue())).booleanValue()) {

      HashSet var2_32 = new HashSet();
      var2_32 = new HashSet();
      var2_32.add(new OmlInstanceVariableDefinitions(instVars));
      bodyLst = (HashSet) body.clone();
      bodyLst.addAll(var2_32);
    }
    else 
      bodyLst = body;
    OmlClass rexpr_35 = null;
    Vector arg_39 = null;
    arg_39 = (Vector) UTIL.ConvertToList(Util.SetToSeq(bodyLst));
    rexpr_35 = new OmlClass(name, new Vector(), inheritanceClause, arg_39, systemSpec);
    return (IOmlClass) rexpr_35;
  }
// ***** VDMTOOLS END Name=build_uclass#1|IUmlClass


// ***** VDMTOOLS START Name=build_udefs#1|IUmlDefinitionBlock KEEP=NO
  public HashSet build_udefs (final IUmlDefinitionBlock db) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(db instanceof IUmlOwnedPropeties))) 
        succ_2 = false;
      if (succ_2) {

        IUmlOwnedPropeties tmp = (IUmlOwnedPropeties) db;
        HashSet rexpr_10 = new HashSet();
        HashSet var1_11 = new HashSet();
        var1_11 = new HashSet();
        var1_11.add((IOmlDefinitionBlock) build_udefValues((IUmlOwnedPropeties) tmp));
        HashSet var2_14 = new HashSet();
        var2_14 = new HashSet();
        var2_14.add((IOmlDefinitionBlock) build_udefInstanceVariables((IUmlOwnedPropeties) tmp));
        rexpr_10 = (HashSet) var1_11.clone();
        rexpr_10.addAll(var2_14);
        return rexpr_10;
      }
      else 
        return new HashSet();
    }
  }
// ***** VDMTOOLS END Name=build_udefs#1|IUmlDefinitionBlock


// ***** VDMTOOLS START Name=build_udefValues#1|IUmlOwnedPropeties KEEP=NO
  public IOmlDefinitionBlock build_udefValues (final IUmlOwnedPropeties block) throws CGException {

    HashSet props = new HashSet();
    props = block.getPropetityList();
    HashSet valueProps = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlProperty p = null;
      {
        for (Iterator enm_15 = props.iterator(); enm_15.hasNext(); ) {

          IUmlProperty elem_14 = (IUmlProperty) enm_15.next();
          p = (IUmlProperty) elem_14;
          Boolean pred_7 = null;
          Boolean var1_8 = null;
          var1_8 = p.hasIsReadOnly();
          {
            if ((pred_7 = var1_8).booleanValue()) {

              Boolean var2_9 = null;
              Boolean var1_10 = null;
              var1_10 = p.getIsReadOnly();
              var2_9 = new Boolean(UTIL.equals(var1_10, new Boolean(true)));
              pred_7 = var2_9;
            }
          }
          if (pred_7.booleanValue()) {
            res_s_5.add(p);
          }
        }
      }
    }
    valueProps = res_s_5;
    HashSet val = new HashSet();
    HashSet res_s_17 = new HashSet();
    {

      IUmlProperty v = null;
      {
        for (Iterator enm_23 = valueProps.iterator(); enm_23.hasNext(); ) {

          IUmlProperty elem_22 = (IUmlProperty) enm_23.next();
          v = (IUmlProperty) elem_22;
          res_s_17.add((IOmlValueDefinition) build_uvalue((IUmlProperty) v));
        }
      }
    }
    val = res_s_17;
    OmlValueDefinitions rexpr_24 = null;
    Vector arg_25 = null;
    arg_25 = (Vector) UTIL.ConvertToList(Util.SetToSeq(val));
    rexpr_24 = new OmlValueDefinitions(arg_25);
    return (IOmlDefinitionBlock) rexpr_24;
  }
// ***** VDMTOOLS END Name=build_udefValues#1|IUmlOwnedPropeties


// ***** VDMTOOLS START Name=build_uvalue#1|IUmlProperty KEEP=NO
  public IOmlValueDefinition build_uvalue (final IUmlProperty prop) throws CGException {

    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_6 = null;
    par_6 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_6);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    OmlPatternIdentifier pattern = null;
    String arg_12 = null;
    arg_12 = prop.getName();
    pattern = new OmlPatternIdentifier(arg_12);
    IOmlType type = null;
    IUmlType par_14 = null;
    par_14 = (IUmlType) prop.getType();
    type = (IOmlType) ConvertType((IUmlType) par_14);
    IOmlExpression expression = null;
    Boolean cond_17 = null;
    cond_17 = prop.hasDefault();
    if (cond_17.booleanValue()) {

      String par_18 = null;
      par_18 = prop.getDefault();
      IUmlType par_19 = null;
      par_19 = (IUmlType) prop.getType();
      expression = (IOmlExpression) getDefaultExpression(par_18, (IUmlType) par_19);
    }
    else 
      expression = null;
    OmlValueShape valueShape = (OmlValueShape) new OmlValueShape(pattern, type, expression);
    return (IOmlValueDefinition) new OmlValueDefinition(access, valueShape);
  }
// ***** VDMTOOLS END Name=build_uvalue#1|IUmlProperty


// ***** VDMTOOLS START Name=build_udefInstanceVariables#1|IUmlOwnedPropeties KEEP=NO
  public IOmlDefinitionBlock build_udefInstanceVariables (final IUmlOwnedPropeties block) throws CGException {

    HashSet tmpVal_3 = new HashSet();
    tmpVal_3 = block.getPropetityList();
    HashSet props = new HashSet();
    props = tmpVal_3;
    HashSet valueProps = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlProperty p = null;
      {
        for (Iterator enm_15 = props.iterator(); enm_15.hasNext(); ) {

          IUmlProperty elem_14 = (IUmlProperty) enm_15.next();
          p = (IUmlProperty) elem_14;
          Boolean pred_7 = null;
          Boolean var1_8 = null;
          var1_8 = p.hasIsReadOnly();
          {
            if ((pred_7 = var1_8).booleanValue()) {

              Boolean var2_9 = null;
              Boolean var1_10 = null;
              var1_10 = p.getIsReadOnly();
              var2_9 = new Boolean(UTIL.equals(var1_10, new Boolean(false)));
              pred_7 = var2_9;
            }
          }
          if (pred_7.booleanValue()) {
            res_s_5.add(p);
          }
        }
      }
    }
    valueProps = res_s_5;
    HashSet val = new HashSet();
    HashSet res_s_17 = new HashSet();
    {

      IUmlProperty v = null;
      {
        for (Iterator enm_23 = valueProps.iterator(); enm_23.hasNext(); ) {

          IUmlProperty elem_22 = (IUmlProperty) enm_23.next();
          v = (IUmlProperty) elem_22;
          res_s_17.add((IOmlInstanceVariable) build_uinstanceVariable((IUmlProperty) v));
        }
      }
    }
    val = res_s_17;
    Vector seqVal = null;
    seqVal = (Vector) UTIL.ConvertToList(Util.SetToSeq(val));
    return (IOmlDefinitionBlock) new OmlInstanceVariableDefinitions(seqVal);
  }
// ***** VDMTOOLS END Name=build_udefInstanceVariables#1|IUmlOwnedPropeties


// ***** VDMTOOLS START Name=build_uinstanceVariable#1|IUmlProperty KEEP=NO
  public IOmlInstanceVariable build_uinstanceVariable (final IUmlProperty prop) throws CGException {

    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_6 = null;
    par_6 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_6);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    IOmlType tmpVal_11 = null;
    IUmlType par_12 = null;
    par_12 = (IUmlType) prop.getType();
    tmpVal_11 = (IOmlType) ConvertType((IUmlType) par_12);
    IOmlType type = null;
    type = (IOmlType) tmpVal_11;
    IOmlExpression expression = null;
    Boolean cond_15 = null;
    cond_15 = prop.hasDefault();
    if (cond_15.booleanValue()) {

      String par_16 = null;
      par_16 = prop.getDefault();
      IUmlType par_17 = null;
      par_17 = (IUmlType) prop.getType();
      expression = (IOmlExpression) getDefaultExpression(par_16, (IUmlType) par_17);
    }
    else 
      expression = null;
    OmlAssignmentDefinition assignmentDef = null;
    String arg_19 = null;
    arg_19 = prop.getName();
    assignmentDef = new OmlAssignmentDefinition(arg_19, type, expression);
    return (IOmlInstanceVariable) new OmlInstanceVariable(access, assignmentDef);
  }
// ***** VDMTOOLS END Name=build_uinstanceVariable#1|IUmlProperty


// ***** VDMTOOLS START Name=exstractInstanceVarsFromAssociations#2|HashSet|HashSet KEEP=NO
  public void exstractInstanceVarsFromAssociations (final HashSet associations, final HashSet constraints) throws CGException {

    HashSet normalBiAss = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      IUmlAssociation a = null;
      {
        for (Iterator enm_22 = associations.iterator(); enm_22.hasNext(); ) {

          IUmlAssociation elem_21 = (IUmlAssociation) enm_22.next();
          a = (IUmlAssociation) elem_21;
          Boolean pred_7 = null;
          Boolean var1_8 = null;
          Boolean unArg_9 = null;
          String par_11 = null;
          par_11 = a.getId();
          unArg_9 = hasXorConstraint(constraints, par_11);
          var1_8 = new Boolean(!unArg_9.booleanValue());
          {
            if ((pred_7 = var1_8).booleanValue()) {

              Boolean var2_12 = null;
              Integer var1_13 = null;
              Integer var1_14 = null;
              HashSet unArg_15 = new HashSet();
              unArg_15 = a.getOwnedEnds();
              var1_14 = new Integer(unArg_15.size());
              Integer var2_16 = null;
              HashSet unArg_17 = new HashSet();
              unArg_17 = a.getOwnedNavivableEnds();
              var2_16 = new Integer(unArg_17.size());
              var1_13 = new Integer(var1_14.intValue() + var2_16.intValue());
              var2_12 = new Boolean(var1_13.intValue() == new Integer(2).intValue());
              pred_7 = var2_12;
            }
          }
          if (pred_7.booleanValue()) {
            res_s_5.add(a);
          }
        }
      }
    }
    normalBiAss = res_s_5;
    HashSet product = new HashSet();
    HashSet res_s_24 = new HashSet();
    {

      IUmlAssociation a = null;
      {
        for (Iterator enm_41 = associations.iterator(); enm_41.hasNext(); ) {

          IUmlAssociation elem_40 = (IUmlAssociation) enm_41.next();
          a = (IUmlAssociation) elem_40;
          Boolean pred_26 = null;
          Boolean var1_27 = null;
          Boolean unArg_28 = null;
          String par_30 = null;
          par_30 = a.getId();
          unArg_28 = hasXorConstraint(constraints, par_30);
          var1_27 = new Boolean(!unArg_28.booleanValue());
          {
            if ((pred_26 = var1_27).booleanValue()) {

              Boolean var2_31 = null;
              Integer var1_32 = null;
              Integer var1_33 = null;
              HashSet unArg_34 = new HashSet();
              unArg_34 = a.getOwnedEnds();
              var1_33 = new Integer(unArg_34.size());
              Integer var2_35 = null;
              HashSet unArg_36 = new HashSet();
              unArg_36 = a.getOwnedNavivableEnds();
              var2_35 = new Integer(unArg_36.size());
              var1_32 = new Integer(var1_33.intValue() + var2_35.intValue());
              var2_31 = new Boolean((var1_32.intValue()) > (new Integer(2).intValue()));
              pred_26 = var2_31;
            }
          }
          if (pred_26.booleanValue()) {
            res_s_24.add(a);
          }
        }
      }
    }
    product = res_s_24;
    HashSet xor = new HashSet();
    HashSet res_s_43 = new HashSet();
    {

      IUmlAssociation a = null;
      {
        for (Iterator enm_59 = associations.iterator(); enm_59.hasNext(); ) {

          IUmlAssociation elem_58 = (IUmlAssociation) enm_59.next();
          a = (IUmlAssociation) elem_58;
          Boolean pred_45 = null;
          Boolean var1_46 = null;
          String par_48 = null;
          par_48 = a.getId();
          var1_46 = hasXorConstraint(constraints, par_48);
          {
            if ((pred_45 = var1_46).booleanValue()) {

              Boolean var2_49 = null;
              Integer var1_50 = null;
              Integer var1_51 = null;
              HashSet unArg_52 = new HashSet();
              unArg_52 = a.getOwnedEnds();
              var1_51 = new Integer(unArg_52.size());
              Integer var2_53 = null;
              HashSet unArg_54 = new HashSet();
              unArg_54 = a.getOwnedNavivableEnds();
              var2_53 = new Integer(unArg_54.size());
              var1_50 = new Integer(var1_51.intValue() + var2_53.intValue());
              var2_49 = new Boolean((var1_50.intValue()) >= (new Integer(2).intValue()));
              pred_45 = var2_49;
            }
          }
          if (pred_45.booleanValue()) {
            res_s_43.add(a);
          }
        }
      }
    }
    xor = res_s_43;
    {

      HashSet tmpVal_61 = new HashSet();
      HashSet res_s_62 = new HashSet();
      {

        IUmlAssociation a = null;
        {
          for (Iterator enm_70 = normalBiAss.iterator(); enm_70.hasNext(); ) {

            IUmlAssociation elem_69 = (IUmlAssociation) enm_70.next();
            a = (IUmlAssociation) elem_69;
            Boolean res_s_63 = null;
            HashSet par_64 = new HashSet();
            HashSet var1_65 = new HashSet();
            var1_65 = a.getOwnedEnds();
            HashSet var2_66 = new HashSet();
            var2_66 = a.getOwnedNavivableEnds();
            par_64 = (HashSet) var1_65.clone();
            par_64.addAll(var2_66);
            res_s_63 = exstractBinaryAssociation(par_64);
            res_s_62.add(res_s_63);
          }
        }
      }
      tmpVal_61 = res_s_62;
      HashSet tmpVal_71 = new HashSet();
      HashSet res_s_72 = new HashSet();
      {

        IUmlConstraint c = null;
        {
          for (Iterator enm_99 = constraints.iterator(); enm_99.hasNext(); ) {

            IUmlConstraint elem_98 = (IUmlConstraint) enm_99.next();
            c = (IUmlConstraint) elem_98;
            Boolean res_s_73 = null;
            HashSet par_74 = new HashSet();
            HashSet unArg_75 = new HashSet();
            HashSet res_s_76 = new HashSet();
            {

              IUmlAssociation a = null;
              {
                for (Iterator enm_92 = xor.iterator(); enm_92.hasNext(); ) {

                  IUmlAssociation elem_91 = (IUmlAssociation) enm_92.next();
                  a = (IUmlAssociation) elem_91;
                  Boolean pred_80 = null;
                  boolean tmpQuant_81 = false;
                  {

                    HashSet e_set_86 = new HashSet();
                    e_set_86 = c.getConstraintElements();
                    String id = null;
                    {
                      for (Iterator enm_88 = e_set_86.iterator(); enm_88.hasNext() && !tmpQuant_81; ) {

                        String elem_87 = UTIL.ConvertToString(enm_88.next());
                        id = elem_87;
                        Boolean pred_82 = null;
                        String var2_84 = null;
                        var2_84 = a.getId();
                        pred_82 = new Boolean(UTIL.equals(id, var2_84));
                        if (pred_82.booleanValue()) 
                          tmpQuant_81 = true;
                      }
                    }
                  }
                  pred_80 = new Boolean(tmpQuant_81);
                  if (pred_80.booleanValue()) {

                    HashSet res_s_77 = new HashSet();
                    HashSet var1_78 = new HashSet();
                    var1_78 = a.getOwnedEnds();
                    HashSet var2_79 = new HashSet();
                    var2_79 = a.getOwnedNavivableEnds();
                    res_s_77 = (HashSet) var1_78.clone();
                    res_s_77.addAll(var2_79);
                    res_s_76.add(res_s_77);
                  }
                }
              }
            }
            unArg_75 = res_s_76;
            HashSet rduset_93 = new HashSet();
            for (Iterator enm_95 = unArg_75.iterator(); enm_95.hasNext(); ) {

              HashSet e_94 = (HashSet) enm_95.next();
              rduset_93.addAll(e_94);
            }
            par_74 = rduset_93;
            res_s_73 = exstractUnionAssociation(par_74);
            res_s_72.add(res_s_73);
          }
        }
      }
      tmpVal_71 = res_s_72;
      HashSet tmpVal_100 = new HashSet();
      HashSet res_s_101 = new HashSet();
      {

        IUmlAssociation a = null;
        {
          for (Iterator enm_114 = product.iterator(); enm_114.hasNext(); ) {

            IUmlAssociation elem_113 = (IUmlAssociation) enm_114.next();
            a = (IUmlAssociation) elem_113;
            Boolean res_s_102 = null;
            HashSet par_103 = new HashSet();
            HashSet unArg_104 = new HashSet();
            HashSet enum_set_105 = new HashSet();
            HashSet var1_106 = new HashSet();
            var1_106 = a.getOwnedEnds();
            HashSet var2_107 = new HashSet();
            var2_107 = a.getOwnedNavivableEnds();
            enum_set_105 = (HashSet) var1_106.clone();
            enum_set_105.addAll(var2_107);
            unArg_104 = new HashSet();
            unArg_104.add(enum_set_105);
            HashSet rduset_108 = new HashSet();
            for (Iterator enm_110 = unArg_104.iterator(); enm_110.hasNext(); ) {

              HashSet e_109 = (HashSet) enm_110.next();
              rduset_108.addAll(e_109);
            }
            par_103 = rduset_108;
            res_s_102 = exstractProductAssociation(par_103);
            res_s_101.add(res_s_102);
          }
        }
      }
      tmpVal_100 = res_s_101;
    }
  }
// ***** VDMTOOLS END Name=exstractInstanceVarsFromAssociations#2|HashSet|HashSet


// ***** VDMTOOLS START Name=hasXorConstraint#2|HashSet|String KEEP=NO
  public Boolean hasXorConstraint (final HashSet constraints, final String associationId) throws CGException {

    Boolean rexpr_3 = null;
    boolean tmpQuant_4 = false;
    {

      IUmlConstraint c = null;
      {
        for (Iterator enm_21 = constraints.iterator(); enm_21.hasNext() && !tmpQuant_4; ) {

          IUmlConstraint elem_20 = (IUmlConstraint) enm_21.next();
          c = (IUmlConstraint) elem_20;
          Boolean pred_5 = null;
          Boolean var1_6 = null;
          String var1_7 = null;
          var1_7 = c.getSpecification();
          var1_6 = new Boolean(UTIL.equals(var1_7, new String("xor")));
          {
            if ((pred_5 = var1_6).booleanValue()) {

              Boolean var2_9 = null;
              boolean tmpQuant_10 = false;
              {

                HashSet e_set_15 = new HashSet();
                e_set_15 = c.getConstraintElements();
                String ce = null;
                {
                  for (Iterator enm_17 = e_set_15.iterator(); enm_17.hasNext() && !tmpQuant_10; ) {

                    String elem_16 = UTIL.ConvertToString(enm_17.next());
                    ce = elem_16;
                    if (new Boolean(UTIL.equals(ce, associationId)).booleanValue()) 
                      tmpQuant_10 = true;
                  }
                }
              }
              var2_9 = new Boolean(tmpQuant_10);
              pred_5 = var2_9;
            }
          }
          if (pred_5.booleanValue()) 
            tmpQuant_4 = true;
        }
      }
    }
    rexpr_3 = new Boolean(tmpQuant_4);
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=hasXorConstraint#2|HashSet|String


// ***** VDMTOOLS START Name=exstractBinaryAssociation#1|HashSet KEEP=NO
  public Boolean exstractBinaryAssociation (final HashSet props) throws CGException {

    {

      Vector propSeq = null;
      propSeq = (Vector) UTIL.ConvertToList(Util.SetToSeq(props));
      IUmlProperty pOwnerEnd = null;
      Vector unArg_6 = null;
      {

        Vector res_l_7 = new Vector();
        HashSet resBind_s_9 = new HashSet();
        HashSet riseq_13 = new HashSet();
        int max_14 = propSeq.size();
        for (int i_15 = 1; i_15 <= max_14; i_15++) 
          riseq_13.add(new Integer(i_15));
        resBind_s_9 = riseq_13;
        Vector bind_l_8 = null;
        bind_l_8 = UTIL.Sort(resBind_s_9);
        Integer i = null;
        for (Iterator enm_27 = bind_l_8.iterator(); enm_27.hasNext(); ) {

          Integer e_11 = UTIL.NumberToInt(enm_27.next());
          i = e_11;
          Boolean pred_19 = null;
          Integer var1_20 = null;
          String unArg_21 = null;
          IUmlProperty obj_22 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            obj_22 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          unArg_21 = obj_22.getName();
          var1_20 = new Integer(unArg_21.length());
          pred_19 = new Boolean(var1_20.intValue() == new Integer(0).intValue());
          if (pred_19.booleanValue()) {

            IUmlProperty reselem_16 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
              reselem_16 = (IUmlProperty) propSeq.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_7.add(reselem_16);
          }
        }
        unArg_6 = res_l_7;
      }
      pOwnerEnd = (IUmlProperty) unArg_6.get(0);
      IUmlProperty pTypeEnd = null;
      Vector unArg_29 = null;
      {

        Vector res_l_30 = new Vector();
        HashSet resBind_s_32 = new HashSet();
        HashSet riseq_36 = new HashSet();
        int max_37 = propSeq.size();
        for (int i_38 = 1; i_38 <= max_37; i_38++) 
          riseq_36.add(new Integer(i_38));
        resBind_s_32 = riseq_36;
        Vector bind_l_31 = null;
        bind_l_31 = UTIL.Sort(resBind_s_32);
        Integer i = null;
        for (Iterator enm_50 = bind_l_31.iterator(); enm_50.hasNext(); ) {

          Integer e_34 = UTIL.NumberToInt(enm_50.next());
          i = e_34;
          Boolean pred_42 = null;
          Integer var1_43 = null;
          String unArg_44 = null;
          IUmlProperty obj_45 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            obj_45 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          unArg_44 = obj_45.getName();
          var1_43 = new Integer(unArg_44.length());
          pred_42 = new Boolean((var1_43.intValue()) > (new Integer(0).intValue()));
          if (pred_42.booleanValue()) {

            IUmlProperty reselem_39 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
              reselem_39 = (IUmlProperty) propSeq.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_30.add(reselem_39);
          }
        }
        unArg_29 = res_l_30;
      }
      pTypeEnd = (IUmlProperty) unArg_29.get(0);
      String tmpVal_51 = null;
      {

        IUmlType tmpVal_53 = null;
        tmpVal_53 = (IUmlType) pOwnerEnd.getType();
        IUmlClassNameType t = null;
        t = (IUmlClassNameType) tmpVal_53;
        tmpVal_51 = t.getName();
      }
      String clName = null;
      clName = tmpVal_51;
      IOmlInstanceVariable tmpArg_v_56 = null;
      IOmlType par_58 = null;
      IUmlType par_59 = null;
      par_59 = (IUmlType) pTypeEnd.getType();
      par_58 = (IOmlType) ConvertType((IUmlType) par_59);
      tmpArg_v_56 = (IOmlInstanceVariable) CreateInstanceVar((IUmlProperty) pTypeEnd, (IOmlType) par_58);
      AddInstanceVarToClass(clName, (IOmlInstanceVariable) tmpArg_v_56);
    }
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=exstractBinaryAssociation#1|HashSet


// ***** VDMTOOLS START Name=exstractUnionAssociation#1|HashSet KEEP=NO
  public Boolean exstractUnionAssociation (final HashSet props) throws CGException {

    {

      HashSet ownerEndSet = new HashSet();
      HashSet res_s_4 = new HashSet();
      {

        IUmlProperty p = null;
        {
          for (Iterator enm_13 = props.iterator(); enm_13.hasNext(); ) {

            IUmlProperty elem_12 = (IUmlProperty) enm_13.next();
            p = (IUmlProperty) elem_12;
            Boolean pred_6 = null;
            Integer var1_7 = null;
            String unArg_8 = null;
            unArg_8 = p.getName();
            var1_7 = new Integer(unArg_8.length());
            pred_6 = new Boolean(var1_7.intValue() == new Integer(0).intValue());
            if (pred_6.booleanValue()) {
              res_s_4.add(p);
            }
          }
        }
      }
      ownerEndSet = res_s_4;
      Vector propSeq = null;
      propSeq = (Vector) UTIL.ConvertToList(Util.SetToSeq(props));
      IUmlProperty pOwnerEnd = null;
      Vector unArg_17 = null;
      unArg_17 = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownerEndSet));
      pOwnerEnd = (IUmlProperty) unArg_17.get(0);
      Vector pTypeEnd = null;
      {

        Vector res_l_20 = new Vector();
        HashSet resBind_s_22 = new HashSet();
        HashSet riseq_26 = new HashSet();
        int max_27 = propSeq.size();
        for (int i_28 = 1; i_28 <= max_27; i_28++) 
          riseq_26.add(new Integer(i_28));
        resBind_s_22 = riseq_26;
        Vector bind_l_21 = null;
        bind_l_21 = UTIL.Sort(resBind_s_22);
        Integer i = null;
        for (Iterator enm_40 = bind_l_21.iterator(); enm_40.hasNext(); ) {

          Integer e_24 = UTIL.NumberToInt(enm_40.next());
          i = e_24;
          Boolean pred_32 = null;
          Integer var1_33 = null;
          String unArg_34 = null;
          IUmlProperty obj_35 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            obj_35 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          unArg_34 = obj_35.getName();
          var1_33 = new Integer(unArg_34.length());
          pred_32 = new Boolean((var1_33.intValue()) > (new Integer(0).intValue()));
          if (pred_32.booleanValue()) {

            IUmlProperty reselem_29 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
              reselem_29 = (IUmlProperty) propSeq.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_20.add(reselem_29);
          }
        }
        pTypeEnd = res_l_20;
      }
      String tmpVal_41 = null;
      {

        IUmlType tmpVal_43 = null;
        tmpVal_43 = (IUmlType) pOwnerEnd.getType();
        IUmlClassNameType t = null;
        t = (IUmlClassNameType) tmpVal_43;
        tmpVal_41 = t.getName();
      }
      String clName = null;
      clName = tmpVal_41;
      Vector endTypes = null;
      HashSet par_45 = new HashSet();
      HashSet res_s_46 = new HashSet();
      {

        HashSet e1_set_51 = new HashSet(pTypeEnd);
        IUmlProperty p = null;
        {
          for (Iterator enm_53 = e1_set_51.iterator(); enm_53.hasNext(); ) {

            IUmlProperty elem_52 = (IUmlProperty) enm_53.next();
            p = (IUmlProperty) elem_52;
            IOmlType res_s_47 = null;
            IUmlType par_48 = null;
            par_48 = (IUmlType) p.getType();
            res_s_47 = (IOmlType) ConvertType((IUmlType) par_48);
            res_s_46.add(res_s_47);
          }
        }
      }
      par_45 = res_s_46;
      endTypes = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_45));
      IOmlType lhs = (IOmlType) (IOmlType) endTypes.get(0);
      IOmlType rhs = null;
      Vector unArg_57 = null;
      HashSet par_58 = new HashSet();
      HashSet var1_59 = new HashSet();
      HashSet set_61 = new HashSet();
      Enumeration enm_62 = endTypes.elements();
      while ( enm_62.hasMoreElements())
        set_61.add(enm_62.nextElement());
      var1_59 = set_61;
      HashSet var2_63 = new HashSet();
      var2_63 = new HashSet();
      var2_63.add(lhs);
      par_58 = (HashSet) var1_59.clone();
      par_58.removeAll(var2_63);
      unArg_57 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_58));
      rhs = (IOmlType) unArg_57.get(0);
      OmlUnionType tmpVal_65 = null;
      tmpVal_65 = (OmlUnionType) new OmlUnionType(lhs, rhs);
      OmlUnionType type = null;
      type = (OmlUnionType) tmpVal_65;
      AddInstanceVarToClass(clName, (IOmlInstanceVariable) (IOmlInstanceVariable) CreateInstanceVar((IUmlProperty) (IUmlProperty) pTypeEnd.get(0), (IOmlType) type));
    }
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=exstractUnionAssociation#1|HashSet


// ***** VDMTOOLS START Name=exstractProductAssociation#1|HashSet KEEP=NO
  public Boolean exstractProductAssociation (final HashSet props) throws CGException {

    {

      HashSet ownerEndSet = new HashSet();
      HashSet res_s_4 = new HashSet();
      {

        IUmlProperty p = null;
        {
          for (Iterator enm_13 = props.iterator(); enm_13.hasNext(); ) {

            IUmlProperty elem_12 = (IUmlProperty) enm_13.next();
            p = (IUmlProperty) elem_12;
            Boolean pred_6 = null;
            Integer var1_7 = null;
            String unArg_8 = null;
            unArg_8 = p.getName();
            var1_7 = new Integer(unArg_8.length());
            pred_6 = new Boolean(var1_7.intValue() == new Integer(0).intValue());
            if (pred_6.booleanValue()) {
              res_s_4.add(p);
            }
          }
        }
      }
      ownerEndSet = res_s_4;
      Vector propSeq = null;
      propSeq = (Vector) UTIL.ConvertToList(Util.SetToSeq(props));
      IUmlProperty pOwnerEnd = null;
      Vector unArg_17 = null;
      unArg_17 = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownerEndSet));
      pOwnerEnd = (IUmlProperty) unArg_17.get(0);
      Vector pTypeEnd = null;
      {

        Vector res_l_20 = new Vector();
        HashSet resBind_s_22 = new HashSet();
        HashSet riseq_26 = new HashSet();
        int max_27 = propSeq.size();
        for (int i_28 = 1; i_28 <= max_27; i_28++) 
          riseq_26.add(new Integer(i_28));
        resBind_s_22 = riseq_26;
        Vector bind_l_21 = null;
        bind_l_21 = UTIL.Sort(resBind_s_22);
        Integer i = null;
        for (Iterator enm_40 = bind_l_21.iterator(); enm_40.hasNext(); ) {

          Integer e_24 = UTIL.NumberToInt(enm_40.next());
          i = e_24;
          Boolean pred_32 = null;
          Integer var1_33 = null;
          String unArg_34 = null;
          IUmlProperty obj_35 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
            obj_35 = (IUmlProperty) propSeq.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          unArg_34 = obj_35.getName();
          var1_33 = new Integer(unArg_34.length());
          pred_32 = new Boolean((var1_33.intValue()) > (new Integer(0).intValue()));
          if (pred_32.booleanValue()) {

            IUmlProperty reselem_29 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= propSeq.size())) 
              reselem_29 = (IUmlProperty) propSeq.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_l_20.add(reselem_29);
          }
        }
        pTypeEnd = res_l_20;
      }
      String tmpVal_41 = null;
      {

        IUmlType tmpVal_43 = null;
        tmpVal_43 = (IUmlType) pOwnerEnd.getType();
        IUmlClassNameType t = null;
        t = (IUmlClassNameType) tmpVal_43;
        tmpVal_41 = t.getName();
      }
      String clName = null;
      clName = tmpVal_41;
      Vector endTypes = null;
      HashSet par_45 = new HashSet();
      HashSet res_s_46 = new HashSet();
      {

        HashSet e1_set_50 = new HashSet(pTypeEnd);
        IUmlProperty p = null;
        {
          for (Iterator enm_52 = e1_set_50.iterator(); enm_52.hasNext(); ) {

            IUmlProperty elem_51 = (IUmlProperty) enm_52.next();
            p = (IUmlProperty) elem_51;
            IUmlType res_s_47 = null;
            res_s_47 = (IUmlType) p.getType();
            res_s_46.add(res_s_47);
          }
        }
      }
      par_45 = res_s_46;
      endTypes = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_45));
      IOmlType tmpVal_53 = null;
      tmpVal_53 = (IOmlType) (IOmlType) CreateProductType(endTypes);
      IOmlType type = null;
      type = (IOmlType) tmpVal_53;
      AddInstanceVarToClass(clName, (IOmlInstanceVariable) (IOmlInstanceVariable) CreateInstanceVar((IUmlProperty) (IUmlProperty) pTypeEnd.get(0), (IOmlType) type));
    }
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=exstractProductAssociation#1|HashSet


// ***** VDMTOOLS START Name=CreateProductType#1|Vector KEEP=NO
  private IOmlType CreateProductType (final Vector tps) throws CGException {

    IUmlType first = (IUmlType) (IUmlType) tps.get(0);
    Vector vdm_rest = new Vector(tps.subList(1, tps.size()));
    IOmlType front = (IOmlType) (IOmlType) ConvertType((IUmlType) first);
    if (new Boolean(new Integer(tps.size()).intValue() == new Integer(1).intValue()).booleanValue()) 
      return (IOmlType) front;
    else 
      return (IOmlType) new OmlProductType(front, (IOmlType) CreateProductType(vdm_rest));
  }
// ***** VDMTOOLS END Name=CreateProductType#1|Vector


// ***** VDMTOOLS START Name=CreateInstanceVar#2|IUmlProperty|IOmlType KEEP=NO
  public IOmlInstanceVariable CreateInstanceVar (final IUmlProperty prop, final IOmlType type) throws CGException {

    Boolean asyncAccess = new Boolean(false);
    Boolean statAccess = null;
    statAccess = prop.getIsStatic();
    IOmlScope scope = null;
    IUmlVisibilityKind par_7 = null;
    par_7 = (IUmlVisibilityKind) prop.getVisibility();
    scope = (IOmlScope) ConvertVisibility((IUmlVisibilityKind) par_7);
    OmlAccessDefinition access = (OmlAccessDefinition) new OmlAccessDefinition(asyncAccess, statAccess, scope);
    IOmlExpression expression = null;
    Boolean cond_14 = null;
    cond_14 = prop.hasDefault();
    if (cond_14.booleanValue()) {

      String par_15 = null;
      par_15 = prop.getDefault();
      IUmlType par_16 = null;
      par_16 = (IUmlType) prop.getType();
      expression = (IOmlExpression) getDefaultExpression(par_15, (IUmlType) par_16);
    }
    else 
      expression = null;
    OmlAssignmentDefinition assignmentDef = null;
    String arg_18 = null;
    arg_18 = prop.getName();
    assignmentDef = new OmlAssignmentDefinition(arg_18, type, expression);
    return (IOmlInstanceVariable) new OmlInstanceVariable(access, assignmentDef);
  }
// ***** VDMTOOLS END Name=CreateInstanceVar#2|IUmlProperty|IOmlType


// ***** VDMTOOLS START Name=AddInstanceVarToClass#2|String|IOmlInstanceVariable KEEP=NO
  private void AddInstanceVarToClass (final String clName, final IOmlInstanceVariable instanceVar) throws CGException {

    Vector existingSet = getAssociationInstanceVars(clName);
    Vector addedSet = null;
    if (new Boolean((new Integer(existingSet.size()).intValue()) > (new Integer(0).intValue())).booleanValue()) {

      Vector var2_14 = null;
      var2_14 = new Vector();
      var2_14.add(instanceVar);
      addedSet = (Vector) existingSet.clone();
      addedSet.addAll(var2_14);
    }
    else {

      addedSet = new Vector();
      addedSet.add(instanceVar);
    }
    classInstanceVars.put(clName, addedSet);
  }
// ***** VDMTOOLS END Name=AddInstanceVarToClass#2|String|IOmlInstanceVariable


// ***** VDMTOOLS START Name=getAssociationInstanceVars#1|String KEEP=NO
  public Vector getAssociationInstanceVars (final String clName) throws CGException {

    Boolean cond_2 = null;
    cond_2 = new Boolean(classInstanceVars.containsKey(clName));
    if (cond_2.booleanValue()) 
      return (Vector) UTIL.ConvertToList(classInstanceVars.get(clName));
    else 
      return new Vector();
  }
// ***** VDMTOOLS END Name=getAssociationInstanceVars#1|String


// ***** VDMTOOLS START Name=getDefaultExpression#2|String|IUmlType KEEP=NO
  public IOmlExpression getDefaultExpression (final String defaultValue, final IUmlType t) throws CGException {
    if (new Boolean(UTIL.equals(defaultValue, null)).booleanValue()) 
      return null;
    else {

      boolean succ_6 = true;
      {

        succ_6 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlClassNameType))) 
          succ_6 = false;
        if (succ_6) 
          return (IOmlExpression) new OmlNewExpression(new OmlName(null, defaultValue), new Vector(), new Vector());
        else {

          succ_6 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
            succ_6 = false;
          if (succ_6) 
            return (IOmlExpression) new OmlSymbolicLiteralExpression(new OmlNumericLiteral());
          else {

            succ_6 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlStringType))) 
              succ_6 = false;
            if (succ_6) 
              return (IOmlExpression) new OmlSymbolicLiteralExpression(new OmlTextLiteral(defaultValue));
            else 
              return null;
          }
        }
      }
    }
   
  }
// ***** VDMTOOLS END Name=getDefaultExpression#2|String|IUmlType


// ***** VDMTOOLS START Name=ConvertVisibility#1|IUmlVisibilityKind KEEP=NO
  public IOmlScope ConvertVisibility (final IUmlVisibilityKind visibility) throws CGException {

    Integer val = null;
    val = visibility.getValue();
    boolean succ_4 = true;
    {

      succ_4 = true;
      if (!UTIL.equals(val, UmlVisibilityKindQuotes.IQPUBLIC)) 
        succ_4 = false;
      if (succ_4) 
        return (IOmlScope) new OmlScope(OmlScopeQuotes.IQPUBLIC);
      else {

        succ_4 = true;
        if (!UTIL.equals(val, UmlVisibilityKindQuotes.IQPRIVATE)) 
          succ_4 = false;
        if (succ_4) 
          return (IOmlScope) new OmlScope(OmlScopeQuotes.IQDEFAULT);
        else {

          succ_4 = true;
          if (!UTIL.equals(val, UmlVisibilityKindQuotes.IQPROTECTED)) 
            succ_4 = false;
          if (succ_4) 
            return (IOmlScope) new OmlScope(OmlScopeQuotes.IQPROTECTED);
        }
      }
    }
    throw new CGException();
  }
// ***** VDMTOOLS END Name=ConvertVisibility#1|IUmlVisibilityKind


// ***** VDMTOOLS START Name=ConvertType#1|IUmlType KEEP=NO
  public IOmlType ConvertType (final IUmlType t) throws CGException {

    boolean succ_2 = true;
    {

      succ_2 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlClassNameType))) 
        succ_2 = false;
      if (succ_2) {

        OmlTypeName rexpr_24 = null;
        OmlName arg_25 = null;
        {

          IUmlClassNameType tmp = (IUmlClassNameType) t;
          String arg_29 = null;
          arg_29 = tmp.getName();
          arg_25 = new OmlName(null, arg_29);
        }
        rexpr_24 = new OmlTypeName(arg_25);
        return (IOmlType) rexpr_24;
      }
      else {

        succ_2 = true;
        if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlCharType))) 
          succ_2 = false;
        if (succ_2) 
          return (IOmlType) new OmlCharType();
        else {

          succ_2 = true;
          if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlStringType))) 
            succ_2 = false;
          if (succ_2) 
            return (IOmlType) new OmlSeq0Type(new OmlCharType());
          else {

            succ_2 = true;
            if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlIntegerType))) 
              succ_2 = false;
            if (succ_2) 
              return (IOmlType) new OmlIntType();
            else {

              succ_2 = true;
              if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlBoolType))) 
                succ_2 = false;
              if (succ_2) 
                return (IOmlType) new OmlBoolType();
              else {

                succ_2 = true;
                if (!UTIL.equals(new Boolean(true), new Boolean(t instanceof IUmlUnlimitedNatural))) 
                  succ_2 = false;
                if (succ_2) 
                  return (IOmlType) new OmlRealType();
                else 
                  return (IOmlType) new OmlNatType();
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=ConvertType#1|IUmlType

}
;
