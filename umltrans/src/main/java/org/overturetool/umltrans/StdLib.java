//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.quotes.*;
// ***** VDMTOOLS END Name=imports



public class StdLib {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=vdm_init_StdLib KEEP=NO
  private void vdm_init_StdLib () throws CGException {}
// ***** VDMTOOLS END Name=vdm_init_StdLib


// ***** VDMTOOLS START Name=StdLib KEEP=NO
  public StdLib () throws CGException {
    vdm_init_StdLib();
  }
// ***** VDMTOOLS END Name=StdLib


// ***** VDMTOOLS START Name=ToString#1|Object KEEP=NO
  static public String ToString (final Object s) throws CGException {

    String varRes_2 = null;
    boolean succ_3 = true;
    {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.IsInteger(s)))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringInt(s);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.IsInteger(s) && ((Number) s).intValue() >= 0))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringInt(s);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean(UTIL.IsInteger(s) && ((Number) s).intValue() >= 1))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringInt(s);
    }
    if (!succ_3) {

      succ_3 = true;
      if (!UTIL.equals(new Boolean(true), new Boolean((s instanceof Boolean)))) 
        succ_3 = false;
      if (succ_3) 
        varRes_2 = ToStringBool((Boolean) s);
    }
    if (!succ_3) 
      UTIL.RunTime("Run-Time Error:Can not evaluate an undefined expression");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=ToString#1|Object


// ***** VDMTOOLS START Name=ToStringBool#1|Boolean KEEP=NO
  static public String ToStringBool (final Boolean pval) throws CGException {

    String varRes_2 = null;
    if (pval.booleanValue()) 
      varRes_2 = new String("true");
    else 
      varRes_2 = new String("false");
    return varRes_2;
  }
// ***** VDMTOOLS END Name=ToStringBool#1|Boolean


// ***** VDMTOOLS START Name=ToStringInt#1|Object KEEP=NO
  static public String ToStringInt (final Object val) throws CGException {

    String varRes_2 = null;
    {

      Integer result = new Integer((int) (UTIL.NumberToInt((Number) val).doubleValue() - new Integer(10).doubleValue() * Math.floor(UTIL.NumberToInt((Number) val).doubleValue() / new Integer(10).doubleValue())));
      Integer vdm_rest = new Integer((int) (UTIL.NumberToInt((Number) val).intValue() / new Integer(10).intValue()));
      if (new Boolean((vdm_rest.intValue()) > (new Integer(0).intValue())).booleanValue()) 
        varRes_2 = ToStringInt(vdm_rest).concat(GetStringFromNum(result));
      else 
        varRes_2 = GetStringFromNum(result);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=ToStringInt#1|Object


// ***** VDMTOOLS START Name=GetStringFromNum#1|Integer KEEP=NO
  static public String GetStringFromNum (final Integer val) throws CGException {

    String varRes_2 = null;
    Character e_seq_3 = null;
    if ((1 <= new Integer(val.intValue() + new Integer(1).intValue()).intValue()) && (new Integer(val.intValue() + new Integer(1).intValue()).intValue() <= new String("0123456789").length())) 
      e_seq_3 = new Character(new String("0123456789").charAt(new Integer(val.intValue() + new Integer(1).intValue()).intValue() - 1));
    else 
      UTIL.RunTime("Run-Time Error:Illegal index");
    varRes_2 = new String();
    varRes_2 = varRes_2 + e_seq_3;
    return varRes_2;
  }
// ***** VDMTOOLS END Name=GetStringFromNum#1|Integer


// ***** VDMTOOLS START Name=SetToSeq#1|HashSet KEEP=NO
  static public Vector SetToSeq (final HashSet s) throws CGException {

    Vector varRes_2 = null;
    if (new Boolean(UTIL.equals(s, new HashSet())).booleanValue()) 
      varRes_2 = new Vector();
    else {

      HashSet tmpSet_7 = new HashSet();
      tmpSet_7 = s;
      Object x = null;
      boolean succ_9 = false;
      for (Iterator enm_11 = tmpSet_7.iterator(); enm_11.hasNext() && !succ_9; ) {

        Object tmpElem_10 = (Object) enm_11.next();
        succ_9 = true;
        x = (Object) tmpElem_10;
      }
      if (!succ_9) 
        UTIL.RunTime("Run-Time Error:The binding environment was empty");
      Vector var1_12 = null;
      HashSet par_13 = new HashSet();
      HashSet var2_15 = new HashSet();
      var2_15 = new HashSet();
      var2_15.add(x);
      par_13 = (HashSet) s.clone();
      par_13.removeAll(var2_15);
      var1_12 = (Vector) UTIL.ConvertToList(SetToSeq(par_13));
      Vector var2_17 = null;
      var2_17 = new Vector();
      var2_17.add(x);
      varRes_2 = (Vector) var1_12.clone();
      varRes_2.addAll(var2_17);
    }
    return varRes_2;
  }
// ***** VDMTOOLS END Name=SetToSeq#1|HashSet


// ***** VDMTOOLS START Name=StringToBool#1|String KEEP=NO
  static public Boolean StringToBool (final String val) throws CGException {

    Boolean varRes_2 = null;
    if (new Boolean(UTIL.equals(val, new String("true"))).booleanValue()) 
      varRes_2 = new Boolean(true);
    else 
      varRes_2 = new Boolean(false);
    return varRes_2;
  }
// ***** VDMTOOLS END Name=StringToBool#1|String

}
;
