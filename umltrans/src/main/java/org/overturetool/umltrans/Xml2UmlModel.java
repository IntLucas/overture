//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2008-11-08 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Wed 29-Oct-2008 09:29:09)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.umltrans;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Vector;

import jp.co.csk.vdm.toolbox.VDM.CGException;
import jp.co.csk.vdm.toolbox.VDM.UTIL;



public class Xml2UmlModel extends XmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=result KEEP=NO
  public IUmlModel result = null;
// ***** VDMTOOLS END Name=result

// ***** VDMTOOLS START Name=primiticeTypes KEEP=NO
  private HashSet primiticeTypes = new HashSet();
// ***** VDMTOOLS END Name=primiticeTypes

// ***** VDMTOOLS START Name=classes KEEP=NO
  private HashSet classes = new HashSet();
// ***** VDMTOOLS END Name=classes

// ***** VDMTOOLS START Name=associations KEEP=NO
  private HashSet associations = new HashSet();
// ***** VDMTOOLS END Name=associations

// ***** VDMTOOLS START Name=constraints KEEP=NO
  private HashSet constraints = new HashSet();
// ***** VDMTOOLS END Name=constraints

// ***** VDMTOOLS START Name=classesTypeMap KEEP=NO
  private HashMap classesTypeMap = new HashMap();
// ***** VDMTOOLS END Name=classesTypeMap


// ***** VDMTOOLS START Name=vdm_init_Xml2UmlModel KEEP=NO
  private void vdm_init_Xml2UmlModel () throws CGException {
    try {

      result = null;
      primiticeTypes = new HashSet();
      primiticeTypes.add(new String("char"));
      primiticeTypes.add(new String("int"));
      primiticeTypes.add(new String("bool"));
      primiticeTypes.add(new String("String"));
      primiticeTypes.add(new String("unlimitedNatural"));
      primiticeTypes.add(new String("NotSupportedType"));
      classes = new HashSet();
      associations = new HashSet();
      constraints = new HashSet();
      classesTypeMap = new HashMap();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Xml2UmlModel


// ***** VDMTOOLS START Name=Xml2UmlModel KEEP=NO
  public Xml2UmlModel () throws CGException {
    vdm_init_Xml2UmlModel();
  }
// ***** VDMTOOLS END Name=Xml2UmlModel


// ***** VDMTOOLS START Name=VisitXmlDocument#1|XmlDocument KEEP=NO
  public void VisitXmlDocument (final XmlDocument doc) throws CGException {

    XmlEntity root = null;
    Vector unArg_2 = null;
    XmlEntityList tmpRec_3 = null;
    tmpRec_3 = doc.entities;
    unArg_2 = tmpRec_3.entities;
    root = (XmlEntity) unArg_2.get(0);
    XmlEntity model = null;
    Vector unArg_5 = null;
    {

      Vector res_l_6 = new Vector();
      HashSet resBind_s_8 = new HashSet();
      Vector unArg_11 = null;
      XmlEntityList tmpRec_12 = null;
      tmpRec_12 = root.entities;
      unArg_11 = tmpRec_12.entities;
      HashSet riseq_14 = new HashSet();
      int max_15 = unArg_11.size();
      for (int i_16 = 1; i_16 <= max_15; i_16++) 
        riseq_14.add(new Integer(i_16));
      resBind_s_8 = riseq_14;
      Vector bind_l_7 = null;
      bind_l_7 = UTIL.Sort(resBind_s_8);
      Integer i = null;
      for (Iterator enm_31 = bind_l_7.iterator(); enm_31.hasNext(); ) {

        Integer e_10 = UTIL.NumberToInt(enm_31.next());
        i = e_10;
        Boolean pred_22 = null;
        String var1_23 = null;
        XmlEntity tmpRec_24 = null;
        Vector tmp_l_25 = null;
        XmlEntityList tmpRec_26 = null;
        tmpRec_26 = root.entities;
        tmp_l_25 = tmpRec_26.entities;
        if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_25.size())) 
          tmpRec_24 = (XmlEntity) tmp_l_25.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_23 = tmpRec_24.name;
        pred_22 = new Boolean(UTIL.equals(var1_23, new String("uml:Model")));
        if (pred_22.booleanValue()) {

          XmlEntity reselem_17 = null;
          Vector tmp_l_18 = null;
          XmlEntityList tmpRec_19 = null;
          tmpRec_19 = root.entities;
          tmp_l_18 = tmpRec_19.entities;
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_18.size())) 
            reselem_17 = (XmlEntity) tmp_l_18.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_6.add(reselem_17);
        }
      }
      unArg_5 = res_l_6;
    }
    model = (XmlEntity) unArg_5.get(0);
    XmlEntity vdm_package = null;
    Vector unArg_32 = null;
    {

      Vector res_l_33 = new Vector();
      HashSet resBind_s_35 = new HashSet();
      Vector unArg_38 = null;
      XmlEntityList tmpRec_39 = null;
      tmpRec_39 = model.entities;
      unArg_38 = tmpRec_39.entities;
      HashSet riseq_41 = new HashSet();
      int max_42 = unArg_38.size();
      for (int i_43 = 1; i_43 <= max_42; i_43++) 
        riseq_41.add(new Integer(i_43));
      resBind_s_35 = riseq_41;
      Vector bind_l_34 = null;
      bind_l_34 = UTIL.Sort(resBind_s_35);
      Integer i = null;
      for (Iterator enm_57 = bind_l_34.iterator(); enm_57.hasNext(); ) {

        Integer e_37 = UTIL.NumberToInt(enm_57.next());
        i = e_37;
        Boolean pred_49 = null;
        XmlEntity par_50 = null;
        Vector tmp_l_51 = null;
        XmlEntityList tmpRec_52 = null;
        tmpRec_52 = model.entities;
        tmp_l_51 = tmpRec_52.entities;
        if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_51.size())) 
          par_50 = (XmlEntity) tmp_l_51.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        pred_49 = isAttributeType((XmlEntity) par_50, new String("uml:Package"));
        if (pred_49.booleanValue()) {

          XmlEntity reselem_44 = null;
          Vector tmp_l_45 = null;
          XmlEntityList tmpRec_46 = null;
          tmpRec_46 = model.entities;
          tmp_l_45 = tmpRec_46.entities;
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_45.size())) 
            reselem_44 = (XmlEntity) tmp_l_45.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_33.add(reselem_44);
        }
      }
      unArg_32 = res_l_33;
    }
    vdm_package = (XmlEntity) unArg_32.get(0);
    {

      Vector pes = null;
      XmlEntityList tmpRec_60 = null;
      tmpRec_60 = vdm_package.entities;
      pes = tmpRec_60.entities;
      {

        HashMap rhs_62 = new HashMap();
        HashMap modmap_63 = new HashMap();
        HashMap res_m_66 = new HashMap();
        {

          HashSet e_set_85 = new HashSet();
          HashSet riseq_87 = new HashSet();
          int max_88 = pes.size();
          for (int i_89 = 1; i_89 <= max_88; i_89++) 
            riseq_87.add(new Integer(i_89));
          e_set_85 = riseq_87;
          Integer i = null;
          {
            for (Iterator enm_91 = e_set_85.iterator(); enm_91.hasNext(); ) {

              Integer elem_90 = UTIL.NumberToInt(enm_91.next());
              i = elem_90;
              Boolean pred_79 = null;
              XmlEntity par_80 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_80 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_79 = isAttributeType((XmlEntity) par_80, new String("uml:Class"));
              if (pred_79.booleanValue()) {

                String md_67 = null;
                XmlAttribute tmpRec_68 = null;
                XmlEntity par_69 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_69 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                tmpRec_68 = (XmlAttribute) getAttribute((XmlEntity) par_69, new String("xmi:id"));
                md_67 = tmpRec_68.val;
                String mr_73 = null;
                XmlAttribute tmpRec_74 = null;
                XmlEntity par_75 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_75 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                tmpRec_74 = (XmlAttribute) getAttribute((XmlEntity) par_75, new String("name"));
                mr_73 = tmpRec_74.val;
                res_m_66.put(md_67, mr_73);
              }
            }
          }
        }
        modmap_63 = res_m_66;
        rhs_62 = new HashMap(classesTypeMap);
        rhs_62.putAll(modmap_63);
        classesTypeMap = (HashMap) UTIL.clone(rhs_62);
        HashSet rhs_92 = new HashSet();
        HashSet var2_94 = new HashSet();
        HashSet res_s_95 = new HashSet();
        {

          HashSet e_set_115 = new HashSet();
          HashSet riseq_117 = new HashSet();
          int max_118 = pes.size();
          for (int i_119 = 1; i_119 <= max_118; i_119++) 
            riseq_117.add(new Integer(i_119));
          e_set_115 = riseq_117;
          Integer i = null;
          {
            for (Iterator enm_121 = e_set_115.iterator(); enm_121.hasNext(); ) {

              Integer elem_120 = UTIL.NumberToInt(enm_121.next());
              i = elem_120;
              Boolean pred_100 = null;
              Boolean var1_101 = null;
              XmlEntity par_102 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_102 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var1_101 = isAttributeType((XmlEntity) par_102, new String("uml:Class"));
              {
                if ((pred_100 = var1_101).booleanValue()) {

                  Boolean var2_106 = null;
                  String var1_107 = null;
                  XmlAttribute tmpRec_108 = null;
                  XmlEntity par_109 = null;
                  if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                    par_109 = (XmlEntity) pes.get(i.intValue() - 1);
                  else 
                    UTIL.RunTime("Run-Time Error:Illegal index");
                  tmpRec_108 = (XmlAttribute) getAttribute((XmlEntity) par_109, new String("name"));
                  var1_107 = tmpRec_108.val;
                  var2_106 = new Boolean(!primiticeTypes.contains(var1_107));
                  pred_100 = var2_106;
                }
              }
              if (pred_100.booleanValue()) {

                IUmlClass res_s_96 = null;
                XmlEntity par_97 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_97 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_96 = (IUmlClass) exstractClass((XmlEntity) par_97);
                res_s_95.add(res_s_96);
              }
            }
          }
        }
        var2_94 = res_s_95;
        rhs_92 = (HashSet) classes.clone();
        rhs_92.addAll(var2_94);
        classes = (HashSet) UTIL.clone(rhs_92);
        HashSet rhs_122 = new HashSet();
        HashSet var2_124 = new HashSet();
        HashSet res_s_125 = new HashSet();
        {

          HashSet e_set_136 = new HashSet();
          HashSet riseq_138 = new HashSet();
          int max_139 = pes.size();
          for (int i_140 = 1; i_140 <= max_139; i_140++) 
            riseq_138.add(new Integer(i_140));
          e_set_136 = riseq_138;
          Integer i = null;
          {
            for (Iterator enm_142 = e_set_136.iterator(); enm_142.hasNext(); ) {

              Integer elem_141 = UTIL.NumberToInt(enm_142.next());
              i = elem_141;
              Boolean pred_130 = null;
              XmlEntity par_131 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_131 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_130 = isAttributeType((XmlEntity) par_131, new String("uml:Association"));
              if (pred_130.booleanValue()) {

                IUmlAssociation res_s_126 = null;
                XmlEntity par_127 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_127 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_126 = (IUmlAssociation) build_uAssociation((XmlEntity) par_127);
                res_s_125.add(res_s_126);
              }
            }
          }
        }
        var2_124 = res_s_125;
        rhs_122 = (HashSet) associations.clone();
        rhs_122.addAll(var2_124);
        associations = (HashSet) UTIL.clone(rhs_122);
        HashSet rhs_143 = new HashSet();
        HashSet var2_145 = new HashSet();
        HashSet res_s_146 = new HashSet();
        {

          HashSet e_set_157 = new HashSet();
          HashSet riseq_159 = new HashSet();
          int max_160 = pes.size();
          for (int i_161 = 1; i_161 <= max_160; i_161++) 
            riseq_159.add(new Integer(i_161));
          e_set_157 = riseq_159;
          Integer i = null;
          {
            for (Iterator enm_163 = e_set_157.iterator(); enm_163.hasNext(); ) {

              Integer elem_162 = UTIL.NumberToInt(enm_163.next());
              i = elem_162;
              Boolean pred_151 = null;
              XmlEntity par_152 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                par_152 = (XmlEntity) pes.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              pred_151 = isAttributeType((XmlEntity) par_152, new String("uml:Constraint"));
              if (pred_151.booleanValue()) {

                IUmlConstraint res_s_147 = null;
                XmlEntity par_148 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= pes.size())) 
                  par_148 = (XmlEntity) pes.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                res_s_147 = (IUmlConstraint) build_uConstraint((XmlEntity) par_148);
                res_s_146.add(res_s_147);
              }
            }
          }
        }
        var2_145 = res_s_146;
        rhs_143 = (HashSet) constraints.clone();
        rhs_143.addAll(var2_145);
        constraints = (HashSet) UTIL.clone(rhs_143);
      }
    }
    UmlModel rhs_164 = null;
    String arg_165 = null;
    arg_165 = ((XmlAttribute) getAttribute((XmlEntity) vdm_package, new String("name"))).val;
    HashSet arg_166 = new HashSet();
    HashSet var1_170 = new HashSet();
    var1_170 = (HashSet) classes.clone();
    var1_170.addAll(associations);
    arg_166 = (HashSet) var1_170.clone();
    arg_166.addAll(constraints);
    rhs_164 = new UmlModel(arg_165, arg_166);
    result = (IUmlModel) UTIL.clone(rhs_164);
  }
// ***** VDMTOOLS END Name=VisitXmlDocument#1|XmlDocument


// ***** VDMTOOLS START Name=exstractClass#1|XmlEntity KEEP=NO
  private IUmlClass exstractClass (final XmlEntity e) throws CGException {

    String tmpVal_3 = null;
    tmpVal_3 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_3;
    HashSet dBlocks = build_udefBlock((XmlEntity) e, name);
    Boolean vdm_abstract = null;
    String par_11 = null;
    par_11 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("isAbstract"))).val;
    vdm_abstract = (Boolean) StdLib.StringToBool(par_11);
    IUmlInheritanceClause supers = null;
    UmlVisibilityKind tmpVal_16 = null;
    tmpVal_16 = (UmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
    IUmlVisibilityKind visibility = null;
    visibility = (IUmlVisibilityKind) tmpVal_16;
    Boolean isStatic = new Boolean(false);
    Boolean active = null;
    {

      XmlAttribute a = (XmlAttribute) (XmlAttribute) getAttribute((XmlEntity) e, new String("isActive"));
      if (new Boolean(!UTIL.equals(a, null)).booleanValue()) {

        String par_28 = null;
        par_28 = a.val;
        active = (Boolean) StdLib.StringToBool(par_28);
      }
      else 
        active = new Boolean(false);
    }
    IUmlTemplateSignature template = null;
    return (IUmlClass) new UmlClass(name, dBlocks, vdm_abstract, supers, visibility, isStatic, active, template);
  }
// ***** VDMTOOLS END Name=exstractClass#1|XmlEntity


// ***** VDMTOOLS START Name=build_udefBlock#2|XmlEntity|String KEEP=NO
  private HashSet build_udefBlock (final XmlEntity e, final String name) throws CGException {

    Vector eList = null;
    XmlEntityList tmpRec_5 = null;
    tmpRec_5 = e.entities;
    eList = tmpRec_5.entities;
    HashSet tmpVal_7 = new HashSet();
    HashSet res_s_8 = new HashSet();
    {

      HashSet e_set_20 = new HashSet();
      HashSet riseq_22 = new HashSet();
      int max_23 = eList.size();
      for (int i_24 = 1; i_24 <= max_23; i_24++) 
        riseq_22.add(new Integer(i_24));
      e_set_20 = riseq_22;
      Integer i = null;
      {
        for (Iterator enm_26 = e_set_20.iterator(); enm_26.hasNext(); ) {

          Integer elem_25 = UTIL.NumberToInt(enm_26.next());
          i = elem_25;
          Boolean pred_14 = null;
          XmlEntity par_15 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= eList.size())) 
            par_15 = (XmlEntity) eList.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_14 = isAttributeType((XmlEntity) par_15, new String("uml:Property"));
          if (pred_14.booleanValue()) {

            IUmlProperty res_s_9 = null;
            XmlEntity par_10 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= eList.size())) 
              par_10 = (XmlEntity) eList.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_s_9 = (IUmlProperty) build_uProperty((XmlEntity) par_10, name);
            res_s_8.add(res_s_9);
          }
        }
      }
    }
    tmpVal_7 = res_s_8;
    HashSet props = new HashSet();
    props = tmpVal_7;
    HashSet rexpr_27 = new HashSet();
    rexpr_27 = new HashSet();
    rexpr_27.add(new UmlOwnedPropeties(props));
    return rexpr_27;
  }
// ***** VDMTOOLS END Name=build_udefBlock#2|XmlEntity|String


// ***** VDMTOOLS START Name=build_uProperty#2|XmlEntity|String KEEP=NO
  private IUmlProperty build_uProperty (final XmlEntity e, final String ownerClass) throws CGException {

    String tmpVal_4 = null;
    tmpVal_4 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_4;
    IUmlVisibilityKind tmpVal_8 = null;
    tmpVal_8 = (IUmlVisibilityKind) (IUmlVisibilityKind) GetVisibility((XmlAttribute) (XmlAttribute) getAttribute((XmlEntity) e, new String("visibility")));
    IUmlVisibilityKind visibility = null;
    visibility = (IUmlVisibilityKind) tmpVal_8;
    IUmlMultiplicityElement multiplicity = null;
    IUmlType tmpVal_13 = null;
    tmpVal_13 = (IUmlType) (IUmlType) lookUpType((XmlEntity) e);
    IUmlType type = null;
    type = (IUmlType) tmpVal_13;
    Boolean isReadOnly = new Boolean(false);
    String vdm_default = null;
    Boolean isComposite = new Boolean(false);
    Boolean isDerived = new Boolean(false);
    Boolean isStatic = new Boolean(false);
    IUmlType qualifier = null;
    return (IUmlProperty) new UmlProperty(name, visibility, multiplicity, type, isReadOnly, vdm_default, isComposite, isDerived, isStatic, ownerClass, qualifier);
  }
// ***** VDMTOOLS END Name=build_uProperty#2|XmlEntity|String


// ***** VDMTOOLS START Name=build_uConstraint#1|XmlEntity KEEP=NO
  private IUmlConstraint build_uConstraint (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    HashSet ids = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e1_set_17 = new HashSet(elist);
      XmlEntity p = null;
      {
        for (Iterator enm_19 = e1_set_17.iterator(); enm_19.hasNext(); ) {

          XmlEntity elem_18 = (XmlEntity) enm_19.next();
          p = (XmlEntity) elem_18;
          if (hasAttribute((XmlEntity) p, new String("xmi:idref")).booleanValue()) {

            String res_s_8 = null;
            res_s_8 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("xmi:idref"))).val;
            res_s_7.add(res_s_8);
          }
        }
      }
    }
    ids = res_s_7;
    String specification = null;
    Vector unArg_21 = null;
    HashSet par_22 = new HashSet();
    HashSet res_s_23 = new HashSet();
    {

      HashSet e1_set_33 = new HashSet(elist);
      XmlEntity p = null;
      {
        for (Iterator enm_35 = e1_set_33.iterator(); enm_35.hasNext(); ) {

          XmlEntity elem_34 = (XmlEntity) enm_35.next();
          p = (XmlEntity) elem_34;
          Boolean pred_27 = null;
          String var1_28 = null;
          var1_28 = p.name;
          pred_27 = new Boolean(UTIL.equals(var1_28, new String("body")));
          if (pred_27.booleanValue()) {

            String res_s_24 = null;
            XmlData tmpRec_25 = null;
            tmpRec_25 = p.data;
            res_s_24 = tmpRec_25.data;
            res_s_23.add(res_s_24);
          }
        }
      }
    }
    par_22 = res_s_23;
    unArg_21 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_22));
    specification = UTIL.ConvertToString(unArg_21.get(0));
    return (IUmlConstraint) new UmlConstraint(ids, specification);
  }
// ***** VDMTOOLS END Name=build_uConstraint#1|XmlEntity


// ***** VDMTOOLS START Name=build_uAssociation#1|XmlEntity KEEP=NO
  private IUmlAssociation build_uAssociation (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    HashSet tmpVal_6 = new HashSet();
    HashSet res_s_7 = new HashSet();
    {

      HashSet e_set_17 = new HashSet();
      HashSet riseq_19 = new HashSet();
      int max_20 = elist.size();
      for (int i_21 = 1; i_21 <= max_20; i_21++) 
        riseq_19.add(new Integer(i_21));
      e_set_17 = riseq_19;
      Integer i = null;
      {
        for (Iterator enm_23 = e_set_17.iterator(); enm_23.hasNext(); ) {

          Integer elem_22 = UTIL.NumberToInt(enm_23.next());
          i = elem_22;
          Boolean pred_11 = null;
          XmlEntity par_12 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            par_12 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          pred_11 = isAttributeType((XmlEntity) par_12, new String("uml:Property"));
          if (pred_11.booleanValue()) {

            XmlEntity res_s_8 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              res_s_8 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            res_s_7.add(res_s_8);
          }
        }
      }
    }
    tmpVal_6 = res_s_7;
    HashSet props = new HashSet();
    props = tmpVal_6;
    HashSet ownedNavivableEnds = new HashSet();
    HashSet res_s_25 = new HashSet();
    {

      XmlEntity p = null;
      {
        for (Iterator enm_36 = props.iterator(); enm_36.hasNext(); ) {

          XmlEntity elem_35 = (XmlEntity) enm_36.next();
          p = (XmlEntity) elem_35;
          if (hasAttributeValue((XmlEntity) p, new String("name"), new String("")).booleanValue()) {
            res_s_25.add((IUmlProperty) build_uProperty((XmlEntity) p, new String("")));
          }
        }
      }
    }
    ownedNavivableEnds = res_s_25;
    Vector one = null;
    one = (Vector) UTIL.ConvertToList(Util.SetToSeq(ownedNavivableEnds));
    IUmlType ownerClassType = null;
    Vector unArg_40 = null;
    {

      Vector res_l_41 = new Vector();
      HashSet resBind_s_43 = new HashSet();
      HashSet riseq_47 = new HashSet();
      int max_48 = one.size();
      for (int i_49 = 1; i_49 <= max_48; i_49++) 
        riseq_47.add(new Integer(i_49));
      resBind_s_43 = riseq_47;
      Vector bind_l_42 = null;
      bind_l_42 = UTIL.Sort(resBind_s_43);
      Integer i = null;
      for (Iterator enm_55 = bind_l_42.iterator(); enm_55.hasNext(); ) {

        Integer e_45 = UTIL.NumberToInt(enm_55.next());
        i = e_45;
        IUmlType reselem_50 = null;
        IUmlProperty obj_51 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= one.size())) 
          obj_51 = (IUmlProperty) one.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        reselem_50 = (IUmlType) obj_51.getType();
        res_l_41.add(reselem_50);
      }
      unArg_40 = res_l_41;
    }
    ownerClassType = (IUmlType) unArg_40.get(0);
    String tmpVal_56 = null;
    {

      IUmlClassNameType ct = (IUmlClassNameType) ownerClassType;
      tmpVal_56 = ct.getName();
    }
    String ownerClass = null;
    ownerClass = tmpVal_56;
    HashSet ownedEnds = new HashSet();
    HashSet res_s_60 = new HashSet();
    {

      XmlEntity p = null;
      {
        for (Iterator enm_74 = props.iterator(); enm_74.hasNext(); ) {

          XmlEntity elem_73 = (XmlEntity) enm_74.next();
          p = (XmlEntity) elem_73;
          Boolean pred_64 = null;
          Integer var1_65 = null;
          String unArg_66 = null;
          unArg_66 = ((XmlAttribute) getAttribute((XmlEntity) p, new String("name"))).val;
          var1_65 = new Integer(unArg_66.length());
          pred_64 = new Boolean((var1_65.intValue()) > (new Integer(0).intValue()));
          if (pred_64.booleanValue()) {
            res_s_60.add((IUmlProperty) build_uProperty((XmlEntity) p, ownerClass));
          }
        }
      }
    }
    ownedEnds = res_s_60;
    String tmpVal_75 = null;
    tmpVal_75 = ((XmlAttribute) getAttribute((XmlEntity) e, new String("name"))).val;
    String name = null;
    name = tmpVal_75;
    String id = null;
    id = ((XmlAttribute) getAttribute((XmlEntity) e, new String("xmi:id"))).val;
    return (IUmlAssociation) new UmlAssociation(ownedEnds, ownedNavivableEnds, name, id);
  }
// ***** VDMTOOLS END Name=build_uAssociation#1|XmlEntity


// ***** VDMTOOLS START Name=lookUpType#1|XmlEntity KEEP=NO
  private IUmlType lookUpType (final XmlEntity e) throws CGException {

    Vector elist = null;
    XmlEntityList tmpRec_4 = null;
    tmpRec_4 = e.entities;
    elist = tmpRec_4.entities;
    String id = null;
    Vector unArg_7 = null;
    HashSet par_8 = new HashSet();
    HashSet var1_9 = new HashSet();
    HashSet res_s_10 = new HashSet();
    {

      HashSet e_set_24 = new HashSet();
      HashSet riseq_26 = new HashSet();
      int max_27 = elist.size();
      for (int i_28 = 1; i_28 <= max_27; i_28++) 
        riseq_26.add(new Integer(i_28));
      e_set_24 = riseq_26;
      Integer i = null;
      {
        for (Iterator enm_30 = e_set_24.iterator(); enm_30.hasNext(); ) {

          Integer elem_29 = UTIL.NumberToInt(enm_30.next());
          i = elem_29;
          Boolean pred_17 = null;
          String var1_18 = null;
          XmlEntity tmpRec_19 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
            tmpRec_19 = (XmlEntity) elist.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_18 = tmpRec_19.name;
          pred_17 = new Boolean(UTIL.equals(var1_18, new String("type")));
          if (pred_17.booleanValue()) {

            String res_s_11 = null;
            XmlAttribute tmpRec_12 = null;
            XmlEntity par_13 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= elist.size())) 
              par_13 = (XmlEntity) elist.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            tmpRec_12 = (XmlAttribute) getAttribute((XmlEntity) par_13, new String("xmi:idref"));
            res_s_11 = tmpRec_12.val;
            res_s_10.add(res_s_11);
          }
        }
      }
    }
    var1_9 = res_s_10;
    HashSet var2_31 = new HashSet();
    HashSet res_s_32 = new HashSet();
    {

      HashSet e_set_39 = new HashSet();
      e_set_39 = new HashSet();
      e_set_39.add((XmlAttribute) getAttribute((XmlEntity) e, new String("type")));
      XmlAttribute a = null;
      {
        for (Iterator enm_44 = e_set_39.iterator(); enm_44.hasNext(); ) {

          XmlAttribute elem_43 = (XmlAttribute) enm_44.next();
          a = (XmlAttribute) elem_43;
          if (new Boolean(!UTIL.equals(a, null)).booleanValue()) {

            String res_s_33 = null;
            res_s_33 = a.val;
            res_s_32.add(res_s_33);
          }
        }
      }
    }
    var2_31 = res_s_32;
    par_8 = (HashSet) var1_9.clone();
    par_8.addAll(var2_31);
    unArg_7 = (Vector) UTIL.ConvertToList(Util.SetToSeq(par_8));
    id = UTIL.ConvertToString(unArg_7.get(0));
    String tmpVal_45 = null;
    Boolean cond_47 = null;
    cond_47 = new Boolean(classesTypeMap.containsKey(id));
    if (cond_47.booleanValue()) 
      tmpVal_45 = UTIL.ConvertToString(classesTypeMap.get(id));
    else 
      tmpVal_45 = null;
    String typeName = null;
    typeName = tmpVal_45;
    boolean succ_52 = true;
    {

      succ_52 = true;
      if (!UTIL.equals(typeName, null)) 
        succ_52 = false;
      if (succ_52) 
        return (IUmlType) new UmlIntegerType();
      else {

        succ_52 = true;
        if (!UTIL.equals(typeName, new String("String"))) 
          succ_52 = false;
        if (succ_52) 
          return (IUmlType) new UmlStringType();
        else {

          succ_52 = true;
          if (!UTIL.equals(typeName, new String("int"))) 
            succ_52 = false;
          if (succ_52) 
            return (IUmlType) new UmlIntegerType();
          else {

            succ_52 = true;
            if (!UTIL.equals(typeName, new String("bool"))) 
              succ_52 = false;
            if (succ_52) 
              return (IUmlType) new UmlBoolType();
            else {

              succ_52 = true;
              if (!UTIL.equals(typeName, new String("char"))) 
                succ_52 = false;
              if (succ_52) 
                return (IUmlType) new UmlCharType();
              else {

                succ_52 = true;
                if (!UTIL.equals(typeName, new String("unlimitedNatural"))) 
                  succ_52 = false;
                if (succ_52) 
                  return (IUmlType) new UmlUnlimitedNatural();
                else 
                  return (IUmlType) new UmlClassNameType(typeName);
              }
            }
          }
        }
      }
    }
  }
// ***** VDMTOOLS END Name=lookUpType#1|XmlEntity


// ***** VDMTOOLS START Name=VisitXmlEntity#1|XmlEntity KEEP=NO
  public void VisitXmlEntity (final XmlEntity e) throws CGException {

    HashSet rhs_2 = new HashSet();
    HashSet var2_4 = new HashSet();
    HashSet res_s_5 = new HashSet();
    {

      HashSet e_set_19 = new HashSet();
      e_set_19 = new HashSet();
      e_set_19.add(e);
      XmlEntity entity = null;
      {
        for (Iterator enm_22 = e_set_19.iterator(); enm_22.hasNext(); ) {

          XmlEntity elem_21 = (XmlEntity) enm_22.next();
          entity = (XmlEntity) elem_21;
          Boolean pred_8 = null;
          {
            if ((pred_8 = isAttributeType((XmlEntity) entity, new String("uml:Class"))).booleanValue()) {

              Boolean var2_12 = null;
              String var1_13 = null;
              var1_13 = ((XmlAttribute) getAttribute((XmlEntity) entity, new String("name"))).val;
              var2_12 = new Boolean(!primiticeTypes.contains(var1_13));
              pred_8 = var2_12;
            }
          }
          if (pred_8.booleanValue()) {
            res_s_5.add((IUmlClass) exstractClass((XmlEntity) entity));
          }
        }
      }
    }
    var2_4 = res_s_5;
    rhs_2 = (HashSet) classes.clone();
    rhs_2.addAll(var2_4);
    classes = (HashSet) UTIL.clone(rhs_2);
    HashSet rhs_23 = new HashSet();
    HashSet var2_25 = new HashSet();
    HashSet res_s_26 = new HashSet();
    {

      HashSet e_set_33 = new HashSet();
      e_set_33 = new HashSet();
      e_set_33.add(e);
      XmlEntity entity = null;
      {
        for (Iterator enm_36 = e_set_33.iterator(); enm_36.hasNext(); ) {

          XmlEntity elem_35 = (XmlEntity) enm_36.next();
          entity = (XmlEntity) elem_35;
          if (isAttributeType((XmlEntity) entity, new String("uml:Association")).booleanValue()) {
            res_s_26.add((IUmlAssociation) build_uAssociation((XmlEntity) entity));
          }
        }
      }
    }
    var2_25 = res_s_26;
    rhs_23 = (HashSet) associations.clone();
    rhs_23.addAll(var2_25);
    associations = (HashSet) UTIL.clone(rhs_23);
  }
// ***** VDMTOOLS END Name=VisitXmlEntity#1|XmlEntity


// ***** VDMTOOLS START Name=hasAttribute#2|XmlEntity|String KEEP=NO
  private Boolean hasAttribute (final XmlEntity e, final String name) throws CGException {

    Boolean rexpr_3 = null;
    {

      Vector list = null;
      XmlAttributeList tmpRec_6 = null;
      tmpRec_6 = e.attributes;
      list = tmpRec_6.attributes;
      boolean tmpQuant_8 = false;
      {

        HashSet e_set_16 = new HashSet();
        HashSet riseq_18 = new HashSet();
        int max_19 = list.size();
        for (int i_20 = 1; i_20 <= max_19; i_20++) 
          riseq_18.add(new Integer(i_20));
        e_set_16 = riseq_18;
        Integer i = null;
        {
          for (Iterator enm_22 = e_set_16.iterator(); enm_22.hasNext() && !tmpQuant_8; ) {

            Integer elem_21 = UTIL.NumberToInt(enm_22.next());
            i = elem_21;
            Boolean pred_9 = null;
            String var1_10 = null;
            XmlAttribute tmpRec_11 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              tmpRec_11 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_10 = tmpRec_11.name;
            pred_9 = new Boolean(UTIL.equals(var1_10, name));
            if (pred_9.booleanValue()) 
              tmpQuant_8 = true;
          }
        }
      }
      rexpr_3 = new Boolean(tmpQuant_8);
    }
    return rexpr_3;
  }
// ***** VDMTOOLS END Name=hasAttribute#2|XmlEntity|String


// ***** VDMTOOLS START Name=hasAttributeValue#3|XmlEntity|String|String KEEP=NO
  private Boolean hasAttributeValue (final XmlEntity e, final String name, final String val) throws CGException {

    Boolean rexpr_4 = null;
    {

      Vector list = null;
      XmlAttributeList tmpRec_7 = null;
      tmpRec_7 = e.attributes;
      list = tmpRec_7.attributes;
      boolean tmpQuant_9 = false;
      {

        HashSet e_set_24 = new HashSet();
        HashSet riseq_26 = new HashSet();
        int max_27 = list.size();
        for (int i_28 = 1; i_28 <= max_27; i_28++) 
          riseq_26.add(new Integer(i_28));
        e_set_24 = riseq_26;
        Integer i = null;
        {
          for (Iterator enm_30 = e_set_24.iterator(); enm_30.hasNext() && !tmpQuant_9; ) {

            Integer elem_29 = UTIL.NumberToInt(enm_30.next());
            i = elem_29;
            Boolean pred_10 = null;
            Boolean var1_11 = null;
            String var1_12 = null;
            XmlAttribute tmpRec_13 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
              tmpRec_13 = (XmlAttribute) list.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var1_12 = tmpRec_13.name;
            var1_11 = new Boolean(UTIL.equals(var1_12, name));
            {
              if ((pred_10 = var1_11).booleanValue()) {

                Boolean var2_17 = null;
                String var1_18 = null;
                XmlAttribute tmpRec_19 = null;
                if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
                  tmpRec_19 = (XmlAttribute) list.get(i.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var1_18 = tmpRec_19.val;
                var2_17 = new Boolean(UTIL.equals(var1_18, val));
                pred_10 = var2_17;
              }
            }
            if (pred_10.booleanValue()) 
              tmpQuant_9 = true;
          }
        }
      }
      rexpr_4 = new Boolean(tmpQuant_9);
    }
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=hasAttributeValue#3|XmlEntity|String|String


// ***** VDMTOOLS START Name=isAttributeType#2|XmlEntity|String KEEP=NO
  private Boolean isAttributeType (final XmlEntity e, final String val) throws CGException {
    return hasAttributeValue((XmlEntity) e, new String("xmi:type"), val);
  }
// ***** VDMTOOLS END Name=isAttributeType#2|XmlEntity|String


// ***** VDMTOOLS START Name=getAttribute#2|XmlEntity|String KEEP=NO
  private XmlAttribute getAttribute (final XmlEntity e, final String name) throws CGException {

    Vector list = null;
    XmlAttributeList tmpRec_5 = null;
    tmpRec_5 = e.attributes;
    list = tmpRec_5.attributes;
    Vector attList = null;
    {

      Vector res_l_8 = new Vector();
      HashSet resBind_s_10 = new HashSet();
      HashSet riseq_14 = new HashSet();
      int max_15 = list.size();
      for (int i_16 = 1; i_16 <= max_15; i_16++) 
        riseq_14.add(new Integer(i_16));
      resBind_s_10 = riseq_14;
      Vector bind_l_9 = null;
      bind_l_9 = UTIL.Sort(resBind_s_10);
      Integer i = null;
      for (Iterator enm_27 = bind_l_9.iterator(); enm_27.hasNext(); ) {

        Integer e_12 = UTIL.NumberToInt(enm_27.next());
        i = e_12;
        Boolean pred_20 = null;
        String var1_21 = null;
        XmlAttribute tmpRec_22 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
          tmpRec_22 = (XmlAttribute) list.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_21 = tmpRec_22.name;
        pred_20 = new Boolean(UTIL.equals(var1_21, name));
        if (pred_20.booleanValue()) {

          XmlAttribute reselem_17 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= list.size())) 
            reselem_17 = (XmlAttribute) list.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          res_l_8.add(reselem_17);
        }
      }
      attList = res_l_8;
    }
    if (new Boolean((new Integer(attList.size()).intValue()) > (new Integer(0).intValue())).booleanValue()) 
      return (XmlAttribute) (XmlAttribute) attList.get(0);
    else 
      return null;
  }
// ***** VDMTOOLS END Name=getAttribute#2|XmlEntity|String


// ***** VDMTOOLS START Name=GetVisibility#1|XmlAttribute KEEP=NO
  static private IUmlVisibilityKind GetVisibility (final XmlAttribute v) throws CGException {
    if (new Boolean(!UTIL.equals(v, null)).booleanValue()) {

      String selRes_8 = null;
      selRes_8 = v.val;
      boolean succ_7 = true;
      {

        succ_7 = true;
        if (!UTIL.equals(selRes_8, new String("private"))) 
          succ_7 = false;
        if (succ_7) 
          return (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
        else {

          succ_7 = true;
          if (!UTIL.equals(selRes_8, new String("public"))) 
            succ_7 = false;
          if (succ_7) 
            return (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPUBLIC);
          else {

            succ_7 = true;
            if (!UTIL.equals(selRes_8, new String("protected"))) 
              succ_7 = false;
            if (succ_7) 
              return (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPROTECTED);
          }
        }
      }
    }
    else 
      return (IUmlVisibilityKind) new UmlVisibilityKind(UmlVisibilityKindQuotes.IQPRIVATE);
    throw new CGException();
  }
// ***** VDMTOOLS END Name=GetVisibility#1|XmlAttribute


// ***** VDMTOOLS START Name=VisitXmlAttribute#1|XmlAttribute KEEP=NO
  public void VisitXmlAttribute (final XmlAttribute var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=VisitXmlAttribute#1|XmlAttribute


// ***** VDMTOOLS START Name=VisitXmlData#1|XmlData KEEP=NO
  public void VisitXmlData (final XmlData var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=VisitXmlData#1|XmlData

}
;
